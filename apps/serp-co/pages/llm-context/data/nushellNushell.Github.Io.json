[
  {
    "owner": "nushell",
    "repo": "nushell.github.io",
    "content": "TITLE: Documenting Custom Commands in Nushell\nDESCRIPTION: Creates a documented command 'vip-greet' that includes help text for both the command and its parameters using comments, demonstrating Nushell's built-in documentation system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_32\n\nLANGUAGE: nu\nCODE:\n```\n# Greet guests along with a VIP\n#\n# Use for birthdays, graduation parties,\n# retirements, and any other event which\n# celebrates an event # for a particular\n# person.\ndef vip-greet [\n  vip: string        # The special guest\n   ...names: string  # The other guests\n] {\n  for $name in $names {\n    print $\"Hello, ($name)!\"\n  }\n\n  print $\"And a special welcome to our VIP today, ($vip)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Command in Nushell\nDESCRIPTION: Defines a simple 'greet' custom command that takes a name parameter and returns a greeting message. This demonstrates the basic syntax for defining commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [name] {\n  $\"Hello, ($name)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Range Items in Nushell\nDESCRIPTION: Demonstrates filtering items of a range according to a condition using the 'filter' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/filter.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n9..13 | filter {|el| $el mod 2 != 0}\n```\n\n----------------------------------------\n\nTITLE: Persistent SSH Agent Management in Nushell\nDESCRIPTION: Advanced script that checks for existing SSH agent process and starts new one if needed, with state persistence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/ssh_agent.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ndo --env {\n    let ssh_agent_file = (\n        $nu.temp-path | path join $\"ssh-agent-($env.USER? | default $env.USERNAME).nuon\"\n    )\n\n    if ($ssh_agent_file | path exists) {\n        let ssh_agent_env = open ($ssh_agent_file)\n        if ($\"/proc/($ssh_agent_env.SSH_AGENT_PID)\" | path exists) {\n            load-env $ssh_agent_env\n            return\n        } else {\n            rm $ssh_agent_file\n        }\n    }\n\n    let ssh_agent_env = ^ssh-agent -c\n        | lines\n        | first 2\n        | parse \"setenv {name} {value};\"\n        | transpose --header-row\n        | into record\n    load-env $ssh_agent_env\n    $ssh_agent_env | save --force $ssh_agent_file\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Table in Nushell\nDESCRIPTION: This Nushell snippet demonstrates converting a JSON formatted string to a structured table. The command does not require any external dependencies. It takes a JSON string as input and outputs a Nushell table. The JSON format should be valid and, without flags, it will parse typical JSON.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_json.md#2025-04-19_snippet_0\n\nLANGUAGE: Nushell\nCODE:\n```\n> '{ \"a\": 1 }' | from json\n╭───┬───╮\n│ a │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Using If Conditional Expression in Nushell\nDESCRIPTION: Demonstrates how to use the 'if' command as an expression that returns values based on conditions. This example shows a simple conditional that can be incorporated into a pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n'foo' | if $in == 'foo' { 1 } else { 0 } | $in + 2\n# => 3\n```\n\n----------------------------------------\n\nTITLE: Complete Nushell Length Calculator Plugin Implementation in Python\nDESCRIPTION: Full implementation of a Nushell plugin that calculates string lengths. Includes protocol handling, message encoding, error handling, and core plugin functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\nimport json\nimport sys\n\n\ndef signature():\n    return {\n        \"sig\": {\n            \"name\": \"len\",\n            \"description\": \"calculates the length of its input\",\n            \"extra_description\": \"\",\n            \"search_terms\": [],\n            \"required_positional\": [],\n            \"optional_positional\": [],\n            \"rest_positional\": None,\n            \"vectorizes_over_list\": False,\n            \"named\": [],\n            \"input_type\": \"String\",\n            \"output_type\":\"Int\",\n            \"input_output_types\":[],\n            \"allow_variants_without_examples\": True,\n            \"is_filter\": False,\n            \"creates_scope\": False,\n            \"allows_unknown_args\":False,\n            \"category\":\"Default\"\n        },\n        \"examples\": []\n    }\n\n\ndef send_encoder():\n    sys.stdout.write(chr(4))\n    for ch in \"json\":\n        sys.stdout.write(chr(ord(ch)))\n    sys.stdout.flush()\n\n\ndef send_hello():\n    hello = {\n        \"Hello\": {\n            \"protocol\": \"nu-plugin\",\n            \"version\": \"0.90.2\",\n            \"features\": []\n        }\n    }\n    sys.stdout.writelines([json.dumps(hello)])\n    sys.stdout.flush()\n\n\ndef send_response(id, response):\n    msg = {\n        \"CallResponse\": [id, response]\n    }\n    sys.stdout.writelines([json.dumps(msg)])\n    sys.stdout.flush()\n\n\ndef send_error(id, error_msg, span):\n    error = {\n        \"Error\": {\n            \"label\": \"Len Error\",\n            \"msg\": error_msg,\n            \"span\": span,\n        }\n    }\n    send_response(id, error)\n\n\ndef handle_call(id, call_info):\n    try:\n        input = call_info[\"input\"][\"Value\"][\"String\"]\n        output = {\n            \"PipelineData\": {\n                \"Value\": {\n                    \"Int\": {\n                        \"val\": len(input[\"val\"]),\n                        \"span\": input[\"span\"]\n                    }\n                }\n            }\n        }\n        send_response(id, output)\n    except:\n        send_error(\n            id,\n            \"Could not process input\",\n            call_info[\"call\"][\"head\"][\"span\"]\n        )\n\n\nif __name__ == \"__main__\":\n    send_encoder()\n    send_hello()\n    for line in sys.stdin:\n        input = json.loads(line)\n        if \"Hello\" in input:\n            pass\n        elif input == \"Goodbye\":\n            break\n        elif \"Call\" in input:\n            [id, call] = input[\"Call\"]\n            if call == \"Metadata\":\n                send_response(id, {\n                    \"Metadata\": {\n                        \"version\": \"0.1.0\",\n                    }\n                })\n            elif call == \"Signature\":\n                send_response(id, {\"Signature\": [signature()]})\n            elif \"Run\" in call:\n                handle_call(id, call[\"Run\"])\n            else:\n                send_error(id, \"Unknown call passed to plugin\", {\"start\": 0, \"end\": 0})\n        else:\n            sys.stderr.writelines([\"Unknown message passed to plugin\"])\n            sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Basic Test Framework Implementation\nDESCRIPTION: Implementation of a basic test framework that discovers and runs test functions automatically.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nuse std/assert\n\nsource fib.nu\n\ndef main [] {\n    print \"Running tests...\"\n\n    let test_commands = (\n        scope commands\n            | where ($it.type == \"custom\")\n                and ($it.name | str starts-with \"test \")\n                and not ($it.description | str starts-with \"ignore\")\n            | get name\n            | each { |test| [$\"print 'Running test: ($test)'\" , $test] } | flatten\n            | str join \"; \"\n    )\n\n    nu --commands $\"source ($env.CURRENT_FILE); ($test_commands)\"\n    print \"Tests completed successfully\"\n}\n\ndef \"test fib\" [] {\n    for t in [\n        [input, expected];\n        [0, 0],\n        [1, 1],\n        [2, 1],\n        [3, 2],\n        [4, 3],\n        [5, 5],\n        [6, 8],\n        [7, 13]\n    ] {\n        assert equal (fib $t.input) $t.expected\n    }\n}\n\n# ignore\ndef \"test show-ignored-test\" [] {\n    print \"This test will not be executed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command with Flags in Nushell\nDESCRIPTION: This snippet demonstrates how to define and use flags in custom Nushell commands. It includes examples of long flags, short flags, and boolean flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_24\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [\n  name: string\n  --age: int\n] {\n    {\n      name: $name\n      age: $age\n    }\n}\n\ngreet Lucia --age 23\n# => ╭──────┬───────╮\n# => │ name │ Lucia │\n# => │ age  │ 23    │\n# => ╰──────┴───────╯\n\ngreet --age 39 Ali\n# => ╭──────┬─────╮\n# => │ name │ Ali │\n# => │ age  │ 39  │\n# => ╰──────┴─────╯\n\ngreet World\n# => ╭──────┬───────╮\n# => │ name │ World │\n# => │ age  │       │\n# => ╰──────┴───────╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [\n  name: string\n  --age (-a): int\n] {\n    {\n      name: $name\n      age: $age\n    }\n  }\n\ngreet Akosua -a 35\n# => ╭──────┬────────╮\n# => │ name │ Akosua │\n# => │ age  │ 35     │\n# => ╰──────┴────────╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [\n  name: string\n  --caps\n] {\n    let greeting = $\"Hello, ($name)!\"\n    if $caps {\n      $greeting | str upcase\n    } else {\n      $greeting\n    }\n}\n\ngreet Miguel --caps\n# => HELLO, MIGUEL!\n\ngreet Chukwuemeka\n# => Hello, Chukwuemeka!\n\ngreet Giulia --caps=false\n# => Hello, Giulia!\n\ngreet Hiroshi --caps=true\n# => HELLO, HIROSHI!\n```\n\n----------------------------------------\n\nTITLE: Defining a custom command with pipeline redirection in Nushell\nDESCRIPTION: This snippet defines a custom command in Nushell that demonstrates pipeline behavior with multiple commands and redirections.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/pipelines.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\ndef custom-cmd [] {\n    ^cmd1 | ^cmd2\n    ^cmd3 | ^cmd4\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command with Optional Positional Parameters in Nushell\nDESCRIPTION: This snippet shows how to define a custom 'greet' command with an optional positional parameter. It includes two different implementations and examples of usage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_21\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [name?: string] {\n  $\"Hello, ($name | default 'You')\"\n}\n\ngreet\n# => Hello, You\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [name?: string] {\n  match $name {\n    null => \"Hello! I don't know your name!\"\n    _ => $\"Hello, ($name)!\"\n  }\n}\n\ngreet\n# => Hello! I don't know your name!\n```\n\n----------------------------------------\n\nTITLE: Creating a Command with Spaces in the Name\nDESCRIPTION: Demonstrates how to define a command with spaces in its name by surrounding the name with quotes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\ndef \"custom command\" [] {\n  \"This is a custom command with a space in the name!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command in Module\nDESCRIPTION: Demonstrates how to define a custom command within a module, use it, and call it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/module.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export def foo [] { \"foo\" } }; use spam foo; foo\n```\n\n----------------------------------------\n\nTITLE: Removing List Elements in Nushell\nDESCRIPTION: Demonstrates removing elements from lists using skip and drop commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nlet colors = [red yellow green purple]\nlet colors = ($colors | skip 1)\nlet colors = ($colors | drop 2)\n$colors\n```\n\n----------------------------------------\n\nTITLE: Opening and Viewing a TOML File in Nushell\nDESCRIPTION: This snippet demonstrates how to open a TOML file and display its contents as a table in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml\n```\n\n----------------------------------------\n\nTITLE: Filtering and Displaying String Commands with Vue.js\nDESCRIPTION: A Vue.js script that filters pages containing string-related commands from the Nushell documentation. It works by accessing pages from a temporary variable, filtering those in the 'strings' category, and sorting them alphabetically for display in a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/strings.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('strings'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nushell Semicolons in Pipelines\nDESCRIPTION: This snippet illustrates the use of semicolons in conjunction with pipelines. When a semicolon is used, no output data is produced to be piped, affecting the use of `$in`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n\"line1; line2 | line3\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Column Values from Table in Nushell\nDESCRIPTION: This example demonstrates how to extract values from a specific column (name) of a table using the get command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nls | get name\n```\n\n----------------------------------------\n\nTITLE: Exploring Structured Command Data in Nushell\nDESCRIPTION: Demonstrates the use of the 'explore' command to interactively view and navigate through the structured output of 'help commands'. This allows for scrolling and drilling down into nested data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/quick_tour.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands | explore\n```\n\n----------------------------------------\n\nTITLE: MacOS Open Command Alias Configuration\nDESCRIPTION: Configuration to handle the conflict between Nushell's built-in open command and MacOS system open command. Creates aliases to maintain access to both functionalities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\nalias nu-open = open\nalias open = ^open\n```\n\n----------------------------------------\n\nTITLE: Nushell module with subcommand example\nDESCRIPTION: This code snippet demonstrates how to add a subcommand to a Nushell module using a space in the function name. The snippet defines a main increment function as well as the increment by subcommand, which adds a given amount to an input integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nexport def main []: int -> int {\n    $in + 1\n}\n\nexport def \"increment by\" [amount: int]: int -> int {\n    $in + $amount\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Nushell and JSON\nDESCRIPTION: Shows two equivalent ways to create records - directly in Nushell syntax and by parsing JSON. Both methods create a record with fruit quantities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n# Nushell\n{ \"apples\": 543, \"bananas\": 411, \"oranges\": 0 }\n# JSON\n'{ \"apples\": 543, \"bananas\": 411, \"oranges\": 0 }' | from json\n```\n\n----------------------------------------\n\nTITLE: Viewing All Nushell Commands as a Table\nDESCRIPTION: Shows how to display all available Nushell commands (excluding externals) as a single large table. This provides an overview of all built-in, plugin, and custom commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/quick_tour.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands\n```\n\n----------------------------------------\n\nTITLE: Converting Lists to Tables in Nushell\nDESCRIPTION: Demonstrates converting a list to a table using wrap command and adding computed columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\nlet zones = [UTC CET Europe/Moscow Asia/Yekaterinburg]\n\n$zones | wrap 'Zone' | upsert Time {|row| (date now | date to-timezone $row.Zone | format date '%Y.%m.%d %H:%M')}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with do Command in Nushell\nDESCRIPTION: Demonstrates how to handle errors that might occur during command execution using the do command with the --ignore_errors flag. This approach helps to continue processing even when some steps might fail.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_20\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | do -i { split column \"»¦«\" commit subject name email date } | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 365day)) | group-by name | transpose\n```\n\n----------------------------------------\n\nTITLE: Defining Completion Command in Nushell\nDESCRIPTION: This snippet defines a custom completion command in Nushell that provides suggestions for command arguments. The command `animals` returns a list of strings representing potential completions, which are used in another command `my-command` for completing the `animal` argument. Key parameters include the shape annotation and a defined list of completions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_completions.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n# Completion command\ndef animals [] { [\"cat\", \"dog\", \"eel\" ] }\n# Command to be completed\ndef my-command [animal: string@animals] { print $animal }\nmy-command\n# => cat                 dog                 eel\n```\n\n----------------------------------------\n\nTITLE: Typed Command Definition\nDESCRIPTION: Shows how to define a command with type signature for input and output validation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/def.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> def only_int []: int -> int { $in }; 42 | only_int\n42\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Configuration Values\nDESCRIPTION: Examples showing the correct way to modify individual configuration settings without overwriting the entire config record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n  show_banner: false\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.show_banner = false\n```\n\n----------------------------------------\n\nTITLE: Mutable Variables in Nushell\nDESCRIPTION: Demonstrates declaring and modifying mutable variables using the 'mut' keyword and assignment operators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nmut val = 42\n$val += 27\n$val\n# => 69\n```\n\n----------------------------------------\n\nTITLE: Building Nushell from source with Cargo\nDESCRIPTION: This command builds Nushell from source using Cargo, and then runs the built executable.  This compiles the Nushell code and its dependencies.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n\"From there, we can build and run Nu with:\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Configurations\nDESCRIPTION: This example shows how to customize Nushell color settings for various primitive and special values using multiple color syntaxes. Users can set foreground (fg), background (bg), and attributes (attr) for a range of configurable colors, affecting the display styling in the shell based on personal preferences. The snippet exemplifies how these definitions can be part of a configuration object.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nlet config = {\n    color_config: {\n        separator: purple\n        leading_trailing_space_bg: \"#ffffff\"\n        header: gb\n        date: wd\n        filesize: c\n        row_index: cb\n        bool: red\n        int: green\n        duration: blue_bold\n        range: purple\n        float: red\n        string: white\n        nothing: red\n        binary: red\n        cellpath: cyan\n        hints: dark_gray\n    }\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\nlet config = {\n    color_config: {\n        separator: \"#88b719\" # this sets only the foreground color like PR #486\n        leading_trailing_space_bg: white # this sets only the foreground color in the original style\n        header: { # this is like PR #489\n            fg: \"#B01455\", # note, quotes are required on the values with hex colors\n            bg: \"#ffb900\", # note, commas are not required, it could also be all on one line\n            attr: bli # note, there are no quotes around this value. it works with or without quotes\n        }\n        date: \"#75507B\"\n        filesize: \"#729fcf\"\n        row_index: {\n            # note, that this is another way to set only the foreground, no need to specify bg and attr\n            fg: \"#e50914\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening JSON File and Getting Version - Nushell\nDESCRIPTION: This snippet demonstrates how to open a JSON file using the 'open' command and extract the version of a project from it using the 'get' command. It illustrates Nushell's ability to treat JSON as a structured data format rather than plain text.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen editors/vscode/package.json | get version\n# => 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Enabling External Completions in Nushell\nDESCRIPTION: This snippet configures external completions in Nushell by setting up the `external_completer` in `config.nu`. The closure evaluates an external completer, such as Carapace, when Nushell completions are unavailable. The closure takes the current command as a list and outputs records with `value` and `description` keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_completions.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.completions.external = {\n    enable: true\n    max_results: 100\n    completer: $completer\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\nlet carapace_completer = {|spans|\n    carapace $spans.0 nushell ...$spans | from json\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Data Formats in Nushell\nDESCRIPTION: The 'from' command in Nushell is designed to parse a wide variety of data formats into structured data that can be utilized within Nushell. This includes built-in formats like CSV, JSON, and XML, as well as plugin-based formats like EML and VCF. Each subcommand handles a specific type of data, converting it into tables or records as required by the context. Key dependencies include Nushell itself and any necessary plugins for format-specific parsing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> from {flags} \n```\n\n----------------------------------------\n\nTITLE: Implementing String Interpolation in Nushell\nDESCRIPTION: Demonstrates string interpolation in Nushell, which allows embedding expressions within strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nlet name = \"Alice\"\n$\"greetings, ($name)\"\n# => greetings, Alice\n\n$\"2 + 2 is (2 + 2) \\(you guessed it!)\"\n# => 2 + 2 is 4 (you guessed it!)\n```\n\n----------------------------------------\n\nTITLE: Basic Match Command in Nushell\nDESCRIPTION: Demonstrates the 'match' command which acts like a switch statement, executing different code based on which value matches the input. Returns the result of the matching branch.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nmatch 3 {\n    1 => 'one',\n    2 => {\n        let w = 'w'\n        't' + $w + 'o'\n    },\n    3 => 'three',\n    4 => 'four'\n}\n# => three\n```\n\n----------------------------------------\n\nTITLE: Nushell Custom Command with Pipeline Input\nDESCRIPTION: This snippet defines a custom command `echo_me` that accepts pipeline input and prints it. It demonstrates how `$in` refers to the pipeline input in the first position of a pipeline within a closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\ndef echo_me [] {\n  print $in\n}\ntrue | echo_me\n# => true\n```\n\n----------------------------------------\n\nTITLE: Enhancements in Type Annotations and Command Signatures\nDESCRIPTION: This snippet highlights recent advancements in Nushell's type system, showcasing support for complex types in command signatures and variable assignments. It illustrates defining a record and using it within a custom command. There are no external prerequisites; these enhancements are part of Nushell's evolution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_4\n\nLANGUAGE: Nushell\nCODE:\n```\nlet my_r: record<a :int> = { a: 123 }\n```\n\nLANGUAGE: Nushell\nCODE:\n```\ndef my_complex_command []: nothing -> record<a: int> { { a: 123 } }\n```\n\n----------------------------------------\n\nTITLE: Nushell Create Directory with Date (Subexpression)\nDESCRIPTION: This code uses subexpressions to create a directory with tomorrow's date in the name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n\"mkdir $'((date now) + 1day | format date '%F') Report'\"\n```\n\n----------------------------------------\n\nTITLE: Table Row Sorting in Nushell\nDESCRIPTION: Shows how to sort table rows by comparing multiple columns in order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nlet items = [\n    {id: 100, quantity: 10, price: 5 }\n    {id: 100, quantity: 5,  price: 8 }\n    {id: 100, quantity: 5,  price: 1 }\n]\n$items | sort\n```\n\n----------------------------------------\n\nTITLE: Using 'any' Type for Mutable Variable Declaration in Nushell\nDESCRIPTION: Demonstrates how to declare a mutable variable with the 'any' type annotation that can accept values of different types. This example initializes a variable with null, then assigns a string based on a condition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/any.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet q = false\n\n# Start by assigning a null (nothing type) to x\n# to indicate that it hasn't been processed\nmut x: any = null\n\nif $q {\n  $x = 'Yes'\n} else {\n  $x = 'No'\n}\n\n$x\n# =>'No', which is a string\n```\n\n----------------------------------------\n\nTITLE: Using path self Command in Nushell\nDESCRIPTION: The path self command is a parse-time only command for getting the absolute path of the source file containing it, or any file relative to the source file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nconst this_file = path self\nconst this_directory = path self .\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Nushell\nDESCRIPTION: Shows string interpolation using a variable in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nlet audience: string = \"World\"\n$\"Hello, ($audience)\"\n# => Hello, World\n```\n\n----------------------------------------\n\nTITLE: Sorting and Limiting Results in Nushell\nDESCRIPTION: This example demonstrates sorting files by size, then selecting the first 5 results using the sort-by and first commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nls | sort-by size | first 5\n```\n\n----------------------------------------\n\nTITLE: Creating a Nushell Module with Local and Exported Definitions\nDESCRIPTION: Demonstrates how to create a module with both local and exported definitions. The local definition is only accessible within the module's scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\n# is-alphanumeric.nu\ndef alpha-num-range [] {\n    [\n        ...(seq char 'a' 'z')\n        ...(seq char 'A' 'Z')\n        ...(seq 0 9 | each { into string })\n    ]\n}\n\nexport def \"str is-alphanumeric\" []: string -> bool {\n    if ($in == '') {\n        false\n    } else {\n        let chars = (split chars)\n        $chars | all {|char| $char in (alpha-num-range)}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting with Custom Closures in Nushell\nDESCRIPTION: Demonstrates using custom closures with the `--custom` flag to define a custom sort order. This example sorts files by size using a closure that compares the `size` field of two records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | sort-by -c {|a, b| $a.size < $b.size }\n╭───┬─────────────────────┬──────┬──────────┬────────────────╮\n│ # │        name         │ type │   size   │    modified    │\n├───┼─────────────────────┼──────┼──────────┼────────────────┤\n│ 0 │ my-secret-plans.txt │ file │    100 B │ 10 minutes ago │\n│ 1 │ shopping_list.txt   │ file │    100 B │ 2 months ago   │\n│ 2 │ myscript.nu         │ file │  1.1 KiB │ 2 weeks ago    │\n│ 3 │ bigfile.img         │ file │ 10.0 MiB │ 3 weeks ago    │\n╰───┴─────────────────────┴──────┴──────────┴────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Records in Nushell\nDESCRIPTION: Demonstrates pattern matching to extract and use values from record types. Uses variable binding to access record fields and different patterns to match different record structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nlet foo = { name: 'bar', count: 7 }\nmatch $foo {\n    { name: 'bar', count: $it } => ($it + 3),\n    { name: _, count: $it } => ($it + 7),\n    _ => 1\n}\n# => 10\n```\n\n----------------------------------------\n\nTITLE: Complex HTTP Pipeline in Nushell\nDESCRIPTION: Complex pipeline that fetches data, manipulates it, and posts it back to an API endpoint.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nopen urls.json | get urls | first | http get $in | upsert id {|item| $item.id | inc} | to json | http post https://jsonplaceholder.typicode.com/posts $in\n```\n\n----------------------------------------\n\nTITLE: Using 'return' in a Nushell Function\nDESCRIPTION: This example defines a function 'positive-check' that uses 'return' to exit early if the input is positive. It demonstrates the function with both positive and negative inputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_20\n\nLANGUAGE: nushell\nCODE:\n```\ndef 'positive-check' [it] {\n    if $it > 0 {\n        return 'positive'\n    };\n\n    'non-positive'\n}\n```\n\nLANGUAGE: nushell\nCODE:\n```\npositive-check 3\n# => positive\n\npositive-check (-3)\n# => non-positive\n\nlet positive_check = {|elt| if $elt > 0 { return 'positive' }; 'non-positive' }\n\ndo $positive_check 3\n# => positive\n\ndo $positive_check (-3)\n# => non-positive\n```\n\n----------------------------------------\n\nTITLE: Using 'complete' Command for External Command Output\nDESCRIPTION: Demonstrates the use of the 'complete' command to capture stdout, stderr, and exit code of an external command in a structured format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ncat unknown.txt | complete\n# => ╭───────────┬─────────────────────────────────────────────╮\n# => │ stdout    │                                             │\n# => │ stderr    │ cat: unknown.txt: No such file or directory │\n# => │ exit_code │ 1                                           │\n# => ╰───────────┴─────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Grouping Git Commits by Author in Nushell\nDESCRIPTION: Shows how to group commits by author name and display the resulting groups. This is useful for analyzing contribution patterns across different contributors to a repository.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 365day)) | group-by name\n```\n\n----------------------------------------\n\nTITLE: Checking Interactive Shell Status in Nushell\nDESCRIPTION: Demonstrates how to check if Nushell is running in interactive mode using $nu.is-interactive. Shows examples of checking interactive status in different contexts including forced interactive mode with -i flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/special_variables.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$nu.is-interactive\n# => true\nnu -c \"$nu.is-interactive\"\n# => false\n\n# Force interactive with --interactive (-i)\nnu -i -c \"$nu.is-interactive\"\n# => true\n```\n\n----------------------------------------\n\nTITLE: Joining Polars Lazy DataFrames with Aggregation in Nushell\nDESCRIPTION: Example showing how to create lazy dataframes, perform groupby aggregations with sum and mean, and join the results back to the original dataframe. Demonstrates the power of lazy evaluation in Polars through Nushell's interface.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_44\n\nLANGUAGE: nushell\nCODE:\n```\nlet lf_2 =  [[name value]; [one 1] [two 2] [one 1] [two 3]] | polars into-lazy\nlet group = $lf_2\n    | polars group-by name\n    | polars agg [\n      (polars col value | polars sum | polars as sum)\n      (polars col value | polars mean | polars as mean)\n    ]\n\n$lf_2 | polars join $group name name | polars collect\n```\n\n----------------------------------------\n\nTITLE: Opening Files with Structure\nDESCRIPTION: Opens a file with structure based on file extension or SQLite database header.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/open.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen myfile.json\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Nushell\nDESCRIPTION: Demonstrates a basic assertion that will fail, showing how assertions handle false conditions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nassert (1 == 2)\n```\n\n----------------------------------------\n\nTITLE: Command Return Values in Nushell\nDESCRIPTION: Shows how every command returns a value in Nushell, even if that value is null.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nlet p = 7\nprint $p\n$p * 6\n```\n\n----------------------------------------\n\nTITLE: Comparing CURL Usage in Bash and Nushell\nDESCRIPTION: Shows how the same CURL+JQ pipeline can work in both Bash and Nushell, while also demonstrating Nushell's built-in HTTP capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ncurl -s https://api.github.com/repos/nushell/nushell/contributors | jq -c '.[] | {login,contributions}'\n```\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://api.github.com/repos/nushell/nushell/contributors | select login contributions\n```\n\n----------------------------------------\n\nTITLE: Starting Nushell with Default Configuration\nDESCRIPTION: Launches Nushell with standard library, default configurations, and user configurations. Enters the REPL.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_22\n\nLANGUAGE: nushell\nCODE:\n```\nnu\n```\n\n----------------------------------------\n\nTITLE: Importing a module in Nushell\nDESCRIPTION: This snippet demonstrates how to import a module in Nushell using the `use` command. It imports the `std/log` module from the standard library and then uses the `log info` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nuse std/log\nlog info \"Hello, Modules\"\n```\n\n----------------------------------------\n\nTITLE: Using Constants in Conditional Statements in Nushell\nDESCRIPTION: This snippet illustrates the new capability of using constants in conditional statements for sourcing configurations, allowing for cleaner and more maintainable code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nconst WINDOWS_CONFIG = \"my_windows_config.nu\"\nconst UNIX_CONFIG = \"my_unix_config.nu\"\n\nconst ACTUAL_CONFIG = if $nu.os-info.name == \"windows\" {\n    $WINDOWS_CONFIG\n} else {\n    $UNIX_CONFIG\n}\n\nsource $ACTUAL_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Directory Sorting by Size in Nushell\nDESCRIPTION: Shows how to sort directory contents by file size using sort-by command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nls | sort-by size\n```\n\n----------------------------------------\n\nTITLE: Join Eager Dataframe with Lazy Dataframe\nDESCRIPTION: Shows how to join an eager dataframe with a lazy dataframe, where the eager dataframe is the primary frame being joined with a lazy dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_join.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet df_a = ([[a b c];[1 \"a\" 0] [2 \"b\" 1] [1 \"c\" 2] [1 \"c\" 3]] | polars into-df)\nlet df_b = ([[\"foo\" \"bar\" \"ham\"];[1 \"a\" \"let\"] [2 \"c\" \"var\"] [3 \"c\" \"const\"]] | polars into-lazy)\n$df_a | polars join $df_b a foo\n```\n\n----------------------------------------\n\nTITLE: Opening Files in Raw Mode - Nushell\nDESCRIPTION: This snippet illustrates the use of the 'open' command with the '--raw' flag to access the underlying raw text of a file instead of the structured view. This provides more control for users needing to see unprocessed data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nopen Cargo.toml --raw\n# => [package]                                                                                        name = \"nu\"\n# => version = \"0.1.3\"\n# => authors = [\"Yehuda Katz <wycats@gmail.com>\", \"Sophia Turner <547158+sophiajt@users.noreply.github.com>\"]\n# => description = \"A shell for the GitHub era\"\n# => license = \"MIT\"\n```\n\n----------------------------------------\n\nTITLE: Decoding Multiple URLs Example in Nushell\nDESCRIPTION: Example demonstrating how to decode multiple URLs in a list, including URLs with various encoded characters and Unicode symbols.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_decode.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ['https://example.com/foo%20bar' 'https://example.com/a%3Eb' '%E4%B8%AD%E6%96%87%E5%AD%97/eng/12%2034'] | url decode\n╭───┬─────────────────────────────╮\n│ 0 │ https://example.com/foo bar │\n│ 1 │ https://example.com/a>b     │\n│ 2 │ 中文字/eng/12 34            │\n╰───┴─────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Renaming Multiple Columns in Nushell\nDESCRIPTION: Shows how to rename multiple columns in a table by providing multiple new column names\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rename.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[a, b, c]; [1, 2, 3]] | rename eggs ham bacon\n```\n\n----------------------------------------\n\nTITLE: Benchmarking group-by operations with native Nushell commands\nDESCRIPTION: Measures the performance of grouping data by year and summing the 'geo_count' column using native Nushell commands. This establishes a baseline for comparison with other methods.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nbench -n 10 --pretty {\n    open 'Data7602DescendingYearOrder.csv'\n    | group-by year --to-table\n    | update items {|i|\n        $i.items.geo_count\n        | math sum\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping in Nushell Blocks\nDESCRIPTION: This example illustrates how variable scoping works in Nushell blocks. Variables defined within a block with the same name as variables in the outer scope will shadow the outer variable but not modify it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/block.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n# Outer scope:\nlet x: int = 9\nif true {\n  # inner scope\n  let x: string = '8'\n  $x | describe\n  # => string\n}\necho $x\n# => 9\n```\n\n----------------------------------------\n\nTITLE: Redirection of Outputs in Nushell\nDESCRIPTION: This snippet includes two examples of output redirection. The first demonstrates redirecting error output of a Bash script to a file while processing stdout through a pipeline. The second shows how to append outputs to a file instead of overwriting it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nbash test.sh err> err.txt | lines | each { str length }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n(1 + 2 + 3) out> sum.txt\n\"\\n\" out>> sum.txt\n(4 + 5 + 6) out>> sum.txt\n```\n\n----------------------------------------\n\nTITLE: Loading Text File and Parsing Lines - Nushell\nDESCRIPTION: This snippet opens a plain text file containing data and processes it line by line. It showcases how to read the contents of a text file and display them in a structured format before further manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nopen people.txt\n# => Octavia | Butler | Writer\n# => Bob | Ross | Painter\n# => Antonio | Vivaldi | Composer\n```\n\n----------------------------------------\n\nTITLE: Converting Nested JSON to Table in Nushell\nDESCRIPTION: This snippet illustrates how Nushell converts a JSON string with nested arrays into a structured table. No additional dependencies are needed. The input is a JSON string with nested arrays, and the output is a formatted Nushell table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_json.md#2025-04-19_snippet_1\n\nLANGUAGE: Nushell\nCODE:\n```\n> '{ \"a\": 1, \"b\": [1, 2] }' | from json\n╭───┬───────────╮\n│ a │ 1         │\n│   │ ╭───┬───╮ │\n│ b │ │ 0 │ 1 │ │\n│   │ │ 1 │ 2 │ │\n│   │ ╰───┴───╯ │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining SSH Extern Command in Nushell\nDESCRIPTION: This snippet demonstrates how to define an external command for SSH in Nushell, utilizing completion and type checking for its parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/externs.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nmodule \"ssh extern\" {\n  def complete_none [] { [] }\n\n  def complete_ssh_identity [] {\n    ls ~/.ssh/id_*\n    | where {|f|\n        ($f.name | path parse | get extension) != \"pub\"\n      }\n    | get name\n  }\n\n  export extern ssh [\n    destination?: string@complete_none  # Destination Host\n    -p: int                             # Destination Port\n    -i: string@complete_ssh_identity    # Identity File\n  ]\n}\nuse \"ssh extern\" ssh\n```\n\n----------------------------------------\n\nTITLE: Checking Administrator Privileges with Nushell is-admin Command\nDESCRIPTION: This snippet demonstrates how to utilize the 'is-admin' command in Nushell to check if the shell is running with administrator or root privileges. The command returns 'iamroot' if the shell has elevated privileges, otherwise it returns 'iamnotroot'. 'is-admin' does not require any dependencies and outputs a boolean value based on the privilege check. It takes no input and the command is executed inline within a conditional statement.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-admin.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> if (is-admin) { \"iamroot\" } else { \"iamnotroot\" }\n```\n\n----------------------------------------\n\nTITLE: Basic Nushell Launch\nDESCRIPTION: Command to launch Nushell shell without any special flags\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\nnu\n```\n\n----------------------------------------\n\nTITLE: Illustrating 'continue' in a While Loop in Nushell\nDESCRIPTION: This example demonstrates the use of 'continue' in a while loop to skip iterations where x is divisible by 3. It prints numbers from -1 to 7, excluding multiples of 3.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = -1; while $x <= 6 { $x = $x + 1; if $x mod 3 == 0 { continue }; print $x }\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Variables from String\nDESCRIPTION: Simple approach to parse environment variable declarations from a bash script string using Nushell's parsing capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/foreign_shell_scripts.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet bash_greeting = '\nexport GREETING=\"Hello\";\nexport FROM=\"from bash\";\n'\n\nload-env (\n  $bash_greeting\n  | str trim\n  | lines\n  | parse 'export {name}=\"{value}\";'\n  | transpose --header-row --as-record\n)\n\nprint $\"($env.GREETING) ($env.FROM)\" # \"Hello from bash\"\n```\n\n----------------------------------------\n\nTITLE: Installing Core Plugins with Cargo in Nushell\nDESCRIPTION: This code snippet shows how to install or update core plugins using `cargo`. It iterates through a list of plugin names and installs each one using `cargo install`. The `--locked` flag ensures that the installed versions match the versions specified in the `Cargo.lock` file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n[ nu_plugin_inc\n  nu_plugin_polars\n  nu_plugin_gstat\n  nu_plugin_formats\n  nu_plugin_query\n] | each { cargo install $in --locked } | ignore\n```\n\n----------------------------------------\n\nTITLE: Finding a relative path from two absolute paths in Nushell\nDESCRIPTION: This example demonstrates how to express an absolute path as relative to another absolute path. The command takes '/home/viking' and returns it as relative to the '/home' path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_relative-to.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking' | path relative-to '/home'\nviking\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command with Type Annotations in Nushell\nDESCRIPTION: This snippet shows how to use type annotations for parameters in custom command definitions. It includes an example of a type mismatch error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_23\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [name: string] {\n  $\"Hello, ($name)\"\n}\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [name: int] {\n  $\"hello ($name)\"\n}\n\ngreet World\n\n# Error: nu::parser::parse_mismatch\n#\n#   × Parse mismatch during operation.\n#    ╭─[entry #1:1:7]\n#  1 │ greet World\n#    ·       ──┬──\n#    ·         ╰── expected int\n#    ╰────\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Aware Custom Completions in Nushell\nDESCRIPTION: This example modifies the previous module to include context-aware completions. The `animal-names` command utilizes the command-line context to generate appropriate completions based on previous inputs. The `my-command` uses these completions to offer dynamic suggestions for the `name` argument.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_completions.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nmodule commands {\n    def animals [] {\n        [\"cat\", \"dog\", \"eel\" ]\n    }\n\n    def animal-names [context: string] {\n        match ($context | split words | last) {\n            cat => [\"Missy\", \"Phoebe\"]\n            dog => [\"Lulu\", \"Enzo\"]\n            eel => [\"Eww\", \"Slippy\"]\n        }\n    }\n\n    export def my-command [\n        animal: string@animals\n        name: string@animal-names\n    ] {\n        print $\"The ($animal) is named ($name).\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nothing/Null Values in Nushell\nDESCRIPTION: Shows how to work with optional values and null checking in Nushell using the optional operator (?). Demonstrates accessing record fields, handling missing values, and comparing with null.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\nlet simple_record = { a: 5, b: 10 }\n$simple_record.a?\n# => 5\n$simple_record.c?\n# => Nothing is output\n$simple_record.c? | describe\n# => nothing\n$simple_record.c? == null\n# => true\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from URL - Nushell\nDESCRIPTION: This snippet shows how to fetch data from a URL using the 'http get' command in Nushell, which can be useful for retrieving online resources. It's a demonstration of Nushell's capabilities beyond local file handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://example.com/data.json\n```\n\n----------------------------------------\n\nTITLE: Executing Interpolated Strings as Commands in Nushell\nDESCRIPTION: Shows how to build and execute a command path using string interpolation with arguments. The caret (^) prefix allows the interpolated string to be executed as an external command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/strings_and_text.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet path1 = \"/part1\"\nlet path2 = \"/part2\"\nlet fn = \"filename\"\nlet arguments = [\"arg1\", \"-a\", \"arg2\"]\n\n^$\"($path1)($path2)($fn)\" ...$arguments\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on macOS/Linux via Homebrew\nDESCRIPTION: This command installs Nushell on macOS or Linux systems using the Homebrew package manager. It assumes that Homebrew is already installed on the system. The command fetches and installs the latest version of Nushell available through Homebrew.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install nushell\n```\n\n----------------------------------------\n\nTITLE: Conditional Hooks Based on Directory in Nushell\nDESCRIPTION: Illustrates how to set up a conditional hook such that certain environment variables or commands are executed when entering a specific directory. Utilizes the `condition` and `code` fields within the hook configuration for precise control.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks {\n    env_change: {\n        PWD: [\n            {\n                condition: {|before, after| $after == /some/path/to/directory }\n                code: {|before, after| load-env { SPAM: eggs } }\n            }\n        ]\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Pattern Matching with match Keyword in Nushell\nDESCRIPTION: Demonstrates basic pattern matching using the match keyword to categorize colors into different groups. Shows how to use multiple conditions with | operator and default case with _.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/pattern_matching.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[black red yellow green purple blue indigo] | each {|c|\n  match $c {\n    \"black\" => \"classy\"\n    \"red\" | \"green\" | \"blue\" => \"fundamental\"\n    \"yellow\" | \"purple\" => \"vibrant\"\n    _ => \"innovative\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Operators and Escapes in Nushell\nDESCRIPTION: Shows how to access help for operators and escape characters in Nushell. These commands provide information about available operators and escape sequences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/quick_tour.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nhelp operators\nhelp escapes\n```\n\n----------------------------------------\n\nTITLE: Removing Columns from a Table in Nushell\nDESCRIPTION: This snippet shows how to remove specific columns from a table using the reject command with the ls -l command output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\nls -l / | reject readonly num_links inode created accessed modified\n```\n\n----------------------------------------\n\nTITLE: Uploading a Text File as Binary in NuShell\nDESCRIPTION: This snippet shows the process of uploading a text file as binary data using NuShell. It first converts the text file into binary format before including it in a POST request with the correct content type. The output captures the file's content and the associated metadata from the response.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nhttp post https://httpbin.org/post --content-type \"multipart/form-data\" {\n  doc: (open -r ~/Downloads/README.txt | into binary),\n  description: \"Documentation file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Find Terms in Command Output\nDESCRIPTION: Example showing how to search for multiple terms in command output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | find toml md sh\n```\n\n----------------------------------------\n\nTITLE: Selecting Columns from a Lazy Dataframe in Nushell\nDESCRIPTION: Shows two equivalent ways to select columns from a lazy dataframe, either using a string column name or the polars col expression. Both approaches produce the same result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_42\n\nLANGUAGE: nushell\nCODE:\n```\n$lf_0 | polars select a | polars collect\n```\n\nLANGUAGE: nushell\nCODE:\n```\n$lf_0 | polars select (polars col a) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Converting Complex TOML String to Nested Record in Nushell\nDESCRIPTION: Shows how to convert a more complex TOML-formatted string containing a scalar value and an array into a nested Nushell record structure, maintaining the hierarchical relationships defined in the TOML.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_toml.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'a = 1\nb = [1, 2]' | from toml\n╭───┬───────────╮\n│ a │ 1         │\n│   │ ╭───┬───╮ │\n│ b │ │ 0 │ 1 │ │\n│   │ │ 1 │ 2 │ │\n│   │ ╰───┴───╯ │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v7 (Timestamp + Random) in Nushell\nDESCRIPTION: This example demonstrates generating a UUID v7 string, which combines a timestamp with random data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_uuid.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nrandom uuid -v 7\n```\n\n----------------------------------------\n\nTITLE: Updating Records with WHERE Clause in Nushell SQLite Database\nDESCRIPTION: Example showing how to update specific records using a WHERE clause to filter which records should be updated in the SQLite database.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_update.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> stor update --table-name nudb --update-record {str1: nushell datetime1: 2020-04-17} --where-clause \"bool1 = 1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell Library Directories\nDESCRIPTION: Sets up the NU_LIB_DIRS environment variable to include the default config directory for module discovery.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/modules.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n$env.NU_LIB_DIRS = [\n    ...\n    $nu.default-config-dir\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Nushell Repository Contributors with Nushell Commands\nDESCRIPTION: This snippet demonstrates using Nushell to query the GitHub API for contributors to the main Nushell repository, then sorting and displaying their usernames in a table format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-31-happy-nu-year-2020.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfetch https://api.github.com/repos/nushell/nushell/stats/contributors | get author | sort-by login | get login\n```\n\n----------------------------------------\n\nTITLE: Date Operations in Nushell\nDESCRIPTION: Demonstrates date operations and formatting in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\ndate now\n# => Mon, 12 Aug 2024 13:59:22 -0400 (now)\n# Format as Unix epoch\ndate now | format date '%s'\n# => 1723485562\n```\n\n----------------------------------------\n\nTITLE: Nushell Try-Catch Block for Exit Codes\nDESCRIPTION: This code demonstrates how to use a `try`/`catch` block in Nushell to handle non-zero exit codes from external commands. The `catch` block accesses the `exit_code` column of the error record to retrieve the exit code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-09-17-nushell_0_98_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"try {\\n  nu -c 'exit 42'\\n} catch {|e|\\n  print $e.exit_code? # prints 42\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Executing Strings as External Commands in Nushell\nDESCRIPTION: Demonstrates how to execute strings as external commands in Nushell using the ^ sigil.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n^'C:\\Program Files\\exiftool.exe'\n\nlet foo = 'C:\\Program Files\\exiftool.exe'\n^$foo\n```\n\n----------------------------------------\n\nTITLE: Removing Environment Variables\nDESCRIPTION: This snippet shows how to remove an environment variable that was set in the current scope using the hide-env command, demonstrating how it affects visibility within blocks.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n$env.FOO = 'BAR'\nhide-env FOO\n```\n\n----------------------------------------\n\nTITLE: Recursive Table Merging Using Reduce in Nushell\nDESCRIPTION: Shows how to merge multiple tables recursively using the reduce command for a more elegant solution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/tables.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n[$first_table $second_table $third_table]\n| reduce { |elt, acc|\n    $acc\n    | chunks ($elt | length)\n    | each { merge $elt }\n    | flatten\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom Command Definition with Type Annotations in Nushell\nDESCRIPTION: This code defines a custom command named `sum` in Nushell with type annotations for both input and output. The command takes a list of integers as input (`list<int>`) and returns an integer (`int`), calculated using the `math sum` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-07-25-nushell_0_83.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\ndef sum []: list<int> -> int {\n    math sum\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Tables Example in Nushell\nDESCRIPTION: Example demonstrating how to join two simple tables using a common column 'a', resulting in a combined table with all columns from both tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/join.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [{a: 1 b: 2}] | join [{a: 1 c: 3}] a\n╭───┬───┬───┬───╮\n│ # │ a │ b │ c │\n├───┼───┼───┼───┤\n│ 0 │ 1 │ 2 │ 3 │\n╰───┴───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Inserting New Entry into Record in Nushell\nDESCRIPTION: This snippet shows how to insert a new key-value pair into an existing record using the 'upsert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n{'name': 'nu', 'stars': 5} | upsert language 'Rust'\n```\n\n----------------------------------------\n\nTITLE: Working with Records in Nushell\nDESCRIPTION: Shows how to create and access data in a record structure with key-value pairs\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_15\n\nLANGUAGE: nu\nCODE:\n```\nlet my_record = {\n  name: \"Kylian\"\n  rank: 99\n}\n$my_record\n# => ╭───────┬────────────╮\n# => │ name  │ Kylian     │\n# => │ rank  │ 99         │\n# => ╰───────┴────────────╯\n\n$my_record | get name\n# =>  Kylian\n```\n\n----------------------------------------\n\nTITLE: Using Transient Prompts in Nushell\nDESCRIPTION: This example demonstrates the use of the transient prompt feature in Nushell to modify how past prompts are displayed. You can set transient-related variables like `TRANSIENT_PROMPT_COMMAND` to change the appearance, potentially simplifying the display by omitting unnecessary details on older prompt lines. It also shows how to revert to the original prompt configuration after using transient prompts.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n$env.TRANSIENT_PROMPT_COMMAND = \"\"\nhide-env TRANSIENT_PROMPT_COMMAND\n```\n\n----------------------------------------\n\nTITLE: Appending Value to End of List in Nushell\nDESCRIPTION: Illustrates appending a value to the end of a list using 'insert'. The number 4 is added to a predefined list. It outputs a new list containing the added element.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/insert.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3] | insert 3 4\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 2 │\n│ 2 │ 3 │\n│ 3 │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Rust Nushell Plugin Example\nDESCRIPTION: This Rust code demonstrates a complete example of the new Nushell plugin API. It defines a `LenPlugin` that exposes a single command `len`, which calculates the length of a string input and returns it as an integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse nu_plugin::{serve_plugin, EvaluatedCall, JsonSerializer};\nuse nu_plugin::{EngineInterface, Plugin, PluginCommand, SimplePluginCommand};\nuse nu_protocol::{LabeledError, Signature, Type, Value};\n\nstruct LenPlugin;\n\nimpl Plugin for LenPlugin {\n    fn commands(&self) -> Vec<Box<dyn PluginCommand<Plugin = Self>>> {\n        vec![Box::new(Len)]\n    }\n}\n\nstruct Len;\n\nimpl SimplePluginCommand for Len {\n    type Plugin = LenPlugin;\n\n    fn name(&self) -> &str {\n        \"len\"\n    }\n\n    fn usage(&self) -> &str {\n        \"calculates the length of its input\"\n    }\n\n    fn signature(&self) -> Signature {\n        Signature::build(PluginCommand::name(self))\n            .input_output_type(Type::String, Type::Int)\n    }\n\n    fn run(\n        &self,\n        _plugin: &LenPlugin,\n        _engine: &EngineInterface,\n        call: &EvaluatedCall,\n        input: &Value,\n    ) -> Result<Value, LabeledError> {\n        let span = input.span();\n        match input {\n            Value::String { val, .. } => Ok(Value::int(val.len() as i64, span)),\n            _ => Err(\n                LabeledError::new(\"Expected String input from pipeline\").with_label(\n                    format!(\"requires string input; got {}\", input.get_type()),\n                    call.head,\n                ),\n            ),\n        }\n    }\n}\n\nfn main() {\n    serve_plugin(&LenPlugin, JsonSerializer)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using module with 'main' export in Nushell\nDESCRIPTION: This snippet imports the module and calls function of the module to increment a number. When a module export is called 'main', it can be called by using the name of the module name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nuse ./increment.nu\n2024 | increment\n# => 2025\n```\n\n----------------------------------------\n\nTITLE: Redirecting stderr to a file in Nushell\nDESCRIPTION: This example demonstrates how to redirect stderr to a file while piping stdout to another command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/pipelines.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nnu demo.nu o> file.txt e>| str upcase\n```\n\n----------------------------------------\n\nTITLE: First-Class Closure Execution\nDESCRIPTION: Example of storing and executing a first-class closure with enclosed variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> let text = \"I am enclosed\"; let hello = {|| echo $text}; do $hello\n```\n\n----------------------------------------\n\nTITLE: List Condition Testing in Nushell\nDESCRIPTION: Demonstrates using any and all commands to test conditions across list elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\nlet colors = [red green blue]\n$colors | any {|elt| $elt | str ends-with \"e\" }\n$colors | all {|elt| ($elt | str length) >= 3 }\n\nlet scores = [3 8 4]\n$scores | any {|elt| $elt > 7 }\n$scores | all {|elt| $elt mod 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: File Read/Write Operation - Nushell Example\nDESCRIPTION: Example demonstrating how to read from and write back to the same file using collect.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/collect.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> open file.txt | collect | save -f file.txt\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Mutable Variables in Nushell\nDESCRIPTION: Demonstrates how to create a mutable variable, assign it an initial value, and then update its value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mut.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 10; $x = 12\n```\n\n----------------------------------------\n\nTITLE: Searching for Commands in Nushell Help System\nDESCRIPTION: Demonstrates how to search for specific commands in the Nushell help system using the '--find' or '-f' flag. This example searches for help related to the 'filesize' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/quick_tour.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nhelp --find filesize\n# or\nhelp -f filesize\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Environment Variables in Nushell\nDESCRIPTION: This snippet showcases how to view current environment variables using the $env variable and display them in a formatted table. This serves to help users understand the available environment variables in their current session.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env | table -e\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Pipeline/Value\nDESCRIPTION: Modifies the metadata of a pipeline or value. The example shows how to set the data source to `ls`, which will activate coloring using `LS_COLORS`. This allows for dynamic styling and behavior based on metadata.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n[[name]; [Cargo.lock] [Cargo.toml] [README.md]] | metadata set --datasource-ls\n```\n\n----------------------------------------\n\nTITLE: Nushell $in with No Input\nDESCRIPTION: Demonstrates the behavior of `$in` when there is no pipeline input; it results in `nothing`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n# Input\n1 | do { $in | describe }\n# =>   int\n\"Hello, Nushell\" | do { $in | describe }\n# =>   string\n{||} | do { $in | describe }\n# =>   closure\n\n# No input\ndo { $in | describe }\n# =>   nothing\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Lists in Nushell\nDESCRIPTION: Shows different ways to iterate over list elements using each command with and without enumeration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nlet names = [Mark Tami Amanda Jeremy]\n$names | each { |elt| $\"Hello, ($elt)!\" }\n\n$names | enumerate | each { |elt| $\"($elt.index + 1) - ($elt.item)\" }\n```\n\n----------------------------------------\n\nTITLE: Sorting Git Logs by Date in Nushell\nDESCRIPTION: This Nushell script fetches the latest 25 commits, extracts important details like commit hash, subject, author name, email, and date, and sorts them by date in descending order. Required dependencies include a Git repository and Nushell installed on your system. The script segments the Git log into columns based on custom delimiters and processes the data into a table sorted by date.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 25 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | sort-by date | reverse\n```\n\n----------------------------------------\n\nTITLE: Standalone Test Script\nDESCRIPTION: Example of a standalone test script that verifies Fibonacci number calculations using assertions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nuse math.nu fib\nuse std/assert\n\nfor t in [\n    [input, expected];\n    [0, 0],\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 5],\n    [6, 8],\n    [7, 13],\n] {\n    assert equal (fib $t.input) $t.expected\n}\n```\n\n----------------------------------------\n\nTITLE: Getting help for a command in Nu\nDESCRIPTION: Gets the help documentation for a given command using the 'help' command followed by the command name. This displays information about the command's syntax, parameters, and usage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\n\"help <command>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Floating Point Arguments and Return Types in Nushell\nDESCRIPTION: This code snippet demonstrates how to define a function in Nushell that accepts a floating point argument and returns a floating point result. It showcases the types introduced with the new version.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n# Argument with a specific type\n\ndef foo [bar: float] {}\n\n# Command taking only floating point input from the pipeline and returning the same type.\ndef baz [] float->float {}\n```\n\n----------------------------------------\n\nTITLE: Executing a Background Job in Nushell\nDESCRIPTION: The 'job spawn' command in Nushell allows users to execute closures in a separate thread. The main purpose is to perform a task asynchronously, indicated by its `closure` parameter. The command does not take any input and outputs an integer representing the job ID. This functionality is available from version 0.103.0 in an experimental category. It is important to understand that the command registers the task in the background job table, which can be accessed using `job list`. The limitation is that the command can only run the closure without direct input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job_spawn.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> job spawn { sleep 5sec; rm evidence.pdf }\n```\n\n----------------------------------------\n\nTITLE: Custom Command with Cell-Path Type Annotation in Nushell\nDESCRIPTION: Demonstrates the use of cell-path as a type annotation in a custom Nushell command, showcasing various ways to use the command with different data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/cellpath.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef my-get [p: cell-path] {\nget $p\n}\n\n# Now call it\n[1 2 3 4] | my-get 2\n# => 3\n# structured data\n{foo: 1, bar: { baz: {quo: 4}}} | my-get bar.baz.quo\n# => 4\n# with the $ prefix\n{foo: 1, bar: { baz: {quo: 4}}} | my-get $.bar.baz.quo\n# => 4\n# Create a var: $p\nlet p: cell-path = $.bar.baz.quo\n# works so far\n# let's try for standard get\n{foo: 1, bar: { baz: {quo: 4}}} | get $p\n# => 4\n# Now with my-get\n{foo: 1, bar: { baz: {quo: 4}}} | my-get $p\n# => 4\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs in Nushell\nDESCRIPTION: This command allows the generation of various versions of UUIDs, including v1, v3, v5, and v7 using the `random uuid` command. The version can be specified using the `-v`/`--version` flag, with defaults to v4. Additionally, v1 requires a MAC address to be specified via the `--mac`/`-m` flag and versions 3 and 5 require both a `--namespace`/`-n` flag and a `--name`/`-s` flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Nushell update Filter Example\nDESCRIPTION: This example shows how to use the `update` filter to modify a specific column in a table. The pipeline input to the closure refers to the column being updated, in this case `name`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n\"ls | update name {|file| $file.name | str upcase}\nls | update name {str upcase}\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Lists with Where Command in Nushell\nDESCRIPTION: Demonstrates using the where command to filter list elements based on a pattern match condition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[bell book candle] | where ($it =~ 'b')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Commands with Type Annotations in Nushell\nDESCRIPTION: This code snippet demonstrates the correct syntax for defining custom commands with input/output type annotations in Nushell. It shows how to specify the input and output types of a command to ensure type safety and catch errors during parse-time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n# The custom commands above will now cause a parse error and should instead be:\ndef some_cmd []: any -> string { '' }\ndef some_cmd [] : any -> string { '' }\n```\n\n----------------------------------------\n\nTITLE: Nushell Script with Shebang\nDESCRIPTION: Examples of using shebangs in Nushell scripts for direct execution on Unix-like systems\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n#!/usr/bin/env nu\n\"Hello World!\"\n```\n\nLANGUAGE: nu\nCODE:\n```\n#!/usr/bin/env -S nu --stdin\ndef main [] {\n  echo $\"stdin: ($in)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Spread Operator in List Literals in Nushell\nDESCRIPTION: This snippet showcases the use of the spread operator to unpack lists within list literals, providing a more efficient way to concatenate lists and values compared to using append.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nlet dogs = [Spot, Teddy, Tommy]\nlet cats = [\"Mr. Humphrey Montgomery\", Kitten]\n[\n  ...$dogs\n  Polly\n  ...($cats | each { |elt| $(\"$elt) \\(cat\\)\" })\n  ...[Porky Bessie]\n  ...Nemo\n]\n# => ╭───┬───────────────────────────────╮\n# => │ 0 │ Spot                          │\n# => │ 1 │ Teddy                         │\n# => │ 2 │ Tommy                         │\n# => │ 3 │ Polly                         │\n# => │ 4 │ Mr. Humphrey Montgomery (cat) │\n# => │ 5 │ Kitten (cat)                  │\n# => │ 6 │ Porky                         │\n# => │ 7 │ Bessie                        │\n# => │ 8 │ ...Nemo                       │\n# => ╰───┴───────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration Changes\nDESCRIPTION: Script to create a temporary environment for testing Nushell configuration changes safely.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\nlet temp_home = (mktemp -d)\n$env.XDG_CONFIG_HOME = $temp_home\n$env.XDG_DATA_HOME = $temp_home\n$env.XDG_DATA_HOME = \"\"\nnu\n\n# Edit config\nconfig nu\n# Exit the subshell\nexit\n# Run the temporary config\nnu\n```\n\n----------------------------------------\n\nTITLE: Parameterized Script Example\nDESCRIPTION: Demonstrates how to create a script that accepts command-line arguments using the main function\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n# myscript.nu\n\ndef main [x: int] {\n  $x + 10\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\nnu myscript.nu 100\n# => 110\n```\n\n----------------------------------------\n\nTITLE: Closure-based Sorting in Nushell\nDESCRIPTION: Demonstrates using a closure to create custom sorting logic based on calculated values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nlet assignments = [\n    {name: 'Homework 1', grades: [97 89 86 92 89] }\n    {name: 'Homework 2', grades: [91 100 60 82 91] }\n    {name: 'Exam 1', grades: [78 88 78 53 90] }\n    {name: 'Project', grades: [92 81 82 84 83] }\n]\n$assignments | sort-by { get grades | math avg }\n```\n\n----------------------------------------\n\nTITLE: Using Inspect Command in Nushell Pipelines\nDESCRIPTION: An example demonstrating how to use the inspect command in a pipeline to view intermediate results. The command is inserted between other pipeline stages to show data at that point.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/inspect.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | inspect | get name | inspect\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Environment Variables\nDESCRIPTION: This snippet explains how to load multiple environment variables at once using the load-env command. This is useful for batch setting various variables from a key-value pair table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nload-env { \"BOB\": \"FOO\", \"JAY\": \"BAR\" }\n```\n\n----------------------------------------\n\nTITLE: Finding Last Unique Values in Subset Columns\nDESCRIPTION: Demonstrates finding unique values in subset columns while keeping the last occurrence using the --last flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unique.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b c]; [1 2 1] [2 2 2] [3 2 1]]\n    | polars into-lazy\n    | polars unique --subset [b c] --last\n    | polars collect\n```\n\n----------------------------------------\n\nTITLE: Using the `tee` Command in Nushell\nDESCRIPTION: The `tee` command enables users to create a copy of the stream and perform actions in a closure simultaneously. It allows for saving output to files while processing streamed data. Context: Examples demonstrate versatile usages of the `tee` command in saving intermediate results in pipelines.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-03-05-nushell_0_91_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n# Get the sum of numbers from 1 to 100, but also save those numbers to a text file\nseq 1 100 | tee { save numbers.txt } | math sum\n```\n\nLANGUAGE: nushell\nCODE:\n```\n# The exact opposite: keep the numbers, but save the sum to a file\nseq 1 100 | tee { math sum | save sum.txt }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n# Run an external command, and save a copy of its log output on stderr\ndo { cargo run } | tee --stderr { save err.txt }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n# Filter the log output before saving it\ndo { cargo run } | tee --stderr { lines | find WARN | save warnings.txt }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n# Example of cutting the stream short\nseq 1 100 | tee { save numbers.txt } | first 5\n```\n\n----------------------------------------\n\nTITLE: Echo command Usage in Nushell\nDESCRIPTION: This example illustrates the evolving behavior of the `echo` command in Nushell.  When `echo` is not redirected, it prints directly to the terminal, similar to the `print` command. However, when `echo` is used in a pipeline, it passes the value down the pipeline for further processing. `echo \"foo\"` will output `foo` to the terminal but `echo \"foo\" | str length` will output the length of foo to the terminal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\necho \"foo\"  # will behave exactly as `print` does\necho \"foo\" | str length  # will compute the length of `\"foo\"` and forward the result without\n                         # \"printing\" it unless it's the last command being run\n```\n\n----------------------------------------\n\nTITLE: Naming columns while splitting\nDESCRIPTION: Opens a file, splits it into lines and columns, and assigns custom names to the resulting columns using the `split column` command. This provides more descriptive column names for easier data access.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nopen gente.txt | lines | split column \" | \" primer_nombre apellido trabajo\n```\n\n----------------------------------------\n\nTITLE: Converting Excel File to Nushell Table\nDESCRIPTION: Example showing how to convert a binary .xlsx file to a Nushell table using the 'open' command with --raw flag piped to 'from xlsx'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_xlsx.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> open --raw test.xlsx | from xlsx\n\n```\n\n----------------------------------------\n\nTITLE: Accessing constants when importing all module members\nDESCRIPTION: This example shows how to directly access constants when importing all members of the module. It imports all definitions from `std/math` using `*` and then accesses `PI` directly using `$PI`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n# Or importing all of the module's members\nuse std/math *\n$PI\n# => 3.141592653589793\n```\n\n----------------------------------------\n\nTITLE: Custom Aggregations with Nushell\nDESCRIPTION: Demonstrates how to implement a custom aggregation (summing values) using Nushell's reduce command with an accumulator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_18\n\nLANGUAGE: nu\nCODE:\n```\n'[{\"value\": 10}, {\"value\": 20}, {\"value\": 30}]'\n| from json\n| reduce -f 0 { |item, acc| $acc + $item.value }\n# => 60\n```\n\n----------------------------------------\n\nTITLE: Iterating Record Key-Value Pairs in Nushell\nDESCRIPTION: Demonstrates how to use the `items` filter to process each key-value pair in a record, executing a closure for each iteration\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/items.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n{ new: york, san: francisco } | items {|key, value| echo $'($key) ($value)' }\n```\n\n----------------------------------------\n\nTITLE: Creating and running Python script for Pandas group-by benchmark\nDESCRIPTION: Creates a Python script to benchmark a group-by operation in Pandas, then runs the script for comparison with Nushell methods. This demonstrates how to execute and benchmark Python code from within Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n('import pandas as pd\n\ndf = pd.read_csv(\"Data7602DescendingYearOrder.csv\")\nres = df.groupby(\"year\")[\"geo_count\"].sum()\nprint(res)'\n| save load.py -f)\n```\n\nLANGUAGE: nu\nCODE:\n```\nbench -n 10 --pretty {\n    python load.py | complete | null\n}\n```\n\n----------------------------------------\n\nTITLE: Column Rolling in Nushell\nDESCRIPTION: Shows how to use the new column rolling feature to move columns around in a table, similar to a bitwise rotate operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-09-nushell_0_28.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\necho '00000100'\n| split chars\n| each { str to-int }\n| rotate counter-clockwise _\n| reject _\n| rename bit1 bit2 bit3 bit4 bit5 bit6 bit7 bit8\n| roll column 3\n```\n\n----------------------------------------\n\nTITLE: Basic Pipeline Example in Nushell\nDESCRIPTION: Demonstrates Nushell's pipeline functionality by counting list length\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/thinking_in_nushell.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls | length\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Command in a Pipeline\nDESCRIPTION: Shows how to use the previously defined 'double' command in a pipeline, demonstrating how input flows through custom commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n[1 2 3] | double\n# => ╭───┬───╮\n# => │ 0 │ 2 │\n# => │ 1 │ 4 │\n# => │ 2 │ 6 │\n# => ╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Process Termination in Nushell\nDESCRIPTION: Terminates a process by finding its PID and sending a kill signal. Demonstrates piping commands to filter by process name and extract PID.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/system.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nps | where name == Notepad2.exe | get pid.0 | kill $in\n```\n\n----------------------------------------\n\nTITLE: Paginated API Requests Using Unfold in Nushell\nDESCRIPTION: Improved approach to crawl paginated GitHub API responses using the unfold command, which eliminates the need for mutable variables and provides a more functional programming style.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nunfold 1 {|page|\n  let resp = http get (\n    {\n      scheme: https,\n      host: \"api.github.com\",\n      path: \"/repos/nushell/nushell/issues\",\n      params: { page: $page, per_page: $PAGE_SIZE }\n    } | url join)\n\n  if ($resp | length) < $PAGE_SIZE {\n    {out: $resp}\n  } else {\n    {out: $resp, next: ($page + 1)}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command with Multiple Input Types in Nushell\nDESCRIPTION: Demonstrates defining a command that accepts multiple input types (list or string) and specifies string output, showing the syntax for multiple input-output signatures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_30\n\nLANGUAGE: nu\nCODE:\n```\ndef \"str join\" [separator?: string]: [\n  list -> string\n  string -> string\n] { }\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Custom Commands\nDESCRIPTION: Creates a command that changes the working directory and persists that change after the command completes by using the '--env' flag, which is essential for directory navigation commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_35\n\nLANGUAGE: nu\nCODE:\n```\ndef --env go-home [] {\n  cd ~\n}\n\ncd /\ngo-home\npwd\n# => Your home directory\n```\n\n----------------------------------------\n\nTITLE: Directory Navigation in Nushell\nDESCRIPTION: Commands for navigating and managing directories in Nushell. These replace CMD.EXE commands like CD, MKDIR, RMDIR, PUSHD, and POPD.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_cmd.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n$env.PWD\n```\n\nLANGUAGE: nushell\nCODE:\n```\ncd <directory>\n```\n\nLANGUAGE: nushell\nCODE:\n```\ncd <drive:directory>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nmkdir\n```\n\nLANGUAGE: nushell\nCODE:\n```\nrm\n```\n\nLANGUAGE: nushell\nCODE:\n```\nenter <path>\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndexit\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Command that Outputs to Pipeline in Nushell\nDESCRIPTION: Shows how to create a custom command that wraps the ls command, demonstrating that custom commands can be used in pipelines just like built-in commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\ndef my-ls [] { ls }\n```\n\n----------------------------------------\n\nTITLE: Creating a Subcommand in Nushell\nDESCRIPTION: Shows how to define a subcommand by including a space in the command name, creating a new command under the 'str' namespace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_15\n\nLANGUAGE: nu\nCODE:\n```\ndef \"str mycommand\" [] {\n  \"hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables with with-env in Nushell\nDESCRIPTION: Example demonstrating how to set multiple environment variables (X and W) temporarily and access them within a block. The command returns the values in a table format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/with-env.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> with-env {X: \"Y\", W: \"Z\"} { [$env.X $env.W] }\n╭───┬───╮\n│ 0 │ Y │\n│ 1 │ Z │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: HTTP POST with Authentication\nDESCRIPTION: Posts the string 'body' to the specified URL, https://www.example.com, using the provided username and password for authentication. The `--user` and `--password` flags are used to supply the authentication credentials to the server.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_post.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> http post --user myuser --password mypass https://www.example.com 'body'\n\n```\n\n----------------------------------------\n\nTITLE: Using Modules for Custom Completions in Nushell\nDESCRIPTION: This snippet demonstrates the use of modules to organize custom completions in Nushell. The `animals` command is defined within a module and provides completion values, while the `my-command` is exported for use. This encapsulation provides a maintainable API by hiding completion logic from users.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_completions.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nmodule commands {\n    def animals [] {\n        [\"cat\", \"dog\", \"eel\" ]\n    }\n\n    export def my-command [animal: string@animals] {\n        print $animal\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Strict JSON Parsing in Nushell\nDESCRIPTION: This Nushell example shows `from json` command with the strict flag, which parses JSON strictly according to specification, rejecting any invalid JSON such as comments or trailing commas. The input is a JSON string, and the output is a structured table if the JSON is valid.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_json.md#2025-04-19_snippet_2\n\nLANGUAGE: Nushell\nCODE:\n```\n> '{ \"a\": 1, \"b\": 2 }' | from json -s\n╭───┬───╮\n│ a │ 1 │\n│ b │ 2 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Reducing Lists in Nushell\nDESCRIPTION: Demonstrates using reduce command to compute single values from lists with different accumulator operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\nlet scores = [3 8 4]\n$\"total = ($scores | reduce { |elt, acc| $acc + $elt })\"\n\n$\"total = ($scores | math sum)\"\n\n$\"product = ($scores | reduce --fold 1 { |elt, acc| $acc * $elt })\"\n\n$scores | enumerate | reduce --fold 0 { |elt, acc| $acc + $elt.index * $elt.item }\n```\n\n----------------------------------------\n\nTITLE: Command Signature for 'from xml' in Nushell\nDESCRIPTION: The signature definition for the 'from xml' command showing how to invoke it in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_xml.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from xml {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Closure Factory in Nushell\nDESCRIPTION: Shows how to create a custom command that returns a closure which captures a variable from its parent scope. The returned closure can be invoked later with the captured context intact.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/closure.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndef create_greeter [ greeting: string ]: nothing -> closure {\n    {|name| $\"($greeting), ($name)\" }\n  }\n\nlet greet = create_greeter \"Hello\"\n# Invoke the closure with `do`\ndo $greet Dalija\ndo $greet Ryan\n\n# Redefine greet with a new greeting\nlet greet = create_greeter \"Aloha\"\ndo $greet Kai\n```\n\n----------------------------------------\n\nTITLE: Case-Preserving Environment Variable Access\nDESCRIPTION: Demonstrates accessing environment variables in a case-insensitive manner with the new case-preserving feature\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-28-nushell_0_94_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n$env | get -s PATH\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Breaking Change in path type Command in Nushell\nDESCRIPTION: Example showing how the `path type` command now errors when it cannot determine a path type due to permission issues, which is a breaking change from previous behavior where it would return an empty string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> '/root/test' | path type\nError: nu::shell::io_error\n\n  × I/O error\n   ╭─[entry #1:1:1]\n 1 │ '/root/test' | path type\n   · ──────┬─────\n   ·       ╰── Permission denied (os error 13)\n   ╰────\n```\n\n----------------------------------------\n\nTITLE: Deunicode String Command in Nushell\nDESCRIPTION: This snippet showcases the use of the `str deunicode` command to convert unicode characters within a string to their ASCII counterparts. Requires Nushell environment with version supporting `str deunicode`. Takes a unicode string as input and outputs its ASCII equivalent.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"A…B\" | str deunicode\nA...B\n```\n\n----------------------------------------\n\nTITLE: Query JSON for a list of children\nDESCRIPTION: This example demonstrates how to use `query json` to extract a list of children from a JSON object. The JSON object is piped to the command, and the query `children` is used to retrieve the list. The output is a table containing the elements of the list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_json.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '{\"children\": [\"Sara\",\"Alex\",\"Jack\"]}' | query json children\n╭───┬──────╮\n│ 0 │ Sara │\n│ 1 │ Alex │\n│ 2 │ Jack │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Encoding String with Base64 in Nushell\nDESCRIPTION: Demonstrates encoding a simple text string using standard Base64 encoding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base64.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> \"Alphabet from A to Z\" | encode base64\nQWxwaGFiZXQgZnJvbSBBIHRvIFo=\n```\n\n----------------------------------------\n\nTITLE: Nushell $in scope example\nDESCRIPTION: Illustrates how `$in` scope works within a `do` block, including a sub-expression, and how the closure-scope and initial-pipeline `$in` values can coexist.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n4 | do {\n  print $in            # closure-scope $in is 4\n\n  let p = (            # explicit sub-expression, but one will be created regardless\n    $in * $in          # initial-pipeline position $in is still 4 here\n    | $in / 2          # $in is now 16\n  )                    # $p is the result, 8 - Sub-expression scope ends\n\n  print $in            # At the closure-scope, the \"original\" $in is still 4\n  print $p\n}\n```\n\nLANGUAGE: nushell\nCODE:\n```\n4 | do {\n  print $in                       # closure-scope $in is 4\n  let p = $in * $in | $in / 2     # Implicit let sub-expression\n  print $in                       # At the closure-scope, $in is still 4\n  print $p\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Hexadecimal String to Integer in Nushell\nDESCRIPTION: Demonstrates converting a hexadecimal string to its integer equivalent using radix 16.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n'FF' |  into int --radix 16\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Configuration in Nushell\nDESCRIPTION: Command to view the internal default configuration that's loaded before the user's config.nu file in Nushell 0.101+.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-04-configuration_preview.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nconfig nu --default | nu-highlight | less -R\n```\n\n----------------------------------------\n\nTITLE: Executing and Testing Custom Match Command in Nushell\nDESCRIPTION: This snippet tests the `work-on-list` command by piping different inputs through it, illustrating how it classifies them. Useful for understanding list pattern matching in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [1, 2, 3] | work-on-list\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [2, 1, 3] | work-on-list\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> \"ehe i'm not a list\" | work-on-list\n```\n\n----------------------------------------\n\nTITLE: Default Function Parameters\nDESCRIPTION: Demonstrates the new capability to set default values for function parameters and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\ndef add-maybe-hundred [x:int, y = 100] {\n  $x + $y\n}\n\nlet twelve_squared = add-maybe-hundred 44\n```\n\n----------------------------------------\n\nTITLE: Grouping Items by Column Type in Nushell\nDESCRIPTION: Demonstrates grouping the output of the ls command by the 'type' column. This organizes files and directories based on their type.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | group-by type\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins in Nushell\nDESCRIPTION: This code snippet shows how to list the currently installed plugins in Nushell. The `plugin list` command displays a list of all plugins that have been added to the plugin registry and are available for use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\nplugin list\n```\n\n----------------------------------------\n\nTITLE: Using polars drop-duplicates to Remove Duplicate Rows in a Dataframe\nDESCRIPTION: This example demonstrates how to create a dataframe with duplicate rows and then remove those duplicates using the `polars drop-duplicates` command, followed by sorting the result by column 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_drop-duplicates.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 2] [3 4] [1 2]] | polars into-df\n                | polars drop-duplicates\n                | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `skip while` to Python's `itertools.dropwhile`\nDESCRIPTION: Shows the equivalent of Nushell's `skip while` command in Python using `itertools.dropwhile`.  This function skips elements from an iterator as long as a predicate function returns true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n\"itertools.dropwhile\"\n```\n\n----------------------------------------\n\nTITLE: Custom Priority Queue Sorting in Nushell\nDESCRIPTION: Demonstrates a custom sort implementation for a task queue based on work time and priority. Tasks with zero work time are prioritized, followed by sorting by priority level.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\nlet queue = [\n    {task: 139, work_time: 0,   priority: 1 }\n    {task: 52,  work_time: 355, priority: 8 }\n    {task: 948, work_time: 72,  priority: 2 }\n    {task: 583, work_time: 0,   priority: 5 }\n]\nlet my_sort = {|a, b|\n    match [$a.work_time, $b.work_time] {\n        [0, 0] => ($a.priority > $b.priority)\n        [0, _] => true,\n        [_, 0] => false,\n        _ => ($a.priority > $b.priority)\n    }\n}\n$queue | sort-by -c $my_sort\n```\n\n----------------------------------------\n\nTITLE: Converting Specific Sheets from Excel File to Nushell Table\nDESCRIPTION: Example showing how to convert only specific sheets from a binary .xlsx file to a Nushell table using the --sheets flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_xlsx.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> open --raw test.xlsx | from xlsx --sheets [Spreadsheet1]\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating stdout and stderr output in Nushell\nDESCRIPTION: This snippet shows a simple Nushell script that prints to both stdout and stderr. It's used as a basis for demonstrating various redirection techniques.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/pipelines.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n# demo.nu\nprint \"foo\"\nprint -e \"barbar\"\n```\n\n----------------------------------------\n\nTITLE: Get user input with default value in Nushell\nDESCRIPTION: This example demonstrates the usage of the `--default` flag with the `input` command. If the user provides no input, the default value `10` will be assigned to the `user_input` variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> let user_input = (input --default 10)\n\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Lists in Nushell\nDESCRIPTION: Demonstrates various ways to use the 'append' command in Nushell to add data to existing lists or create new lists from individual items.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/append.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[0 1 2 3] | append 4\n```\n\nLANGUAGE: nushell\nCODE:\n```\n0 | append [1 2 3]\n```\n\nLANGUAGE: nushell\nCODE:\n```\n\"a\" | append [\"b\"]\n```\n\nLANGUAGE: nushell\nCODE:\n```\n[0 1] | append [2 3 4]\n```\n\nLANGUAGE: nushell\nCODE:\n```\n[0 1] | append [2 nu 4 shell]\n```\n\nLANGUAGE: nushell\nCODE:\n```\n[0 1] | append 2..4\n```\n\n----------------------------------------\n\nTITLE: POST Request with JSON Payload in Nushell\nDESCRIPTION: Demonstrates making a POST request with a JSON payload loaded from a file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nopen payload.json | get my_payload | to json | http post https://jsonplaceholder.typicode.com/posts $in\n```\n\n----------------------------------------\n\nTITLE: Print Command Signature in Nushell\nDESCRIPTION: Command signature showing the basic syntax for the print command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/print.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> print {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Accessing a Record Value in Nushell\nDESCRIPTION: This snippet demonstrates how to define a record and access one of its values using cell-path syntax. The record contains two keys, 'a' and 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet my_record = {\n    a: 5\n    b: 42\n  }\n$my_record.b + 5\n# => 47\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns and Limiting Results in Nushell\nDESCRIPTION: Shows how to rename columns for better readability and limit results to the top 10 contributors. This refined command provides a focused view of the most active project contributors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_22\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | group-by name | transpose | upsert column1 {|c| $c.column1 | length} | sort-by column1 | rename name commits | reverse | first 10\n```\n\n----------------------------------------\n\nTITLE: Error When Dynamically Creating a Filename for Source Command in Nushell\nDESCRIPTION: This example shows the error that occurs when trying to use a variable to create a dynamic path for sourcing a file. Variables aren't resolved during parsing, only during evaluation, causing the source command to fail.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nlet my_path = \"~/nushell-files\"\nsource $\"($my_path)/common.nu\"\n```\n\n----------------------------------------\n\nTITLE: Complete External Completer Implementation in Nushell\nDESCRIPTION: Full implementation combining all completer types with alias support and error handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/external_completers.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nlet fish_completer = ...\n\nlet carapace_completer = {|spans: list<string>|\n    carapace $spans.0 nushell ...$spans\n    | from json\n    | if ($in | default [] | where value =~ '^-.*ERR$' | is-empty) { $in } else { null }\n}\n\n# This completer will use carapace by default\nlet external_completer = {|spans|\n    let expanded_alias = scope aliases\n    | where name == $spans.0\n    | get -i 0.expansion\n\n    let spans = if $expanded_alias != null {\n        $spans\n        | skip 1\n        | prepend ($expanded_alias | split row ' ' | take 1)\n    } else {\n        $spans\n    }\n\n    match $spans.0 {\n        # carapace completions are incorrect for nu\n        nu => $fish_completer\n        # fish completes commits and branch names in a nicer way\n        git => $fish_completer\n        # carapace doesn't have completions for asdf\n        asdf => $fish_completer\n        # use zoxide completions for zoxide commands\n        __zoxide_z | __zoxide_zi => $zoxide_completer\n        _ => $carapace_completer\n    } | do $in $spans\n}\n\n$env.config = {\n    # ...\n    completions: {\n        external: {\n            enable: true\n            completer: $external_completer\n        }\n    }\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: URL Parsing Example in Nushell\nDESCRIPTION: Demonstrates parsing a complex URL containing all possible components including authentication, query parameters, and fragment. The command returns a structured record with parsed components.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_parse.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'http://user123:pass567@www.example.com:8081/foo/bar?param1=section&p2=&f[name]=vldc&f[no]=42#hello' | url parse\n```\n\n----------------------------------------\n\nTITLE: Using the help command in Nushell\nDESCRIPTION: The signature for the Nushell help command, which takes optional flags and rest parameters to display documentation about commands, aliases, and modules.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> help {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Command with Error Handling in Nushell\nDESCRIPTION: Defines a custom command that creates an error message with proper span information from the input parameter. This demonstrates a complete error creation pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/creating_errors.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef my-command [x] {\n    let span = (metadata $x).span;\n    error make {\n        msg: \"this is fishy\",\n        label: {\n            text: \"fish right here\",\n            span: $span\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Commands with Keybindings in Nushell\nDESCRIPTION: The snippet configures a keybinding to change directories using an fzf query executed with 'Ctrl + y'. The command utilizes various pipes for filtering directories and sending commands directly to the host. This increases efficiency by reducing command history clutter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n    keybindings: [\n    {\n      name: change_dir_with_fzf\n      modifier: CONTROL\n      keycode: Char_y\n      mode: emacs\n      event: {\n        send: executehostcommand,\n        cmd: \"cd (ls | where type == dir | each { |row| $row.name} | str join (char nl) | fzf | decode utf-8 | str trim)\"\n      }\n    }\n  ]\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Order Demonstration in Nushell\nDESCRIPTION: Shows how pattern matching handles overlapping cases by using the first matching pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/pattern_matching.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[yellow green] | each {|c|\n  match $c {\n    \"green\" => \"fundamental\"\n    \"yellow\" | \"green\" => \"vibrant\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing All Definitions from Module in Nushell\nDESCRIPTION: Shows how to import all definitions from a module using the wildcard (*) syntax, then calling the imported functions directly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/use.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam { export def foo [] { \"foo\" }; export def bar [] { \"bar\" } }; use spam *; (foo) + (bar)\n```\n\n----------------------------------------\n\nTITLE: Creating an Idiomatic Nushell Command for Listing Files\nDESCRIPTION: This code snippet defines a function 'lsg' that lists files and sorts them by type and name, then formats the output in a grid view while trimming whitespace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\ndef lsg [] { ls | sort-by type name -i | grid -c | str trim }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'explain' Command Usage in Nushell\nDESCRIPTION: This example demonstrates how to use the 'explain' command to analyze a closure that lists files, sorts them, and gets their names. The output is then formatted into a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/explain.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> explain {|| ls | sort-by name type --ignore-case | get name } | table --expand\n```\n\n----------------------------------------\n\nTITLE: Generating Default Random UUID (v4) in Nushell\nDESCRIPTION: This example demonstrates generating a random UUID v4 string, which is the default version if not specified.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_uuid.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nrandom uuid\n```\n\n----------------------------------------\n\nTITLE: Make Docs Script Update - Nushell\nDESCRIPTION: This snippet shows that `make_docs.nu` script has been updated for Nu v0.93.0. This indicates changes in the documentation generation process to align with the new Nushell version. Keeping documentation generation scripts up-to-date is crucial for maintaining accurate and consistent documentation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_6\n\nLANGUAGE: Nushell\nCODE:\n```\nhustcer [fixed make_docs.nu for Nu v0.93.0](https://github.com/nushell/nushell.github.io/pull/1389)\n```\n\n----------------------------------------\n\nTITLE: Signature of str reverse Command in Nushell\nDESCRIPTION: The command signature showing the syntax for the 'str reverse' command, including flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_reverse.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> str reverse {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Mask for Polars DataFrame in Nushell\nDESCRIPTION: Demonstrates creating a complex mask by checking if values exist in other Series and using it to filter a Polars DataFrame in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_30\n\nLANGUAGE: nu\nCODE:\n```\nlet mask_2 = $df_1 | polars col first | polars is-in [b c]\n$df_1 | polars filter-with $mask_2\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Data with HTTP Command\nDESCRIPTION: This snippet demonstrates how to post JSON data to a specified URL using the HTTP command in Nushell. The first example shows a non-streaming version where the content-type is set automatically. The second shows a streaming version requiring a manual content-type specification.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n# non-streaming version, content-type is automatically set\nopen test.json | http post https://httpbin.org/post\n\n# streaming version, content-type needs to be set manually\nopen --raw test.json | http post -t application/json https://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Grouping Boolean Values in Nushell\nDESCRIPTION: Shows how group-by handles boolean values, combining string representations and actual boolean values in the same groups.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> [true \"true\" false \"false\"] | group-by\n```\n\n----------------------------------------\n\nTITLE: Ordering Overlays in Nushell\nDESCRIPTION: This snippet illustrates how overlays function as a stack and how to manage the precedence of definitions from different overlays using the 'overlay use' command. It explains how to retrieve the last active overlay's definition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n(zero)> def foo [] { \"foo-in-zero\" }\n\n(zero)> overlay use spam\n\n(spam)> foo\nfoo\n\n(spam)> overlay use zero\n\n(zero)> foo\nfoo-in-zero\n\n(zero)> overlay list\n───┬──────\n 0 │ spam\n 1 │ zero\n───┴──────\n```\n\n----------------------------------------\n\nTITLE: Environment and Path Management in Nushell\nDESCRIPTION: Commands for working with environment variables and managing the system path in Nushell. These replace CMD.EXE's SET, PATH, SETLOCAL, and ENDLOCAL commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_cmd.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n$env.<var> = <string>\n```\n\nLANGUAGE: nushell\nCODE:\n```\n$env.Path\n```\n\nLANGUAGE: nushell\nCODE:\n```\n$env.Path = ($env.Path | append <path>)\n```\n\nLANGUAGE: nushell\nCODE:\n```\n$env.Path = ($env.Path | prepend <path>)\n```\n\nLANGUAGE: nushell\nCODE:\n```\nexport-env\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'break' in a For Loop in Nushell\nDESCRIPTION: This snippet shows how to use the 'break' command to exit a for loop early when a condition is met. It prints numbers from 1 to 3 and then breaks the loop.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\nfor x in 1..10 { if $x > 3 { break }; print $x }\n```\n\n----------------------------------------\n\nTITLE: Executing a SQL statement with named parameters\nDESCRIPTION: This snippet demonstrates how to execute a SQL SELECT statement with named parameters. It creates a table, inserts data, and then queries the table based on the 'search_second' parameter in the WHERE clause.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_db.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\"> stor create -t my_table -c { first: str, second: int }\\nstor insert -t my_table -d { first: 'hello', second: '123' }\\nstor open | query db \\\"SELECT * FROM my_table WHERE second = :search_second\\\" -p { search_second: 123 }\\n╭───┬───────┬────────╮\\n│ # │ first │ second │\\n├───┼───────┼────────┤\\n│ 0 │ hello │    123 │\\n╰───┴───────┴────────╯\\n\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'continue' Usage in a For Loop in Nushell\nDESCRIPTION: This example demonstrates how to use the 'continue' command within a for loop in Nushell. It iterates from 1 to 10, skipping the number 5 using the continue command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/continue.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> for i in 1..10 { if $i == 5 { continue }; print $i }\n```\n\n----------------------------------------\n\nTITLE: Upserting Values in Mutable Data Structures in Nushell\nDESCRIPTION: Shows how to create a mutable nested data structure and update a value within it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mut.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nmut a = {b:{c:1}}; $a.b.c = 2\n```\n\n----------------------------------------\n\nTITLE: Flattening and Accessing First Item in Nushell\nDESCRIPTION: Shows how to flatten a table and retrieve the first item from the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/flatten.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[N, u, s, h, e, l, l]] | flatten | first\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple MessagePack Objects in NuShell\nDESCRIPTION: This code illustrates how to read a stream of multiple objects from MessagePack format using the \"from msgpack --objects\" option in NuShell. The flag \"--objects\" is used to specify that multiple objects should be read from the input stream. The input is MessagePack encoded data, and the output is a table representing multiple objects.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_msgpack.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[81A76E757368656C6CA5726F636B73A9736572696F75736C79] | from msgpack --objects\n╭───┬─────────────────────╮\n│ 0 │ ╭─────────┬───────╮ │\n│   │ │ nushell │ rocks │ │\n│   │ ╰─────────┴───────╯ │\n│ 1 │ seriously           │\n╰───┴─────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting nuon formatted lists to structured data in Nushell\nDESCRIPTION: This Nushell example shows the conversion of a more complex nuon formatted string with nested lists into a structured table. The snippet illustrates how nested data is handled and represented in a tabular format. Similar to other examples, it runs within the Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_nuon.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '{ a:1, b: [1, 2] }' | from nuon\n╭───┬───────────╮\n│ a │ 1         │\n│   │ ╭───┬───╮ │\n│ b │ │ 0 │ 1 │ │\n│   │ │ 1 │ 2 │ │\n│   │ ╰───┴───╯ │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Using 'to html' Command with Partial Output Flag\nDESCRIPTION: Shows how to use the 'to html' command with the --partial flag to output only the HTML for the content itself, without the complete HTML document structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_html.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [1 2]] | to html --partial\n<div style=\"background-color:white;color:black;\"><table><thead><tr><th>foo</th><th>bar</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table></div>\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String with One Decimal in Nushell\nDESCRIPTION: Illustrates converting a floating-point number to a string with one decimal place.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 1.7 | into string --decimals 1\n1.7\n```\n\n----------------------------------------\n\nTITLE: Saving DataFrame to CSV\nDESCRIPTION: Example of saving a dataframe to CSV format\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars save test.csv\n```\n\n----------------------------------------\n\nTITLE: Redirecting Stdout in Nushell Pipeline\nDESCRIPTION: Demonstrates how to capture stdout from an external command and pass it to a Nushell command in a pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nexternal | str join\n```\n\n----------------------------------------\n\nTITLE: Variable Shadowing in Nushell\nDESCRIPTION: Shows how immutable variables can be shadowed in different scopes using the 'let' keyword.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet val = 42                   # declare a variable\ndo { let val = 101;  $val }    # in an inner scope, shadow the variable\n# => 101\n$val                           # in the outer scope the variable remains unchanged\n# => 42\nlet val = $val + 1             # now, in the outer scope, shadow the original variable\n$val                           # in the outer scope, the variable is now shadowed, and\n# => 43                               # its original value is no longer available.\n```\n\n----------------------------------------\n\nTITLE: Parallel Processing with Value Pass-through in Nushell\nDESCRIPTION: Example showing how to process a value on another thread while also using it in the main pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tee.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 10000 | tee { 1..$in | print } | $in * 5\n```\n\n----------------------------------------\n\nTITLE: Using RFC 3339 Date Format in Nushell\nDESCRIPTION: Examples of the various ways to represent datetime values in Nushell using RFC 3339 format, including date-only, date with time, and date with time and timezone offset.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/datetime.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDate-only: `2022-02-02`\nDate and time (GMT): `2022-02-02T14:30:00`\nDate and time including timezone offset: `2022-02-02T14:30:00+05:00`\n```\n\n----------------------------------------\n\nTITLE: Handling Globs for Variables in Nushell\nDESCRIPTION: This code demonstrates how to handle glob patterns with string variables in Nushell. It shows three methods for using glob patterns effectively with commands. This is critical for ensuring that users can expand glob patterns as needed for file manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-03-05-nushell_0_91_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet f = \"a*c.txt\"\nrm ...(glob $f)\n```\n\nLANGUAGE: nushell\nCODE:\n```\nlet f = \"a*c.txt\"\nrm ($f | into glob)\n```\n\nLANGUAGE: nushell\nCODE:\n```\nlet f: glob = \"a*c.txt\"\nrm $f\n```\n\n----------------------------------------\n\nTITLE: Debug String Example\nDESCRIPTION: Example showing how to debug print a simple string value\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'hello' | debug\nhello\n```\n\n----------------------------------------\n\nTITLE: Basic List Sum Reduction\nDESCRIPTION: Demonstrates summing a list of numbers using reduce, equivalent to math sum operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[ 1 2 3 4 ] | reduce {|it, acc| $it + $acc }\n```\n\n----------------------------------------\n\nTITLE: Basic Command Signature in Nushell\nDESCRIPTION: Shows the basic syntax for defining a custom command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/def.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> def {flags} (def_name) (params) (block)\n```\n\n----------------------------------------\n\nTITLE: Record Merging with Reduce\nDESCRIPTION: Merges multiple records into a single record using reduce and merge commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n[{a: 1} {b: 2} {c: 3}] | reduce {|it| merge $it}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Environment Variables in Nushell Plugins\nDESCRIPTION: Demonstrates how to get and set environment variables using the EngineInterface in Nushell plugins. Includes examples for retrieving PATH, getting all environment variables, and setting a new variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\n// Get the PATH environment variable\nlet paths: Value = engine.get_env_var(\"PATH\")?;\n// Get all environment variables\nlet envs: HashMap<String, Value> = engine.get_env_vars()?;\n// Set an environment variable\nengine.add_env_var(\"FOO\", Value::string(\"bar\", call.head))?\n```\n\n----------------------------------------\n\nTITLE: Loading a CSV file as a dataframe in Nushell\nDESCRIPTION: Shows how to load a CSV file into a dataframe using the polars open command. This is the first step in working with dataframes in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nlet df_1 = polars open --eager test_small.csv\n```\n\n----------------------------------------\n\nTITLE: Listing Directories in Nushell\nDESCRIPTION: Lists all directories in the current directory using ls command with type filtering. Shows directory details including name, type, size and modification time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/system.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nls | where type == dir\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns in a Table in Nushell\nDESCRIPTION: This snippet demonstrates how to rename multiple columns in a table using the rename command with the ls command output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\nls | rename filename filetype filesize date\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Mode for Accessibility in Nushell\nDESCRIPTION: This snippet explains how to configure the table mode in Nushell to improve accessibility for users with screen readers. By setting the `$env.config.table.mode` to either `\"basic\"` or `\"none\"`, the fancy unicode characters in tables are removed, making them easier to read by screen readers. This helps in understanding the output of commands in the REPL.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n$env.config.table.mode\n```\n\n----------------------------------------\n\nTITLE: Importing all definitions from a module\nDESCRIPTION: This snippet demonstrates how to import all of the definitions from the `std/formats` module.  The `to jsonl` command is placed directly in the current scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nuse std/formats *\nls | to jsonl\n```\n\n----------------------------------------\n\nTITLE: Mutable Variable Pattern for Keyboard Input in Nushell\nDESCRIPTION: Implementation using mutable variables to store key results and return values after the input loop ends. Uses a list of valid keys for comparison.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/input_listen_keys.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndef run_some_code [] {\n  print \"I'm running the code and returning 42\"\n  42\n}\n\nmut key_props = []\nprint '(a) Run some code (x) Exit'\n\nloop {\n  let key = (input listen --types [key])\n  $key_props = [$key.code $key.modifiers]\n  let valid_keys = [\n    [ 'a' [] ]\n    [ 'x' [] ]\n    [ 'c' ['keymodifiers(control)'] ]\n  ]\n\n  if $key_props in $valid_keys {\n      break\n  } else {\n      print \"That key wasn't recognized.\"\n      print 'Press (a) to run some code or (x) to Exit'\n      continue\n  }\n}\n\nif $key_props == [ 'a' [] ] {\n    run_some_code\n} else if $key_props == [ 'x' [] ] {\n    print 'User exited'\n} else if $key_props == [ 'c' ['keymodifiers(control)'] ] {\n    print 'Terminated with Ctrl-C'\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Group-By and Aggregation on LazyFrame in Nushell\nDESCRIPTION: This example demonstrates how to use 'polars group-by' to group data by a column, perform multiple aggregations, and collect the results. It groups by column 'a', calculates min, max, and sum of column 'b', then sorts the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_group-by.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [1 4] [2 6] [2 4]]\n    | polars into-lazy\n    | polars group-by a\n    | polars agg [\n        (polars col b | polars min | polars as \"b_min\")\n        (polars col b | polars max | polars as \"b_max\")\n        (polars col b | polars sum | polars as \"b_sum\")\n     ]\n    | polars collect\n    | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Multiple Column Sorting in Nushell\nDESCRIPTION: Demonstrates sorting directory contents by multiple columns (size and modified time).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nls | sort-by size modified\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Modification Date in Nushell\nDESCRIPTION: Shows how to list all files that were modified in the last two weeks using the 'where' command with date comparison.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nls | where modified >= (date now) - 2wk\n```\n\n----------------------------------------\n\nTITLE: Nushell Panic Command Signature\nDESCRIPTION: The command signature showing the syntax for the panic command with optional flags and required message parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/panic.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> panic {flags} (msg)\n```\n\n----------------------------------------\n\nTITLE: Using Exclusive End Index with bytes at in Nushell\nDESCRIPTION: This example shows how to extract a single byte at index 3 using an exclusive end index notation (3..<4). The output displays the extracted byte in hexadecimal format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[33 44 55 10 01 13 10] | bytes at 3..<4\nLength: 1 (0x1) bytes | printable whitespace ascii_other non_ascii\n00000000:   10                                                   •\n\n```\n\n----------------------------------------\n\nTITLE: Generating Previous 10 Days in YYYY-MM-DD Format\nDESCRIPTION: This example shows how to use the 'seq date' command with the --reverse flag to generate a list of the previous 10 days in the YYYY-MM-DD format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --days 10 --reverse\n```\n\n----------------------------------------\n\nTITLE: Multi-line Command Behavior in Nushell\nDESCRIPTION: Demonstrates how multiple commands are evaluated and only the last value is returned.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\ndef latest-file [] {\n    print \"Returning last file\"\n    ls | sort-by modified | last\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\n40; 50; 60\n```\n\n----------------------------------------\n\nTITLE: Converting XML String to Nushell Record\nDESCRIPTION: Example showing how to convert an XML-formatted string into a structured Nushell record. The example demonstrates the hierarchical representation of XML elements including tags, attributes, and content.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_xml.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n  <remember>Event</remember>\n</note>' | from xml\n╭────────────┬───────────────────────────────────────────────────────────────────────────╮\n│ tag        │ note                                                                      │\n│ attributes │ {record 0 fields}                                                         │\n│            │ ╭───┬──────────┬───────────────────┬────────────────────────────────────╮ │\n│ content    │ │ # │   tag    │    attributes     │              content               │ │\n│            │ ├───┼──────────┼───────────────────┼────────────────────────────────────┤ │\n│            │ │ 0 │ remember │ {record 0 fields} │ ╭───┬─────┬────────────┬─────────╮ │ │\n│            │ │   │          │                   │ │ # │ tag │ attributes │ content │ │ │\n│            │ │   │          │                   │ ├───┼─────┼────────────┼─────────┤ │ │\n│            │ │   │          │                   │ │ 0 │     │            │ Event   │ │ │\n│            │ │   │          │                   │ ╰───┴─────┴────────────┴─────────╯ │ │\n│            │ ╰───┴──────────┴───────────────────┴────────────────────────────────────╯ │\n╰────────────┴───────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Pivoting Test Scores Example\nDESCRIPTION: Example demonstrating how to pivot test score data to show individual scores by subject using the polars pivot command. The example transforms data from long format to wide format using subject as columns and student names as index.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_pivot.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[name subject test_1 test_2]; [Cady maths 98 100] [Cady physics 99 100] [Karen maths 61 60] [Karen physics 58 60]] | polars into-df |  polars pivot --on [subject] --index [name] --values [test_1]\n```\n\n----------------------------------------\n\nTITLE: Nested Value Sorting\nDESCRIPTION: Example showing how to sort by a nested value in a complex data structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort-by.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name info]; [Cairo {founded: 969}] [Kyoto {founded: 794}]] | sort-by info.founded\n```\n\n----------------------------------------\n\nTITLE: Example of `$in` usage in Nushell\nDESCRIPTION: This snippet demonstrates the new behavior of `$in` expressions in Nushell 0.96.0, where `$in` at the beginning of a block always refers to the input of the block. In this example, both `$x` and `$y` will be assigned the value 42, resulting in `[42 42]`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n```nushell\ndef example [] {\n    let x = $in\n    let y = $in\n    [$x $y]\n}\n42 | example\n```\n```\n\n----------------------------------------\n\nTITLE: Sequential file processing in Nushell\nDESCRIPTION: This code shows a Nushell script that iterates through files matching a pattern, opens each file, counts the number of lines, and creates a record with the filename and line count. This uses the `each` command to process files sequentially.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\nls **/*.rs | each { |row|\n  let num_lines = (open $row.name | lines | length)\n  {name: $row.name, loc: $num_lines}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Merging Tables in Nushell\nDESCRIPTION: This example demonstrates how to merge two tables with different columns using the merge command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nlet first = [[a b]; [1 2]]\nlet second = [[c d]; [3 4]]\n$first | merge $second\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Command Example in Nushell\nDESCRIPTION: Demonstrates how to define a custom command in a module, export it, and then use it. Creates a module named spam with a function foo that returns 'foo'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_def.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export def foo [] { \"foo\" } }; use spam foo; foo\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Definitions from Module in Nushell\nDESCRIPTION: Shows how to import multiple specific definitions from a module by wrapping them in a list, then calling the imported functions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/use.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam { export def foo [] { \"foo\" }; export def 'foo bar' [] { \"baz\" } }; use spam ['foo', 'foo bar']; (foo) + (foo bar)\n```\n\n----------------------------------------\n\nTITLE: Nested Data Sorting in Nushell\nDESCRIPTION: Shows how to sort complex nested data structures using cell paths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nlet cities = [\n    {name: 'New York', info: { established: 1624, population: 18_819_000 } }\n    {name: 'Kyoto', info: { established: 794, population: 37_468_000 } }\n    {name: 'São Paulo', info: { established: 1554, population: 21_650_000 } }\n]\n$cities | sort-by info.established\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop in Nushell\nDESCRIPTION: Demonstrates a basic for loop that iterates over a list, squares each number, and prints the result. Shows the syntax of iterating through a collection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\nfor x in [1 2 3] { $x * $x | print }\n# => 1\n# => 4\n# => 9\n```\n\n----------------------------------------\n\nTITLE: Converting Binary IP Address to String in Nushell\nDESCRIPTION: This code snippet shows how to convert a binary representation of an IP address to a string format in Nushell. It uses the `chunks`, `each`, `into`, and `str join` commands to achieve this conversion. It takes a hexadecimal representation of an IP address, splits it into chunks of 1 byte, converts each chunk to an integer, and then joins them with a dot to form the string representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n0x[7F000001] | chunks 1 | each { into int } | str join \".\"\n# => 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Mutable Variables in Nushell Blocks vs Closures\nDESCRIPTION: This snippet compares how mutable variables work differently in blocks versus closures. It shows that blocks can modify mutable variables from parent scopes, while closures cannot capture mutable variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/block.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n# This won't work\nmut x = 9\ndo { $x += 1 }\n# => Error: Capture of mutable variable.\n# But this will work:\nif true { $x += 1 }\n# => 10\n```\n\n----------------------------------------\n\nTITLE: Filtering Dataframe with Expression\nDESCRIPTION: Example showing how to filter a dataframe where column 'a' values are greater than or equal to 4\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_filter.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars filter ((polars col a) >= 4)\n```\n\n----------------------------------------\n\nTITLE: Converting Polars Column Expression to Nushell Value\nDESCRIPTION: This example demonstrates how to convert a Polars column expression into a Nushell value, including an index in the output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-nu.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\npolars col a | polars into-nu --index\n```\n\n----------------------------------------\n\nTITLE: Calendar Data Processing with Nushell\nDESCRIPTION: Advanced example demonstrating how to use cal with table output to perform data operations, specifically counting Friday the 13th occurrences in a given year.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cal.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> cal --as-table --full-year 2015 | where fr == 13 | length\n\n```\n\n----------------------------------------\n\nTITLE: Join List of Path Parts\nDESCRIPTION: Example showing how to join a list of path components into a single path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> [ '/' 'home' 'viking' 'spam.txt' ] | path join\n/home/viking/spam.txt\n```\n\n----------------------------------------\n\nTITLE: Converting String to Integer in Nushell\nDESCRIPTION: Shows how to convert a string representation of a number to an integer value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n'2' | into int\n```\n\n----------------------------------------\n\nTITLE: Finding Max Values in Dataframe Columns using Polars in Nushell\nDESCRIPTION: Demonstrates how to find the maximum value in each column of a dataframe. The example creates a dataframe from a table with columns 'a' and 'b', then applies the polars max command to find the maximum value in each column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_max.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [6 2] [1 4] [4 1]] | polars into-df | polars max\n```\n\n----------------------------------------\n\nTITLE: Raw String Literal Examples in Nushell\nDESCRIPTION: Showcases the new raw string literal syntax with different quote scenarios and delimiter configurations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-28-nushell_0_94_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nr#'some text'# == 'some text' # true\n\nr#'contains 'quoted' text'# == \"contains 'quoted' text\"\n\nr###'this text has multiple '## symbols'###\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML Table Example\nDESCRIPTION: Example demonstrating how to extract and parse an HTML table from Wikipedia into a structured Nushell table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_web.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://en.wikipedia.org/wiki/List_of_cities_in_India_by_population |\n        query web --as-table [City 'Population(2011)[3]' 'Population(2001)[3][a]' 'State or unionterritory' 'Reference']\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Using Direct Assignment\nDESCRIPTION: This example demonstrates the straightforward method of setting an environment variable in Nushell using direct assignment. It highlights how users can assign a value to an environment variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$env.FOO = 'BAR'\n```\n\n----------------------------------------\n\nTITLE: Converting Record to URL with Authentication and Query in Nushell\nDESCRIPTION: This example demonstrates using 'url join' to convert a record containing authentication information (username and password) and a query string into a complete URL.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_join.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n{\n        \"scheme\": \"http\",\n        \"username\": \"user\",\n        \"password\": \"pwd\",\n        \"host\": \"www.pixiv.net\",\n        \"port\": \"1234\",\n        \"query\": \"test=a\",\n        \"fragment\": \"\"\n    } | url join\n```\n\n----------------------------------------\n\nTITLE: Computing Product of Number List\nDESCRIPTION: Example showing how to calculate the product of a list of numbers using the math product command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_product.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [2 3 3 4] | math product\n72\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginCommand for Stream Support in Rust\nDESCRIPTION: This snippet demonstrates how to implement the PluginCommand trait to support streaming input and output in a Nushell plugin. It handles both string and list inputs, and can process streaming data efficiently.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// add these imports:\nuse nu_protocol::{IntoPipelineData, PipelineData};\n// ...\n\n// change SimplePluginCommand to PluginCommand:\nimpl PluginCommand for Len {\n    type Plugin = LenPlugin;\n\n    // ...\n\n    fn signature(&self) -> Signature {\n        // ... add the list type to the signature\n        Signature::build(PluginCommand::name(self))\n            .input_output_types(vec![\n                (Type::String, Type::Int),\n                (Type::List(Type::Any.into()), Type::Int),\n            ])\n    }\n\n    // ... and change input and output types to PipelineData\n    fn run(\n        &self,\n        _plugin: &LenPlugin,\n        _engine: &EngineInterface,\n        call: &EvaluatedCall,\n        input: PipelineData,\n    ) -> Result<PipelineData, LabeledError> {\n        // Check if the input is a stream or list\n        match input {\n            PipelineData::ListStream(..) |\n            PipelineData::Value(Value::List { .. }, _) => {\n                // Count the iterable's elements\n                let length = input.into_iter().count();\n                Ok(\n                    Value::int(length as i64, call.head).into_pipeline_data()\n                )\n            },\n            input => {\n                // Handle a string\n                let span = input.span().unwrap_or(call.head);\n                let value = input.into_value(span);\n                match &value {\n                    Value::String { val, .. } => Ok(\n                        Value::int(val.len() as i64, value.span()).into_pipeline_data()\n                    ),\n                    _ => Err(\n                        LabeledError::new(\n                            \"Expected String or iterable input from pipeline\",\n                        ).with_label(\n                            format!(\n                                \"requires string or iterable input; got {}\",\n                                value.get_type(),\n                            ),\n                            call.head,\n                        )\n                    ),\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Temporary File with Pattern\nDESCRIPTION: Creates a temporary file using a specified pattern where XXX is replaced with random characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mktemp.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> mktemp testfile.XXX\n<WORKING_DIR>/testfile.4kh\n```\n\n----------------------------------------\n\nTITLE: Example of Importing a SQLite Database in Nushell\nDESCRIPTION: Demonstrates how to import a SQLite database file named 'nudb.sqlite' into the in-memory SQLite database using the 'stor import' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_import.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> stor import --file-name nudb.sqlite\n\n```\n\n----------------------------------------\n\nTITLE: Parameterized Command Definition\nDESCRIPTION: Shows how to define and use a command with string parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/def.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> def say-sth [sth: string] { echo $sth }; say-sth hi\nhi\n```\n\n----------------------------------------\n\nTITLE: Running Nushell\nDESCRIPTION: This snippet shows how to launch Nushell after it has been installed. It simply involves typing `nu` in the terminal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"nu\"\n```\n\n----------------------------------------\n\nTITLE: Group-By Max Aggregation with Polars in Nushell\nDESCRIPTION: Shows how to perform a group-by operation followed by a max aggregation on a specific column. The example creates a dataframe, groups it by column 'a', then finds the maximum value of column 'b' for each group before sorting the results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_max.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [one 2] [one 4] [two 1]]\n                | polars into-df\n                | polars group-by a\n                | polars agg (polars col b | polars max)\n                | polars collect\n                | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Find in Specific Columns\nDESCRIPTION: Example demonstrating how to search and highlight text in specific columns of a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n> [[col1 col2 col3]; [moe larry curly] [larry curly moe]] | find moe --columns [col1]\n╭───┬──────┬───────┬───────╮\n│ # │ col1 │ col2  │ col3  │\n├───┼──────┼───────┼───────┤\n│ 0 │ moe  │ larry │ curly │\n╰───┴──────┴───────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Problematic Directory Change Before Sourcing in Nushell\nDESCRIPTION: This example demonstrates why changing directories before sourcing a file fails. The cd command doesn't execute until evaluation, but source needs the file during parsing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nif ('spam/foo.nu' | path exists) {\n    cd spam\n    source-env foo.nu\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unset Environment Variables Safely\nDESCRIPTION: This code snippet demonstrates how to safely handle potentially unset environment variables in Nushell using the question mark operator and default value methods to avoid errors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n$env.FOO? | describe\n```\n\nLANGUAGE: nu\nCODE:\n```\n$env.FOO? | default \"BAR\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command with Required Positional Parameters in Nushell\nDESCRIPTION: This snippet demonstrates how to define a custom 'greet' command with two required positional parameters. It shows the command definition and examples of correct and incorrect usage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_20\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [name1, name2] {\n  $\"Hello, ($name1) and ($name2)!\"\n}\n\ngreet Wei Mei\n# => Hello, Wei and Mei!\n\ngreet Wei\n# => Error: nu::parser::missing_positional\n# =>\n# =>   × Missing required positional argument.\n# =>    ╭─[entry #1:1:10]\n# =>  1 │ greet Wei\n# =>    ╰────\n# =>   help: Usage: greet <name1> <name2> . Use `--help` for more information.\n```\n\n----------------------------------------\n\nTITLE: Formatting with Pattern\nDESCRIPTION: This example demonstrates how to use `format pattern` to print filenames and their sizes by formatting the output of the `ls` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_pattern.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ls | format pattern '{name}: {size}'\n```\n\n----------------------------------------\n\nTITLE: Detailed Record Description - Nushell\nDESCRIPTION: Example demonstrating detailed description of a complex record structure containing multiple data types including strings, booleans, nested records, lists, closures, dates, and durations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/describe.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> {shell:'true', uwu:true, features: {bugs:false, multiplatform:true, speed: 10}, fib: [1 1 2 3 5 8], on_save: {|x| $'Saving ($x)'}, first_commit: 2019-05-10, my_duration: (4min + 20sec)} | describe -d\n```\n\n----------------------------------------\n\nTITLE: Saving DataFrame to Arrow Format\nDESCRIPTION: Example of saving a dataframe to an Arrow/IPC file\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars save test.arrow\n```\n\n----------------------------------------\n\nTITLE: Computing Absolute Values of Number List\nDESCRIPTION: Example showing how to compute absolute values for a list of numbers including negative values. Returns a table with absolute values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_abs.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [-50 -100.0 25] | math abs\n╭───┬────────╮\n│ 0 │     50 │\n│ 1 │ 100.00 │\n│ 2 │     25 │\n╰───┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Executing External Commands in Nushell\nDESCRIPTION: Demonstrates the functionality of the 'run-external' command in Nushell, illustrating changes in argument parsing between versions 0.94 and 0.95. The command now processes arguments without special call conventions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> run-external echo \"'foo'\"\n# 0.94: foo\n# 0.95: 'foo'\n> run-external echo \"*.txt\"\n# 0.94: (glob is expanded)\n# 0.95: *.txt\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Shells in Nushell\nDESCRIPTION: Demonstrates Nushell's ability to manage multiple shell instances and navigate between directories using the 'enter' command and shells listing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n> enter ../rhai/\n/home/sophia/Source/rhai(master)> shells\n---+---+------------+-----------------------------\n # |   | name       | path\n---+---+------------+-----------------------------\n 0 |   | filesystem | /home/sophia/Source/nushell\n 1 | X | filesystem | /home/sophia/Source/rhai\n---+---+------------+-----------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining and Testing Functions in Nushell\nDESCRIPTION: This Nushell snippet demonstrates how to define a simple addition function and test it using the newly supported test annotations. The function takes two integer parameters and returns their sum. The test verifies the function's correctness using the 'assert equal' command. No external dependencies are required, and the 'std testing run-tests' command is used to execute the test. This simplifies test management by eliminating the need for naming conventions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-07-25-nushell_0_83.md#2025-04-19_snippet_5\n\nLANGUAGE: Nushell\nCODE:\n```\ndef add [a: int, b: int] {\n    $a + $b\n}\n\n#[test]\ndef addition [] {\n    use std assert\n    assert equal (add 1 2) 3\n}\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Sorting in Nushell\nDESCRIPTION: Demonstrates stable case-insensitive sorting with the -i flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[\"foo\" \"FOO\" \"BAR\" \"bar\"] | sort -i\n```\n\n----------------------------------------\n\nTITLE: Query JSON for array length\nDESCRIPTION: This example shows how to retrieve the length of an array within a JSON object using `query json`. The query `children.#` uses the `#` character to return the number of elements in the `children` array. The output is the integer representing the array length.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_json.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> '{\"children\": [\"Sara\",\"Alex\",\"Jack\"]}' | query json children.#\n3\n```\n\n----------------------------------------\n\nTITLE: Sorting Files by Size in Nushell\nDESCRIPTION: Shows how to pipe ls output to sort-by and reverse commands to sort files by their size in descending order, demonstrating Nushell's data manipulation capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nls | sort-by size | reverse\n# => ────┬────────────────────┬──────┬────────┬────────────\n# =>  #  │ name               │ type │ size   │ modified\n# => ────┼────────────────────┼──────┼────────┼────────────\n# =>   0 │ Gemfile.lock       │ File │ 6.9 KB │ 3 days ago\n# =>   1 │ SUMMARY.md         │ File │ 3.7 KB │ 3 days ago\n# =>   2 │ Gemfile            │ File │ 1.1 KB │ 3 days ago\n# =>   3 │ LICENSE            │ File │ 1.1 KB │ 3 days ago\n# =>   4 │ CONTRIBUTING.md    │ File │  955 B │ 9 mins ago\n# =>   5 │ books.md           │ File │  687 B │ 3 days ago\n# => ...\n```\n\n----------------------------------------\n\nTITLE: List Binary Bitwise AND Operation\nDESCRIPTION: Shows bitwise AND operation on a list of binary values with a single binary value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_and.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [0x[7f ff] 0x[ff f0]] | bits and 0x[99 99]\n```\n\n----------------------------------------\n\nTITLE: Enabling Backtraces for Errors\nDESCRIPTION: Setting the environment variable `$env.NU_BACKTRACE = 1` allows users to enable backtraces for error diagnostics in Nushell, aiding in debugging.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n$env.NU_BACKTRACE = 1\n```\n\n----------------------------------------\n\nTITLE: Conditional Source and Use in Nushell Configuration\nDESCRIPTION: This snippet allows the user to conditionally source different configuration files based on the operating system at parse time, utilizing the new features available in Nushell 0.85.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nif $nu.os-info.name == \"windows\" {\n    source \"my_windows_config.nu\"\n} else {\n    source \"my_unix_config.nu\"\n}\n```\n\n----------------------------------------\n\nTITLE: Table Creation in Nushell\nDESCRIPTION: Creating tables with multiple columns and rows\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/types_of_data.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\necho [[column1, column2]; [Value1, Value2]]\n```\n\nLANGUAGE: nu\nCODE:\n```\necho [{name: sam, rank: 10}, {name: bob, rank: 7}]\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Hooks for a Single Trigger in Nushell\nDESCRIPTION: This code snippet provides an example of defining a list of hooks for a single trigger, such as pre-prompt, pre-execution, and PWD change. It showcases how to sequence hooks within the configuration to run multiple actions consecutively.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    ...other config...\n\n    hooks: {\n        pre_prompt: [\n            { print \"pre prompt hook\" }\n            { print \"pre prompt hook2\" }\n        ]\n        pre_execution: [\n            { print \"pre exec hook\" }\n            { print \"pre exec hook2\" }\n        ]\n        env_change: {\n            PWD: [\n                {|before, after| print $\"changing directory from ($before) to ($after)\" }\n                {|before, after| print $\"changing directory from ($before) to ($after) 2\" }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Recent Git Commits in Nushell\nDESCRIPTION: This snippet retrieves the last 25 Git commits and displays them in a formatted table. It uses Git's log command with custom formatting, then processes the output using Nushell commands to split, transform, and filter the data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 25 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 7day))\n```\n\n----------------------------------------\n\nTITLE: Using merge deep Command in Nushell\nDESCRIPTION: The merge deep command is used to merge nested record structures by either adding fields or replacing leaf nodes that share a common cellpath. It offers different strategies for merging inner lists and tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n{a: {foo: 123 bar: \"overwrite me\"}, b: [1, 2, 3]} | merge deep {a: {bar: 456, baz: 789}, b: [4, 5, 6]}\n# => ╭───┬───────────────╮\n# => │   │ ╭─────┬─────╮ │\n# => │ a │ │ foo │ 123 │ │\n# => │   │ │ bar │ 456 │ │\n# => │   │ │ baz │ 789 │ │\n# => │   │ ╰─────┴─────╯ │\n# => │   │ ╭───┬───╮     │\n# => │ b │ │ 0 │ 4 │     │\n# => │   │ │ 1 │ 5 │     │\n# => │   │ │ 2 │ 6 │     │\n# => │   │ ╰───┴───╯     │\n# => ╰───┴───────────────╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n{a: {foo: 123 bar: \"overwrite me\"}, b: [1, 2, 3]} | merge deep --strategy=append {a: {bar: 456, baz: 789}, b: [4, 5, 6]}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Values in Rust for Nushell Plugins\nDESCRIPTION: Demonstrates how to create a custom value type 'Animal' with Dog and Cat variants, implementing the CustomValue trait for use in Nushell plugins. Includes serialization, deserialization, and conversion to base Nushell values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nuse nu_protocol::{CustomValue, ShellError, Span, Value, record};\nuse serde::{Deserialize, Serialize};\nuse std::any::Any;\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub enum Animal {\n    Dog {\n        name: String,\n        woof: bool,\n    },\n    Cat {\n        name: String,\n        meow: bool,\n    },\n}\n\n#[typetag::serde]\nimpl CustomValue for Animal {\n    fn clone_value(&self, span: Span) -> Value {\n        Value::custom_value(Box::new(self.clone()), span)\n    }\n\n    fn type_name(&self) -> String {\n        \"Animal\".into()\n    }\n\n    fn to_base_value(&self, span: Span) -> Result<Value, ShellError> {\n        // Construct a simple Nushell value that makes sense here.\n        // It must not be a custom value.\n        Ok(match self {\n            Animal::Dog { name, woof } => Value::record(record! {\n                \"type\" => Value::string(\"dog\", span),\n                \"name\" => Value::string(name, span),\n                \"woof\" => Value::bool(*woof, span),\n            }, span),\n            Animal::Cat { name, meow } => Value::record(record! {\n                \"type\" => Value::string(\"cat\", span),\n                \"name\" => Value::string(name, span),\n                \"meow\" => Value::bool(*meow, span),\n            }, span),\n        })\n    }\n\n    fn as_any(&self) -> &dyn Any {\n        self\n    }\n\n    fn as_mut_any(&mut self) -> &mut dyn Any {\n        self\n    }\n}\n\n// Use the custom value\nValue::custom(Box::new(Animal::Dog {\n    name: \"Rex\".into(),\n    woof: true,\n}), call.head)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'all' Command in Nushell\nDESCRIPTION: Specifies the syntax for using the 'all' command in Nushell, which takes a predicate as an argument.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/all.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> all {flags} (predicate)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Config Flatten Command in Nushell\nDESCRIPTION: Demonstrates basic usage of the config flatten command to display the current configuration in a flattened format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_flatten.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> config flatten\n```\n\n----------------------------------------\n\nTITLE: Query JSON for a nested key\nDESCRIPTION: This example demonstrates how to access a nested key within a JSON object using the `query json` command. The query `name.last` navigates through the `name` object to retrieve the value of the `last` key. The output is the value associated with the `name.last` path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_json.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '{\"name\": {\"first\": \"Tom\", \"last\": \"Anderson\"}}' | query json name.last\nAnderson\n```\n\n----------------------------------------\n\nTITLE: Parsing Strings into Structured Data\nDESCRIPTION: Shows how to parse strings into structured table data using both pattern matching and regex with the parse command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\n'Nushell 0.80' | parse '{shell} {version}'\n# => ╭───┬─────────┬─────────╮\n# => │ # │  shell  │ version │\n# => ├───┼─────────┼─────────┤\n# => │ 0 │ Nushell │ 0.80    │\n# => ╰───┴─────────┴─────────╯\n'where all data is structured!' | parse --regex '(?P<subject>\\w*\\s?\\w+) is (?P<adjective>\\w+)'\n# => ╭───┬──────────┬────────────╮\n# => │ # │ subject  │ adjective  │\n# => ├───┼──────────┼────────────┤\n# => │ 0 │ all data │ structured │\n# => ╰───┴──────────┴────────────╯\n```\n\n----------------------------------------\n\nTITLE: Introducing the `is-not-empty` Command in Nushell\nDESCRIPTION: The `is-not-empty` command serves as a negation of the `is-empty` command, enhancing workflow efficiency by providing a straightforward method to check for non-empty results. This reduces the need for custom solutions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-03-05-nushell_0_91_0.md#2025-04-19_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Setting Table Border Mode in Nushell\nDESCRIPTION: This snippet demonstrates how to configure the table border style in Nushell by setting the $env.config.table.mode environment variable. The 'rounded' style is one of many available options listed by 'table --list'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.table.mode = 'rounded'\n```\n\n----------------------------------------\n\nTITLE: Stopping a Plugin\nDESCRIPTION: Example of stopping a running plugin named inc.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> plugin stop inc\n```\n\n----------------------------------------\n\nTITLE: Converting Mixed Data to Markdown Elements in Nushell\nDESCRIPTION: Example of treating each row as a separate Markdown element using the --per-element flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_md.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [{\"H1\": \"Welcome to Nushell\" } [[foo bar]; [1 2]]] | to md --per-element --pretty\n# Welcome to Nushell\n| foo | bar |\n| --- | --- |\n| 1   | 2   |\n```\n\n----------------------------------------\n\nTITLE: HTTP Command Subcommands Overview\nDESCRIPTION: Listing of available HTTP subcommands with their purposes, demonstrating the expanded network request capabilities in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-03-14-nushell_0_77.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> help http\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Structure in Nushell\nDESCRIPTION: Demonstrates the basic syntax of a block in Nushell using an if statement. A block is a syntactic form enclosed in curly braces that contains executable code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\nif true { print \"It's true\" }\n```\n\n----------------------------------------\n\nTITLE: Improving External Command Output Performance in Nushell\nDESCRIPTION: This Nushell snippet demonstrates how external command outputs are now streamed rather than collected, improving performance. It shows practical examples of streaming command outputs in pipelines and handling closure outputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n(nu -c \"for x in 1.. { try { print $x } catch { break } }\")\n| lines\n| first\n```\n\nLANGUAGE: nushell\nCODE:\n```\nprint (^external)\n```\n\nLANGUAGE: nushell\nCODE:\n```\n{\n    result: (^external)\n}\n\n[(^external)]\n\nlet result = ^external\n```\n\nLANGUAGE: nushell\nCODE:\n```\n1..2 | each { nu -c 'print text' }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n1..2 | each { nu -c \"print text\"; null }\n```\n\n----------------------------------------\n\nTITLE: Sorting with Closures in Nushell\nDESCRIPTION: Shows how to use closures with `sort-by` to compute a sorting key.  In this example, file extensions are extracted using `path parse` and used to sort files by their extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\n# Sorting by file extension\n> ls | where type == file | sort-by { get name | path parse | get extension }\n╭────┬─────────────────────┬──────┬───────────┬───────────────╮\n│  # │        name         │ type │   size    │   modified    │\n├────┼─────────────────────┼──────┼───────────┼───────────────┤\n│  0 │ LICENSE             │ file │   1.1 KiB │ 11 months ago │\n│  1 │ CITATION.cff        │ file │     812 B │ a month ago   │\n│  2 │ Cargo.lock          │ file │ 175.6 KiB │ 2 days ago    │\n│  3 │ CODE_OF_CONDUCT.md  │ file │   3.4 KiB │ a year ago    │\n│  4 │ CONTRIBUTING.md     │ file │  11.0 KiB │ a month ago   │\n│  5 │ README.md           │ file │  12.0 KiB │ a month ago   │\n│  6 │ SECURITY.md         │ file │   2.6 KiB │ a month ago   │\n│  7 │ toolkit.nu          │ file │  19.2 KiB │ 3 days ago    │\n│  8 │ Cargo.toml          │ file │   9.0 KiB │ 2 days ago    │\n│  9 │ Cross.toml          │ file │     666 B │ 5 months ago  │\n│ 10 │ rust-toolchain.toml │ file │   1.1 KiB │ 2 weeks ago   │\n│ 11 │ typos.toml          │ file │     513 B │ 2 weeks ago   │\n╰────┴─────────────────────┴──────┴───────────┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Parsing a date in Nu\nDESCRIPTION: Parses a date string into a datetime object using 'str to-datetime' command. The '-f' flag specifies the format of the input date string. The documentation for date formatting can be found at https://docs.rs/chrono/0.4.15/chrono/format/strftime/index.html.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n\"echo <date> | str to-datetime -f <format>\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Nushell Configuration\nDESCRIPTION: Command to display the default Nushell configuration file content with syntax highlighting\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\nnu config nu --default | nu-highlight | less -R\n```\n\n----------------------------------------\n\nTITLE: Try-Catch with Return Value in Nu Shell\nDESCRIPTION: Shows try-catch usage with a custom return string when division by zero occurs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/try.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ntry { 1 / 0 } catch { 'divided by zero' }\n```\n\n----------------------------------------\n\nTITLE: Using the $it Variable for Current Row in Nushell\nDESCRIPTION: This snippet demonstrates how to use the $it variable to reference the current row in a pipeline, showcasing simple echo operations and accessing nested properties in structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nls | echo $it\n```\n\n----------------------------------------\n\nTITLE: Basic False Condition Example in Nushell\nDESCRIPTION: A simple if/else example that evaluates a false condition, printing 'yes' when the condition is true and 'no' when false. This shows the alternate execution path in the if/else construct.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/flow_control/if-else.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nif false {\n  print yes\n} else {\n  print no\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Column to a Table in Nushell\nDESCRIPTION: This snippet shows how to add a new column to an existing table using the insert command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | insert next_edition 2021\n```\n\n----------------------------------------\n\nTITLE: Filtering Table Rows by Column Uniqueness in Nushell\nDESCRIPTION: Example showing how to use uniq-by to filter rows from a table based on unique values in the 'fruit' column. The command removes duplicate entries of 'apple' while preserving other unique fruit entries.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq-by.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[fruit count]; [apple 9] [apple 2] [pear 3] [orange 7]] | uniq-by fruit\n╭───┬────────┬───────╮\n│ # │ fruit  │ count │\n├───┼────────┼───────┤\n│ 0 │ apple  │     9 │\n│ 1 │ pear   │     3 │\n│ 2 │ orange │     7 │\n╰───┴────────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Generate Running Sum of Input Stream in Nushell\nDESCRIPTION: Processes a range of numbers (1 to 5) and generates a running sum by using both the input value and accumulated state.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/generate.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n1..5 | generate {|e, sum=0| let sum = $e + $sum; {out: $sum, next: $sum} }\n```\n\n----------------------------------------\n\nTITLE: Adding a Column in Nushell\nDESCRIPTION: This snippet shows how to add a new column 'next_edition' to a TOML file using the 'add' command in Nushell. It then saves the result to a new file and displays the contents.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/trabajando_con_tablas.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | add next_edition 2021 | save rustfmt2.toml\nopen rustfmt2.toml\n```\n\n----------------------------------------\n\nTITLE: Taking First List Element\nDESCRIPTION: Example of taking the first element from a list in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | take 1\n```\n\n----------------------------------------\n\nTITLE: Glob Expansion with External Commands in Nushell\nDESCRIPTION: Demonstrates using glob patterns with external commands to process multiple files at once.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n# Concatenate files using cat and then split to a list of lines\n^cat *.txt | lines\n```\n\n----------------------------------------\n\nTITLE: Nushell Plugin Garbage Collector Configuration\nDESCRIPTION: This snippet shows how to configure the plugin garbage collector in Nushell's configuration file.  It demonstrates setting default settings and overriding settings for specific plugins by name to control when plugins are automatically stopped.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n$env.config.plugin_gc = {\n    # Settings for plugins not otherwise specified:\n    default: {\n        enabled: true # set to false to never automatically stop plugins\n        stop_after: 10sec # how long to wait after the plugin is inactive before stopping it\n    }\n    # Settings for specific plugins, by plugin name\n    # (i.e. what you see in `plugin list`):\n    plugins: {\n        gstat: {\n            stop_after: 1min\n        }\n        inc: {\n            stop_after: 0sec # stop as soon as possible\n        }\n        stream_example: {\n            enabled: false # never stop automatically\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Nushell\nDESCRIPTION: Shows how to use string interpolation to build a string from text and running commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-09-nushell_0_15_0.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> echo `My current history path is {{$nu.history-path}}`\nMy current history path is /home/jonathant/.local/share/nu/history.txt\n```\n\n----------------------------------------\n\nTITLE: Redirecting stderr from External Command to Pipeline in Nushell\nDESCRIPTION: Illustrates redirecting the standard error output of an external command into the Nushell pipeline using the 'e>' operator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/run-external.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> run-external \"nu\" \"-c\" \"print -e hello\" e>| split chars\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Environment Variable - Nushell\nDESCRIPTION: Example demonstrating how to set an environment variable and then access its value in the same scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export-env.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> export-env { $env.SPAM = 'eggs' }; $env.SPAM\neggs\n```\n\n----------------------------------------\n\nTITLE: Example of Using polars open in Nushell\nDESCRIPTION: A simple example showing how to use the polars open command to create a dataframe from a CSV file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_open.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> polars open test.csv\n\n```\n\n----------------------------------------\n\nTITLE: Running Nushell Scripts\nDESCRIPTION: Basic example of running a Nushell script using the nu command or source command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nnu myscript.nu\n```\n\nLANGUAGE: nu\nCODE:\n```\nsource myscript.nu\n```\n\n----------------------------------------\n\nTITLE: Viewing Directory Listing with Explore in Nushell\nDESCRIPTION: This snippet demonstrates the use of `explore` in Nushell to pipe a directory listing (`ls`) into the table pager, showing how to list and view data interactively. The snippet relies on Nushell being installed and the basic command `ls` for listing directory contents. The command displays directory contents in a tabular format with indexes for each row.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/explore.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls | explore -i\n```\n\n----------------------------------------\n\nTITLE: Command Signature for Polars into-df in Nushell\nDESCRIPTION: The signature showing how to invoke the polars into-df command with optional flags for schema specification and column handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars into-df {flags} \n```\n\n----------------------------------------\n\nTITLE: Setting Nushell's Buffer Editor\nDESCRIPTION: Configures the editor that Nushell uses when opening files with commands like 'config nu'. The buffer_editor can be set to a string with the editor name or an array including the editor command and its arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.buffer_editor = <path_to_your_preferred_editor>\n```\n\n----------------------------------------\n\nTITLE: Nushell module with subcommand example\nDESCRIPTION: This code snippet demonstrates an alternative way to define a subcommand. In this example the name of the subcomand is \"by\" and when the `increment` module is imported it results in the same command and subcommand (`increment` command and `increment by` subcommand).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nexport def main []: int -> int {\n    $in + 1\n}\n\nexport def by [amount: int]: int -> int {\n    $in + $amount\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Null Values in Column with Default in Nushell\nDESCRIPTION: This example shows how to update null values in a column to a default value using the 'upsert' command with a closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n[[foo]; [2] [null] [4]] | upsert foo { default 0 }\n```\n\n----------------------------------------\n\nTITLE: Importing a Plugin using `plugin use` in Nushell\nDESCRIPTION: This code snippet demonstrates how to import a plugin into the current Nushell session using the `plugin use` command. This allows the plugin's commands to be used immediately. The name used with `plugin use` is the plugin's name without the `nu_plugin_` prefix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\nplugin use cool\n```\n\n----------------------------------------\n\nTITLE: List Manipulation with Append and Prepend in Nushell\nDESCRIPTION: Shows various methods to add elements to the beginning and end of lists using prepend, append, and concatenation operators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nlet colors = [yellow green]\nlet colors = ($colors | prepend red)\nlet colors = ($colors | append purple)\nlet colors = ($colors ++ [\"blue\"])\nlet colors = ([\"black\"] ++ $colors)\n$colors\n```\n\n----------------------------------------\n\nTITLE: Sort Files by Modified Date\nDESCRIPTION: Example showing how to sort files by their modification date.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort-by.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | sort-by modified\n```\n\n----------------------------------------\n\nTITLE: Using --empty Flag with Default Command\nDESCRIPTION: The new `--empty` flag for the `default` command returns the provided default value if the input is considered 'empty'. The concept of 'empty' includes empty strings, lists, records, binary values, and null.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Parsing Comma-Separated Data to Table - Nushell\nDESCRIPTION: This snippet demonstrates using the 'from csv' command to convert a simple comma-separated string into a table format. It showcases the default behavior of the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> \"ColA,ColB\n1,2\" | from csv\n╭───┬──────┬──────╮\n│ # │ ColA │ ColB │\n├───┼──────┼──────┤\n│ 0 │    1 │    2 │\n╰───┴──────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Taking Rows from Dataframe Example\nDESCRIPTION: Example demonstrating how to select specific rows from a dataframe using indices. Creates a dataframe with two columns and three rows, then selects rows at indices 0 and 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_take.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet df = ([[a b]; [4 1] [5 2] [4 3]] | polars into-df);\n    let indices = ([0 2] | polars into-df);\n    $df | polars take $indices\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Nushell Theme Configuration\nDESCRIPTION: A complete theme configuration example demonstrating color definitions and theme setup using base16-style colors\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n# let's define some colors\n\nlet base00 = \"#181818\" # Default Background\nlet base01 = \"#282828\" # Lighter Background (Used for status bars, line number and folding marks)\nlet base02 = \"#383838\" # Selection Background\nlet base03 = \"#585858\" # Comments, Invisibles, Line Highlighting\nlet base04 = \"#b8b8b8\" # Dark Foreground (Used for status bars)\nlet base05 = \"#d8d8d8\" # Default Foreground, Caret, Delimiters, Operators\nlet base06 = \"#e8e8e8\" # Light Foreground (Not often used)\nlet base07 = \"#f8f8f8\" # Light Background (Not often used)\nlet base08 = \"#ab4642\" # Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted\nlet base09 = \"#dc9656\" # Integers, Boolean, Constants, XML Attributes, Markup Link Url\nlet base0a = \"#f7ca88\" # Classes, Markup Bold, Search Text Background\nlet base0b = \"#a1b56c\" # Strings, Inherited Class, Markup Code, Diff Inserted\nlet base0c = \"#86c1b9\" # Support, Regular Expressions, Escape Characters, Markup Quotes\nlet base0d = \"#7cafc2\" # Functions, Methods, Attribute IDs, Headings\nlet base0e = \"#ba8baf\" # Keywords, Storage, Selector, Markup Italic, Diff Changed\nlet base0f = \"#a16946\" # Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>\n\nlet base16_theme = {\n    separator: $base03\n    leading_trailing_space_bg: $base04\n    header: $base0b\n    date: $base0e\n    filesize: $base0d\n    row_index: $base0c\n    bool: $base08\n    int: $base0b\n    duration: $base08\n    range: $base08\n    float: $base08\n    string: $base04\n    nothing: $base08\n    binary: $base08\n    cellpath: $base08\n    hints: dark_gray\n    shape_garbage: { fg: \"#FFFFFF\" bg: \"#FF0000\" attr: b}\n    shape_bool: $base0d\n    shape_int: { fg: $base0e attr: b}\n    shape_float: { fg: $base0e attr: b}\n    shape_range: { fg: $base0a attr: b}\n    shape_internalcall: { fg: $base0c attr: b}\n    shape_external: $base0c\n    shape_externalarg: { fg: $base0b attr: b}\n    shape_literal: $base0d\n    shape_operator: $base0a\n    shape_signature: { fg: $base0b attr: b}\n    shape_string: $base0b\n    shape_filepath: $base0d\n    shape_globpattern: { fg: $base0d attr: b}\n    shape_variable: $base0e\n    shape_flag: { fg: $base0d attr: b}\n    shape_custom: {attr: b}\n}\n\nlet config = {\n  filesize_metric: true\n  table_mode: rounded\n  use_ls_colors: true\n  color_config: $base16_theme\n  use_grid_icons: true\n  footer_mode: always\n  animate_prompt: false\n  float_precision: 2\n  use_ansi_coloring: true\n  filesize_format: \"b\"\n  edit_mode: emacs\n  max_history_size: 10000\n  log_level: error\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Nushell Plugin Examples in Rust\nDESCRIPTION: Shows how to write automated tests for Nushell plugin examples using the nu-plugin-test-support crate. It includes setting up example commands and running tests on them.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nuse nu_protocol::{Example, ShellError, Value};\nuse nu_plugin::PluginCommand;\n\nstruct FibPlugin;\nstruct Fib;\n\n// ...\n\nimpl PluginCommand for Fib {\n    type Plugin = FibPlugin;\n\n    fn name(&self) -> &str {\n        \"fib\"\n    }\n\n    // ...\n\n    fn examples(&self) -> Vec<Example> {\n        vec![\n            Example {\n                example: \"fib 20\",\n                description: \"Compute the 20th Fibonacci number\",\n                result: Some(Value::test_int(6765))\n            },\n        ]\n    }\n\n    // ...\n}\n\n#[test]\nfn test_examples() -> Result<(), ShellError> {\n    use nu_plugin_test_support::PluginTest;\n\n    PluginTest::new(\"fib\", FibPlugin.into())?.test_examples(&Fib)\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Numeric List\nDESCRIPTION: Example of sorting a numeric list in ascending order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [2 0 1] | sort\n```\n\n----------------------------------------\n\nTITLE: Parsing Semicolon-Separated Data - Nushell\nDESCRIPTION: This example illustrates the use of the 'from csv' command with a custom separator, ';', allowing the parsing of data formatted with semicolons instead of commas.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> open data.txt | from csv --separator ';'\n```\n\n----------------------------------------\n\nTITLE: Parsing Flexible CSV Data to Table - Nushell\nDESCRIPTION: This snippet demonstrates how to use 'from csv' with the --flexible flag, allowing for variable numbers of columns in a CSV input, resulting in a dynamic table output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> \"ColA,ColB\n1,2\n3,4,5\n6\" | from csv --flexible\n╭───┬──────┬──────┬─────────╮\n│ # │ ColA │ ColB │ column2 │\n├───┼──────┼──────┼─────────┤\n│ 0 │    1 │    2 │   ❎    │\n│ 1 │    3 │    4 │       5 │\n│ 2 │    6 │  ❎  │   ❎    │\n╰───┴──────┴──────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data with Group-by in Lazy Polars with Nushell\nDESCRIPTION: Demonstrates grouping data by a column and applying multiple aggregation functions using polars group-by and polars agg. The example calculates the sum and mean of the 'value' column for each unique 'name'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_43\n\nLANGUAGE: nushell\nCODE:\n```\nlet lf_1 =  [[name value]; [one 1] [two 2] [one 1] [two 3]] | polars into-lazy\n\n$lf_1\n| polars group-by name\n| polars agg [\n     (polars col value | polars sum | polars as sum)\n     (polars col value | polars mean | polars as mean)\n]\n| polars collect\n```\n\n----------------------------------------\n\nTITLE: Nushell Multi-line Pipeline\nDESCRIPTION: This snippet demonstrates a multi-line pipeline enclosed in parentheses. It parses a date string, extracts the year, and assigns it to a variable.  Parentheses allow for better readability of long pipelines.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet year = (\n    \"01/22/2021\" |\n    parse \"{month}/{day}/{year}\" |\n    get year\n)\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Export in Nushell\nDESCRIPTION: Command to examine and export inherited environment variables from the previous login shell. Lists environment variables in a formatted string output, excluding config entries.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_15\n\nLANGUAGE: nu\nCODE:\n```\n$env | reject config | transpose key val | each {|r| echo $\"$env.($r.key) = '($r.val)'\"} | str join (char nl)\n```\n\n----------------------------------------\n\nTITLE: Using Polars to inspect dataframe properties in Nushell\nDESCRIPTION: Example of opening a CSV file as a dataframe and checking its properties (rows, columns, size). The command loads a CSV file and uses 'polars store-ls' to display metadata about the loaded dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet df_0 = polars open --eager Data7602DescendingYearOrder.csv\npolars store-ls | select key type columns rows estimated_size\n```\n\n----------------------------------------\n\nTITLE: Custom Commands in Nushell\nDESCRIPTION: Shows how to use and list custom commands defined in the Nushell environment, including cherry-pick, filter-map, and flatten record-paths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_23\n\nLANGUAGE: nu\nCODE:\n```\nuse toolbox.nu *\nhelp commands | where command_type == \"custom\"\n# => ╭──────┬─────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────╮\n# => │    # │          name           │                                              usage                                              │\n# => ├──────┼─────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────┤\n# => │    0 │ cherry-pick             │ A command for cherry-picking values from a record key recursively                               │\n# => │    1 │ filter-map              │ A command for walking through a complex data structure and transforming its values recursively  │\n# => │    2 │ flatten record-paths    │ A command for flattening trees whilst keeping paths as keys                                     │\n# => ╰──────┴─────────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Using `get` vs. `select` in Nushell\nDESCRIPTION: This code snippet compares using the 'get' command versus the 'select' command to retrieve data from a table. 'get' retrieves the value directly while 'select' returns the data structure itself.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n$data | get 1\n# => ╭───────────┬───────────────╮\n# => │ date      │ 2 years ago   │\n# => │           │ ╭───┬───────╮ │\n# => │ temps     │ │ 0 │ 35.24 │ │\n# => │           │ │ 1 │ 35.94 │ │\n# => │           │ │ 2 │ 34.91 │ │\n# => │           │ │ 3 │ 35.24 │ │\n# => │           │ │ 4 │ 36.65 │ │\n# => │           │ ╰───┴───────╯ │\n# => │ condition │ sunny         │\n# => ╰───────────┴───────────────╯\n\n$data | select 1\n# => ╭───┬─────────────┬───────────────┬───────────╮\n# => │ # │    date     │     temps     │ condition │\n# => ├───┼─────────────┼───────────────┼───────────┤\n# => │ 0 │ 2 years ago │ ╭───┬───────╮ │ sunny     │\n# => │   │             │ │ 0 │ 35.24 │ │           │\n# => │   │             │ │ 1 │ 35.94 │ │           │\n# => │   │             │ │ 2 │ 34.91 │ │           │\n# => │   │             │ │ 3 │ 35.24 │ │           │\n# => │   │             │ │ 4 │ 36.65 │ │           │\n# => │   │             │ ╰───┴───────╯ │           │\n# => ╰───┴─────────────┴───────────────┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Applying Bits Not to Binary Data in Nushell\nDESCRIPTION: Example of using 'bits not' command on binary data, demonstrating its effect on hexadecimal input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_not.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[ff 00 7f] | bits not\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   00 ff 80                                             0××\n```\n\n----------------------------------------\n\nTITLE: URL-safe Base64 Encoding in Nushell\nDESCRIPTION: Demonstrates using the URL-safe alphabet option for Base64 encoding binary data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base64.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[BE EE FF] | encode base64 --url\nvu7_\n```\n\n----------------------------------------\n\nTITLE: Parsing INI formatted string using Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'from ini' command in Nushell to convert a string formatted as INI into a structured record. It takes an INI formatted string as input and outputs a record representation. To use this command, ensure that the 'nu_plugin_formats' plugin is installed and registered.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_ini.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '[foo]\na=1\nb=2' | from ini\n╭─────┬───────────╮\n│     │ ╭───┬───╮ │\n│ foo │ │ a │ 1 │ │\n│     │ │ b │ 2 │ │\n│     │ ╰───┴───╯ │\n╰─────┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Numeric Column Transformation in Nushell\nDESCRIPTION: Converts trip duration from seconds to minutes by dividing values by 60 using Polars arithmetic operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/polars_v_pandas_v_nushell.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n$df | polars first 5 | polars with-column ((polars col trip_duration) / 60.0) | polars collect\n```\n\n----------------------------------------\n\nTITLE: List Top CPU-Consuming Processes in Nushell\nDESCRIPTION: Sorts processes by CPU usage and displays the top 3 CPU-intensive processes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ps.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> ps | sort-by cpu | last 3\n```\n\n----------------------------------------\n\nTITLE: Compact World Column Example\nDESCRIPTION: Example showing how to filter out records where the 'World' column contains null values\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/compact.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[\"Hello\" \"World\"]; [null 3]] | compact World\n```\n\n----------------------------------------\n\nTITLE: Parallel directory processing with environment scoping in Nushell\nDESCRIPTION: This snippet demonstrates how `par-each` can be used to work within multiple directories in parallel in Nushell, leveraging environment variable scoping. The `cd` command is used within the block to change the current directory for each iteration, allowing parallel processing of files in different directories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/parallelism.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nls | where type == dir | par-each { |row|\n    { name: $row.name, len: (cd $row.name; ls | length) }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of uniq Command in Nushell\nDESCRIPTION: Demonstrates using the 'uniq' command to return distinct values from a list by removing duplicates.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [2 3 3 4] | uniq\n╭───┬───╮\n│ 0 │ 2 │\n│ 1 │ 3 │\n│ 2 │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Lists in Nushell\nDESCRIPTION: Example of creating a list in Nushell using line breaks to separate values. This improves readability for longer lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/list.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [\n    foo\n    bar\n    baz\n  ]\n╭───┬─────╮\n│ 0 │ foo │\n│ 1 │ bar │\n│ 2 │ baz │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Rounding with Negative Precision\nDESCRIPTION: Example showing how to round numbers using negative precision to round to larger place values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_round.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [123, 123.3, -123.4] | math round --precision -1\n╭───┬──────╮\n│ 0 │  120 │\n│ 1 │  120 │\n│ 2 │ -120 │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Getting help for a specific command in Nushell\nDESCRIPTION: Example showing how to get help information for a single command, alias, or module in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> help match\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `http post` to Python's `urllib.request.urlopen`\nDESCRIPTION: Demonstrates how to perform an HTTP POST request in Python using `urllib.request.urlopen`. This corresponds to the `http post` command in Nushell, allowing for sending data to a server.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"urllib.request.urlopen\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Column Maxima in Nushell Table\nDESCRIPTION: Shows how to use 'math max' to find the maximum values for each column in a Nushell table containing multiple records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_max.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a: 1 b: 3} {a: 2 b: -1}] | math max\n╭───┬───╮\n│ a │ 2 │\n│ b │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Rendering List as Table in Nushell\nDESCRIPTION: This snippet shows how to use the 'table' command to render a list as a table in Nushell. It demonstrates that the output of the 'table' command is a string stream.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_22\n\nLANGUAGE: nu\nCODE:\n```\n[ Nagasaki Ghent Cambridge Izmir Graz Lubango ] | table | describe\n# => string (stream)\n```\n\n----------------------------------------\n\nTITLE: Saving Record to JSON File in Nushell\nDESCRIPTION: Illustrates saving a record (dictionary-like structure) to a JSON file named 'foo.json' in the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/save.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n{ a: 1, b: 2 } | save foo.json\n```\n\n----------------------------------------\n\nTITLE: Reverse Sorting String List\nDESCRIPTION: Example of sorting a list of strings in reverse alphabetical order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [betty amy sarah] | sort --reverse\n```\n\n----------------------------------------\n\nTITLE: Filtering and Diverting Command Output Using Hooks\nDESCRIPTION: Defines a `display_output` hook to redirect command outputs, potentially to a separate window as HTML. The snippet demonstrates saving outputs in `/tmp/nu-output.html` for easier access and display outside of the Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks {\n    display_output: { to html --partial --no-color | save --raw /tmp/nu-output.html }\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Computed Column in Table using Nushell\nDESCRIPTION: This snippet demonstrates how to insert a new column with values computed based on other columns using a closure with the 'upsert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[[foo]; [7] [8] [9]] | upsert bar {|row| $row.foo * 2 }\n```\n\n----------------------------------------\n\nTITLE: Parsing Color Data from RGB File in Nushell\nDESCRIPTION: This snippet demonstrates how to read an RGB color text file and process its contents to display color information in Nushell. The sample output includes derived color representations from the input file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-15-top-nushell-hacks.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n❯ open ~/Downloads/rgb.txt | lines | last 10\n```\n\n----------------------------------------\n\nTITLE: Defining Datatype Closures in Nushell\nDESCRIPTION: This snippet highlights the capability of Nushell to define colors for datatypes using closures. The closure for 'string' determines if input matches a hex color format and applies the corresponding color.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-15-top-nushell-hacks.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nstring: {|| if $in =~ '^#[a-fA-F\\d]+' { $in } else { 'default' } }\n```\n\n----------------------------------------\n\nTITLE: List Membership Testing in Nushell\nDESCRIPTION: Shows how to test for list membership using in and not-in operators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\nlet colors = [red green blue]\n'blue' in $colors\n'yellow' in $colors\n'gold' not-in $colors\n```\n\n----------------------------------------\n\nTITLE: Filtering with `has` Operator in Nushell\nDESCRIPTION: This code snippet demonstrates the usage of the `has` operator in Nushell for filtering data. It showcases how `has` can be used to check if a value exists within a list, providing a more readable alternative to the `in` operator when the list is a property of the record being filtered. The `where` command is used to filter a table based on whether the `children` column contains the value \"e\".\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[name, children]; [foo, [a, b, c]], [bar [d, e, f]]] | where (\"e\" in $it.children)\n# vs\n[[name, children]; [foo, [a, b, c]], [bar [d, e, f]]] | where children has \"e\"\n```\n\n----------------------------------------\n\nTITLE: Group-By Mean Aggregation in Nushell with Polars\nDESCRIPTION: Demonstrates how to use polars mean as part of a group-by aggregation operation. This example groups data by column 'a', calculates the mean of column 'b' for each group, then sorts the results by column 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_mean.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [one 2] [one 4] [two 1]]\n                | polars into-df\n                | polars group-by a\n                | polars agg (polars col b | polars mean)\n                | polars collect\n                | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Extracting Rows with Polars Take in Nushell\nDESCRIPTION: Demonstrates using polars take command to extract specific rows from a dataframe based on indices returned by polars arg-unique. This example shows how to get the first occurrence of each unique value in the 'first' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_33\n\nLANGUAGE: nushell\nCODE:\n```\nlet indices_1 = $df_1 | polars get first | polars arg-unique\n$df_1 | polars take $indices_1\n```\n\n----------------------------------------\n\nTITLE: Capitalizing Table Column Contents in Nushell\nDESCRIPTION: Example showing how to capitalize a specific column in a table. The command targets the 'lang' column, transforming 'nu_test' to 'Nu_test' while preserving the table structure and other columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_capitalize.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[lang, gems]; [nu_test, 100]] | str capitalize lang\n╭───┬─────────┬──────╮\n│ # │  lang   │ gems │\n├───┼─────────┼──────┤\n│ 0 │ Nu_test │  100 │\n╰───┴─────────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Parsing with Named Capture Groups\nDESCRIPTION: Example of using fancy-regex named capture group pattern for parsing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/parse.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> \"foo bar.\" | parse --regex '\\s*(?<name>\\w+)(?=\\.)'\n```\n\n----------------------------------------\n\nTITLE: Inserting a Column into a Table in Nushell\nDESCRIPTION: Illustrates the use of 'insert' to add a new column to a table, where all rows are populated with the specified value 'shell'. It requires a table input and outputs a table with the new column 'type'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/insert.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[project, lang]; ['Nushell', 'Rust']] | insert type 'shell'\n╭───┬─────────┬──────┬───────╮\n│ # │ project │ lang │ type  │\n├───┼─────────┼──────┼───────┤\n│ 0 │ Nushell │ Rust │ shell │\n╰───┴─────────┴──────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Using Bare Word Strings in Nushell\nDESCRIPTION: Shows how to use bare word strings in Nushell, which are unquoted single-word strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nprint hello\n# => hello\n[hello] | describe\n# => list<string>\n```\n\n----------------------------------------\n\nTITLE: Finding Port in Range - Nushell Example\nDESCRIPTION: Demonstrates how to find a free port within a specified range from 3121 to 4000.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/port.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> port 3121 4000\n3121\n```\n\n----------------------------------------\n\nTITLE: Command Signature for String Capitalization in Nushell\nDESCRIPTION: The signature of the 'str capitalize' command, showing its syntax and parameter structure. The command accepts optional flags and a variadic parameter for specifying cell paths in data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_capitalize.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str capitalize {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Split String Using Regex Pattern in Nu Shell\nDESCRIPTION: Shows how to split a string with variable whitespace using regex pattern '\\s+'. Removes all whitespace and creates separate rows for each non-whitespace segment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_row.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n'a   b       c' | split row -r '\\s+'\n```\n\n----------------------------------------\n\nTITLE: Filename Enumeration and Joining\nDESCRIPTION: Adds ascending numbers to filenames and joins them with semicolons.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n['foo.gz', 'bar.gz', 'baz.gz'] | enumerate | reduce --fold '' {|str all| $\"($all)(if $str.index != 0 {'; '})($str.index + 1)-($str.item)\" }\n```\n\n----------------------------------------\n\nTITLE: Getting help text for a command in Nushell\nDESCRIPTION: This snippet shows how to use the `help` command to retrieve the help text for a given Nushell command. The `help` command provides information about the command's usage, options, and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n\thelp\n\n```\n\n----------------------------------------\n\nTITLE: Filtering List Items in Nushell\nDESCRIPTION: Demonstrates how to filter items of a list according to a condition using the 'filter' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/filter.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2] | filter {|x| $x > 1}\n```\n\n----------------------------------------\n\nTITLE: Processing External Command Output in Nushell\nDESCRIPTION: Demonstrates running an external command and processing its output using Nushell's data manipulation capabilities, converting the output to a structured table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n^ls | split-row \" \" file\n```\n\n----------------------------------------\n\nTITLE: Using Polars arg-unique to Find Indexes of Unique Values in Nushell\nDESCRIPTION: This example demonstrates how to use the 'polars arg-unique' command to identify the indexes of unique values in a list. It first converts a list to a dataframe using 'polars into-df' and then applies 'polars arg-unique' to find the unique value indexes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-unique.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2 2 3 3] | polars into-df | polars arg-unique\n```\n\n----------------------------------------\n\nTITLE: Match Command with Guards in Nushell\nDESCRIPTION: Shows how to use guards (additional conditions) with match patterns to create more specific matching criteria based on values extracted from the pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nlet foo = { name: 'bar', count: 7 }\nmatch $foo {\n    { name: 'bar', count: $it } if $it < 5 => ($it + 3),\n    { name: 'bar', count: $it } if $it >= 5 => ($it + 7),\n    _ => 1\n}\n# => 14\n```\n\n----------------------------------------\n\nTITLE: Creating a Closure with Variable Capture in Nushell\nDESCRIPTION: Example of defining a closure in Nushell that captures a variable from its surrounding scope. Shows the closure with its block ID and captured variable information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_62\n\nLANGUAGE: nu\nCODE:\n```\nlet foo = \"bar\"\n{ || $foo }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Closure\": {\n    \"val\": {\n      \"block_id\": 1965,\n      \"captures\": [\n        [\n          862,\n          {\n            \"String\": {\n              \"val\": \"bar\",\n              \"span\": {\n                \"start\": 660030,\n                \"end\": 660041\n              }\n            }\n          }\n        ]\n      ]\n    },\n    \"span\": {\n      \"start\": 660030,\n      \"end\": 660041\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Replacement Chain\nDESCRIPTION: Performs sequential string replacements using a list of replacement pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n[[foo baz] [baz quux]] | reduce --fold \"foobar\" {|it, acc| $acc | str replace $it.0 $it.1}\n```\n\n----------------------------------------\n\nTITLE: Checking substring presence in a table with case-insensitive matching in Nushell\nDESCRIPTION: This example demonstrates applying case-insensitive substring checking to a specific column in a table. The result shows a boolean for each row indicating if the substring was found.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_contains.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[[ColA ColB]; [test 100]] | str contains --ignore-case 'E' ColA\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with mkdir Command\nDESCRIPTION: Demonstrates creating new directories using Nushell's mkdir command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmkdir new_directory\n```\n\n----------------------------------------\n\nTITLE: Permanent File Deletion in Nushell\nDESCRIPTION: Demonstrates permanent file deletion using the --permanent flag, bypassing the 'always_trash' setting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rm.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> rm --permanent file.txt\n```\n\n----------------------------------------\n\nTITLE: Find Numbers and File Sizes\nDESCRIPTION: Example showing how to search for numbers and file sizes in a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 5 3kb 4 3Mb] | find 5 3kb\n╭───┬────────╮\n│ 0 │      5 │\n│ 1 │ 3.0 kB │\n╰───┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Concatenating Dataframes with Pipeline in Nushell\nDESCRIPTION: This example demonstrates concatenating three dataframes where the first is in the pipeline and the other two are provided as arguments. The result is then collected and sorted by columns 'a' and 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_concat.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2]] | polars into-df\n                    | polars concat ([[a b]; [3 4]] | polars into-df) ([[a b]; [5 6]] | polars into-df)\n                    | polars collect\n                    | polars sort-by [a b]\n```\n\n----------------------------------------\n\nTITLE: Command Signature in Nushell\nDESCRIPTION: The basic syntax for the 'to text' command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_text.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> to text {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating a String Concatenation Expression with Polars in Nushell\nDESCRIPTION: This example demonstrates how to use the polars concat-str command to concatenate multiple column values with a separator. It creates a dataframe, then adds a new column that concatenates the values from columns 'a', 'b', and 'c' (with 'c' being multiplied by 2) using a hyphen as a separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_concat-str.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet df = ([[a b c]; [one two 1] [three four 2]] | polars into-df);\n    $df | polars with-column ((polars concat-str \"-\" [(polars col a) (polars col b) ((polars col c) * 2)]) | polars as concat)\n```\n\n----------------------------------------\n\nTITLE: Extracting Unique Values from a Polars Series in Nushell\nDESCRIPTION: Demonstrates getting only the unique values from a Series using the polars unique command. This example extracts all unique values from the 'first' column without duplicates.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_37\n\nLANGUAGE: nushell\nCODE:\n```\n$df_1 | polars get first | polars unique\n```\n\n----------------------------------------\n\nTITLE: Selective Export from a Nushell Submodule\nDESCRIPTION: Shows how to selectively export definitions from a submodule and create a new exported submodule with specific commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\n# Replace the existing `export use` with ...\nexport module go {\n    export use ./go.nu [home, modules]\n}\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Configuration in Nushell\nDESCRIPTION: Configuration example for using the dark theme from Nushell's standard library\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n# in $nu.config-path\nuse config dark-theme\n\n$env.config = {\n  # ...\n  color_config: (dark_theme)\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing in Table Columns using Regular Expression in Nushell\nDESCRIPTION: Shows how to apply regex replacements to specific columns in a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> [[ColA ColB ColC]; [abc abc ads]] | str replace --all --regex 'b' 'z' ColA ColC\n╭───┬──────┬──────┬──────╮\n│ # │ ColA │ ColB │ ColC │\n├───┼──────┼──────┼──────┤\n│ 0 │ azc  │ abc  │ ads  │\n╰───┴──────┴──────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Appending and Prepending to Strings in Nushell\nDESCRIPTION: Shows various methods to append and prepend strings in Nushell, including using closures and regex.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n['foo', 'bar'] | each {|s| '~/' ++ $s} # ~/foo, ~/bar\n['foo', 'bar'] | each {|s| '~/' + $s} # ~/foo, ~/bar\n\n['foo', 'bar'] | str replace -r '^' '~/'# ~/foo, ~/bar\n['foo', 'bar'] | str replace -r '$' '~/'# foo~/, bar~/\n\n\"hello\" | append \"world!\" | str join \" \" # hello world!\n\n1..10 | reduce -f \"\" {|elt, acc| $acc + ($elt | into string) + \" + \"} # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 +\n```\n\n----------------------------------------\n\nTITLE: Complex File Filtering in Nushell\nDESCRIPTION: Demonstrates a complex example of finding files whose filenames don't begin with the correct sequential number using multiple commands including 'where'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nls | where type == file | sort-by name --natural | enumerate | where {|e| $e.item.name !~ $'^($e.index + 1)' } | each {|| get item }\n```\n\n----------------------------------------\n\nTITLE: Simple Command Definition Example\nDESCRIPTION: Demonstrates defining and executing a basic command without parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/def.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> def say-hi [] { echo 'hi' }; say-hi\nhi\n```\n\n----------------------------------------\n\nTITLE: Printing Internal Default config.nu File in Nushell\nDESCRIPTION: Illustrates how to print the internal default config.nu file using the 'config nu' command with the --default flag and piping to nu-highlight.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_nu.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nconfig nu --default | nu-highlight\n```\n\n----------------------------------------\n\nTITLE: Converting Internal Index to Explicit Index Column in Nushell\nDESCRIPTION: This snippet shows how to convert the internal index (# column) to an explicit 'index' column that can be manipulated independently from the row position.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\nls | enumerate | flatten | sort-by modified | first 5\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching in Nushell\nDESCRIPTION: This snippet demonstrates the use of regular expression operators for matching patterns within strings, showcasing both positive and negative matching scenarios.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nfoobarbaz =~ bar # returns true\nfoobarbaz !~ bar # returns false\nls | where name =~ ^nu # returns all files whose names start with \"nu\"\n```\n\n----------------------------------------\n\nTITLE: Using Stored Condition with 'skip until' in Nushell\nDESCRIPTION: Shows how to use a stored condition with the 'skip until' command to skip elements until a positive number is found.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_until.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet cond = {|x| $x > 0 }; [-2 0 2 -1] | skip until $cond\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from Headers Only in TSV\nDESCRIPTION: Shows how to remove unnecessary whitespaces only from the header names when parsing TSV data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_tsv.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2' | save tsv-data | open tsv-data | from tsv --trim headers\n```\n\n----------------------------------------\n\nTITLE: Defining Command Signature for 'ansi strip' in Nushell\nDESCRIPTION: Specifies the command signature for the 'ansi strip' command, including flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_strip.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> ansi strip {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Cumulative Sum for a Column in Polars Dataframe\nDESCRIPTION: Creates a dataframe with a single column 'a', then computes and adds a cumulative sum as a new column 'cum_a'. This demonstrates the cumulative sum operation on a specific column in a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cumulative.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a]; [1] [2] [3] [4] [5]]\n                    | polars into-df\n                    | polars select (polars col a | polars cumulative sum | polars as cum_a)\n                    | polars collect\n```\n\n----------------------------------------\n\nTITLE: Using a Nushell module\nDESCRIPTION: This snippet demonstrates how to import and use a Nushell module named `inc.nu`. It imports all exported definitions from the module using `use inc.nu *` and then pipes the value `5` to the `increment` command, which returns `6`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nuse inc.nu *\n5 | increment\n# => 6\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Row Numbers in Nushell\nDESCRIPTION: Demonstrates how to customize table numbering to start from 1 instead of 0 using the table command with the -n flag. This final refinement improves readability in the displayed results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_23\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | group-by name | transpose | upsert column1 {|c| $c.column1 | length} | sort-by column1 | rename name commits | reverse | first 10 | table -n 1\n```\n\n----------------------------------------\n\nTITLE: Command Signature for Bits ROL Operation\nDESCRIPTION: Shows the basic command signature for the bits rol operation in Nushell\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_rol.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bits rol {flags} (bits)\n```\n\n----------------------------------------\n\nTITLE: Executing 'ps aux' External Tool with exec in Nushell\nDESCRIPTION: This example demonstrates how to use the 'exec' command to execute the external 'ps aux' tool in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/exec.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> exec ps aux\n```\n\n----------------------------------------\n\nTITLE: Creating and Converting Literal Expression in Nushell with Polars\nDESCRIPTION: This example demonstrates how to create a literal expression using 'polars lit' and convert it to a Nushell object using 'polars into-nu'. It creates a literal expression with the value 2 and displays the result as a structured table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_lit.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars lit 2 | polars into-nu\n╭───────┬────────────╮\n│ expr  │ literal    │\n│ value │ dyn int: 2 │\n╰───────┴────────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Evaluation with Infinite Ranges in Nushell\nDESCRIPTION: Shows how ranges are lazily evaluated, allowing you to use an infinite range and take only a specific number of elements from it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> 1.. | take 5\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 2 │\n│ 2 │ 3 │\n│ 3 │ 4 │\n│ 4 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Viewing Nushell Configuration\nDESCRIPTION: Basic commands to view and examine the current Nushell configuration settings using pagers like less or bat.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n$env.config\n```\n\nLANGUAGE: nu\nCODE:\n```\n$env.config | table -e | less -R\n```\n\nLANGUAGE: nu\nCODE:\n```\n$env.config | table -e | bat -p\n```\n\n----------------------------------------\n\nTITLE: Paginated API Requests with Mutable Variables in Nushell\nDESCRIPTION: Traditional approach to crawl paginated GitHub API responses using mutable variables and a for loop, continuing until a page returns fewer items than the page size.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nmut pages = []\nfor page in 1.. {\n  let resp = http get (\n    {\n      scheme: https,\n      host: \"api.github.com\",\n      path: \"/repos/nushell/nushell/issues\",\n      params: { page: $page, per_page: $PAGE_SIZE }\n    } | url join)\n\n  $pages = ($pages | append $resp)\n\n  if ($resp | length) < $PAGE_SIZE {\n    break\n  }\n}\n$pages\n```\n\n----------------------------------------\n\nTITLE: Moving Columns in a Table in Nushell\nDESCRIPTION: This snippet shows how to reorder columns in a table by moving the 'name' column after the 'size' column using the move command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\nls | move name --after size\n```\n\n----------------------------------------\n\nTITLE: Basic While Loop Example in Nushell\nDESCRIPTION: Demonstrates a simple while loop that increments a counter until it reaches 10.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/while.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> mut x = 0; while $x < 10 { $x = $x + 1 }\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type for HTTP Posts\nDESCRIPTION: In this example, the metadata field 'content-type' is set manually for the pipeline output before making an HTTP POST request. This showcases the integration of metadata handling with HTTP command execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nopen --raw test.json\n| metadata set --content-type application/json\n| http post https://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values in Nushell 0.101+\nDESCRIPTION: Examples of how to set specific configuration values in the new config approach. Rather than defining a complete config record, users can now override only the specific settings they want to change.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-04-configuration_preview.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.show_banner = false\n$env.config.buffer_editor = \"code\"\n\n$env.config.history.file_format = \"sqlite\"\n$env.config.history.max_size: 1_000_000\n$env.config.history.isolation = true\n\n$env.config.keybindings ++= [{\n  name: \"insert_last_token\"\n  modifier: \"alt\"\n  keycode: \"char_.\"\n  event: [\n    {\n      edit: \"InsertString\"\n      value: \"!$\"\n    },\n    {\n      \"send\": \"Enter\"\n    }\n  ]\n  mode: [ emacs, vi_normal, vi_insert ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Listing stored dataframes in Nushell\nDESCRIPTION: Demonstrates how to list all dataframes stored in memory, showing their key, type, number of columns and rows, and estimated size. This is useful for managing dataframes in a Nushell session.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\npolars store-ls | select key type columns rows estimated_size\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Item is a String in Nushell\nDESCRIPTION: Example showing how to use 'any' to check if any element in a list is a string by using the 'describe' command within the predicate.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/any.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4] | any {|| ($in | describe) == 'string' }\nfalse\n```\n\n----------------------------------------\n\nTITLE: Checking Terminal Input with Nushell\nDESCRIPTION: This Nushell code snippet checks if the standard input (stdin) is attached to a terminal. It outputs \"terminal attached\" if stdin is a terminal and \"no terminal\" otherwise. There are no external dependencies beyond Nushell itself, and the command accepts no parameters. The input is implicitly `nothing`, and the output is a boolean which determines the string output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-terminal.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> if (is-terminal --stdin) { \"terminal attached\" } else { \"no terminal\" }\n```\n\n----------------------------------------\n\nTITLE: Table Output for Grouping Command in Nushell\nDESCRIPTION: This snippet shows how to modify the output of the 'group-by' command to present the information in a table format using the '--to-table' flag. The resulting table displays the columns for each grouper clearly, which aids in easier data interpretation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n$data | group-by color category --to-table\n```\n\n----------------------------------------\n\nTITLE: Extract Week from Date Example\nDESCRIPTION: Example demonstrating how to extract the week number from datetime values using polars get-week. Creates a datetime object, converts it to a dataframe, and extracts the week number.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-week.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-week\n```\n\n----------------------------------------\n\nTITLE: Converting List to MessagePack in Nushell\nDESCRIPTION: This example demonstrates how to convert a list of values to MessagePack format using the 'to msgpack' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_msgpack.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[foo, 42, false] | to msgpack\n```\n\n----------------------------------------\n\nTITLE: Using a Nushell Module\nDESCRIPTION: This snippet demonstrates how to use the `greetings.nu` module defined in the previous snippet. The `use` command imports the module.  Calling the module by its name executes the `main` function defined within it.  Calling a function within the module requires specifying the module and function names.  Dependencies: `greetings.nu` module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/cheat_sheet.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nuse greetings.nu\ngreetings\n# => greetings and salutations!\ngreetings hello world\n# => hello world!\n\n```\n\n----------------------------------------\n\nTITLE: Generating Sequence from 1 to 10 in Nushell\nDESCRIPTION: Demonstrates using the 'seq' command to generate a sequence of numbers from 1 to 10, displaying the output as a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> seq 1 10\n╭───┬────╮\n│ 0 │  1 │\n│ 1 │  2 │\n│ 2 │  3 │\n│ 3 │  4 │\n│ 4 │  5 │\n│ 5 │  6 │\n│ 6 │  7 │\n│ 7 │  8 │\n│ 8 │  9 │\n│ 9 │ 10 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Getting a Column from a Table in Nushell\nDESCRIPTION: Shows how to extract a specific column from a table of records using the 'get' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [{A: A0}] | get A\n╭───┬────╮\n│ 0 │ A0 │\n╰───┴────╯\n\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in Nushell Module\nDESCRIPTION: Demonstrates the new way of defining environment variables in a Nushell module using the 'export-env' block, which replaces individual 'export env' statements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n# spam.nu\n\nexport-env {\n    let-env FOO = 'foo'\n    let-env BAR = 'bar'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'id' Column to Input Table Using 'merge' in Nu Shell\nDESCRIPTION: Demonstrates how to use the 'merge' command to add an 'id' column to an existing table in Nu Shell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [a b c] | wrap name | merge ( [47 512 618] | wrap id )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pipeline Variables in Nushell\nDESCRIPTION: This snippet shows how to use the new $in pipeline variable to access the entire input stream as a value, allowing operations on multiple elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-06-22-nushell_0_33.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\necho 1 2 3 | $in.1 * $in.2\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Dates in Polars Dataframe with Non-Exact Format\nDESCRIPTION: Converts an array of date strings to a Polars dataframe and then converts the string column to date type, using the non-exact flag to match date patterns that may be embedded within larger strings or include time components.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_as-date.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[\"2021-12-30\" \"2021-12-31 21:00:00\"] | polars into-df | polars as-date \"%Y-%m-%d\" --not-exact\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Hide Command Signature\nDESCRIPTION: The basic command signature for hiding an overlay in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_hide.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> overlay hide {flags} (name)\n```\n\n----------------------------------------\n\nTITLE: File System Manipulation Commands\nDESCRIPTION: Basic cross-platform file system commands for moving, copying, and removing files and directories\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/explorando.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmv source_file destination\n```\n\nLANGUAGE: shell\nCODE:\n```\ncp source_file destination\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm file_to_remove\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdir new_directory\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operation Example in Nushell\nDESCRIPTION: This snippet showcases the use of basic arithmetic operators, specifically multiplication and addition, demonstrating how parentheses affect the evaluation order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n3 * (1 + 2)\n# => 9\n```\n\n----------------------------------------\n\nTITLE: Moving Files with mv Command\nDESCRIPTION: Shows how to move files from one location to another using Nushell's mv command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmv source_file destination_path\n```\n\n----------------------------------------\n\nTITLE: `command_not_found` Hook in Arch Linux\nDESCRIPTION: This snippet shows how to implement a `command_not_found` hook in Arch Linux. It uses the `pkgfile` command to determine which package contains the missing command. If the package is found, it prints a message indicating the package that may contain the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = {\n    ...other config...\n\n    hooks: {\n        ...other hooks...\n\n        command_not_found: {\n            |cmd_name| (\n                try {\n                    let pkgs = (pkgfile --binaries --verbose $cmd_name)\n                    if ($pkgs | is-empty) {\n                        return null\n                    }\n                    (\n                        $\\\"(ansi $env.config.color_config.shape_external)($cmd_name)(ansi reset) \\\" +\n                        $\\\"may be found in the following packages:\\\\n($pkgs)\\\"\n                    )\n                }\n            )\n        }\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command History Session in Nushell\nDESCRIPTION: This snippet demonstrates how to retrieve the command history session in Nushell. The command has no dependencies and requires no additional parameters. It outputs an integer representing the session ID of the command history. There are no inputs required for this command, and it is straightforward to use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/history_session.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> history session\n```\n\n----------------------------------------\n\nTITLE: Parsing with Multiple Capture Groups\nDESCRIPTION: Demonstrates parsing with multiple fancy-regex capture group patterns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/parse.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> \"foo! bar.\" | parse --regex '(\\w+)(?=\\.)|(\\w+)(?=!)'\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Hash from String in Nushell (Binary Output)\nDESCRIPTION: Example of creating an MD5 hash from a string with binary output using the --binary flag. The output shows the raw 16-byte MD5 hash with byte information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_md5.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'abcdefghijklmnopqrstuvwxyz' | hash md5 --binary\nLength: 16 (0x10) bytes | printable whitespace ascii_other non_ascii\n00000000:   c3 fc d3 d7  61 92 e4 00  7d fb 49 6c  ca 67 e1 3b   ××××a××0}×Il×g×;\n\n```\n\n----------------------------------------\n\nTITLE: Exploring System Host Information in Nushell\nDESCRIPTION: Demonstrates how to use the 'explore' command to view system host information in an interactive pager.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/explore.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> sys host | explore\n```\n\n----------------------------------------\n\nTITLE: Using 'any' in Command Type Signatures in Nushell\nDESCRIPTION: Demonstrates how to annotate a command's type signature to indicate it can accept any type as input and might output any type. The example shows a passthrough command that preserves the type of the input value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/any.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ndef passthrough [] any -> any { $in }\n\"Virat Kohli\" | passthrough | describe\n# =>string\n\n{||} | passthrough | describe\n# =>closure\n```\n\n----------------------------------------\n\nTITLE: Calling an Alias in Nushell\nDESCRIPTION: This snippet shows how to call the previously defined alias 'll', executing 'ls -l' as if it were directly typed in the command line.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nll\n```\n\n----------------------------------------\n\nTITLE: File Operations with Structured Data\nDESCRIPTION: Demonstration of Nu's ability to work with structured data files like TOML, JSON, and YAML using consistent commands and data manipulation approaches.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopen cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Converting Lists to Markdown in Nushell\nDESCRIPTION: Example of rendering a simple list as Markdown using the --pretty flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_md.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [0 1 2] | to md --pretty\n0\n1\n2\n```\n\n----------------------------------------\n\nTITLE: Grouping with Custom Block Function in Nushell\nDESCRIPTION: Demonstrates using a custom block function to group files by their extensions. The block parses each path and extracts the extension as the grouping key.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [foo.txt bar.csv baz.txt] | group-by { path parse | get extension }\n```\n\n----------------------------------------\n\nTITLE: Trimming Extra Spaces - Nushell\nDESCRIPTION: This snippet continues from the previous one, adding a step to trim whitespace from the data in each column after splitting. This is crucial for ensuring clean data for further manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nopen people.txt | lines | split column \"|\" | str trim\n# => ───┬─────────┬─────────┬──────────\n# =>  # │ column1 │ column2 │ column3\n# => ───┼─────────┼─────────┼──────────\n# =>  0 │ Octavia │ Butler  │ Writer\n# =>  1 │ Bob     │ Ross    │ Painter\n# =>  2 │ Antonio │ Vivaldi │ Composer\n# => ───┴─────────┴─────────┴──────────\n```\n\n----------------------------------------\n\nTITLE: Removing Files using Globs in Nushell\nDESCRIPTION: This code snippet illustrates the use of the `rm` command to remove files with glob patterns explained through different quoting methods. These include unquoted, quoted, and backtick-quoted strings, showcasing how they affect file matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/moving_around.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nrm *myfile*\n```\n\nLANGUAGE: nu\nCODE:\n```\nrm \"*myfile*\"\n```\n\nLANGUAGE: nu\nCODE:\n```\nrm `*myfile*`\n```\n\n----------------------------------------\n\nTITLE: Basic Division by Zero Error Handling in Nu Shell\nDESCRIPTION: Demonstrates basic usage of try block attempting division by zero without catch handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/try.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ntry { 1 / 0 }\n```\n\n----------------------------------------\n\nTITLE: Uploading an Image File Using NuShell\nDESCRIPTION: This snippet demonstrates how to send a POST request to upload an image file using NuShell with content type 'multipart/form-data'. The image file is opened as a binary stream and included in the request. The API endpoint and content type are specified, and the response format is structured under the HTTP response.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nhttp post https://httpbin.org/post --content-type \"multipart/form-data\" {\n  icon: (open -r ~/Downloads/favicon-32x32.png),\n  description: \"Small icon\"\n}\n```\n\n----------------------------------------\n\nTITLE: Value Header Variant Example in JSON\nDESCRIPTION: Example of a Value header variant in the PipelineDataHeader structure. This represents a single value that doesn't start a stream, containing an Int value with span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Value\": {\n    \"Int\": {\n      \"val\": 2,\n      \"span\": {\n        \"start\": 9090,\n        \"end\": 9093\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine for Multiple Angles in Degrees using Nushell\nDESCRIPTION: Shows how to apply the sine function to a list of angles in degrees using the 'math sin' command with the '-d' flag in Nushell. The results are rounded to 4 decimal places.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sin.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [0 90 180 270 360] | math sin -d | math round --precision 4\n╭───┬───────╮\n│ 0 │  0.00 │\n│ 1 │  1.00 │\n│ 2 │  0.00 │\n│ 3 │ -1.00 │\n│ 4 │  0.00 │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Git Add Extern Command with Positional Parameters\nDESCRIPTION: This snippet shows the syntax for defining an extern command for 'git add' with optional positional parameters in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/externs.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nexport extern \"git add\" [\n  ...pathspecs: path\n  # …\n]\n```\n\n----------------------------------------\n\nTITLE: Choosing an Item from a Range in Nushell\nDESCRIPTION: This snippet demonstrates how to use the `input list` command to choose an item from a specified range of numbers, allowing users to interactively select one number from the created range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input_list.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 1..10 | input list\n```\n\n----------------------------------------\n\nTITLE: Iterating through directories with each in Nushell\nDESCRIPTION: This snippet demonstrates how to iterate through directories and count the number of files in each subdirectory using the `each` command in Nushell. It filters the output of `ls` to only include directories, then iterates through each directory, creating a record containing the directory name and the number of files within it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/parallelism.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls | where type == dir | each { |row|\n    { name: $row.name, len: (ls $row.name | length) }\n}\n```\n\n----------------------------------------\n\nTITLE: Split Chars Command Signature - Nushell\nDESCRIPTION: Command signature showing the basic syntax for the split chars command with available flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_chars.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> split chars {flags} \n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'sys disks' in Nushell\nDESCRIPTION: An example showing how to use the 'sys disks' command to display information about system disks.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_disks.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> sys disks\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns in Nushell\nDESCRIPTION: Using the 'select' command to create a new table containing only the specified columns (name and size) from the original table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nls | select name size\n# => ---+---------------+---------\n# =>  # | name          | size\n# => ---+---------------+---------\n# =>  0 | add.rs        | 2.7 KB\n# =>  1 | sum.rs        | 3.0 KB\n# =>  2 | inc.rs        | 11.8 KB\n# =>  3 | str.rs        | 21.4 KB\n# =>  4 | skip.rs       | 1.7 KB\n# =>  5 | textview.rs   | 9.4 KB\n# =>  6 | binaryview.rs | 13.0 KB\n# =>  7 | edit.rs       | 2.7 KB\n# =>  8 | tree.rs       | 3.0 KB\n# =>  9 | sys.rs        | 9.2 KB\n# => ---+---------------+---------\n```\n\n----------------------------------------\n\nTITLE: Using Custom Commands with Examples in Nushell\nDESCRIPTION: Demonstrates using the custom 'ezal' command with different parameters, showing how the command passes parameters to the underlying 'eza' utility.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_27\n\nLANGUAGE: nu\nCODE:\n```\nezal commands\n# => drwxr-xr-x   - ntd  7 Feb 11:41 categories\n# => drwxr-xr-x   - ntd  7 Feb 11:41 docs\n# => .rw-r--r-- 936 ntd 14 Jun  2024 README.md\n\nezal -d commands\n# => drwxr-xr-x - ntd 14 Jun  2024 commands\n```\n\n----------------------------------------\n\nTITLE: Reversing a List with reversed/list.reverse\nDESCRIPTION: This snippet illustrates how to reverse a list using either the `reversed` function or the `list.reverse` method in Python. The `reversed` function returns an iterator, while `list.reverse` modifies the list in place. This provides options for both creating a reversed copy or modifying the original list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"reversed, list.reverse\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Keys with Spaces in Nushell\nDESCRIPTION: This snippet demonstrates how to declare a record with keys that have spaces and access them using both dot notation and the 'get' command to retrieve values correctly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nlet record_example = {\n    \"key x\":12\n    \"key y\":4\n  }\n$record_example.\"key x\"\n# => 12\n\n# or\n$record_example | get \"key x\"\n```\n\n----------------------------------------\n\nTITLE: Listing Only Files in Nushell\nDESCRIPTION: Shows how to list only the files (not directories) in the current directory using the 'where' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nls | where type == file\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Loop Usage with Condition in Nushell\nDESCRIPTION: Shows an example of using the 'loop' command in Nushell to increment a variable until a condition is met. The loop continues until x is greater than 10.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/loop.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 0; loop { if $x > 10 { break }; $x = $x + 1 }; $x\n```\n\n----------------------------------------\n\nTITLE: Chained If-Else Conditionals in Nushell\nDESCRIPTION: Shows how to chain multiple if-else conditions together to create more complex conditional logic with multiple possible outcomes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nif $x > 0 { 'positive' } else if $x == 0 { 'zero' } else { \"negative\" }\n```\n\n----------------------------------------\n\nTITLE: Replacing a Complex Extension in Nushell\nDESCRIPTION: This example shows how to parse a path with a complex extension (tar.gz) by manually specifying the extension, then changing it to a different extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_parse.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking/spam.tar.gz' | path parse --extension tar.gz | upsert extension { 'txt' }\n```\n\n----------------------------------------\n\nTITLE: Counting Rows in a Table using Length Command in Nushell\nDESCRIPTION: Shows how to use the 'length' command to count the number of rows in a table. The example uses a table with two rows of key-value pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/length.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a:1 b:2}, {a:2 b:3}] | length\n2\n```\n\n----------------------------------------\n\nTITLE: Split List with Condition\nDESCRIPTION: Example demonstrating how to split a list using a condition (multiples of 3) as separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_list.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4 5 6 7 8 9 10] | split list {|e| $e mod 3 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Defining and Utilizing Custom Match Command in Nushell\nDESCRIPTION: Defines a custom command `work-on-list` using the `match` command in Nushell to classify lists into categories. It checks for a specific condition in lists and returns a string based on the list's characteristics. No additional dependencies required.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\ndef work-on-list []: any -> string {\n    match $in {\n        [$x, ..] if $x == 1 => { 'good list' },\n        [..] => { 'not a very good list' },\n        _ => { 'not a list at all' }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a table column to snake_case in Nushell\nDESCRIPTION: Shows how to convert a specific column in a table to snake_case format by providing the column name as an argument to the str snake-case command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_snake-case.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n[[lang, gems]; [nuTest, 100]] | str snake-case lang\n```\n\n----------------------------------------\n\nTITLE: Timing a Pipeline in Nushell\nDESCRIPTION: Example of using timeit to measure execution time of a pipeline that opens a file and splits its contents into characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/timeit.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> timeit { open some_file.txt | split chars }\n```\n\n----------------------------------------\n\nTITLE: Using Formats Module in Nushell\nDESCRIPTION: Example showing how to import and use the formats submodule for JSON line conversion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/standard_library.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nuse std/formats *\nls | to jsonl\n```\n\n----------------------------------------\n\nTITLE: Applying Themes to Nushell Tables\nDESCRIPTION: This snippet demonstrates how to temporarily set a table theme in Nushell without altering the global environment. The command `do` is used to scope settings, and `ls | table` displays directory contents. There are no specific dependencies, but Nushell should be installed and configured.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\ndo {                                # use the scope of `do` to not alter the environment of the callee\n    $env.config.table.mode = \"none\" # set the theme\n    ls | table                      # call table to avoid just passing the value back to the callee and use the outside theme\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Plugin from a Repository using Cargo\nDESCRIPTION: This code snippet shows how to install a plugin from a local repository using `cargo`. The command should be run from within the cloned repository. The `--path .` flag specifies the current directory as the location of the `Cargo.toml` file. The `--locked` flag ensures version consistency.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\ncargo install --path . --locked\n```\n\n----------------------------------------\n\nTITLE: Nushell Create Directory with Date (Pipeline)\nDESCRIPTION: This code demonstrates creating a directory with tomorrow's date in its name using a pipeline.  It shows how to build the directory name step-by-step using `$in`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\ndate now                    # 1: today\n| $in + 1day                # 2: tomorrow\n| format date '%F'          # 3: Format as YYYY-MM-DD\n| $'($in) Report'           # 4: Format the directory name\n| mkdir $in                 # 5: Create the directory\n```\n\n----------------------------------------\n\nTITLE: Find Inverted Values Using Regex\nDESCRIPTION: Example demonstrating inverted regex pattern matching in records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> [[version name]; ['0.1.0' nushell] ['0.1.1' fish] ['0.2.0' zsh]] | find --regex \"nu\" --invert\n╭───┬─────────┬──────╮\n│ # │ version │ name │\n├───┼─────────┼──────┤\n│ 0 │ 0.1.1   │ fish │\n│ 1 │ 0.2.0   │ zsh  │\n╰───┴─────────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Checking Single File Existence in Nushell\nDESCRIPTION: Example showing how to check if a single file exists, returning a boolean value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_exists.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/joe/todo.txt' | path exists\nfalse\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example on Dataframe\nDESCRIPTION: Example showing how to create a dataframe from array data and query it using SQL. The example demonstrates selecting a single column 'a' from the dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_query.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars query 'select a from df'\n╭───┬───╮\n│ # │ a │\n├───┼───┤\n│ 0 │ 1 │\n│ 1 │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Opening a Website Using NuShell\nDESCRIPTION: This code demonstrates how to use the `start` command to open a website ('https://www.nushell.sh') in the default web browser. The command depends on the provided URL to initiate the opening process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/start.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> start https://www.nushell.sh\n\n```\n\n----------------------------------------\n\nTITLE: Record Literal Parsing in Nushell\nDESCRIPTION: This snippet illustrates the change in Nushell's record parsing behavior, where parentheses are no longer required when using datetime literals with colons in record literals. It shows the old syntax that required parentheses and the new, simpler syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-09-17-nushell_0_98_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n\"# Previously, parentheses were necessary:\n{ foo: (2024-08-13T22:11:09) }\n\n# But this now works!\n{ foo: 2024-08-13T22:11:09 }\"\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP PATCH Request in Nushell\nDESCRIPTION: Perform a simple HTTP PATCH request to a specified URL with a body payload\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_patch.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nhttp patch https://www.example.com 'body'\n```\n\n----------------------------------------\n\nTITLE: Calculating Statistical Measures in Nushell\nDESCRIPTION: Shows how to use the new 'math stddev' and 'math variance' commands to calculate standard deviation and variance of a dataset.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> echo [ 1 2 3 4 5 ] | math stddev\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> echo [ 1 2 3 4 5 ] | math variance\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Record Entry in Nushell\nDESCRIPTION: Demonstrates how to use the 'insert' command to add a new entry to a single record structure. No external dependencies are required. The fields 'name' and 'stars' are added with their respective values. The output is a record containing the new alias.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/insert.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> {'name': 'nu', 'stars': 5} | insert alias 'Nushell'\n╭───────┬─────────╮\n│ name  │ nu      │\n│ stars │ 5       │\n│ alias │ Nushell │\n╰───────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Fetching Random Chuck Norris Joke using Nushell HTTP Request\nDESCRIPTION: Makes an HTTP GET request to the Chuck Norris jokes API and extracts the joke value from the JSON response using Nushell's built-in HTTP and JSON handling capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/README.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n(http get https://api.chucknorris.io/jokes/random).value\n```\n\n----------------------------------------\n\nTITLE: Showing the str join command signature in Nushell\nDESCRIPTION: The command signature for the 'str join' function in Nushell, showing how to use the command with optional separator parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_join.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> str join {flags} (separator)\n```\n\n----------------------------------------\n\nTITLE: Adding Bytes to the End of Binary Data in Nushell\nDESCRIPTION: Example demonstrating how to add bytes '0x[11]' to the end of binary data '0x[FF AA AA]' using the --end flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_add.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n0x[FF AA AA] | bytes add 0x[11] --end\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings in Dataframe Example\nDESCRIPTION: Demonstrates splitting a comma-separated string in a dataframe column and exploding the results into separate rows\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-split.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a]; [\"one,two,three\"]] | polars into-df\n                | polars select (polars col a | polars str-split \",\" | polars explode)\n                | polars collect\n```\n\n----------------------------------------\n\nTITLE: Saving Webpage While Printing in Nushell\nDESCRIPTION: Example showing how to save a webpage to a file while simultaneously printing it to the console.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tee.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> http get http://example.org/ | tee { save example.html }\n```\n\n----------------------------------------\n\nTITLE: Grouping by Multiple Column Values in Nushell\nDESCRIPTION: Demonstrates grouping a table by multiple columns ('lang' and 'year') to create a hierarchical grouping structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> [\n        [name, lang, year];\n        [andres, rb, \"2019\"],\n        [jt, rs, \"2019\"],\n        [storm, rs, \"2021\"]\n    ]\n    | group-by lang year\n```\n\n----------------------------------------\n\nTITLE: Executing sys net Command in Nushell\nDESCRIPTION: This command is used to display information about the system's network interfaces. It takes no arguments and returns a table of network interface details.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_net.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> sys net\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config and libssl-dev\nDESCRIPTION: This command installs the `pkg-config`, `build-essential`, and `libssl-dev` packages using `apt-get` on Debian/Ubuntu based systems. These packages are dependencies required to build Nushell from source.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n\"You will need to install the \\\"pkg-config\\\", \\\"build-essential\\\" and \\\"libssl-dev\\\" packages:\"\n```\n\n----------------------------------------\n\nTITLE: Enumerating List Elements in Nushell\nDESCRIPTION: Example showing how to add index numbers to a simple list of items, outputting a table with numbered rows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/enumerate.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [a, b, c] | enumerate\n╭───┬──────╮\n│ # │ item │\n├───┼──────┤\n│ 0 │ a    │\n│ 1 │ b    │\n│ 2 │ c    │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Searching commands in Nu\nDESCRIPTION: Searches for matches in all available commands using the 'help --find' command followed by the search string. This command will list any commands that contain the specified string in their name or description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\n\"help --find <string>\"\n```\n\n----------------------------------------\n\nTITLE: List Top Memory-Consuming Processes in Nushell\nDESCRIPTION: Sorts processes by memory usage and displays the top 5 memory-intensive processes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ps.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ps | sort-by mem | last 5\n```\n\n----------------------------------------\n\nTITLE: IR Subexpression Capture Fix in Nushell\nDESCRIPTION: This shell snippet illustrates the old behavior of subexpressions in the IR engine of Nushell, where subexpressions should not affect external command capturing. The snippet shows a command that incorrectly produced no output due to the bug. This issue has been addressed in version 0.96.1, aligning the IR engine behavior with expectations. No external dependencies are required beyond Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-29-nushell_0_96_1.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n(nu -c 'print foo'); null\n```\n\n----------------------------------------\n\nTITLE: Enumerated For Loop with String Formatting\nDESCRIPTION: Example demonstrating how to enumerate a list while iterating and format output strings with index and value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/for.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> for $it in (['bob' 'fred'] | enumerate) { print $\"($it.index) is ($it.item)\" }\n```\n\n----------------------------------------\n\nTITLE: Explicit Block Form of Where Command in Nushell\nDESCRIPTION: This snippet shows the canonical form of the 'where' command using an explicit block with the equals sign, providing more precise control over filtering operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nwhere { = $it.size > 10kb }\n```\n\n----------------------------------------\n\nTITLE: Formatting a Number in Nushell\nDESCRIPTION: This snippet demonstrates the usage of the 'format number' command to convert a number into various formats. The command takes a number as input and outputs a record containing the formatted representations. The output includes formats such as binary, hexadecimal, octal, and scientific notation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_number.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 42 | format number\n╭──────────┬──────────╮\n│ binary   │ 0b101010 │\n│ debug    │ 42       │\n│ display  │ 42       │\n│ lowerexp │ 4.2e1    │\n│ lowerhex │ 0x2a     │\n│ octal    │ 0o52     │\n│ upperexp │ 4.2E1    │\n│ upperhex │ 0x2A     │\n╰──────────┴──────────╯\n```\n\n----------------------------------------\n\nTITLE: Column Arithmetic in Polars DataFrame with Nushell\nDESCRIPTION: Demonstrates how to perform arithmetic operations between columns in a Polars DataFrame using Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_24\n\nLANGUAGE: nu\nCODE:\n```\n$df_8.a * $df_8.b\n```\n\n----------------------------------------\n\nTITLE: Importing Command Line History - Basic Usage\nDESCRIPTION: This code snippet shows how to use the 'history import' command to import existing command line history without any flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/history_import.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> history import\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Integration Settings in Nushell\nDESCRIPTION: This snippet defines a record structure for configuring various shell integration settings in Nushell. It allows tuning of terminal capabilities, such as path communication and prompt marking for better terminal integration. Dependencies include Nushell environment and a terminal that supports the specified escape codes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-28-nushell_0_94_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nshell_integration: {\n  # osc2 abbreviates the path if in the home_dir, sets the tab/window title, shows the running command in the tab/window title\n  osc2: true\n  # osc7 is a way to communicate the path to the terminal, this is helpful for spawning new tabs in the same directory\n  osc7: true\n  # osc8 is also implemented as the deprecated setting ls.show_clickable_links, it shows clickable links in ls output if your terminal supports it\n  osc8: true\n  # osc9_9 is from ConEmu and is starting to get wider support. It's similar to osc7 in that it communicates the path to the terminal\n  osc9_9: false\n  # osc133 is several escapes invented by Final Term which include the supported ones below.\n  # 133;A - Mark prompt start\n  # 133;B - Mark prompt end\n  # 133;C - Mark pre-execution\n  # 133;D;exit - Mark execution finished with exit code\n  # This is used to enable terminals to know where the prompt is, the command is, where the command finishes, and where the output of the command is\n  osc133: true\n  # osc633 is closely related to osc133 but only exists in visual studio code (vscode) and supports their shell integration features\n  # 633;A - Mark prompt start\n  # 633;B - Mark prompt end\n  # 633;C - Mark pre-execution\n  # 633;D;exit - Mark execution finished with exit code\n  # 633;E - NOT IMPLEMENTED - Explicitly set the command line with an optional nonce\n  # 633;P;Cwd=<path> - Mark the current working directory and communicate it to the terminal\n  # and also helps with the run recent menu in vscode\n  osc633: true\n  # reset_application_mode is escape \\x1b[?1l and was added to help ssh work better\n  reset_application_mode: true\n}\n```\n\n----------------------------------------\n\nTITLE: Table Merging with Wrap-Around in Nushell\nDESCRIPTION: Shows how to merge tables using chunks and flatten commands to create a wrap-around effect for smaller tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/tables.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet first_table = [[a b]; [1 2] [3 4]]\nlet second_table = [[c d]; [5 6]]\n\n$first_table\n| chunks ($second_table | length)\n| each { merge $second_table }\n| flatten\n```\n\n----------------------------------------\n\nTITLE: Filtering Rows with Duplicated Values in Polars with Nushell\nDESCRIPTION: Demonstrates filtering rows where a column has duplicate values using polars is-duplicated as a filter condition. The example selects rows where the 'word' column values are duplicated.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_39\n\nLANGUAGE: nushell\nCODE:\n```\n$df_1 | polars filter-with ($in.word | polars is-duplicated)\n```\n\n----------------------------------------\n\nTITLE: Checking if string contains a substring in Nushell\nDESCRIPTION: This example demonstrates checking if a filename contains a specific file extension. The command returns a boolean value indicating whether the substring was found.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_contains.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n'my_library.rb' | str contains '.rb'\n```\n\n----------------------------------------\n\nTITLE: Rendering Experimental Commands Table in HTML and Vue.js\nDESCRIPTION: This HTML snippet creates a table to display experimental Nushell commands. It uses Vue.js directives to iterate over the computed 'commands' array, rendering each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/experimental.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Selecting Columns from Lazyframe using Polars in Nushell\nDESCRIPTION: This example demonstrates how to use the 'polars select' command to choose a specific column from a dataframe. It creates a simple dataframe with two columns, converts it to a Polars dataframe, and then selects only the 'a' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_select.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars select a\n```\n\n----------------------------------------\n\nTITLE: Extracting data using `get`\nDESCRIPTION: Opens a JSON file and extracts the value associated with the 'version' key using the `get` command. The `open` command reads the JSON, and the `get` command retrieves the specified field.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nopen editors/vscode/package.json | get version\n```\n\n----------------------------------------\n\nTITLE: Passing a Closure Through a Pipeline in Nushell\nDESCRIPTION: Shows how to pass a closure through a pipeline and then invoke it using the 'do' command, accessing the closure via the $in variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/closure.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n{|a,b| $a + $b} | do $in 34 8\n```\n\n----------------------------------------\n\nTITLE: Nesting Quotes in Nushell Strings\nDESCRIPTION: Shows how to nest different types of quotes within string literals. Double quotes can contain single quotes and vice versa.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/strings_and_text.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n\"This is just a string 'that needs an inner part quoted'\"\n'This is also a string \"that needs an inner part quoted\"'\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing a TSV File without Headers\nDESCRIPTION: Shows how to create a TSV file without treating the first row as headers and parse it with the from tsv command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_tsv.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2' | save tsv-data | open tsv-data | from tsv --noheaders\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Record Key-Value Pairs in Nushell\nDESCRIPTION: Shows how to iterate over record entries by first transposing to a table and then processing each row.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n{ \"apples\": 543, \"bananas\": 411, \"oranges\": 0 }\n| transpose fruit count\n| each {|f| $\"We have ($f.count) ($f.fruit)\" }\n```\n\n----------------------------------------\n\nTITLE: Loading Query Plugin from Default Registry\nDESCRIPTION: Example showing how to load the 'query' plugin from the default plugin registry path defined in $nu.plugin-path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_use.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> plugin use query\n\n```\n\n----------------------------------------\n\nTITLE: Temporarily Setting Environment Variables with `with-env` in Nushell\nDESCRIPTION: This snippet demonstrates how to temporarily set an environment variable using the `with-env` command in Nushell.  It sets the environment variable `FOO` to `BAR` within the block, and the `echo` command outputs the value of `$nu.env.FOO` within that context.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/environment.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nwith-env [FOO BAR] { echo $nu.env.FOO }\n# => BAR\n```\n\n----------------------------------------\n\nTITLE: Last Expression from Column Example\nDESCRIPTION: Example demonstrating how to create a last expression from a column using polars commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_len.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> polars col a | polars last\n```\n\n----------------------------------------\n\nTITLE: Git Checkout External Command with Completions\nDESCRIPTION: External git checkout command definition with type-aware completions for branches, demonstrating advanced command registration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-01-nushell_0_59.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nextern \"git checkout\" [\n  branch?: string@\"nu-complete git branches\" # name of the branch to checkout\n  -b: string                                 # create and checkout a new branch\n  -B: string                                 # create/reset and checkout a branch\n]\n```\n\n----------------------------------------\n\nTITLE: Converting String to PascalCase in Nushell\nDESCRIPTION: Example of converting a hyphenated string to PascalCase format using the str pascal-case command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_pascal-case.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 'nu-shell' | str pascal-case\nNuShell\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Path Expansion in Nushell Functions\nDESCRIPTION: This example shows how path parameters are automatically expanded while string parameters remain unchanged. The code demonstrates path expansion with dot notation, tilde for home directory, and multi-level directory traversal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/path.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ndef show_difference [\n    p: path\n    s: string\n] {\n    print $\"The path is expanded: ($p)\"\n    print $\"The string is not: ($s)\"\n}\n\n# Results\ncd ~/testing\nshow_difference . .\n# => The path is expanded: /home/username/testing\n# => The string is not: .\nshow_difference ~ ~\n# => The path is expanded: /home/username\n# => The string is not: ~\n\n# Multi-level directory traversal is also supported\nshow_difference ... ...\n# => The path is expanded: /home/\n# => The string is not: ...\n```\n\n----------------------------------------\n\nTITLE: Installing RHEL dependencies\nDESCRIPTION: This command installs the `libxcb`, `openssl-devel`, and `libX11-devel` packages using `yum` on RHEL-based systems. These packages are dependencies required to build Nushell from source.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n\"You will need to install \\\"libxcb\\\", \\\"openssl-devel\\\" and \\\"libX11-devel\\\":\"\n```\n\n----------------------------------------\n\nTITLE: Handling Ordering Plugin Call Response in JSON\nDESCRIPTION: Example of a successful response to the PartialCmp custom value op. It returns an Ordering value or null if values can't be compared.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CallResponse\": [\n    0,\n    {\n      \"Ordering\": \"Less\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator in Lists - Nushell\nDESCRIPTION: Demonstrates the usage of the spread operator for appending elements to a list. The example shows how to combine contents from multiple variables and expressions into a single list using the spread operator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet list = [\"foo\"]\n[\n    1,\n    ...$list,\n    ...(\"foo\" | split chars),\n    ...[3 9],\n    []\n] | to nuon\n```\n\n----------------------------------------\n\nTITLE: Computing Edit Distance with Table Input in Nushell\nDESCRIPTION: Demonstrates calculating edit distances between a reference string and multiple values in a table using cell paths. Results are shown in a formatted table with distances for each specified column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_distance.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [{a: 'nutshell' b: 'numetal'}] | str distance 'nushell' 'a' 'b'\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 4 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Fill-NaN Command Signature\nDESCRIPTION: The basic signature for the polars fill-nan command, showing required parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_fill-nan.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars fill-nan {flags} (fill)\n```\n\n----------------------------------------\n\nTITLE: Extract Month from DateTime Values Example\nDESCRIPTION: Example demonstrating how to extract month values from datetime objects in a dataframe. Creates a datetime value, converts it to a dataframe, and extracts the month component.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-month.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-month\n```\n\n----------------------------------------\n\nTITLE: Generate Fibonacci Sequence with Default Parameters in Nushell\nDESCRIPTION: Creates a continuous stream of Fibonacci numbers using default parameter values in the closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/generate.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ngenerate {|fib=[0, 1]| {out: $fib.0, next: [$fib.1, ($fib.0 + $fib.1)]} }\n```\n\n----------------------------------------\n\nTITLE: Custom Order Sorting\nDESCRIPTION: Example showing how to use a custom comparison closure for sorting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort-by.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> [7 3 2 8 4] | sort-by -c {|a, b| $a < $b}\n```\n\n----------------------------------------\n\nTITLE: Finding Column Minima in Table using Nushell\nDESCRIPTION: Shows how to use 'math min' to compute the minimum values for each column in a table of data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_min.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a: 1 b: 3} {a: 2 b: -1}] | math min\n╭───┬────╮\n│ a │ 1  │\n│ b │ -1 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Float to String with Limited Decimals in Nushell\nDESCRIPTION: Shows how to convert a floating-point number to a string with precision limited to two decimal places.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 1.734 | into string --decimals 2\n1.73\n```\n\n----------------------------------------\n\nTITLE: Boolean Operations in Nushell\nDESCRIPTION: Demonstrates boolean operations and comparisons in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nlet mybool: bool = (2 > 1)\n$mybool\n# => true\nlet mybool: bool = ($env.HOME | path exists)\n$mybool\n# => true\n```\n\n----------------------------------------\n\nTITLE: Converting Simple YAML to Table in Nushell\nDESCRIPTION: Example of converting a simple YAML key-value pair to a Nushell table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_yml.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'a: 1' | from yaml\n╭───┬───╮\n│ a │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Executing Nushell Commands for File Management\nDESCRIPTION: A collection of Nushell commands for file operations including copying, moving, and deleting files. These commands serve as direct replacements for CMD.EXE equivalents like COPY, MOVE, DEL, and REN.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_cmd.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ncp <source> <destination>\n```\n\nLANGUAGE: nushell\nCODE:\n```\n[<file1>, <file2>] | each { open --raw } | str join | save --raw <destination>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nrm <file>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nmv\n```\n\n----------------------------------------\n\nTITLE: Creating ls -l Alias Example\nDESCRIPTION: Demonstrates how to create an alias 'll' for the 'ls -l' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/alias.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> alias ll = ls -l\n\n```\n\n----------------------------------------\n\nTITLE: Exploring JSON File and Saving Subset in Nushell\nDESCRIPTION: Demonstrates exploring a JSON file, then saving the last visited sub-structure to a new file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/explore.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> open file.json | explore --peek | to json | save part.json\n```\n\n----------------------------------------\n\nTITLE: Script Line Processing Example\nDESCRIPTION: Shows how Nushell processes multiple lines of commands in a script\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\na\nb; c | d\n```\n\n----------------------------------------\n\nTITLE: Grouping by Multiple Columns with Table Output in Nushell\nDESCRIPTION: Shows how to group by multiple columns ('lang' and 'year') and output the result as a table using the --to-table flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> [\n        [name, lang, year];\n        [andres, rb, \"2019\"],\n        [jt, rs, \"2019\"],\n        [storm, rs, \"2021\"]\n    ]\n    | group-by lang year --to-table\n```\n\n----------------------------------------\n\nTITLE: File Renaming with Zip\nDESCRIPTION: Practical example showing how to rename .ogg files using zip and mv commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/zip.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> glob *.ogg | zip ['bang.ogg', 'fanfare.ogg', 'laser.ogg'] | each {|| mv $in.0 $in.1 }\n```\n\n----------------------------------------\n\nTITLE: Format DateTime Using Default RFC 2822 Format\nDESCRIPTION: Example of formatting a datetime value using the default RFC 2822 format after converting from string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_date.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '2021-10-22 20:00:12 +01:00' | into datetime | format date\nFri, 22 Oct 2021 20:00:12 +0100\n```\n\n----------------------------------------\n\nTITLE: Performing Multiple Aggregations After Group-by in Polars\nDESCRIPTION: Demonstrates how to use the 'polars agg' command to perform multiple aggregations (min, max, sum) on grouped data in a Polars LazyFrame. The example shows grouping by column 'a' and calculating statistics on column 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_agg.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [1 4] [2 6] [2 4]]\n                | polars into-lazy\n                | polars group-by a\n                | polars agg [\n                    (polars col b | polars min | polars as \"b_min\")\n                    (polars col b | polars max | polars as \"b_max\")\n                    (polars col b | polars sum | polars as \"b_sum\")\n                 ]\n                | polars collect\n                | polars sort-by a\n╭───┬───┬───────┬───────┬───────╮\n│ # │ a │ b_min │ b_max │ b_sum │\n├───┼───┼───────┼───────┼───────┤\n│ 0 │ 1 │     2 │     4 │     6 │\n│ 1 │ 2 │     4 │     6 │    10 │\n╰───┴───┴───────┴───────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Environment Variables in Nushell\nDESCRIPTION: This snippet demonstrates how to display the current environment variables available in Nushell using the `$nu.env` variable. It outputs a table showing the environment variables and their corresponding values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/environment.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\necho $nu.env\n# => ──────────────────────────┬──────────────────────────────\n# =>  COLORTERM                │ truecolor\n# =>  DBUS_SESSION_BUS_ADDRESS │ unix:path=/run/user/1000/bus\n# =>  DESKTOP_SESSION          │ gnome\n# =>  DISPLAY                  │ :1\n```\n\n----------------------------------------\n\nTITLE: Saving Program's stderr to Separate File in Nushell\nDESCRIPTION: Shows how to save a running program's stderr output to a separate file named 'bar.txt' while saving the main output to 'foo.txt'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/save.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\ndo -i {} | save foo.txt --stderr bar.txt\n```\n\n----------------------------------------\n\nTITLE: Multiline Command - Nushell\nDESCRIPTION: Demonstrates how to write multiline commands in Nushell using parentheses.  The newline characters are inserted within the parentheses, which allows the command to be split across multiple lines for readability.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n```nu\n(\n  tar\n  -cvz\n  -f archive.tgz\n  --exclude='*.temp'\n  --directory=../project/\n  ./\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Loading CSV File with Polars in Nushell\nDESCRIPTION: Opens a NYC Taxi dataset CSV file using Polars and displays the dataframe shape showing total rows and columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/polars_v_pandas_v_nushell.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet df = polars open NYCTaxi.csv\n\n$df | polars shape\n```\n\n----------------------------------------\n\nTITLE: Computing Standard Deviation of a Number List in Nushell\nDESCRIPTION: This example demonstrates how to calculate the standard deviation of a list of numbers using the 'math stddev' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_stddev.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4 5] | math stddev\n1.4142135623730951\n```\n\n----------------------------------------\n\nTITLE: Opening Cargo.lock File - Nushell\nDESCRIPTION: This snippet demonstrates how to open a Cargo.lock file, which is a TOML file, even when the file extension does not indicate its format. This is a good example of Nushell's flexibility with file types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nopen Cargo.lock\n# => # This file is automatically @generated by Cargo.\n# => # It is not intended for manual editing.\n# => [[package]]\n# => name = \"adhoc_derive\"\n# => version = \"0.1.2\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Empty Strings in Nushell using 'default' Command\nDESCRIPTION: Shows how to use the 'default' command with the '-e' flag to replace empty strings in a specific column of a list of records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/default.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a:1 b:2} {a:'' b:1}] | default -e 'N/A' a\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Nushell\nDESCRIPTION: Lists all files in the current directory using ls command with type filtering. Shows file details including name, type, size and modification time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/system.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nls | where type == file\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Datetime\nDESCRIPTION: Converting date strings to datetime objects for better sorting and manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime}\n```\n\n----------------------------------------\n\nTITLE: Extracting Year from Datetime in Polars Dataframe\nDESCRIPTION: Demonstrates how to extract the year component from datetime values in a Polars dataframe. The example creates a dataframe with two identical datetime values and then extracts the year (2020) from each.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-year.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> let dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\n    let df = ([$dt $dt] | polars into-df);\n    $df | polars get-year\n╭───┬──────╮\n│ # │  0   │\n├───┼──────┤\n│ 0 │ 2020 │\n│ 1 │ 2020 │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Generating Next 10 Days in YYYY-MM-DD Format\nDESCRIPTION: This example demonstrates how to use the 'seq date' command to generate a list of the next 10 days in the YYYY-MM-DD format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --days 10\n```\n\n----------------------------------------\n\nTITLE: HTTP POST with Custom Header\nDESCRIPTION: Posts to the specified URL, https://www.example.com, with a custom header. The `--headers` flag takes a list of key-value pairs to set custom headers for the HTTP request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_post.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> http post --headers [my-header-key my-header-value] https://www.example.com\n\n```\n\n----------------------------------------\n\nTITLE: Listing Files by Size in Nushell\nDESCRIPTION: Demonstrates how to list all files in the current directory with sizes greater than 2kb using the 'where' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nls | where size > 2kb\n```\n\n----------------------------------------\n\nTITLE: Counting Items in a List using Length Command in Nushell\nDESCRIPTION: Demonstrates how to use the 'length' command to count the number of items in a list. The example shows a list of five numbers being counted.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/length.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4 5] | length\n5\n```\n\n----------------------------------------\n\nTITLE: Reduce Command Example in Nushell\nDESCRIPTION: Shows using reduce command to find the longest string in a list without mutable variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n[one, two, three, four, five, six] | reduce {|current_item, max|\n  if ($current_item | str length) > ($max | str length) {\n      $current_item\n  } else {\n      $max\n  }\n}\n\nthree\n```\n\n----------------------------------------\n\nTITLE: Using $before and $after in String Hooks\nDESCRIPTION: This example shows the usage of `$before` and `$after` variables within string defined hooks. These variables capture the old and new values of environment variables, respectively, and can be used to perform actions based on changes in the environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks {\n    env_change: {\n        PWD: {\n            code: 'print $\\\"changing directory from ($before) to ($after)\\\"'\n        }\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Constructing and Using Globs in Nushell\nDESCRIPTION: This code snippet provides methods to define and use glob patterns programmatically in Nushell. Techniques include converting strings to globs using `into glob`, leveraging the spread operator with `glob`, and enforcing `glob` types with annotations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/moving_around.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n# Find files whose name includes the current month in the form YYYY-mm\nlet current_month = (date now | format date '%Y-%m')\nlet glob_pattern = ($\"*($current_month)*\" | into glob)\nls $glob_pattern\n```\n\nLANGUAGE: nu\nCODE:\n```\n# Find files whose name includes the current month in the form YYYY-mm\nlet current_month = (date now | format date '%Y-%m')\nls ...(glob $\"*($current_month)*\")\n```\n\nLANGUAGE: nu\nCODE:\n```\n# Find files whose name includes the current month in the form YYYY-mm\nlet current_month = (date now | format date '%Y-%m')\nlet glob_pattern: glob = ($\"*($current_month)*\")\nls $glob_pattern\n```\n\n----------------------------------------\n\nTITLE: Example: Filling NULL Values with Zero in Nushell\nDESCRIPTION: Example demonstrating how to fill NULL values with zero in a dataframe. It creates a sequence, converts it to a dataframe, shifts it by 2 positions (creating NULL values), and then fills those NULLs with zeros.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_fill-null.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 2 3 3] | polars into-df | polars shift 2 | polars fill-null 0\n```\n\n----------------------------------------\n\nTITLE: Slicing a Specific Range of Bytes in Nushell\nDESCRIPTION: This example shows how to extract bytes from index 3 to 5 (inclusive) from a binary value. The output displays the extracted bytes in a hexadecimal format along with additional byte information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[33 44 55 10 01 13] | bytes at 3..5\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   10 01 13                                             •••\n\n```\n\n----------------------------------------\n\nTITLE: Defining with-env Command Signature in Nushell\nDESCRIPTION: Command signature showing the basic syntax for the with-env command that takes environment variables and a code block as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/with-env.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> with-env {flags} (variable) (block)\n```\n\n----------------------------------------\n\nTITLE: Calculating with Durations in Nushell\nDESCRIPTION: Demonstrates how to perform calculations with durations and datetime values in Nushell. It shows adding a day to the current date and calculating the difference between two dates.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/duration.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> (date now) + 1day\nTue, 13 Aug 2024 11:49:27 -0400 (in a day)\n> 2024-08-12T11:50:30-04:00 - 2019-05-10T09:59:12-07:00\n274wk 2day 22hr 51min 18sec\n```\n\n----------------------------------------\n\nTITLE: Comparing Raw and Rendered List Output in Nushell\nDESCRIPTION: This snippet compares the output of a raw list with its rendered form using the 'table' command in Nushell. It shows that the visual output is the same for both cases.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_23\n\nLANGUAGE: nu\nCODE:\n```\n[ Nagasaki Ghent Cambridge Izmir Graz Lubango ]\n# => ╭───┬───────────╮\n# => │ 0 │ Nagasaki  │\n# => │ 1 │ Ghent     │\n# => │ 2 │ Cambridge │\n# => │ 3 │ Izmir     │\n# => │ 4 │ Graz      │\n# => │ 5 │ Lubango   │\n# => ╰───┴───────────╯\n[ Nagasaki Ghent Cambridge Izmir Graz Lubango ] | table\n# => ╭───┬───────────╮\n# => │ 0 │ Nagasaki  │\n# => │ 1 │ Ghent     │\n# => │ 2 │ Cambridge │\n# => │ 3 │ Izmir     │\n# => │ 4 │ Graz      │\n# => │ 5 │ Lubango   │\n# => ╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple File Existence in Nushell\nDESCRIPTION: Example demonstrating how to check existence of multiple files using a list input, returning a table of boolean values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_exists.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [ /home/joe/todo.txt, /home/doe/todo.txt ] | path exists\n╭───┬───────╮\n│ 0 │ false │\n│ 1 │ false │\n╰───┴───────╯\n\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Values with Nushell is-empty\nDESCRIPTION: This snippet demonstrates how to use the `is-empty` command in Nushell to determine if a string is empty. No specific dependencies are required beyond having Nushell installed. The input is a string, and the output is a boolean value indicating emptiness.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-empty.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '' | is-empty\ntrue\n```\n\n----------------------------------------\n\nTITLE: Create complex custom error in Nushell\nDESCRIPTION: This snippet demonstrates how to create a more complex custom error message using the `error make` command in Nushell. It includes a message, a label with optional text and span information, and optional help text. The span requires both start and end if present.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/error_make.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> error make {\n        msg: \"my custom error message\"\n        label: {\n            text: \"my custom label text\"  # not mandatory unless $.label exists\n            # optional\n            span: {\n                # if $.label.span exists, both start and end must be present\n                start: 123\n                end: 456\n            }\n        }\n        help: \"A help string, suggesting a fix to the user\"  # optional\n    }\n\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Immutable Variables in Nushell\nDESCRIPTION: Demonstrates creating and using immutable variables with the 'let' keyword, including error handling when attempting modification and variable shadowing behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet val = 42\n$val\n# => 42\n$val = 100\n# => Error: nu::shell::assignment_requires_mutable_variable\n# => \n# =>   × Assignment to an immutable variable.\n# =>    ╭─[entry #10:1:1]\n# =>  1 │ $val = 100\n# =>    · ──┬─\n# =>    ·   ╰── needs to be a mutable variable\n# =>    ╰────\n```\n\n----------------------------------------\n\nTITLE: Killing Highest Memory Process in Nushell\nDESCRIPTION: Example showing how to kill the process using the most memory by combining ps command with sort and kill.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/kill.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ps | sort-by mem | last | kill $in.pid\n```\n\n----------------------------------------\n\nTITLE: Filtering directory contents by size in Nushell\nDESCRIPTION: This snippet filters the output of the `ls` command to display only files larger than 1 kilobyte using the `where` command. It further demonstrates Nushell's ability to chain commands and filter structured data based on specified conditions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\tls | where size > 1kb\n\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Code Execution in Nushell\nDESCRIPTION: Shows the usage of the new 'benchmark' command to measure the execution time of a code block.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> benchmark { echo \"hello\" }\n```\n\n----------------------------------------\n\nTITLE: Using the `zip` Command with Closures in Nushell\nDESCRIPTION: The `zip` command can now accept closures, allowing its output to be a stream without requiring completion of the input before access. This enhances usability and efficiency in stream processing. An example demonstrates its improved functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-03-05-nushell_0_91_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nseq 1 10 | zip { 1.. | each { $in * 2 } }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n# Example of an infinite stream scenario that may not complete\nseq 1 10 | zip (1.. | each { $in * 2 })\n```\n\nLANGUAGE: nushell\nCODE:\n```\n# Improved working example\n1.. | each { $in * 2 } | zip (seq 1 10)\n```\n\n----------------------------------------\n\nTITLE: Chunking Data Based on Positive/Negative Values in Nushell\nDESCRIPTION: This example demonstrates how to use the 'chunk-by' command to group a list of numbers into sub-lists based on whether they are greater than or equal to zero.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/chunk-by.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> [1, 3, -2, -2, 0, 1, 2] | chunk-by {|it| $it >= 0 }\n```\n\n----------------------------------------\n\nTITLE: Using Optional Cell Paths in Nushell\nDESCRIPTION: The '?' operator in cell paths suppresses errors due to missing data, providing a more powerful alternative to the '-i'/'--ignore-errors' flag. This operator can be used in conjunction with 'get', 'select', or 'where' commands, and ensures null is returned rather than an error when data is absent.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-04-04-nushell_0_78.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n{ foo: 123 }.bar?\n```\n\nLANGUAGE: nu\nCODE:\n```\n{ foo: 123 } | get bar?\n```\n\nLANGUAGE: nu\nCODE:\n```\n{ foo: 123 }.bar?.baz\n```\n\nLANGUAGE: nu\nCODE:\n```\n{ foo: 123 }.bar?.baz?\n```\n\nLANGUAGE: nu\nCODE:\n```\n[1, 2, 3].8?\n```\n\nLANGUAGE: nu\nCODE:\n```\n[{foo: 123}, {}].foo?\n```\n\nLANGUAGE: nu\nCODE:\n```\n[{foo: 123}, {}] | where foo? == 123\n```\n\n----------------------------------------\n\nTITLE: Output of Record Iteration in Nushell\nDESCRIPTION: This shows the result of the previous command. First, it displays the transposed record structure with key-value pairs, then it shows the formatted output strings created by the 'each' command for each field in the record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/filters/each-par-each.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n╭─────────────┬──────────────────────────────────╮\n│ description │ list<any>                        │\n├──────────┬──┴──────────────────────────────────┤\n│ key      │ value                               │\n├──────────┼─────────────────────────────────────┤\n│ name     │ CNAME                               │\n│ type     │ file                                │\n│ size     │ 15                                  │\n│ modified │ 2024-01-31T10:21:46.068408713-05:00 │\n╰──────────┴─────────────────────────────────────╯\n\n╭───┬──────────────────────────────────────────────────────────────────────────────────────╮\n│ 0 │ The value of the \"name field is \"CNAME\"                                              │\n│ 1 │ The value of the \"type field is \"file\"                                               │\n│ 2 │ The value of the \"size field is \"15 B\"                                               │\n│ 3 │ The value of the \"modified field is \"Wed, 31 Jan 2024 10:21:46 -0500 (3 months ago)\" │\n╰───┴──────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `str stats`, `str length`, `length` to Rust's `len`\nDESCRIPTION: Shows the equivalent of Nushell's `str stats`, `str length`, and `length` commands in Rust using the `len` function. This function returns the length of a string, list, or other iterable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_38\n\nLANGUAGE: Rust\nCODE:\n```\n\"len\"\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Datetime Using Basic Format in Nushell\nDESCRIPTION: Converts string values in a dataframe to datetime objects using a specified format string. This example uses the standard year-month-day hour:minute:second format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_as-datetime.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[\"2021-12-30 00:00:00\" \"2021-12-31 00:00:00\"] | polars into-df | polars as-datetime \"%Y-%m-%d %H:%M:%S\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable Conversions\nDESCRIPTION: This example shows how to set up conversion functions for environment variables, allowing them to be stored and retrieved in specific formats, particularly converting between strings and lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n$env.ENV_CONVERSIONS = {\n    FOO : {\n        from_string: { |s| $s | split row '-' }\n        to_string: { |v| $v | str join '-' }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Column Values with 'get' Command in Nushell\nDESCRIPTION: Using the 'get' command to extract only the values from the 'name' column, returning them as a list rather than a table with column headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nls | get name\n# => ---+---------------\n# =>  # | value\n# => ---+---------------\n# =>  0 | add.rs\n# =>  1 | sum.rs\n# =>  2 | inc.rs\n# =>  3 | str.rs\n# =>  4 | skip.rs\n# =>  5 | textview.rs\n# =>  6 | binaryview.rs\n# =>  7 | edit.rs\n# =>  8 | tree.rs\n# =>  9 | sys.rs\n# => ---+---------------\n```\n\n----------------------------------------\n\nTITLE: Export Command Basic Signature\nDESCRIPTION: The basic signature format for the export command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> export {flags} \n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns with Custom Index in Nushell\nDESCRIPTION: This snippet shows how to select only the custom index column and name column from a table with a custom index.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\nls | each { insert index { 1000 }} | first 5 | select index name\n```\n\n----------------------------------------\n\nTITLE: Defining Constant with Parse-Time Evaluation in Nushell\nDESCRIPTION: This code snippet demonstrates defining a constant `f` in Nushell using the `const` keyword.  The value of `f` is determined by evaluating a pipeline that gets the default config directory, takes the dirname of the path, and assigns the result to `f` during parse time. This allows the constant to be used in other compile-time contexts. Only a limited set of commands are supported for parse time evaluation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nconst f = ($nu.default-config-dir | path dirname)\n```\n\n----------------------------------------\n\nTITLE: Viewing Metadata Tags in Nu Shell\nDESCRIPTION: This snippet uses the Nu Shell 'open' command to view metadata, specifically the tags associated with a file. By executing 'metadata (open Cargo.toml)', it shows the structure of tags returned. This requires the 'Cargo.toml' file to be present and readable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/metadata.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nmetadata (open Cargo.toml)\n# => ╭──────┬───────────────────╮\n# => │ span │ {record 2 fields} │\n# => ╰──────┴───────────────────╯\n\n```\n\n----------------------------------------\n\nTITLE: AST Flattened Output Example\nDESCRIPTION: Shows the flattened AST output format for better readability.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> ast \"'hello'\" --flatten\n```\n\n----------------------------------------\n\nTITLE: Defining Nushell Banner Command Signature\nDESCRIPTION: Specifies the signature for the 'banner' command in Nushell. The command can be run with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/banner.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> banner {flags}\n```\n\n----------------------------------------\n\nTITLE: Defining a Nushell Module with Functions\nDESCRIPTION: This snippet demonstrates how to define a Nushell module named `greetings.nu` with several exported functions. The functions `hello` and `hi` take string arguments and return a greeting string.  The `main` function is defined to return a specific string when the module itself is called. Dependencies: Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/cheat_sheet.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n# greetings.nu\nexport def hello [name: string] {\n    $\"hello ($name)!\"\n}\n\nexport def hi [where: string] {\n    $\"hi ($where)!\"\n}\n\nexport def main [] {\n    \"greetings and salutations!\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The basic signature for the 'du' command showing its syntax with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/du.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> du {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Using Buffer to Optimize Performance in Interleaving\nDESCRIPTION: In this snippet, the 'interleave' command is paired with a buffer size parameter, enhancing the performance of handling high-volume data streams. This demonstrates how to balance memory usage with processing speed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/interleave.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> seq 1 20000 | interleave --buffer-size 16 { seq 1 20000 } | math sum\n\n```\n\n----------------------------------------\n\nTITLE: Converting Group-by Output to Table Format in Nushell\nDESCRIPTION: Demonstrates using the --to-table flag to output grouped data as a table with 'group' and 'items' columns instead of the default record format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> ['1' '3' '1' '3' '2' '1' '1'] | group-by --to-table\n```\n\n----------------------------------------\n\nTITLE: Outputting Elements Until 'stop' Using 'each while' in Nushell\nDESCRIPTION: Shows how to use 'each while' to output elements from a list until encountering the 'stop' value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each_while.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 stop 3 4] | each while {|e| if $e != 'stop' { $\"Output: ($e)\" } }\n╭───┬───────────╮\n│ 0 │ Output: 1 │\n│ 1 │ Output: 2 │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Executing Polars Slice Command in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'polars slice' command to create a new dataframe from a slice of rows. It takes an offset and size as parameters to determine the slice of rows to include in the new dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_slice.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars slice 0 1\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations Between Polars Series in Nushell\nDESCRIPTION: Illustrates how to perform arithmetic operations between two Polars Series of the same data type in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_22\n\nLANGUAGE: nu\nCODE:\n```\n$df_5 - $df_7\n```\n\n----------------------------------------\n\nTITLE: Encoding Binary Value with Base32hex in Nushell\nDESCRIPTION: This example demonstrates how to encode a binary value using the base32hex encoding in Nushell. It takes a hexadecimal input and outputs the encoded string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base32hex.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n0x[57 6E AD] | encode base32hex\n```\n\n----------------------------------------\n\nTITLE: Getting current date and time with date in Nushell\nDESCRIPTION: This snippet demonstrates the `date now` command in Nushell, which retrieves information about the current date and time. It returns this information in a structured format that can be further processed by other Nushell commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n\tdate now\n\n```\n\n----------------------------------------\n\nTITLE: Creating Parse-Time Constants in Nushell\nDESCRIPTION: Demonstrates the syntax for creating parse-time constants in Nushell. The command takes a constant name and an initial value, separated by an equals sign.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/const.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nconst {flags} (const_name) (initial_value)\n```\n\n----------------------------------------\n\nTITLE: Exporting and Using Constants Between Modules in Nushell\nDESCRIPTION: Demonstrates how to export a constant from one module and use it in another module through re-export.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_const.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export const foo = 3; }\n    module eggs { export use spam foo }\n    use eggs foo\n    foo\n\n3\n```\n\n----------------------------------------\n\nTITLE: Conditional Assignment in Nushell\nDESCRIPTION: Illustrates assigning a value to a variable based on a conditional expression.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/let.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> let x = if false { -1 } else { 1 }\n```\n\n----------------------------------------\n\nTITLE: Computing Column-wise Median with Polars in Nushell\nDESCRIPTION: Shows how to calculate median values for all columns in a dataframe. The example creates a dataframe and computes the median for columns 'a' and 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_median.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars median | polars collect\n```\n\n----------------------------------------\n\nTITLE: Fetching Rust Language Feed\nDESCRIPTION: This shell command utilizes `http get` to fetch the content from the specified URL, which is likely a Rust language feed (e.g., RSS or JSON). Nu retrieves the data from the URL and displays it within the Nu shell. The data needs to be parsed further if it is in a format like JSON or XML.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/loading_data.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnu -c 'http get https://www.rust-lang.org/feed.xml'\n```\n\n----------------------------------------\n\nTITLE: Generating Sequence with Decimal Increment in Nushell\nDESCRIPTION: Shows how to use 'seq' to generate a sequence from 1.0 to 2.0 with 0.1 increments, displaying the output as a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> seq 1.0 0.1 2.0\n╭────┬──────╮\n│  0 │ 1.00 │\n│  1 │ 1.10 │\n│  2 │ 1.20 │\n│  3 │ 1.30 │\n│  4 │ 1.40 │\n│  5 │ 1.50 │\n│  6 │ 1.60 │\n│  7 │ 1.70 │\n│  8 │ 1.80 │\n│  9 │ 1.90 │\n│ 10 │ 2.00 │\n╰────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Stream Redirection in Nushell\nDESCRIPTION: Demonstrates various ways to redirect output streams including stdout, stderr, and combined streams to files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ncat foo.txt out> bar.txt\n```\n\nLANGUAGE: nushell\nCODE:\n```\ncat missingfilename.txt err> my_error.txt\n```\n\nLANGUAGE: nushell\nCODE:\n```\ngit status out+err> git_status.txt\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Integer in Nushell\nDESCRIPTION: Demonstrates truncating a floating-point number to an integer by removing the decimal portion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n5.9 | into int\n```\n\n----------------------------------------\n\nTITLE: Traditional Function Definition in Nushell Grammar\nDESCRIPTION: Example of experimental function definition syntax in Nushell's new grammar system, showing traditional-style function declaration with type annotations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-27-nushell-0_69.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ndef foo(x: int) { ... }\n```\n\n----------------------------------------\n\nTITLE: Updating List Value at Specific Index in Nushell\nDESCRIPTION: This snippet demonstrates how to update an existing value at a specific index in a list using the 'upsert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2 3] | upsert 0 2\n```\n\n----------------------------------------\n\nTITLE: Parallel String Processing with Sorting\nDESCRIPTION: Example showing parallel string processing with subsequent sorting of results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/par-each.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [foo bar baz] | par-each {|e| $e + '!' } | sort\n```\n\n----------------------------------------\n\nTITLE: Checking Binary Data Ending with Multiple Bytes in Nushell\nDESCRIPTION: Example demonstrating how to check if binary data ends with a longer pattern (0x[FF AA AA]), which returns true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_ends-with.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AA] | bytes ends-with 0x[FF AA AA]\ntrue\n```\n\n----------------------------------------\n\nTITLE: Accessing a Table Row in Nushell\nDESCRIPTION: This snippet shows how to access a specific row from a table. The table contains weather data, and this example retrieves the data for the second day.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet data = [\n    [date                        temps                                   condition      ];\n    [2022-02-01T14:30:00+05:00,  [38.24, 38.50, 37.99, 37.98, 39.10],   'sunny'       ],\n    [2022-02-02T14:30:00+05:00,  [35.24, 35.94, 34.91, 35.24, 36.65],   'sunny'       ],\n    [2022-02-03T14:30:00+05:00,  [35.17, 36.67, 34.42, 35.76, 36.52],   'cloudy'      ],\n    [2022-02-04T14:30:00+05:00,  [39.24, 40.94, 39.21, 38.99, 38.80],   'rain'        ]\n]\n$data.1\n# => ╭───────────┬───────────────╮\n# => │ date      │ 2 years ago   │\n# => │           │ ╭───┬───────╮ │\n# => │ temps     │ │ 0 │ 35.24 │ │\n# => │           │ │ 1 │ 35.94 │ │\n# => │           │ │ 2 │ 34.91 │ │\n# => │           │ │ 3 │ 35.24 │ │\n# => │           │ │ 4 │ 36.65 │ │\n# => │           │ ╰───┴───────╯ │\n# => │ condition │ sunny         │\n# => ╰───────────┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Selecting Field from Record\nDESCRIPTION: Shows how to select a single field 'a' from a record structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/select.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> {a: a b: b} | select a\n╭───┬───╮\n│ a │ a │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Input/Output Types in Nushell\nDESCRIPTION: Demonstrates how to use the 'help' command to view input and output types for Nushell commands, using 'first' as an example.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\nhelp first\n```\n\nLANGUAGE: nushell\nCODE:\n```\n[a b c] | first\n```\n\nLANGUAGE: nushell\nCODE:\n```\n1..4 | first\n```\n\n----------------------------------------\n\nTITLE: Matching Against List in Nushell\nDESCRIPTION: Demonstrates matching against a list and performing operations on its elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/match.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nmatch [1, 2, 3] { [$a, $b, $c] => { $a + $b + $c }, _ => 0 }\n```\n\n----------------------------------------\n\nTITLE: Nushell create submodule with `export use`\nDESCRIPTION: This snippet shows how to (re)export the _definitions_ from other modules using `export use`. With this approach, the commands and other definitions from `increment` and `range-into-list` become _members_ of the `my-utils` module itself.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nexport use ./increment.nu\nexport use ./range-into-list.nu\n```\n\n----------------------------------------\n\nTITLE: Filtering Table Rows in Nushell\nDESCRIPTION: Demonstrates how to filter rows of a table according to a condition using the 'where' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[{a: 1} {a: 2}] | where a > 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Hooks in Nushell\nDESCRIPTION: This snippet demonstrates how to define basic hooks in Nushell to customize behaviors like pre-prompt, pre-execution, and environment change triggers. Ensure that the hooks are added to the configuration in the REPL mode and manage environment changes efficiently.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    # ...other config...\n\n    hooks: {\n        pre_prompt: { print \"pre prompt hook\" }\n        pre_execution: { print \"pre exec hook\" }\n        env_change: {\n            PWD: {|before, after| print $\"changing directory from ($before) to ($after)\" }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Max Example\nDESCRIPTION: Shows how to compute rolling maximum values with window size 2 on a numeric series, converting the data to a dataframe and removing null values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_rolling.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4 5] | polars into-df | polars rolling max 2 | polars drop-nulls\n╭───┬───────────────╮\n│ # │ 0_rolling_max │\n├───┼───────────────┤\n│ 0 │             2 │\n│ 1 │             3 │\n│ 2 │             4 │\n│ 3 │             5 │\n╰───┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Inserting Values into Lists in Nushell\nDESCRIPTION: Shows how to insert a value at a specific position in a list using the insert command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[1, 2, 3, 4] | insert 2 10\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in NuShell\nDESCRIPTION: This snippet demonstrates how to set an environment variable in NuShell. The example sets the `FOO` environment variable to the value `bar`. This is analogous to exporting environment variables in other shells.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map.md#2025-04-19_snippet_0\n\nLANGUAGE: NuShell\nCODE:\n```\n\"$env.FOO = \\\"bar\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Skipping Rows in Table Results in Nushell\nDESCRIPTION: This snippet shows how to sort files by size, select the first 5, then skip the first 2 results using the sort-by, first, and skip commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nls | sort-by size | first 5 | skip 2\n```\n\n----------------------------------------\n\nTITLE: Spreading arguments to a Nushell command\nDESCRIPTION: This code demonstrates how to use the spread operator (`...`) to pass arguments to a Nushell command. It defines a list `x` and then spreads its elements, along with other individual arguments, to the `foo` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-01-09-nushell_0_89_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n```nushell\n> let x = [foo bar baz]\n> foo ...[1 2] ...$x\n[1, 2, foo, bar, baz]\n```\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace When Parsing TSV Data\nDESCRIPTION: Demonstrates removing all unnecessary whitespaces from both headers and field values when parsing TSV data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_tsv.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2' | save tsv-data | open tsv-data | from tsv --trim all\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Record Values in Nushell\nDESCRIPTION: Demonstrates updating an existing value in a record using the update command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n{ \"apples\": 543, \"bananas\": 411, \"oranges\": 0 }\n| update oranges { 100 }\n```\n\n----------------------------------------\n\nTITLE: Plugin Use Command Signature in Nushell\nDESCRIPTION: The signature format for the 'plugin use' command showing how to invoke it with optional flags and required parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_use.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> plugin use {flags} (name)\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents in Nushell\nDESCRIPTION: This code snippet demonstrates the use of the `ls` command in Nushell to list directory contents. It includes usage examples with and without glob patterns. The `ls` command supports wildcard patterns such as `*` and `**`, allowing for flexible file listing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/moving_around.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls\n```\n\nLANGUAGE: nu\nCODE:\n```\nls *.md\n# => ╭───┬────────────────────┬──────┬──────────┬──────────────╮\n# => │ # │        name        │ type │   size   │   modified   │\n# => ├───┼────────────────────┼──────┼──────────┼──────────────┤\n# => │ 0 │ CODE_OF_CONDUCT.md │ file │  3.4 KiB │ 9 months ago │\n# => │ 1 │ CONTRIBUTING.md    │ file │ 11.0 KiB │ 5 months ago │\n# => │ 2 │ README.md          │ file │ 12.0 KiB │ 6 days ago   │\n# => │ 3 │ SECURITY.md        │ file │  2.6 KiB │ 2 months ago │\n# => ╰───┴────────────────────┴──────┴──────────┴──────────────╯\n```\n\nLANGUAGE: nu\nCODE:\n```\nls **/*.md\n# => ╭───┬───────────────────────────────┬──────┬──────────┬──────────────╮\n# => │ # │             name              │ type │   size   │   modified   │\n# => ├───┼───────────────────────────────┼──────┼──────────┼──────────────┤\n# => │ 0 │ CODE_OF_CONDUCT.md            │ file │  3.4 KiB │ 5 months ago │\n# => │ 1 │ CONTRIBUTING.md               │ file │ 11.0 KiB │ a month ago  │\n# => │ 2 │ README.md                     │ file │ 12.0 KiB │ a month ago  │\n# => │ 3 │ SECURITY.md                   │ file │  2.6 KiB │ 5 hours ago  │\n# => │ 4 │ benches/README.md             │ file │    249 B │ 2 months ago │\n# => │ 5 │ crates/README.md              │ file │    795 B │ 5 months ago │\n# => │ 6 │ crates/nu-cli/README.md       │ file │    388 B │ 5 hours ago  │\n# => │ 7 │ crates/nu-cmd-base/README.md  │ file │    262 B │ 5 hours ago  │\n# => │ 8 │ crates/nu-cmd-extra/README.md │ file │    669 B │ 2 months ago │\n# => │ 9 │ crates/nu-cmd-lang/README.md  │ file │  1.5 KiB │ a month ago  │\n# => ╰───┴───────────────────────────────┴──────┴──────────┴──────────────╯\n```\n\n----------------------------------------\n\nTITLE: Convert EML to Record with Preview Body in Nushell\nDESCRIPTION: This example demonstrates how to convert EML structured data into a Nushell record using the `from eml` command and preview a specified number of bytes of the body.  The `-b` flag limits the body output. It takes an EML formatted string as input and outputs a record containing the Subject, From, To, and Body fields. The From and To fields are further structured into Name and Address sub-fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_eml.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\">'From: test@email.com\nSubject: Welcome\nTo: someone@somewhere.com\n\nTest' | from eml -b 1\n╭─────────┬─────────────────────────────────────╮\n│ Subject │ Welcome                             │\n│         │ ╭─────────┬────────────────╮        │\n│ From    │ │ Name    │                │        │\n│         │ │ Address │ test@email.com │        │\n│         │ ╰─────────┴────────────────╯        │\n│         │ ╭─────────┬───────────────────────╮ │\n│ To      │ │ Name    │                       │ │\n│         │ │ Address │ someone@somewhere.com │ │\n│         │ ╰─────────┴───────────────────────╯ │\n│ Body    │ T                                   │\n╰─────────┴─────────────────────────────────────╯\"\n```\n\n----------------------------------------\n\nTITLE: Using Series as Indices for Polars DataFrame in Nushell\nDESCRIPTION: Shows how to use a Polars Series as a list of indices to filter rows from a DataFrame using the 'polars take' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_32\n\nLANGUAGE: nu\nCODE:\n```\nlet indices_0 = [1 4 6] | polars into-df\n$df_1 | polars take $indices_0\n```\n\n----------------------------------------\n\nTITLE: Aggregating Grouped Values with Nushell\nDESCRIPTION: Demonstrates how to group records by category and calculate the sum of values for each group in Nushell using group-by, update, and math sum.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\n'[{\"category\": \"A\", \"value\": 10}, {\"category\": \"B\", \"value\": 20}, {\"category\": \"A\", \"value\": 5}]'\n| from json\n| group-by --to-table category\n| update items { |row| $row.items.value | math sum }\n| rename category sum\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'move' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'move' command, showing its basic usage pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/move.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> move {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Searching for commands in Nushell\nDESCRIPTION: Example demonstrating how to search for a string in command names, descriptions, and search terms using the --find flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> help --find char\n```\n\n----------------------------------------\n\nTITLE: Spread Operator with Optional Parameters in Nushell\nDESCRIPTION: Shows how spread arguments interact with optional parameters, where spreading before an optional parameter causes it to be treated as omitted.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nfoo \"bar\" ...[1 2] \"not opt\" # The null means no argument was given for opt\n# => [false, bar, null, [1, 2, \"not opt\"]]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Environment Variable Conversions\nDESCRIPTION: Example of adding a custom environment variable conversion for XDG_DATA_DIRS. This defines how to convert the variable from a string to a Nushell list and back when interacting with external commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n$env.ENV_CONVERSIONS = $env.ENV_CONVERSIONS | merge {\n    \"XDG_DATA_DIRS\": {\n        from_string: {|s| $s | split row (char esep) | path expand --no-symlink }\n        to_string: {|v| $v | path expand --no-symlink | str join (char esep) }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Persistent Environment Changes with --env Flag\nDESCRIPTION: Shows how to create a command that can modify the environment and have those changes persist after the command completes by using the '--env' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_34\n\nLANGUAGE: nu\nCODE:\n```\ndef --env foo [] {\n    $env.FOO = 'After'\n}\n\n$env.FOO = \"Before\"\nfoo\n$env.FOO\n# => After\n```\n\n----------------------------------------\n\nTITLE: Peeking Table Cell Values with Explore in Nushell\nDESCRIPTION: This snippet shows using the `explore` command with the `--peek` option to view underlying data of a selected cell when exiting the table view. It presumes that `explore` is being invoked with piped data. The `--peek` flag prints the value of the last focused cell upon exiting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/explore.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$nu | explore --peek\n```\n\n----------------------------------------\n\nTITLE: Unfreezing Suspended Jobs in Nushell\nDESCRIPTION: Demonstrates how to bring frozen jobs back into the foreground using the job unfreeze command. By default, it unfreezes the most recently frozen job, but can also target a specific job by ID.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/background_jobs.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\njob unfreeze\n# process is brought back where it stopped\n```\n\n----------------------------------------\n\nTITLE: Converting a String to a Glob in Nushell\nDESCRIPTION: Example of creating a filesystem glob from a string using the 'into glob' command. The glob will match Rust source files in the src directory and its subdirectories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_58\n\nLANGUAGE: nu\nCODE:\n```\n\"src/**/*.rs\" | into glob\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Glob\": {\n    \"val\": \"src/**/*.rs\",\n    \"no_expand\": false,\n    \"span\": {\n      \"start\": 9400,\n      \"end\": 9413\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Parameters with Null Checking\nDESCRIPTION: Shows how to check if an optional parameter was provided by comparing it with null and providing alternate behavior when missing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [name?: string] {\n  if ($name == null) {\n    echo \"hello, I don't know your name!\"\n  } else {\n    echo \"hello \" $name | str join\n  }\n}\n\ngreet\n```\n\n----------------------------------------\n\nTITLE: Backing Up Existing Command using Alias\nDESCRIPTION: This code snippet demonstrates how to back up the existing command 'ls' by creating an alias 'core-ls' which retains the original command for use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nalias core-ls = ls    # This will create a new alias core-ls for ls\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Datetime Format in Nushell\nDESCRIPTION: This Nushell snippet demonstrates how to customize the default output format for dates and times in Nushell. It modifies the `datetime_format` in the `default_config.nu` file to have distinct formats for normal and table outputs. This requires editing the configuration file and setting the formats using appropriate datetime tokens.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-06-27-nushell_0_82.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n# from the `default_config.nu` file\ndatetime_format: {\n  normal: '%a, %d %b %Y %H:%M:%S %z'\n  table: '%m/%d/%y %I:%M:%S%p'\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for absence of a substring in Nushell\nDESCRIPTION: This example demonstrates a case where the substring is not found in the input string. The command returns false since 'banana' is not present in 'hello'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_contains.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n'hello' | str contains 'banana'\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `merge` to Kotlin's `map.extend`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `merge` command using Kotlin's `map.extend`. This shows how to merge maps in Kotlin, analogous to how `merge` works in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\n\"map.extend\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Object from Polars Plugin Cache in Nushell\nDESCRIPTION: This example demonstrates how to create a Dataframe, store it in the Polars plugin cache, and then retrieve it using the 'polars store-get' command. It uses the first key from the stored objects list to retrieve the Dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_store-get.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet df = ([[a b];[1 2] [3 4]] | polars into-df);\n    polars store-ls | get key | first | polars store-get $in\n```\n\n----------------------------------------\n\nTITLE: Listing Visible Files in Current Directory\nDESCRIPTION: Example of using the 'ls' command without any arguments to list visible files in the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ls\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Numeric Constant in Nushell\nDESCRIPTION: Shows how to create a new parse-time constant with a simple numeric value. In this example, a constant named 'x' is created with the value 10.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/const.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nconst x = 10\n```\n\n----------------------------------------\n\nTITLE: Using chunk-by Command in Nushell\nDESCRIPTION: The chunk-by command splits a list into chunks based on a closure. Adjacent elements that share the same closure result value will be chunked together.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n# chunk by a predicate\n[1 3 -2 -2 0 1 2] | chunk-by {|x| $x >= 0 }\n# [[1 3] [-2 -2] [0 1 2]]\n\n# chunk duplicate, adjacent elements together\n[a b b c a a] | chunk-by { $in }\n# [[a] [b b] [c] [a a]]\n```\n\n----------------------------------------\n\nTITLE: Polars Last Command Signature in Nushell\nDESCRIPTION: The command signature for the 'polars last' command that can be used to retrieve tail rows from a dataframe or create a last expression.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_last.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars last {flags} (rows)\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Column as String in Nushell using Polars\nDESCRIPTION: This example demonstrates how to create a dataframe with a date column, then use 'polars strftime' to format the date as a string in 'YYYY/MM/DD' format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_strftime.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet date = '2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC';\nlet df = ([[a]; [$date]] | polars into-df);\nlet df2 = $df | polars with-column [(polars col a | polars strftime \"%Y/%m/%d\" | polars as b)] | polars collect;\n$df2.b\n```\n\n----------------------------------------\n\nTITLE: Command with Nothing Input-Output Signature in Nushell\nDESCRIPTION: Shows how to define a command that neither requires pipeline input nor produces output, using the 'nothing' type for both input and output signatures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_31\n\nLANGUAGE: nu\nCODE:\n```\ndef xhide [module: string, members?]: nothing -> nothing { }\n```\n\n----------------------------------------\n\nTITLE: Nushell For Loop Command Signature\nDESCRIPTION: Basic syntax definition for the Nushell for loop command showing the required parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/for.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> for {flags} (var_name) (range) (block)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IntRange with Included Upper Bound in Nushell\nDESCRIPTION: Example of an integer range with an inclusive upper bound. The range starts at 7, has a step of 1, and includes 10 as the end value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_53\n\nLANGUAGE: nu\nCODE:\n```\n7..10\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Range\": {\n    \"val\": {\n      \"IntRange\": {\n        \"start\": 7,\n        \"step\": 1,\n        \"end\": { \"Included\": 10 }\n      }\n    },\n    \"span\": {\n      \"start\": 1380,\n      \"end\": 1385\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pipeline Redirection Error Handling in Nushell\nDESCRIPTION: Shows how Nushell handles invalid pipeline redirections by throwing a parse mismatch error. Useful for debugging and ensuring correct pipeline syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\necho aaa o> | ignore\n```\n\n----------------------------------------\n\nTITLE: Generate Command with API Example\nDESCRIPTION: Demonstrates using generate command with external API calls and continuous data processing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\ngenerate khot {|weather_station|\n  let res = try {\n    http get -ef $'https://api.weather.gov/stations/($weather_station)/observations/latest'\n  } catch {\n    null\n  }\n  sleep 1hr\n  match $res {\n    null => {\n      next: $weather_station\n    }\n    _ => {\n      out: ($res.body? | default '' | from json)\n      next: $weather_station\n    }\n  }\n}\n| each {|weather_report|\n    {\n      time: ($weather_report.properties.timestamp | into datetime)\n      temp: $weather_report.properties.temperature.value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking substring presence in a list of strings in Nushell\nDESCRIPTION: This example shows how to check if each string in a list contains a specified substring. The command returns a list of boolean values corresponding to each input string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_contains.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n[one two three] | str contains o\n```\n\n----------------------------------------\n\nTITLE: Self-Closing Tags in XML Generation\nDESCRIPTION: Example showing how to use the --self-closed flag to output empty tags as self-closing tags, which saves space in the resulting XML.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_xml.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> {tag: root content: [[tag]; [a] [b] [c]]} | to xml --self-closed\n<root><a/><b/><c/></root>\n```\n\n----------------------------------------\n\nTITLE: Replacing Old Behavior for List Inputs with `into record` in Nushell\nDESCRIPTION: This snippet shows how to achieve the old behavior of `into record` (where the index of each item would be used as the key) using `zip` and `enumerate`. It provides two alternative ways to accomplish this, demonstrating the flexibility of Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-09-17-nushell_0_98_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n\"0.. | zip $list | into record\n\n$list | enumerate | transpose -r -d | into record\"\n```\n\n----------------------------------------\n\nTITLE: Export Alias Example Usage\nDESCRIPTION: Example showing how to alias the 'ls -l' command to 'll' and export it from a module named 'spam'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_alias.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export alias ll = ls -l }\n```\n\n----------------------------------------\n\nTITLE: Reading Brotli-Compressed MessagePack\nDESCRIPTION: Reads MessagePack data compressed with Brotli into Nu values. It decompresses Brotli-compressed MessagePack data and then converts it into Nushell values, similar to `from msgpack`. This is used by the new plugin file format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n> open ~/.config/nushell/plugin.msgpackz\n╭─────────────────┬─────────────────────────────────────────────────────────────────────────────────╮\n│ nushell_version │ 0.92.3                                                                          │\n│                 │ ╭───┬───────────────┬────────────────────────────────────┬───────┬────────────╮ │\n│ plugins         │ │ # │     name      │              filename              │ shell │  commands  │ │\n│                 │ ├───┼───────────────┼────────────────────────────────────┼───────┼────────────┤ │\n│                 │ │ 0 │ custom_values │ .cargo/bin/nu_plugin_custom_values │       │ [table 8   │ │\n│                 │ │   │               │                                    │       │ rows]      │ │\n│                 │ │ 1 │ dbus          │ .cargo/bin/nu_plugin_dbus          │       │ [table 7   │ │\n│                 │ │   │               │                                    │       │ rows]      │ │\n│                 │ │ 2 │ emoji         │ .cargo/bin/nu_plugin_emoji         │       │ [table 1   │ │\n│                 │ │   │               │                                    │       │ row]       │ │\n│                 │ │ 3 │ example       │ .cargo/bin/nu_plugin_example       │       │ [table 13  │ │\n│                 │ │   │               │                                    │       │ rows]      │ │\n│                 │ │ 4 │ explore       │ .cargo/bin/nu_plugin_explore       │       │ [table 1   │ │\n│                 │ │   │               │                                    │       │ row]       │ │\n│                 │ │ 5 │ formats       │ .cargo/bin/nu_plugin_formats       │       │ [table 4   │ │\n│                 │ │   │               │                                    │       │ rows]      │ │\n│                 │ │ 6 │ gstat         │ .cargo/bin/nu_plugin_gstat         │       │ [table 1   │ │\n│                 │ │   │               │                                    │       │ row]       │ │\n│                 │ │ 7 │ inc           │ .cargo/bin/nu_plugin_inc           │       │ [table 1   │ │\n│                 │ │   │               │                                    │       │ row]       │ │\n│                 │ ╰───┴───────────────┴────────────────────────────────────┴───────┴────────────╯ │\n╰─────────────────┴─────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Retrieve History in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `history` command in Nushell allows viewing command history. In PowerShell, `Get-History` and `history` serve the same purpose. In Unix shells, the `history` command displays the shell's command history.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Keeping Empty Results with Each in Nushell\nDESCRIPTION: Example demonstrating the use of --keep-empty flag to preserve null results in the output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3] | each --keep-empty {|e| if $e == 2 { \"found 2!\"} }\n```\n\n----------------------------------------\n\nTITLE: Displaying First 5 Rows of Dataframe in Nushell\nDESCRIPTION: Shows the first 5 rows of the NYC Taxi dataset using Polars first and collect commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/polars_v_pandas_v_nushell.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n$df | polars first 5 | polars collect\n```\n\n----------------------------------------\n\nTITLE: Converting Record to URL with Multiple Query Parameters in Nushell\nDESCRIPTION: This example shows how to use 'url join' to convert a record with multiple query parameters, including a list of values, into a URL string. The command 'explodes' the list in 'params' into multiple parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_join.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n{\n        \"scheme\": \"http\",\n        \"username\": \"user\",\n        \"password\": \"pwd\",\n        \"host\": \"www.pixiv.net\",\n        \"port\": \"1234\",\n        \"params\": {a: [\"one\", \"two\"], b: \"three\"},\n        \"fragment\": \"\"\n    } | url join\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation in Nushell\nDESCRIPTION: The 'math stddev' command computes the standard deviation of a list of numbers or each column in a table. It accepts an optional '--sample' flag for sample standard deviation calculation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_stddev.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math stddev {flags}\n```\n\n----------------------------------------\n\nTITLE: Removing Last Column from a Record in Nushell\nDESCRIPTION: This snippet shows how to remove the last column from a record using the 'drop column' command in Nushell. It takes a record as input and outputs a record with one fewer column. The 'columns' parameter specifies the count of columns to remove.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_column.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> {lib: nu-lib, extension: rs} | drop column\n╭─────┬────────╮\n│ lib │ nu-lib │\n╰─────┴────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Reversing a Dataframe Using Polars in Nushell\nDESCRIPTION: This example demonstrates how to use the 'polars reverse' command to reverse the order of rows in a dataframe. It first creates a dataframe from a list of lists, then applies the reverse operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_reverse.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars reverse\n```\n\n----------------------------------------\n\nTITLE: Printing Matching Values and Indices Using 'each while' in Nushell\nDESCRIPTION: Illustrates using 'each while' with enumeration to print matching values and their indices from a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each_while.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | enumerate | each while {|e| if $e.item < 2 { $\"value ($e.item) at ($e.index)!\"} }\n╭───┬───────────────╮\n│ 0 │ value 1 at 0! │\n╰───┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Conditional Parallel Processing\nDESCRIPTION: Example demonstrating conditional processing in parallel with index tracking.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/par-each.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | enumerate | par-each { |e| if $e.item == 2 { $\"found 2 at ($e.index)!\"} }\n```\n\n----------------------------------------\n\nTITLE: Navigating Multiple Directories Up in Nushell\nDESCRIPTION: Example showing how to use multiple dots to navigate multiple levels up in the directory structure, where '...' moves two directories up.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cd.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> cd ...\n\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index of Byte Pattern in Nushell\nDESCRIPTION: Shows how to search for a byte pattern starting from the end of the binary data using the --end flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_index-of.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n>  0x[33 44 55 10 01 13 44 55] | bytes index-of --end 0x[44 55]\n6\n```\n\n----------------------------------------\n\nTITLE: Basic Standard Deviation Calculation in Polars DataFrame\nDESCRIPTION: Demonstrates calculating standard deviation values from columns in a dataframe. Creates a sample dataframe with two columns and computes the standard deviation for each column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_std.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars std | polars collect\n```\n\n----------------------------------------\n\nTITLE: Generating Sequence and Joining with Pipe Separator in Nushell\nDESCRIPTION: Demonstrates generating a sequence from 1 to 5 and then using 'str join' to concatenate the results with a pipe separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> seq 1 5 | str join '|'\n```\n\n----------------------------------------\n\nTITLE: Creating and Handling Errors with 'error make' in Nushell\nDESCRIPTION: This snippet demonstrates how to create a custom error using 'error make' and shows that code execution stops at the error. It prints 'printed' but doesn't reach 'unprinted'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\nprint 'printed'; error make { msg: 'Some error info' }; print 'unprinted'\n```\n\n----------------------------------------\n\nTITLE: Creating Binary Data from Byte Numbers in Nushell\nDESCRIPTION: Shows how to use the 'bytes build' command to create binary data from decimal byte numbers. The command converts the provided numbers into their corresponding byte representations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_build.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes build 255 254 253 252\n```\n\n----------------------------------------\n\nTITLE: Changing to Previous Working Directory in Nushell\nDESCRIPTION: Example of using cd with the dash symbol to return to the previous working directory, equivalent to using the OLDPWD environment variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cd.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> cd -\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram in Nushell\nDESCRIPTION: This snippet demonstrates the usage of the 'histogram' command in Nushell. It creates a histogram by calculating the frequency of occurrences of specified data. Key dependencies include Nushell version 0.103.0 and familiarity with the command-line usage of Nushell. The command accepts an optional column name and a frequency column name. It can also compute percentage calculations with the '--percentage-type' flag. The expected input is a list of data, and the output is a table with the calculated histogram, including value frequency and percentage metrics.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/histogram.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ls | histogram type\n```\n\nLANGUAGE: nu\nCODE:\n```\n> ls | histogram type freq\n```\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 1] | histogram\n╭───┬───────┬───────┬──────────┬────────────┬────────────────────────────────────────────────────────────────────╮\n│ # │ value │ count │ quantile │ percentage │                             frequency                              │\n├───┼───────┼───────┼──────────┼────────────┼────────────────────────────────────────────────────────────────────┤\n│ 0 │     1 │     2 │     0.67 │ 66.67%     │ ****************************************************************** │\n│ 1 │     2 │     1 │     0.33 │ 33.33%     │ *********************************                                  │\n╰───┴───────┴───────┴──────────┴────────────┴────────────────────────────────────────────────────────────────────╯\n```\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 1 1 1 2 2 1 1] | histogram --percentage-type relative\n```\n\n----------------------------------------\n\nTITLE: Filtering with Stored Condition in Nushell\nDESCRIPTION: Illustrates how to filter rows of a table using a stored condition with the 'filter' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/filter.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet cond = {|x| $x.a > 1}; [{a: 1} {a: 2}] | filter $cond\n```\n\n----------------------------------------\n\nTITLE: Slicing Strings in a Dataframe using Polars in Nushell\nDESCRIPTION: This example shows how to use the 'polars str-slice' command to create slices from strings in a dataframe. It slices each string from index 1 with a length of 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-slice.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[abcded abc321 abc123] | polars into-df | polars str-slice 1 --length 2\n```\n\n----------------------------------------\n\nTITLE: Selective Flattening by Column Name in Nushell\nDESCRIPTION: Demonstrates how to flatten only specific columns by passing column names as arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/flatten.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [[origin, crate, versions]; [World, ([[name]; ['nu-cli']]), ['0.21', '0.22']]] | flatten versions --all | last | get versions\n```\n\n----------------------------------------\n\nTITLE: Encoding String with Base32hex without Padding in Nushell\nDESCRIPTION: This example demonstrates how to encode a string using base32hex encoding in Nushell without applying padding to the output. It uses the --nopad flag to suppress padding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base32hex.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n\"hello there\" | encode base32hex --nopad\n```\n\n----------------------------------------\n\nTITLE: Checking if string contains a substring case-insensitively in Nushell\nDESCRIPTION: This example demonstrates case-insensitive substring checking using the --ignore-case flag. It checks if a filename contains a file extension regardless of case.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_contains.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n'my_library.rb' | str contains --ignore-case '.RB'\n```\n\n----------------------------------------\n\nTITLE: Applying command_not_found Hook in NixOS\nDESCRIPTION: Configures a simple `command_not_found` hook in NixOS to utilize the system's default `command-not-found` tool, streamlining error handling and improving the command search experience in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.hooks.command_not_found = {\n  |command_name|\n  print (command-not-found $command_name | str trim)\n}\n```\n\n----------------------------------------\n\nTITLE: DataFrame Group-By Operations in Nushell\nDESCRIPTION: Shows how to perform group-by operations and aggregations on DataFrame columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\n$group | polars agg [\n    (polars col int_1 | polars n-unique)\n    (polars col int_2 | polars min)\n    (polars col float_1 | polars sum)\n    (polars col float_2 | polars count)\n] | polars sort-by first\n```\n\n----------------------------------------\n\nTITLE: from ssv with noheaders Flag in Nushell\nDESCRIPTION: Shows how to use the 'from ssv' command with the --noheaders flag to prevent treating the first row as column names, resulting in default column names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_ssv.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'FOO   BAR\n1   2' | from ssv --noheaders\n╭───┬─────────┬─────────╮\n│ # │ column0 │ column1 │\n├───┼─────────┼─────────┤\n│ 0 │ FOO     │ BAR     │\n│ 1 │ 1       │ 2       │\n╰───┴─────────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Space Delimiters in Nushell\nDESCRIPTION: Example of creating a list in Nushell using space-delimited values. This works when the values are unambiguous and don't need commas.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/list.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [ foo bar baz ]\n╭───┬─────╮\n│ 0 │ foo │\n│ 1 │ bar │\n│ 2 │ baz │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Applying Default Values to Missing Data in Nushell\nDESCRIPTION: Illustrates how to use the 'default' command to apply default values to missing or null data in a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\nlet missing_value = [{a:1 b:2} {b:1}]\n$missing_value\n# => ╭───┬────┬───╮\n# => │ # │ a  │ b │\n# => ├───┼────┼───┤\n# => │ 0 │  1 │ 2 │\n# => │ 1 │ ❎ │ 1 │\n# => ╰───┴────┴───╯\n\nlet with_default_value = ($missing_value | default 'n/a' a)\n$with_default_value\n# => ╭───┬─────┬───╮\n# => │ # │  a  │ b │\n# => ├───┼─────┼───┤\n# => │ 0 │   1 │ 2 │\n# => │ 1 │ n/a │ 1 │\n# => ╰───┴─────┴───╯\n\n$with_default_value.1.a\n# => n/a\n```\n\n----------------------------------------\n\nTITLE: Sorting Directory Contents by Size in Reverse Order\nDESCRIPTION: This snippet shows how to sort the output of the `ls` command by file size in reverse order using the `sort-by` and `reverse` commands. The `sort-by` command takes the column name ('size' in this case) as an argument, and `reverse` flips the order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"ls | sort-by size | reverse\"\n```\n\n----------------------------------------\n\nTITLE: Copy Single File\nDESCRIPTION: Example of copying a single file to a directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> cp myfile dir_b\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Dates in Polars Dataframe with Exact Format\nDESCRIPTION: Converts an array of date strings to a Polars dataframe and then converts the string column to date type using the specified format. The example uses the format '%Y-%m-%d' for strings like '2021-12-30'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_as-date.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[\"2021-12-30\" \"2021-12-31\"] | polars into-df | polars as-date \"%Y-%m-%d\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of sys mem Command in Nushell\nDESCRIPTION: This example shows how to use the 'sys mem' command to display information about the system memory. The command is executed without any additional parameters or flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_mem.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> sys mem\n```\n\n----------------------------------------\n\nTITLE: Combining Boolean Masks for Polars in Nushell\nDESCRIPTION: Shows how to combine boolean masks using AND and OR operations for filtering Polars DataFrames in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_29\n\nLANGUAGE: nu\nCODE:\n```\n$mask_0 and $mask_1\n$mask_0 or $mask_1\n```\n\n----------------------------------------\n\nTITLE: Searching Specific Table Columns for Byte Patterns in Nushell\nDESCRIPTION: Demonstrates searching for a byte pattern in specific columns of a table structure, returning indices for each specified column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_index-of.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n>  [[ColA ColB ColC]; [0x[11 12 13] 0x[14 15 16] 0x[17 18 19]]] | bytes index-of 0x[11] ColA ColC\n╭───┬──────┬──────────────┬──────╮\n│ # │ ColA │     ColB     │ ColC │\n├───┼──────┼──────────────┼──────┤\n│ 0 │    0 │ [20, 21, 22] │   -1 │\n╰───┴──────┴──────────────┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Hash from File Contents in Nushell\nDESCRIPTION: Example showing how to calculate the MD5 hash of a file's contents by first opening the file and then piping its content to the hash md5 command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_md5.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> open ./nu_0_24_1_windows.zip | hash md5\n\n```\n\n----------------------------------------\n\nTITLE: Defining a custom keybinding in Nushell\nDESCRIPTION: This code snippet demonstrates how to define a custom keybinding in Nushell to reload the configuration file. It configures the 'F5' key to execute the `source` command with the path to the Nushell config file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n\n{\n    name: reload_config\n    modifier: none\n    keycode: f5\n    mode: emacs\n    event: {\n      send: executehostcommand,\n      cmd: $\"source '($nu.config-path)'\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting stdout from External Command to Pipeline in Nushell\nDESCRIPTION: Shows how to redirect the standard output of an external command into the Nushell pipeline for further processing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/run-external.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> run-external \"echo\" \"-n\" \"hello\" | split chars\n```\n\n----------------------------------------\n\nTITLE: Converting Size Data to MB - Nushell\nDESCRIPTION: This snippet showcases how to convert a specific size amount of '4GB' to megabytes (MB) using the 'format filesize' command. The command converts the value and provides the output in MB.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_filesize.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 4GB | format filesize MB\n4000 MB\n```\n\n----------------------------------------\n\nTITLE: Converting Current Date to Local Timezone in Nushell\nDESCRIPTION: This example shows how to convert the current date to the local time zone using the 'date to-timezone' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_to-timezone.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndate now | date to-timezone local\n```\n\n----------------------------------------\n\nTITLE: Wildcard Character Substitution in Nushell glob\nDESCRIPTION: Example showing how to search for files and folders like abc or xyz by substituting a single character with the ? wildcard.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> glob \"{a?c,x?z}\"\n\n```\n\n----------------------------------------\n\nTITLE: Confirming Plugin Functionality in Nushell\nDESCRIPTION: This code snippet demonstrates how to confirm that a plugin is working correctly. It uses the `polars` plugin to perform a data frame operation and then describes the resulting data frame.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nls | polars into-df | describe\n# => NuDataFrame\n```\n\n----------------------------------------\n\nTITLE: Get Basename Example\nDESCRIPTION: Example showing how to extract the basename (final component) from a file path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_basename.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/joe/test.txt' | path basename\ntest.txt\n```\n\n----------------------------------------\n\nTITLE: Merging Different-Sized Tables in Nushell\nDESCRIPTION: Demonstrates basic table merging with tables of unequal rows, showing how empty cells are handled.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/tables.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet first_table = [[a b]; [1 2] [3 4]]\nlet second_table = [[c d]; [5 6]]\n$first_table | merge $second_table\n```\n\n----------------------------------------\n\nTITLE: NuShell Pipeline: Open, Increment, Save\nDESCRIPTION: This NuShell pipeline opens a Cargo.toml file, increments the minor version of the package, and saves the modified content to a new file named Cargo_new.toml. It demonstrates the basic input, filter, and output structure of a pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/pipeline.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen \"Cargo.toml\" | inc package.version --minor | save \"Cargo_new.toml\"\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Row's Status is 'DOWN' in Nushell\nDESCRIPTION: Example demonstrating how to use the 'any' command to check if any row in a table has a status column with the value 'DOWN'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/any.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[status]; [UP] [DOWN] [UP]] | any {|el| $el.status == DOWN }\ntrue\n```\n\n----------------------------------------\n\nTITLE: Parsing Human-Friendly Dates in Nushell\nDESCRIPTION: Illustrates how to convert human-readable date strings into `datetime` objects in Nushell using `into datetime`. It requires no specific dependencies beyond Nushell itself.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n\"Now\" | into datetime        # same as `date now`\n\"A week ago\" | into datetime # same as `(date now) - 1wk`\n```\n\n----------------------------------------\n\nTITLE: Updating Column Values Using a Closure\nDESCRIPTION: Example demonstrating how to use a closure to transform an array column ('authors') into a comma-separated string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[project, authors]; ['nu', ['Andrés', 'JT', 'Yehuda']]] | update authors {|row| $row.authors | str join ',' }\n╭───┬─────────┬──────────────────╮\n│ # │ project │     authors      │\n├───┼─────────┼──────────────────┤\n│ 0 │ nu      │ Andrés,JT,Yehuda │\n╰───┴─────────┴──────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Display engine stats in Nushell\nDESCRIPTION: This command is used to output the statistics of the Nushell engine in its current state. It takes no input and returns the engine stats as output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_engine-stats.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\n> scope engine-stats\n\n```\n\n----------------------------------------\n\nTITLE: Executing Math Arctan Command in Nushell\nDESCRIPTION: The 'math arctan' command signature in Nushell. It accepts flags and returns the arctangent of the input number.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arctan.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math arctan {flags}\n```\n\n----------------------------------------\n\nTITLE: Filtering Rows with Unique Values in Polars with Nushell\nDESCRIPTION: Shows how to filter rows where a column has unique values using polars is-unique as a filter condition. The example selects rows where the 'word' column values are unique.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_38\n\nLANGUAGE: nushell\nCODE:\n```\n$df_1 | polars filter-with ($in.word | polars is-unique)\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin with Absolute Path in Nushell\nDESCRIPTION: This code snippet demonstrates how to add a plugin to the Nushell plugin registry using an absolute path. This is useful if the plugin's directory is not included in the plugin search path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nplugin add ~/.local/share/rust/cargo/bin/nu_plugin_polars\n```\n\n----------------------------------------\n\nTITLE: Showing File Types for Multiple Paths in Nushell\nDESCRIPTION: Shows how to use the 'path type' command on a list of paths obtained from the 'ls' command to get their types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_type.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ls | get name | path type\n\n```\n\n----------------------------------------\n\nTITLE: Record Transposition\nDESCRIPTION: Example demonstrating how to transpose a record and convert it back using the -d flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/transpose.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> {c1: 1, c2: 2} | transpose | transpose --ignore-titles -r -d\n```\n\n----------------------------------------\n\nTITLE: Sourcing Environment from File Example\nDESCRIPTION: Example showing how to source environment variables from a foo.nu file into the current context.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source-env.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> source-env foo.nu\n\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Custom Index in Nushell\nDESCRIPTION: Example showing how to list files in the current directory with indexes starting from 1 instead of the default 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ls | table --index 1\n```\n\n----------------------------------------\n\nTITLE: Sample Data Table Structure in Nushell\nDESCRIPTION: Example table structure showing name and age data used to demonstrate group and window operations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-22-nushell_0_20.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n───┬───────┬─────\n # │ name  │ age\n───┼───────┼─────\n 0 │ Joe   │  30\n 1 │ Fred  │  40\n 2 │ Sally │  40\n 3 │ Sean  │  42\n 4 │ Gram  │  66\n 5 │ Todd  │   1\n───┴───────┴─────\n```\n\n----------------------------------------\n\nTITLE: Moving Columns in Table Output in Nushell\nDESCRIPTION: Demonstrates how to use the new 'move column' command to reorder columns in table output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> ls\n> ls | move column size --before type\n```\n\n----------------------------------------\n\nTITLE: Printing Numbers and Sum in Nushell\nDESCRIPTION: Example showing how to print a sequence of numbers while calculating their sum simultaneously.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tee.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 1..100 | tee { each { print } } | math sum | wrap sum\n```\n\n----------------------------------------\n\nTITLE: Chunking Table Rows Example\nDESCRIPTION: Shows how to divide table rows into chunks of size 3, creating separate tables from the input data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/chunks.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[foo bar]; [0 1] [2 3] [4 5] [6 7] [8 9]] | chunks 3\n╭───┬───────────────────╮\n│ 0 │ ╭───┬─────┬─────╮ │\n│   │ │ # │ foo │ bar │ │\n│   │ ├───┼─────┼─────┤ │\n│   │ │ 0 │   0 │   1 │ │\n│   │ │ 1 │   2 │   3 │ │\n│   │ │ 2 │   4 │   5 │ │\n│   │ ╰───┴─────┴─────╯ │\n│ 1 │ ╭───┬─────┬─────╮ │\n│   │ │ # │ foo │ bar │ │\n│   │ ├───┼─────┼─────┤ │\n│   │ │ 0 │   6 │   7 │ │\n│   │ │ 1 │   8 │   9 │ │\n│   │ ╰───┴─────┴─────╯ │\n╰───┴───────────────────╯\n```\n\n----------------------------------------\n\nTITLE: String Length Calculation with Column Append in Nushell\nDESCRIPTION: Calculates string lengths of ID column values and appends results as a new column using Polars operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/polars_v_pandas_v_nushell.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet ids = $df | polars first 5 | polars get id | polars str-lengths\n$df | polars first 5 | polars append $ids | polars rename id_x vendor_id_length\n```\n\n----------------------------------------\n\nTITLE: Rendering Expanded Nested Data in Nushell Tables\nDESCRIPTION: Example showing how to display nested data in expanded format using the '--expand' flag, which presents nested arrays in a readable format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [2 [4 4]]] | table --expand\n╭───┬───┬───────────╮\n│ # │ a │     b     │\n├───┼───┼───────────┤\n│ 0 │ 1 │         2 │\n│ 1 │ 3 │ ╭───┬───╮ │\n│   │   │ │ 0 │ 4 │ │\n│   │   │ │ 1 │ 4 │ │\n│   │   │ ╰───┴───╯ │\n╰───┴───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Shadowing the 'ls' Command in Nushell\nDESCRIPTION: This snippet shows how to define a new version of the 'ls' command while backing up the original, allowing for enhanced functionality with modified parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n# alias the built-in ls command to ls-builtins\nalias ls-builtin = ls\n\ndef ls [\n    --all (-a),         # Show hidden files\n    --long (-l),        # Get all available columns for each entry (slower; columns are platform-dependent)\n    --short-names (-s), # Only print the file names, and not the path\n    --full-paths (-f),  # display paths as absolute paths\n    --du (-d),          # Display the apparent directory size (\"disk usage\") in place of the directory metadata size\n    --directory (-D),   # List the specified directory itself instead of its contents\n    --mime-type (-m),   # Show mime-type in type column instead of 'file' (based on filenames only; files' contents are not examined)\n    --threads (-t),     # Use multiple threads to list contents. Output will be non-deterministic.\n    ...pattern: glob,   # The glob pattern to use.\n]: [ nothing -> table ] {\n    let pattern = if ($pattern | is-empty) { [ '.' ] } else { $pattern }\n    (ls-builtin\n        --all=$all\n        --long=$long\n        --short-names=$short_names\n        --full-paths=$full_paths\n        --du=$du\n        --directory=$directory\n        --mime-type=$mime_type\n        --threads=$threads\n        ...$pattern\n    ) | sort-by type name -i\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arccosh of 1 in Nushell\nDESCRIPTION: Demonstrates how to use the 'math arccosh' command in Nushell to calculate the inverse hyperbolic cosine of 1, which results in 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arccosh.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 1 | math arccosh\n0\n```\n\n----------------------------------------\n\nTITLE: Basic Parallel Number Multiplication\nDESCRIPTION: Example showing parallel multiplication of numbers in a list, resulting in arbitrary order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/par-each.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | par-each {|e| $e * 2 }\n```\n\n----------------------------------------\n\nTITLE: Date Conversion to Record and Table Formats\nDESCRIPTION: This snippet demonstrates converting a datetime value into record and table formats in Nushell. By using `date to-record` and `date to-table`, the datetime details, including year, month, day, and nanoseconds, are displayed in structured formats. Useful for detailed data visualization and manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-03-14-nushell_0_77.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n〉\"7fffffffffffffff\" | into int -r 16 | into datetime | date to-record\n╭────────────┬───────────╮\n│ year       │ 2262      │\n│ month      │ 4         │\n│ day        │ 11        │\n│ hour       │ 23        │\n│ minute     │ 47        │\n│ second     │ 16        │\n│ nanosecond │ 854775807 │\n│ timezone   │ +00:00    │\n╰────────────┴───────────╯\n〉\"7fffffffffffffff\" | into int -r 16 | into datetime | date to-table\n╭───┬──────┬───────┬─────┬──────┬────────┬────────┬────────────┬──────────╮\n│ # │ year │ month │ day │ hour │ minute │ second │ nanosecond │ timezone │\n├───┼──────┼───────┼─────┼──────┼────────┼────────┼────────────┼──────────┤\n│ 0 │ 2262 │     4 │  11 │   23 │     47 │     16 │  854775807 │ +00:00   │\n╰───┴──────┴───────┴─────┴──────┴────────┴────────┴────────────┴──────────╯\n```\n\n----------------------------------------\n\nTITLE: Encoding with HTML Entity Fallback in Nushell\nDESCRIPTION: Example demonstrating how to encode a Unicode emoji with the ignore-errors flag to fall back to HTML entities for unsupported characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> \"🎈\" | encode --ignore-errors shift-jis\nLength: 9 (0x9) bytes | printable whitespace ascii_other non_ascii\n00000000:   26 23 31 32  37 38 38 30  3b                         &#127880;\n```\n\n----------------------------------------\n\nTITLE: Saving Program's stderr to File in Nushell\nDESCRIPTION: Demonstrates how to save a running program's stderr output to a file named 'foo.txt' using the 'save' command with the '--stderr' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/save.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndo -i {} | save foo.txt --stderr foo.txt\n```\n\n----------------------------------------\n\nTITLE: External Command Completion and Error Handling\nDESCRIPTION: Shows how to use the `complete` command to capture stdout, stderr, and exit codes of external commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\ncat CNAME | complete\ndo -i { cat unknown.txt } | complete\n```\n\n----------------------------------------\n\nTITLE: Creating Sliding Window of Two Elements in Nushell\nDESCRIPTION: Demonstrates using the 'window' command to create a sliding window of size 2 across a list of numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/window.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4] | window 2\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with os\nDESCRIPTION: This snippet shows how to access environment variables using `os.environ` in Python. The `os.environ` object is a dictionary-like object that maps environment variable names to their values. This allows you to retrieve configuration settings and sensitive information from the environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n\"os.environ\"\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator in Records - Nushell\nDESCRIPTION: This snippet illustrates the spread operator's ability to merge records. It shows how to combine different record literals into a single record using the spread operator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet record = { a: \"foo\" }\n{\n    ...$record,\n    y: \"bar\",\n    ...{ z: 2 }\n} | to nuon\n```\n\n----------------------------------------\n\nTITLE: Naming Columns when Splitting Text Data in Nushell\nDESCRIPTION: Demonstrates naming columns when splitting text data, making the resulting table more meaningful by giving descriptive column names instead of generic ones.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nopen people.psv | lines | split-column \" | \" firstname lastname job\n```\n\n----------------------------------------\n\nTITLE: Converting Record Values to Strings in Nushell\nDESCRIPTION: Example demonstrating how to convert each value in a record to a string using the each command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> {major:2, minor:1, patch:4} | values | each {|| into string }\n```\n\n----------------------------------------\n\nTITLE: Converting URL Query String to Table in Nushell\nDESCRIPTION: This command converts a URL query string into a table, applying percent-decoding. It handles multiple key-value pairs and repeated keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_split-query.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> url split-query {flags}\n```\n\n----------------------------------------\n\nTITLE: Get two characters from user in Nushell\nDESCRIPTION: This example shows how to use the `--numchar` flag with the `input` command to read only two characters from the user's input. The result is then assigned to the `user_input` variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> let user_input = (input --numchar 2)\n\n```\n\n----------------------------------------\n\nTITLE: Cumulative Sum for a Series in Polars\nDESCRIPTION: Converts a list of numbers into a dataframe series and calculates the cumulative sum. This shows how to perform a cumulative operation on a standalone series of values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cumulative.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2 3 4 5] | polars into-df | polars cumulative sum\n```\n\n----------------------------------------\n\nTITLE: Return First Two Rows of Dataframe\nDESCRIPTION: Example demonstrating how to return the first two rows of a dataframe using polars first command with a numeric parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_first.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars first 2\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 2 │\n│ 1 │ 3 │ 4 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Converting Between Glob and String Types in Nushell\nDESCRIPTION: Shows two methods for creating glob values: using type annotation and using the 'into glob' conversion command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nlet glob1: glob = \"*\"\nlet glob2 = (\"*\" | into glob)\n\n# Both result in the same glob pattern\n$glob1 == $glob2\n# => true\n```\n\n----------------------------------------\n\nTITLE: Adding a Hook to an Existing Configuration\nDESCRIPTION: This example demonstrates how to add a single hook to an existing hook configuration in Nushell. It uses the `upsert` command to update the `hooks.env_change.PWD` configuration, adding a new block of code that prints a message when the directory changes. It handles the case where the hook already exists as a single block or as a list of blocks.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks.env_change.PWD {|config|\n    let val = ($config | get -i hooks.env_change.PWD)\n\n    if $val == $nothing {\n        $val | append {|before, after| print $\\\"changing directory from ($before) to ($after)\\\" }\n    } else {\n        [\n            {|before, after| print $\\\"changing directory from ($before) to ($after)\\\" }\n        ]\n    }\n})\"\n```\n\n----------------------------------------\n\nTITLE: Grouping JSON Data with Optional Column in Nushell\nDESCRIPTION: Shows how to group items by a specific column ('foo') from a JSON file, ignoring any records that don't have that column using the optional accessor syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> open cool.json | group-by foo?\n```\n\n----------------------------------------\n\nTITLE: Extract Weekday from Datetime Example\nDESCRIPTION: Example showing how to convert a datetime string to a datetime object, create a dataframe, and extract weekday numbers. The result shows weekday values where 2 represents Tuesday.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-weekday.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-weekday\n```\n\n----------------------------------------\n\nTITLE: Using Stored Condition with 'take while' in Nushell\nDESCRIPTION: Shows how to use a stored condition with the 'take while' command to select negative elements from a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_while.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> let cond = {|x| $x < 0 }; [-1 -2 9 1] | take while $cond\n╭───┬────╮\n│ 0 │ -1 │\n│ 1 │ -2 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Executing a SQL statement with parameters\nDESCRIPTION: This snippet shows how to execute a SQL INSERT statement with parameters. It first creates a table named 'my_table' with columns 'first' (string) and 'second' (integer) using the 'stor create' command, then opens the storage and inserts a row with values 'hello' and 123.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_db.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\"> stor create -t my_table -c { first: str, second: int }\\nstor open | query db \\\"INSERT INTO my_table VALUES (?, ?)\\\" -p [hello 123]\\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to a Nushell Module\nDESCRIPTION: Demonstrates how to add environment variables to a Nushell module using the 'export-env' command. This example sets a directory for future module placement.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n# A collection of helpful utility functions\n\nexport use ./increment.nu\nexport use ./range-into-list.nu\n\nexport-env {\n    $env.NU_MODULES_DIR = ($nu.default-config-dir | path join \"scripts\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nushell in Docker with a specific version\nDESCRIPTION: This command runs a Nushell Docker container in interactive mode, removing it after it exits.  It allows specifying the Nushell version and the Linux distribution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n\"docker run -it --rm ghcr.io/nushell/nushell:<version>-<distro>\"\n```\n\n----------------------------------------\n\nTITLE: Example of Source Command Failing Due to Parse/Eval Separation in Nushell\nDESCRIPTION: This example demonstrates why creating a file dynamically and then sourcing it in the same script fails in Nushell. This occurs because parsing happens before evaluation, so the file doesn't exist during the parsing stage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\necho \"export def get-info [] { ls | get name }\" | save output.nu\nsource output.nu\n```\n\n----------------------------------------\n\nTITLE: Iterating through directories with par-each in Nushell\nDESCRIPTION: This snippet demonstrates how to iterate through directories and count the number of files in each subdirectory using the `par-each` command in Nushell.  Similar to the `each` example, it filters directories and calculates file counts, but the `par-each` command enables parallel execution for faster processing. Note that the order of the results may vary due to the parallel execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/parallelism.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nls | where type == dir | par-each { |row|\n    { name: $row.name, len: (ls $row.name | length) }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Columns with Nushell is-empty\nDESCRIPTION: This code snippet illustrates how the `is-empty` command can be used to check multiple columns for empty values in Nushell. It operates on a table structure where it checks specified columns for emptiness, returning a boolean result. The snippet requires Nushell and any columnar data as input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-empty.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[meal size]; [arepa small] [taco '']] | is-empty meal size\nfalse\n```\n\n----------------------------------------\n\nTITLE: Getting help for a subcommand in Nushell\nDESCRIPTION: Example showing how to get help information for a subcommand, in this case the 'join' subcommand of the 'str' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> help str join\n```\n\n----------------------------------------\n\nTITLE: Querying Databases with Parameters\nDESCRIPTION: The 'query db --params' command allows users to safely specify parameters in SQL queries, mitigating risks of SQL injection by avoiding string interpolation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\nquery db --params\n```\n\n----------------------------------------\n\nTITLE: Scoped File Redirection in Nushell\nDESCRIPTION: Shows how file redirections are scoped to an entire expression in Nushell, affecting all external commands within.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\nlet text = \"hello\\nworld\"\n($text | head -n 1; $text | tail -n 1) o> out.txt\n```\n\n----------------------------------------\n\nTITLE: HTTP POST to example.com\nDESCRIPTION: Posts the string 'body' to the specified URL, https://www.example.com. This is a basic example demonstrating the fundamental usage of the 'http post' command in Nushell to send data to a server.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_post.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> http post https://www.example.com 'body'\n\n```\n\n----------------------------------------\n\nTITLE: Natural Sorting with String Numbers in Nushell\nDESCRIPTION: Demonstrates natural sorting of strings containing numbers, showing the difference between default and natural sort ordering.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\nlet data = [\"10\", \"9\", \"foo123\", \"foo20\", \"bar123\", \"bar20\"]\n$data | sort\n$data | sort -n\n```\n\n----------------------------------------\n\nTITLE: Converting List to Indented NUON Array in Nushell\nDESCRIPTION: Outputs a NUON array of integers with pretty indentation using the --indent flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_nuon.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[1 2 3] | to nuon --indent 2\n```\n\n----------------------------------------\n\nTITLE: Rendering Collapsed Tables in Nushell\nDESCRIPTION: Example demonstrating the '--collapse' flag for rendering data in a table view with collapsed structure, similar to expanded view but with different display characteristics.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [2 [4 4]]] | table --collapse\n╭───┬───┬───────────╮\n│ # │ a │     b     │\n├───┼───┼───────────┤\n│ 0 │ 1 │         2 │\n│ 1 │ 3 │ ╭───┬───╮ │\n│   │   │ │ 0 │ 4 │ │\n│   │   │ │ 1 │ 4 │ │\n│   │   │ ╰───┴───╯ │\n╰───┴───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Implementing Try-Catch Error Handling in Nushell\nDESCRIPTION: This snippet illustrates the use of try-catch for error handling. It catches a division by zero error and executes the catch block, then concatenates the result with additional text.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\ntry { 1 / 0 } catch { 'An error happened!' } | $in ++ ' And now I am resuming.'\n```\n\n----------------------------------------\n\nTITLE: Implementing Math Sum in Python\nDESCRIPTION: Python implementation of sum operation equivalent to Nushell's math sum command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nsum\n```\n\n----------------------------------------\n\nTITLE: Finding Inefficient Standard Library Usage in Nushell\nDESCRIPTION: Command to identify inefficient standard library usage patterns in configuration files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/standard_library.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nview files\n| enumerate | flatten\n| where filename !~ '^std'\n| where filename !~ '^entry'\n| where {|file|\n    (view span $file.start $file.end) =~ 'use\\\\W+std[^/]'\n  }\n```\n\n----------------------------------------\n\nTITLE: Block Type Error in Nushell\nDESCRIPTION: This example shows an error that occurs when trying to use 'block' as a type for a variable. Blocks are not first-class values in Nushell, unlike closures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/block.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet b: block = {}\n```\n\n----------------------------------------\n\nTITLE: Calculating Disk Usage with Math Sum in Nushell\nDESCRIPTION: Shows how to use 'math sum' to compute the total disk usage for files in the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sum.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | get size | math sum\n```\n\n----------------------------------------\n\nTITLE: Pattern Parsing with parse Command in Nushell\nDESCRIPTION: Demonstrates using the parse command to extract structured data from cargo search output using a custom pattern format. Creates a table with crate name, version, and description columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ncargo search shells --limit 10 | lines | parse \"{crate_name} = {version} #{description}\" | str trim\n```\n\n----------------------------------------\n\nTITLE: Delete Zero-Size Files in Nushell\nDESCRIPTION: Complex example showing how to find and delete all 0KB files in the current directory using pipeline operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rm.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> ls | where size == 0KB and type == file | each { rm $in.name } | null\n```\n\n----------------------------------------\n\nTITLE: Dropping a Column from a Dataframe with Polars in Nushell\nDESCRIPTION: Example showing how to drop column 'a' from a dataframe in Nushell using the polars plugin. Creates a simple dataframe from a table, converts it to a polars dataframe, and then drops the specified column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_drop.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars drop a\n```\n\n----------------------------------------\n\nTITLE: Converting Compound Duration String to Duration Value in Nushell\nDESCRIPTION: Shows how to convert a compound duration string with multiple time units into a duration value. The command handles the complex input '1day 2hr 3min 4sec' and returns a normalized duration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_duration.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'1day 2hr 3min 4sec' | into duration\n```\n\n----------------------------------------\n\nTITLE: Using ls Command in Nushell\nDESCRIPTION: The basic signature for the 'ls' command in Nushell. It allows for flags and additional parameters to customize the listing behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> ls {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema for Dataframes in Nushell\nDESCRIPTION: This snippet shows how to specify a schema for dataframes using Nushell's `dfr into-df` and `dfr schema` commands. The dataframe command is used to define types for nested structures, which is illustrated by the nested column `b`. Parameters include `-s` for specifying the schema, and the `dfr schema` command to view the structure. Input expects JSON-like data that is transformed into a dataframe, with an output that shows the schema structure of the dataframe. This feature requires Nushell with dataframe support.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-02-06-nushell_0_90_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n{a:1, b:{a:2}} | dfr into-df -s {a: u8, b: {a: i32}} | dfr schema\n```\n\n----------------------------------------\n\nTITLE: Conditional Sourcing with `source null` in Nushell\nDESCRIPTION: This code snippet demonstrates how to conditionally source a file in Nushell using `source null`. It checks if a file exists and, if it does, assigns the file path to a variable; otherwise, it assigns `null`. The `source` command is then used to source the file if it exists, or does nothing if the variable is null.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nconst file = path self local.nu\nconst file = if ($file | path exists) { $file } else { null }\n\nsource $file\n```\n\n----------------------------------------\n\nTITLE: Record Sorting by Key\nDESCRIPTION: Example of sorting a record by its keys in case-insensitive order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> {b: 3, a: 4} | sort\n```\n\n----------------------------------------\n\nTITLE: Creating URL Link in Nushell\nDESCRIPTION: Example of creating a clickable URL link without custom text, using the URL itself as the display text.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_link.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'https://www.nushell.sh/' | ansi link\n```\n\n----------------------------------------\n\nTITLE: Logging Directory Changes to File with watch in Nushell\nDESCRIPTION: Illustrates how to use the 'watch' command to log all changes in a specific directory to a file, appending each change as a new line.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/watch.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> watch /foo/bar { |op, path| $\"($op) - ($path)(char nl)\" | save --append changes_in_bar.log }\n```\n\n----------------------------------------\n\nTITLE: Returning First Two Bytes from Binary in Nushell\nDESCRIPTION: This example demonstrates how to use the 'first' command to return the first two bytes from a binary value in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/first.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[01 23 45] | first 2\nLength: 2 (0x2) bytes | printable whitespace ascii_other non_ascii\n00000000:   01 23                                                •#\n```\n\n----------------------------------------\n\nTITLE: Renaming Polars Series Column in Nushell\nDESCRIPTION: Demonstrates how to rename a column in a Polars Series using the 'polars rename' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_21\n\nLANGUAGE: nu\nCODE:\n```\nlet df_7 = $df_6 | polars rename \"0\" memorable\n$df_7\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Name in Nushell\nDESCRIPTION: Demonstrates how to list all files with names that contain \"Car\" using the 'where' command with string matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nls | where name =~ \"Car\"\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings in Nushell\nDESCRIPTION: Shows how to convert date strings from git log output into Nushell datetime objects using the upsert and into datetime commands. This transformation enables date filtering and other datetime operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime}\n```\n\n----------------------------------------\n\nTITLE: Moving File to Trash in Nushell\nDESCRIPTION: Shows how to explicitly move a file to the system trash using the --trash flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rm.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> rm --trash file.txt\n```\n\n----------------------------------------\n\nTITLE: Converting Decimal String to Integer in Nushell\nDESCRIPTION: Shows how to convert a string containing a decimal number to an integer by truncating the decimal portion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n'5.9' | into int\n```\n\n----------------------------------------\n\nTITLE: Chaining Operations on a Lazy Dataframe in Nushell\nDESCRIPTION: Demonstrates chaining multiple operations on a lazy dataframe including reversing the order and creating derived columns using expressions. The operations are only executed when collect is called.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_41\n\nLANGUAGE: nushell\nCODE:\n```\n$lf_0\n| polars reverse\n| polars with-column [\n     ((polars col a) * 2 | polars as double_a)\n     ((polars col a) / 2 | polars as half_a)\n]\n| polars collect\n```\n\n----------------------------------------\n\nTITLE: Boolean Casting Command in Nushell\nDESCRIPTION: The command for casting other data types to Boolean in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/bool.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ninto bool\n```\n\n----------------------------------------\n\nTITLE: Example: URL-Decoding Query String Values in Nushell\nDESCRIPTION: This example shows how the command handles URL-encoded values, decoding them in the output table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_split-query.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"a=AT%26T&b=AT+T\" | url split-query\n╭───┬─────┬───────╮\n│ # │ key │ value │\n├───┼─────┼───────┤\n│ 0 │ a   │ AT&T  │\n│ 1 │ b   │ AT T  │\n╰───┴─────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Displaying Nushell Weekly Update in Markdown\nDESCRIPTION: This Markdown snippet presents a structured list of recent contributions to Nushell-related projects, organized by repository and contributor. It includes links to pull requests and brief descriptions of changes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-02-03-twin0180.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# This week in Nushell #180\n\n## Nushell\n\n- sholderbach created [Fix code in benchmarks](https://github.com/nushell/nushell/pull/7949), and [Bump to `0.75.1` development version](https://github.com/nushell/nushell/pull/7930), and [Pin `reedline` to new `0.15` for release](https://github.com/nushell/nushell/pull/7918), and [Apply more recent/nightly clippy lints](https://github.com/nushell/nushell/pull/7916), and [Bump `trash` to `3.0.1`](https://github.com/nushell/nushell/pull/7914), and [Use variable names directly in the format strings](https://github.com/nushell/nushell/pull/7906), and [Remove unused `nu-test-support` in `nu-table`](https://github.com/nushell/nushell/pull/7905), and [Update reedline for pre-release testing](https://github.com/nushell/nushell/pull/7903), and [Version bump for `0.75` release](https://github.com/nushell/nushell/pull/7902)\n- Hofer-Julian created [Fix copy paste error](https://github.com/nushell/nushell/pull/7945)\n- fdncred created [clean up the registry query output](https://github.com/nushell/nushell/pull/7939), and [add ability to view-source on closures](https://github.com/nushell/nushell/pull/7935), and [update type check so that ++ with lists works better](https://github.com/nushell/nushell/pull/7926)\n- kubouch created [Remove deprecated `where -b` parameter](https://github.com/nushell/nushell/pull/7927)\n- webbedspace created [Only abbreviate to \"[table x rows]\" if every value is a record](https://github.com/nushell/nushell/pull/7922), and [Remove deprecated `--numbered` flag from four commands](https://github.com/nushell/nushell/pull/7777)\n- csko created [use newer reedline (once available)](https://github.com/nushell/nushell/pull/7919), and [respect use_ansi_coloring configuration](https://github.com/nushell/nushell/pull/7912)\n- dependabot[bot] created [Bump windows from 0.43.0 to 0.44.0](https://github.com/nushell/nushell/pull/7911), and [Bump serial_test from 0.10.0 to 1.0.0](https://github.com/nushell/nushell/pull/7910), and [Bump roxmltree from 0.16.0 to 0.17.0](https://github.com/nushell/nushell/pull/7909), and [Bump typetag from 0.1.8 to 0.2.5](https://github.com/nushell/nushell/pull/7908), and [Bump chrono-tz from 0.6.3 to 0.8.1](https://github.com/nushell/nushell/pull/7907)\n- jt created [Use clippy-recommended simplification](https://github.com/nushell/nushell/pull/7904)\n- merelymyself created [make `parse -r` columns return 0-indexed uncapitalised](https://github.com/nushell/nushell/pull/7897), and [ensure that when nu evaluates files, it allows early returns](https://github.com/nushell/nushell/pull/7415)\n- WindSoilder created [make help commands search term don't generate $nothing](https://github.com/nushell/nushell/pull/7896), and [make do -i works with liststream](https://github.com/nushell/nushell/pull/7889), and [Let redirection keep exit code](https://github.com/nushell/nushell/pull/7848)\n- Mehrbod2002 created [Fix: dst error on cp command](https://github.com/nushell/nushell/pull/7895)\n\n## Documentation\n\n- FilipAndersson245 created [Updated cookbook with http get instead of fetch.](https://github.com/nushell/nushell.github.io/pull/763)\n- hustcer created [Update typos config and fix some typos](https://github.com/nushell/nushell.github.io/pull/762), and [feat: refresh command docs for nu v0.75](https://github.com/nushell/nushell.github.io/pull/760)\n- sholderbach created [Add progressbar example image](https://github.com/nushell/nushell.github.io/pull/759), and [Release notes for `0.75`](https://github.com/nushell/nushell.github.io/pull/746)\n- Hofer-Julian created [Reflect the separation of block and closure](https://github.com/nushell/nushell.github.io/pull/757)\n- bobhy created [Document \\u{x...} unicode escapes](https://github.com/nushell/nushell.github.io/pull/756), and [document 7883 for release notes](https://github.com/nushell/nushell.github.io/pull/755)\n\n## Nu_Scripts\n\n- WindSoilder created [update themes' readme](https://github.com/nushell/nu_scripts/pull/372)\n- Neur1n created [added nu_msvs module](https://github.com/nushell/nu_scripts/pull/370), and [nu_conda: Another Conda module with Better Performance](https://github.com/nushell/nu_scripts/pull/367)\n- kubouch created [Add documentation to nu_deps](https://github.com/nushell/nu_scripts/pull/369), and [nu: Add new release ordering; Tweak nu_deps](https://github.com/nushell/nu_scripts/pull/368)\n\n## reedline\n\n- csko created [Fix columnar menu completion corrupting the editor insertion point](https://github.com/nushell/reedline/pull/534)\n- sholderbach created [Remove unstable rustdoc lint](https://github.com/nushell/reedline/pull/533), and [Bump version for `0.15` release](https://github.com/nushell/reedline/pull/532)\n```\n\n----------------------------------------\n\nTITLE: Slicing Last Two Items\nDESCRIPTION: Example showing how to get the last two items from a list using explicit indices.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/slice.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [0,1,2,3,4,5] | slice 4..5\n╭───┬───╮\n│ 0 │ 4 │\n│ 1 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Executing External Commands with exec in Nushell\nDESCRIPTION: The 'exec' command is used to execute external commands, replacing or exiting the current process depending on the platform. It takes flags and the external command with its arguments as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/exec.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> exec {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Checking String Contains Substring using str command\nDESCRIPTION: Shows how to check if a string contains a particular substring using the str contains subcommand, returning a boolean result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n\"hello world\" | str contains \"o wo\"\n# => true\n```\n\n----------------------------------------\n\nTITLE: Nushell create utils directory\nDESCRIPTION: This example set up the environment for the next few code snippets. It creates a `my-utils` directory, and adjust some file locations. The final result is a `my-utils` directory containing `increment.nu` and `range-into-list.nu`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nmkdir my-utils\n# Adjust the following as needed\nmv increment/mod.nu my-utils/increment.nu\nrm increment\ncd my-utils\n```\n\n----------------------------------------\n\nTITLE: Defining the Update Cells Command Signature in Nushell\nDESCRIPTION: The signature for the 'update cells' command, showing its basic syntax with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update_cells.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> update cells {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Generating Query String from Record in Nushell\nDESCRIPTION: Demonstrates how to use the 'url build-query' command to convert a simple record into a query string. The command handles basic key-value pairs without special characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_build-query.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n{ mode:normal userid:31415 } | url build-query\n```\n\n----------------------------------------\n\nTITLE: Converting a Simple String to camelCase in Nushell\nDESCRIPTION: Example showing how to convert the string 'NuShell' to camelCase format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_camel-case.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n>  'NuShell' | str camel-case\nnuShell\n```\n\n----------------------------------------\n\nTITLE: Understanding Overlay Priority Order in Nushell\nDESCRIPTION: Demonstrates how overlay priority works when multiple overlays contain the same definition. Shows how to reorder overlays by using 'overlay use' with an existing overlay name to bring it to the top of the stack.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n(zero)> def foo [] { \"foo-in-zero\" }\n\n(zero)> overlay use spam\n\n(spam)> foo\nfoo\n\n(spam)> overlay use zero\n\n(zero)> foo\nfoo-in-zero\n\n(zero)> overlay list\n───┬──────\n 0 │ spam\n 1 │ zero\n───┴──────\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing in Record Fields using Regular Expression in Nushell\nDESCRIPTION: Demonstrates applying regex replacements to specific fields in a record structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> { KeyA: abc, KeyB: abc, KeyC: ads } | str replace --all --regex 'b' 'z' KeyA KeyC\n╭──────┬─────╮\n│ KeyA │ azc │\n│ KeyB │ abc │\n│ KeyC │ ads │\n╰──────┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Opening Files from Input\nDESCRIPTION: Opens a file using the filename provided via pipeline input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/open.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n'myfile.txt' | open\n```\n\n----------------------------------------\n\nTITLE: Unfreezing Latest Frozen Job in Nushell\nDESCRIPTION: This example demonstrates how to use the 'job unfreeze' command without specifying an id, which will unfreeze the latest frozen job.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job_unfreeze.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> job unfreeze\n```\n\n----------------------------------------\n\nTITLE: Converting Complex YAML with Nested Arrays to Table in Nushell\nDESCRIPTION: Example demonstrating how the 'from yaml' command handles more complex YAML data with nested arrays, converting it to a structured Nushell table with proper nesting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_yaml.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n'[ a: 1, b: [1, 2] ]' | from yaml\n╭───┬────┬───────────╮\n│ # │ a  │     b     │\n├───┼────┼───────────┤\n│ 0 │  1 │    ❎     │\n│ 1 │ ❎ │ ╭───┬───╮ │\n│   │    │ │ 0 │ 1 │ │\n│   │    │ │ 1 │ 2 │ │\n│   │    │ ╰───┴───╯ │\n╰───┴────┴───────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Parsing String with Named Columns\nDESCRIPTION: Demonstrates parsing a string into two named columns using a simple pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/parse.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> \"hi there\" | parse \"{foo} {bar}\"\n```\n\n----------------------------------------\n\nTITLE: Basic URL Encoding in Nushell\nDESCRIPTION: Demonstrates how to encode a URL containing a space character. The command converts spaces to %20 while preserving standard URL characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_encode.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n'https://example.com/foo bar' | url encode\n```\n\n----------------------------------------\n\nTITLE: Generate Command Pattern for Keyboard Input in Nushell\nDESCRIPTION: Functional loop implementation using generate command without recursion limits or mutable variables. Supports collecting multiple results into a list with streamed output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/input_listen_keys.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\ndef run_some_code [] {\n  print \"I'm running the code and returning 42\"\n  42\n}\n\nprint '(a) Run some code (x) Exit'\n\nlet key_generator = {|_|\n  let key = (input listen --types [key])\n\n  if ($key.code == 'a') and ($key.modifiers == []) {\n      { out: (run_some_code) }\n  } else if ($key.code == 'x') and ($key.modifiers == []) {\n      print 'User exited'\n      { out: null }\n  } else if ($key.code == 'c') and ($key.modifiers == ['keymodifiers(control)']) {\n      print 'Terminated with Ctrl-C'\n      { out: null }\n  } else {\n      print \"That key wasn't recognized.\"\n      print 'Press (a) to run some code or (x) to Exit'\n      { next: null }\n  }\n}\n\ngenerate null $key_generator | get 0\n```\n\n----------------------------------------\n\nTITLE: Merging Two Tables with 'merge' in Nu Shell\nDESCRIPTION: Illustrates merging two tables using the 'merge' command, overwriting overlapping columns in Nu Shell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [{columnA: A0 columnB: B0}] | merge [{columnA: 'A0*'}]\n```\n\n----------------------------------------\n\nTITLE: Signature of polars get-year Command in Nushell\nDESCRIPTION: Shows the command signature for the 'polars get-year' command in Nushell, indicating it accepts flags but doesn't require any positional arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-year.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars get-year {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating Raw Strings in Nushell\nDESCRIPTION: Shows how to use raw strings in Nushell, which can contain single quotes and are enclosed by r#' and '#.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nr#'Raw strings can contain 'quoted' text.'#\n# => Raw strings can contain 'quoted' text.\n```\n\n----------------------------------------\n\nTITLE: Using Capture Groups to Manipulate Text with Regular Expression in Nushell\nDESCRIPTION: Demonstrates how to reorder parts of text using capture groups and references in the replacement pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n> \"abc-def\" | str replace -r \"(.+)-(.+)\" \"${2}_${1}\"\ndef_abc\n```\n\n----------------------------------------\n\nTITLE: Exploding Dataframe Columns Example\nDESCRIPTION: Example showing how to explode a dataframe containing nested lists in the hobbies column, resulting in separate rows for each hobby while maintaining the original id and name values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_explode.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[id name hobbies]; [1 Mercy [Cycling Knitting]] [2 Bob [Skiing Football]]]\n                    | polars into-df\n                    | polars explode hobbies\n                    | polars collect\n                    | polars sort-by [id, name]\n```\n\n----------------------------------------\n\nTITLE: Buffer Editor Configuration Examples\nDESCRIPTION: Examples of setting the buffer_editor environment variable to different text editors including VS Code, nano, Helix, vi, and Emacs with arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.buffer_editor = \"code\"\n# or\n$env.config.buffer_editor = \"nano\"\n# or\n$env.config.buffer_editor = \"hx\"\n# or\n$env.config.buffer_editor = \"vi\"\n# with args\n$env.config.buffer_editor = [\"emacsclient\", \"-s\", \"light\", \"-t\"]\n# etc.\n```\n\n----------------------------------------\n\nTITLE: Converting a Nushell table to CSV with column selection\nDESCRIPTION: Shows how to use the --columns flag to select and reorder specific columns when converting to CSV format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_csv.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[[foo bar baz]; [1 2 3]] | to csv --columns [baz foo]\n```\n\n----------------------------------------\n\nTITLE: Converting Range to MessagePack Array in Nushell\nDESCRIPTION: This example shows how to convert a range of numbers to a MessagePack array using the 'to msgpack' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_msgpack.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n1..10 | to msgpack\n```\n\n----------------------------------------\n\nTITLE: Summing All Dataframe Columns\nDESCRIPTION: Example showing how to sum all columns in a dataframe using polars sum command. Creates a dataframe with two columns and returns the sum of each column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sum.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [1 4] [4 1]] | polars into-df | polars sum | polars collect\n```\n\n----------------------------------------\n\nTITLE: Defining and Theming a Table in Nushell\nDESCRIPTION: This snippet defines a table by listing directories and excluding the 'type' attribute, then displays it with a specific theme using `table --theme ascii_rounded`. No prerequisites are needed, and it outputs a themed table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nlet table = ls | where type == dir | reject type\n```\n\nLANGUAGE: nushell\nCODE:\n```\n$table | table --theme ascii_rounded\n```\n\n----------------------------------------\n\nTITLE: Extracting Ordinal Day from Datetime in Polars Dataframe with Nushell\nDESCRIPTION: Demonstrates how to use the polars get-ordinal command to extract the ordinal day (day of year) from datetime values in a dataframe. The example creates a dataframe with two identical datetime entries and then extracts their ordinal day value (217).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-ordinal.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-ordinal\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Data in System Information\nDESCRIPTION: This snippet demonstrates accessing nested data within the system information table using a column path. It retrieves the username from the 'host.username' path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"sys | get host.username\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Assignment in Nushell\nDESCRIPTION: This snippet demonstrates assigning a value to a variable based on a conditional `if` statement within Nushell. The value of `$a` is set to 10 if 4 equals 3, otherwise it's set to 20.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-07-25-nushell_0_83.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nmut a = 3\n$a = if 4 == 3 { 10 } else {20}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Datetime with Non-Exact Matching in Nushell\nDESCRIPTION: Uses the --not-exact flag to parse datetime strings that contain additional characters beyond the format pattern, allowing for flexible parsing of dates embedded in text.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_as-datetime.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[\"2021-12-30 00:00:00 GMT+4\"] | polars into-df | polars as-datetime \"%Y-%m-%d %H:%M:%S\" --not-exact\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise XOR on Binary Data in Nushell\nDESCRIPTION: This example illustrates how to use the 'bits xor' command to perform a bitwise XOR operation on binary data represented in hexadecimal format in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_xor.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n0x[ca fe] | bits xor 0x[ba be]\n```\n\n----------------------------------------\n\nTITLE: Polars Value-Counts Example Usage\nDESCRIPTION: Demonstrates how to calculate value counts for a series of numbers in a dataframe, showing the frequency of each unique value sorted by count.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_value-counts.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[5 5 5 5 6 6] | polars into-df | polars value-counts | polars sort-by count\n╭───┬───┬───────╮\n│ # │ 0 │ count │\n├───┼───┼───────┤\n│ 0 │ 6 │     2 │\n│ 1 │ 5 │     4 │\n╰───┴───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Date Format Manipulation\nDESCRIPTION: Demonstrating how to select and format specific date entries.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | select 3 | get date | format date | get 0\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Full Path in Parent Directory\nDESCRIPTION: Example of using the 'ls' command with the '-f' flag to list visible files with full paths in the parent directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> ls -f ..\n```\n\n----------------------------------------\n\nTITLE: Listing Stored Polars DataFrames in Nushell\nDESCRIPTION: Shows how to list all stored Polars DataFrames in Nushell, including their key, type, number of columns, rows, and estimated size.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_18\n\nLANGUAGE: nu\nCODE:\n```\npolars store-ls | select key type columns rows estimated_size\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to String in Nushell\nDESCRIPTION: Shows the process of converting a date string to a datetime object and then to a formatted string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n> '2020-10-10 10:00:00 +02:00' | into datetime | into string\nSat Oct 10 10:00:00 2020\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Date in Nushell Date List\nDESCRIPTION: Illustrates how to use 'math max' to determine the latest date from a list of dates in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_max.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [2022-02-02 2022-12-30 2012-12-12] | math max\nFri, 30 Dec 2022 00:00:00 +0000 (2 years ago)\n```\n\n----------------------------------------\n\nTITLE: Simple Quantile Calculation Example\nDESCRIPTION: Demonstrates calculating the median (0.5 quantile) for columns in a dataframe\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_quantile.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [6 2] [1 4] [4 1]] | polars into-df | polars quantile 0.5\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Epoch Timestamp\nDESCRIPTION: This code snippet demonstrates converting a specific date in the past to an integer timestamp using Nushell. If the input date is outside the supported range, it returns an error indicating the permissible range. This showcases error handling related to timestamp conversion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-03-14-nushell_0_77.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n〉1492-10-12 | into int\nError: nu::shell::incorrect_value\n\n  × Incorrect value.\n   ╭─[entry #51:1:1]\n 1 │ 1492-10-12 | into int\n   ·              ────┬───\n   ·                  ╰── DateTime out of timestamp range 1677-09-21T00:12:43 and 2262-04-11T23:47:16\n   ╰────\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float using Nushell\nDESCRIPTION: Utilize Nushell to convert a standalone string into a floating point number using the `into float` command. The command takes a string input that can be parsed into a float. The direct output is the string transformed into a float value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_float.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '1.345' | into float\n1.345\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns from Table in Nushell\nDESCRIPTION: This snippet shows how to select specific columns (name and size) from the output of the ls command using the select command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nls | select name size\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to the Registry (Linux/macOS)\nDESCRIPTION: This code snippet demonstrates how to add a plugin to the plugin registry on Linux and macOS systems. The `plugin add` command is used to tell Nushell where to find the plugin executable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nplugin add ./my_plugins/nu_plugin_cool\n```\n\n----------------------------------------\n\nTITLE: Getting HTTP Headers with URL - nu\nDESCRIPTION: This code snippet demonstrates how to use the http head command in NuShell to retrieve HTTP headers from a specified URL. It can be executed with various options like authentication and custom headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_head.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> http head https://www.example.com\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http head --user myuser --password mypass https://www.example.com\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http head --headers [my-header-key my-header-value] https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Dropping Rows from Tables in NuShell\nDESCRIPTION: This snippet shows how to use the 'drop' command to remove rows from the end of a table in NuShell. The number of rows to drop is controlled by the 'rows' argument. This operation reduces the row count of the output table while maintaining the column structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a, b]; [1, 2] [3, 4]] | drop 1\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 2 │\n╰───┴───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Filtering with Each in Nushell\nDESCRIPTION: Example showing how to filter and transform elements conditionally, similar to filter_map in other languages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 2] | each {|e| if $e == 2 { \"two\" } }\n```\n\n----------------------------------------\n\nTITLE: Sorting Git Log by Date\nDESCRIPTION: Sorting git log entries by date after converting to proper datetime format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 25 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | sort-by date\n```\n\n----------------------------------------\n\nTITLE: Configuring Completion Menu in Nushell\nDESCRIPTION: Configuration settings for the Nushell completion menu, which provides context-sensitive suggestions. Includes settings for layout, appearance, and behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n\n    menus: [\n      ...\n      {\n        name: completion_menu\n        only_buffer_difference: false # Search is done on the text written after activating the menu\n        marker: \"| \"                  # Indicator that appears with the menu is active\n        type: {\n            layout: columnar          # Type of menu\n            columns: 4                # Number of columns where the options are displayed\n            col_width: 20             # Optional value. If missing all the screen width is used to calculate column width\n            col_padding: 2            # Padding between columns\n        }\n        style: {\n            text: green                   # Text style\n            selected_text: green_reverse  # Text style for selected option\n            description_text: yellow      # Text style for description\n        }\n      }\n      ...\n    ]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Parsing a Single Path in Nushell\nDESCRIPTION: This example demonstrates parsing a single file path into its components, returning a record with parent directory, stem, and extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_parse.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking/spam.txt' | path parse\n╭───────────┬──────────────╮\n│ parent    │ /home/viking │\n│ stem      │ spam         │\n│ extension │ txt          │\n╰───────────┴──────────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'default' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'default' command, including its flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/default.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> default {flags} (default value) (column name)\n```\n\n----------------------------------------\n\nTITLE: Datetime Conversion Without Timezone Offset in Nushell\nDESCRIPTION: This snippet shows how to convert a non-standard timestamp string to a datetime without specifying a timezone offset.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> '16.11.1984 8:00 am' | into datetime --format '%d.%m.%Y %H:%M %P'\nFri, 16 Nov 1984 08:00:00 +0800 (40 years ago)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'which' Command in Nushell\nDESCRIPTION: This example demonstrates how to use the 'which' command to find if the 'myapp' application is available in the system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/which.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> which myapp\n```\n\n----------------------------------------\n\nTITLE: Converting Table to HTML with Dark Background\nDESCRIPTION: Demonstrates how to use the 'to html' command with the --dark flag to generate HTML output optimized for dark backgrounds, using white text on a black background.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_html.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [1 2]] | to html --dark\n<html><style>body { background-color:black;color:white; }</style><body><table><thead><tr><th>foo</th><th>bar</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table></body></html>\n```\n\n----------------------------------------\n\nTITLE: Perform Full Join with Column Coalescing\nDESCRIPTION: Demonstrates a full join between two dataframes with the --coalesce-columns flag to merge columns with the same name from both dataframes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_join.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet table1 = [[A B]; [\"common\" \"common\"] [\"table1\" \"only\"]] | polars into-df\nlet table2 = [[A C]; [\"common\" \"common\"] [\"table2\" \"only\"]] | polars into-df\n$table1 | polars join -f $table2 --coalesce-columns A A\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `pwd` to Python's `os.getcwd`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `pwd` command in Python using the `os.getcwd` function.  This function returns the current working directory as a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n\"os.getcwd\"\n```\n\n----------------------------------------\n\nTITLE: Dropping All Except First Row\nDESCRIPTION: Example demonstrating how to drop all rows except the first one using range syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3,4,5] | drop nth 1..\n╭───┬───╮\n│ 0 │ 0 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Updating a Column Value in a Record\nDESCRIPTION: Example showing how to update a simple record's 'name' field from 'nu' to 'Nushell' using the update command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> {'name': 'nu', 'stars': 5} | update name 'Nushell'\n╭───────┬─────────╮\n│ name  │ Nushell │\n│ stars │ 5       │\n╰───────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Detecting Duplicate Rows in DataFrame\nDESCRIPTION: Example demonstrating how to identify duplicate rows in a structured dataframe with multiple columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-duplicated.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a, b]; [1 2] [1 2] [3 3] [3 3] [1 1]] | polars into-df | polars is-duplicated\n```\n\n----------------------------------------\n\nTITLE: Applying All-True After Comparison Operations\nDESCRIPTION: This example shows how to use the all-true command to verify if all values in a dataframe meet a specific condition. It creates a dataframe from an array, performs a comparison, and then checks if all results are true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_all-true.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet s = ([5 6 2 8] | polars into-df);\nlet res = ($s > 9);\n$res | polars all-true\n```\n\n----------------------------------------\n\nTITLE: Creating Infinite Ranges in Nushell\nDESCRIPTION: Shows how to create an infinite range by omitting the end value. The range starts at 1 and continues indefinitely until interrupted.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> 1..\n# => infinite range starting at 1\n```\n\n----------------------------------------\n\nTITLE: Updating Record Values in Nushell\nDESCRIPTION: Demonstrates using the update command to modify a record value. The example creates a record with name and age fields, then increments the age value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet my_record = {\n name: \"Sam\"\n age: 30\n }\n$my_record | update age { $in + 1 }\n```\n\n----------------------------------------\n\nTITLE: str substring Command Signature in Nushell\nDESCRIPTION: The signature syntax for the 'str substring' command, showing its basic structure including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_substring.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str substring {flags} (range) ...rest\n```\n\n----------------------------------------\n\nTITLE: Character Replacement in String\nDESCRIPTION: Replaces multiple characters in a string with 'X' using reduce and str replace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n[ i o t ] | reduce --fold \"Arthur, King of the Britons\" {|it, acc| $acc | str replace --all $it \"X\" }\n```\n\n----------------------------------------\n\nTITLE: Running a Script File in Current Context using Nushell\nDESCRIPTION: Demonstrates how to use the 'source' command to run a script file named 'foo.nu' in the current context.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> source foo.nu\n```\n\n----------------------------------------\n\nTITLE: Defining a Local-Scope Command in a Nushell Module\nDESCRIPTION: Shows how to define a command that changes the directory locally within a module without affecting the parent scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\nexport def examine-config-dir [] {\n    # Changes the PWD environment variable\n    cd $nu.default-config-dir\n    ls\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering processes by CPU usage in Nushell\nDESCRIPTION: This snippet filters the output of the `ps` command to display only processes that are actively using the CPU. It utilizes the `where` command to filter the table returned by `ps` based on CPU usage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n\tps | where cpu > 0\n\n```\n\n----------------------------------------\n\nTITLE: Defining Command with String Input-Output Signature in Nushell\nDESCRIPTION: Shows how to define a custom command with an explicit input-output signature, specifying that the command accepts a string and outputs a record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_29\n\nLANGUAGE: nu\nCODE:\n```\ndef \"str stats\" []: string -> record { }\n```\n\n----------------------------------------\n\nTITLE: Join Two Lazy Dataframes with Inner Join\nDESCRIPTION: Demonstrates how to join two lazy dataframes using an inner join, matching column 'a' from the first dataframe with column 'foo' from the second dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_join.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet df_a = ([[a b c];[1 \"a\" 0] [2 \"b\" 1] [1 \"c\" 2] [1 \"c\" 3]] | polars into-lazy)\nlet df_b = ([[\"foo\" \"bar\" \"ham\"];[1 \"a\" \"let\"] [2 \"c\" \"var\"] [3 \"c\" \"const\"]] | polars into-lazy)\n$df_a | polars join $df_b a foo | polars collect\n```\n\n----------------------------------------\n\nTITLE: Requesting Help for a Single Module - NuShell\nDESCRIPTION: The snippet showcases the usage of the 'help modules' command to get information on a single module named 'my-module'. It requires the module’s name as a parameter and returns detailed help about the specified module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_modules.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> help modules my-module\n\n```\n\n----------------------------------------\n\nTITLE: Appending to PATH in Nushell\nDESCRIPTION: Demonstrates how to append a new path to the PATH environment variable using Nushell's split and append commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/setup.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.PATH = ($env.PATH | split row (char esep) | append \"some/other/path\")\n```\n\n----------------------------------------\n\nTITLE: Moving Multiple Files to a Directory in Nushell\nDESCRIPTION: Demonstrates moving all .txt files in the current directory to a subdirectory using wildcard matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mv.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> mv *.txt my/subdirectory\n```\n\n----------------------------------------\n\nTITLE: Filtering Trips by Duration Threshold\nDESCRIPTION: Filters DataFrame to include only trips with duration greater than or equal to 500 seconds and displays the first 5 rows\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/polars_v_pandas_v_nushell.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n$df | polars filter-with ((polars col trip_duration) >= 500) | polars first 5 | polars collect\n```\n\n----------------------------------------\n\nTITLE: Using Format Command in Nushell\nDESCRIPTION: Example of using the new format command to convert table data into formatted strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> ls | format \"name is {name}\"\n```\n\n----------------------------------------\n\nTITLE: Rejecting Columns and Rows in Nushell\nDESCRIPTION: The 'reject' command is used to remove specified columns or rows from a table. It is the opposite of the 'select' command. It can be used with various data structures including lists, records, and tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reject.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> reject {flags} ...rest\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | reject modified\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a, b]; [1, 2]] | reject a\n╭───┬───╮\n│ # │ b │\n├───┼───┤\n│ 0 │ 2 │\n╰───┴───╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a, b]; [1, 2] [3, 4]] | reject 1\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 2 │\n╰───┴───┴───╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> {a: 1, b: 2} | reject a\n╭───┬───╮\n│ b │ 2 │\n╰───┴───╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> {a: {b: 3, c: 5}} | reject a.b\n╭───┬───────────╮\n│   │ ╭───┬───╮ │\n│ a │ │ c │ 5 │ │\n│   │ ╰───┴───╯ │\n╰───┴───────────╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name type size]; [Cargo.toml toml 1kb] [Cargo.lock toml 2kb] [file.json json 3kb]] | reject 0 2\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name type size]; [Cargo.toml toml 1kb] [Cargo.lock toml 2kb]] | reject type size\n╭───┬────────────╮\n│ # │    name    │\n├───┼────────────┤\n│ 0 │ Cargo.toml │\n│ 1 │ Cargo.lock │\n╰───┴────────────╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> let cols = [type size]; [[name type size]; [Cargo.toml toml 1kb] [Cargo.lock toml 2kb]] | reject ...$cols\n╭───┬────────────╮\n│ # │    name    │\n├───┼────────────┤\n│ 0 │ Cargo.toml │\n│ 1 │ Cargo.lock │\n╰───┴────────────╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | reject 1\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Defining match Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'match' command, including flags, value, and match_block parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/match.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nmatch {flags} (value) (match_block)\n```\n\n----------------------------------------\n\nTITLE: Logging with Different Levels in Nushell\nDESCRIPTION: Shows how to use various logging commands from the Nushell standard library to output messages at different log levels.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n@[code](@snippets/book/std_log.nu)\n```\n\n----------------------------------------\n\nTITLE: Appending Columns to Polars DataFrame in Nushell\nDESCRIPTION: Demonstrates how to append new columns to an existing Polars DataFrame using the 'polars with-column' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\nlet df_4 = $df_3 | polars with-column $df_3.a --name a2 | polars with-column $df_3.a --name a3\n$df_4\n```\n\n----------------------------------------\n\nTITLE: Nushell Pipeline Example\nDESCRIPTION: This snippet demonstrates a basic Nushell pipeline that opens a `Cargo.toml` file, updates a dependency, and saves the modified content to a new file.  It illustrates the flow of data from input to filter to output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"open Cargo.toml | update workspace.dependencies.base64 0.24.2 | save Cargo_new.toml\"\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Dataframes in Nushell\nDESCRIPTION: This example shows how to concatenate three separate dataframes directly with the concat command without using a pipeline. The result is collected and sorted by columns 'a' and 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_concat.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\npolars concat ([[a b]; [1 2]] | polars into-df) ([[a b]; [3 4]] | polars into-df) ([[a b]; [5 6]] | polars into-df)\n                    | polars collect\n                    | polars sort-by [a b]\n```\n\n----------------------------------------\n\nTITLE: Reverse Table Sorting\nDESCRIPTION: Example showing how to sort a table by a column in reverse order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort-by.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[fruit count]; [apple 9] [pear 3] [orange 7]] | sort-by fruit --reverse\n```\n\n----------------------------------------\n\nTITLE: Basic String Splitting Example - Nushell\nDESCRIPTION: Demonstrates splitting a simple string 'hello' into individual characters, resulting in a list of characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_chars.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'hello' | split chars\n╭───┬───╮\n│ 0 │ h │\n│ 1 │ e │\n│ 2 │ l │\n│ 3 │ l │\n│ 4 │ o │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Setting Specific DateTime\nDESCRIPTION: Example showing how to set a specific datetime for a file's accessed time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> touch -a -t 2019-08-24T12:30:30 fixture.json\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing a TSV File with Headers\nDESCRIPTION: Demonstrates creating a TSV file with header columns and then opening and parsing it using the from tsv command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_tsv.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n$'c1(char tab)c2(char tab)c3(char nl)1(char tab)2(char tab)3' | save tsv-data | open tsv-data | from tsv\n```\n\n----------------------------------------\n\nTITLE: Creating Alias Expressions with polars as in Nushell\nDESCRIPTION: Demonstrates how to create an alias for a column named 'a' and rename it to 'new_a' using the polars plugin. The example pipes together multiple polars commands and displays the resulting expression structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_as.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars col a | polars as new_a | polars into-nu\n╭───────┬────────────────────╮\n│       │ ╭───────┬────────╮ │\n│ expr  │ │ expr  │ column │ │\n│       │ │ value │ a      │ │\n│       │ ╰───────┴────────╯ │\n│ alias │ new_a              │\n╰───────┴────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Git Log with Custom Format\nDESCRIPTION: Git log with custom format using pipe delimiter to separate commit details.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=\"%h|%s|%aN|%aE|%aD\" -n 25\n```\n\n----------------------------------------\n\nTITLE: Getting the directory of the current file in Nushell\nDESCRIPTION: Example of getting the path of the directory containing the current file using 'path self' with the '.' parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_self.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> const current_file = path self .\n```\n\n----------------------------------------\n\nTITLE: Converting Table with Schema Specification\nDESCRIPTION: Example demonstrating how to convert a table to a lazy dataframe while specifying column types in the schema and displaying the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-lazy.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b];[1 2] [3 4]] | polars into-lazy --schema {b: str} | polars schema\n```\n\n----------------------------------------\n\nTITLE: Converting Nushell Table to YAML Format Example\nDESCRIPTION: An example demonstrating how to convert a Nushell table to YAML format. The table contains a single row with 'foo' and 'bar' columns, and the output is formatted as YAML.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_yml.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [\"1\" \"2\"]] | to yml\n- foo: '1'\n  bar: '2'\n\n```\n\n----------------------------------------\n\nTITLE: Natural Sorting with Mixed Numbers in Nushell\nDESCRIPTION: Shows natural sorting with a mix of numbers, strings, and floating-point values using the -n flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\nlet data = [4, \"6.2\", 1, \"10\", 2, 8.1, \"3\", 5.5, \"9\", 7]\n$data | sort -n\n```\n\n----------------------------------------\n\nTITLE: Computing Median of Number List\nDESCRIPTION: Example showing how to compute the median of a simple list of numbers in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_median.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [3 8 9 12 12 15] | math median\n10.5\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Values in Subset Columns\nDESCRIPTION: Shows how to find unique values in specific columns of a lazyframe using the subset flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unique.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b c]; [1 2 1] [2 2 2] [3 2 1]] | polars into-lazy | polars unique --subset [b c] | polars collect\n```\n\n----------------------------------------\n\nTITLE: Encoding UTF-8 to Shift-JIS in Nushell\nDESCRIPTION: Example showing how to encode a Japanese UTF-8 string into Shift-JIS encoding format with hexadecimal output display.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> \"負けると知って戦うのが、遥かに美しいのだ\" | encode shift-jis\nLength: 40 (0x28) bytes | printable whitespace ascii_other non_ascii\n00000000:   95 89 82 af  82 e9 82 c6  92 6d 82 c1  82 c4 90 ed   ×××××××××m××××××\n00000010:   82 a4 82 cc  82 aa 81 41  97 79 82 a9  82 c9 94 fc   ×××××××A×y××××××\n00000020:   82 b5 82 a2  82 cc 82 be                             ××××××××\n```\n\n----------------------------------------\n\nTITLE: String Contains Assertion Example\nDESCRIPTION: Demonstrates string containment assertion without using specialized assert command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nlet a = \"foo\"\nlet b = \"bar\"\nassert ($b | str contains $a)\n```\n\n----------------------------------------\n\nTITLE: Selective String Trimming with Options\nDESCRIPTION: Shows how to trim specific characters from a particular side of a string using the trim command with options.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n'=== Nu shell ===' | str trim -r -c '='\n# => === Nu shell\n```\n\n----------------------------------------\n\nTITLE: Copying Files with cp Command\nDESCRIPTION: Demonstrates file copying functionality in Nushell using the cp command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncp source_file destination_path\n```\n\n----------------------------------------\n\nTITLE: Setting Values at Specific Indices in Polars Series\nDESCRIPTION: Example demonstrating how to set values at specific indices in a Polars series using set-with-idx. Creates a series, defines indices, and sets the value 6 at those indices.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_set-with-idx.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet series = ([4 1 5 2 4 3] | polars into-df);\nlet indices = ([0 2] | polars into-df);\n$series | polars set-with-idx 6 --indices $indices\n```\n\n----------------------------------------\n\nTITLE: Trimming Specific Character from String in Nushell\nDESCRIPTION: Shows how to use the 'str trim' command with the --char flag to remove a specific character from both ends of a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_trim.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n'=== Nu shell ===' | str trim --char '='\n```\n\n----------------------------------------\n\nTITLE: Nushell Alias Command Signature\nDESCRIPTION: Shows the command signature for creating aliases in Nushell, including flags and required parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/alias.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> alias {flags} (name) (initial_value)\n```\n\n----------------------------------------\n\nTITLE: Removing directory module auto-exports\nDESCRIPTION: This code shows how to export submodules from modules in Nushell after the removal of directory module auto-exports in version 0.89.0. Previously, all .nu files in a directory were automatically exported when using `use spam`. Now, you need to explicitly export each module in the `mod.nu` file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-01-09-nushell_0_89_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n```nushell\nexport module foo.nu\nexport module bar.nu\nexport module baz.nu\n```\n```\n\n----------------------------------------\n\nTITLE: Replace Directory Path\nDESCRIPTION: Example showing how to replace the parent directory path with a custom path using the --replace flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_dirname.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> '/home/joe/code/test.txt' | path dirname --num-levels 2 --replace /home/viking\n/home/viking/code/test.txt\n```\n\n----------------------------------------\n\nTITLE: Adding New Column via Schema and Filling Nulls in Nushell\nDESCRIPTION: Example showing how to add a new column through schema specification and then fill null values with a default using the polars fill-null command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 \"foo\"] [2 \"bar\"]] | polars into-df -s {a: u8, b:str, c:i64} | polars fill-null 3\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Values with Polars value-counts in Nushell\nDESCRIPTION: Shows how to count occurrences of unique values in a Series using the polars value-counts command. The example counts how many times each unique value appears in the 'first' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_36\n\nLANGUAGE: nushell\nCODE:\n```\n$df_1 | polars get first | polars value-counts\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Timezone in Nushell\nDESCRIPTION: The 'date to-timezone' command converts a date to a given time zone. It accepts a time zone description as a parameter and can work with both datetime and string inputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_to-timezone.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndate to-timezone {flags} (time zone)\n```\n\n----------------------------------------\n\nTITLE: Renaming a Specific Column in Nushell\nDESCRIPTION: Illustrates renaming a specific column using the --column flag with a record\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rename.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[a, b, c]; [1, 2, 3]] | rename --column { a: ham }\n```\n\n----------------------------------------\n\nTITLE: Defining Nushell 'config' Command Signature\nDESCRIPTION: Specifies the command signature for the 'config' command in Nushell. This command is used to edit Nushell configuration files and requires the use of subcommands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```> config {flags} ```\n```\n\n----------------------------------------\n\nTITLE: Calculate Column Averages in Table\nDESCRIPTION: Example showing how to compute averages for each column in a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_avg.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | math avg\n╭───┬───╮\n│ a │ 2 │\n│ b │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Custom Sort Order in Nushell\nDESCRIPTION: Demonstrates using a custom sort closure with the -c flag to define custom sorting logic.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nls | sort-by -c {|a, b| $a.size < $b.size }\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from End of String in Nushell\nDESCRIPTION: Shows how to use the 'str trim' command with the --right flag to remove whitespace only from the end of a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_trim.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n' Nu shell ' | str trim --right\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoxide Command Overrides in Nushell\nDESCRIPTION: Configuration for Zoxide command overrides in the multiple completer system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/external_completers.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n{\n    z => $zoxide_completer\n    zi => $zoxide_completer\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Extension and Prefix in Nushell\nDESCRIPTION: This snippet demonstrates how to filter a list of files to show only those that end with a specific extension or start with a particular prefix using the 'ends-with' and 'starts-with' operators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-15-top-nushell-hacks.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n❯ ls | where name ends-with .toml or name starts-with Car\n```\n\n----------------------------------------\n\nTITLE: Inferring Nushell Values for All Cells in a Table\nDESCRIPTION: Example showing how to infer Nushell values for all cells in a table using the 'into value' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_value.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> $table | into value\n\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float in Table using Nushell\nDESCRIPTION: Convert a string representation of a number within a table to a floating point number in Nushell. No external dependencies are required, but it presumes the input is in a string format that can be parsed as a float. The expected output is a table with the specified column converted.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_float.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> [[num]; ['5.01']] | into float num\n╭───┬──────╮\n│ # │ num  │\n├───┼──────┤\n│ 0 │ 5.01 │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Converting External Command Output to Text\nDESCRIPTION: Example showing how to process external command output into text format using pipes and filters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_text.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> git help -a | lines | find -r '^ ' | to text\n\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Environment Variables with with-env in Nushell\nDESCRIPTION: Demonstrates how to use the 'with-env' command to set temporary environment variables for a specific command block. This allows for environment variables that only exist for the duration of the specified command execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-05-12-nushell_0_14_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> with-env [DEBUG true] { command arg1 arg2 }\n```\n\n----------------------------------------\n\nTITLE: Command Signature for items Filter\nDESCRIPTION: Shows the formal signature for the `items` filter in Nushell, which takes a closure as an argument and operates on record types\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/items.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> items {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Performing Arithmetic Operations on Polars Series in Nushell\nDESCRIPTION: Shows how to perform arithmetic operations on a Polars Series to create a new Series in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_20\n\nLANGUAGE: nu\nCODE:\n```\nlet df_6 = $df_5 * 3 + 10\n$df_6\n```\n\n----------------------------------------\n\nTITLE: Reversing a List in Nushell\nDESCRIPTION: Example showing how to reverse a simple numeric list, producing a table with reversed order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reverse.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [0,1,2,3] | reverse\n╭───┬───╮\n│ 0 │ 3 │\n│ 1 │ 2 │\n│ 2 │ 1 │\n│ 3 │ 0 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Duration in Nushell\nDESCRIPTION: This example shows how to calculate the time duration between the current date and a specific date in the past.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_now.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n(date now) - 2019-05-01\n```\n\n----------------------------------------\n\nTITLE: Conditional Command Behavior in Nushell\nDESCRIPTION: Extends the 'ezal' command to conditionally change its behavior based on provided parameters, checking for the '-G' flag to determine whether to use long-listing format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_28\n\nLANGUAGE: nu\nCODE:\n```\ndef --wrapped ezal [...rest] {\n  if '-G' in $rest {\n    eza ...$rest\n  } else {\n    eza -l --icons ...$rest\n  }\n}\n\nezal -G commands\n# => categories  docs  README.md\n```\n\n----------------------------------------\n\nTITLE: Storing Pipeline Input in Nushell Commands\nDESCRIPTION: Shows how to use the $in variable to store and process pipeline input within a custom command, allowing for more complex data manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\ndef nullify [...cols] {\n  let start = $in\n  $cols | reduce --fold $start { |col, table|\n    $table | upsert $col null\n  }\n}\n\nls | nullify name size\n# => ╭───┬──────┬──────┬──────┬───────────────╮\n# => │ # │ name │ type │ size │   modified    │\n# => ├───┼──────┼──────┼──────┼───────────────┤\n# => │ 0 │      │ file │      │ 8 minutes ago │\n# => │ 1 │      │ file │      │ 8 minutes ago │\n# => │ 2 │      │ file │      │ 8 minutes ago │\n# => ╰───┴──────┴──────┴──────┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Int to Compact Binary in Nushell\nDESCRIPTION: This snippet shows how to convert an integer into a compact binary primitive, reducing the size of the output without padding zeros.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_binary.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> 10 | into binary --compact\nLength: 1 (0x1) bytes | printable whitespace ascii_other non_ascii\n00000000:   0a                                                   _\n\n```\n\n----------------------------------------\n\nTITLE: Using the --columns Flag with to tsv in Nushell\nDESCRIPTION: Demonstrates how to use the --columns flag to specify which columns to include and their order in the TSV output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_tsv.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[foo bar baz]; [1 2 3]] | to tsv --columns [baz foo]\nbazfoo\n31\n\n```\n\n----------------------------------------\n\nTITLE: Updating Zero Value Cells in Specific Columns in Nushell\nDESCRIPTION: An example showing how to use the 'update cells' command with the -c flag to replace zero values in only specified columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update_cells.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [\n        [\"2021-04-16\", \"2021-06-10\", \"2021-09-18\", \"2021-10-15\", \"2021-11-16\", \"2021-11-17\", \"2021-11-18\"];\n        [          37,            0,            0,            0,           37,            0,            0]\n    ] | update cells -c [\"2021-11-18\", \"2021-11-17\"] { |value|\n            if $value == 0 {\n              \"\"\n            } else {\n              $value\n            }\n    }\n```\n\n----------------------------------------\n\nTITLE: Extracting a Field from a Specific Record in Nushell\nDESCRIPTION: Shows how to get the 'name' field from the third record in the output of the 'ls' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> ls | get name.2\n\n```\n\n----------------------------------------\n\nTITLE: Capturing Foreign Shell Environment Changes\nDESCRIPTION: Complex implementation for capturing environment variable changes after executing a foreign shell script. Supports multiple shells and handles variable capturing through environment diffing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/foreign_shell_scripts.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef capture-foreign-env [\n    --shell (-s): string = /bin/sh\n    # The shell to run the script in\n    # (has to support '-c' argument and POSIX 'env', 'echo', 'eval' commands)\n    --arguments (-a): list<string> = []\n    # Additional command line arguments to pass to the foreign shell\n] {\n    let script_contents = $in;\n    let env_out = with-env { SCRIPT_TO_SOURCE: $script_contents } {\n        ^$shell ...$arguments -c `\n        env\n        echo '<ENV_CAPTURE_EVAL_FENCE>'\n        eval \"$SCRIPT_TO_SOURCE\"\n        echo '<ENV_CAPTURE_EVAL_FENCE>'\n        env -u _ -u _AST_FEATURES -u SHLVL` # Filter out known changing variables\n    }\n    | split row '<ENV_CAPTURE_EVAL_FENCE>'\n    | {\n        before: ($in | first | str trim | lines)\n        after: ($in | last | str trim | lines)\n    }\n\n    # Unfortunate Assumption:\n    # No changed env var contains newlines (not cleanly parseable)\n    $env_out.after\n    | where { |line| $line not-in $env_out.before } # Only get changed lines\n    | parse \"{key}={value}\"\n    | transpose --header-row --as-record\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Table Column as Links in Nushell\nDESCRIPTION: Example of converting a column in a Nushell table into clickable links using the ansi link command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_link.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[url text]; [https://example.com Text]] | ansi link url\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Mask from List in Nushell for Polars\nDESCRIPTION: Illustrates how to create a boolean mask from a Nushell list and use it to filter a Polars DataFrame.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_28\n\nLANGUAGE: nu\nCODE:\n```\nlet mask_1 = [true true false] | polars into-df\n$df_9 | polars filter-with $mask_1\n```\n\n----------------------------------------\n\nTITLE: Converting a String to Lowercase in Nushell\nDESCRIPTION: Example showing how to convert an uppercase string 'NU' to lowercase using the str downcase command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_downcase.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 'NU' | str downcase\nnu\n```\n\n----------------------------------------\n\nTITLE: Viewing Documented Environment Configuration\nDESCRIPTION: Command to display a commented env.nu file with documentation using the --doc flag and highlighting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_env.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> config env --doc | nu-highlight,\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Null Values in a List using Nushell's 'default' Command\nDESCRIPTION: Illustrates how to replace null values in a list with a default value using the 'default' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/default.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1, 2, null, 4] | each { default 3 }\n```\n\n----------------------------------------\n\nTITLE: Identifying Repetitions in a String with Nushell\nDESCRIPTION: This example shows how to use 'chunk-by' to group consecutive identical elements in a list of characters, effectively identifying repetitions in a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/chunk-by.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [a b b c c c] | chunk-by { |it| $it }\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Records in Nushell\nDESCRIPTION: This command flattens nested records into a list of path-value pairs. It recursively processes records, lists, and tables, using a specified separator for path construction. The command includes error handling for unexpected input types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_25\n\nLANGUAGE: nushell\nCODE:\n```\nexport def \"flatten record-paths\" [\n    --separator (-s): string = \".\"    # The separator to use when chaining paths\n] {\n    let input = $in\n\n    if ($input | describe) !~ \"record\" {\n        error make {msg: \"The record-paths command expects a record\"}\n    }\n\n    $input | flatten-record-paths $separator\n}\n\ndef flatten-record-paths [separator: string, ctx?: string] {\n    let input = $in\n    match ($input | describe-primitive) {\n        \"record\" => {\n            $input\n            | items { |key, value|\n                  let path = if $ctx == null { $key } else { [$ctx $key] | str join $separator }\n                  {path: $path, value: $value}\n              }\n            | reduce -f [] { |row, acc|\n                  $acc\n                  | append ($row.value | flatten-record-paths $separator $row.path)\n                  | flatten\n              }\n        },\n        \"list\" => {\n            $input\n            | enumerate\n            | each { |e|\n                  {path: ([$ctx $e.index] | str join $separator), value: $e.item}\n              }\n        },\n        \"table\" => {\n            $input | enumerate | each { |r| $r.item | flatten-record-paths $separator ([$ctx $r.index] | str join $separator) }\n        }\n        \"block\" | \"closure\" => { \n            error make {msg: \"Unexpected type\"} \n        },\n        _ => {\n            {path: $ctx, value: $input}\n        },\n    }\n}\n\n#[test]\ndef test_record_path [] {\n    assert equal ({a: 1} | flatten record-paths) [{path: \"a\", value: 1}]\n    assert equal ({a: 1, b: [2 3]} | flatten record-paths) [[path value]; [a 1] [\"b.0\" 2] [\"b.1\" 3]]\n    assert equal ({a: 1, b: {c: 2}} | flatten record-paths) [[path value]; [a 1] [\"b.c\" 2]]\n    assert equal ({a: {b: {c: null}}} | flatten record-paths -s \"->\") [[path value]; [\"a->b->c\" null]]\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Plugin Manually in Nushell\nDESCRIPTION: Commands to manually stop a plugin and verify its stopped status\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\nplugin stop gstat\nplugin list | where name == gstat | select name is_running\n```\n\n----------------------------------------\n\nTITLE: Getting Group Indices in Polars DataFrame Operations\nDESCRIPTION: This example demonstrates how to use the 'polars agg-groups' command to obtain the group index of group-by operations in a Polars DataFrame, showing how data points are associated with their respective groups.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_agg-groups.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[group value]; [one 94] [one 95] [one 96] [two 97] [two 98] [two 99]]\n                | polars into-df\n                | polars group-by group\n                | polars agg (polars col value | polars agg-groups)\n                | polars collect\n                | polars sort-by group\n```\n\n----------------------------------------\n\nTITLE: Converting a Specific Column in a Table to Lowercase in Nushell\nDESCRIPTION: Example showing how to convert only the 'ColA' column values to lowercase in a table using the str downcase command with a column name parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_downcase.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[ColA ColB]; [Test ABC]] | str downcase ColA\n╭───┬──────┬──────╮\n│ # │ ColA │ ColB │\n├───┼──────┼──────┤\n│ 0 │ test │ ABC  │\n╰───┴──────┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Basic Shell Commands Demonstration\nDESCRIPTION: Example showing how Nu handles file listings and process information as structured data that can be filtered and manipulated uniformly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls\n```\n\nLANGUAGE: shell\nCODE:\n```\nps\n```\n\n----------------------------------------\n\nTITLE: Complete Command Usage Example in Nu Shell\nDESCRIPTION: Demonstrates how to use the complete command to capture output from an external command including stdout, stderr, and exit code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/complete.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ^external arg1 | complete\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Polars group-by in Nushell\nDESCRIPTION: Creates and benchmarks a Nushell script that uses the Polars plugin for group-by operations. This demonstrates the performance advantages of using the Polars dataframe engine in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n( 'polars open Data7602DescendingYearOrder.csv\n    | polars group-by year\n    | polars agg (polars col geo_count | polars sum)\n    | polars collect'\n| save load.nu -f )\n```\n\nLANGUAGE: nu\nCODE:\n```\nbench -n 10 --pretty {\n    nu load.nu | complete | null\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the current file path in Nushell\nDESCRIPTION: Example of getting the path of the current file using the 'path self' command and storing it in a constant.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_self.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> const current_file = path self\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with ls Command\nDESCRIPTION: Use the `ls` command to list contents of a directory, with optional file filtering using globs\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/explorando.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls\n```\n\nLANGUAGE: shell\nCODE:\n```\nls \\*.md\n```\n\nLANGUAGE: shell\nCODE:\n```\nls **/*.md\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Boolean in Table - Nushell\nDESCRIPTION: This snippet demonstrates how to convert multiple values from a table into boolean values using the 'into bool' command in Nushell. The command processes entries in the specified column and returns the corresponding boolean results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> [[value]; ['false'] ['1'] [0] [1.0] [true]] | into bool value\n╭───┬───────╮\n│ # │ value │\n├───┼───────┤\n│ 0 │ false │\n│ 1 │ true  │\n│ 2 │ false │\n│ 3 │ true  │\n│ 4 │ true  │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Echo Command Signature\nDESCRIPTION: Basic syntax and signature of the echo command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/echo.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> echo {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Git Checkout External Command Definition\nDESCRIPTION: External command definition for git checkout with custom completions and parameter definitions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nextern \"git checkout\" [\n  branch?: string@\"nu-complete git branches\" # name of the branch to checkout\n  -b: string                                 # create and checkout a new branch\n  -B: string                                 # create/reset and checkout a branch\n  # note: other parameters removed for brevity\n]\n```\n\n----------------------------------------\n\nTITLE: Polars Set-With-Idx Command Signature\nDESCRIPTION: Command signature showing the basic syntax for using polars set-with-idx with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_set-with-idx.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars set-with-idx {flags} (value)\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `str` to Python's string functions\nDESCRIPTION: Shows the equivalent of Nushell's `str` command in Python, referring to the various built-in string functions and methods available in Python for string manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n\"str functions\"\n```\n\n----------------------------------------\n\nTITLE: Enumeration Example in Nushell\nDESCRIPTION: Demonstrates using enumerate with each command for index-based iteration without mutable variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nls | enumerate | each { |elt| $\"Item #($elt.index) is size ($elt.item.size)\" }\n# => ╭───┬───────────────────────────╮\n# => │ 0 │ Item #0 is size 812 B     │\n# => │ 1 │ Item #1 is size 3.4 KiB   │\n# => │ 2 │ Item #2 is size 11.0 KiB  │\n# => │ 3 │ ...                       │\n# => │ 4 │ Item #18 is size 17.8 KiB │\n# => │ 5 │ Item #19 is size 482 B    │\n# => │ 6 │ Item #20 is size 4.0 KiB  │\n# => ╰───┴───────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Record in nushell\nDESCRIPTION: This snippet converts a date string to a record detailing each component of the date such as year, month, day, and timezone. The expected input is a date string and the output is a detailed record with date components as keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_record.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 2020-04-12T22:10:57+02:00 | into record\n```\n\n----------------------------------------\n\nTITLE: Appending String to File in Nushell\nDESCRIPTION: Shows how to append a string to the end of an existing file 'foo.txt' using the 'save' command with the '--append' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/save.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n'append me' | save --append foo.txt\n```\n\n----------------------------------------\n\nTITLE: Saving Error Messages With Stderr Flag in Nushell\nDESCRIPTION: Example demonstrating how to save error messages from an external command while maintaining the original output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tee.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> nu -c 'print -e error; print ok' | tee --stderr { save error.log } | complete\n```\n\n----------------------------------------\n\nTITLE: Combined Stdout and Stderr Pipe Redirection in Nushell\nDESCRIPTION: Shows how to redirect both stdout and stderr of an external command as input to another command using a combined pipe in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\nnu -c 'print output; print -e error' o+e>| str upcase\n```\n\n----------------------------------------\n\nTITLE: Multiple Parameters Closure\nDESCRIPTION: Example of running a closure with two positional parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> do {|x,y| $x + $y } 77 100\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean to Bits String - Nushell\nDESCRIPTION: Example of converting a boolean value to a binary string representation padded to 8 places with zeros.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_bits.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> true | format bits\n00000001\n```\n\n----------------------------------------\n\nTITLE: Setting Default Target for File Entries in Nushell\nDESCRIPTION: Demonstrates how to use the 'default' command to add a 'target' column with a default value to all file entries returned by 'ls -la'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/default.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ls -la | default 'nothing' target\n```\n\n----------------------------------------\n\nTITLE: Using Prefixed Overlays in Nushell\nDESCRIPTION: This snippet shows how to use the 'overlay use --prefix' command to keep the definitions of the module accessible under a namespace. It illustrates how to still call the function with the prefixed module name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n(zero)> module spam {\n    export def foo [] { \"foo\" }\n}\n\n(zero)> overlay use --prefix spam\n\n(spam)> spam foo\nfoo\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Polars Implode in Nushell\nDESCRIPTION: Creates a dataframe, implodes all columns using wildcard selection, and collects the results. This demonstrates how implode creates lists containing all row values for each column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_implode.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 4] [2 5] [3 6]] | polars into-df | polars select (polars col '*' | polars implode) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Duration (Normalization) in Nushell\nDESCRIPTION: Shows how to normalize one duration unit into another. In this example, 420 seconds is automatically converted to 7 minutes for a more human-readable representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_duration.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n420sec | into duration\n```\n\n----------------------------------------\n\nTITLE: Converting Array to JSON with Default Indentation\nDESCRIPTION: Demonstrates converting a simple array to JSON string using default indentation settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_json.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [a b c] | to json\n[\n  \"a\",\n  \"b\",\n  \"c\"\n]\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from String in Nushell\nDESCRIPTION: Demonstrates how to use the 'str trim' command to remove whitespace from both ends of a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_trim.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n'Nu shell ' | str trim\n```\n\n----------------------------------------\n\nTITLE: Replace String in DataFrame Column\nDESCRIPTION: Demonstrates how to replace all occurrences of 'a' with 'A' in a DataFrame column\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_replace-all.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[a]; [abac] [abac] [abac]] | polars into-df | polars select (polars col a | polars replace-all --pattern a --replace A) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Verbose Recursive Copy\nDESCRIPTION: Example of recursively copying a directory with verbose output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> cp -r -v dir_a dir_b\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer within Specific Range in Nushell\nDESCRIPTION: Example of generating a random integer between 0 (inclusive) and 500 (inclusive) using the 'random int' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_int.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> random int ..500\n```\n\n----------------------------------------\n\nTITLE: Query JSON with modifier\nDESCRIPTION: This example shows how to use a modifier with `query json`.  The `children|@reverse|0` query first reverses the `children` array using `@reverse` and then selects the first element (index 0) of the reversed array. The output is the last element of the original `children` array.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_json.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> '{\"children\": [\"Sara\",\"Alex\",\"Jack\"]}' | query json \"children|@reverse|0\"\nJack\n```\n\n----------------------------------------\n\nTITLE: Viewing Internal Default Environment Configuration\nDESCRIPTION: Command to display the internal env.nu file that loads before user environment settings using the --default flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_env.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> config env --default | nu-highlight,\n\n```\n\n----------------------------------------\n\nTITLE: Sampling Dataframe with Seed in Nushell\nDESCRIPTION: Demonstrates sampling a single row from a dataframe using a predefined seed for reproducibility with the 'polars sample' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sample.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4] [5 6]] | polars into-df | polars sample --seed 1 --n-rows 1\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 5 │ 6 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Converting SNAKE_CASE to Kebab-case in Nushell\nDESCRIPTION: Demonstrates converting a SNAKE_CASE string to kebab-case format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_kebab-case.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 'THIS_IS_THE_SECOND_CASE' | str kebab-case\nthis-is-the-second-case\n```\n\n----------------------------------------\n\nTITLE: Interpreting Non-False String as True - Nushell\nDESCRIPTION: This snippet uses the 'into bool' command with the --relaxed flag to demonstrate how any non-false, non-zero string ('something') is interpreted as true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> 'something' | into bool --relaxed\ntrue\n```\n\n----------------------------------------\n\nTITLE: Displaying Tail Rows of Polars Dataframe in Nushell\nDESCRIPTION: This example shows how to display the tail rows of a Polars dataframe converted to a Nushell value. It limits the output to one row and includes an index.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-nu.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [5 6] [3 4]] | polars into-df | polars into-nu --tail --rows 1 --index\n```\n\n----------------------------------------\n\nTITLE: Using Pipeline Input in Closures with $in Variable\nDESCRIPTION: Demonstrates how to use the special $in variable to access pipeline input within a closure without declaring an explicit parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/closure.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n1..10 | each { print $in }\n```\n\n----------------------------------------\n\nTITLE: Polars Query Command Signature\nDESCRIPTION: The basic command signature for executing SQL queries on dataframes using the polars plugin.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_query.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars query {flags} (sql)\n```\n\n----------------------------------------\n\nTITLE: Type-based Pattern Matching Function in Nushell\nDESCRIPTION: Implements a custom str append function that handles both strings and lists of strings using type pattern matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/pattern_matching.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"str append\" [tail: string]: [string -> string, list<string> -> list<string>] {\n    let input = $in\n    match ($input | describe | str replace --regex '<.*' '') {\n        \"string\" => { $input ++ $tail },\n        \"list\" => { $input | each {|el| $el ++ $tail} },\n        _ => $input\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Word Count Example\nDESCRIPTION: Example showing how to count words in a basic English string, displaying various text statistics.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_stats.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> \"There are seven words in this sentence\" | str stats\n╭───────────────┬────╮\n│ lines         │ 1  │\n│ words         │ 7  │\n│ bytes         │ 38 │\n│ chars         │ 38 │\n│ graphemes     │ 38 │\n│ unicode-width │ 38 │\n╰───────────────┴────╯\n```\n\n----------------------------------------\n\nTITLE: Decoding Bytes to String in Nushell\nDESCRIPTION: The 'decode' command in Nushell is used to convert binary data into a string using a specified encoding. It takes an encoding parameter and supports various text encodings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> decode {flags} (encoding)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Completion Options in Nushell\nDESCRIPTION: This example configures advanced options for custom completions in Nushell, such as case sensitivity, sorting, and completion algorithm settings. The command `animals` returns a record containing both `options` for completion behavior and a list of `completions`. The command `my-command` utilizes these completions with specified configurations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_completions.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ndef animals [] {\n    {\n        options: {\n            case_sensitive: false,\n            completion_algorithm: prefix,\n            positional: false,\n            sort: false,\n        },\n        completions: [cat, rat, bat]\n    }\n}\ndef my-command [animal: string@animals] { print $animal }\n```\n\n----------------------------------------\n\nTITLE: Character-wise Splitting - Nushell\nDESCRIPTION: Example demonstrating splitting a string into individual characters while removing empty columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_column.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'abc' | split column --collapse-empty ''\n```\n\n----------------------------------------\n\nTITLE: Creating DataFrame from Nushell Primitives\nDESCRIPTION: Demonstrates how to create a DataFrame from basic Nushell data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\nlet df_3 = [[a b]; [1 2] [3 4] [5 6]] | polars into-df\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with Headers in Nushell\nDESCRIPTION: Demonstrates how to pass headers directly as a record when making HTTP requests, showcasing the improved header handling in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-08-22-nushell_0_84_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nhttp get -H {cookie: \"acc=foobar\"} http://example.com\n```\n\n----------------------------------------\n\nTITLE: Multiple Directory Exclusion with Nushell glob\nDESCRIPTION: Example showing how to search for all files while excluding multiple directories (target and .git) from the search.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n> glob **/* --exclude [**/target/** **/.git/** */]\n\n```\n\n----------------------------------------\n\nTITLE: Converting String Date to Different Timezone in Nushell\nDESCRIPTION: This example demonstrates how to convert a date string to a different time zone using the 'date to-timezone' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_to-timezone.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n\"2020-10-10 10:00:00 +02:00\" | date to-timezone \"+0500\"\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values from a List in Nushell\nDESCRIPTION: This snippet shows how to return multiple values from a list by utilizing the `input list` command with the `--multi` flag, allowing the user to select several options from the provided fruits.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input_list.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [Banana Kiwi Pear Peach Strawberry] | input list --multi 'Add fruits to the basket'\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin from a Custom Registry File in Nushell\nDESCRIPTION: Example of removing the 'polars' plugin from a specific plugin registry file named 'polars.msgpackz' using the --plugin-config flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_rm.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> plugin rm --plugin-config polars.msgpackz polars\n\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v5 (Namespace with SHA1) in Nushell\nDESCRIPTION: This example shows how to generate a UUID v5 string, which uses a namespace and name with SHA1 hashing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_uuid.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nrandom uuid -v 5 -n dns -s example.com\n```\n\n----------------------------------------\n\nTITLE: Parsing ICS formatted string into a table using Nushell\nDESCRIPTION: This code snippet demonstrates the usage of the 'from ics' command in Nushell, which takes an ICS formatted string as input and converts it into a table with various categories. The input must be a properly formatted ICS string, and it produces a table output representing the components of the ICS file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_ics.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 'BEGIN:VCALENDAR\nEND:VCALENDAR' | from ics\n```\n\n----------------------------------------\n\nTITLE: Match Command with Catch-all Branch in Nushell\nDESCRIPTION: Shows how to use the match command with a catch-all branch (using underscore) to handle cases when no specific match is found.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nlet foo = match 7 {\n    1 => 'one',\n    2 => 'two',\n    3 => 'three',\n    _ => 'other number'\n}\n$foo\n# => other number\n```\n\n----------------------------------------\n\nTITLE: Slicing Bytes Across Multiple Table Columns in Nushell\nDESCRIPTION: This example shows how to extract bytes starting from index 1 across multiple columns in a table. The command processes each specified column separately.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> [[ColA ColB ColC]; [0x[11 12 13] 0x[14 15 16] 0x[17 18 19]]] | bytes at 1.. ColB ColC\n╭───┬──────────────┬──────────┬──────────╮\n│ # │     ColA     │   ColB   │   ColC   │\n├───┼──────────────┼──────────┼──────────┤\n│ 0 │ [17, 18, 19] │ [21, 22] │ [24, 25] │\n╰───┴──────────────┴──────────┴──────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping List into Table with Column Name in Nushell\nDESCRIPTION: Demonstrates how to use the 'wrap' command to convert a list of game names into a table with a 'game' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/wrap.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [ Pachisi Mahjong Catan Carcassonne ] | wrap game\n╭───┬─────────────╮\n│ # │    game     │\n├───┼─────────────┤\n│ 0 │ Pachisi     │\n│ 1 │ Mahjong     │\n│ 2 │ Catan       │\n│ 3 │ Carcassonne │\n╰───┴─────────────╯\n```\n\n----------------------------------------\n\nTITLE: Default Parameter Closure\nDESCRIPTION: Example of running a closure with a default parameter value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> 77 | do {|x=100| $x + $in }\n```\n\n----------------------------------------\n\nTITLE: Viewing Nushell Configuration Documentation\nDESCRIPTION: Command that displays the Nushell configuration documentation with syntax highlighting and paging for easier reading.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nconfig nu --doc | nu-highlight | less -R\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Unnest Command Signature\nDESCRIPTION: The basic command signature for the polars unnest operation showing the syntax and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unnest.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars unnest {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command with Rest Parameters in Nushell\nDESCRIPTION: This snippet shows how to use rest parameters in custom Nushell commands to accept any number of arguments. It includes examples of using rest parameters alone and in combination with other parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_25\n\nLANGUAGE: nushell\nCODE:\n```\ndef multi-greet [...names: string] {\n  for $name in $names {\n    print $\"Hello, ($name)!\"\n  }\n}\n\nmulti-greet Elin Lars Erik\n# => Hello, Elin!\n# => Hello, Lars!\n# => Hello, Erik!\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef vip-greet [vip: string, ...names: string] {\n  for $name in $names {\n    print $\"Hello, ($name)!\"\n  }\n\n  print $\"And a special welcome to our VIP today, ($vip)!\"\n}\n\n#         $vip          $name\n#         ----- -------------------------\nvip-greet Rahul Priya Arjun Anjali Vikram\n# => Hello, Priya!\n# => Hello, Arjun!\n# => Hello, Anjali!\n# => Hello, Vikram!\n# => And a special welcome to our VIP today, Rahul!\n```\n\nLANGUAGE: nushell\nCODE:\n```\nlet vip = \"Tanisha\"\nlet guests = [ Dwayne, Shanice, Jerome ]\nvip-greet $vip ...$guests\n# => Hello, Dwayne!\n# => Hello, Shanice!\n# => Hello, Jerome!\n# => And a special welcome to our VIP today, Tanisha!\n```\n\n----------------------------------------\n\nTITLE: Converting a Record to XML in Nushell\nDESCRIPTION: Example showing how to convert a Nushell record with nested structure into XML format. This creates a simple XML with a 'note' tag containing a 'remember' tag with text content.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_xml.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> {tag: note attributes: {} content : [{tag: remember attributes: {} content : [{tag: null attributes: null content : Event}]}]} | to xml\n<note><remember>Event</remember></note>\n```\n\n----------------------------------------\n\nTITLE: Authenticated HTTP PATCH Request\nDESCRIPTION: Send an HTTP PATCH request with username and password authentication\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_patch.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nhttp patch --user myuser --password mypass https://www.example.com 'body'\n```\n\n----------------------------------------\n\nTITLE: Filling an Empty String\nDESCRIPTION: This snippet shows how to fill an empty string with a specified character up to a defined width. It utilizes the 'fill' command to achieve this.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/fill.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '' | fill --character '─' --width 10\n──────────\n```\n\n----------------------------------------\n\nTITLE: Trimming Specific Character from End of String in Nushell\nDESCRIPTION: Demonstrates the use of 'str trim' command with both --right and --char flags to remove a specific character only from the end of a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_trim.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n'=== Nu shell ===' | str trim --right --char '='\n```\n\n----------------------------------------\n\nTITLE: Compact Hello Column Example\nDESCRIPTION: Example showing how to filter out records where the 'Hello' column contains null values\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/compact.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[\"Hello\" \"World\"]; [null 3]] | compact Hello\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'bytes build' Command in Nushell\nDESCRIPTION: Specifies the syntax for using the 'bytes build' command, including flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_build.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes build {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Taking Range Elements\nDESCRIPTION: Example of taking the first three elements from a range in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> 1..10 | take 3\n```\n\n----------------------------------------\n\nTITLE: Accessing Element at Index in C#\nDESCRIPTION: Shows how to access an element at a specific index in a data structure using `ElementAt` in C#. It is similar to the `nth` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n\"ElementAt\"\n```\n\n----------------------------------------\n\nTITLE: Adding Directories to the Stack in Nushell\nDESCRIPTION: Example of using dirs add to add a new directory to the stack while changing the active directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/directory_stack.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ndirs add ../reedline\ndirs\n# => ╭───┬────────┬──────────────────────────────────╮\n# => │ # │ active │               path               │\n# => ├───┼────────┼──────────────────────────────────┤\n# => │ 0 │ false  │ /home/myuser/src/repo/nushell    │\n# => │ 1 │ true   │ /home/myuser/src/repo/reedline   │\n# => ╰───┴────────┴──────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating External Command Parsing\nDESCRIPTION: This Nushell snippet demonstrates the use of bare word interpolation and glob handling with external commands. It showcases various ways to interpolate expressions within external command options and arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n^echo --foo=(2 + 2) # prints --foo=4\n^echo -foo=$\"(2 + 2)\" # prints -foo=4\n^echo foo=\"(2 + 2)\" # prints (no interpolation!) foo=(2 + 2)\n^echo foo,(2 + 2),bar # prints foo,4,bar\n```\n\nLANGUAGE: nushell\nCODE:\n```\nlet name = \"exa\"\n~/.cargo/bin/($name) # this works, and expands the tilde\n^$\"~/.cargo/bin/($name)\" # this doesn\\'t expand the tilde\n^echo ~/($name)/* # this glob is expanded\n^echo $\"~/($name)/*\" # this isn\\'t expanded\n```\n\nLANGUAGE: nushell\nCODE:\n```\n^(\"~/.cargo/bin/exa\" | into glob) # the tilde is expanded\n^echo (\"*.txt\" | into glob) # this glob is expanded\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Comparison with uniq --ignore-case in Nushell\nDESCRIPTION: Shows how to use the '--ignore-case' flag to perform case-insensitive comparisons when finding distinct values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> ['hello' 'goodbye' 'Hello'] | uniq --ignore-case\n╭───┬─────────╮\n│ 0 │ hello   │\n│ 1 │ goodbye │\n╰───┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Format Current DateTime with Custom Format\nDESCRIPTION: Example of formatting the current datetime using a custom format string pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_date.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> date now | format date \"%Y-%m-%d %H:%M:%S\"\n\n```\n\n----------------------------------------\n\nTITLE: Timing a Simple Command with Sleep in Nushell\nDESCRIPTION: Example of using timeit to measure execution time of a closure that sleeps for 500 milliseconds.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/timeit.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> timeit { sleep 500ms }\n```\n\n----------------------------------------\n\nTITLE: Parsing System Output with detect columns in Nushell\nDESCRIPTION: Demonstrates using str replace and detect columns to parse df command output into a structured table. The example shows how to handle column headers with spaces by replacing them with underscores.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndf -h | str replace \"Mounted on\" Mounted_On | detect columns\n```\n\n----------------------------------------\n\nTITLE: Nushell Python Plugin Timeit Comparison (0.92.0)\nDESCRIPTION: This snippet demonstrates the execution time of a Python plugin command using `timeit` in Nushell version 0.92.0. It calculates the average execution time for 1000 iterations of executing the `nu-python` command, showcasing performance improvements due to persistent plugins.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n\n# 0.92.0 (47x faster!)\n> 1..1000 | each { timeit { nu-python 1 foo } } | math avg\n871µs 410ns\n\n```\n\n----------------------------------------\n\nTITLE: Saving DataFrame to Avro\nDESCRIPTION: Example of saving a dataframe to Avro format\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars save test.avro\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Signature Usage in Nushell\nDESCRIPTION: Displays a plugin signature example in Nushell, detailing its usage, flags, and parameters. Useful for understanding how to execute and apply plugins with specific configurations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\nPluginSignature test 1 for plugin. Returns Value::Nothing\n\nExtra usage for nu-example-1\n\nSearch terms: example\n\nUsage:\n  > nu-example-1 {flags} <a> <b> (opt) ...(rest)\n\nFlags:\n  -h, --help - Display the help message for this command\n  -f, --flag - a flag for the signature\n  -n, --named <String> - named string\n\nParameters:\n  a <int>: required integer value\n  b <string>: required string value\n  opt <int>: Optional number (optional)\n  ...rest <string>: rest value string\n\nExamples:\n  running example with an int value and string value\n  > nu-example-1 3 bb\n```\n\n----------------------------------------\n\nTITLE: Initialize SSH Agent in Nushell\nDESCRIPTION: Basic SSH agent initialization script that parses and loads environment variables from ssh-agent output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/ssh_agent.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n^ssh-agent -c\n    | lines\n    | first 2\n    | parse \"setenv {name} {value};\"\n    | transpose -r\n    | into record\n    | load-env\n```\n\n----------------------------------------\n\nTITLE: Example of Using polars arg-where to Filter Dataframe in Nushell\nDESCRIPTION: Demonstrates how to use `polars arg-where` to find the arguments where a condition is true, specifically returning indices where the 'b' column values are greater than or equal to 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-where.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> let df = ([[a b]; [one 1] [two 2] [three 3]] | polars into-df);\n    $df | polars select (polars arg-where ((polars col b) >= 2) | polars as b_arg)\n╭───┬───────╮\n│ # │ b_arg │\n├───┼───────┤\n│ 0 │     1 │\n│ 1 │     2 │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Paths in Nushell\nDESCRIPTION: This example shows how to parse a list of paths, returning a table where each row contains the components of one path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_parse.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [ /home/viking.d /home/spam.txt ] | path parse\n╭───┬────────┬────────┬───────────╮\n│ # │ parent │  stem  │ extension │\n├───┼────────┼────────┼───────────┤\n│ 0 │ /home  │ viking │ d         │\n│ 1 │ /home  │ spam   │ txt       │\n╰───┴────────┴────────┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Moving a File to a Parent Directory in Nushell\nDESCRIPTION: Shows how to move a file to a directory two levels up in the directory tree using the '...' notation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mv.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> mv test.txt .../my/\n```\n\n----------------------------------------\n\nTITLE: MessagePack Conversion to Nushell Value\nDESCRIPTION: Converts MessagePack format data into Nushell values.  It takes MessagePack data as input and outputs corresponding Nushell values. The `--objects` flag can be used to read a stream of multiple MessagePack objects.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[a7 4e 75 73 68 65 6c 6c] | from msgpack\nNushell\n\n# Open a MessagePack formatted file:\n> open nushell.msgpack\n╭─────────┬───────╮\n│ nushell │ rocks │\n╰─────────┴───────╯\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> open --raw ~/nu_plugin_example.in.raw | from msgpack --objects\n╭───┬─────────────────────────────────────────────────╮\n│ 0 │ ╭───────┬────────────────────────────────────╮  │\n│   │ │       │ ╭──────────┬─────────────────────╮ │  │\n│   │ │ Hello │ │ protocol │ nu-plugin           │ │  │\n│   │ │       │ │ version  │ 0.93.0              │ │  │\n│   │ │       │ │          │ ╭───┬─────────────╮ │ │  │\n│   │ │       │ │ features │ │ # │    name     │ │ │  │\n│   │ │       │ │          │ ├───┼─────────────┤ │ │  │\n│   │ │       │ │          │ │ 0 │ LocalSocket │ │ │  │\n│   │ │       │ │          │ ╰───┴─────────────╯ │ │  │\n│   │ │       │ ╰──────────┴─────────────────────╯ │  │\n│   │ ╰───────┴────────────────────────────────────╯  │\n│   │                                                 │\n│ 1 │ ...                                             │\n│ 2 │ ...                                             │\n│ 3 │ ...                                             │\n│ 4 │ ...                                             │\n│   │                                                 │\n│ 5 │ Goodbye                                         │\n╰───┴─────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Find Using Regex\nDESCRIPTION: Example demonstrating regex pattern matching in a list of strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [abc bde arc abf] | find --regex \"ab\"\n╭───┬─────╮\n│ 0 │ abc │\n│ 1 │ abf │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Replace All Binary Occurrences in Nushell\nDESCRIPTION: Example of finding and replacing all occurrences of a specific binary pattern (0x[10]) with another pattern (0x[A0]) using the --all flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_replace.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[10 AA 10 BB 10] | bytes replace --all 0x[10] 0x[A0]\n```\n\n----------------------------------------\n\nTITLE: Get Columns from Record Example\nDESCRIPTION: Example showing how to extract column names from a record containing acronym and meaning fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/columns.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> { acronym:PWD, meaning:'Print Working Directory' } | columns\n```\n\n----------------------------------------\n\nTITLE: Searching for Rust Files with Nushell glob\nDESCRIPTION: Example showing how to use the glob command to search for all Rust (.rs) files in the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> glob *.rs\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of 'sys' Command in Nushell\nDESCRIPTION: This example demonstrates how to use the 'sys' command to show information about the system. The command is run without any arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> sys\n```\n\n----------------------------------------\n\nTITLE: Converting a Sentence to Title Case in Nushell\nDESCRIPTION: Example demonstrating how to convert a multi-word sentence to Title Case format using the 'str title-case' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_title-case.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'this is a test case' | str title-case\nThis Is A Test Case\n```\n\n----------------------------------------\n\nTITLE: Using from tsv to Convert Basic Tab-Separated Data\nDESCRIPTION: Demonstrates converting simple tab-separated data to a Nushell table, maintaining column headers from the input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_tsv.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"ColA\tColB\n1\t2\" | from tsv\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Text with Newline\nDESCRIPTION: Example showing how to convert a simple array to text output with a trailing newline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_text.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1] | to text\n1\n\n```\n\n----------------------------------------\n\nTITLE: Replace String in DataFrame\nDESCRIPTION: Shows how to replace all occurrences of 'a' with 'A' directly in a DataFrame\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_replace-all.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [abac abac abac] | polars into-df | polars replace-all --pattern a --replace A\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP PUT Request in Nushell\nDESCRIPTION: This Nushell snippet demonstrates how to perform an HTTP PUT request to a specified URL with the option to include request body data. It provides various flags for customization such as authentication, specifying content types, setting headers, and handling security settings. The command allows for input of any type and outputs any type, typically returning HTTP responses.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_put.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> http put {flags} (URL) (data)\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http put https://www.example.com 'body'\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http put --user myuser --password mypass https://www.example.com 'body'\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http put --headers [my-header-key my-header-value] https://www.example.com\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http put --content-type application/json https://www.example.com { field: value }\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> open --raw foo.json | http put https://www.example.com\n\n```\n\n----------------------------------------\n\nTITLE: Invoking a Basic Closure with the do Command in Nushell\nDESCRIPTION: Demonstrates how to directly invoke a closure that accepts two parameters and returns their sum using the 'do' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/closure.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndo {|a,b| $a + $b } 34 8\n```\n\n----------------------------------------\n\nTITLE: Navigating Within a File Structure in Nushell\nDESCRIPTION: Shows how Nushell allows navigation within file structures using cd commands and displaying content as structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n> enter Cargo.toml\n/> shells\n---+---+--------------------------------------------+-----------------------------\n # |   | name                                       | path\n---+---+--------------------------------------------+-----------------------------\n 0 |   | filesystem                                 | /home/sophia/Source/nushell\n 1 |   | filesystem                                 | /home/sophia/Source/rhai\n 2 | X | {/home/sophia/Source/nushell/Cargo.toml} | /\n---+---+--------------------------------------------+-----------------------------\n/> ls\n------------+--------------+------------------+----------+----------\n bin        | dependencies | dev-dependencies | lib      | package\n------------+--------------+------------------+----------+----------\n [11 items] | [object]     | [object]         | [object] | [object]\n------------+--------------+------------------+----------+----------\n/> cd bin\n/bin> ls\n----+----------------------+---------------------------\n #  | name                 | path\n----+----------------------+---------------------------\n 0  | nu_plugin_inc        | src/plugins/inc.rs\n 1  | nu_plugin_sum        | src/plugins/sum.rs\n 2  | nu_plugin_add        | src/plugins/add.rs\n 3  | nu_plugin_edit       | src/plugins/edit.rs\n 4  | nu_plugin_str        | src/plugins/str.rs\n 5  | nu_plugin_skip       | src/plugins/skip.rs\n 6  | nu_plugin_sys        | src/plugins/sys.rs\n 7  | nu_plugin_tree       | src/plugins/tree.rs\n 8  | nu_plugin_binaryview | src/plugins/binaryview.rs\n 9  | nu_plugin_textview   | src/plugins/textview.rs\n 10 | nu                   | src/main.rs\n----+----------------------+---------------------------\n```\n\n----------------------------------------\n\nTITLE: Searching from the End in Nushell\nDESCRIPTION: Searches for '/' in the path '/this/is/some/path/file.txt' starting from the end of the string using the -e flag. Returns 18, which is the position of the last slash.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_index-of.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n'/this/is/some/path/file.txt' | str index-of '/' -e\n```\n\n----------------------------------------\n\nTITLE: Calculating String Lengths in Nushell Dataframe\nDESCRIPTION: This example demonstrates how to use the 'polars str-lengths' command to calculate string lengths for a column in a Nushell dataframe. It creates a dataframe, selects a column, applies the str-lengths operation, and collects the results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-lengths.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a]; [a] [ab] [abc]] | polars into-df | polars select (polars col a | polars str-lengths) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Expanding Absolute Path Example\nDESCRIPTION: Demonstrates expanding a path containing parent directory references into its absolute form.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_expand.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/joe/foo/../bar' | path expand\n/home/joe/bar\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Shell Commands with Vue.js\nDESCRIPTION: This Vue.js component filters pages containing shell-related commands from the Nushell documentation. It sorts the commands alphabetically and prepares them for display in a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/shells.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('shells'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Full URL Encoding with All Flag in Nushell\nDESCRIPTION: Demonstrates using the --all flag to encode all non-alphanumeric characters, including forward slashes, dots, and colons that are normally preserved in standard URL encoding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_encode.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n'https://example.com/foo bar' | url encode --all\n```\n\n----------------------------------------\n\nTITLE: Environment Changes in Regular Custom Commands\nDESCRIPTION: Demonstrates how environment variable changes within a custom command are scoped to that command and do not persist after the command completes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_33\n\nLANGUAGE: nu\nCODE:\n```\ndef foo [] {\n    $env.FOO = 'After'\n}\n\n$env.FOO = \"Before\"\nfoo\n$env.FOO\n# => Before\n```\n\n----------------------------------------\n\nTITLE: Nushell test the range-into-list module\nDESCRIPTION: This code snippet demonstrates how to use the `range-into-list` module by piping a range to it and describing the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nuse range-into-list.nu\n1..5 | range-into-list | describe\n# => list<int> (stream)\n```\n\n----------------------------------------\n\nTITLE: Chaining 'if' statements in Nushell\nDESCRIPTION: This snippet demonstrates chaining multiple 'if' statements using 'else if' in Nushell. It checks the conditions sequentially and executes the corresponding block if a condition is met.  If none are met, the 'else' block is executed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/if.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n\"> if 5 < 3 { 'yes!' } else if 4 < 5 { 'no!' } else { 'okay!' }\"\n\n```\n\n----------------------------------------\n\nTITLE: Real-world example of using split words\nDESCRIPTION: This snippet provides a practical example of chaining commands in Nushell, using 'http get' to retrieve a text file, converting it to lowercase, and then applying 'split words' with additional processing to aggregate word occurrences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_words.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> http get https://www.gutenberg.org/files/11/11-0.txt | str downcase | split words --min-word-length 2 | uniq --count | sort-by count --reverse | first 10\n```\n\n----------------------------------------\n\nTITLE: Converting Table to MessagePack in Nushell\nDESCRIPTION: This example illustrates how to convert a table with event names and timestamps to MessagePack format using the 'to msgpack' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_msgpack.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[\n        [event_name time];\n        ['Apollo 11 Landing' 1969-07-24T16:50:35]\n        ['Nushell first commit' 2019-05-10T09:59:12-07:00]\n    ] | to msgpack\n```\n\n----------------------------------------\n\nTITLE: Comparing For Loop and Each Command in Nushell\nDESCRIPTION: Compares two approaches to process list elements: using a 'for' loop with mutable variables versus using the 'each' command in a pipeline. Both produce the same result but with different syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nmut result = []\nfor $it in [1 2 3] { $result = ($result | append ($it + 1)) }\n$result\n# => ╭───┬───╮\n# => │ 0 │ 2 │\n# => │ 1 │ 3 │\n# => │ 2 │ 4 │\n# => ╰───┴───╯\n\n\n[1 2 3] | each { $in + 1 }\n# => ╭───┬───╮\n# => │ 0 │ 2 │\n# => │ 1 │ 3 │\n# => │ 2 │ 4 │\n# => ╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Simplified XML Conversion in Nushell\nDESCRIPTION: Example demonstrating that null and empty record fields can be omitted when formatting XML, and strings can be written without a wrapping record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_xml.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> {tag: note content : [{tag: remember content : [Event]}]} | to xml\n<note><remember>Event</remember></note>\n```\n\n----------------------------------------\n\nTITLE: Strict Type Sorting in Nushell\nDESCRIPTION: Implements strict type checking during sorting to handle compatible and incompatible data types safely.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\nlet compatible = [8 3.2 null 58 2]\nlet incompatible = [\"hello\" 4 9 2 1 \"meow\" 8 6]\n$compatible | sort-by -c {|a, b| $a < $b | default ($a != null) }\n$incompatible | sort-by -c {|a, b| $a < $b | default ($a != null) }\n```\n\n----------------------------------------\n\nTITLE: Taking Elements Until Field Value is Positive in Nushell\nDESCRIPTION: Illustrates using 'take until' with a list of records. The command takes elements until it encounters a record where the 'a' field is positive.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_until.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a: -1} {a: -2} {a: 9} {a: 1}] | take until {|x| $x.a > 0 }\n```\n\n----------------------------------------\n\nTITLE: Get Columns from Table Example\nDESCRIPTION: Example demonstrating how to get column names from a table with name, age, and grade columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/columns.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name,age,grade]; [bill,20,a]] | columns\n```\n\n----------------------------------------\n\nTITLE: Moving Columns in a Record in Nushell\nDESCRIPTION: Illustrates how to use the 'move' command to reorder columns in a record, moving the 'name' field before the 'index' field.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/move.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> { name: foo, value: a, index: 1 } | move name --before index\n```\n\n----------------------------------------\n\nTITLE: Split String into Lines Example in Nushell\nDESCRIPTION: Demonstrates splitting a multi-line string into separate lines using the lines command, outputting a table with line numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/lines.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> $\"two\\nlines\" | lines\n╭───┬───────╮\n│ 0 │ two   │\n│ 1 │ lines │\n╰───┴───────╯\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Values into Records in Nushell\nDESCRIPTION: Shows how to insert new key-value pairs into an existing record using the insert command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n{ \"apples\": 543, \"bananas\": 411, \"oranges\": 0 }\n| insert pears { 21 }\n```\n\n----------------------------------------\n\nTITLE: Computing Fibonacci Numbers with Unfold in Nushell\nDESCRIPTION: Uses the unfold command to generate the first 10 Fibonacci numbers starting with the seed values [0, 1] and producing subsequent values through a transformation function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nunfold [0, 1] {|fib| {out: $fib.0, next: [$fib.1, ($fib.0 + $fib.1)]} } | first 10\n```\n\n----------------------------------------\n\nTITLE: Importing Commands with Spaces in Nushell\nDESCRIPTION: Demonstrates how to import and use commands with spaces in their names by surrounding them with quotes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/use.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam { export def 'foo bar' [] { \"baz\" } }; use spam 'foo bar'; foo bar\n```\n\n----------------------------------------\n\nTITLE: Rolling Table Cells Left with Fixed Headers\nDESCRIPTION: Example showing how to roll only the cell values left while keeping column headers fixed using the --cells-only flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_left.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b c]; [1 2 3] [4 5 6]] | roll left --cells-only\n╭───┬───┬───┬───╮\n│ # │ a │ b │ c │\n├───┼───┼───┼───┤\n│ 0 │ 2 │ 3 │ 1 │\n│ 1 │ 5 │ 6 │ 4 │\n╰───┴───┴───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Converting camelCase to Kebab-case in Nushell\nDESCRIPTION: Shows how to convert a camelCase string to kebab-case format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_kebab-case.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'thisIsTheFirstCase' | str kebab-case\nthis-is-the-first-case\n```\n\n----------------------------------------\n\nTITLE: List Last Value Sorting\nDESCRIPTION: Example demonstrating sorting by the last value in nested lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort-by.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [[2 50] [10 1]] | sort-by { last }\n```\n\n----------------------------------------\n\nTITLE: Defining External Command Signature in Nushell\nDESCRIPTION: This snippet demonstrates the syntax for defining an external command signature using the 'extern' keyword in Nushell. It specifies the command name, flags, and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/extern.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nextern {flags} (def_name) (params)\n```\n\n----------------------------------------\n\nTITLE: Basic List Sorting in Nushell\nDESCRIPTION: Demonstrates sorting a simple numeric list in ascending order using the sort command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[9 3 8 1 4 6] | sort\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing First Occurrence of a Substring in Nushell\nDESCRIPTION: Demonstrates how to replace the first occurrence of a substring in a path string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'c:\\some\\cool\\path' | str replace 'c:\\some\\cool' '~'\n~\\path\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Columns\nDESCRIPTION: Demonstrates selecting multiple columns (name and type) from a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/select.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name type size]; [Cargo.toml toml 1kb] [Cargo.lock toml 2kb]] | select name type\n╭───┬────────────┬──────╮\n│ # │    name    │ type │\n├───┼────────────┼──────┤\n│ 0 │ Cargo.toml │ toml │\n│ 1 │ Cargo.lock │ toml │\n╰───┴────────────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Value Structure for Nushell Plugins in JSON\nDESCRIPTION: Example of a Custom value structure used by Nushell plugins. This structure allows plugins to implement native-like data types with custom functionality that can be indexed, operated on, and compared in plugin-defined ways.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Custom\": {\n    \"val\": {\n      \"type\": \"PluginCustomValue\",\n      \"name\": \"database\",\n      \"data\": [36, 190, 127, 40, 12, 3, 46, 83],\n      \"notify_on_drop\": true\n    },\n    \"span\": {\n      \"start\": 320,\n      \"end\": 340\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Selecting DataFrame Columns in Nushell\nDESCRIPTION: Demonstrates how to filter and select specific columns from a DataFrame using polars select command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n$df_1 | polars sum | polars select int_1 int_2 float_1 float_2 | polars collect\n```\n\n----------------------------------------\n\nTITLE: Format Date Command Signature in Nushell\nDESCRIPTION: The basic command signature for formatting dates in Nushell, showing the required format string parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_date.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> format date {flags} (format string)\n```\n\n----------------------------------------\n\nTITLE: Sorting a Dataframe by Column Using Polars arg-sort in Nushell\nDESCRIPTION: Shows how to sort a dataframe by a specific column using polars arg-sort to generate indices for the polars take command. The example sorts the dataframe by the 'word' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_34\n\nLANGUAGE: nushell\nCODE:\n```\nlet indices_2 = $df_1 | polars get word | polars arg-sort\n$df_1 | polars take $indices_2\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Shape Colors in Nushell\nDESCRIPTION: Demonstrates how to customize colors for different syntax shapes and elements\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/coloring_and_theming.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    color_config: {\n        shape_garbage: { fg: \"#FFFFFF\" bg: \"#FF0000\" attr: b}\n        shape_bool: green\n        shape_int: { fg: \"#0000ff\" attr: b}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exploring Directory Listing Without Column Headers in Nushell\nDESCRIPTION: Shows how to use 'explore' to view the output of 'ls' command without displaying column names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/explore.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ls | explore --head false\n```\n\n----------------------------------------\n\nTITLE: Displaying the Signature of 'path type' Command in Nushell\nDESCRIPTION: Shows the command signature for the 'path type' command in Nushell which is used to determine file system object types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_type.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> path type {flags} \n```\n\n----------------------------------------\n\nTITLE: Sourcing and Executing Defined Command in Nushell\nDESCRIPTION: Shows how to source a file 'foo.nu' and then call a command defined within it. Assumes 'foo.nu' contains a function definition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> source ./foo.nu; say-hi\n```\n\n----------------------------------------\n\nTITLE: Creating a Scratchpad Overlay in Nushell\nDESCRIPTION: In this snippet, a temporary overlay named 'scratchpad' is used to record custom definitions without modifying the existing 'spam' overlay. This approach allows for maintaining separate sets of definitions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n(zero)> overlay use spam\n\n(spam)> module scratchpad { }\n\n(spam)> overlay use scratchpad\n\n(scratchpad)> def eggs [] { \"eggs\" }\n```\n\n----------------------------------------\n\nTITLE: Grouping Git Commits by Author in Nushell\nDESCRIPTION: This snippet retrieves Git commits from the last 365 days, groups them by author name, and transposes the result for a cleaner display. It demonstrates Nushell's ability to process and reshape complex data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 365day)) | group-by name | transpose\n```\n\n----------------------------------------\n\nTITLE: Sorting Directory Contents by Size\nDESCRIPTION: Shows how to sort directory listings using sort-by and reverse commands to display largest files first\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nls | sort-by size | reverse\n```\n\n----------------------------------------\n\nTITLE: Split Binary Data Using Binary Separator\nDESCRIPTION: Example showing how to split binary data using a binary separator (0x[20] which represents a space). The output is a list of binary values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_split.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[66 6F 6F 20 62 61 72 20 62 61 7A 20] | bytes split 0x[20]\n╭───┬─────────────────╮\n│ 0 │ [102, 111, 111] │\n│ 1 │ [98, 97, 114]   │\n│ 2 │ [98, 97, 122]   │\n│ 3 │ []              │\n╰───┴─────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Merging Records with Inner Tables\nDESCRIPTION: Demonstrates merging records containing inner tables using the default table strategy.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge_deep.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> {inner: [{a: 1}, {b: 2}]} | merge deep {inner: [{c: 3}]}\n```\n\n----------------------------------------\n\nTITLE: Recording Definitions in Overlays in Nushell\nDESCRIPTION: Shows how custom definitions (commands, aliases, environment variables) are recorded to the most recently activated overlay, and how these definitions persist even when overlays are hidden and reactivated.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n(zero)> overlay use spam\n\n(spam)> def eggs [] { \"eggs\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Unix-like fg Alias in Nushell\nDESCRIPTION: Shows how to create an alias to emulate the behavior of the Unix fg command for unfreezing background jobs, making the transition easier for users familiar with other shells.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/background_jobs.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nalias fg = job unfreeze\n```\n\n----------------------------------------\n\nTITLE: Using Environment Change Hooks for Definitions and Aliases\nDESCRIPTION: Demonstrates a hook configuration to manage command definitions and aliases based on directory changes. Focuses on conditional execution utilizing the `code` field defined as a string for dynamic command management.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks {\n    env_change: {\n        PWD: [\n            {\n                condition: {|_, after| $after == /some/path/to/directory }\n                code: 'def foo [] { print \"foo\" }'\n            }\n            {\n                condition: {|before, _| $before == /some/path/to/directory }\n                code: 'hide foo'\n            }\n        ]\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Expression Results in a List Column with Polars in Nushell\nDESCRIPTION: Creates a dataframe with numeric values and checks if the result of an expression (doubling a column value) is contained in a list column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_list-contains.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet df = [[a, b]; [[1,2,3], 4] [[2,4,1], 2] [[2,1,6], 3]] | polars into-df -s {a: list<i64>, b: i64};\n                let df2 = $df | polars with-column [(polars col a | polars list-contains ((polars col b) * 2) | polars as c)] | polars collect;\n                $df2.c\n```\n\n----------------------------------------\n\nTITLE: Building Nushell from source in release mode with Cargo\nDESCRIPTION: This command builds Nushell from source in release mode using Cargo, and then runs the built executable.  This compiles the Nushell code and its dependencies with optimizations enabled.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n\"You can also build and run Nu in release mode, which enables more optimizations:\"\n```\n\n----------------------------------------\n\nTITLE: Listing Recently Modified Directories\nDESCRIPTION: Example of using the 'ls' command with flags and filtering to list only the names of directories in the home directory not modified in the last 7 days.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> ls -as ~ | where type == dir and modified < ((date now) - 7day)\n```\n\n----------------------------------------\n\nTITLE: Converting Underscore String to PascalCase in Nushell\nDESCRIPTION: Example demonstrating how to convert a string with underscores to PascalCase using the str pascal-case command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_pascal-case.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 'this_is_the_second_case' | str pascal-case\nThisIsTheSecondCase\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v3 (Namespace with MD5) in Nushell\nDESCRIPTION: This example demonstrates generating a UUID v3 string, which uses a namespace and name with MD5 hashing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_uuid.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nrandom uuid -v 3 -n dns -s example.com\n```\n\n----------------------------------------\n\nTITLE: HTTP PATCH with Pipeline JSON Input\nDESCRIPTION: Send an HTTP PATCH request using JSON content from a pipeline\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_patch.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nopen --raw foo.json | http patch https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Format String DateTime with Custom Format\nDESCRIPTION: Example of formatting a string datetime value using a custom date format pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_date.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> \"2021-10-22 20:00:12 +01:00\" | format date \"%Y-%m-%d\"\n2021-10-22\n```\n\n----------------------------------------\n\nTITLE: Unpivoting Lazy DataFrame Example\nDESCRIPTION: Example demonstrating unpivot operation on a lazy DataFrame with subsequent collection of results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unpivot.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b c d]; [x 1 4 a] [y 2 5 b] [z 3 6 c]] | polars into-lazy | polars unpivot -i [b c] -o [a d] | polars collect\n```\n\n----------------------------------------\n\nTITLE: Selecting Name Column\nDESCRIPTION: Example of selecting just the name column from directory listing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/select.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | select name\n```\n\n----------------------------------------\n\nTITLE: Creating masks for non-null values in Polars DataFrame in Nushell\nDESCRIPTION: This example demonstrates how to create a Boolean mask showing which values in a DataFrame are not null. It creates a DataFrame, performs division that results in some null values, then identifies all non-null values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-not-null.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet s = ([5 6 0 8] | polars into-df);\nlet res = ($s / $s);\n$res | polars is-not-null\n```\n\n----------------------------------------\n\nTITLE: Creating a string from list input in Nushell\nDESCRIPTION: Example showing how to join elements of a list into a single string without a separator using the 'str join' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_join.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ['nu', 'shell'] | str join\nnushell\n```\n\n----------------------------------------\n\nTITLE: Renaming Module Overlay\nDESCRIPTION: Example demonstrating how to create an overlay from a module and assign it a new name\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_use.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export def foo [] { \"foo\" } }\n    overlay use spam as spam_new\n    foo\n```\n\n----------------------------------------\n\nTITLE: Using polars arg-min Command in Nushell\nDESCRIPTION: Example demonstrating how to use the 'polars arg-min' command to find the index of the minimum value in a dataframe created from an array. The command first converts the array to a dataframe using 'polars into-df' and then applies 'polars arg-min'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-min.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[1 3 2] | polars into-df | polars arg-min\n```\n\n----------------------------------------\n\nTITLE: Example of using break in a Nushell loop\nDESCRIPTION: Demonstrates how to use the 'break' command to exit from a loop in Nushell. This example shows a simple loop that immediately breaks out.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/break.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> loop { break }\n\n```\n\n----------------------------------------\n\nTITLE: Saving DataFrame to NDJSON\nDESCRIPTION: Example of saving a dataframe to NDJSON format\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars save test.ndjson\n```\n\n----------------------------------------\n\nTITLE: Configuring Command History in Nushell\nDESCRIPTION: This snippet shows how to set the maximum size for stored command history in Nushell's configuration file, managed by Reedline. No external dependencies are required as it utilizes internal configuration settings. The maximum size is set by altering the 'max_size' parameter under 'history'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n    history: {\n      ...\n      max_size: 1000\n      ...\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Split List of Lists\nDESCRIPTION: Example demonstrating splitting a list of lists using [2,3] as separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_list.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[1,2], [2,3], [3,4]] | split list [2,3]\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Unix Timestamp in Nushell\nDESCRIPTION: Demonstrates converting a datetime value to its integer representation as a Unix nanosecond timestamp.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n1983-04-13T12:09:14.123456789-05:00 | into int\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table from In-Memory SQLite Database in Nushell\nDESCRIPTION: Example showing how to delete an entire table named 'nudb' from the in-memory SQLite database using the 'stor delete' command with the '--table-name' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_delete.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> stor delete --table-name nudb\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Command Using System Command with Piping\nDESCRIPTION: This snippet defines a function 'uuidgen' that calls the system program 'uuidgen' and pipes its output through 'tr' to modify the case, ensuring compatibility across environments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndef uuidgen [] { ^uuidgen | tr A-F a-f }\n```\n\n----------------------------------------\n\nTITLE: Output Unicode Character\nDESCRIPTION: Example showing how to output a Unicode character using the --unicode flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/char.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> char --unicode 1f378\n🍸\n```\n\n----------------------------------------\n\nTITLE: Calculate Variance on DataFrame Columns\nDESCRIPTION: Example showing how to calculate variance values from columns in a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_var.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars var | polars collect\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `skip until` to Python's `itertools.dropwhile`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `skip until` command using Python's `itertools.dropwhile`. This function drops elements from an iterable as long as a condition is true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n\"itertools.dropwhile\"\n```\n\n----------------------------------------\n\nTITLE: Zipping Two Lists Example\nDESCRIPTION: Demonstrates combining two simple numeric lists using the zip command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/zip.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2] | zip [3 4]\n```\n\n----------------------------------------\n\nTITLE: Spreading List Arguments in Nushell Command\nDESCRIPTION: Shows the difference between spreading a list with ... operator versus passing it as a single argument. The spread operator splits the list into separate arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nfoo \"bar\" \"baz\" ...[1 2 3] # With ..., the numbers are treated as separate arguments\n# => [false, bar, baz, [1, 2, 3]]\nfoo \"bar\" \"baz\" [1 2 3] # Without ..., [1 2 3] is treated as a single argument\n# => [false, bar, baz, [[1, 2, 3]]]\n```\n\n----------------------------------------\n\nTITLE: Printing Binary Data in Nushell\nDESCRIPTION: Example demonstrating how to print raw binary data using the --raw flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/print.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[41 42 43] | print --raw\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Date\nDESCRIPTION: Example showing how to set file timestamps to a relative date using the -d flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> touch -d \"yesterday\" a b c\n```\n\n----------------------------------------\n\nTITLE: Computing Standard Deviation of Table Columns in Nushell\nDESCRIPTION: This example illustrates how to calculate the standard deviation for each column in a table using the 'math stddev' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_stddev.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | math stddev\n╭───┬───╮\n│ a │ 1 │\n│ b │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: History Import Example\nDESCRIPTION: This code demonstrates how to import history from an alternate history file format into the current format. It shows how to change the file format, persist the change in the config, and import the old history to the new format, creating a backup if necessary.  The command `history import` is used to perform the migration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n\"# Current format is plain text\n# $env.config.history.file_format == plaintext\n\n# Change the file format. Make sure to set this in your config if you want to persist this change.\n$env.config.history.file_format = 'sqlite'\n\n# Import the old history to the new format. It will create a backup if necessary.\nhistory import\"\n```\n\n----------------------------------------\n\nTITLE: Getting a Substring Using Range in Nushell\nDESCRIPTION: Example of extracting the substring \"nushell\" from the text \"good nushell\" using a range from index 5 to 11.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_substring.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n>  'good nushell' | str substring 5..11\nnushell\n```\n\n----------------------------------------\n\nTITLE: Converting Specific Unit to Duration with --unit Flag in Nushell\nDESCRIPTION: Shows how to use the --unit flag to specify the unit of an integer input. This example converts 1,234 milliseconds into a duration with seconds and milliseconds.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_duration.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n1_234 | into duration --unit ms\n```\n\n----------------------------------------\n\nTITLE: Basic String Splitting - Nushell\nDESCRIPTION: Example showing how to split a string into columns using a double-dash separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_column.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'a--b--c' | split column '--'\n```\n\n----------------------------------------\n\nTITLE: Closures and Blocks Usage in Nushell\nDESCRIPTION: Examples showing the difference between closures (with parameters and variable capture) and blocks (simpler constructs used in control flow).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nls | each {|row| print $row.name }\n```\n\nLANGUAGE: nushell\nCODE:\n```\nif true {\n    print \"hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Table Values Example - Nushell\nDESCRIPTION: Example showing how to extract values from a table into a list of lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/values.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[name meaning]; [ls list] [mv move] [cd 'change directory']] | values\n╭───┬──────────────────────────╮\n│ 0 │ ╭───┬────╮               │\n│   │ │ 0 │ ls │               │\n│   │ │ 1 │ mv │               │\n│   │ │ 2 │ cd │               │\n│   │ ╰───┴────╯               │\n│ 1 │ ╭───┬──────────────────╮ │\n│   │ │ 0 │ list             │ │\n│   │ │ 1 │ move             │ │\n│   │ │ 2 │ change directory │ │\n│   │ ╰───┴──────────────────╯ │\n╰───┴──────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Extraction Example\nDESCRIPTION: Example demonstrating how to extract specific HTML attributes from elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_web.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://example.org | query web --query a --attribute href\n```\n\n----------------------------------------\n\nTITLE: Argument Type Handling Examples\nDESCRIPTION: Shows implicit vs explicit type handling for script arguments in Nushell\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n# implicit_type.nu\ndef main [x] {\n  $\"Hello ($x | describe) ($x)\"\n}\n\n# explicit_type.nu\ndef main [x: string] {\n  $\"Hello ($x | describe) ($x)\"\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\nnu implicit_type.nu +1\n# => Hello int 1\n\nnu explicit_type.nu +1\n# => Hello string +1\n```\n\n----------------------------------------\n\nTITLE: Recursive Listing of Specific File Types\nDESCRIPTION: Example of using the 'ls' command with the glob command to recursively list *.rs and *.toml files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n> ls ...(glob **/*.{rs,toml})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variable with Default Value in Nushell\nDESCRIPTION: Shows how to get an environment variable 'MY_ENV' with a default value of 'abc' if it's not present.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/default.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> $env | get --ignore-errors MY_ENV | default 'abc'\n```\n\n----------------------------------------\n\nTITLE: Nesting Raw Strings in Nushell\nDESCRIPTION: Demonstrates how to nest raw strings in Nushell using additional # symbols.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nr###'r##'This is an example of a raw string.'##'###\n# => r##'This is an example of a raw string.'##\n```\n\n----------------------------------------\n\nTITLE: Using split words with minimum word length\nDESCRIPTION: This snippet illustrates how to use the 'split words' command with the '--min-word-length' flag to filter out words shorter than 3 characters from the input string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_words.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'hello to the world' | split words --min-word-length 3\n╭───┬───────╮\n│ 0 │ hello │\n│ 1 │ the   │\n│ 2 │ world │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Ordered Parallel Number Multiplication\nDESCRIPTION: Example demonstrating parallel multiplication while maintaining original order using --keep-order flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/par-each.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | par-each --keep-order {|e| $e * 2 }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of polars arg-sort Command in Nushell\nDESCRIPTION: Returns indexes for a sorted series using the default ordering. This example converts a list to a dataframe and then gets the sorted indexes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-sort.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2 2 3 3] | polars into-df | polars arg-sort\n```\n\n----------------------------------------\n\nTITLE: Converting Table Column to PascalCase in Nushell\nDESCRIPTION: Example showing how to convert a specific column in a table to PascalCase format while preserving the table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_pascal-case.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [[lang, gems]; [nu_test, 100]] | str pascal-case lang\n╭───┬────────┬──────╮\n│ # │  lang  │ gems │\n├───┼────────┼──────┤\n│ 0 │ NuTest │  100 │\n╰───┴────────┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Computing Products of Table Columns\nDESCRIPTION: Example demonstrating how to calculate products for each column in a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_product.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | math product\n╭───┬───╮\n│ a │ 3 │\n│ b │ 8 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Displaying Lazy Dataframe in Repr Format using Nushell\nDESCRIPTION: This example shows how to convert a table to a Polars lazy dataframe and then display it in repr format. It demonstrates the same output structure for lazy dataframes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-repr.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [2025-01-01 2] [2025-01-02 4]] | polars into-df | polars into-lazy | polars into-repr\n```\n\n----------------------------------------\n\nTITLE: Matching Field in Record using Nushell\nDESCRIPTION: Shows how to match a specific field in a record using the 'match' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/match.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nmatch {a: 100} { {a: $my_value} => { $my_value } }\n```\n\n----------------------------------------\n\nTITLE: Moving Column Before First Column in Nushell\nDESCRIPTION: Demonstrates how to use the 'move' command to relocate the 'index' column before the 'name' column in a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/move.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name value index]; [foo a 1] [bar b 2] [baz c 3]] | move index --before name\n```\n\n----------------------------------------\n\nTITLE: Base16 Theme Color Definition in Nushell\nDESCRIPTION: Demonstrates defining color variables for a base16 theme with comprehensive color palette\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/coloring_and_theming.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nlet base00 = \"#181818\" # Standard Hinergrund\nlet base01 = \"#282828\" # Heller Hintergrund\nlet base02 = \"#383838\" # Auswahl Hintergrund\nlet base03 = \"#585858\" # Kommentare, Verstecktes\nlet base04 = \"#b8b8b8\" # Dunkler Vordergrund\nlet base05 = \"#d8d8d8\" # Standard Vordergrund\nlet base06 = \"#e8e8e8\" # Heller Vordergrund\nlet base07 = \"#f8f8f8\" # Heller Hintergrund\nlet base08 = \"#ab4642\" # Variablen, XML Tags\nlet base09 = \"#dc9656\" # Ganzzahlen, Boolean\nlet base0a = \"#f7ca88\" # Klassen, Markup fett\nlet base0b = \"#a1b56c\" # Strings, vererbte Klasse\nlet base0c = \"#86c1b9\" # Support, Reguläre Ausdrücke\nlet base0d = \"#7cafc2\" # Funktionen, Methoden\nlet base0e = \"#ba8baf\" # Keywörter, Speicher\nlet base0f = \"#a16946\" # Veraltet, eingebettete Sprach Tags\n```\n\n----------------------------------------\n\nTITLE: Converting a Nushell table to CSV\nDESCRIPTION: Demonstrates converting a simple table with two columns into CSV format with default comma separators and column headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_csv.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[foo bar]; [1 2]] | to csv\n```\n\n----------------------------------------\n\nTITLE: Decoding Single URL Example in Nushell\nDESCRIPTION: Example showing how to decode a single URL containing escaped spaces using the url decode command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_decode.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'https://example.com/foo%20bar' | url decode\nhttps://example.com/foo bar\n```\n\n----------------------------------------\n\nTITLE: Creating Exclusive Ranges in Nushell\nDESCRIPTION: Demonstrates creating an exclusive range using the ..<' syntax. This produces values up to but not including the end value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 1..<5\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 2 │\n│ 2 │ 3 │\n│ 3 │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Updating a Column Value in Nushell\nDESCRIPTION: This snippet demonstrates how to update the value of an existing column in a table using the update command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | update edition 2021\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variable in Nushell Engine (JSON)\nDESCRIPTION: Example of an AddEnvVar engine call to set an environment variable 'FOO' with value 'bar' in the caller's scope. The call includes context, id, and the variable details.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 7,\n    \"id\": 42,\n    \"call\": {\n      \"AddEnvVar\": [\n        \"FOO\",\n        {\n          \"String\": {\n            \"val\": \"bar\",\n            \"span\": {\n              \"start\": 2020,\n              \"end\": 2024\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Records Recursively Example\nDESCRIPTION: Demonstrates how to merge two nested records recursively using the merge deep command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge_deep.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> {a: 1, b: {c: 2, d: 3}} | merge deep {b: {d: 4, e: 5}}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Consumption in jq\nDESCRIPTION: Shows how to parse and display JSON input using jq's default behavior which expects JSON input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho '{\"title\": \"jq vs Nushell\", \"publication_date\": \"2023-11-20\"}' | jq -r '.'\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `match` to Kotlin's `match`\nDESCRIPTION: This maps the Nushell `match` command to its possible equivalent in Kotlin. No direct equivalent is available and is used in the documentation for reference.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\n\"match\"\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of 'into value' Command in Nushell\nDESCRIPTION: The signature for the 'into value' command showing its basic syntax with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_value.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> into value {flags} \n```\n\n----------------------------------------\n\nTITLE: Extracting Span Information from Metadata in Nu Shell\nDESCRIPTION: The snippet demonstrates extracting span information from the metadata of an opened file using Nu Shell. By running 'metadata (open Cargo.toml) | get span', users can view the start and end positions used for error message underlining. This requires a valid 'Cargo.toml' file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/metadata.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nmetadata (open Cargo.toml) | get span\n# => ╭───────┬────────╮\n# => │ start │ 212970 │\n# => │ end   │ 212987 │\n# => ╰───────┴────────╯\n\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE with Custom Header\nDESCRIPTION: Send an HTTP DELETE request with a custom header for additional request configuration\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_delete.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nhttp delete --headers [my-header-key my-header-value] https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Defining and Utilizing Default Arguments in Nushell\nDESCRIPTION: This snippet demonstrates defining custom commands with default arguments using Nushell's type system. It shows how default values no longer overwrite type annotations, allowing for more precise type control. Dependencies include the new Nushell type system. The 'foo' function accepts a parameter with a default null value, printing the type if provided.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_2\n\nLANGUAGE: Nushell\nCODE:\n```\ndef foo [x: any = null] { print $\"$x\" }\n\nfoo \"string\"  # will show `x: string`\nfoo null      # will show `x: `\n```\n\n----------------------------------------\n\nTITLE: Unnesting DataFrame Example\nDESCRIPTION: Example showing how to unnest a structured column in a DataFrame, converting a person struct into separate name and age columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unnest.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[id person]; [1 {name: \"Bob\", age: 36}] [2 {name: \"Betty\", age: 63}]]\n                    | polars into-df -s {id: i64, person: {name: str, age: u8}}\n                    | polars unnest person\n                    | polars get id name age\n                    | polars sort-by id\n```\n\n----------------------------------------\n\nTITLE: Using the Spread Operator in Record Literals in Nushell\nDESCRIPTION: This snippet illustrates how to use the spread operator within record literals to combine multiple records, demonstrating the addition of fields seamlessly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nlet config = { path: /tmp, limit: 5 }\n{\n  ...$config,\n  users: [alice bob],\n  ...{ url: example.com },\n  ...(sys mem)\n}\n# => ╭────────────┬───────────────╮\n# => │ path       │ /tmp          │\n# => │ limit      │ 5             │\n# => │            │ ╭───┬───────╮ │\n# => │ users      │ │ 0 │ alice │ │\n# => │            │ │ 1 │ bob   │ │\n# => │            │ ╰───┴───────╯ │\n# => │ url        │ example.com   │\n# => │ total      │ 8.3 GB        │\n# => │ free       │ 2.6 GB        │\n# => │ used       │ 5.7 GB        │\n# => │ available  │ 2.6 GB        │\n# => │ swap total │ 2.1 GB        │\n# => │ swap free  │ 18.0 MB       │\n# => │ swap used  │ 2.1 GB        │\n# => ╰────────────┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to the Registry (Windows)\nDESCRIPTION: This code snippet demonstrates how to add a plugin to the plugin registry on Windows systems. The `plugin add` command is used to tell Nushell where to find the plugin executable.  The `.exe` extension must be included.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nplugin add .\\my_plugins\\nu_plugin_cool.exe\n```\n\n----------------------------------------\n\nTITLE: Decoding External Command Output in Nushell\nDESCRIPTION: This example demonstrates how to decode the output of an external command (cat) using UTF-8 encoding in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ^cat myfile.q | decode utf-8\n```\n\n----------------------------------------\n\nTITLE: Join Path with Filename\nDESCRIPTION: Example showing how to append a filename to a base path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking' | path join spam.txt\n/home/viking/spam.txt\n```\n\n----------------------------------------\n\nTITLE: Opening an Application-Registered Protocol URL Using NuShell\nDESCRIPTION: This snippet demonstrates how to use the `start` command to open an application-registered protocol URL ('obsidian://open?vault=Test'). It requires the correct protocol to be associated with the corresponding application.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/start.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> start obsidian://open?vault=Test\n\n```\n\n----------------------------------------\n\nTITLE: Removing Byte Pattern from End of Binary Data in Nushell\nDESCRIPTION: Illustrates the use of the '--end' flag to remove a byte pattern from the end of binary data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_remove.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[10 AA 10 BB CC AA 10] | bytes remove --end 0x[10]\n```\n\n----------------------------------------\n\nTITLE: Converting Current Date to UTC+05:00 in Nushell\nDESCRIPTION: This example demonstrates how to get the current date in UTC+05:00 using the 'date to-timezone' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_to-timezone.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndate now | date to-timezone '+0500'\n```\n\n----------------------------------------\n\nTITLE: Create Temporary Directory\nDESCRIPTION: Creates a temporary directory with a randomly generated name in the system temporary directory using the -d flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mktemp.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> mktemp -d\n/tmp/tmp.NMw9fJr8K0\n```\n\n----------------------------------------\n\nTITLE: Checking if Any Value Equals Twice its Index in Nushell\nDESCRIPTION: Example showing how to use 'any' with 'enumerate' to check if any value in a list is equal to twice its own index.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/any.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [9 8 7 6] | enumerate | any {|i| $i.item == $i.index * 2 }\ntrue\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Rows with WHERE Clause in Nushell\nDESCRIPTION: Example demonstrating how to delete specific rows from a table in the in-memory SQLite database by using the 'stor delete' command with both '--table-name' and '--where-clause' flags to filter which rows to delete.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_delete.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> stor delete --table-name nudb --where-clause \"int1 == 5\"\n\n```\n\n----------------------------------------\n\nTITLE: Example: Getting Length of a String in Nushell\nDESCRIPTION: Demonstrates how to use the 'str length' command to return the length of a simple string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_length.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'hello' | str length\n5\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin from Custom Registry File in Nushell\nDESCRIPTION: Example showing how to load the 'query' plugin from a custom plugin registry file using the --plugin-config flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_use.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> plugin use --plugin-config local-plugins.msgpackz query\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `mkdir` to Python's `os.mkdir`\nDESCRIPTION: This maps the Nushell `mkdir` command to its equivalent in Python using the `os.mkdir` function.  It illustrates how to create directories in Python, similar to the functionality of `mkdir` in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"os.mkdir\"\n```\n\n----------------------------------------\n\nTITLE: Echo Piped Input Example\nDESCRIPTION: Example demonstrating how to echo the piped-in value using the special $in variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/echo.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> echo $in\n\n```\n\n----------------------------------------\n\nTITLE: Profiling a Grouped Lazy Dataframe in Nushell\nDESCRIPTION: Example showing how to use 'polars profile' to analyze the performance of a dataframe operation that groups data by column 'a' and calculates various aggregations on column 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_profile.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [1 4] [2 6] [2 4]]\n    | polars into-lazy\n    | polars group-by a\n    | polars agg [\n        (polars col b | polars min | polars as \"b_min\")\n        (polars col b | polars max | polars as \"b_max\")\n        (polars col b | polars sum | polars as \"b_sum\")\n     ]\n    | polars profile\n\n```\n\n----------------------------------------\n\nTITLE: Raw String Pattern Matching in Nushell\nDESCRIPTION: This code snippet demonstrates how to use raw strings as match patterns in Nushell. The `match` statement compares the string 'foo' against the raw string pattern r#'foo'#. If they match, it returns `true`; otherwise, it returns `false`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nmatch 'foo' {\n    r#'foo'# => true\n    _ => false\n}\n```\n\n----------------------------------------\n\nTITLE: Block-Scoped Environment Navigation\nDESCRIPTION: Demonstrates how environment changes are scoped to specific blocks\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/thinking_in_nushell.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nls | each { |elt|\n    cd $elt.name\n    make\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Command with Newlines - Nushell\nDESCRIPTION: Illustrates how to insert newlines manually in Nushell to format commands across multiple lines. This increases readability. Each line represents a separate part of the command pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n```nu\nls\n| where name =~ '^[0-9]'  # Files starting with a digit\n| get name\n| mv ...$in ./backups/\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an alias permanently in Nu\nDESCRIPTION: Defines an alias for all sessions and persist it in startup config using `alias --save myecho [msg] { echo Hello $msg }`. This creates an alias named 'myecho' which takes an argument `msg` and prints 'Hello' followed by the `msg`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_28\n\nLANGUAGE: nu\nCODE:\n```\n\"alias --save myecho [msg] { echo Hello $msg }\"\n```\n\n----------------------------------------\n\nTITLE: Standard Timestamp String Conversion to Datetime in Nushell\nDESCRIPTION: This snippet shows the conversion of a standard timestamp string to a datetime object with timezone offset.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '2021-02-27T13:55:40.2246+00:00' | into datetime\nSat, 27 Feb 2021 13:55:40 +0000 (4 years ago)\n```\n\n----------------------------------------\n\nTITLE: Export Extern Command Signature - Nushell\nDESCRIPTION: Shows the basic command signature format for the export extern command, which takes flags, a definition name, and parameters as arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_extern.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nexport extern {flags} (def_name) (params)\n```\n\n----------------------------------------\n\nTITLE: URL-Encoding Special Characters in Query String with Nushell\nDESCRIPTION: Shows how the 'url build-query' command handles special characters in record values. It properly encodes the ampersand (&) and space characters in the resulting query string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_build-query.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n{a:\"AT&T\", b: \"AT T\"} | url build-query\n```\n\n----------------------------------------\n\nTITLE: Restoring Transient Prompt Elements\nDESCRIPTION: Code to re-enable transient prompt elements that are hidden by default. This sets the transient right prompt and multiline indicator to null, which restores their default behavior instead of hiding them.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n$env.TRANSIENT_PROMPT_COMMAND_RIGHT = null\n$env.TRANSIENT_PROMPT_MULTILINE_INDICATOR = null\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabular Data in Nushell\nDESCRIPTION: Example demonstrating how to render a simple 2x2 data table with row and column headers in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | table\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 2 │\n│ 1 │ 3 │ 4 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Direct Pattern Matching on Dataframe\nDESCRIPTION: Example showing direct pattern matching on a dataframe created from a list, returning boolean results for each row.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_contains.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [abc acb acb] | polars into-df | polars contains ab\n```\n\n----------------------------------------\n\nTITLE: Adding Row Header to Table in Nushell\nDESCRIPTION: This snippet demonstrates how to add a totals row as a header to an existing table in Nushell. It calculates the sum of each column and appends it as a new row with the label 'Totals'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_21\n\nLANGUAGE: nu\nCODE:\n```\nlet table = [\n[additions   deletions   delta ];\n[       10          20     -10 ]\n[       15           5      10 ]\n[        8           6       2 ]]\n\nlet totals_row = ($table | math sum | insert index {\"Totals\"})\n$table | append $totals_row\n# => ╭────────┬───────────┬───────────┬───────╮\n# => │      # │ additions │ deletions │ delta │\n# => ├────────┼───────────┼───────────┼───────┤\n# => │      0 │        10 │        20 │   -10 │\n# => │      1 │        15 │         5 │    10 │\n# => │      2 │         8 │         6 │     2 │\n# => │ Totals │        33 │        31 │     2 │\n# => ╰────────┴───────────┴───────────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Variable Conversions\nDESCRIPTION: This snippet illustrates how to test the environment variable conversion process manually within Nushell by using the defined conversion functions to demonstrate transformation between formats.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nwith-env { FOO : 'a-b-c' } { nu }\n```\n\nLANGUAGE: nu\nCODE:\n```\ndo $env.ENV_CONVERSIONS.FOO.from_string 'a-b-c'\n```\n\nLANGUAGE: nu\nCODE:\n```\nnu -c '$env.FOO'\n```\n\n----------------------------------------\n\nTITLE: Removing Contents from Binary Data in Nushell\nDESCRIPTION: Demonstrates how to remove a specific byte pattern from binary data using the 'bytes remove' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_remove.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[10 AA FF AA FF] | bytes remove 0x[10 AA]\n```\n\n----------------------------------------\n\nTITLE: Using Cell Paths in Nushell\nDESCRIPTION: Shows how to use cell paths to access list elements by index using a variable\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nlet cp = $.2\n# Return list item at index 2\n[ foo bar goo glue ] | get $cp\n# => goo\n```\n\n----------------------------------------\n\nTITLE: Listing Files and Sorting in Nushell\nDESCRIPTION: This snippet demonstrates how to list files in a directory and sort them by size using the ls and sort-by commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nls | sort-by size\n```\n\n----------------------------------------\n\nTITLE: String Comparison with Regex Operators\nDESCRIPTION: Demonstrates regex-based string comparison operators in Nushell, for pattern matching against strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\n'APL' =~ '^\\w{0,3}$'\n# => true\n'FORTRAN' !~ '^\\w{0,3}$'\n# => true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Environment Variable Scoping\nDESCRIPTION: This example shows the concept of scoping in Nushell where changes to an environment variable are limited to the current execution block, highlighting how scoping works in practice.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n$env.FOO = \"BAR\"\n\ndo {\n    $env.FOO = \"BAZ\"\n    $env.FOO == \"BAZ\"\n}\n# => true\n$env.FOO == \"BAR\"\n# => true\n```\n\n----------------------------------------\n\nTITLE: Export Alias Command Signature\nDESCRIPTION: The command signature shows the syntax for creating and exporting an alias with optional flags, a name parameter, and an initial value parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_alias.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> export alias {flags} (name) (initial_value)\n```\n\n----------------------------------------\n\nTITLE: Importing Standard Library Modules in Nushell\nDESCRIPTION: Examples showing how to import modules from the Nushell standard library. The first example demonstrates importing with namespace preservation, while the second shows importing all commands directly into the current namespace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n# If the module commands should be \"prefixed\", e.g., `log warning \"Hello\"`\nuse std/log\n\n# When the module's command names should be available in the current namespace\n# E.g., `ls | to jsonl`\nuse std/formats *\n```\n\n----------------------------------------\n\nTITLE: Basic Glob Pattern Usage in Nushell\nDESCRIPTION: Demonstrates how bare words are interpreted as glob patterns while quoted strings are treated as literals when opening files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen *.txt    # opens all files which ends with `.txt`\nopen `*.txt`  # it's backtick quoted, it's a bare word, so nu opens all files which ends with `.txt`\n```\n\n----------------------------------------\n\nTITLE: Get Directory Path for Multiple Files\nDESCRIPTION: Example showing how to get parent directories for a list of file paths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_dirname.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [ /home/joe/test.txt, /home/doe/test.txt ] | path dirname\n╭───┬───────────╮\n│ 0 │ /home/joe │\n│ 1 │ /home/doe │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping Nested Items with jq\nDESCRIPTION: Demonstrates how to filter and map over a nested JSON tree structure using jq's walk function to double each number value while leaving other types unchanged.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\necho '{\"data\": {\"values\": [1, 2, 3], \"nested\": {\"values\": [4, 5, 6]}}}' |\njq -r 'walk(if type == \"number\" then . * 2 else . end)'\n```\n\n----------------------------------------\n\nTITLE: Renaming a Nushell export to 'main'\nDESCRIPTION: This snippet shows how to rename an exported function to `main` in a Nushell module. This allows the function to take on the name of the module when imported if there is a naming conflict. The module will export a function called `main` that increments an integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nexport def main []: int -> int {\n    $in + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Range Expression Behavior in Nushell\nDESCRIPTION: This Nushell snippet demonstrates the corrected behavior of `$in` within range expressions. Previously, the execution of such expressions did not work consistently due to a bug. This has been fixed in version 0.96.1 to ensure that piping to a range expression containing `$in` executes correctly. To use this functionality, ensure you have Nushell installed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-29-nushell_0_96_1.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n3 | 0..$in | each { print }\n```\n\n----------------------------------------\n\nTITLE: Moving Multiple Columns After Last Column in Nushell\nDESCRIPTION: Shows how to move and reorder multiple columns ('value' and 'name') after the last column ('index') in a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/move.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name value index]; [foo a 1] [bar b 2] [baz c 3]] | move value name --after index\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Test on Rust File Changes with watch in Nushell\nDESCRIPTION: Demonstrates how to use the 'watch' command to automatically run 'cargo test' whenever a Rust file changes in the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/watch.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> watch . --glob=**/*.rs {|| cargo test }\n```\n\n----------------------------------------\n\nTITLE: Regex Splitting - Nushell\nDESCRIPTION: Example demonstrating splitting strings using a regex pattern to handle variable whitespace around separators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_column.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> ['a -  b' 'c  -    d'] | split column --regex '\\s*-\\s*'\n```\n\n----------------------------------------\n\nTITLE: Getting a Cell from a Table in Nushell\nDESCRIPTION: Demonstrates accessing a specific cell within a table by combining row and column identifiers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [{A: A0}] | get 0.A\nA0\n```\n\n----------------------------------------\n\nTITLE: Improving the `commandline` Command with Subcommands\nDESCRIPTION: The `commandline` command has been refactored to include subcommands for more efficient line editing operations. This update simplifies the command structure and deprecated several existing flags. Context: Subcommands include functionalities to edit, get, and set cursor positions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-03-05-nushell_0_91_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n- `commandline edit`: to append, insert, or replace the cursor line (returns nothing)\n```\n\nLANGUAGE: nushell\nCODE:\n```\n- `commandline get-cursor`: to get the cursor position (returns an integer)\n```\n\nLANGUAGE: nushell\nCODE:\n```\n- `commandline set-cursor`: to set the cursor position (returns nothing)\n```\n\n----------------------------------------\n\nTITLE: Split String by Single Character in Nu Shell\nDESCRIPTION: Demonstrates splitting a string '-a-b-c-' using '-' as the separator. Includes empty rows where consecutive separators appear.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_row.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n'-a-b-c-' | split row '-'\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in Number List using Nushell\nDESCRIPTION: Demonstrates how to use the 'math max' command to find the maximum value in a list of numbers in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_max.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [-50 100 25] | math max\n100\n```\n\n----------------------------------------\n\nTITLE: Join Path with Multiple Components\nDESCRIPTION: Example demonstrating joining a path with multiple components.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking' | path join spams this_spam.txt\n/home/viking/spams/this_spam.txt\n```\n\n----------------------------------------\n\nTITLE: Advanced Regex Replacements with fancy-regex in Nushell - Example 1\nDESCRIPTION: Shows a complex regex pattern for word boundary matching and replacements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n> 'a successful b' | str replace -r '\\b([sS])uc(?:cs|s?)e(ed(?:ed|ing|s?)|ss(?:es|ful(?:ly)?|i(?:ons?|ve(?:ly)?)|ors?)?)?\\b' '${1}ucce$2'\na successful b\n```\n\n----------------------------------------\n\nTITLE: Group-By Quantile Aggregation Example\nDESCRIPTION: Shows how to perform quantile aggregation with group-by operations on a dataframe\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_quantile.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [one 2] [one 4] [two 1]]\n                    | polars into-df\n                    | polars group-by a\n                    | polars agg (polars col b | polars quantile 0.5)\n                    | polars collect\n                    | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Creating Nushell module as directory\nDESCRIPTION: This example creates a module using the directory form, where the module is a directory containing a `mod.nu` file. It demonstrates moving an existing `increment.nu` file into an `increment` directory and renaming it to `mod.nu`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nmkdir increment\nmv increment.nu increment/mod.nu\n\nuse increment *\n41 | increment\n# => 42\n```\n\n----------------------------------------\n\nTITLE: Multiple Colors and Styles\nDESCRIPTION: Example demonstrating how to combine different colors and styles in the same text using full names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> $'(ansi red_bold)Hello(ansi reset) (ansi green_dimmed)Nu(ansi reset) (ansi purple_italic)World(ansi reset)'\nHello Nu World\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Command: Cherry-Pick in Nushell\nDESCRIPTION: Shows the implementation of a custom 'cherry-pick' command in Nushell that extracts values from records recursively based on a test function, with comprehensive test cases.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_24\n\nLANGUAGE: nu\nCODE:\n```\n# toolbox.nu\nuse std/assert\n\n# A command for cherry-picking values from a record key recursively\nexport def cherry-pick [\n    test               # The test function to run over each element\n    list: list = []    # The initial list for collecting cherry-picked values\n] {\n    let input = $in\n\n    if ($input | describe) =~ \"record|table\" {\n        $input\n        | values\n        | reduce --fold $list { |value, acc|\n            $acc | append [($value | cherry-pick $test)]\n          }\n        | prepend [(do $test $input)]\n        | flatten\n    } else {\n        $list\n    }\n}\n\n\n#[test]\ndef test_deep_record_with_key [] {\n    assert equal ({data: {value: 42, nested: {value: 442}}} | cherry-pick {|x| $x.value?}) [null 42 442]\n    assert equal ({value: 42, nested: {value: 442, nested: {other: 4442}}} | cherry-pick {|x| $x.value?}) [42 442 null]\n    assert equal ({\n        value: 1,\n        nested: {value: 2, nested: {terminal: 3}}\n        terminal: 4,\n        nested2: {value: 5}} | cherry-pick {|x| $x.value?}) [1 2 null 5]\n}\n\n#[test]\ndef test_record_without_key [] {\n    assert equal ({data: 1} | cherry-pick {|x| $x.value?}) [null]\n}\n\n#[test]\ndef test_integer [] {\n    assert equal (1 | cherry-pick {|x| $x.value?}) []\n}\n\ndef test_string [] {\n    assert equal (\"foo\" | cherry-pick {|x| $x.value?}) []\n}\n\n#[test]\ndef test_list [] {\n    assert equal ([\"foo\"] | cherry-pick {|x| $x.value?}) []\n}\n\n#[test]\ndef test_table [] {\n    assert equal ([[a b]; [1.1 1.2] [2.1 2.2]] | cherry-pick {|x| $x.value?}) [null null]\n    assert equal ([[a b]; [1.1 1.2] [2.1 2.2]] | cherry-pick {|x| $x.b?}) [1.2 2.2]\n}\n\n#[test]\ndef test_record_with_key [] {\n    assert equal ({value: 42} | cherry-pick {|x| $x.value?}) [42]\n    assert equal ({value: null} | cherry-pick {|x| $x.value?}) [null]\n}\n\n#[test]\ndef test_deep_record_without_key [] {\n    assert equal ({data: {v: 42}} | cherry-pick {|x| $x.value?}) [null null]\n}\n\n# Like `describe` but dropping item types for collections.\nexport def describe-primitive []: any -> string {\n  $in | describe | str replace --regex '<.*' ''\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Plugin\nDESCRIPTION: Example of loading or reloading a plugin named inc from the plugin registry file and putting its commands in scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> plugin use inc\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from Start of String in Nushell\nDESCRIPTION: Illustrates the use of the 'str trim' command with the --left flag to remove whitespace only from the beginning of a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_trim.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n' Nu shell ' | str trim --left\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution in Nushell\nDESCRIPTION: Demonstrates the use of the new 'if' command for conditional execution based on a comparison.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> echo 0..5 | if $it > 3 { echo big } { echo small }\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Values with uniq --unique in Nushell\nDESCRIPTION: Demonstrates using the '--unique' flag with 'uniq' to find values that appear exactly once in the input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 2] | uniq --unique\n╭───┬───╮\n│ 0 │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Signature for bytes index-of Command in Nushell\nDESCRIPTION: The command signature for bytes index-of in Nushell, showing the expected parameters and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_index-of.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes index-of {flags} (pattern) ...rest\n```\n\n----------------------------------------\n\nTITLE: Slicing Next to Last Two Items\nDESCRIPTION: Example showing how to get the next to last two items using negative index range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/slice.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [0,1,2,3,4,5] | slice (-3)..-2\n╭───┬───╮\n│ 0 │ 3 │\n│ 1 │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Listing Directories in Home Directory\nDESCRIPTION: Example of using the 'ls' command with flags to list the full path of all directories in the user's home directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> ls -a ~ | where type == dir\n```\n\n----------------------------------------\n\nTITLE: Converting String to Binary in Nushell\nDESCRIPTION: This code snippet demonstrates how to convert a string into a Nushell binary primitive. The string is processed to generate its binary representation, including the length and hexadecimal values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_binary.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 'This is a string that is exactly 52 characters long.' | into binary\nLength: 52 (0x34) bytes | printable whitespace ascii_other non_ascii\n00000000:   54 68 69 73  20 69 73 20  61 20 73 74  72 69 6e 67   This is a string\n00000010:   20 74 68 61  74 20 69 73  20 65 78 61  63 74 6c 79    that is exactly\n00000020:   20 35 32 20  63 68 61 72  61 63 74 65  72 73 20 6c    52 characters l\n00000030:   6f 6e 67 2e                                          ong.\n\n```\n\n----------------------------------------\n\nTITLE: Workaround for PowerShell script execution issue - Markdown\nDESCRIPTION: This snippet provides a workaround for a regression where PowerShell scripts could not be executed correctly. It suggests manually invoking the script using PowerShell to bypass the issue until a permanent fix is developed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-03-nushell_0_94_2.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`pwsh -f script.ps1` or `powershell.exe -f script.ps1`\n\n```\n\n----------------------------------------\n\nTITLE: Handling Scoped File Redirections in Nushell\nDESCRIPTION: This code snippet illustrates how file redirections apply to all external commands within an expression in Nushell, demonstrating stderr redirection across multiple commands in a pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n(nu -c \"print -e first\"; nu -c \"print -e last\") e> err.log\n# err.log will contain: \"first\\nlast\\n\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef cmd [] {\n    ^extern1\n    ^extern2\n}\n\n(^extern3; cmd) o> out.txt\n\n# output from `extern1`, `extern2`, `extern3` will be redirected to the file\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v1 (Timestamp-based) in Nushell\nDESCRIPTION: This example shows how to generate a UUID v1 string, which is timestamp-based and requires a MAC address (node ID) to be specified.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_uuid.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nrandom uuid -v 1 -m 00:11:22:33:44:55\n```\n\n----------------------------------------\n\nTITLE: AST Basic String Example\nDESCRIPTION: Demonstrates printing the AST for a simple string value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> ast 'hello'\n```\n\n----------------------------------------\n\nTITLE: Mutable Variable Assignment in Nushell\nDESCRIPTION: This snippet illustrates the updated syntax for assigning command pipeline outputs to mutable variables using `mut` in Nushell. It assigns the length of the string \"hello world\" to the `my_var` variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-07-25-nushell_0_83.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nmut my_var = \"hello world\" | str length\n```\n\n----------------------------------------\n\nTITLE: Grouped Standard Deviation Calculation with Polars\nDESCRIPTION: Shows how to perform a grouped standard deviation calculation using polars. Creates a dataframe with two columns, groups by one column, and calculates the standard deviation of the other column within each group.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_std.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [one 2] [one 2] [two 1] [two 1]]\n            | polars into-df\n            | polars group-by a\n            | polars agg (polars col b | polars std)\n            | polars collect\n            | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Calculate Average of Number List\nDESCRIPTION: Example showing how to compute the average of a list of numbers including negative and decimal values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_avg.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [-50 100.0 25] | math avg\n25\n```\n\n----------------------------------------\n\nTITLE: Math Abs Command Signature\nDESCRIPTION: The basic command signature for the math abs function in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_abs.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math abs {flags} \n```\n\n----------------------------------------\n\nTITLE: Multiple CSS Selectors Example\nDESCRIPTION: Example showing how to use multiple CSS selectors to extract and format content from a website.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_web.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://www.nushell.sh | query web --query 'h2, h2 + p' | each {str join} | chunks 2 | each {rotate --ccw tagline description} | flatten\n```\n\n----------------------------------------\n\nTITLE: Checking Command Return Type in Nushell\nDESCRIPTION: Shows how to check the return type of a custom command using the describe command, demonstrating that the command returns a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ngreet \"World\" | describe\n# => string\n```\n\n----------------------------------------\n\nTITLE: Performing Operation on a Custom Value via `CustomValueOp`\nDESCRIPTION: This snippet represents a JSON structure for performing operations on custom values received from a plugin, such as converting it to a base value. The operation can return PipelineData or an Error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [\n    0,\n    {\n      \"CustomValueOp\": [\n        {\n          \"item\": {\n            \"name\": \"version\",\n            \"data\": [0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0]\n          },\n          \"span\": {\n            \"start\": 90,\n            \"end\": 96\n          }\n        },\n        \"ToBaseValue\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent of Pi/4 in Nushell\nDESCRIPTION: Example of calculating the tangent of π/4 using the 'math tan' command, followed by rounding the result to 4 decimal places.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_tan.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 3.141592 / 4 | math tan | math round --precision 4\n1\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Columns for Non-Emptiness in Nu\nDESCRIPTION: This example demonstrates checking multiple columns for non-empty values using 'is-not-empty' in Nu. It accepts a table and one or more column names, returning true if all specified columns have non-empty values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-not-empty.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[meal size]; [arepa small] [taco '']] | is-not-empty meal size\ntrue\n```\n\n----------------------------------------\n\nTITLE: Reading MessagePack Table Data in NuShell\nDESCRIPTION: This code snippet demonstrates how to read a table encoded in MessagePack format and convert it to a NuShell table. The input hexadecimal data represents MessagePack formatted table data, and the \"from msgpack\" command is used for the conversion. The output shows events with their names and corresponding times. The implication is that MessagePack types are effectively translated into their NuShell equivalents.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_msgpack.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[9282AA6576656E745F6E616D65B141706F6C6C6F203131204C616E64696E67A474696D65C70CFF00000000FFFFFFFFFF2CAB5B82AA6576656E745F6E616D65B44E757368656C6C20666972737420636F6D6D6974A474696D65D6FF5CD5ADE0] | from msgpack\n╭───┬──────────────────────┬──────────────╮\n│ # │      event_name      │     time     │\n├───┼──────────────────────┼──────────────┤\n│ 0 │ Apollo 11 Landing    │ 55 years ago │\n│ 1 │ Nushell first commit │ 5 years ago  │\n╰───┴──────────────────────┴──────────────╯\n```\n\n----------------------------------------\n\nTITLE: Generating First 10 Days of January 2020\nDESCRIPTION: This example shows how to use the 'seq date' command with specific begin and end dates to generate a list of the first 10 days in January 2020.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --begin-date '2020-01-01' --end-date '2020-01-10' --increment 1day\n```\n\n----------------------------------------\n\nTITLE: Command Signature for str distance in Nushell\nDESCRIPTION: The signature format of the 'str distance' command showing the required parameters and usage pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_distance.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> str distance {flags} (compare-string) ...rest\n```\n\n----------------------------------------\n\nTITLE: Example: Handling Repeated Keys in Query String with Nushell\nDESCRIPTION: This example demonstrates how the command handles query strings with repeated keys, creating separate entries for each occurrence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_split-query.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> \"a=one&a=two&b=three\" | url split-query\n╭───┬─────┬───────╮\n│ # │ key │ value │\n├───┼─────┼───────┤\n│ 0 │ a   │ one   │\n│ 1 │ a   │ two   │\n│ 2 │ b   │ three │\n╰───┴─────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Modifying Multiple Files with Pattern\nDESCRIPTION: Example showing how to modify timestamps for multiple files using wildcard pattern matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> touch *.json\n```\n\n----------------------------------------\n\nTITLE: Streaming Parse Command Behavior Update - Nushell\nDESCRIPTION: The parse command now only processes one line of output at a time when given a streaming input from external commands or byte streams. It shows how to adapt to this by using the collect command or storing output in a variable to revert to old behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-28-nushell_0_94_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n^cat file.txt | parse -r \"some regex\"\n^cat file.txt | take 1024 | parse -r \"some regex\"\n\nopen file.txt | parse -r \"some regex\"\nopen --raw file.txt | parse -r \"some regex\"\nopen --raw file.txt | skip 1024 | parse -r \"some regex\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\n^cat file.txt | collect | parse -r \"some regex\"\n\nlet text = open file.txt\n$text | parse -r \"some regex\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\n[1, 2] | parse -r \"some regex\"\n```\n\n----------------------------------------\n\nTITLE: Get Basename for Multiple Paths\nDESCRIPTION: Example demonstrating how to get basenames from a list of paths, returning a table of results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_basename.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [ /home/joe, /home/doe ] | path basename\n╭───┬─────╮\n│ 0 │ joe │\n│ 1 │ doe │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Fixed Column Splitting - Nushell\nDESCRIPTION: Example showing how to split strings into a fixed number of columns with custom column names, preserving delimiters in the final column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_column.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> ['author: Salina Yoon' r#'title: Where\\'s Ellie?: A Hide-and-Seek Book'#] | split column --number 2 ': ' key value\n```\n\n----------------------------------------\n\nTITLE: Counting Length Using Grapheme Clusters in Nushell\nDESCRIPTION: Searches for 'ふが' in a Japanese string, using grapheme clusters to count characters instead of bytes. This treats each visible character as having length 1, regardless of its Unicode representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_index-of.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'🇯🇵ほげ ふが ぴよ' | str index-of --grapheme-clusters 'ふが'\n```\n\n----------------------------------------\n\nTITLE: Converting Number to Binary in Nushell\nDESCRIPTION: This snippet shows the process of converting a number into a binary primitive using the 'into binary' command. The output includes the length and hexadecimal values of the binary representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_binary.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | into binary\nLength: 8 (0x8) bytes | printable whitespace ascii_other non_ascii\n00000000:   01 00 00 00  00 00 00 00                             •0000000\n\n```\n\n----------------------------------------\n\nTITLE: Generating Fibonacci Sequence with Reversed Arguments\nDESCRIPTION: Demonstrates the use of `generate` with reversed argument order where the closure precedes the initial value. Requires Nushell's updates supporting this argument structure change. Outputs a sequence generated by the Fibonacci closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> generate {|fib=[0, 1]| { out: $fib.0, next: [$fib.1, ($fib.0 + $fib.1)] } } | skip 2 | take 6\n╭───┬────╮\n│ 0 │  1 │\n│ 1 │  2 │\n│ 2 │  3 │\n│ 3 │  5 │\n│ 4 │  8 │\n│ 5 │ 13 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Printing Arithmetic Result in Nushell\nDESCRIPTION: Example showing how to print the result of a mathematical expression.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/print.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> print (2 + 3)\n```\n\n----------------------------------------\n\nTITLE: Creating N-Unique Expression from Column\nDESCRIPTION: Example demonstrating how to create an n-unique expression from a specific column named 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_n-unique.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> polars col a | polars n-unique\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable - Nushell\nDESCRIPTION: Example showing how to set a basic environment variable named SPAM with a value of 'eggs'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export-env.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> export-env { $env.SPAM = 'eggs' }\n```\n\n----------------------------------------\n\nTITLE: Mean Calculation from Dataframe Columns in Nushell\nDESCRIPTION: Calculates the mean value of each column in a dataframe. This example creates a dataframe with two columns 'a' and 'b', then computes the mean of each column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_mean.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars mean\n```\n\n----------------------------------------\n\nTITLE: Iterating with Scan in Nushell\nDESCRIPTION: This snippet details the modifications to the 'scan' function in Nushell's iterators. The order of parameters in the closure has been adjusted for consistency with the 'reduce' function, allowing the accumulator to be passed as input in the pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n> [a b c d] | iter scan \"\" {|x, y| [$x, $y] | str join} -n\n# To keep its behavior same, this command should be changed to either of the following\n> [a b c d] | iter scan \"\" {|it, acc| [$acc, $it] | str join} -n\n> [a b c d] | iter scan \"\" {|it| append $it | str join} -n\n```\n\n----------------------------------------\n\nTITLE: Split Cell-Path Command Signature\nDESCRIPTION: Shows the basic command signature for the split cell-path command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_cell-path.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nsplit cell-path {flags}\n```\n\n----------------------------------------\n\nTITLE: Skipping Records with Negative Field Values using 'skip while' in Nushell\nDESCRIPTION: Illustrates how to use 'skip while' to skip records in a table while a specific field value is negative.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_while.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[{a: -2} {a: 0} {a: 2} {a: -1}] | skip while {|x| $x.a < 0 }\n```\n\n----------------------------------------\n\nTITLE: Basic Mkdir Command Signature\nDESCRIPTION: Shows the basic command signature for the mkdir command with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mkdir.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> mkdir {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching in Nushell, PowerShell\nDESCRIPTION: The `match` command (similar to `case when`) performs regular expression matching. In PowerShell, the `[regex]` class is used for regex operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Sorting a List with sorted/list.sort\nDESCRIPTION: This snippet demonstrates how to sort a list using either the `sorted` function or the `list.sort` method in Python. The `sorted` function returns a new sorted list, while `list.sort` sorts the list in place. Both methods accept optional arguments for customizing the sorting order and key function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"sorted, list.sort\"\n```\n\n----------------------------------------\n\nTITLE: Basic Closure Execution\nDESCRIPTION: Simple example of running a closure that prints 'hello'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> do { echo hello }\n```\n\n----------------------------------------\n\nTITLE: Using char eol Command\nDESCRIPTION: Platform-specific escape characters such as `eol`, `lsep`, and `line_sep` are added to the `char` command, outputting the newline character(s) according to the operating system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Computing Mode of Table Columns in Nushell\nDESCRIPTION: Shows how to compute the mode(s) of the columns of a table using the 'math mode' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_mode.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a: 1 b: 3} {a: 2 b: -1} {a: 1 b: 5}] | math mode\n╭───┬────────────╮\n│   │ ╭───┬───╮  │\n│ a │ │ 0 │ 1 │  │\n│   │ ╰───┴───╯  │\n│   │ ╭───┬────╮ │\n│ b │ │ 0 │ -1 │ │\n│   │ │ 1 │  3 │ │\n│   │ │ 2 │  5 │ │\n│   │ ╰───┴────╯ │\n╰───┴────────────╯\n```\n\n----------------------------------------\n\nTITLE: Sample Variance Calculation Example\nDESCRIPTION: Shows how to calculate the sample variance using the --sample flag, which uses N-1 as the denominator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_variance.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 4 5] | math variance --sample\n2.5\n```\n\n----------------------------------------\n\nTITLE: Converting Snake Case String to SCREAMING_SNAKE_CASE in Nushell\nDESCRIPTION: Example showing how to convert a snake_case string 'this_is_the_second_case' to SCREAMING_SNAKE_CASE format 'THIS_IS_THE_SECOND_CASE'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_screaming-snake-case.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"this_is_the_second_case\" | str screaming-snake-case\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Comma Delimiters in Nushell\nDESCRIPTION: Example of creating a list in Nushell using comma-delimited values. Lists are displayed as tables with index numbers and values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/list.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> [ foo, bar, baz ]\n╭───┬─────╮\n│ 0 │ foo │\n│ 1 │ bar │\n│ 2 │ baz │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Opening the Current Directory Using NuShell\nDESCRIPTION: This code demonstrates how to use the `start` command to open the current directory ('.') with the default file manager. The command utilizes the '.' character to reference the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/start.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> start .\n\n```\n\n----------------------------------------\n\nTITLE: HTTP POST: Text to Binary File Upload\nDESCRIPTION: Converts the content of a text file (`file.txt`) into binary data and uploads it to the specified URL, https://www.example.com, using the multipart/form-data content type. This showcases how to convert text to binary format before uploading.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_post.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> http post --content-type multipart/form-data https://www.example.com { file: (open -r file.txt | into binary) }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell LSP with Neovim - Rust\nDESCRIPTION: This code snippet configures Nushell's LSP with Neovim, establishing command and filetype settings for integration. Dependencies include Neovim and the Lua setup for configuring LSP clients. Key parameters involve the command (`cmd`) to start the LSP and the filetype it applies to. It inputs configuration settings and outputs an integrated Nushell LSP environment in Neovim.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nconfigs.nulsp = {\n    default_config = {\n        cmd = { \"nu\", \"--lsp\" },\n        filetypes = { \"nu\" },\n        root_dir = function(fname)\n            ...\n        end\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Nanoseconds to Duration in Nushell\nDESCRIPTION: Demonstrates how to convert a large number representing nanoseconds into a readable duration format. The command automatically breaks down the value into appropriate units.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_duration.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n1_234_567 | into duration\n```\n\n----------------------------------------\n\nTITLE: Reversing 4-byte Sequence\nDESCRIPTION: Example showing how to reverse a 4-byte sequence using the bytes reverse command. Converts 0x[1F FF AA AA] to 0x[AA AA FF 1F].\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_reverse.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AA] | bytes reverse\nLength: 4 (0x4) bytes | printable whitespace ascii_other non_ascii\n00000000:   aa aa ff 1f                                          ×××•\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Size\nDESCRIPTION: Demonstrates filtering file listings to show only files larger than 1 kilobyte using the where command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls | where size > 1kb\n```\n\n----------------------------------------\n\nTITLE: Boolean Literal Values in Nushell\nDESCRIPTION: The only valid literal values for Booleans in Nushell are 'true' and 'false'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/bool.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ntrue\n```\n\nLANGUAGE: nushell\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Inferring Nushell Values for Specific Columns\nDESCRIPTION: Example demonstrating how to infer Nushell values for cells in specific columns using the -c flag to specify which columns to process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_value.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> $table | into value -c [column1, column5]\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Custom Module in Nu Shell\nDESCRIPTION: This snippet demonstrates how to define a custom command in a submodule of a module in Nu Shell. It shows how to export a function from the `eggs` submodule and use it by loading the `spam` module. The command requires no additional dependencies. The `module` parameter specifies the module name or path, while the `block` parameter is the module's body if no path is provided. Inputs and outputs for the command are both 'nothing'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_module.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> module spam {\\n        export module eggs {\\n            export def foo [] { \\\"foo\\\" }\\n        }\\n    }\\n    use spam eggs\\n    eggs foo\\nfoo\n```\n\n----------------------------------------\n\nTITLE: Filtering After Aggregating with jq\nDESCRIPTION: Shows how to group data, calculate a sum for each group, and then filter results based on the calculated sum using jq's select function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\necho '[{\"category\": \"A\", \"value\": 10}, {\"category\": \"B\", \"value\": 20}, {\"category\": \"A\", \"value\": 5}]' |\njq -r 'group_by(.category) | map({category: .[0].category, sum: (map(.value) | add)}) | .[] | select(.sum > 17)'\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin\nDESCRIPTION: Example of adding a plugin named nu_plugin_inc from the current directory and installing its signatures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> plugin add nu_plugin_inc\n```\n\n----------------------------------------\n\nTITLE: Stderr Pipe Redirection in Nushell\nDESCRIPTION: Demonstrates how to redirect stderr of an external command as input to another command using the stderr pipe in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\ncat unknown.txt e>| str upcase\n```\n\n----------------------------------------\n\nTITLE: Splitting a Path into Components using Nushell\nDESCRIPTION: This example demonstrates how to split a single path string into its component parts using the 'path split' command. The output is a list of path components.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_split.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking/spam.txt' | path split\n╭───┬──────────╮\n│ 0 │ /        │\n│ 1 │ home     │\n│ 2 │ viking   │\n│ 3 │ spam.txt │\n╰───┴──────────╯\n```\n\n----------------------------------------\n\nTITLE: Importing entire module to be called as std command\nDESCRIPTION: This example shows how to import the `std` module. The log command then becomes `std log info`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nuse std\nstd log info \"Hello, std Module\"\n```\n\n----------------------------------------\n\nTITLE: Verbose Subexpression Equivalents in Nushell\nDESCRIPTION: This provides multiple ways of expressing the same condition as the short-hand example. They are functionally equivalent to `ls | where size > 10kb`. The example shows how to access the 'size' column of `$it` using different approaches.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/variables_and_subexpressions.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nls | where $it.size > 10kb\nls | where ($it.size > 10kb)\nls | where {|$it| $it.size > 10kb }\n```\n\n----------------------------------------\n\nTITLE: Capitalizing a Simple String in Nushell\nDESCRIPTION: Example showing how to capitalize the first letter of a simple string 'good day'. The command transforms the input to 'Good day', affecting only the first character.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_capitalize.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 'good day' | str capitalize\nGood day\n```\n\n----------------------------------------\n\nTITLE: Converting Table to YAML in Nushell - Example Usage\nDESCRIPTION: Demonstrates converting a simple two-column table into YAML format. The example shows how a table with 'foo' and 'bar' columns gets serialized into YAML structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_yaml.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[foo bar]; [\"1\" \"2\"]] | to yaml\n- foo: '1'\n  bar: '2'\n\n```\n\n----------------------------------------\n\nTITLE: Shortened Redirection Syntax in Nushell\nDESCRIPTION: Shows the shortened syntax for stdout and stderr redirection in Nushell using 'o' and 'e' instead of 'out' and 'err'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\ncat unknown.txt o> out.log e> err.log\n\ncat unknown.txt o+e> log.log\n```\n\n----------------------------------------\n\nTITLE: Executing 'pwd' Command in Nushell\nDESCRIPTION: The 'pwd' command in Nushell returns the current working directory. It can be executed with optional flags to modify its behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/pwd.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> pwd {flags}\n```\n\n----------------------------------------\n\nTITLE: Checking if a single string ends with '.rb' in Nushell\nDESCRIPTION: Example of using the 'str ends-with' command to check if a string ends with '.rb', returning a boolean result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_ends-with.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n'my_library.rb' | str ends-with '.rb'\n```\n\n----------------------------------------\n\nTITLE: Merging Records in Nushell\nDESCRIPTION: Shows how to merge two records using the merge command to combine their fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nlet first_record = { name: \"Sam\", rank: 10 }\n$first_record | merge { title: \"Mayor\" }\n```\n\n----------------------------------------\n\nTITLE: Clear Terminal Preserving Scrollback in Nushell\nDESCRIPTION: Example demonstrating how to clear the terminal while keeping the scrollback history using the --keep-scrollback flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/clear.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> clear --keep-scrollback\n\n```\n\n----------------------------------------\n\nTITLE: Decoding URL-safe Base64 in Nushell\nDESCRIPTION: Example showing how to decode a URL-safe Base64 string using the --url flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base64.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> \"_w==\" | decode base64 --url\nLength: 1 (0x1) bytes | printable whitespace ascii_other non_ascii\n00000000:   ff                                                   ×\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing All Occurrences of a Substring in Nushell\nDESCRIPTION: Shows how to replace all occurrences of a character in a string using the --all flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'abc abc abc' | str replace --all 'b' 'z'\nazc azc azc\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `open` to Python's `open`\nDESCRIPTION: Shows the equivalent of Nushell's `open` command in Python.  The `open` function in Python is used for file handling, similar to how `open` works in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"open\"\n```\n\n----------------------------------------\n\nTITLE: Converting a Simple String to Title Case in Nushell\nDESCRIPTION: Example showing how to convert a hyphenated string to Title Case format using the 'str title-case' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_title-case.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'nu-shell' | str title-case\nNu Shell\n```\n\n----------------------------------------\n\nTITLE: Signature of stor insert Command in Nushell\nDESCRIPTION: The command signature showing the basic syntax for the stor insert command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_insert.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> stor insert {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting Array to JSON with Custom Indentation\nDESCRIPTION: Shows how to convert an array to JSON with custom 4-space indentation using the --indent flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_json.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [Joe Bob Sam] | to json --indent 4\n[\n    \"Joe\",\n    \"Bob\",\n    \"Sam\"\n]\n```\n\n----------------------------------------\n\nTITLE: Viewing Complex Command Source in Nushell\nDESCRIPTION: Example showing how to view the source of a command with multiple parameters and flags\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_source.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\ndef test [a?:any --b:int ...rest:string] { echo 'test' }; view source test\n```\n\n----------------------------------------\n\nTITLE: polars open Command Signature in Nushell\nDESCRIPTION: The command signature for polars open shows its basic syntax, including the required file parameter and optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_open.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars open {flags} (file)\n```\n\n----------------------------------------\n\nTITLE: Debug List Example\nDESCRIPTION: Example demonstrating debug output for a list value\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ['hello'] | debug\n╭───┬───────╮\n│ 0 │ hello │\n╰───┴───────╯\n\n```\n\n----------------------------------------\n\nTITLE: Terminal Output and Display Commands in Nushell\nDESCRIPTION: Commands for managing terminal output, including clearing the screen, displaying information, and handling user input in Nushell. These correspond to CMD.EXE's CLS, ECHO, and PAUSE commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_cmd.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nclear\n```\n\nLANGUAGE: nushell\nCODE:\n```\nansi {flags} (code)\n```\n\nLANGUAGE: nushell\nCODE:\n```\nprint <message>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nls\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndate now\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndate now | format date \"%H:%M:%S\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\ninput \"Press any key to continue . . .\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\n$env.PROMPT_COMMAND = { <command> }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n#\n```\n\nLANGUAGE: nushell\nCODE:\n```\nstart <path>\n```\n\n----------------------------------------\n\nTITLE: Rotating Binary Data Left\nDESCRIPTION: Example of rotating binary data 0x[c0 ff ee] left by 10 bits, showing hexadecimal output\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_rol.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[c0 ff ee] | bits rol 10\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   ff bb 03                                             ××•\n\n```\n\n----------------------------------------\n\nTITLE: Empty Header Variant Representation in JSON\nDESCRIPTION: The JSON representation of an Empty header variant in the Nushell protocol. This represents no values produced or an empty stream with no identifier.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n\"Empty\"\n```\n\n----------------------------------------\n\nTITLE: Handling Identifier Engine Call Response in JSON\nDESCRIPTION: Example of a successful result for engine calls that produce internal identifiers, such as FindDecl. The response contains an unsigned integer identifier.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCallResponse\": [\n    0,\n    {\n      \"Identifier\": 4221\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent for Multiple Angles in Degrees\nDESCRIPTION: Example of applying the tangent function to a list of angles in degrees using the 'math tan' command with the '--degrees' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_tan.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [-45 0 45] | math tan --degrees\n╭───┬───────╮\n│ 0 │ -1.00 │\n│ 1 │  0.00 │\n│ 2 │  1.00 │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Error When Modifying Mutable Variables in Closures\nDESCRIPTION: Demonstrates an error that occurs when trying to modify a mutable variable inside a closure (like in 'each'). Shows a key limitation of closures compared to blocks.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nmut foo = []\n[1 2 3] | each { $foo = ($foo | append ($in + 1)) }\n# => Error: nu::parser::expected_keyword\n# => \n# =>   × Capture of mutable variable.\n# =>    ╭─[entry #8:1:1]\n# =>  1 │ [1 2 3] | each { $foo = ($foo | append ($in + 1)) }\n# =>    ·                  ──┬─\n# =>    ·                    ╰── capture of mutable variable\n# =>    ╰────\n```\n\n----------------------------------------\n\nTITLE: List Splitting - Nushell\nDESCRIPTION: Example showing how to split a list of strings into a table using a hyphen separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_column.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> ['a-b' 'c-d'] | split column -\n```\n\n----------------------------------------\n\nTITLE: Controlling Decimal Precision of File Sizes - Nushell\nDESCRIPTION: This snippet illustrates how to set the decimal precision for formatted file sizes in Nushell. It details the impact of various precision settings (integer or null) on output formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n# precision = 1\n1001B # => 1.0 kB\n\n# precision = 0\n1001B # => 1 kB\n\n# precision = null\n1001B # => 1.001 kB\n1000B # => 1 kB\n```\n\n----------------------------------------\n\nTITLE: Filtering DataFrame with Boolean Mask\nDESCRIPTION: Example of filtering a DataFrame using a boolean mask created from a list of true/false values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_filter-with.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> let mask = ([true false] | polars into-df);\n    [[a b]; [1 2] [3 4]] | polars into-df | polars filter-with $mask\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Values in Series\nDESCRIPTION: Demonstrates how to find unique values in a simple numeric series using polars unique.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unique.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [2 2 2 2 2] | polars into-df | polars unique\n```\n\n----------------------------------------\n\nTITLE: Calculating Hyperbolic Tangent of 10π in Nushell\nDESCRIPTION: Demonstrates how to use the 'math tanh' command to calculate the hyperbolic tangent of 10π, followed by rounding the result to 4 decimal places using the 'math round' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_tanh.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 3.141592 * 10 | math tanh | math round --precision 4\n```\n\n----------------------------------------\n\nTITLE: Checking String Prefix with Capitalization in Nushell\nDESCRIPTION: This example shows checking if 'Cargo.toml' starts with 'Car'. The command is case-sensitive by default.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_starts-with.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'Cargo.toml' | str starts-with 'Car'\n```\n\n----------------------------------------\n\nTITLE: Mixed Type List Sorting in Nushell\nDESCRIPTION: Shows how Nushell handles sorting of mixed data types (numbers and strings) in a single list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[\"hello\" 4 9 2 1 \"foobar\" 8 6] | sort\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Polars Otherwise Expression\nDESCRIPTION: Creates a simple 'when' condition with an 'otherwise' fallback, returning 4 when column 'a' is greater than 2, otherwise returning 5.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_otherwise.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\npolars when ((polars col a) > 2) 4 | polars otherwise 5\n```\n\n----------------------------------------\n\nTITLE: Prepending Mixed Types\nDESCRIPTION: Example showing how to prepend a mix of integers and strings to a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/prepend.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> [2 nu 4 shell] | prepend [0 1 rocks]\n```\n\n----------------------------------------\n\nTITLE: Multiline Editing - Nushell\nDESCRIPTION: Demonstrates creating a record using multiline editing in Nushell. The open curly brace initiates multiline input, allowing the user to define the record's fields across multiple lines.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n```nu\nlet file = {\n  name: 'repos.sqlite'\n  hash: 'b939a3fa4ca011ca1aa3548420e78cee'\n  version: '1.4.2'\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Table Column to camelCase in Nushell\nDESCRIPTION: Example showing how to convert a specific column in a table to camelCase format, targeting only the 'lang' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_camel-case.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [[lang, gems]; [nu_test, 100]] | str camel-case lang\n╭───┬────────┬──────╮\n│ # │  lang  │ gems │\n├───┼────────┼──────┤\n│ 0 │ nuTest │  100 │\n╰───┴────────┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Sorting Data in C#\nDESCRIPTION: Demonstrates how to sort data in C# using `OrderBy`, `OrderByDescending`, `ThenBy`, and `ThenByDescending`. These methods provide flexible sorting options.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n\"OrderBy, OrderByDescending, ThenBy, ThenByDescending\"\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Nushell\nDESCRIPTION: Basic example demonstrating how to print a simple string to stdout.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/print.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> print \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Unit Sleep Example - Nushell\nDESCRIPTION: Example showing how to specify a sleep duration using multiple time units (1 minute and 30 seconds).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sleep.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> sleep 1min 30sec\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Column Expression Command Signature\nDESCRIPTION: The basic command signature for creating a Polars column expression in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_col.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars col {flags} (column name)\n```\n\n----------------------------------------\n\nTITLE: Basic String Interpolation in Nushell\nDESCRIPTION: Demonstrates basic string interpolation in Nushell using a variable within a string. Variables must be enclosed in parentheses within the interpolated string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/strings_and_text.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet name = \"Nushell\"\nprint $\"My favorite shell is ($name)\"\n```\n\n----------------------------------------\n\nTITLE: Filtering List Items in Nushell\nDESCRIPTION: Shows how to filter items of a list according to a condition using the 'where' command with a closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2] | where {|x| $x > 1}\n```\n\n----------------------------------------\n\nTITLE: Join Strings Across Series Example\nDESCRIPTION: Example showing how to join strings across two different series in dataframes. Creates two dataframes and joins their string values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-join.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet other = ([za xs cd] | polars into-df);\n    [abc abc abc] | polars into-df | polars str-join $other\n```\n\n----------------------------------------\n\nTITLE: Opening a Text File Using NuShell\nDESCRIPTION: This code snippet demonstrates how to use the `start` command to open a text file ('file.txt') with the default text editor. The command does not require any flags or additional parameters beyond the file path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/start.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> start file.txt\n\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Hash of File Contents in Nushell\nDESCRIPTION: Example showing how to open a file and generate a SHA256 hash of its contents in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_sha256.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> open ./nu_0_24_1_windows.zip | hash sha256\n\n```\n\n----------------------------------------\n\nTITLE: Listing Background Jobs with NuShell Command\nDESCRIPTION: This command lists all background jobs running in NuShell. The output is returned as a table, and the command takes no input. There are no special dependencies or flags required for executing this command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job_list.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> job list\n```\n\n----------------------------------------\n\nTITLE: Error handling when accessing missing values in Nushell\nDESCRIPTION: Demonstrates the error that occurs when attempting to directly access a missing value in a Nushell table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/nothing.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nlet missing_value = [{a:1 b:2} {b:1}]\n$missing_value.1.a\n```\n\n----------------------------------------\n\nTITLE: Kill Process in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `kill` command terminates a process.  In PowerShell, `Stop-Process` or `kill` are used, and `kill` is the standard command in Unix shells.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Error Capture Example\nDESCRIPTION: Example of capturing errors from a command execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> do --capture-errors { nu --commands 'exit 1' } | myscarycommand\n```\n\n----------------------------------------\n\nTITLE: Reverse Sorting Numeric List\nDESCRIPTION: Example of sorting a numeric list in descending order using the reverse flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [2 0 1] | sort --reverse\n```\n\n----------------------------------------\n\nTITLE: Removing Byte Pattern from Multiple Columns in a Table in Nushell\nDESCRIPTION: Demonstrates how to remove a byte pattern from specific columns in a table using the 'bytes remove' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_remove.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [[ColA ColB ColC]; [0x[11 12 13] 0x[14 15 16] 0x[17 18 19]]] | bytes remove 0x[11] ColA ColC\n```\n\n----------------------------------------\n\nTITLE: Random Float Command Signature\nDESCRIPTION: The basic command signature for generating random floats in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_float.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> random float {flags} (range)\n```\n\n----------------------------------------\n\nTITLE: Converting Apparent Column to B - Nushell\nDESCRIPTION: This snippet illustrates how to convert the apparent size column from a directory usage command ('du') to bytes (B) using the 'format filesize' command. It demonstrates formatting the specific column of results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_filesize.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> du | format filesize B apparent\n```\n\n----------------------------------------\n\nTITLE: Setting Nu Shell Environment Directories\nDESCRIPTION: This Nushell snippet sets the environment variable for Nu Shell library directories to include the default config and data directories. It uses new constants for standardizing user-level item locations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n$env.NU_LIB_DIRS = [\n    ($nu.default-config-dir | path join 'scripts') # add <nushell-config-dir>/scripts\n    ($nu.data-dir | path join 'completions')       # default home for nushell completions\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Bits Not to Signed Numbers in Nushell\nDESCRIPTION: Example of using 'bits not' command with the --signed flag to treat input as signed numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_not.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [4 3 2] | bits not --signed\n╭───┬────╮\n│ 0 │ -5 │\n│ 1 │ -4 │\n│ 2 │ -3 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Using Implicit $in Variable in Update Closures\nDESCRIPTION: Example showing how to use the implicit $in variable within a closure to update the 'authors' column without explicitly referencing the row.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[project, authors]; ['nu', ['Andrés', 'JT', 'Yehuda']]] | update authors { str join ',' }\n╭───┬─────────┬──────────────────╮\n│ # │ project │     authors      │\n├───┼─────────┼──────────────────┤\n│ 0 │ nu      │ Andrés,JT,Yehuda │\n╰───┴─────────┴──────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Try-Catch with Error Message Access in Nu Shell\nDESCRIPTION: Demonstrates accessing the error message object within the catch closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/try.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\ntry { 1 / 0 } catch { |err| $err.msg }\n```\n\n----------------------------------------\n\nTITLE: Converting Simple List to Dataframe in Nushell\nDESCRIPTION: Example showing how to convert a simple list of values into a single-column dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n[a b c] | polars into-df\n```\n\n----------------------------------------\n\nTITLE: Using polars arg-max to find index of maximum value in a series\nDESCRIPTION: Demonstrates using the polars arg-max command to find the index position of the maximum value in a series. This example creates a dataframe from a simple array and identifies that the maximum value is at index 1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-max.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[1 3 2] | polars into-df | polars arg-max\n```\n\n----------------------------------------\n\nTITLE: Converting Ranges to Lists in Nushell\nDESCRIPTION: Demonstrates how to convert a range to a list by using the 'each' command with an empty block, which forces evaluation of all elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n1..5 | each {||}\n```\n\n----------------------------------------\n\nTITLE: Iterating with Enumerate in Nushell\nDESCRIPTION: Demonstrates the use of the 'enumerate' command in Nushell as a replacement for the deprecated '--numbered' flag in 'for'. This snippet shows how to access index and item values during iteration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nfor x in ([bob fred] | enumerate) {\n    print $'($x.index) is ($x.item)'\n}\n```\n\n----------------------------------------\n\nTITLE: Performing a sum aggregation on a dataframe in Nushell\nDESCRIPTION: Demonstrates how to sum all columns in a dataframe using the polars sum command followed by collect to materialize the results. This shows basic aggregation functionality in Polars dataframes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n$df_1 | polars sum | polars collect\n```\n\n----------------------------------------\n\nTITLE: Converting String to Boolean - Nushell\nDESCRIPTION: This snippet demonstrates converting a string ('true') to a boolean value. The 'into bool' command recognizes the string as true and returns the corresponding boolean.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 'true' | into bool\ntrue\n```\n\n----------------------------------------\n\nTITLE: Create simple custom error in Nushell\nDESCRIPTION: This snippet demonstrates how to create a simple custom error message using the `error make` command in Nushell.  It takes a record with a `msg` field as input and returns a custom error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/error_make.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\n> error make {msg: \"my custom error message\"}\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Extra Features\nDESCRIPTION: Command to install Nushell with additional features enabled using Cargo's features flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-01-18-nushell_0_43.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Rotate Table Counter-Clockwise and Rename Columns in Nushell\nDESCRIPTION: This example shows how to rotate a table counter-clockwise using the `--ccw` flag and rename the columns using the `rotate` command in Nushell. The column names are customized during the counter-clockwise rotation process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rotate.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n\n> [[a b]; [1 2]] | rotate --ccw col_a col_b\n╭───┬───────┬───────╮\n│ # │ col_a │ col_b │\n├───┼───────┼───────┤\n│ 0 │ b     │     2 │\n│ 1 │ a     │     1 │\n╰───┴───────┴───────╯\n\n```\n\n----------------------------------------\n\nTITLE: Converting Current Date to Hawaii Timezone in Nushell\nDESCRIPTION: This example illustrates how to convert the current date to the US/Hawaii time zone using the 'date to-timezone' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_to-timezone.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\ndate now | date to-timezone US/Hawaii\n```\n\n----------------------------------------\n\nTITLE: Basic Pipeline Demonstration in Nushell\nDESCRIPTION: Demonstrates a complete pipeline with input, filter, and output commands using a Cargo.toml version increment and save operation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/pipeline.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen \"Cargo.toml\" | inc package.version | save \"Cargo_new.toml\"\n```\n\n----------------------------------------\n\nTITLE: Grouping by Raw Values in Nushell\nDESCRIPTION: Shows how to group a list of values directly by their raw values without specifying a column. This creates groups based on the unique values in the list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> ['1' '3' '1' '3' '2' '1' '1'] | group-by\n```\n\n----------------------------------------\n\nTITLE: Command Signature for from xlsx in Nushell\nDESCRIPTION: Shows the command signature for the 'from xlsx' command, which is used to parse binary Excel data into a table format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_xlsx.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from xlsx {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting Text to Uppercase in Nushell\nDESCRIPTION: Example showing how to use 'str upcase' to convert a string to uppercase. The input 'nu' is converted to 'NU'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_upcase.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 'nu' | str upcase\nNU\n```\n\n----------------------------------------\n\nTITLE: Signature and Usage for Nushell's to yml Command\nDESCRIPTION: The command signature for the `to yml` command in Nushell, showing the available flags and syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_yml.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> to yml {flags} \n```\n\n----------------------------------------\n\nTITLE: Using Match Expressions in Nushell Commands\nDESCRIPTION: Demonstrates how to use match expressions to handle different cases and return appropriate values based on conditions, similar to pattern matching in other languages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n# Return a random file in the current directory\ndef \"random file\" [] {\n  let files = (ls)\n  let num_files = ($files | length)\n\n  match $num_files {\n    0 => null  # Return null for empty directory\n    _ => {\n      let random_file = (random int 0..($num_files - 1))\n      ($files | get $random_file)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Import Operations in Python\nDESCRIPTION: Python implementations for importing different file formats, equivalent to Nushell's to command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport csv, json, sqlite3\n```\n\n----------------------------------------\n\nTITLE: Custom Assert Command Definition\nDESCRIPTION: Demonstrates how to create a custom assertion command with detailed error messages using error-label.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"assert even\" [number: int] {\n    assert ($number mod 2 == 0) --error-label {\n        text: $\"($number) is not an even number\",\n        span: (metadata $number).span,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverse Case-Insensitive String Sorting\nDESCRIPTION: Example of sorting strings in reverse order while ignoring case sensitivity.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> [airplane Truck Car] | sort -i -r\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Argument in Nushell\nDESCRIPTION: Shows how to use the 'load-env' command to load environment variables directly from an argument and access them.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/load-env.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> load-env {NAME: ABE, AGE: UNKNOWN}; $env.NAME\nABE\n```\n\n----------------------------------------\n\nTITLE: Calling Nushell Commands from Rust Plugin\nDESCRIPTION: Demonstrates how to find and call other Nushell commands from within a Rust plugin using EngineInterface methods. It shows error handling and argument passing techniques.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\n// Find the two commands we need. We strongly recommend using a descriptive error here, and\n// discourage `.unwrap()` or `.expect()` as it's quite possible to not find something in scope, even\n// if it's a core Nushell command.\nlet find_decl = |name| {\n    engine.find_decl(name)?.ok_or_else(|| {\n        LabeledError::new(format!(\"can't find `{name}`)\")\n            .with_label(\"required here\", call.head)\n            .with_help(\"not found in scope, perhaps you have to import it\")\n    })\n};\nlet std_assert = find_decl(\"std assert\")?;\nlet view_ir = find_decl(\"view ir\")?;\n// `engine.find_decl()` returns an identifier which can also be passed to `view ir --decl-id`.\nlet ir_of_assert = engine\n    .call_decl(\n        view_ir,\n        // Call `view ir --decl-id <std_assert>`\n        EvaluatedCall::new(call.head)\n            .with_flag(\"decl-id\".into_spanned(call.head))\n            .with_positional(Value::int(std_assert as i64, call.head)),\n        PipelineData::Empty,\n        true,\n        false,\n    )?\n    .into_value(call.head)?\n    .into_string()?;\neprintln!(\"IR of `std assert`:\");\neprintln!(\"{ir_of_assert}\");\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Starting Index in Nushell Tables\nDESCRIPTION: Example showing how to set a custom starting number (100) for the index column rather than the default 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [2 [4 4]]] | table -i 100\n```\n\n----------------------------------------\n\nTITLE: Matching Single-Byte Pattern in Nushell\nDESCRIPTION: Example demonstrating how to check if a binary sequence starts with a single-byte pattern 0x[1F].\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_starts-with.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AA] | bytes starts-with 0x[1F]\n```\n\n----------------------------------------\n\nTITLE: Wrapping List Values in Nushell Grid\nDESCRIPTION: Shows how wrapping list values with a name column produces the same result as directly piping to grid, as grid automatically handles simple lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/grid.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 a b c] | wrap name | grid\n1 │ 2 │ 3 │ a │ b │ c\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Brace Expression\nDESCRIPTION: Shows how multiple brace expressions can be combined in sequence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> \"A{b,c}D{e,f}G\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Executing 'nautilus' with exec in Nushell\nDESCRIPTION: This example shows how to use the 'exec' command to execute the 'nautilus' application in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/exec.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> exec nautilus\n```\n\n----------------------------------------\n\nTITLE: Prepending Single Integer\nDESCRIPTION: Example showing how to prepend a single integer to a list of integers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/prepend.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 4] | prepend 0\n```\n\n----------------------------------------\n\nTITLE: Editing a Column in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'edit' command in Nushell to change the value of an existing column in a TOML file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/trabajando_con_tablas.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | edit edition 2021\n```\n\n----------------------------------------\n\nTITLE: Grouping Git Commits by Date in Nushell\nDESCRIPTION: Uses group-by command with date subcommand to group Git commit logs by date. The command fetches commits, parses the log format, splits into columns, reformats dates, and then groups all entries by date.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 25 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime | format date '%Y-%m-%d'} | group-by date\n```\n\n----------------------------------------\n\nTITLE: Generate Random Float with Lower Bound\nDESCRIPTION: Generates a random float with a minimum value of 100000.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_float.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> random float 100000..\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `ps` to Python's `os.listdir('/proc')`\nDESCRIPTION: Explains how to list processes in Python using `os.listdir('/proc')`, which is similar to the functionality of the `ps` command in Nushell.  This accesses the `/proc` directory on Linux-based systems to retrieve process information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"os.listdir('/proc')\"\n```\n\n----------------------------------------\n\nTITLE: While Loop Command Signature in Nushell\nDESCRIPTION: Shows the basic signature format for the while loop command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/while.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> while {flags} (cond) (block)\n```\n\n----------------------------------------\n\nTITLE: Rendering Environment Commands Table in Vue.js Template\nDESCRIPTION: This Vue.js template renders a table of environment commands. It iterates over the computed 'commands' property to display each command's title as a link and its usage description. The table uses Vue's v-for directive for dynamic rendering.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/env.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Reversing 3-byte Sequence\nDESCRIPTION: Example demonstrating how to reverse a 3-byte sequence using the bytes reverse command. Converts 0x[FF AA AA] to 0x[AA AA FF].\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_reverse.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[FF AA AA] | bytes reverse\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   aa aa ff                                             ×××\n```\n\n----------------------------------------\n\nTITLE: Converting Table Column to SCREAMING_SNAKE_CASE in Nushell\nDESCRIPTION: Example showing how to convert a specific column ('lang') in a table to SCREAMING_SNAKE_CASE format while preserving the table structure and other columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_screaming-snake-case.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[[lang, gems]; [nu_test, 100]] | str screaming-snake-case lang\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Generic command pattern for installing Nushell plugins using cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-10-26-nushell_0_39.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Persisting Aliases in Configuration\nDESCRIPTION: This code snippet illustrates how to make aliases persistent by adding them to the _config.nu_ file within the Nushell configuration environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    # main configuration\n}\n\nalias ll = ls -l\n\n# some other config and script loading\n```\n\n----------------------------------------\n\nTITLE: Setting Unlimited Core Size in Nushell\nDESCRIPTION: Example showing how to set the core size limit to unlimited using the ulimit command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ulimit.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> ulimit -c unlimited\n```\n\n----------------------------------------\n\nTITLE: Generate Fibonacci Sequence in Nushell\nDESCRIPTION: Creates a continuous stream of Fibonacci numbers by using an array to track the current and next values in the sequence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/generate.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ngenerate {|fib| {out: $fib.0, next: [$fib.1, ($fib.0 + $fib.1)]} } [0, 1]\n```\n\n----------------------------------------\n\nTITLE: Early Return Implementation in Nushell\nDESCRIPTION: Demonstrates the new return functionality for early exit from closures and commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\ndef foo [x] {\n    if $x > 10 {\n        return 1000\n    }\n    0\n}\n```\n\n----------------------------------------\n\nTITLE: String Substring Range Slice in Nushell\nDESCRIPTION: Illustrates changes in handling range slices with 'str substring' and 'bytes at', where end range indices larger than start indices return empty strings or binary values instead of errors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n\"aaa\" | str substring 2..-3\n```\n\n----------------------------------------\n\nTITLE: Summing a List of Numbers in Nushell\nDESCRIPTION: Demonstrates how to use the 'math sum' command to calculate the sum of a list of numbers in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sum.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | math sum\n6\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Column Creation\nDESCRIPTION: Example demonstrating pattern matching on a dataframe column with creation of a new boolean column showing match results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_contains.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> let df = [[a]; [abc] [acb] [acb]] | polars into-df;\n                let df2 = $df | polars with-column [(polars col a | polars contains ab | polars as b)] | polars collect;\n                $df2.b\n```\n\n----------------------------------------\n\nTITLE: Executing Bits Not Command in Nushell\nDESCRIPTION: The 'bits not' command signature for performing logical negation on each bit. It includes optional flags for signed numbers and specifying the number of bytes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_not.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bits not {flags}\n```\n\n----------------------------------------\n\nTITLE: Zero-Padded Range Example\nDESCRIPTION: Demonstrates expansion of numeric ranges with zero padding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n> \"A{08..10}B{11..013}C\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Join Path with Relative Path\nDESCRIPTION: Example showing how to use relative paths with '..' to navigate up directories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking' | path join .. folder\n/home/viking/../folder\n```\n\n----------------------------------------\n\nTITLE: Registering a plugin in Nushell\nDESCRIPTION: This code snippet shows how to register a plugin in Nushell. It uses the `register` command with the `-e` flag to specify the serialization format (json) and the path to the plugin executable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\n> register -e json ~/.cargo/bin/nu_plugin_extra_query\n\n```\n\n----------------------------------------\n\nTITLE: Rolling Table Columns Left\nDESCRIPTION: Example demonstrating how to roll columns of a table to the left, affecting both headers and data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_left.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b c]; [1 2 3] [4 5 6]] | roll left\n╭───┬───┬───┬───╮\n│ # │ b │ c │ a │\n├───┼───┼───┼───┤\n│ 0 │ 2 │ 3 │ 1 │\n│ 1 │ 5 │ 6 │ 4 │\n╰───┴───┴───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Saving DataFrame to CSV with Custom Delimiter\nDESCRIPTION: Example of saving a dataframe to CSV format with a custom delimiter character\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars save test.csv --csv-delimiter '|'\n```\n\n----------------------------------------\n\nTITLE: Polars Rolling Command Signature\nDESCRIPTION: The base command signature for performing rolling calculations on a series using polars plugin.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_rolling.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars rolling {flags} (type) (window)\n```\n\n----------------------------------------\n\nTITLE: HTTP Requests in C# with HttpClient, WebClient, HttpWebRequest/Response\nDESCRIPTION: Demonstrates how to perform HTTP POST requests in C# using `HttpClient`, `WebClient`, `HttpWebRequest/Response`. This is the C# equivalent of the `post` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n\"HttpClient,WebClient, HttpWebRequest/Response\"\n```\n\n----------------------------------------\n\nTITLE: Creating Single Directory\nDESCRIPTION: Example showing how to create a single directory named 'foo'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mkdir.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> mkdir foo\n```\n\n----------------------------------------\n\nTITLE: Checking String Prefix in Nushell\nDESCRIPTION: The 'str starts-with' command checks if an input string starts with a specified substring. It can be used with various data types and supports case-insensitive matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_starts-with.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str starts-with {flags} (string) ...rest\n```\n\n----------------------------------------\n\nTITLE: Demonstrating nu-highlight Usage in Nushell\nDESCRIPTION: Shows an example of using the nu-highlight command to syntax highlight a simple string containing a variable assignment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-highlight.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'let x = 3' | nu-highlight\n```\n\n----------------------------------------\n\nTITLE: Example of Scoped Environment Variables in Nushell\nDESCRIPTION: This snippet demonstrates Nushell's scoped environment in action. The cd command changes directory within each iteration of the loop, but the change is scoped to that iteration and doesn't persist.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nls | each { |row|\n  cd $row.name\n  make\n}\n```\n\n----------------------------------------\n\nTITLE: Starship Prompt Configuration for Overlays\nDESCRIPTION: TOML configuration for Starship prompt to display active Nushell overlays.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/setup.md#2025-04-19_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[env_var.NU_OVERLAYS]\nsymbol = '📌 '\nformat = 'with [$symbol($env_value )]($style)'\nstyle = 'red'\n```\n\n----------------------------------------\n\nTITLE: Computing Table Column Medians\nDESCRIPTION: Example demonstrating how to compute medians for columns in a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_median.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [{a: 1 b: 3} {a: 2 b: -1} {a: -3 b: 5}] | math median\n╭───┬───╮\n│ a │ 1 │\n│ b │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `reject` to Python's `del` keyword\nDESCRIPTION: Demonstrates the equivalent of Nushell's `reject` command using Python's `del` keyword for deleting elements from a dictionary or list. This is used to remove elements based on a condition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n\"del\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Alternating Rows\nDESCRIPTION: Example showing how to drop non-consecutive rows (0, 2, and 4) from a numeric list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3,4,5] | drop nth 0 2 4\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 3 │\n│ 2 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The basic syntax for the char command showing required parameters and rest arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/char.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> char {flags} (character) ...rest\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Path Retrieval in Nushell\nDESCRIPTION: Shows how to use the --sensitive flag for case-sensitive data retrieval, noting that it won't match 'PATH'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> $env | get --sensitive Path\n\n```\n\n----------------------------------------\n\nTITLE: Using the Timeit Command for Performance Evaluation in Nushell\nDESCRIPTION: This segment describes the changes to the 'timeit' command in Nushell, emphasizing that it now only accepts closures as arguments. This adjustment is designed to enhance clarity surrounding evaluation timing, preventing unintended double evaluations of expressions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Adding New Column to Polars DataFrame in Nushell\nDESCRIPTION: Shows how to add a new column to an existing Polars DataFrame using the 'polars with-column' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_23\n\nLANGUAGE: nu\nCODE:\n```\nlet df_8 = $df_3 | polars with-column $df_5 --name new_col\n$df_8\n```\n\n----------------------------------------\n\nTITLE: Setting File Path Metadata\nDESCRIPTION: Example demonstrating how to set filepath metadata on a string value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata_set.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'crates' | metadata set --datasource-filepath $'(pwd)/crates' | metadata\n```\n\n----------------------------------------\n\nTITLE: Inserting New Value at End of List in Nushell\nDESCRIPTION: This example shows how to insert a new value at the end of a list using the 'upsert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2 3] | upsert 3 4\n```\n\n----------------------------------------\n\nTITLE: Stream Description without Collection - Nushell\nDESCRIPTION: Example showing how to describe input without collecting streams using the --no-collect flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/describe.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | each {|i| echo $i} | describe --no-collect\n```\n\n----------------------------------------\n\nTITLE: Compact List Example\nDESCRIPTION: Example demonstrating how to filter out null values from a simple list\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/compact.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1, null, 2] | compact\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Generic command pattern for installing Nushell plugins using Cargo. Replace 'plugin name' with the specific plugin identifier.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-01-18-nushell_0_43.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Math Sin Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'math sin' function in Nushell. It shows that the command accepts flags and does not require any mandatory arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sin.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math sin {flags} \n```\n\n----------------------------------------\n\nTITLE: Basic group-by Command Signature and Parameters in Nushell\nDESCRIPTION: Shows the command signature for the group-by filter in Nushell. The command allows grouping items in a list or table by one or more columns and returns a record containing those groups.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/group-by.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> group-by {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Rotating Binary Data Right in Nushell\nDESCRIPTION: Example showing how to rotate binary data (0x[ff bb 03]) right by 10 bits, with output displayed in hexadecimal format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_ror.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[ff bb 03] | bits ror 10\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   c0 ff ee                                             ×××\n\n```\n\n----------------------------------------\n\nTITLE: Basic Dice Roll Example in Nushell\nDESCRIPTION: Example showing how to roll a single 6-sided die using the default parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_dice.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> random dice\n```\n\n----------------------------------------\n\nTITLE: Renaming a Single Column in Nushell\nDESCRIPTION: Demonstrates renaming a single column in a table by providing a new column name\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rename.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[a, b]; [1, 2]] | rename my_column\n```\n\n----------------------------------------\n\nTITLE: Previewing first rows of a dataframe in Nushell\nDESCRIPTION: Demonstrates how to view the first row of a dataframe in Nushell using the polars first command. This provides a quick way to examine the structure and initial data of a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$df_0 | polars first\n```\n\n----------------------------------------\n\nTITLE: Summing Columns in a Table with Math Sum in Nushell\nDESCRIPTION: Illustrates how to use 'math sum' to calculate the sum of each column in a table structure in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sum.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | math sum\n╭───┬───╮\n│ a │ 4 │\n│ b │ 6 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Weighted Sorting in Nushell\nDESCRIPTION: Shows how to sort using a weighted dictionary and closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nlet weight = {alpha: 10, beta: 5, gamma: 3}\n[alpha gamma beta gamma alpha] | sort-by {|val| $weight | get $val }\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Not Found Hook in Nushell for Windows\nDESCRIPTION: This snippet configures a 'command_not_found' hook in Nushell's environment. It uses the 'ftype' command to search for program paths related to the unknown command, then formats and returns the results as a table. This can help users identify potential programs to alias for the command they attempted to use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    ...other config...\n\n    hooks: {\n        ...other hooks...\n\n        command_not_found: {\n            |cmd_name| (\n                try {\n                    let attrs = (\n                        ftype | find $cmd_name | to text | lines | reduce -f [] { |line, acc|\n                            $line | parse \"{type}={path}\" | append $acc\n                        } | group-by path | transpose key value | each { |row|\n                            { path: $row.key, types: ($row.value | get type | str join \", \") }\n                        }\n                    )\n                    let len = ($attrs | length)\n\n                    if $len == 0 {\n                        return null\n                    } else {\n                        return ($attrs | table --collapse)\n                    }\n                }\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespaces in Headers and Values - Nushell\nDESCRIPTION: This snippet shows the usage of the 'from csv' command with the --trim flag to remove leading and trailing whitespaces from column headers and field values in the resultant table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> open data.txt | from csv --trim all\n```\n\n----------------------------------------\n\nTITLE: Calculate Arctanh Example\nDESCRIPTION: Example showing how to calculate the inverse hyperbolic tangent of 1 using the math arctanh command, which returns infinity.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arctanh.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | math arctanh\ninf\n```\n\n----------------------------------------\n\nTITLE: Creating Last Expression from Column in Nushell\nDESCRIPTION: Example showing how to create a last expression from a column using 'polars last', which can be used in other polars operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_last.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> polars col a | polars last\n```\n\n----------------------------------------\n\nTITLE: Group-By Sum Aggregation\nDESCRIPTION: Example demonstrating how to perform a sum aggregation on grouped data. Groups the data by column 'a' and sums the values in column 'b' for each group.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sum.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [one 2] [one 4] [two 1]] | polars into-df | polars group-by a | polars agg (polars col b | polars sum) | polars collect | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Inserting a Computed Column in Nushell\nDESCRIPTION: Shows how to insert a new column with values calculated from existing columns using a closure. It operates on a table and the closure multiplies 'foo' values by 2 to generate 'bar'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/insert.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo]; [7] [8] [9]] | insert bar {|row| $row.foo * 2 }\n╭───┬─────┬─────╮\n│ # │ foo │ bar │\n├───┼─────┼─────┤\n│ 0 │   7 │  14 │\n│ 1 │   8 │  16 │\n│ 2 │   9 │  18 │\n╰───┴─────┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Extra Features in Rust\nDESCRIPTION: Command to install Nushell with additional features using Cargo. This installs Nushell with all available goodies.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-30-nushell_0_29.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Flattening Dataframe Example in Nushell\nDESCRIPTION: Demonstrates how to flatten a nested array column in a dataframe containing hobby lists\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_flatten.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[id name hobbies]; [1 Mercy [Cycling Knitting]] [2 Bob [Skiing Football]]] | polars into-df | polars flatten hobbies | polars collect\n```\n\n----------------------------------------\n\nTITLE: Running a Nushell Script File\nDESCRIPTION: Executes a Nushell script file with standard library and default environment, but without user configurations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_27\n\nLANGUAGE: nushell\nCODE:\n```\nnu test.nu\n```\n\n----------------------------------------\n\nTITLE: Substring with Negative Index in Nushell\nDESCRIPTION: Example of extracting a substring using a negative end index, which counts back from the end of the string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_substring.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n>  'good nushell' | str substring 5..-2\nnushel\n```\n\n----------------------------------------\n\nTITLE: Filling NaN Values in Structured Dataframe\nDESCRIPTION: Example demonstrating how to fill NaN values with 0 in a structured dataframe with multiple columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_fill-nan.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [0.2 1] [0.1 NaN]] | polars into-df | polars fill-nan 0\n```\n\n----------------------------------------\n\nTITLE: Structured Escape Codes\nDESCRIPTION: Example showing how to use structured escape codes with fg, bg, and attr keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> let bold_blue_on_red = {  # `fg`, `bg`, `attr` are the acceptable keys, all other keys are considered invalid and will throw errors.\n        fg: '#0000ff'\n        bg: '#ff0000'\n        attr: b\n    }\n    $\"(ansi --escape $bold_blue_on_red)Hello, Nu World!(ansi reset)\"\nHello, Nu World!\n```\n\n----------------------------------------\n\nTITLE: Nushell Plugin Stop Command Signature\nDESCRIPTION: The basic syntax for stopping a plugin in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_stop.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin stop {flags} (name)\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum of Mixed Data Types in Nushell\nDESCRIPTION: Illustrates the behavior of 'math min' when applied to a list containing different data types, which may produce unexpected results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_min.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [-50 'hello' true] | math min\ntrue\n```\n\n----------------------------------------\n\nTITLE: Reverse Cumulative Sum for a Series in Polars\nDESCRIPTION: Demonstrates calculating a reverse cumulative sum on a series of numbers. The --reverse flag causes the cumulative operation to work backward from the end of the series.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cumulative.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2 3 4 5] | polars into-df | polars cumulative sum --reverse\n```\n\n----------------------------------------\n\nTITLE: Configuring Direnv Hooks in Nushell\nDESCRIPTION: Configuration snippet that sets up Nushell hooks to automatically load and unload direnv environments when changing directories. The hook checks for direnv's presence, exports the environment in JSON format, and handles PATH conversions if specified.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/direnv.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n  hooks: {\n    pre_prompt: [{ ||\n      if (which direnv | is-empty) {\n        return\n      }\n\n      direnv export json | from json | default {} | load-env\n      if 'ENV_CONVERSIONS' in $env and 'PATH' in $env.ENV_CONVERSIONS {\n        $env.PATH = do $env.ENV_CONVERSIONS.PATH.from_string $env.PATH\n      }\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nushell $in with Arithmetic Operations\nDESCRIPTION: Shows how `$in` refers to the previous expression's result when used anywhere other than the first position in a pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n4               # Pipeline input\n| $in * $in     # $in is 4 in this expression\n| $in / 2       # $in is now 16 in this expression\n| $in           # $in is now 8\n# =>   8\n```\n\n----------------------------------------\n\nTITLE: Converting Binary String to Integer with Custom Radix in Nushell\nDESCRIPTION: Shows how to convert a binary string to an integer using a specified radix (base 2).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n'1101' | into int --radix 2\n```\n\n----------------------------------------\n\nTITLE: Removing a file in Nu\nDESCRIPTION: Removes the given file using the 'rm' command. This command permanently deletes the file from the file system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n\"rm <path>\"\n```\n\n----------------------------------------\n\nTITLE: Decoding Basic Base64 String in Nushell\nDESCRIPTION: Example showing how to decode a simple Base64 encoded string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base64.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> \"U29tZSBEYXRh\" | decode base64 | decode\n```\n\n----------------------------------------\n\nTITLE: Converting Directory Listing to SQLite Database\nDESCRIPTION: Example of converting the output of the 'ls' command into a SQLite database with the default table name 'main'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_sqlite.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ls | into sqlite my_ls.db\n```\n\n----------------------------------------\n\nTITLE: Convert cell path into cell path in NuShell\nDESCRIPTION: This snippet shows how to convert a cell path into another cell path using the `into cell-path` command in NuShell. This conversion is redundant and doesn't change the cell path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_cell-path.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\n> 5 | into cell-path | into cell-path\n$.5\n\n```\n\n----------------------------------------\n\nTITLE: Get Element At Index in Nushell and PowerShell\nDESCRIPTION: The `nth` command with parameters `limit x offset y` or `row_number() =` returns the element at a specific index `x`. PowerShell uses indexing operators or the `ElementAt(x)` method.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Computing Median in Group-By Aggregation with Polars in Nushell\nDESCRIPTION: Demonstrates how to perform a median aggregation on grouped data using polars. The example groups data by column 'a' and calculates the median of column 'b' for each group.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_median.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [one 2] [one 4] [two 1]]\n                    | polars into-df\n                    | polars group-by a\n                    | polars agg (polars col b | polars median)\n                    | polars collect\n                    | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Nushell str title-case Command Signature\nDESCRIPTION: The signature of the 'str title-case' command in Nushell, showing the basic syntax for use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_title-case.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> str title-case {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Table Column Variance Calculation\nDESCRIPTION: Demonstrates calculating variance for each column in a table structure with two columns 'a' and 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_variance.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | math variance\n╭───┬───╮\n│ a │ 1 │\n│ b │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Custom Dice Roll Example in Nushell\nDESCRIPTION: Example demonstrating how to roll multiple dice with custom number of sides using the --dice and --sides flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_dice.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> random dice --dice 10 --sides 12\n```\n\n----------------------------------------\n\nTITLE: Prepending List to Item\nDESCRIPTION: Example showing how to prepend a list of integers to a single integer value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/prepend.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 0 | prepend [1 2 3]\n```\n\n----------------------------------------\n\nTITLE: Replacing String in Entire DataFrame\nDESCRIPTION: Example demonstrating string pattern replacement across an entire DataFrame using polars replace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_replace.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [abc abc abc] | polars into-df | polars replace --pattern ab --replace AB\n```\n\n----------------------------------------\n\nTITLE: Defining 'pwd' Command Flags in Markdown\nDESCRIPTION: This snippet defines the available flags for the 'pwd' command in Nushell. The '--physical' or '-P' flag resolves symbolic links when returning the current working directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/pwd.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n -  `--physical, -P`: Resolve symbolic links\n```\n\n----------------------------------------\n\nTITLE: Using sys temp Command in Nushell\nDESCRIPTION: Executes the `sys temp` command to display temperature readings from system components in a tabular format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_temp.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> sys temp\n\n```\n\n----------------------------------------\n\nTITLE: Filling a Filesize on Both Sides\nDESCRIPTION: This code snippet demonstrates filling a filesize value on both sides to a specified width using a chosen character. It utilizes the 'fill' command with middle alignment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/fill.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 1kib | fill --alignment middle --character '0' --width 10\n0001024000\n```\n\n----------------------------------------\n\nTITLE: Converting List of Timestamps to Datetimes in Nushell\nDESCRIPTION: This snippet shows how to convert a list of timestamp strings into a list of datetime objects in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> [\"2023-03-30 10:10:07 -05:00\", \"2023-05-05 13:43:49 -05:00\", \"2023-06-05 01:37:42 -05:00\"] | into datetime\n╭───┬─────────────╮\n│ 0 │ 2 years ago │\n│ 1 │ 2 years ago │\n│ 2 │ 2 years ago │\n╰───┴─────────────╯\n```\n\n----------------------------------------\n\nTITLE: Binary Data Bitwise AND Operation\nDESCRIPTION: Shows bitwise AND operation between two binary values represented in hexadecimal format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_and.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[ab cd] | bits and 0x[99 99]\n```\n\n----------------------------------------\n\nTITLE: Basic from ssv Example in Nushell\nDESCRIPTION: Demonstrates converting a space-separated value string into a Nushell table, where the first row is treated as column headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_ssv.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'FOO   BAR\n1   2' | from ssv\n╭───┬─────┬─────╮\n│ # │ FOO │ BAR │\n├───┼─────┼─────┤\n│ 0 │ 1   │ 2   │\n╰───┴─────┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Datetime to Different Timezone in Nushell\nDESCRIPTION: This example shows how to convert a datetime object to a different time zone using the 'date to-timezone' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_to-timezone.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n\"2020-10-10 10:00:00 +02:00\" | into datetime | date to-timezone \"+0500\"\n```\n\n----------------------------------------\n\nTITLE: Create custom error with span in Nushell\nDESCRIPTION: This snippet demonstrates how to create a custom error message with a span, useful for custom commands. It defines a function `foo` that takes an argument `x` and creates an error using the span metadata of `x`. It makes use of the `metadata` command to access the span of the input `x`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/error_make.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> def foo [x] {\n        error make {\n            msg: \"this is fishy\"\n            label: {\n                text: \"fish right here\"\n                span: (metadata $x).span\n            }\n        }\n    }\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining ulimit Command Signature in Nushell\nDESCRIPTION: The signature of the ulimit command in Nushell, showing the basic syntax with optional flags and limit parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ulimit.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ulimit {flags} (limit)\n```\n\n----------------------------------------\n\nTITLE: Sending INT Signal to Process in Nushell\nDESCRIPTION: Example showing how to send an INT signal (signal 2) to a specific process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/kill.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> kill -s 2 12345\n```\n\n----------------------------------------\n\nTITLE: Config Option for File Size Display\nDESCRIPTION: A new configuration option, `$env.config.filesize.show_unit`, determines if file sizes are displayed with units. When set to false, sizes will be shown without units, useful when a specific unit is defined.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Renaming Columns Using Record Syntax in Nushell\nDESCRIPTION: Example of using the rename command with the --column option, which now accepts a record rather than a list, allowing for intuitive column renaming operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\nls | where type == file | rename --column {name: filename, size: nb_bytes}\n```\n\n----------------------------------------\n\nTITLE: Showing Installed Plugins with Status\nDESCRIPTION: The 'plugin list' command displays all installed plugins along with their running status and process IDs. This helps users manage their plugins effectively.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin list\n╭───┬─────────┬────────────┬─────────┬───────────────────────┬───────┬───────────────────────────────╮\n│ # │  name   │ is_running │   pid   │       filename        │ shell │           commands            │\n├───┼─────────┼────────────┼─────────┼───────────────────────┼───────┼───────────────────────────────┤\n│ 0 │ gstat   │ true       │ 1389890 │ .../nu_plugin_gstat   │       │ ╭───┬───────╮                 │\n│   │         │            │         │                       │       │ │ 0 │ gstat │                 │\n│   │         │            │         │                       │       │ ╰───┴───────╯                 │\n│ 1 │ inc     │ false      │         │ .../nu_plugin_inc     │       │ ╭───┬─────╮                   │\n│   │         │            │         │                       │       │ │ 0 │ inc │                   │\n│   │         │            │         │                       │       │ ╰───┴─────╯                   │\n│ 2 │ example │ false      │         │ .../nu_plugin_example │       │ ╭───┬───────────────────────╮ │\n│   │         │            │         │                       │       │ │ 0 │ nu-example-1          │ │\n│   │         │            │         │                       │       │ │ 1 │ nu-example-2          │ │\n│   │         │            │         │                       │       │ │ 2 │ nu-example-3          │ │\n│   │         │            │         │                       │       │ │ 3 │ nu-example-config     │ │\n│   │         │            │         │                       │       │ │ 4 │ nu-example-disable-gc │ │\n│   │         │            │         │                       │       │ ╰───┴───────────────────────╯ │\n╰───┴─────────┴────────────┴─────────┴───────────────────────┴───────┴───────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Chained When-Otherwise Expression in Polars\nDESCRIPTION: Creates multiple 'when' conditions with an 'otherwise' fallback, returning 4 when column 'a' is greater than 2, 6 when column 'a' is less than 0, otherwise returning 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_otherwise.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\npolars when ((polars col a) > 2) 4 | polars when ((polars col a) < 0) 6 | polars otherwise 0\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Rows and Columns in Nushell\nDESCRIPTION: This example shows how to use the 'select' command to retrieve multiple rows and specified columns from a table, demonstrating the power of selecting subsets of data in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n$data | select date condition 0 1\n# => ╭───┬─────────────┬───────────╮\n# => │ # │    date     │ condition │\n# => ├───┼─────────────┼───────────┤\n# => │ 0 │ 2 years ago │ sunny     │\n# => │ 1 │ 2 years ago │ sunny     │\n# => ╰───┴─────────────┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Updating Records in In-Memory SQLite Database with Nushell\nDESCRIPTION: Example demonstrating how to update records in the in-memory SQLite database using the 'stor update' command with the table name and update record parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_update.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> stor update --table-name nudb --update-record {str1: nushell datetime1: 2020-04-17}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell 0.42 with extra features using Cargo in Rust\nDESCRIPTION: Command to install Nushell 0.42 with additional features using Cargo package manager in Rust. This installs Nushell with all available extras.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-12-28-nushell_0_42.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Converting Simple YAML to Table in Nushell\nDESCRIPTION: Example showing how to convert a simple YAML key-value pair to a Nushell table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_yaml.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n'a: 1' | from yaml\n╭───┬───╮\n│ a │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Extracting Bytes from a Record Field in Nushell\nDESCRIPTION: This example demonstrates how to extract bytes starting from index 3 to the end from a binary field named 'data' in a record. The output is shown as a table with the extracted bytes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> { data: 0x[33 44 55 10 01 13 10] } | bytes at 3.. data\n╭──────┬─────────────────╮\n│ data │ [16, 1, 19, 16] │\n╰──────┴─────────────────╯\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE with Authentication\nDESCRIPTION: Execute an HTTP DELETE request with username and password authentication credentials\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_delete.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nhttp delete --user myuser --password mypass https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Custom Message Assertion in Nushell\nDESCRIPTION: Shows how to include a custom error message with an assertion to provide more context when the assertion fails.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet a = 0\nassert ($a == 19) $\"The lockout code is wrong, received: ($a)\"\n```\n\n----------------------------------------\n\nTITLE: Moving a File to a Directory using mv in Nushell\nDESCRIPTION: Shows how to move a file named 'test.txt' into a subdirectory named 'my/subdirectory'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mv.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> mv test.txt my/subdirectory\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a Dataframe in Nushell\nDESCRIPTION: Demonstrates how to create a dataframe from a CSV file and query its first few rows using the new dataframe commands in Nushell 0.34.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-07-13-nushell_0_34.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> let df = (dataframe open .\\Data7602DescendingYearOrder.csv)\n> $df | dataframe first\n\n───┬──────────┬─────────┬──────┬───────────┬──────────\n # │ anzsic06 │  Area   │ year │ geo_count │ ec_count\n───┼──────────┼─────────┼──────┼───────────┼──────────\n 0 │ A        │ A100100 │ 2000 │        96 │      130\n 1 │ A        │ A100200 │ 2000 │       198 │      110\n 2 │ A        │ A100300 │ 2000 │        42 │       25\n 3 │ A        │ A100400 │ 2000 │        66 │       40\n 4 │ A        │ A100500 │ 2000 │        63 │       40\n───┴──────────┴─────────┴──────┴───────────┴──────────\n```\n\n----------------------------------------\n\nTITLE: Calculating Natural Logarithm in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'math ln' command to calculate the natural logarithm of e (2.7182818) and round the result to 4 decimal places.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_ln.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> 2.7182818 | math ln | math round --precision 4\n1\n```\n\n----------------------------------------\n\nTITLE: Directory Change Command Definition\nDESCRIPTION: Shows how to define a command that changes directory using --env flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/def.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> def --env gohome [] { cd ~ }; gohome; $env.PWD == ('~' | path expand)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Getting an Item from a List in Nushell\nDESCRIPTION: Demonstrates how to retrieve an element at index 1 from a list using the 'get' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [0 1 2] | get 1\n1\n```\n\n----------------------------------------\n\nTITLE: Stopping a Running Plugin\nDESCRIPTION: The 'plugin stop' command allows users to deregister a running plugin from Nushell's list of active plugins without sending a termination signal to the plugin process itself.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin stop inc\n> plugin list | where is_running and name == inc\n╭────────────╮\n│ empty list │\n╰────────────╯\n```\n\n----------------------------------------\n\nTITLE: Using polars fetch to retrieve rows from a lazyframe in Nushell\nDESCRIPTION: This example demonstrates how to use the polars fetch command to retrieve the first 2 rows from a dataframe created from a table. The command accepts a numeric parameter specifying how many rows to fetch.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_fetch.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [4 2] [2 2]] | polars into-df | polars fetch 2\n```\n\n----------------------------------------\n\nTITLE: Using an Alias with Flags\nDESCRIPTION: This snippet illustrates how to use the alias 'll' with an additional flag '-a' to extend its functionality, effectively running 'ls -l -a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nll -a\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Table Data in Nushell\nDESCRIPTION: This snippet illustrates how to access a nested value in structured data, specifically extracting a temperature reading from a nested list within a record accessed through indices.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n$data.temps.2.1\n# => 36.67\n```\n\n----------------------------------------\n\nTITLE: Encoding Binary Value to Hex\nDESCRIPTION: Demonstrates converting a binary value to hexadecimal representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_hex.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[C3 06] | encode hex\nC306\n```\n\n----------------------------------------\n\nTITLE: Group-By Minimum Aggregation\nDESCRIPTION: Demonstrates how to perform minimum aggregation on grouped data using polars min with group-by operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_min.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [one 2] [one 4] [two 1]]\n                | polars into-df\n                | polars group-by a\n                | polars agg (polars col b | polars min)\n                | polars collect\n                | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Custom Format File Parsing\nDESCRIPTION: Shows different methods to parse a custom-formatted text file with band information into a structured table using Nushell commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/files.md#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nband:album:year\nFugazi:Steady Diet of Nothing:1991\nFugazi:The Argument:2001\nFugazi:7 Songs:1988\nFugazi:Repeater:1990\nFugazi:In On The Kill Taker:1993\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen bands.txt | lines | split column \":\" Band Album Year | skip 1 | sort-by Year\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen bands.txt | lines | parse \"{Band}:{Album}:{Year}\" | skip 1 | sort-by Year\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen bands.txt | lines | split column \":\" | headers | sort-by year\n```\n\n----------------------------------------\n\nTITLE: Using Negative End Index with bytes at in Nushell\nDESCRIPTION: This example demonstrates how to extract bytes from the start up to a negative index (inclusive). The output shows the first 4 bytes of the binary data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[33 44 55 10 01 13 10] | bytes at ..-4\nLength: 4 (0x4) bytes | printable whitespace ascii_other non_ascii\n00000000:   33 44 55 10                                          3DU•\n\n```\n\n----------------------------------------\n\nTITLE: Creating Modules from Directories in Nushell\nDESCRIPTION: This snippet provides information about how to create a Nushell module from a directory. The directory must contain a 'mod.nu' file, and all other .nu files will be treated as submodules. This allows users to utilize traditional shell patterns more effectively.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-05-16-nushell_0_80.md#2025-04-19_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Redirecting Command Output\nDESCRIPTION: This example demonstrates how to use the `display_output` hook to redirect the output of commands. It shows how to convert the output to HTML and save it to a file, which can then be viewed in a web browser. This is the basic pattern to route the data to a custom window or application.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks {\n    display_output: { to html --partial --no-color | save --raw /tmp/nu-output.html }\n})\"\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Lists in Nushell\nDESCRIPTION: Shows how to flatten nested lists using the flatten command with different depths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n[1 [2 3] 4 [5 6]] | flatten\n\n[[1 2] [3 [4 5 [6 7 8]]]] | flatten | flatten | flatten\n```\n\n----------------------------------------\n\nTITLE: Creating Git Completions Module in Nushell\nDESCRIPTION: Defines external Git commands and their completions including main, add, and checkout commands. Includes a custom completion function for Git branches.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/modules.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nexport extern main [\n    --version(-v)\n    -C: string\n    # ... etc.\n]\n\nexport extern add [\n    --verbose(-v)\n    --dry-run(-n)\n    # ... etc.\n]\n\nexport extern checkout [\n    branch: string@complete-git-branch\n]\n\ndef complete-git-branch [] {\n    # ... code to list git branches\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Access Example Usage\nDESCRIPTION: Example showing how to access both metadata and data from a JSON stream using the metadata access command. The example converts a record to JSON and then accesses its metadata.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata_access.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> {foo: bar} | to json --raw | metadata access {|meta| {in: $in, meta: $meta}}\n```\n\n----------------------------------------\n\nTITLE: Casting DataFrame Column Type\nDESCRIPTION: Demonstrates casting a column in a dataframe to an unsigned 8-bit integer type\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cast.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars cast u8 a | polars schema\n```\n\n----------------------------------------\n\nTITLE: Nushell Do Command Signature\nDESCRIPTION: The basic syntax signature for the 'do' command showing its structure with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> do {flags} (closure) ...rest\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Conversion Commands\nDESCRIPTION: A Vue template that renders a table showing conversion commands and their descriptions. Uses v-for directive to iterate through filtered commands and displays command titles as links with their usage descriptions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/conversions.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Removing Last Column from a Table in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'drop column' command to remove the last column from a table in Nushell. It requires a table as input and outputs a table with one fewer column. The main parameter is 'columns', representing the number of columns to remove.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_column.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> [[lib, extension]; [nu-lib, rs] [nu-core, rb]] | drop column\n╭───┬─────────╮\n│ # │   lib   │\n├───┼─────────┤\n│ 0 │ nu-lib  │\n│ 1 │ nu-core │\n╰───┴─────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Generate Random Float with Upper Bound\nDESCRIPTION: Generates a random float with a maximum value of 500.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_float.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> random float ..500\n```\n\n----------------------------------------\n\nTITLE: Renaming Record Fields in Nushell\nDESCRIPTION: Demonstrates renaming fields in a record by providing new field names\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rename.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n{a: 1 b: 2} | rename x y\n```\n\n----------------------------------------\n\nTITLE: Updating List Elements in Nushell\nDESCRIPTION: Demonstrates updating a specific element in a list using the update command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[1, 2, 3, 4] | update 1 10\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent in Nushell\nDESCRIPTION: Signature for the 'math tan' command in Nushell. It accepts flags and calculates the tangent of the input number(s).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_tan.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math tan {flags} \n```\n\n----------------------------------------\n\nTITLE: Setting Values at Specific Indices in a Polars Series\nDESCRIPTION: Demonstrates how to create a new Series by setting a specific value at given indices using polars set-with-idx. The example sets the value 123 at positions 0 and 2 in the 'int_1' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_35\n\nLANGUAGE: nushell\nCODE:\n```\nlet indices_3 = [0 2] | polars into-df\n$df_1 | polars get int_1 | polars set-with-idx 123 --indices $indices_3\n```\n\n----------------------------------------\n\nTITLE: Natural Sorting in Nushell\nDESCRIPTION: Illustrates natural sorting using the `--natural` flag. This sorts numbers within strings as numbers, ensuring that \"2\" comes before \"4\" even when they are strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n  [1 \"4\" 3 \"2\"] | sort --natural\n  ╭───┬───╮\n  │ 0 │ 1 │\n  │ 1 │ 2 │\n  │ 2 │ 3 │\n  │ 3 │ 4 │\n  ╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Importing the dirs Module in Nushell\nDESCRIPTION: Command to import the standard library dirs module, which makes directory stack commands available.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/directory_stack.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nuse std/dirs\n```\n\n----------------------------------------\n\nTITLE: Activating Environment When Entering a Directory\nDESCRIPTION: Configures a hook to automatically activate an environment when entering specific directories by checking for a `test-env.nu` file. This setup facilitates dynamic environment management based on directory changes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks.env_change.PWD {\n    [\n        {\n            condition: {|_, after|\n                ($after == '/path/to/target/dir'\n                    and ($after | path join test-env.nu | path exists))\n            }\n            code: \"overlay use test-env.nu\"\n        }\n        {\n            condition: {|before, after|\n                ('/path/to/target/dir' not-in $after\n                    and '/path/to/target/dir' in ($before | default \"\")\n                    and 'test-env' in (overlay list))\n            }\n            code: \"overlay hide test-env --keep-env [ PWD ]\"\n        }\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Polars Columns to Display Dataframe Column Names in Nushell\nDESCRIPTION: An example demonstrating how to convert a table to a dataframe and then display its column names using the polars columns command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_columns.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars columns\n╭───┬───╮\n│ 0 │ a │\n│ 1 │ b │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Converting Zero-Padded String to Integer with Octal Radix in Nushell\nDESCRIPTION: Shows how to convert a zero-padded string to an integer using octal (base 8) interpretation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n'0010132' | into int --radix 8\n```\n\n----------------------------------------\n\nTITLE: Command Signature for hide-env\nDESCRIPTION: Shows the command syntax and structure for hide-env. Allows hiding one or multiple environment variables with an optional ignore-errors flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hide-env.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nhide-env {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Computing Median of File Sizes\nDESCRIPTION: Example showing how to compute the median of a list of file sizes with different units.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_median.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [5KB 10MB 200B] | math median\n5.0 kB\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Values Example\nDESCRIPTION: Example showing how to count unique values in a numeric array by converting it to a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_n-unique.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 1 2 2 3 3 4] | polars into-df | polars n-unique\n╭───┬──────────────╮\n│ # │ count_unique │\n├───┼──────────────┤\n│ 0 │            4 │\n╰───┴──────────────╯\n```\n\n----------------------------------------\n\nTITLE: Polars Command Signature in Nushell\nDESCRIPTION: The basic command signature for the polars store-ls command showing its syntax pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_store-ls.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars store-ls {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting File Size to Filesize\nDESCRIPTION: Demonstrates converting an existing filesize value to the filesize format. The value '4KB' is converted to '4.0 kB'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_filesize.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n4KB | into filesize\n```\n\n----------------------------------------\n\nTITLE: List Example in Nu\nDESCRIPTION: This snippet shows an example of creating a list containing strings in Nu. The `echo` command prints the list to the standard output, displaying the index and the corresponding string value for each element.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/types_of_data.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\necho [sam fred george]\n# => ───┬────────\n# =>  0 │ sam\n# =>  1 │ fred\n# =>  2 │ george\n# => ───┴────────\n```\n\n----------------------------------------\n\nTITLE: Unpivoting Eager DataFrame Example\nDESCRIPTION: Example showing how to unpivot an eager DataFrame using index columns [b c] and value columns [a d].\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unpivot.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b c d]; [x 1 4 a] [y 2 5 b] [z 3 6 c]] | polars into-df | polars unpivot -i [b c] -o [a d]\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for load-env Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'load-env' command, showing that it accepts flags and an update parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/load-env.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> load-env {flags} (update)\n```\n\n----------------------------------------\n\nTITLE: Shifting Values with Custom Fill\nDESCRIPTION: Example demonstrating how to shift values in a lazy dataframe by 2 positions while filling null values with 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_shift.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 2 3 3] | polars into-lazy | polars shift 2 --fill 0 | polars collect\n```\n\n----------------------------------------\n\nTITLE: Walk Up Multiple Directory Levels\nDESCRIPTION: Example showing how to get a parent directory multiple levels up using the --num-levels flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_dirname.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> '/home/joe/code/test.txt' | path dirname --num-levels 2\n/home/joe\n```\n\n----------------------------------------\n\nTITLE: Incorrect For Loop Usage in Pipeline\nDESCRIPTION: Shows an error that occurs when trying to use a 'for' loop within a pipeline. Demonstrates that statement commands like 'for' cannot be used in pipelines which require expression commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n[1 2 3] | for x in $in { $x + 1 } | $in ++ [5 6 7]\n# => Error: nu::parser::unexpected_keyword\n# => \n# =>   × Statement used in pipeline.\n# =>    ╭─[entry #5:1:1]\n# =>  1 │ [1 2 3] | for x in $in { $x + 1 } | $in ++ [5 6 7]\n# =>    ·           ─┬─\n# =>    ·            ╰── not allowed in pipeline\n# =>    ╰────\n# =>   help: 'for' keyword is not allowed in pipeline. Use 'for' by itself, outside of a pipeline.\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Hash of String in Nushell (Binary Output)\nDESCRIPTION: Example showing how to generate a SHA256 hash of a string with binary output in Nushell using the --binary flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_sha256.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'abcdefghijklmnopqrstuvwxyz' | hash sha256 --binary\nLength: 32 (0x20) bytes | printable whitespace ascii_other non_ascii\n00000000:   71 c4 80 df  93 d6 ae 2f  1e fa d1 44  7c 66 c9 52   q××××××/•××D|f×R\n00000010:   5e 31 62 18  cf 51 fc 8d  9e d8 32 f2  da f1 8b 73   ^1b•×Q××××2××××s\n\n```\n\n----------------------------------------\n\nTITLE: Return First Row of Dataframe\nDESCRIPTION: Example showing how to return the first row of a dataframe using polars first command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_first.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars first\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 2 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `prepend` to Python's `deque.appendleft`\nDESCRIPTION: Illustrates how to prepend an element to a deque in Python using `deque.appendleft`, equivalent to the `prepend` command in Nushell.  Using a deque allows for efficient insertion at the beginning of the sequence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n\"deque.appendleft\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Module Source in Nushell\nDESCRIPTION: Example demonstrating how to view the source code of a module definition\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_source.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nmodule mod-foo { export-env { $env.FOO_ENV = 'BAZ' } }; view source mod-foo\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment Signature in Nushell\nDESCRIPTION: The command signature for the let command showing required parameters and flags format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/let.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> let {flags} (var_name) (initial_value)\n```\n\n----------------------------------------\n\nTITLE: Join Table of Structured Paths\nDESCRIPTION: Example showing how to join a table of structured paths into a list of paths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> [[ parent stem extension ]; [ '/home/viking' 'spam' 'txt' ]] | path join\n╭───┬───────────────────────╮\n│ 0 │ /home/viking/spam.txt │\n╰───┴───────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Creating a Range in PowerShell\nDESCRIPTION: Demonstrates how to create a range in PowerShell. The syntax `1..10` and `'a'..'f'` are used to create number and character ranges, respectively.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"1..10, 'a'..'f'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hooks with Code as Strings in Nushell\nDESCRIPTION: This snippet configures hooks where the code is defined as a string, enabling the creation of commands or aliases as if typing them directly in the REPL. Illustrates the flexibility offered by string-based code execution within hooks.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks {\n    pre_prompt: '$env.SPAM = \"eggs\"'\n})\n\n$env.SPAM\n# => eggs\n```\n\n----------------------------------------\n\nTITLE: Multiple String Splitting Example - Nushell\nDESCRIPTION: Demonstrates splitting multiple strings in a list, showing how the command handles list input to produce nested lists of characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_chars.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> ['hello', 'world'] | split chars\n╭───┬───────────╮\n│ 0 │ ╭───┬───╮ │\n│   │ │ 0 │ h │ │\n│   │ │ 1 │ e │ │\n│   │ │ 2 │ l │ │\n│   │ │ 3 │ l │ │\n│   │ │ 4 │ o │ │\n│   │ ╰───┴───╯ │\n│ 1 │ ╭───┬───╮ │\n│   │ │ 0 │ w │ │\n│   │ │ 1 │ o │ │\n│   │ │ 2 │ r │ │\n│   │ │ 3 │ l │ │\n│   │ │ 4 │ d │ │\n│   │ ╰───┴───╯ │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Basic Git Log Parsing in Nushell\nDESCRIPTION: Demonstrates how to fetch git commit history with a custom format and parse it into a structured table using the split column command. This example shows how to extract commit hash, subject, author name, email, and date from git log output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date\n```\n\n----------------------------------------\n\nTITLE: Hiding an Alias in Nushell\nDESCRIPTION: Demonstrates hiding a recently defined alias using the `hide` command. This removes the alias from the current scope, preventing further use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hide.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nalias lll = ls -l; hide lll\n```\n\n----------------------------------------\n\nTITLE: Taking Multiple List Elements\nDESCRIPTION: Example of taking the first two elements from a list in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | take 2\n```\n\n----------------------------------------\n\nTITLE: Query JSON for a list of first names\nDESCRIPTION: This example shows how to extract a list of first names from an array of friend objects within a JSON object.  The query `friends.#.first` uses the `#` wildcard to iterate over the friends array and retrieve the `first` field from each object. The output is a table containing the first names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_json.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '{\n  \"friends\": [\n    {\"first\": \"Dale\", \"last\": \"Murphy\", \"age\": 44, \"nets\": [\"ig\", \"fb\", \"tw\"]},\n    {\"first\": \"Roger\", \"last\": \"Craig\", \"age\": 68, \"nets\": [\"fb\", \"tw\"]},\n    {\"first\": \"Jane\", \"last\": \"Murphy\", \"age\": 47, \"nets\": [\"ig\", \"tw\"]}\n  ]\n}' | query json friends.#.first\n╭───┬───────╮\n│ 0 │ Dale  │\n│ 1 │ Roger │\n│ 2 │ Jane  │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Pipeline Input Closure\nDESCRIPTION: Example of using pipeline input in a closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> 77 | do { 100 + $in }\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Module Implementation\nDESCRIPTION: Example module containing a Fibonacci number calculation function for testing demonstration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n# `fib n` is the n-th Fibonacci number\nexport def fib [n: int] [ nothing -> int ] {\n    if $n == 0 {\n        return 0\n    } else if $n == 1 {\n        return 1\n    }\n\n    (fib ($n - 1)) + (fib ($n - 2))\n}\n```\n\n----------------------------------------\n\nTITLE: Launch Nushell as Login Shell\nDESCRIPTION: Command to launch Nushell as a login shell, executing all launch steps\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_20\n\nLANGUAGE: nushell\nCODE:\n```\nnu --login\n```\n\n----------------------------------------\n\nTITLE: Monitoring All File Changes in Current Directory with watch in Nushell\nDESCRIPTION: Shows how to use the 'watch' command to observe all file changes in the current directory, printing the operation type and file path for each change.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/watch.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> watch . { |op, path, new_path| $\"($op) ($path) ($new_path)\"}\n```\n\n----------------------------------------\n\nTITLE: Filtering DataFrame with Expression\nDESCRIPTION: Example of filtering a DataFrame using a comparison expression to select rows where column 'a' is greater than 1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_filter-with.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars filter-with ((polars col a) > 1)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine for Multiple Angles in Degrees\nDESCRIPTION: Example demonstrating how to calculate cosine values for a list of angles in degrees using the --degrees flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_cos.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [0 90 180 270 360] | math cos --degrees\n╭───┬───────╮\n│ 0 │  1.00 │\n│ 1 │  0.00 │\n│ 2 │ -1.00 │\n│ 3 │  0.00 │\n│ 4 │  1.00 │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Math Sqrt Command Signature\nDESCRIPTION: Command signature showing the basic syntax for the math sqrt operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sqrt.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math sqrt {flags} \n```\n\n----------------------------------------\n\nTITLE: Merging Records with Append Strategy\nDESCRIPTION: Shows how to merge records with inner tables using the append strategy flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge_deep.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> {inner: [{a: 1}, {b: 2}]} | merge deep {inner: [{c: 3}]} --strategy=append\n```\n\n----------------------------------------\n\nTITLE: Infinite Loop with Break in Nushell\nDESCRIPTION: Demonstrates the 'loop' command that creates an infinite loop, with a 'break' command to exit when a condition is met. This example increments a counter until it exceeds 10.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\nmut x = 0; loop { if $x > 10 { break }; $x = $x + 1 }; $x\n# => 11\n```\n\n----------------------------------------\n\nTITLE: Math Floor Example Usage\nDESCRIPTION: Example showing how to apply the floor function to a list of numbers, converting decimal numbers to integers by rounding down.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_floor.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1.5 2.3 -3.1] | math floor\n╭───┬────╮\n│ 0 │  1 │\n│ 1 │  2 │\n│ 2 │ -4 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Sequence Characters with String Join\nDESCRIPTION: Example demonstrating how to generate a character sequence and join them with a pipe character.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_char.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> seq char a e | str join '|'\n```\n\n----------------------------------------\n\nTITLE: Biased Random Boolean Generation\nDESCRIPTION: Example of generating a random boolean value with a 75% probability of returning true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_bool.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> random bool --bias 0.75\n```\n\n----------------------------------------\n\nTITLE: Filtering Timezones in Nushell\nDESCRIPTION: Example showing how to filter time zones by searching for 'Shanghai' in the timezone list using the where command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_list-timezone.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> date list-timezone | where timezone =~ Shanghai\n╭───┬───────────────╮\n│ # │   timezone    │\n├───┼───────────────┤\n│ 0 │ Asia/Shanghai │\n╰───┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting a String to SCREAMING_SNAKE_CASE in Nushell\nDESCRIPTION: Basic example showing how to convert a simple string 'NuShell' to SCREAMING_SNAKE_CASE format 'NU_SHELL' using the pipe operator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_screaming-snake-case.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"NuShell\" | str screaming-snake-case\n```\n\n----------------------------------------\n\nTITLE: Renaming Single DataFrame Column\nDESCRIPTION: Example demonstrating how to rename a single column in a Polars DataFrame created from structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_rename.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars rename a a_new\n```\n\n----------------------------------------\n\nTITLE: Nushell Error on Invalid Unicode Escape\nDESCRIPTION: This snippet illustrates how Nushell identifies and reports errors related to invalid unicode escape sequences within strings. The code attempts to use an invalid unicode sequence '\\u{1fbogus}', leading to an 'Invalid literal' error with specific details about the issue. Nushell requires unicode escapes to adhere to specific formatting and value rules.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-02-21-nushell_0_76.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n\">\\\"bad: \\\\u{1fbogus}\\\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating Sliding Window with Remainder in Nushell\nDESCRIPTION: Illustrates using the 'window' command with equal stride and the remainder flag, effectively chunking the input list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/window.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1, 2, 3, 4, 5] | window 3 --stride 3 --remainder\n```\n\n----------------------------------------\n\nTITLE: Using error make with Custom Error Labels in Nushell\nDESCRIPTION: Example of the refactored `error make` command in Nushell that now takes a `$.label.span` and a `$.help` parameter. This allows for creating custom error messages with specific labels and spans.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\nerror make {\n    msg: \"Message\"\n    label: {\n        text: \"Label text\"\n        span: (metadata $var).span\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data via Pipeline Input in Nushell's SQLite Database\nDESCRIPTION: Example of piping a record of column-name and column-value pairs to the stor insert command to add data to a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_insert.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> {bool1: true, int1: 5, float1: 1.1, str1: fdncred, datetime1: 2023-04-17} | stor insert --table-name nudb\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Management in Nushell\nDESCRIPTION: Demonstration of hiding environment variables in Nushell using the new hide-env command with dynamic argument construction.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-08-16-nushell-0_67.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> load-env {\n    ENV_FOO: 'foo'\n    ENV_BAR: 'bar'\n}\n\n> let prefix = 'ENV_'\n\n> hide-env ($prefix + 'FOO') ($prefix + 'BAR')\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'skip until' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'skip until' command, including its flags and predicate parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_until.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> skip until {flags} (predicate)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'whoami' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'whoami' command, which takes no arguments and only optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/whoami.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> whoami {flags}\n```\n\n----------------------------------------\n\nTITLE: Working with missing values in Nushell tables\nDESCRIPTION: Shows how missing values (different from null) are displayed in Nushell tables with a special character.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/nothing.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet missing_value = [{a:1 b:2} {b:1}]\n$missing_value\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Backtick-quoted Strings in Nushell\nDESCRIPTION: Shows how to use backtick-quoted strings in Nushell, which can include spaces and are interpreted as commands or paths in the first position.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n# Run the external ls binary found on the path\n`ls`\n\n# Move up one directory\n`..`\n\n# Change to the \"my dir\" subdirectory, if it exists\n`./my dir`\n```\n\n----------------------------------------\n\nTITLE: Generate Random Kilobyte\nDESCRIPTION: Example showing how to generate 1 kilobyte of random binary data using the random binary command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_binary.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> random binary 1kb\n```\n\n----------------------------------------\n\nTITLE: Nushell Scope Externs Command Signature\nDESCRIPTION: The basic signature for running the scope externs command in Nushell. This command accepts optional flags and returns information about externals in the current scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_externs.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> scope externs {flags} \n```\n\n----------------------------------------\n\nTITLE: Filtering and Computing Deprecated Commands in Vue.js\nDESCRIPTION: This Vue.js component computes a list of deprecated commands by filtering the 'pages' data. It selects pages that include '/commands/docs/' in their path and have 'deprecated' in their categories. The resulting list is sorted alphabetically by command title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/deprecated.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('deprecated'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Padding Strings with the fill Command\nDESCRIPTION: Shows how to add padding to strings using the fill command, which adds characters until the string reaches a specified length.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\n'1234' | fill -a right -c '0' -w 10\n# => 0000001234\n'1234' | fill -a left -c '0' -w 10 | str length\n# => 10\n```\n\n----------------------------------------\n\nTITLE: Record Structure for Menu Items in Nushell\nDESCRIPTION: This snippet shows the required structure for records used to populate custom menus in Nushell. It includes fields for value, description, span, and extra information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\n{\n  value:       # The value that will be inserted in the buffer\n  description: # Optional. Description that will be display with the selected value\n  span: {      # Optional. Span indicating what section of the string will be replaced by the value\n    start:\n    end:\n  }\n  extra: [string] # Optional. A list of strings that will be displayed with the selected value. Only works with a description menu\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Notification for Custom Values in Nushell Plugins\nDESCRIPTION: Shows how to implement drop notification for custom values in Nushell plugins. This allows the plugin to be notified when all copies of a custom value have gone out of scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nimpl CustomValue for Animal {\n    // ...\n    fn notify_plugin_on_drop(&self) -> bool {\n        true\n    }\n}\n\nimpl Plugin for AnimalPlugin {\n    // ...\n    fn custom_value_dropped(\n        &self,\n        engine: &EngineInterface,\n        custom_value: Box<dyn CustomValue>,\n    ) {\n        if let Some(animal) = custom_value.as_any().downcast_ref::<Animal>() {\n            eprintln!(\"Animal dropped: {:?}\", animal);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Keybindings for Menus in Nushell\nDESCRIPTION: This snippet demonstrates how to set custom keybindings for activating menus in Nushell. It assigns the completion menu to Ctrl+t and the history menu to Ctrl+y.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n  ...\n\n  keybindings: [\n    {\n      name: completion_menu\n      modifier: control\n      keycode: char_t\n      mode: [vi_insert vi_normal]\n      event: {\n        until: [\n          { send: menu name: completion_menu }\n          { send: menupagenext }\n        ]\n      }\n    }\n    {\n      name: history_menu\n      modifier: control\n      keycode: char_y\n      mode: [vi_insert vi_normal]\n      event: {\n        until: [\n          { send: menu name: history_menu }\n          { send: menupagenext }\n        ]\n      }\n    }\n  ]\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Nushell repository with Git\nDESCRIPTION: This command clones the Nushell repository from GitHub using Git.  This is the first step in building Nushell from source.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n\"First, clone the repo:\"\n```\n\n----------------------------------------\n\nTITLE: Keeping Environment Variables When Hiding Overlay\nDESCRIPTION: Example showing how to preserve specific environment variables when hiding an overlay using the --keep-env flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_hide.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> overlay new spam\n    cd some-dir\n    overlay hide --keep-env [ PWD ] spam\n\n```\n\n----------------------------------------\n\nTITLE: Case-insensitive string ending check in Nushell\nDESCRIPTION: Example of using the '--ignore-case' flag with 'str ends-with' to perform a case-insensitive check for a string ending.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_ends-with.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n'my_library.rb' | str ends-with --ignore-case '.RB'\n```\n\n----------------------------------------\n\nTITLE: Using 'source' with Conditional File Selection in Nushell\nDESCRIPTION: Demonstrates using the 'source' command with a const variable that conditionally selects a file based on interactive mode.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> const file = if $nu.is-interactive { \"interactive.nu\" } else { null }; source $file\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Quantile Command Signature\nDESCRIPTION: Shows the basic command signature for the polars quantile operation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_quantile.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars quantile {flags} (quantile)\n```\n\n----------------------------------------\n\nTITLE: Updating Table Rows in Nushell\nDESCRIPTION: This example illustrates how to update each row of a table with a new value using the 'upsert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[name lang]; [Nushell ''] [Reedline '']] | upsert lang 'Rust'\n```\n\n----------------------------------------\n\nTITLE: Taking Values from Series Example\nDESCRIPTION: Example showing how to select specific elements from a series using indices. Creates a series from a list of numbers and selects elements at indices 0 and 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_take.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet series = ([4 1 5 2 4 3] | polars into-df);\n    let indices = ([0 2] | polars into-df);\n    $series | polars take $indices\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Values in Dataframe Columns\nDESCRIPTION: Shows how to find minimum values across columns in a dataframe using polars min command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_min.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [6 2] [1 4] [4 1]] | polars into-df | polars min\n```\n\n----------------------------------------\n\nTITLE: Returning a Datetime Value Directly in Nushell\nDESCRIPTION: This snippet demonstrates that using a datetime object as input returns the same value without conversion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> 2021-02-27T13:55:40 | into datetime\nSat, 27 Feb 2021 13:55:40 +0000 (4 years ago)\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Binary in Nushell\nDESCRIPTION: This snippet illustrates converting a floating-point number into a binary primitive using the 'into binary' command, complete with length and hex representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_binary.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 1.234 | into binary\nLength: 8 (0x8) bytes | printable whitespace ascii_other non_ascii\n00000000:   58 39 b4 c8  76 be f3 3f                             X9××v××?\n\n```\n\n----------------------------------------\n\nTITLE: Measuring Objects in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `size` command in Nushell and PowerShell. In PowerShell, `Measure-Object` and `measure` are used to measure object sizes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Measure-Object, measure\"\n```\n\n----------------------------------------\n\nTITLE: Regex matching in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `match` command in Nushell and PowerShell. In PowerShell, `[regex]` used to perform regular expression matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"[regex]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'which' Command in Nushell\nDESCRIPTION: This snippet shows the command signature for the 'which' command in Nushell. It specifies the syntax for using the command with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/which.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> which {flags} (application) ...rest\n```\n\n----------------------------------------\n\nTITLE: List Available Characters\nDESCRIPTION: Command to display all supported character names using the --list flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/char.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> char --list\n```\n\n----------------------------------------\n\nTITLE: Finding a relative path from two relative paths in Nushell\nDESCRIPTION: This example demonstrates how to express a relative path as relative to another relative path. The command takes 'eggs/bacon/sausage/spam' and returns it as relative to 'eggs/bacon/sausage'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_relative-to.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'eggs/bacon/sausage/spam' | path relative-to 'eggs/bacon/sausage'\nspam\n```\n\n----------------------------------------\n\nTITLE: Calculating Arctangent of 1 in Nushell\nDESCRIPTION: Example of using the 'math arctan' command to calculate the arctangent of 1 in Nushell. The result is returned in radians.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arctan.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | math arctan\n0.7853981633974483\n```\n\n----------------------------------------\n\nTITLE: Setting LS_COLORS with vivid Theme Generator\nDESCRIPTION: Examples showing how to set LS_COLORS environment variable using the vivid theme generator tool\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n$env.LS_COLORS = (vivid generate molokai)\n```\n\nLANGUAGE: nu\nCODE:\n```\n$env.LS_COLORS = (vivid generate ayu)\n```\n\n----------------------------------------\n\nTITLE: Checking List for Non-Emptiness in Nu\nDESCRIPTION: This snippet shows how to verify if a list is non-empty using the 'is-not-empty' command in Nu. It takes a list as input and returns a boolean indicating if the list is non-empty.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-not-empty.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [] | is-not-empty\nfalse\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation Command\nDESCRIPTION: Command for installing Nushell optional plugins using Cargo\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Exporting Module Definition Example\nDESCRIPTION: Example showing how to export and use a custom command definition from a module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module utils { export def my-command [] { \"hello\" } }; use utils my-command; my-command\n```\n\n----------------------------------------\n\nTITLE: Get user input in Nushell\nDESCRIPTION: This example demonstrates how to use the `input` command to prompt the user for input and assign the result to a variable named `user_input`. No flags are used in this basic example.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> let user_input = (input)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'scope aliases' Command in Nushell\nDESCRIPTION: This snippet shows the command signature for the 'scope aliases' command in Nushell. It indicates that the command can be called with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_aliases.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> scope aliases {flags} \n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `str trim` to Rust's `trim`, `trim*{start,end}`, `strip*{suffix,prefix}`\nDESCRIPTION: Explains how to trim whitespace from a string in Rust using `trim` (trims from both ends), `trimStart` ,`trimEnd`  or `stripSuffix`, `stripPrefix` (trims specific characters), corresponding to the `str trim` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_39\n\nLANGUAGE: Rust\nCODE:\n```\n\"trim\", \"trim*{start,end}\", \"strip*{suffix,prefix}\"\n```\n\n----------------------------------------\n\nTITLE: Returning a Single Value from a List in Nushell\nDESCRIPTION: This code snippet demonstrates how to return a single value from a list using the `input list` command. It takes a list of integers as input and prompts the user to select one value from it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input_list.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 4 5] | input list 'Rate it'\n```\n\n----------------------------------------\n\nTITLE: Converting URL-encoded String to Record in Nushell\nDESCRIPTION: Demonstrates how to convert a URL-encoded string into a structured record object using the 'from url' command in Nushell. The example shows parameter values being decoded into a tabular format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_url.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'bread=baguette&cheese=comt%C3%A9&meat=ham&fat=butter' | from url\n╭────────┬──────────╮\n│ bread  │ baguette │\n│ cheese │ comté    │\n│ meat   │ ham      │\n│ fat    │ butter   │\n╰────────┴──────────╯\n```\n\n----------------------------------------\n\nTITLE: Parsing Line-delimited JSON in Nushell\nDESCRIPTION: This snippet demonstrates using the `--objects` flag with `from json` in Nushell to parse a stream of line-delimited JSON values. It takes multiple JSON objects separated by newlines and outputs a combined table, treating each line independently.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_json.md#2025-04-19_snippet_3\n\nLANGUAGE: Nushell\nCODE:\n```\n> '{ \"a\": 1 }\n{ \"b\": 2 }' | from json --objects\n╭───┬────┬────╮\n│ # │ a  │ b  │\n├───┼────┼────┤\n│ 0 │  1 │ ❎ │\n│ 1 │ ❎ │  2 │\n╰───┴────┴────╯\n```\n\n----------------------------------------\n\nTITLE: Creating Prefixed Overlay\nDESCRIPTION: Example showing how to create an overlay with a prefix for the imported commands\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_use.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 'export def foo { \"foo\" }'\n    overlay use --prefix spam\n    spam foo\n```\n\n----------------------------------------\n\nTITLE: Unfreezing Specific Frozen Job by PID in Nushell\nDESCRIPTION: This example shows how to unfreeze a specific frozen job by providing its Process ID (PID) as an argument to the 'job unfreeze' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job_unfreeze.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> job unfreeze 4\n```\n\n----------------------------------------\n\nTITLE: Job Suspension in Nushell on Unix Systems\nDESCRIPTION: Explains how to suspend external commands using Ctrl+Z on Unix-like systems (Linux and macOS). This creates a \"frozen\" background job that can be managed later.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/background_jobs.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlong_running_process # this starts running, then Ctrl+Z is pressed\n# => Job 1 is frozen\n\njob list\n# => ┏━━━┳━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┓\n# => ┃ # ┃ id ┃  type  ┃      pids      ┃\n# => ┣━━━╋━━━━╋━━━━━━━━╋━━━━━━━━━━━━━━━━┫\n# => ┃ 0 ┃  1 ┃ frozen ┃ [list 1 items] ┃\n# => ┗━━━┻━━━━┻━━━━━━━━┻━━━━━━━━━━━━━━━━┛\n```\n\n----------------------------------------\n\nTITLE: Find Using Case-Insensitive Regex\nDESCRIPTION: Example showing case-insensitive regex pattern matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> [aBc bde Arc abf] | find --regex \"ab\" -i\n╭───┬─────╮\n│ 0 │ aBc │\n│ 1 │ abf │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Converting List of Strings to Lowercase with Polars\nDESCRIPTION: Shows how to convert a list of strings to lowercase using the Polars plugin in Nushell. This example converts the list to a dataframe first, then applies the lowercase operation to all values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_lowercase.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[Abc aBc abC] | polars into-df | polars lowercase\n```\n\n----------------------------------------\n\nTITLE: Computing Mode of Number List in Nushell\nDESCRIPTION: Demonstrates how to compute the mode(s) of a list of numbers using the 'math mode' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_mode.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [3 3 9 12 12 15] | math mode\n╭───┬────╮\n│ 0 │  3 │\n│ 1 │ 12 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Binary Value to Signed Integer in Nushell\nDESCRIPTION: Shows how to convert a binary value to a signed integer representation, which interprets the value differently.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n0x[a0] | into int --signed\n```\n\n----------------------------------------\n\nTITLE: Editing Nushell Configuration\nDESCRIPTION: Command to open and edit the Nushell configuration file using the editor defined in the buffer_editor setting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nconfig nu\n```\n\n----------------------------------------\n\nTITLE: Skipping Every Second Row in Nushell\nDESCRIPTION: Example demonstrating how to skip every second row from a list using the 'every' command with the --skip flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/every.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 4 5] | every 2 --skip\n╭───┬───╮\n│ 0 │ 2 │\n│ 1 │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Creating a mask for unique rows in a dataframe with Polars in Nushell\nDESCRIPTION: This example shows how to identify unique rows in a dataframe. The command marks duplicated rows as false, while unique rows are marked as true in the resulting mask.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-unique.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[a, b]; [1 2] [1 2] [3 3] [3 3] [1 1]] | polars into-df | polars is-unique\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise XOR on Smaller Input Data in Nushell\nDESCRIPTION: This example shows how to use the 'bits xor' command to perform a bitwise XOR operation when the input binary data is smaller than the operand, using little-endian byte encoding in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_xor.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n0x[ff] | bits xor 0x[12 34 56] --endian little\n```\n\n----------------------------------------\n\nTITLE: Unicode Accented Character Statistics\nDESCRIPTION: Example showing correct handling of accented characters, demonstrating differences between bytes, chars, and graphemes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_stats.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> \"Amélie Amelie\" | str stats\n╭───────────────┬────╮\n│ lines         │ 1  │\n│ words         │ 2  │\n│ bytes         │ 15 │\n│ chars         │ 14 │\n│ graphemes     │ 13 │\n│ unicode-width │ 13 │\n╰───────────────┴────╯\n```\n\n----------------------------------------\n\nTITLE: Removing ANSI Formatting from Table Output in Nushell\nDESCRIPTION: This snippet demonstrates how to remove ANSI formatting (colors) from a table output in Nushell by using the 'table' command followed by 'ansi strip'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_24\n\nLANGUAGE: nu\nCODE:\n```\nls | table | ansi strip\n```\n\n----------------------------------------\n\nTITLE: Encoding String with Base32hex in Nushell\nDESCRIPTION: This example shows how to encode a string using the base32hex encoding in Nushell. It takes a plain text string as input and outputs the encoded string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base32hex.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"hello there\" | encode base32hex\n```\n\n----------------------------------------\n\nTITLE: Example: Getting Lengths of Multiple Strings in Nushell\nDESCRIPTION: Demonstrates how the 'str length' command handles a list of strings, returning a table with the length of each string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_length.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> ['hi' 'there'] | str length\n╭───┬───╮\n│ 0 │ 2 │\n│ 1 │ 5 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Basic If Conditional in Nushell\nDESCRIPTION: Shows the basic usage of the 'if' command to evaluate a condition and execute code when true. If the condition is false, null is returned.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nif $x > 0 { 'positive' }\n```\n\n----------------------------------------\n\nTITLE: Alias Definition in Nushell\nDESCRIPTION: Demonstrates the new alias syntax that works as text expansion, allowing additional arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nalias ll = ls -l\nll -a\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Nushell\nDESCRIPTION: Commands to copy current environment and path settings into Nushell configuration. Shows both pre-0.7.2 and post-0.7.2 syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconfig --set [path $nu:path]\nconfig --set [env $nu:env]\n```\n\nLANGUAGE: shell\nCODE:\n```\nconfig set [path $nu.path]\nconfig set [env $nu.env]\n```\n\n----------------------------------------\n\nTITLE: Command Signature Definition in Nushell\nDESCRIPTION: Defines the basic command signature for the tutor command with optional flags and search parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tutor.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> tutor {flags} (search)\n```\n\n----------------------------------------\n\nTITLE: Converting String to String in Nushell\nDESCRIPTION: Shows passing a string through the 'into string' command, which maintains the string representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> '1234' | into string\n1234\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON Data from URL in Nushell\nDESCRIPTION: Demonstrates how to fetch JSON data from a REST API endpoint and display the first 5 records using Nushell's http get command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://jsonplaceholder.typicode.com/posts | first 5\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping Nested Items with Nushell\nDESCRIPTION: Shows how to use a custom 'filter-map' command in Nushell to achieve the same result as jq's walk function - doubling each number in a nested structure while preserving the structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n'{\"data\": {\"values\": [1, 2, 3], \"nested\": {\"values\": [4, 5, 6]}}}'\n| from json\n| filter-map {|value| if ($value | describe) == \"int\" { $value * 2 } else { $value }}\n# => ╭──────┬──────────────────────────────────────╮\n# => │      │ ╭────────┬─────────────────────────╮ │\n# => │ data │ │        │ ╭───┬───╮               │ │\n# => │      │ │ values │ │ 0 │ 2 │               │ │\n# => │      │ │        │ │ 1 │ 4 │               │ │\n# => │      │ │        │ │ 2 │ 6 │               │ │\n# => │      │ │        │ ╰───┴───╯               │ │\n# => │      │ │        │ ╭────────┬────────────╮ │ │\n# => │      │ │ nested │ │        │ ╭───┬────╮ │ │ │\n# => │      │ │        │ │ values │ │ 0 │  8 │ │ │ │\n# => │      │ │        │ │        │ │ 1 │ 10 │ │ │ │\n# => │      │ │        │ │        │ │ 2 │ 12 │ │ │ │\n# => │      │ │        │ │        │ ╰───┴────╯ │ │ │\n# => │      │ │        │ ╰────────┴────────────╯ │ │\n# => │      │ ╰────────┴─────────────────────────╯ │\n# => ╰──────┴──────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Registering Nushell Plugin with Capnp Protocol\nDESCRIPTION: Demonstrates the new plugin registration mechanism using the capnp protocol, which replaces the previous automatic plugin scanning approach.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-01-nushell_0_59.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nregister -e capnp ~/.cargo/bin/nu_plugin_extra_query\n```\n\n----------------------------------------\n\nTITLE: Getting nested system user information in Nushell\nDESCRIPTION: This snippet uses the `get` command with a path to retrieve the name of a user on the system from the output of the `sys` command. It demonstrates accessing nested data within the structured tables that Nushell provides, in this case fetching the name of the user.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n\tsys | get host.username\n\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator with Lists in Nushell\nDESCRIPTION: Demonstrates using the spread operator to combine lists and values into a new list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nlet x = [1 2]\n[\n  ...$x\n  3\n  ...(4..7 | take 2)\n]\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `reverse` to Python's `reversed`, `list.reverse`\nDESCRIPTION: Illustrates how to reverse a list in Python using either the `reversed` function (for iterators) or the `list.reverse` method (for in-place reversal), corresponding to the `reverse` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n\"reversed\", \"list.reverse\"\n```\n\n----------------------------------------\n\nTITLE: Type-Checked Parameter Closure\nDESCRIPTION: Example of running a closure with a type-checked integer parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> do {|x:int| 100 + $x } 77\n```\n\n----------------------------------------\n\nTITLE: Implementing Closure Evaluation in a Nushell Plugin with Rust\nDESCRIPTION: This code snippet shows how to implement a Nushell plugin that can evaluate closures. It demonstrates the use of EngineInterface to evaluate closures on each element of a list, similar to Nushell's built-in 'each' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nuse nu_plugin::*;\nuse nu_protocol::{PipelineData, Signature, SyntaxShape, Type, Value};\n\nstruct MyEachPlugin;\n\nimpl Plugin for MyEachPlugin {\n    fn version(&self) -> String {\n        env!(\"CARGO_PKG_VERSION\").into()\n    }\n\n    fn commands(&self) -> Vec<Box<dyn PluginCommand<Plugin = Self>>> {\n        vec![\n            Box::new(MyEach),\n        ]\n    }\n}\n\nstruct MyEach;\n\nimpl PluginCommand for MyEach {\n    type Plugin = MyEachPlugin;\n\n    fn name(&self) -> &str {\n        \"my-each\"\n    }\n\n    fn description(&self) -> &str {\n        \"Run closure on each element of a list\"\n    }\n\n    fn signature(&self) -> Signature {\n        Signature::build(PluginCommand::name(self))\n            .required(\n                \"closure\",\n                SyntaxShape::Closure(Some(vec![SyntaxShape::Any])),\n                \"The closure to evaluate\",\n            )\n            .input_output_type(Type::ListStream, Type::ListStream)\n    }\n\n    fn run(\n        &self,\n        _plugin: &MyEachPlugin,\n        engine: &EngineInterface,\n        call: &EvaluatedCall,\n        input: PipelineData,\n    ) -> Result<PipelineData, LabeledError> {\n        let engine = engine.clone();\n        let closure = call.req(0)?;\n        Ok(input.map(move |item| {\n            let span = item.span();\n            engine.eval_closure(&closure, vec![item.clone()], Some(item))\n                .unwrap_or_else(|err| Value::error(err, span))\n        }, None)?)\n    }\n}\n\nfn main() {\n    serve_plugin(&MyEachPlugin, MsgPackSerializer)\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Custom Command Source in Nushell\nDESCRIPTION: Example demonstrating how to view the source of a custom command definition\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_source.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndef hi [] { echo 'Hi!' }; view source hi\n```\n\n----------------------------------------\n\nTITLE: Polars Implode Command Signature\nDESCRIPTION: The command signature for the polars implode command, showing it takes flags but requires no mandatory arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_implode.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> polars implode {flags} \n```\n\n----------------------------------------\n\nTITLE: Plugin Command Signature\nDESCRIPTION: Base signature for the plugin command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> plugin {flags} \n```\n\n----------------------------------------\n\nTITLE: Exporting In-Memory SQLite Database in Nushell\nDESCRIPTION: Example of how to export an in-memory SQLite database to a file named 'nudb.sqlite' using the `stor export` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_export.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> stor export --file-name nudb.sqlite\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Chart Commands Table with Vue.js and HTML\nDESCRIPTION: This snippet creates an HTML table that displays the filtered and sorted chart commands. It uses Vue.js directives to iterate over the commands and generate table rows with command names (as links) and their usage descriptions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/chart.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Plugin rm Command Signature in Nushell\nDESCRIPTION: The signature format for the 'plugin rm' command which removes a plugin from the plugin registry file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_rm.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> plugin rm {flags} (name)\n```\n\n----------------------------------------\n\nTITLE: Reading and Interleaving Two Streams in Nushell\nDESCRIPTION: This snippet demonstrates the usage of the 'interleave' command to combine two streams of numbers into a table format. The input sequences generated using 'seq' are wrapped and interleaved, resulting in an arbitrary order of rows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/interleave.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> seq 1 50 | wrap a | interleave { seq 1 50 | wrap b }\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a Column into a Table in Nushell\nDESCRIPTION: This snippet shows how to insert a new column called 'next_edition' with the value 2021 into a table that was loaded from a TOML file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | insert next_edition 2021\n```\n\n----------------------------------------\n\nTITLE: Debug Command Signature\nDESCRIPTION: Basic signature of the debug command showing syntax and flags\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> debug {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'bytes length' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'bytes length' command which outputs the length of any bytes in the pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_length.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes length {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Exporting a function in Nushell\nDESCRIPTION: This code snippet defines a simple module in Nushell by creating a file named `inc.nu` with an exported function `increment`. The `increment` function takes an integer as input and returns the incremented value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nexport def increment []: int -> int  {\n    $in + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Binary Replacement in Nushell\nDESCRIPTION: Example of finding and replacing a binary pattern (0x[10 AA]) with another pattern (0x[FF]) in a binary sequence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_replace.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[10 AA FF AA FF] | bytes replace 0x[10 AA] 0x[FF]\n```\n\n----------------------------------------\n\nTITLE: Selecting First Four Rows\nDESCRIPTION: Shows how to select the first four rows using index numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/select.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | select 0 1 2 3\n```\n\n----------------------------------------\n\nTITLE: Stream Description with Details - Nushell\nDESCRIPTION: Example showing how to describe a stream with detailed information using the -d flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/describe.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | each {|i| echo $i} | describe -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Dataframe Schema in Nushell\nDESCRIPTION: This example demonstrates how to create a simple dataframe and display its schema using the 'polars schema' command in Nushell. It shows the column names and their corresponding data types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_schema.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 \"foo\"] [3 \"bar\"]] | polars into-df | polars schema\n```\n\n----------------------------------------\n\nTITLE: Creating Named Column Expression Example\nDESCRIPTION: Example demonstrating how to create a named column expression for column 'a' and convert it to a Nushell object.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_col.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> polars col a | polars into-nu\n╭───────┬────────╮\n│ expr  │ column │\n│ value │ a      │\n╰───────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: NuShell Columns Command Signature\nDESCRIPTION: The basic syntax for the columns command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/columns.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> columns {flags} \n```\n\n----------------------------------------\n\nTITLE: Displaying Full Year Calendar in Nushell\nDESCRIPTION: Example demonstrating how to display a calendar for an entire year by using the --full-year flag with a specific year argument.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cal.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> cal --full-year 2012\n\n```\n\n----------------------------------------\n\nTITLE: URL Configuration in JSON\nDESCRIPTION: JSON configuration file containing an array of URLs to be processed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"urls\": [\n    \"https://jsonplaceholder.typicode.com/posts/1\",\n    \"https://jsonplaceholder.typicode.com/posts/2\",\n    \"https://jsonplaceholder.typicode.com/posts/3\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Objects in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `select` command in Nushell and PowerShell. In PowerShell, `Select-Object` and `select` are used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Select-Object, select\"\n```\n\n----------------------------------------\n\nTITLE: Converting vCard Text to Table in Nushell\nDESCRIPTION: Example showing how to convert a vCard formatted string into a structured table using the `from vcf` command. The output displays the properties of the vCard including name, full name, and email with their respective values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_vcf.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'BEGIN:VCARD\nN:Foo\nFN:Bar\nEMAIL:foo@bar.com\nEND:VCARD' | from vcf\n╭───┬──────────────────────────────────────╮\n│ # │              properties              │\n├───┼──────────────────────────────────────┤\n│ 0 │ ╭───┬───────┬─────────────┬────────╮ │\n│   │ │ # │ name  │    value    │ params │ │\n│   │ ├───┼───────┼─────────────┼────────┤ │\n│   │ │ 0 │ N     │ Foo         │        │ │\n│   │ │ 1 │ FN    │ Bar         │        │ │\n│   │ │ 2 │ EMAIL │ foo@bar.com │        │ │\n│   │ ╰───┴───────┴─────────────┴────────╯ │\n╰───┴──────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Hiding a Custom Command in Nushell\nDESCRIPTION: Shows how to hide a custom command that was just defined, removing it from the current scope and preventing further invocation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hide.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndef say-hi [] { echo 'Hi!' }; hide say-hi\n```\n\n----------------------------------------\n\nTITLE: Converting Float String to Boolean - Nushell\nDESCRIPTION: This snippet converts a string representing a float ('0.0') into a boolean. The command processes the string and returns false, as it represents zero.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> '0.0' | into bool\nfalse\n```\n\n----------------------------------------\n\nTITLE: Checking substring presence in a record in Nushell\nDESCRIPTION: This example shows how to check if a field in a record contains a specific substring. The command applies the check only to the specified column in the record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_contains.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n{ ColA: test, ColB: 100 } | str contains 'e' ColA\n```\n\n----------------------------------------\n\nTITLE: Merging Records into Single Record in Nushell\nDESCRIPTION: This snippet demonstrates the new behavior of the `into record` command in Nushell, where a list of records are merged into a single record. Records at the end of the list have precedence, meaning their values will overwrite those of earlier records with the same key.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-09-17-nushell_0_98_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n\"[{ a: 1 } { b: 2 } { a: 3 }] | into record\n# { a: 3, b: 2 }\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Help Text in Nushell Engine (JSON)\nDESCRIPTION: Example of a GetHelp engine call to retrieve formatted help text for the current command. The call includes context and id for the request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 1,\n    \"id\": 2,\n    \"call\": \"GetHelp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New Pipeline Syntax in Nushell Scripts\nDESCRIPTION: Shows the new ability to align pipes on the left side of the script for improved readability.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nls\n| where size > 10kb\n| length\n```\n\n----------------------------------------\n\nTITLE: Nushell Best Practice for $in with Multiline Code\nDESCRIPTION: This snippet shows the recommended practice of assigning the value of `$in` to another variable for better readability and debugging in multi-line code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"date info\" [] {\n  let day = $in\n  print ($day | format date '%v')\n  print $'...(was a ($day | format date '%A'))'\n  print $'...(was day ($day | format date '%j') of the year'\n}\n\n'2000-01-01' | date info\n# =>  1-Jan-2000\n# => ...was a Saturday\n# => ...was day 001 of the year\n```\n\n----------------------------------------\n\nTITLE: Allowing DTD in XML Parsing\nDESCRIPTION: The `from xml` command now supports document type declarations (DTD) when using the `--allow-dtd` flag, enhancing XML handling capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Viewing Environment-Modifying Command Source in Nushell\nDESCRIPTION: Example showing how to view the source of a command that modifies the caller environment\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_source.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef --env foo [] { $env.BAR = 'BAZ' }; view source foo\n```\n\n----------------------------------------\n\nTITLE: Polars Get-Nanosecond Command Signature\nDESCRIPTION: Command signature showing the basic syntax for the polars get-nanosecond command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-nanosecond.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars get-nanosecond {flags} \n```\n\n----------------------------------------\n\nTITLE: Generating Randomness in C#\nDESCRIPTION: Demonstrates how to generate random values in C# using `Random`. This is a component for implementing the `shuffle` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n\"Random\"\n```\n\n----------------------------------------\n\nTITLE: Converting Tables to Formatted Markdown in Nushell\nDESCRIPTION: Example of converting a table to Markdown with the --pretty flag to align columns vertically.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_md.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [1 2]] | to md --pretty\n| foo | bar |\n| --- | --- |\n| 1   | 2   |\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Data with Cell-Path in Nushell\nDESCRIPTION: Demonstrates basic usage of cell-path to access data in Nushell, including relaxed form and leading $. form for variable assignment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/cellpath.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> $data | get name.5\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> let cp: cell-path = name.5\n# => Error\n> let cp: cell-path = $.name.5\n```\n\n----------------------------------------\n\nTITLE: Calculating Sample Standard Deviation in Nushell\nDESCRIPTION: This example shows how to compute the sample standard deviation of a list of numbers using the '--sample' flag with the 'math stddev' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_stddev.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4 5] | math stddev --sample\n1.5811388300841898\n```\n\n----------------------------------------\n\nTITLE: Querying HKEY_LOCAL_MACHINE Registry Hive in Nushell\nDESCRIPTION: Example of querying the HKEY_LOCAL_MACHINE hive in the Windows registry using the 'registry query' command with the --hklm flag and a specific registry path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/registry_query.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> registry query --hklm 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment'\n```\n\n----------------------------------------\n\nTITLE: List Mapping in jq\nDESCRIPTION: Shows how to transform each element in a list using jq's map function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\necho '[1, 2, 3, 4, 5]' |\njq -r 'map(. * 2)'\n```\n\n----------------------------------------\n\nTITLE: Rolling Sum Example\nDESCRIPTION: Demonstrates how to calculate a rolling sum with window size 2 on a numeric series, converting the data to a dataframe and removing null values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_rolling.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4 5] | polars into-df | polars rolling sum 2 | polars drop-nulls\n╭───┬───────────────╮\n│ # │ 0_rolling_sum │\n├───┼───────────────┤\n│ 0 │             3 │\n│ 1 │             5 │\n│ 2 │             7 │\n│ 3 │             9 │\n╰───┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Table Literal to SQLite Database\nDESCRIPTION: Example showing how to convert a table literal (inline table definition) into a SQLite database with the default table name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_sqlite.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[name]; [-----] [someone] [=====] [somename] ['(((((']] | into sqlite filename.db\n```\n\n----------------------------------------\n\nTITLE: Improving File Saving in Nushell\nDESCRIPTION: Added autodetection logic to the 'save' command to handle both binary and text file formats.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-13-twin0029.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- JCavallo added autodetection logic in `save` to handle both binary and text (#1459)\n```\n\n----------------------------------------\n\nTITLE: Complete Nushell Plugin Implementation in Rust\nDESCRIPTION: Full implementation of a Nushell plugin that provides a 'len' command to calculate string length. Includes plugin definition, command implementation, and the main function to serve the plugin with JSON serialization.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse nu_plugin::{EvaluatedCall, JsonSerializer, serve_plugin};\nuse nu_plugin::{EngineInterface, Plugin, PluginCommand, SimplePluginCommand};\nuse nu_protocol::{LabeledError, Signature, Type, Value};\n\nstruct LenPlugin;\n\nimpl Plugin for LenPlugin {\n    fn version(&self) -> String {\n        env!(\"CARGO_PKG_VERSION\").into()\n    }\n\n    fn commands(&self) -> Vec<Box<dyn PluginCommand<Plugin = Self>>> {\n        vec![\n            Box::new(Len),\n        ]\n    }\n}\n\nstruct Len;\n\nimpl SimplePluginCommand for Len {\n    type Plugin = LenPlugin;\n\n    fn name(&self) -> &str {\n        \"len\"\n    }\n\n    fn description(&self) -> &str {\n        \"calculates the length of its input\"\n    }\n\n    fn signature(&self) -> Signature {\n        Signature::build(PluginCommand::name(self))\n            .input_output_type(Type::String, Type::Int)\n    }\n\n    fn run(\n        &self,\n        _plugin: &LenPlugin,\n        _engine: &EngineInterface,\n        call: &EvaluatedCall,\n        input: &Value,\n    ) -> Result<Value, LabeledError> {\n        let span = input.span();\n        match input {\n            Value::String { val, .. } => Ok(\n                Value::int(val.len() as i64, span)\n            ),\n            _ => Err(\n                LabeledError::new(\"Expected String input from pipeline\")\n                    .with_label(\n                        format!(\"requires string input; got {}\", input.get_type()),\n                        call.head,\n                    )\n            ),\n        }\n    }\n}\n\nfn main() {\n    serve_plugin(&LenPlugin, JsonSerializer)\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Edit Distance with Record Input in Nushell\nDESCRIPTION: Shows how to calculate edit distances between a reference string and field values in a record using cell paths. The output is a formatted record with the distance for each specified field.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_distance.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> {a: 'nutshell' b: 'numetal'} | str distance 'nushell' a b\n╭───┬───╮\n│ a │ 1 │\n│ b │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Creating a Null Value Mask in Polars Dataframe (Nushell)\nDESCRIPTION: Creates a boolean mask indicating which values in a dataframe are null. This example divides values by themselves (creating null at position with value 0) and then applies the is-null command to generate a mask.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-null.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet s = ([5 6 0 8] | polars into-df);\nlet res = ($s / $s);\n$res | polars is-null\n```\n\n----------------------------------------\n\nTITLE: Shifting Right a Binary Value in Nushell\nDESCRIPTION: Illustrates the use of 'bits shr' command on a binary value in Nushell, shifting it right by 4 bits.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shr.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[4f f4] | bits shr 4\nLength: 2 (0x2) bytes | printable whitespace ascii_other non_ascii\n00000000:   04 ff                                                •×\n```\n\n----------------------------------------\n\nTITLE: Counting Null Values in a Dataframe with polars in Nushell\nDESCRIPTION: Example of creating a dataframe, performing a division operation that produces null values, and then counting those null values using the polars count-null command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_count-null.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet s = ([1 1 0 0 3 3 4] | polars into-df);\n($s / $s) | polars count-null\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins Flag to Testing Script\nDESCRIPTION: This snippet pertains to the addition of the `--plugins` flag to the `nu-std/testing.nu` script. This flag likely enhances the testing capabilities of the script by allowing the inclusion of plugins during the testing process. The change contributes to improved plugin testing within the Nushell ecosystem.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-04-18-twin0295.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\n        \"cptpiepmatz [added `--plugins` flag to `nu-std/testing.nu`](https://github.com/nushell/nushell/pull/15552)\"\n\n```\n\n----------------------------------------\n\nTITLE: Stream Metadata Example in Nushell\nDESCRIPTION: Example demonstrating how to get metadata for items in a pipeline after listing directory contents.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | metadata\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamp String to Datetime in Nushell\nDESCRIPTION: This snippet demonstrates how to convert a timestamp string to a datetime object with timezone offset.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '27.02.2021 1:55 pm +0000' | into datetime\nSat, 27 Feb 2021 13:55:00 +0000 (4 years ago)\n```\n\n----------------------------------------\n\nTITLE: Debug Table Example\nDESCRIPTION: Example showing debug output for a complex table structure\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[version patch]; ['0.1.0' false] ['0.1.1' true] ['0.2.0' false]] | debug\n╭───┬────────────────────────────────╮\n│ 0 │ {version: 0.1.0, patch: false} │\n│ 1 │ {version: 0.1.1, patch: true}  │\n│ 2 │ {version: 0.2.0, patch: false} │\n╰───┴────────────────────────────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Basic Tee Command Signature in Nushell\nDESCRIPTION: The basic signature format for the tee command, showing how it accepts flags and a closure parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tee.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> tee {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Converting Date Components to Table in nushell\nDESCRIPTION: This command sequence transforms a date into a record and then transposes it twice to convert date components into table columns for display purposes. The initial input is a date, which is converted to a record, and then the structure is changed via two transpose operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_record.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> 2020-04-12T22:10:57+02:00 | into record | transpose | transpose -r\n```\n\n----------------------------------------\n\nTITLE: File Touch Operation in Python\nDESCRIPTION: Python implementation of touch command to create or update file timestamps\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nopen(path, 'a').close()\n```\n\n----------------------------------------\n\nTITLE: Using Grapheme Clusters for Substring in Nushell\nDESCRIPTION: Example of using the grapheme clusters flag to properly handle Unicode characters when extracting a substring.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_substring.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n>  '🇯🇵ほげ ふが ぴよ' | str substring --grapheme-clusters 4..5\nふが\n```\n\n----------------------------------------\n\nTITLE: Creating an in-memory SQLite database table in Nushell\nDESCRIPTION: This example demonstrates how to create a table in the in-memory SQLite database using the 'stor create' command with specified table name, column names, and column data types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_create.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nstor create --table-name nudb --columns {bool1: bool, int1: int, float1: float, str1: str, datetime1: datetime}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Participating Command in Module\nDESCRIPTION: Illustrates defining a custom command that interacts with the environment within a module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/module.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> module foo { export def --env bar [] { $env.FOO_BAR = \"BAZ\" } }; use foo bar; bar; $env.FOO_BAR\n```\n\n----------------------------------------\n\nTITLE: Sorting LazyFrame by Single Column\nDESCRIPTION: Example showing how to sort a dataframe by a single column 'a' in ascending order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sort-by.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [6 2] [1 4] [4 1]] | polars into-df | polars sort-by a\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 4 │\n│ 1 │ 4 │ 1 │\n│ 2 │ 6 │ 2 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using the Motd Plugin in Nushell\nDESCRIPTION: This Nushell command sequence demonstrates how to set configuration for the Motd plugin and then use the plugin to display the configured message.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\n> $env.config.plugins.motd = {message: \"Nushell rocks!\"}\n> motd\nNushell rocks!\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'view ir' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'view ir' command, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_ir.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> view ir {flags} (target)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on RHEL-based Distributions\nDESCRIPTION: Installing system dependencies for building Nushell on Red Hat Enterprise Linux derivatives\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install libxcb openssl-devel libX11-devel\n```\n\n----------------------------------------\n\nTITLE: View All Registered Files in Nushell\nDESCRIPTION: Example command showing how to view all files registered in Nushell's EngineState memory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_files.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> view files\n```\n\n----------------------------------------\n\nTITLE: Applying Bitwise OR to a List of Numbers in Nushell\nDESCRIPTION: Shows how to use the 'bits or' command on a list of integers in Nushell, applying the operation to each element.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_or.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [8 3 2] | bits or 2\n╭───┬────╮\n│ 0 │ 10 │\n│ 1 │  3 │\n│ 2 │  2 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Filesize\nDESCRIPTION: Demonstrates converting a floating-point number to filesize format. The value 8.3 is converted to '8 B' (8 bytes).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_filesize.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n8.3 | into filesize\n```\n\n----------------------------------------\n\nTITLE: Split String by Custom Separator in Nu Shell\nDESCRIPTION: Shows how to split a string 'a--b--c' using '--' as the separator. Results in three rows containing 'a', 'b', and 'c'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_row.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'a--b--c' | split row '--'\n```\n\n----------------------------------------\n\nTITLE: Creating and Describing SQLite CustomValue in Nushell\nDESCRIPTION: This snippet demonstrates creating a SQLite database and describing it, which returns a SQLiteDatabase CustomValue.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/custom_value.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [c d] [e f]] | into sqlite test.db\nopen test.db | describe\n# => SQLiteDatabase\n```\n\n----------------------------------------\n\nTITLE: Converting to Dataframe with Schema Specification in Nushell\nDESCRIPTION: Example showing how to provide a custom schema when converting data to a dataframe, specifying data types for complex nested structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n[[a b c]; [1 {d: [1 2 3]} [10 11 12] ]]| polars into-df -s {a: u8, b: {d: list<u64>}, c: list<u8>}\n```\n\n----------------------------------------\n\nTITLE: Column Addition Using with-column in Nushell\nDESCRIPTION: Alternative approach to add a new column containing string lengths using Polars with-column command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/polars_v_pandas_v_nushell.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n$df | polars with-column (polars col id | polars str-lengths | polars as vendor_id_lengths) | polars first 5 | polars collect\n```\n\n----------------------------------------\n\nTITLE: Nushell Weekly Changelog in Markdown\nDESCRIPTION: Lists the key changes and contributions made to the Nushell project including new hash command, rustyline update, API exposure changes, version info improvements, and experimental project development.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-12-04-twin0067.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #67\n\n- notryanb added a [`hash` command](https://github.com/nushell/nushell/pull/2769)\n- gillespiecd updated [rustyline to 7.0](https://github.com/nushell/nushell/pull/2776)\n- max-sixty made more of [Nushell's API public](https://github.com/nushell/nushell/pull/2772)\n- fdncred enhanced the [version information available](https://github.com/nushell/nushell/pull/2773)\n- jonathandturner has continued added [features to the nunu experimental project](https://github.com/jonathandturner/nunu/)\n```\n\n----------------------------------------\n\nTITLE: Parse External ls Command Output - Nushell\nDESCRIPTION: Example showing how to parse ls command output by skipping the first row and combining datetime columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/detect_columns.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> ^ls -lh | detect columns --no-headers --skip 1 --combine-columns 5..7\n```\n\n----------------------------------------\n\nTITLE: Regex Matching in C# using Regex.IsMatch\nDESCRIPTION: Demonstrates how to perform regular expression matching in C# using `Regex.IsMatch`. The regex pattern to match is passed as an argument to the function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\"Regex.IsMatch\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Current Date in Nushell\nDESCRIPTION: This example demonstrates how to get the current date and format it using a specific date format string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_now.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndate now | format date \"%Y-%m-%d %H:%M:%S\"\n```\n\n----------------------------------------\n\nTITLE: Filtering ls Output\nDESCRIPTION: Example of using the 'ls' command combined with a 'where' clause to filter results, listing files and directories whose names do not contain 'bar'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | where name !~ bar\n```\n\n----------------------------------------\n\nTITLE: Computing Minimum of Number List in Nushell\nDESCRIPTION: Demonstrates how to use the 'math min' command to find the minimum value in a list of numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_min.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [-50 100 25] | math min\n-50\n```\n\n----------------------------------------\n\nTITLE: Force File Deletion in Nushell\nDESCRIPTION: Shows how to force file deletion while ignoring 'file not found' errors using the --force flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rm.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> rm --force file.txt\n```\n\n----------------------------------------\n\nTITLE: Returning First Item from Range in Nushell\nDESCRIPTION: This example shows how to use the 'first' command to return the first item from a range in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/first.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 1..3 | first\n1\n```\n\n----------------------------------------\n\nTITLE: Relative Path Copy\nDESCRIPTION: Example of copying a file to a directory three levels up.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> cp myfile ....\n```\n\n----------------------------------------\n\nTITLE: Strip Characters From Both Ends Example\nDESCRIPTION: Demonstrates stripping exclamation marks from both ends of strings in a dataframe column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-strip-chars.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[text]; [\"!!!hello!!!\"] [\"!!!world!!!\"] [\"!!!test!!!\"]] | polars into-df | polars select (polars col text | polars str-strip-chars \"!\") | polars collect\n```\n\n----------------------------------------\n\nTITLE: Basic Terminal Clear in Nushell\nDESCRIPTION: Example showing how to clear the terminal screen using the basic clear command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/clear.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> clear\n\n```\n\n----------------------------------------\n\nTITLE: Accessing a Table Cell in Nushell\nDESCRIPTION: This example shows how to access a specific cell's value within a table by combining the column name and the row index. The value represents the weather condition of the fourth day.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n$data.condition.3\n# => rain\n```\n\n----------------------------------------\n\nTITLE: Nushell Addition\nDESCRIPTION: Demonstrates basic addition in Nushell using the `=` prefix to enable math mode. The result of the expression is directly outputted.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/math.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n= 1 + 3\n# => 4\n```\n\n----------------------------------------\n\nTITLE: Nushell `not-in` operator\nDESCRIPTION: Checks if a value is not present within a list using the `not-in` operator. The `=` prefix enables the math mode to evaluate the expression.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/math.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n= 1 not-in [1 2 3]\n# => false\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE with Request Body\nDESCRIPTION: Perform an HTTP DELETE request with a text-based request body\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_delete.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nhttp delete --data 'body' https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Implicit Autoview in Nu\nDESCRIPTION: This example shows how `autoview` command works in Nu. Nu automatically adds the `autoview` command to the end of pipelines that don't have an explicit output command. This allows the results of commands like `ls` to be displayed to the user.  The first example and the second example are functionally identical.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/pipeline.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nls\n```\n\nLANGUAGE: nu\nCODE:\n```\nls | autoview\n```\n\n----------------------------------------\n\nTITLE: Converting a hyphenated string to snake_case in Nushell\nDESCRIPTION: Demonstrates converting a hyphenated string (kebab-case) to snake_case format. The command replaces hyphens with underscores.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_snake-case.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\"this-is-the-first-case\" | str snake-case\n```\n\n----------------------------------------\n\nTITLE: Using Stored Closure with 'all' Command in Nushell\nDESCRIPTION: Demonstrates how to use a stored closure with the 'all' command to check if all values in a list are even.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/all.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> let cond = {|el| ($el mod 2) == 0 }; [2 4 6 8] | all $cond\n```\n\n----------------------------------------\n\nTITLE: Encoding Binary Data with Base64 in Nushell\nDESCRIPTION: Shows how to encode arbitrary binary data using Base64 encoding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base64.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[BE EE FF] | encode base64\nvu7/\n```\n\n----------------------------------------\n\nTITLE: Help Command Example Results\nDESCRIPTION: Illustrates the new feature of displaying example command outputs directly in help documentation, using the `merge` command as an example.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-03-14-nushell_0_77.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> help merge\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Building and installing the latest Nushell release using Rust's package manager\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Publishing Nushell to crates.io using Nu Script\nDESCRIPTION: A Nushell script for automating the process of publishing Nushell to crates.io. This script is now available in the nu_scripts repository for reference and use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-12-twin0081.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n# Script location: https://github.com/nushell/nu_scripts/blob/main/nu_release.nu\n```\n\n----------------------------------------\n\nTITLE: Starting Language Server in Nushell - Nushell\nDESCRIPTION: This snippet starts the Language Server Protocol (LSP) using Nushell. It enables language server functionality for diagnostics and code completions. Ensure that Nushell is properly installed and configured in your IDE to utilize this feature. The expected input is a shell command, and it outputs an active language server interface.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nnu --lsp\n```\n\n----------------------------------------\n\nTITLE: Extracting Minutes from Datetime Values in Polars DataFrame\nDESCRIPTION: This example demonstrates how to use the 'polars get-minute' command to extract the minute component (39) from datetime values in a Polars DataFrame. It first creates a datetime value, converts it to a DataFrame, and then extracts the minute.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-minute.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-minute\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on Windows via winget\nDESCRIPTION: This command installs Nushell on Windows using the winget package manager. Winget must be installed on the system. It fetches and installs the latest version of Nushell available through winget.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/README.md#2025-04-19_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install nushell\n```\n\n----------------------------------------\n\nTITLE: Negative Pattern Matching in Nushell glob\nDESCRIPTION: Example showing how to search for files and folders that do not begin with specific characters (c, C, b, M, or s).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> glob \"[!cCbMs]*\"\n\n```\n\n----------------------------------------\n\nTITLE: Saving Output to File in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `save` command in Nushell and PowerShell. In PowerShell, `Write-Output` and `Out-File` are used to save output to a file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Write-Output, Out-File\"\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings in Nushell\nDESCRIPTION: Shows how to split strings into lists or tables using the split row and split column commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n\"red,green,blue\" | split row \",\"\n# => ╭───┬───────╮\n# => │ 0 │ red   │\n# => │ 1 │ green │\n# => │ 2 │ blue  │\n# => ╰───┴───────╯\n\n\"red,green,blue\" | split column \",\"\n# => ╭───┬─────────┬─────────┬─────────╮\n# => │ # │ column1 │ column2 │ column3 │\n# => ├───┼─────────┼─────────┼─────────┤\n# => │ 0 │ red     │ green   │ blue    │\n```\n\n----------------------------------------\n\nTITLE: Polars Replace Command Signature\nDESCRIPTION: Basic command signature showing how to use the polars replace command with flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_replace.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars replace {flags}\n```\n\n----------------------------------------\n\nTITLE: Creating is-not-null expression from column reference in Nushell\nDESCRIPTION: This example shows how to create an is-not-null expression from a column reference in Polars. It creates a column reference for column 'a' and then applies the is-not-null operation to it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-not-null.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\npolars col a | polars is-not-null\n```\n\n----------------------------------------\n\nTITLE: Response and Error Handling Utilities\nDESCRIPTION: Utility functions for sending responses and formatting error messages back to Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef send_response(id, response):\n    msg = {\n        \"CallResponse\": [id, response]\n    }\n    sys.stdout.writelines([json.dumps(msg)])\n    sys.stdout.flush()\n\n\ndef send_error(id, error_msg, span):\n    error = {\n        \"Error\": {\n            \"label\": \"Len Error\",\n            \"msg\": error_msg,\n            \"span\": span,\n        }\n    }\n    send_response(id, error)\n```\n\n----------------------------------------\n\nTITLE: Opening and Decoding Files\nDESCRIPTION: Opens a file as raw bytes and decodes it using UTF-8 encoding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/open.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nopen myfile.txt --raw | decode utf-8\n```\n\n----------------------------------------\n\nTITLE: If-Else Conditional in Nushell\nDESCRIPTION: Demonstrates an if-else structure that executes different code blocks based on a condition. Returns different values depending on whether the condition is true or false.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nif $x > 0 { 'positive' } else { 'non-positive' }\n```\n\n----------------------------------------\n\nTITLE: Casting Lazy DataFrame Column Type\nDESCRIPTION: Shows how to cast a column type in a lazy dataframe evaluation context\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cast.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars into-lazy | polars cast u8 a | polars schema\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration with New Hooks in Nushell\nDESCRIPTION: This snippet shows how to update the Nushell configuration by adding new hooks specifically for the PWD change. Instead of rewriting the complete config, use the `upsert` command to integrate updates seamlessly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks {\n    pre_prompt: ...\n    pre_execution: ...\n    env_change: {\n        PWD: ...\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing All Commands from a Module Without Prefix\nDESCRIPTION: Example of importing all symbols from a module file without requiring the module name prefix, showing how the helper function can't be accessed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nuse greetings.nu *\n\n# => hello \"world\"\n# => hello world!\n\n# => hi \"there\"\n# => hi there!\n\ngreetings-helper \"foo\" \"bar\"  # fails because 'greetings-helper' is not exported\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to String in Nushell\nDESCRIPTION: Demonstrates converting a duration value to a human-readable string representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n> 9day | into string\n1wk 2day\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from End of List in Nushell\nDESCRIPTION: Shows how to take a specific number of elements from the end of a list using the last command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nlet colors = [red yellow green purple black magenta]\nlet colors = ($colors | last 3)\n$colors\n```\n\n----------------------------------------\n\nTITLE: Slicing Strings in a Dataframe without Specifying Length using Polars in Nushell\nDESCRIPTION: This example demonstrates how to use the 'polars str-slice' command to create slices from strings in a dataframe without specifying a length. It slices each string from index 1 to the end.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-slice.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[abcded abc321 abc123] | polars into-df | polars str-slice 1\n```\n\n----------------------------------------\n\nTITLE: Applying Bitwise OR with Specified Endianness in Nushell\nDESCRIPTION: Demonstrates using the 'bits or' command with binary data of varying lengths and specifying big-endian byte encoding in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_or.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[c0 ff ee] | bits or 0x[ff] --endian big\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   c0 ff ff                                             ×××\n```\n\n----------------------------------------\n\nTITLE: Importing Module Environment Within Another Module (Incorrect)\nDESCRIPTION: An example of incorrectly attempting to import a module's environment within another module. This approach doesn't work as expected because the 'export-env' block is not evaluated.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\n# go.nu, in the parent directory of my-utils\nuse my-utils\n\nexport def --env home [] {\n    cd ~\n}\n\nexport def --env modules [] {\n    cd $env.NU_MODULES_DIR\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Range of Rows\nDESCRIPTION: Example showing how to drop a consecutive range of rows using range syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [first second third fourth fifth] | drop nth (1..3)\n╭───┬───────╮\n│ 0 │ first │\n│ 1 │ fifth │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command with Default Parameter Values in Nushell\nDESCRIPTION: This snippet demonstrates how to define custom commands with default parameter values. It includes examples of commands with and without type annotations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_22\n\nLANGUAGE: nushell\nCODE:\n```\ndef greet [name = \"Nushell\"] {\n  $\"Hello, ($name)!\"\n}\n\ngreet\n# => Hello, Nushell!\n\ngreet world\n# => Hello, World!\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef congratulate [age: int = 18] {\n  $\"Happy birthday! You are ($age) years old now!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Record to Record in nushell\nDESCRIPTION: This nushell command is used when you want to transform an existing record to a standardized record format. It demonstrates the idempotency of the 'into record' command when the input is already a record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_record.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> {a: 1, b: 2} | into record\n```\n\n----------------------------------------\n\nTITLE: Setting Up PROMPT_COMMAND for Oh My Posh in MacOS Nushell\nDESCRIPTION: This snippet sets the PROMPT_COMMAND environmental variable to allow oh-my-posh to define prompt behavior in Nushell, including theme selection and prompt indicators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/3rdpartyprompts.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet posh_dir = (brew --prefix oh-my-posh | str trim)\nlet posh_theme = $'($posh_dir)/share/oh-my-posh/themes/'\n# Change the theme names to: zash/space/robbyrussel/powerline/powerlevel10k_lean/\n# material/half-life/lambda Or double lines theme: amro/pure/spaceship, etc.\n# For more [Themes demo](https://ohmyposh.dev/docs/themes)\n$env.PROMPT_COMMAND = { || oh-my-posh prompt print primary --config $'($posh_theme)/zash.omp.json' }\n# Optional\n$env.PROMPT_INDICATOR = $\"(ansi y)$> (ansi reset)\"\n```\n\n----------------------------------------\n\nTITLE: Math Average Command Signature\nDESCRIPTION: The basic command signature for the math avg operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_avg.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math avg {flags} \n```\n\n----------------------------------------\n\nTITLE: Basic Sleep Example - Nushell\nDESCRIPTION: Simple example demonstrating how to pause execution for 1 second.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sleep.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> sleep 1sec\n```\n\n----------------------------------------\n\nTITLE: Converting String to Glob Pattern in Nushell\nDESCRIPTION: Example showing how to convert a simple string value to a glob pattern using the 'into glob' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_glob.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> '1234' | into glob\n1234\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias in Nushell\nDESCRIPTION: This code snippet demonstrates how to create a simple alias named 'll' that executes the command 'ls -l'. Aliases allow for shorthand command execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/aliases.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nalias ll = ls -l\n```\n\n----------------------------------------\n\nTITLE: Attempting to Remove Non-existent Pattern from End in Nushell\nDESCRIPTION: Shows the behavior when trying to remove a byte pattern that doesn't exist at the end of the binary data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_remove.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[10 AA 10 BB CC AA 10] | bytes remove --end 0x[11]\n```\n\n----------------------------------------\n\nTITLE: Finding Overridden Config Values in Nushell\nDESCRIPTION: A command to identify which configuration values have been changed from defaults. This works by comparing the current configuration with a pristine default configuration created by launching Nushell with an empty config.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-04-configuration_preview.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet defaults = nu -n -c \"$env.config = {}; $env.config | reject color_config keybindings menus | to nuon\" | from nuon | transpose key default\nlet current = $env.config | reject color_config keybindings menus | transpose key current\n$current | merge $defaults | where $it.current != $it.default\n```\n\n----------------------------------------\n\nTITLE: Installing Polars Plugin in Nushell\nDESCRIPTION: Commands to install, register, and use the new Polars plugin which replaces the dataframes functionality in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n# Install the polars plugin\n> cargo install nu_plugin_polars\n\n# Add the plugin's commands to your plugin registry file:\n> plugin add ~/.cargo/bin/nu_plugin_polars\n\n# Load it into scope:\n> plugin use polars\n```\n\n----------------------------------------\n\nTITLE: Coloring Strings with ANSI Codes\nDESCRIPTION: Shows how to add color to strings using ANSI escape codes through the ansi command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_21\n\nLANGUAGE: nushell\nCODE:\n```\n$'(ansi purple_bold)This text is a bold purple!(ansi reset)'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Module Overlay\nDESCRIPTION: Example showing how to create an overlay from a module with a simple function definition\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_use.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export def foo [] { \"foo\" } }\n    overlay use spam\n    foo\n```\n\n----------------------------------------\n\nTITLE: Converting Lazy Dataframe to Eager Dataframe Example in Nushell\nDESCRIPTION: An example demonstrating how to convert tabular data into a lazy dataframe and then collect it into an eager dataframe using the Polars plugin in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_collect.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-lazy | polars collect\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 2 │\n│ 1 │ 3 │ 4 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'window' Command in Nushell\nDESCRIPTION: Specifies the syntax for using the 'window' command in Nushell, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/window.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> window {flags} (window_size)\n```\n\n----------------------------------------\n\nTITLE: Using Default Command in Nushell\nDESCRIPTION: Example of using the new default command to fill in missing values in a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> open amigos.json | get amigos | default rusty_luck 1 giving:\n```\n\n----------------------------------------\n\nTITLE: Version Check Command Signature - Nushell\nDESCRIPTION: The command signature for the version check functionality in Nushell, showing the basic syntax with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/version_check.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> version check {flags} \n```\n\n----------------------------------------\n\nTITLE: Nushell Scope Externs Usage Example\nDESCRIPTION: Example showing how to use the scope externs command to display known externals in the current scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_externs.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> scope externs\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with Nushell Command Signature\nDESCRIPTION: Defines the command signature for generating random integers in Nushell. It specifies the command name, flags, and range parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_int.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> random int {flags} (range)\n```\n\n----------------------------------------\n\nTITLE: Inserting Value in List at Specific Index in Nushell\nDESCRIPTION: Demonstrates inserting a value at a specified index in a list. The number 3 is inserted at index 2, shifting the existing values. No dependencies are needed, and it handles lists of any numeric type.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/insert.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 4] | insert 2 3\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 2 │\n│ 2 │ 3 │\n│ 3 │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Using $it Variable Expansion in Nushell\nDESCRIPTION: Demonstrates how the $it variable is used for iteration in Nushell. When Nushell sees an $it variable, it automatically expands it to a full 'each' call for more consistent iteration behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-05-12-nushell_0_14_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> ls | echo $it.name\n```\n\n----------------------------------------\n\nTITLE: Defining a Module in Nushell\nDESCRIPTION: This code snippet demonstrates how to define a module named 'spam' in Nushell, exporting a function and an alias, as well as an environment variable. It sets up definitions that can later be used in an overlay.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nmodule spam {\n    export def foo [] {\n        \"foo\"\n    }\n\n    export alias bar = echo \"bar\"\n\n    export-env {\n        load-env { BAZ: \"baz\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Return Usage Example in Nushell\nDESCRIPTION: Demonstrates a simple example of using the return command in a custom function definition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/return.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> def foo [] { return }\n```\n\n----------------------------------------\n\nTITLE: Command Signature\nDESCRIPTION: Official command signature for the help escapes command. Takes optional flags and returns a table with escape information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_escapes.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> help escapes {flags}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on Windows using Winget\nDESCRIPTION: This command installs Nushell on Windows systems using the Winget package manager. It requires that Winget is properly configured and available on the system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/README.md#2025-04-19_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n\"winget install nushell\"\n```\n\n----------------------------------------\n\nTITLE: List Filtering in jq\nDESCRIPTION: Demonstrates filtering arrays in jq using select with a condition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\necho '[{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}]' |\njq -r '.[] | select(.age > 28)'\n```\n\n----------------------------------------\n\nTITLE: Ignoring the Extension in Path Parsing\nDESCRIPTION: This example demonstrates how to parse a path while ignoring the extension by providing an empty string to the extension flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_parse.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '/etc/conf.d' | path parse --extension ''\n╭───────────┬────────╮\n│ parent    │ /etc   │\n│ stem      │ conf.d │\n│ extension │        │\n╰───────────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of 'math ceil' Command in Nushell\nDESCRIPTION: Shows an example of applying the ceil function to a list of numbers in Nushell, returning the smallest integer greater than or equal to each number.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_ceil.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1.5 2.3 -3.1] | math ceil\n╭───┬────╮\n│ 0 │  2 │\n│ 1 │  3 │\n│ 2 │ -3 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin by Filename in Nushell\nDESCRIPTION: Example demonstrating how to load a plugin by specifying its full filename path from the plugin registry.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_use.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> plugin use ~/.cargo/bin/nu_plugin_query\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating External Alias Handling in Nushell\nDESCRIPTION: This snippet illustrates the fix for handling exported external aliases in Nushell 0.100.0. Previously, arguments corresponding to the module path were mistakenly passed to external command aliases when exported from modules. This has been corrected to behave as expected.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n> module foo { export alias bar = ^echo }\n> use foo\n> foo bar baz\n# 0.99.0:\nbar baz\n# 0.100.0:\nbaz\n```\n\n----------------------------------------\n\nTITLE: Converting File Size to Integer in Nushell\nDESCRIPTION: Demonstrates converting a file size value (with units) to its integer representation in bytes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n4KB | into int\n```\n\n----------------------------------------\n\nTITLE: Disabling Right Prompt in Nushell\nDESCRIPTION: Examples showing how to disable the right prompt in Nushell by setting PROMPT_COMMAND_RIGHT to an empty string or an empty closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n$env.PROMPT_COMMAND_RIGHT = \"\"\n# or\n$env.PROMPT_COMMAND_RIGHT = {||}\n```\n\n----------------------------------------\n\nTITLE: Rotating Integer Left by 2 Bits\nDESCRIPTION: Example of rotating the number 17 left by 2 bits, resulting in 68\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_rol.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 17 | bits rol 2\n68\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Table Format\nDESCRIPTION: This snippet takes the output of `date now` and converts it into a table format using the `date to-table` command. This demonstrates Nushell's ability to structure data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"date to-table\"\n```\n\n----------------------------------------\n\nTITLE: Defining Split Command Signature in Nushell\nDESCRIPTION: Shows the basic signature for the split command in Nushell which requires additional flags or subcommands to function. The command accepts input and produces string output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> split {flags} \n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Nushell Commands\nDESCRIPTION: This Vue.js script imports a list of pages, filters them to include only command documentation pages, and sorts them alphabetically by title. It then exports a computed property called `commands` which returns the filtered and sorted list of commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/command_reference.md#2025-04-19_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.indexOf('/commands/docs/') >= 0)\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Changing Directory with cd Command in Nushell\nDESCRIPTION: Shows standard directory navigation using cd command and shortcut for parent directory\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\ncd some_directory\n```\n\n----------------------------------------\n\nTITLE: Calc Command Usage\nDESCRIPTION: Demonstrates the new calc command that evaluates mathematical expressions provided as strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-02-18-nushell-0_10_0.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n> echo \"2+3\" | calc\n5.000000000000000\n```\n\n----------------------------------------\n\nTITLE: Using JSON Pretty Printing in Nushell\nDESCRIPTION: Demonstrates how to use the new pretty printing support for JSON output in Nushell with a specified indent size.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-09-nushell_0_15_0.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> echo $nu | to json --pretty 2\n```\n\n----------------------------------------\n\nTITLE: Converting Zero-Padded String to Integer in Nushell\nDESCRIPTION: Demonstrates converting a string with leading zeros to its integer representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n'0010132' | into int\n```\n\n----------------------------------------\n\nTITLE: Sorting Null Values in Nushell\nDESCRIPTION: Demonstrates the new default sort order where `null` values are sorted after all other types. This example shows how `null` values are placed at the end of the sorted list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [null 1 null str] | sort\n╭───┬─────╮\n│ 0 │   1 │\n│ 1 │ str │\n│ 2 │     │\n│ 3 │     │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Command Data with Vue.js\nDESCRIPTION: A Vue.js script that filters pages containing prompt commands from the documentation and sorts them alphabetically. It uses computed properties to process the page data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/prompt.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('prompt'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rolling Table Columns Right with Fixed Headers\nDESCRIPTION: Example showing how to roll only the data columns while keeping the headers fixed using the --cells-only flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_right.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b c]; [1 2 3] [4 5 6]] | roll right --cells-only\n╭───┬───┬───┬───╮\n│ # │ a │ b │ c │\n├───┼───┼───┼───┤\n│ 0 │ 3 │ 1 │ 2 │\n│ 1 │ 6 │ 4 │ 5 │\n╰───┴───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Comparing Directory Traversal in Bash vs Nushell\nDESCRIPTION: Contrasts recursive directory operations in Bash using find/xargs with Nushell's more concise glob pattern approach.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfind -iname *.txt | xargs -I {} echo {} | tr \"[:lower:]\" \"[:upper:]\"\n```\n\nLANGUAGE: nu\nCODE:\n```\n# Nostalgic for the Good Ole DOS days?\nls **/*.txt | get name | str upcase\n```\n\n----------------------------------------\n\nTITLE: CSV Column Numbering in Nushell\nDESCRIPTION: Shows the change from 1-based to 0-based indexing for default column names when converting CSV, TSV, or SSV data. The snippet requires a Nushell environment configured for handling CSV data, exporting results with adjusted column names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> \"foo,bar,baz\" | from csv -n\n╭───┬─────────┬─────────┬─────────╮\n│ # │ column0 │ column1 │ column2 │\n├───┼─────────┼─────────┼─────────┤\n│ 0 │ foo     │ bar     │ baz     │\n╰───┴─────────┴─────────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Ill-formed Table Literals in Nushell\nDESCRIPTION: Demonstrates how an attempt to define a table with duplicated columns results in an error. This is aimed at preventing error-prone data structures. Requires Nushell to observe the behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n[[a a]; [1 2]]\n```\n\n----------------------------------------\n\nTITLE: Nushell Math Round Command Signature\nDESCRIPTION: The basic signature for the math round command showing the command structure and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_round.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math round {flags} \n```\n\n----------------------------------------\n\nTITLE: Polars Value-Counts Command Signature\nDESCRIPTION: The basic command signature for the polars value-counts operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_value-counts.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars value-counts {flags}\n```\n\n----------------------------------------\n\nTITLE: Extracting Webpage Info from Phoronix.com in Nushell\nDESCRIPTION: This example demonstrates how to use the 'query webpage-info' command to extract detailed information from the phoronix.com website. It first fetches the webpage content using the 'http get' command and then pipes the result to 'query webpage-info'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_webpage-info.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nhttp get https://phoronix.com | query webpage-info\n```\n\n----------------------------------------\n\nTITLE: Formatting Multiple Dates in Nushell using Polars\nDESCRIPTION: This example shows how to create a dataframe with multiple date values and use 'polars strftime' to format all dates in the dataframe to 'YYYY/MM/DD' format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_strftime.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars strftime \"%Y/%m/%d\"\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Boolean - Nushell\nDESCRIPTION: This snippet illustrates the conversion of an integer (1) to a boolean value using the 'into bool' command, where any non-zero integer is interpreted as true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | into bool\ntrue\n```\n\n----------------------------------------\n\nTITLE: Printing Commented config.nu with Documentation in Nushell\nDESCRIPTION: Shows how to print a commented config.nu file with documentation using the 'config nu' command with the --doc flag and piping to nu-highlight.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_nu.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nconfig nu --doc | nu-highlight\n```\n\n----------------------------------------\n\nTITLE: Hiding Environment Variable in Nushell\nDESCRIPTION: Demonstrates hiding an environment variable and verifying its removal using the hide-env command. Sets an environment variable, then hides it and checks its absence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hide-env.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.HZ_ENV_ABC = 1; hide-env HZ_ENV_ABC; 'HZ_ENV_ABC' in $env\nfalse\n```\n\n----------------------------------------\n\nTITLE: Converting Table Column to Kebab-case in Nushell\nDESCRIPTION: Shows how to convert values in a specific column of a table to kebab-case format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_kebab-case.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [[lang, gems]; [nuTest, 100]] | str kebab-case lang\n╭───┬─────────┬──────╮\n│ # │  lang   │ gems │\n├───┼─────────┼──────┤\n│ 0 │ nu-test │  100 │\n╰───┴─────────┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Converting Kebab Case String to SCREAMING_SNAKE_CASE in Nushell\nDESCRIPTION: Example showing how to convert a kebab-case string 'this-is-the-first-case' to SCREAMING_SNAKE_CASE format 'THIS_IS_THE_FIRST_CASE'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_screaming-snake-case.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n\"this-is-the-first-case\" | str screaming-snake-case\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from Field Values Only in TSV\nDESCRIPTION: Demonstrates removing unnecessary whitespaces only from the field values when parsing TSV data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_tsv.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2' | save tsv-data | open tsv-data | from tsv --trim fields\n```\n\n----------------------------------------\n\nTITLE: Opening Raw Files\nDESCRIPTION: Opens a file as raw binary data without parsing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/open.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nopen myfile.json --raw\n```\n\n----------------------------------------\n\nTITLE: Finding Repeated Values with uniq -d in Nushell\nDESCRIPTION: Shows how to use the '-d' flag with 'uniq' to find values that appear more than once in the input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 2] | uniq -d\n╭───┬───╮\n│ 0 │ 2 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Extracting Seconds from Datetime in Polars Dataframe\nDESCRIPTION: Example showing how to extract seconds from datetime values using `polars get-second`. The example creates a dataframe with datetime values and then extracts the second component (18) from each value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-second.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-second\n```\n\n----------------------------------------\n\nTITLE: Foreground Gradient Example in Nushell\nDESCRIPTION: Example showing how to apply a foreground gradient with specified start and end colors to text.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_gradient.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff' --fgend '0xe81cff'\n```\n\n----------------------------------------\n\nTITLE: Wrapped External Command Definition\nDESCRIPTION: Demonstrates creating a wrapper for an external command using --wrapped flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/def.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> def --wrapped my-echo [...rest] { ^echo ...$rest }; my-echo -e 'spam\\tspam'\nspamspam\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Compact JSON\nDESCRIPTION: Demonstrates converting an array to a compact JSON string without formatting using the -r flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_json.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | to json -r\n[1,2,3]\n```\n\n----------------------------------------\n\nTITLE: Combine Last Two Columns - Nushell\nDESCRIPTION: Example demonstrating how to combine the last two columns using negative indices.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/detect_columns.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> $'c1 c2 c3 c4 c5(char nl)a b c d e' | detect columns --combine-columns -2..-1\n```\n\n----------------------------------------\n\nTITLE: Moving a File with Update Flag in Nushell\nDESCRIPTION: Illustrates using the '-u' flag to move a file only if the source is newer than the target.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mv.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> mv -u new/test.txt old/\n```\n\n----------------------------------------\n\nTITLE: Using Newline in Multiline Commandlines\nDESCRIPTION: Illustrates the usage of a newline to create multiline commandlines in Nushell and emphasizes that the commands will be processed in a single unit, leading to state-related failures if not formatted properly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/how_nushell_code_gets_run.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> cd span\n  source-env foo.nu\n```\n\n----------------------------------------\n\nTITLE: String Concatenation with Range\nDESCRIPTION: Concatenates a string with itself multiple times using a range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nlet s = \"Str\"; 0..2 | reduce --fold '' {|it, acc| $acc + $s}\n```\n\n----------------------------------------\n\nTITLE: HTTP PATCH with JSON Content Type\nDESCRIPTION: Send an HTTP PATCH request with JSON content type and body\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_patch.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nhttp patch --content-type application/json https://www.example.com { field: value }\n```\n\n----------------------------------------\n\nTITLE: Converting String to Filesize in Table\nDESCRIPTION: Demonstrates how to convert a string column in a table to filesize format. Takes a table with device and size columns and converts the size column values to filesizes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_filesize.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[device size]; [\"/dev/sda1\" \"200\"] [\"/dev/loop0\" \"50\"]] | into filesize size\n```\n\n----------------------------------------\n\nTITLE: Ordered Values Example - Nushell\nDESCRIPTION: Demonstration of how values are ordered based on column order in the record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/values.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> { f:250 g:191 c:128 d:1024 e:2000 a:16 b:32 } | values\n╭───┬──────╮\n│ 0 │  250 │\n│ 1 │  191 │\n│ 2 │  128 │\n│ 3 │ 1024 │\n│ 4 │ 2000 │\n│ 5 │   16 │\n│ 6 │   32 │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Single-quoted Strings in Nushell\nDESCRIPTION: Shows how to use single-quoted strings in Nushell, which preserve literal text without any escaping.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n'hello world'\n# => hello world\n'The\nend'\n# => The\n# => end\n```\n\n----------------------------------------\n\nTITLE: Executing External System Command in Nushell\nDESCRIPTION: This snippet shows how to run the external system 'ls' command in Nushell. The caret (^) sigil is used to explicitly call the external command found in the user's PATH, typically '/usr/bin/ls' on Unix-like systems.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/running_externals.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n^ls\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Parameters with Commas in Nushell\nDESCRIPTION: Shows how to define a command with multiple parameters separated by commas, an alternative syntax for parameter lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_18\n\nLANGUAGE: nu\nCODE:\n```\n# Commas\ndef greet [name1, name2] {\n  $\"Hello, ($name1) and ($name2)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Lists Example\nDESCRIPTION: Demonstrates how to divide a list into chunks of size 2, creating pairs from the input list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/chunks.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 4] | chunks 2\n╭───┬───────────╮\n│ 0 │ ╭───┬───╮ │\n│   │ │ 0 │ 1 │ │\n│   │ │ 1 │ 2 │ │\n│   │ ╰───┴───╯ │\n│ 1 │ ╭───┬───╮ │\n│   │ │ 0 │ 3 │ │\n│   │ │ 1 │ 4 │ │\n│   │ ╰───┴───╯ │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of 'scope aliases' Command in Nushell\nDESCRIPTION: This example demonstrates how to use the 'scope aliases' command in Nushell to show the aliases in the current scope. The command is executed without any arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_aliases.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> scope aliases\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terminal Background Color in Nushell\nDESCRIPTION: Shows how to use the 'term query' command to get the terminal background color using ANSI escape sequences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_query.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> term query $'(ansi osc)10;?(ansi st)' --prefix $'(ansi osc)10;' --terminator (ansi st)\n```\n\n----------------------------------------\n\nTITLE: Running a script file in Nu\nDESCRIPTION: Runs a script file using `nu <script file>`. This executes the commands contained within the specified script file. Requires Nu version 0.9.1 or later.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_30\n\nLANGUAGE: nu\nCODE:\n```\n\"nu <script file>\"\n```\n\n----------------------------------------\n\nTITLE: Expanding Multiple Paths Example\nDESCRIPTION: Demonstrates expanding a list of paths using the path expand command, showing how it handles multiple paths simultaneously.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_expand.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [ /foo/../bar, /foo/../baz ] | path expand\n╭───┬──────╮\n│ 0 │ /bar │\n│ 1 │ /baz │\n╰───┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Execute Nushell Command String\nDESCRIPTION: Command to execute a single command string in Nushell without full shell initialization\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_21\n\nLANGUAGE: nushell\nCODE:\n```\nnu --commands <command-string>\n```\n\n----------------------------------------\n\nTITLE: Changing Output Display in Nushell with Hooks\nDESCRIPTION: This example alters the display behavior for outputs using the `display_output` hook by configuring conditional table displays based on terminal width, showcasing dynamic output adjustments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks {\n    display_output: {if (term size).columns >= 100 { table -ed 1 } else { table }}\n})\n```\n\n----------------------------------------\n\nTITLE: Returning the Index of a Selected Item in Nushell\nDESCRIPTION: This example displays how to return the index of a selected item from a list using the `input list` command with the `--index` flag, enabling users to see the position of their chosen fruit.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input_list.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [Banana Kiwi Pear Peach Strawberry] | input list --index\n```\n\n----------------------------------------\n\nTITLE: Converting Record to TOML in Nushell\nDESCRIPTION: An example of converting a Nushell record to TOML format. The record contains two fields (foo and bar) that are converted to proper TOML syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_toml.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> {foo: 1 bar: 'qwe'} | to toml\nfoo = 1\nbar = \"qwe\"\n\n```\n\n----------------------------------------\n\nTITLE: polars get-second Command Signature in Nushell\nDESCRIPTION: The command signature for the `polars get-second` command that extracts the second component from datetime values in a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-second.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars get-second {flags} \n```\n\n----------------------------------------\n\nTITLE: Using with-env with Record\nDESCRIPTION: Demonstrates the recommended record form for passing environment variables to `with-env`. This prevents repeating the name of an environment variable. Setting the `PWD` variable using `with-env` is disallowed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\nwith-env { X: 'Y', W: 'Z' } { $env.X }\n```\n\nLANGUAGE: nushell\nCODE:\n```\n# silently: bar\nwith-env [X foo X bar] { $env.X }\n# error\nwith-env { X: 'foo', X: 'bar' } { $env.X }\n```\n\n----------------------------------------\n\nTITLE: Converting Binary to Bits String - Nushell\nDESCRIPTION: Example of converting a binary value to a binary string representation padded to 8 places with zeros.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_bits.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1] | format bits\n00000001\n```\n\n----------------------------------------\n\nTITLE: Encoding String to Hex\nDESCRIPTION: Shows how to convert a string value to its hexadecimal representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_hex.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"hello\" | encode hex\n68656C6C6F\n```\n\n----------------------------------------\n\nTITLE: Getting the path self command signature in Nushell\nDESCRIPTION: Shows the signature for the 'path self' command, which can retrieve the absolute path of the script or module at parse time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_self.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> path self {flags} (path)\n```\n\n----------------------------------------\n\nTITLE: Converting Pairs to Record in Nushell\nDESCRIPTION: This snippet demonstrates the new behavior of the `into record` command in Nushell, where a list of pairs of values is converted into a record. This is a breaking change from the previous behavior, where the index of each item would be used as the key.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-09-17-nushell_0_98_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n\"[[a 1] [b 2]] | into record\n# { a: 1, b: 2 }\"\n```\n\n----------------------------------------\n\nTITLE: Binary Value Left Shift\nDESCRIPTION: Demonstrates left shifting a binary value by 4 bits\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shl.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n0x[4f f4] | bits shl 4\n```\n\n----------------------------------------\n\nTITLE: Light Theme Configuration in Nushell\nDESCRIPTION: Configuration example for using the light theme from Nushell's standard library\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n# in $nu.config-path\nuse config light-theme\n\n$env.config = {\n  # ...\n  color_config: (light_theme)\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dataframe Shape in Nushell\nDESCRIPTION: This example demonstrates how to use the 'polars shape' command to show the number of rows and columns in a dataframe. It first creates a simple dataframe from a list of lists, then uses 'polars into-df' to convert it to a dataframe, and finally applies 'polars shape' to display the dimensions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_shape.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars shape\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Release Package Build - Rust\nDESCRIPTION: This snippet describes the addition of a new `toolkit release-pkg windows` command. This enhancement facilitates the creation of Windows-specific release packages. This allows for streamlined Windows distribution and potentially includes platform-specific optimizations or configurations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\ndevyn [added `toolkit release-pkg windows` for Windows release pkg builds](https://github.com/nushell/nushell/pull/12727)\n```\n\n----------------------------------------\n\nTITLE: Signature of str upcase Command in Nushell\nDESCRIPTION: The command signature showing how to use the 'str upcase' command with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_upcase.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str upcase {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Create Range in Nushell and PowerShell\nDESCRIPTION: The `range` command creates a sequence of numbers or characters. In PowerShell, ranges are created using `1..10` or `'a'..'f'`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Get First Column Example\nDESCRIPTION: Example showing how to get the first column name from a table using the first command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/columns.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name,age,grade]; [bill,20,a]] | columns | first\n```\n\n----------------------------------------\n\nTITLE: Listing All Files Including Hidden Ones with ls --all\nDESCRIPTION: Shows how to use the new --all flag with the ls command to display hidden files in directory listings, similar to ls -a in traditional Unix shells.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-31-nushell_0_12_0.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n❯ ls\n────┬─────────────────────────────────────────────────────┬──────┬──────────┬──────────────\n #  │                        name                         │ type │   size   │   modified\n────┼─────────────────────────────────────────────────────┼──────┼──────────┼──────────────\n  0 │ CODE_OF_CONDUCT.md                                  │ File │   3.4 KB │ 5 months ago\n  1 │ Cargo.lock                                          │ File │ 104.5 KB │ 23 mins ago\n  2 │ Cargo.toml                                          │ File │   5.5 KB │ 23 mins ago\n...\n\n❯ ls --all\n────┬─────────────────────────────────────────────────────┬──────┬──────────┬──────────────\n #  │                        name                         │ type │   size   │   modified\n────┼─────────────────────────────────────────────────────┼──────┼──────────┬──────────────\n  0 │ .azure                                              │ Dir  │          │ 2 weeks ago\n  1 │ .cargo                                              │ Dir  │          │ 2 weeks ago\n  2 │ .circleci                                           │ Dir  │          │ 2 weeks ago\n...\n```\n\n----------------------------------------\n\nTITLE: Nushell $in with Semicolons\nDESCRIPTION: Shows that `$in` cannot capture the results of the previous statement when statements are separated by semicolons.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\nls / | get name; $in | describe\n# => nothing\n```\n\nLANGUAGE: nushell\nCODE:\n```\nls / | get name | $in | describe\n# => list<string>\n```\n\n----------------------------------------\n\nTITLE: Converting Record to SQLite Database\nDESCRIPTION: Example of converting a single record (key-value pairs) into a SQLite database. The record will be inserted into the default table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_sqlite.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> { foo: bar, baz: quux } | into sqlite filename.db\n```\n\n----------------------------------------\n\nTITLE: Nushell Script Subcommands\nDESCRIPTION: Example of implementing and using subcommands in a Nushell script\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n# myscript.nu\ndef \"main run\" [] {\n    print \"running\"\n}\n\ndef \"main build\" [] {\n    print \"building\"\n}\n\ndef main [] {\n    print \"hello from myscript!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The command signature showing the basic syntax for the source-env command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source-env.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> source-env {flags} (filename)\n```\n\n----------------------------------------\n\nTITLE: Table Command Signature in Nushell\nDESCRIPTION: The basic signature for the 'table' command in Nushell, showing its syntax pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> table {flags} \n```\n\n----------------------------------------\n\nTITLE: Getting Length of a Binary Value in Nushell\nDESCRIPTION: Example showing how to return the length of a binary literal using the 'bytes length' command. Returns 4 as the result since the binary contains 4 bytes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_length.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AB] | bytes length\n4\n```\n\n----------------------------------------\n\nTITLE: Dynamic Boolean Switch Handling - Nushell\nDESCRIPTION: This example demonstrates the new capability of passing boolean switches dynamically between function calls in Nushell. It shows how to maintain the command structure and signature while handling switches more efficiently.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef bar [--switch] {\n    print $\"switch in bar: ($switch)\"\n}\n\ndef foo [--switch] {\n    print $\"switch in foo: ($switch)\"\n    bar --switch=(not $switch)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tilde Expansion in Nushell\nDESCRIPTION: This snippet shows how tilde expansion is handled in Nushell based on context, specifically within glob patterns, and provides examples of when tilde is expanded.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nls ~/dir              # expands tilde\nls \"~/dir\"            # does not expand tilde\n```\n\nLANGUAGE: nushell\nCODE:\n```\nlet f = \"~/dir\"\nls $f                 # does not expand tilde\nls ($f | path expand) # tilde explicitly expanded\nls ($f | into glob)   # tilde will be expanded\n```\n\nLANGUAGE: nushell\nCODE:\n```\nlet f: glob = \"~/aaa\"\nls $f                 # tilde will be expanded\n```\n\n----------------------------------------\n\nTITLE: Expression Commands Table Template\nDESCRIPTION: HTML table template that displays command titles and descriptions. Uses Vue v-for directive to iterate through filtered commands, creating links to command documentation pages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/expression.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for Command Filtering\nDESCRIPTION: Vue.js script that filters page data to extract command documentation related to bits category and sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/bits.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('bits'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Create Temporary File in System Directory\nDESCRIPTION: Creates a temporary file with a template pattern in the system temporary directory using the -t flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mktemp.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> mktemp -t testfile.XXX\n/tmp/testfile.4kh\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Count Example\nDESCRIPTION: Example demonstrating statistics for Chinese characters, showing different byte and character counts.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_stats.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> '今天天气真好' | str stats\n╭───────────────┬────╮\n│ lines         │ 1  │\n│ words         │ 6  │\n│ bytes         │ 18 │\n│ chars         │ 6  │\n│ graphemes     │ 6  │\n│ unicode-width │ 12 │\n╰───────────────┴────╯\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Command Definition\nDESCRIPTION: Example of defining a command that modifies environment variables using --env flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/def.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> def --env foo [] { $env.BAR = \"BAZ\" }; foo; $env.BAR\nBAZ\n```\n\n----------------------------------------\n\nTITLE: Saving String to File in Nushell\nDESCRIPTION: Demonstrates how to save a string to a file named 'foo.txt' in the current directory using the 'save' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/save.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'save me' | save foo.txt\n```\n\n----------------------------------------\n\nTITLE: Capturing Metadata Span in Nushell\nDESCRIPTION: Retrieves the span information from a variable's metadata, which is used to highlight the position of the error in the code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/creating_errors.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet span = (metadata $x).span;\n```\n\n----------------------------------------\n\nTITLE: Checking String Prefix with Example in Nushell\nDESCRIPTION: This example demonstrates checking if the string 'my_library.rb' starts with 'my'. The command returns a boolean result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_starts-with.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 'my_library.rb' | str starts-with 'my'\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Polars Dataframe using Mask in Nushell\nDESCRIPTION: This example demonstrates how to use the 'polars set' command to replace null values in a shifted series with zeros. It creates a series, shifts it, creates a mask for null values, and then sets those values to 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_set.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet s = ([1 2 2 3 3] | polars into-df | polars shift 2);\nlet mask = ($s | polars is-null);\n$s | polars set 0 --mask $mask\n```\n\n----------------------------------------\n\nTITLE: Converting Table of Duration Strings to Duration Values in Nushell\nDESCRIPTION: Demonstrates how to convert a table column containing duration strings into duration values. This example converts multiple different duration formats within a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_duration.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[value]; ['1sec'] ['2min'] ['3hr'] ['4day'] ['5wk']] | into duration value\n```\n\n----------------------------------------\n\nTITLE: Searching History for Commands Containing 'cargo' in Nushell\nDESCRIPTION: This snippet illustrates how to search the command history for entries containing the word 'cargo' using the `history`, `where`, and `get` commands.  It filters the history to find commands matching the specified pattern and then extracts the command itself.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/history.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\n> history | where command =~ cargo | get command\n\n```\n\n----------------------------------------\n\nTITLE: Convert a String to Kebab-case in Nushell\nDESCRIPTION: Demonstrates converting a string with CamelCase format to kebab-case format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_kebab-case.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'NuShell' | str kebab-case\nnu-shell\n```\n\n----------------------------------------\n\nTITLE: Zipping Numeric Ranges Example\nDESCRIPTION: Shows how to zip two ranges of numbers together using the range syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/zip.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 1..3 | zip 4..6\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespaces Around Headers - Nushell\nDESCRIPTION: This example demonstrates trimming whitespaces specifically around header names using the --trim headers flag with the 'from csv' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> open data.txt | from csv --trim headers\n```\n\n----------------------------------------\n\nTITLE: Saving Lazy DataFrame to Parquet\nDESCRIPTION: Example of saving a lazy dataframe to a parquet file using streaming collect\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[a b];[1 2] [3 4]] | polars into-lazy | polars save test.parquet\n```\n\n----------------------------------------\n\nTITLE: AST Flattened JSON Minified Example\nDESCRIPTION: Combines flattened output with JSON minification.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> ast \"'hello'\" --flatten --json --minify\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Examples\nDESCRIPTION: Examples showing string interpolation behavior with escaped and non-escaped strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> let x = 100\n> $\"value is:\\n($x)\"\nvalue is:\n100\n> $'value is:\\n($x)'\nvalue is:\\n100\n```\n\n----------------------------------------\n\nTITLE: Escape Codes Usage\nDESCRIPTION: Example of using raw escape codes without the '\\x1b[' prefix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> $\"(ansi --escape '3;93;41m')Hello(ansi reset)\"  # italic bright yellow on red background\nHello\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command with List-spreading in Nushell\nDESCRIPTION: Creates a command 'ezal' that wraps the 'eza' utility with long-listing format, demonstrating how to use the --wrapped flag and list-spreading with ...rest to pass through additional parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_26\n\nLANGUAGE: nu\nCODE:\n```\ndef --wrapped ezal [...rest] {\n  eza -l ...$rest\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML in Nushell - Command Signature\nDESCRIPTION: The signature for the 'from yaml' command in Nushell, showing the basic syntax for converting YAML-formatted text into tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_yaml.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> from yaml {flags} \n```\n\n----------------------------------------\n\nTITLE: Prepending to an Existing Environment Variable\nDESCRIPTION: This snippet illustrates how to prepend a new path to the existing 'Path' environment variable in Nushell, allowing for high-priority folder access. It shows the use of the prepend command to modify the Path variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n$env.Path = ($env.Path | prepend 'C:\\path\\you\\want\\to\\add')\n```\n\n----------------------------------------\n\nTITLE: Converting Binary Value to Integer in Nushell\nDESCRIPTION: Demonstrates converting a binary value (represented in hexadecimal notation) to an integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n0x[10] | into int\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Directories with Verbose Output\nDESCRIPTION: Example demonstrating creation of multiple directories including nested paths with verbose output enabled.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mkdir.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> mkdir -v foo/bar foo2\n```\n\n----------------------------------------\n\nTITLE: Renaming a File using mv in Nushell\nDESCRIPTION: Demonstrates how to rename a file from 'before.txt' to 'after.txt' using the 'mv' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mv.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> mv before.txt after.txt\n```\n\n----------------------------------------\n\nTITLE: Basic Path Join Command Signature\nDESCRIPTION: The basic signature for the path join command showing the command syntax and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> path join {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin\nDESCRIPTION: Example of removing the installed signatures for a plugin named inc.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> plugin rm inc\n```\n\n----------------------------------------\n\nTITLE: Base64 Command Signature in Nushell\nDESCRIPTION: Shows the basic command signature for the encode base64 command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base64.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> encode base64 {flags}\n```\n\n----------------------------------------\n\nTITLE: Using Multiline Mode for Line-by-Line Regex Operations in Nushell\nDESCRIPTION: Shows how to use multiline mode to perform replacements on individual lines within a multiline string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n> \"non-matching line\\n123. one line\\n124. another line\\n\" | str replace --all --multiline '^[0-9]+\\. ' ''\nnon-matching line\none line\nanother line\n\n```\n\n----------------------------------------\n\nTITLE: Repeating String and Joining in Nushell\nDESCRIPTION: This snippet shows an example of how to use the `repeat` command in the standard library to achieve scalar string multiplication in Nushell. First the `repeat` command is brought into scope with `use std repeat`. Then, the string `\"foo\"` is repeated 3 times and the result is joined together using `str join`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n\"foo\" | repeat 3 | str join\n```\n\n----------------------------------------\n\nTITLE: Hiding imported command\nDESCRIPTION: This snippet shows how to use the `hide` command to remove an imported command definition, in this case, 'assert' from 'std/assert'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\nuse std/assert\nassert equal 1 2\n# => Assertion failed\nassert true\n# => Assertion passes\n\nhide assert\nassert equal 1 1\n# => Error:\n# => help: A command with that name exists in module `assert`. Try importing it with `use`\n\nassert true\n# => Error:\n# => help: A command with that name exists in module `assert`. Try importing it with `use`\n```\n\n----------------------------------------\n\nTITLE: Processing Complex External Command Output in Nushell\nDESCRIPTION: Processes the detailed output of 'ls -la' by converting it to lines and then splitting by spaces to create a structured table with multiple columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n^ls -la | lines | split-column \" \"\n```\n\n----------------------------------------\n\nTITLE: Defining Main and Subcommands in Nushell Modules\nDESCRIPTION: Demonstrates how to define a main command and subcommands in a Nushell module, allowing for creation of commands with the same name as the module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-31-nushell_0_75.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n# command.nu\nexport def main [] { 'This is a command' }\n\nexport def subcommand [] { 'This is a subcommand' }\n```\n\nLANGUAGE: nu\nCODE:\n```\n> use command.nu\n\n> command\nThis is a command\n\n> command subcommand\nThis is a subcommand\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Checking with JSON Conversion in Nushell\nDESCRIPTION: Example showing how Nushell's runtime type checking works when the parser cannot determine the type at parse time, such as with the result of a 'from json' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"evil string\" | from json | cool-int-print\n# => Error: nu::shell::only_supports_this_input_type\n# =>\n# =>   × Input type not supported.\n# =>    ╭─[entry #18:1:17]\n# =>  1 │ \"evil string\" | from json | cool-int-print\n# =>    ·                 ────┬────   ───────┬──────\n# =>    ·                     │              ╰── only int input data is supported\n# =>    ·                     ╰── input type: string\n# =>    ╰────\n```\n\n----------------------------------------\n\nTITLE: Listing commands in current scope in Nushell\nDESCRIPTION: This example demonstrates how to use `scope commands` to list the commands available in the current scope. The command takes no input and produces a list of commands as output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_commands.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> scope commands\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Uppercase in Polars Dataframe in Nushell\nDESCRIPTION: Demonstrates how to use the 'polars uppercase' command to convert strings in a column to uppercase. This example creates a dataframe from a list, selects a column, applies uppercase, and collects the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_uppercase.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a]; [Abc]] | polars into-df | polars select (polars col a | polars uppercase) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Basic Bitwise Left Shift\nDESCRIPTION: Demonstrates shifting a number left by 7 bits\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shl.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n2 | bits shl 7\n```\n\n----------------------------------------\n\nTITLE: Generating Previous 10 Days in MM/DD/YYYY Format\nDESCRIPTION: This example demonstrates how to use the 'seq date' command with custom output format to generate a list of the previous 10 days in the MM/DD/YYYY format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --days 10 -o '%m/%d/%Y' --reverse\n```\n\n----------------------------------------\n\nTITLE: Testing Nushell Plugin with Additional Commands in Rust\nDESCRIPTION: Illustrates how to include additional Nushell commands in plugin tests by adding declarations to the test context using the PluginTest structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn test_fib_with_sequence() -> Result<(), ShellError> {\n    use nu_command::Seq;\n    use nu_plugin_test_support::PluginTest;\n\n    let result = PluginTest::new(\"fib\", FibPlugin.into())?\n        .add_decl(Box::new(Seq))?\n        .eval(\"seq 1 10 | fib\")?;\n\n    assert_eq!(10, result.into_iter().count());\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Lists with Conditions in Nushell\nDESCRIPTION: Examples of filtering lists using where command with string and numeric conditions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\nlet colors = [red orange yellow green blue purple]\n$colors | where ($it | str ends-with 'e')\n\nlet scores = [7 10 8 6 7]\n$scores | where $it > 7\n```\n\n----------------------------------------\n\nTITLE: Running External Commands in Nushell\nDESCRIPTION: Shows how to run the external/system version of a command (ls) in Nushell by prefixing it with a caret (^) symbol.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n^ls\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Keys in Nushell\nDESCRIPTION: Illustrates sorting by multiple keys/columns using the `sort-by` command. The example sorts files first by extension and then by modified time if two files have the same extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n\n# Sort by extension, then by modified time if two files have the same extension.\n# Note that the last four toml files have changed order.\n> ls | where type == file | sort-by { get name | path parse | get extension } modified\n╭────┬─────────────────────┬──────┬───────────┬───────────────╮\n│  # │        name         │ type │   size    │   modified    │\n├────┼─────────────────────┼──────┼───────────┼───────────────┤\n│  0 │ LICENSE             │ file │   1.1 KiB │ 11 months ago │\n│  1 │ CITATION.cff        │ file │     812 B │ a month ago   │\n│  2 │ Cargo.lock          │ file │ 175.6 KiB │ 2 days ago    │\n│  3 │ CODE_OF_CONDUCT.md  │ file │   3.4 KiB │ a year ago    │\n│  4 │ CONTRIBUTING.md     │ file │  11.0 KiB │ a month ago   │\n│  5 │ README.md           │ file │  12.0 KiB │ a month ago   │\n│  6 │ SECURITY.md         │ file │   2.6 KiB │ a month ago   │\n│  7 │ toolkit.nu          │ file │  19.2 KiB │ 3 days ago    │\n│  8 │ Cross.toml          │ file │     666 B │ 5 months ago  │\n│  9 │ rust-toolchain.toml │ file │   1.1 KiB │ 2 weeks ago   │\n│ 10 │ typos.toml          │ file │     513 B │ 2 weeks ago   │\n│ 11 │ Cargo.toml          │ file │   9.0 KiB │ 2 days ago    │\n╰────┴─────────────────────┴──────┴───────────┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Formatting Single Duration to Microseconds in Nushell\nDESCRIPTION: This snippet demonstrates converting a single duration input to microseconds. It shows the command input of 1 second and asks for the output in microseconds, resulting in a string output of 1000000 microseconds.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_duration.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 1sec | format duration us\n1000000 µs\n```\n\n----------------------------------------\n\nTITLE: Find in Nested Lists Using Regex\nDESCRIPTION: Example showing regex pattern matching in nested list structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n> [[\"Larry\", \"Moe\"], [\"Victor\", \"Marina\"]] | find --regex \"rr\"\n╭───┬───────────────╮\n│ 0 │ ╭───┬───────╮ │\n│   │ │ 0 │ Larry │ │\n│   │ │ 1 │ Moe   │ │\n│   │ ╰───┴───────╯ │\n╰───┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Recursive Listing with Glob Pattern\nDESCRIPTION: Example of using the 'ls' command with a glob pattern to recursively list all files and subdirectories under the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> ls -a **/*\n```\n\n----------------------------------------\n\nTITLE: Slice Command Signature\nDESCRIPTION: The basic signature for the slice command that takes a rows parameter to specify the range of rows to return.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/slice.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> slice {flags} (rows)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Characters in Nushell\nDESCRIPTION: The 'random chars' command in Nushell generates a string of random characters uniformly distributed over the ASCII letters a-z, A-Z, and numbers 0-9. It requires Nushell as the main dependency. The primary parameter is 'length', which specifies the number of random characters to generate. By default, 25 characters are generated. Inputs are accepted as an integer or filesize, and the output is a string. There are no significant constraints aside from ensuring the correct usage of flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_chars.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> random chars\n```\n\nLANGUAGE: nu\nCODE:\n```\n> random chars --length 20\n```\n\nLANGUAGE: nu\nCODE:\n```\n> random chars --length 1kb\n```\n\n----------------------------------------\n\nTITLE: Executing 'commandline get-cursor' Command in Nushell\nDESCRIPTION: This command retrieves the current cursor position in the Nushell command line. It takes no arguments and returns an integer representing the cursor position.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/commandline_get-cursor.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> commandline get-cursor {flags}\n```\n\n----------------------------------------\n\nTITLE: Using a Stream Transformation Plugin in Nushell\nDESCRIPTION: This Nushell command demonstrates using a plugin that transforms a stream of integers by multiplying each value by two, working with an infinite stream.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\n$ generate 0 { |n| {out: $n, next: ($n + 1)} } | plugin\n0\n2\n4\n6\n8\n# ...\n```\n\n----------------------------------------\n\nTITLE: Nushell Overlay Command Signature\nDESCRIPTION: The basic signature for the overlay command in Nushell. This command requires a subcommand to perform actual operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\noverlay {flags}\n```\n\n----------------------------------------\n\nTITLE: Process Information for Running Plugins\nDESCRIPTION: Shows how to get process information for currently running plugins by filtering the process list using plugin PIDs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_list.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ps | where pid in (plugin list).pid\n```\n\n----------------------------------------\n\nTITLE: Split String into Character Rows in Nu Shell\nDESCRIPTION: Demonstrates splitting a string 'abc' into individual characters as rows. Each character becomes a separate row in the output table, including empty rows at start and end.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_row.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n'abc' | split row ''\n```\n\n----------------------------------------\n\nTITLE: Path Join for Parse-time Constant Evaluation\nDESCRIPTION: Showcases how to utilize a command that returns a constant value to create a parse-time constant for further operations in Nushell, simulating compile-time evaluations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/how_nushell_code_gets_run.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nconst my_startup_modules =  $nu.default-config-dir | path join \"my-mods\"\nuse $\"($my_startup_modules)/my-utils.nu\"\n```\n\n----------------------------------------\n\nTITLE: Creating Descending Ranges in Nushell\nDESCRIPTION: Demonstrates creating a range that counts backward from 5 to 1, showing that ranges can work in reverse direction.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 5..1\n╭───┬───╮\n│ 0 │ 5 │\n│ 1 │ 4 │\n│ 2 │ 3 │\n│ 3 │ 2 │\n│ 4 │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Random Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'random' command in Nushell. It shows that the command takes flags as arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> random {flags} \n```\n\n----------------------------------------\n\nTITLE: Extracting Bytes with bytes at Command Signature in Nushell\nDESCRIPTION: The command signature for the 'bytes at' command in Nushell, showing its syntax and parameters. It takes a range parameter to specify which bytes to extract and optional rest parameters to target specific paths in structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> bytes at {flags} (range) ...rest\n```\n\n----------------------------------------\n\nTITLE: Using an Alternative Config File in Nushell\nDESCRIPTION: Executes a command using an alternative config file instead of the default config.nu.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_25\n\nLANGUAGE: nushell\nCODE:\n```\nnu -l -c \"ls\" --config foo_config.nu\n```\n\n----------------------------------------\n\nTITLE: Polars First Command Signature\nDESCRIPTION: The basic command signature for the polars first command showing parameter structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_first.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars first {flags} (rows)\n```\n\n----------------------------------------\n\nTITLE: Splitting lines in a file\nDESCRIPTION: Opens a text file, splits it into lines using the `lines` command, and displays each line as a separate row in a table.  This prepares the data for further parsing and manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nopen gente.txt | lines\n```\n\n----------------------------------------\n\nTITLE: Executing 'scope modules' Command in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'scope modules' command in Nushell to show the modules in the current scope. The command takes no arguments and outputs information about the available modules.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_modules.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> scope modules\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Generic command for installing Nushell plugins using Cargo. Replace 'plugin name' with the specific plugin desired.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-02-16-nushell_0_27.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: String Declaration in Nushell\nDESCRIPTION: Multiple ways to declare strings in Nushell, including double quotes, single quotes, and string interpolation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/types_of_data.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\"Mein Text\"\n```\n\nLANGUAGE: nu\nCODE:\n```\n'Mein Text'\n```\n\nLANGUAGE: nu\nCODE:\n```\necho $\"6 x 7 = (6 * 7)\"\n```\n\n----------------------------------------\n\nTITLE: Combine Columns from Index 2 Onwards - Nushell\nDESCRIPTION: Example showing how to combine all columns starting from index 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/detect_columns.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> $'c1 c2 c3 c4 c5(char nl)a b c d e' | detect columns --combine-columns 2..\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties with $it in Nushell\nDESCRIPTION: This example shows how to access specific properties of items in a pipeline using the $it variable with path notation, enabling concise extraction of data like filenames.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nls | echo $it.name\n```\n\n----------------------------------------\n\nTITLE: Skipping Elements While Condition is True in C#\nDESCRIPTION: Demonstrates how to skip elements while a condition is true using `SkipWhile` in C#.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\n\"SkipWhile\"\n```\n\n----------------------------------------\n\nTITLE: Nushell String Command Signature\nDESCRIPTION: This shows the basic syntax for the 'str' command in Nushell. The command requires using one of the available subcommands to perform string operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str {flags} \n```\n\n----------------------------------------\n\nTITLE: Disabling Default Keybindings in Nushell\nDESCRIPTION: This snippet provides instructions to remove default keybindings without replacement by setting the event to 'null'. This can be used to disable default behaviors like clearing the screen with 'Ctrl + l'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n    keybindings: [\n      {\n        modifier: control\n        keycode: char_l\n        mode: [emacs, vi_normal, vi_insert]\n        event: null\n      }\n    ]\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Delete Merged Git Branches in Nushell\nDESCRIPTION: Removes local branches that have been merged into master or main, with a hard delete operation that permanently removes selected branches\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/git.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ngit branch --merged | lines | where ($it != \"* master\" and $it != \"* main\") | each {|br| git branch -D ($br | str trim) } | str trim\n```\n\n----------------------------------------\n\nTITLE: Displaying Hidden Files with ls Command in Nushell\nDESCRIPTION: Added a new '--all' flag to the 'ls' command to show hidden files in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-13-twin0029.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- quebin31 added `--all` flag to `ls` to show hidden files (#1483)\n```\n\n----------------------------------------\n\nTITLE: Timing a Command with File Input in Nushell\nDESCRIPTION: Example of using timeit with file input, demonstrating how to properly handle streaming input by collecting it before timing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/timeit.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> open some_file.txt | collect | timeit { split chars }\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for Command Filtering\nDESCRIPTION: Vue component script that filters and sorts pages containing command documentation. Extracts pages with paths containing '/commands/docs/' and sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/command_reference.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.indexOf('/commands/docs/') >= 0)\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Filtering Active CPU Processes\nDESCRIPTION: Filters process list to show only processes actively using CPU\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nps | where cpu > 0\n```\n\n----------------------------------------\n\nTITLE: Running a Command via `Run` plugin call in JSON\nDESCRIPTION: This snippet shows how to structure a JSON call to run a command using the `Run` plugin, specifying command name, call details, and positional arguments. The expected output is PipelineData or Error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [\n    0,\n    {\n      \"Run\": {\n        \"name\": \"inc\",\n        \"call\": {\n          \"head\": {\n            \"start\": 40400,\n            \"end\": 40403\n          },\n          \"positional\": [\n            {\n              \"String\": {\n                \"val\": \"0.1.2\",\n                \"span\": {\n                  \"start\": 40407,\n                  \"end\": 40415\n                }\n              }\n            }\n          ],\n          \"named\": [\n            [\n              \"major\",\n              {\n                \"Bool\": {\n                  \"val\": true,\n                  \"span\": {\n                    \"start\": 40404,\n                    \"end\": 40406\n                  }\n                }\n              }\n            ]\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using split words command to separate words\nDESCRIPTION: This code snippet demonstrates how to use the 'split words' command in Nushell to split a simple string into individual words, resulting in a list of strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_words.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 'hello world' | split words\n╭───┬───────╮\n│ 0 │ hello │\n│ 1 │ world │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Using Closure with 'all' Command in Nushell\nDESCRIPTION: Shows how to use a closure with the 'all' command after changes to commands with predicates in Nushell 0.73.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-12-20-nushell-0.73.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[status]; [UP] [UP]] | all {|el| $el.status == UP }\n```\n\n----------------------------------------\n\nTITLE: Adding Nushell Dependencies to the Project\nDESCRIPTION: Command to add the required Nushell dependencies (nu-plugin and nu-protocol) to the Rust project using cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo add nu-plugin nu-protocol\n```\n\n----------------------------------------\n\nTITLE: Conditional output in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'if' command in Nushell to output a value based on a condition. If the condition `2 < 3` is true, it outputs 'yes!'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/if.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"> if 2 < 3 { 'yes!' }\"\n\n```\n\n----------------------------------------\n\nTITLE: Opening an Image File Using NuShell\nDESCRIPTION: This snippet shows the use of the `start` command to open an image file ('file.jpg') with the default image viewer. The command relies solely on the file path provided.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/start.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> start file.jpg\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command with Type-Annotated Parameter in Nushell\nDESCRIPTION: This snippet demonstrates how to define a custom command with a fully articulated parameter that has a type annotation. The parameter 'some' is optional, of type 'int', and has a default value of 9.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/type_signatures.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndef fully [some?: int = 9] { $some }\n```\n\n----------------------------------------\n\nTITLE: Viewing dataframe schema in Nushell\nDESCRIPTION: Shows how to display the schema (column names and data types) of a dataframe using the polars schema command. This helps understand the structure and data types of the dataframe columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n$df_0 | polars schema\n```\n\n----------------------------------------\n\nTITLE: Using polars arg-sort with Reverse Order Flag in Nushell\nDESCRIPTION: Returns indexes for a sorted series in reverse order. This example converts a list to a dataframe and then gets the sorted indexes in descending order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-sort.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[1 2 2 3 3] | polars into-df | polars arg-sort --reverse\n```\n\n----------------------------------------\n\nTITLE: Convert table into cell path in NuShell\nDESCRIPTION: This snippet showcases converting a table into a cell path in NuShell. The input is a table with 'value' and 'optional' columns.  The '?' character indicates that the optional field is true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_cell-path.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n\n> [[value, optional]; [5 true] [c false]] | into cell-path\n$.5?.c\n\n```\n\n----------------------------------------\n\nTITLE: Cross Join Between Dataframes\nDESCRIPTION: Shows how to perform a cross join between two dataframes, creating all possible combinations of rows from both dataframes without requiring a matching key.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_join.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nlet tokens = [[monopoly_token]; [hat] [shoe] [boat]] | polars into-df\nlet players = [[name, cash]; [Alice, 78] [Bob, 135]] | polars into-df\n$players | polars select (polars col name) | polars join --cross $tokens | polars collect\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `str trim` to Python's `strip`, `rstrip`, `lstrip`\nDESCRIPTION: Explains how to trim whitespace from a string in Python using `strip` (trims from both ends), `rstrip` (trims from the right), or `lstrip` (trims from the left), corresponding to the `str trim` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\n\"strip\", \"rstrip\", \"lstrip\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes List in Markdown\nDESCRIPTION: A markdown formatted list of breaking changes with pull request links and descriptions for the Nushell project, organized by PR number and change description\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n# All breaking changes [[toc](#table-of-content)]\n\n- [#14275](https://github.com/nushell/nushell/pull/14275) Fix the order of preference for `VISUAL` and `EDITOR`\n- [#14211](https://github.com/nushell/nushell/pull/14211) Url split query\n- [#14242](https://github.com/nushell/nushell/pull/14242) No longer autoload deprecated-dirs\n- [#14255](https://github.com/nushell/nushell/pull/14255) Switch to unicase's to_folded_case\n- [#14157](https://github.com/nushell/nushell/pull/14157) Div, mod, and floor div overhaul\n- [#14246](https://github.com/nushell/nushell/pull/14246) Empty rest args match should be an empty list\n- [#14237](https://github.com/nushell/nushell/pull/14237) Change --max-time arg for http commands to use `Duration` type\n- [#14085](https://github.com/nushell/nushell/pull/14085) Make `plugin list` read state from plugin registry file as well\n```\n\n----------------------------------------\n\nTITLE: Appending DataFrame as New Rows\nDESCRIPTION: Example showing how to append a dataframe by adding rows at the end using the --col flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_append.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> let a = ([[a b]; [1 2] [3 4]] | polars into-df); $a | polars append $a --col\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with All Features\nDESCRIPTION: Command to install Nushell with both stable and unstable features using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-18-nushell-0_7_0.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --all-features\n```\n\n----------------------------------------\n\nTITLE: Basic Variance Calculation Example\nDESCRIPTION: Demonstrates calculating the variance of a simple list of numbers from 1 to 5.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_variance.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 4 5] | math variance\n2\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Command from Module in Nushell\nDESCRIPTION: Demonstrates defining a custom command in a module, importing it using 'use', and then calling the imported command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/use.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam { export def foo [] { \"foo\" } }; use spam foo; foo\n```\n\n----------------------------------------\n\nTITLE: Using Reference File\nDESCRIPTION: Example showing how to set file timestamps based on a reference file's modified time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> touch -m -r fixture.json d e\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The basic syntax for the math arccos command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arccos.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math arccos {flags} \n```\n\n----------------------------------------\n\nTITLE: Renaming Fields Using a Closure in Nushell\nDESCRIPTION: Shows how to rename fields dynamically using a closure function that manipulates the field names\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rename.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n{abc: 1, bbc: 2} | rename --block {str replace --all 'b' 'z'}\n```\n\n----------------------------------------\n\nTITLE: Non-Matching Pattern Example in Nushell\nDESCRIPTION: Example showing a case where the binary sequence does not start with the specified pattern 0x[11].\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_starts-with.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AA] | bytes starts-with 0x[11]\n```\n\n----------------------------------------\n\nTITLE: Replacing String in DataFrame Column\nDESCRIPTION: Example showing how to replace a string pattern in a specific column of a DataFrame using polars replace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_replace.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a]; [abc] [abcabc]] | polars into-df | polars select (polars col a | polars replace --pattern ab --replace AB) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Opening SQLite Database with Nushell open Command\nDESCRIPTION: Demonstrates the SQLite-aware open command in Nushell, which can detect and open SQLite databases based on file contents.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-05-03-nushell_0_62.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n  > open db.sqlite\n```\n\n----------------------------------------\n\nTITLE: Converting a Table to TSV Format in Nushell\nDESCRIPTION: Demonstrates converting a simple table with two columns into TSV format. The example outputs a string with each row on a new line and values separated by tabs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_tsv.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[foo bar]; [1 2]] | to tsv\nfoobar\n12\n\n```\n\n----------------------------------------\n\nTITLE: Sequence Characters from a to e\nDESCRIPTION: Example showing how to generate a sequence of characters from 'a' to 'e', which outputs a table with characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_char.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> seq char a e\n╭───┬───╮\n│ 0 │ a │\n│ 1 │ b │\n│ 2 │ c │\n│ 3 │ d │\n│ 4 │ e │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Shifting Values with Null Dropping\nDESCRIPTION: Example showing how to shift values in a dataframe by 2 positions and drop the resulting null values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_shift.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 2 3 3] | polars into-df | polars shift 2 | polars drop-nulls\n```\n\n----------------------------------------\n\nTITLE: Join Structured Path Record\nDESCRIPTION: Example showing how to join a structured path record into a single path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> { parent: '/home/viking', stem: 'spam', extension: 'txt' } | path join\n/home/viking/spam.txt\n```\n\n----------------------------------------\n\nTITLE: Selecting Single Column from DataFrame in Nushell\nDESCRIPTION: Example demonstrating how to select a single column 'a' from a dataframe containing two columns. The example first creates a dataframe from a 2D array and then extracts column 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars get a\n```\n\n----------------------------------------\n\nTITLE: Bytes Build Accepts Integer Values - Rust\nDESCRIPTION: This snippet describes a change where the `bytes build` command now accepts integer values as individual bytes. This likely involves modifying the command's parsing logic to handle integers correctly. This enhancement allows users to construct byte arrays more easily and directly from numerical values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\ndevyn [made `bytes build` accept integer values as individual bytes](https://github.com/nushell/nushell/pull/12685).\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing using Regular Expression with Capture Groups in Nushell\nDESCRIPTION: Demonstrates how to use regular expressions with capture groups to transform file extensions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 'my_library.rb' | str replace -r '(.+).rb' '$1.nu'\nmy_library.nu\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IntRange with Custom Step Value in Nushell\nDESCRIPTION: Example of an integer range with a custom step value. The range starts at 0, has a step of 64, and includes 128 as the end value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_55\n\nLANGUAGE: nu\nCODE:\n```\n0..64..128\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Range\": {\n    \"val\": {\n      \"IntRange\": {\n        \"start\": 0,\n        \"step\": 64,\n        \"end\": { \"Included\": 128 }\n      }\n    },\n    \"span\": {\n      \"start\": 1380,\n      \"end\": 1390\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Command Output Behavior in Nushell\nDESCRIPTION: Explains how Nushell commands differ from external commands in terms of output, and demonstrates the impact of scoped environment variables on command output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\ndo { ls; ls; ls; \"What?!\" }\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndo { $env.config.table.mode = \"none\"; ls }\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndo { $env.config.table.mode = \"none\"; ls | table }\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndo { $env.config.table.mode = \"none\"; print (ls) }\n```\n\n----------------------------------------\n\nTITLE: Rolling Record Columns Right\nDESCRIPTION: Example showing how to roll columns of a record to the right, which changes the order of key-value pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_right.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> {a:1 b:2 c:3} | roll right\n╭───┬───╮\n│ c │ 3 │\n│ a │ 1 │\n│ b │ 2 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: HTTP POST with JSON Body\nDESCRIPTION: Posts a JSON object to the specified URL, https://www.example.com, setting the Content-Type header to application/json. The `--content-type` flag is used to specify the MIME type of the data being sent.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_post.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> http post --content-type application/json https://www.example.com { field: value }\n\n```\n\n----------------------------------------\n\nTITLE: Exploding Lists into Multiple Parameters in Nushell Query String\nDESCRIPTION: Illustrates how the 'url build-query' command handles lists in record values. It expands the list into multiple parameters with the same key in the resulting query string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_build-query.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n{a: [\"one\", \"two\"], b: \"three\"} | url build-query\n```\n\n----------------------------------------\n\nTITLE: HTTP POST with Pipeline Input\nDESCRIPTION: Opens the contents of the `foo.json` file, passes the content as input through a pipeline, and then posts it to the specified URL, https://www.example.com. This example demonstrates reading a file and using its content as the body of the POST request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_post.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> open --raw foo.json | http post https://www.example.com\n\n```\n\n----------------------------------------\n\nTITLE: Converting Filesize to String in Nushell\nDESCRIPTION: Shows how a filesize value is converted to a human-readable string representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n> 1kB | into string\n1.0 kB\n```\n\n----------------------------------------\n\nTITLE: Shuffle Example with Version Data\nDESCRIPTION: Example showing how to shuffle a table containing version and patch information randomly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/shuffle.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[version patch]; ['1.0.0' false] ['3.0.1' true] ['2.0.0' false]] | shuffle\n```\n\n----------------------------------------\n\nTITLE: List Processes in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `ps` command lists currently running processes.  In PowerShell, `Get-Process`, `ps`, or `gps` can be used.  In Unix shells, `ps` is the standard command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Strip Characters From End Only Example\nDESCRIPTION: Demonstrates stripping exclamation marks from only the end of strings in a dataframe column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-strip-chars.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n[[text]; [\"hello!!!\"] [\"world!!!\"] [\"test!!!\"]] | polars into-df | polars select (polars col text | polars str-strip-chars --end \"!\") | polars collect\n```\n\n----------------------------------------\n\nTITLE: Reset ANSI Color\nDESCRIPTION: Example showing how to reset text color to default.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ansi reset\n\n```\n\n----------------------------------------\n\nTITLE: Skip Elements in Nushell and PowerShell\nDESCRIPTION: The `skip` command (similar to `where row_number()`) skips the specified number of elements.  In PowerShell, `Select-Object -Skip` is used to skip elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Executing a Command with Minimal Nushell Features\nDESCRIPTION: Runs a single command in Nushell without standard library or any configurations for fastest execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_30\n\nLANGUAGE: nushell\nCODE:\n```\nnu -n --no-std-lib -c \"ls\"\n```\n\n----------------------------------------\n\nTITLE: Take Command Basic Signature\nDESCRIPTION: The basic syntax for the take command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> take {flags} (n)\n```\n\n----------------------------------------\n\nTITLE: LabeledError Structure Example in JSON\nDESCRIPTION: Example of a LabeledError structure used for error reporting in Nushell. It includes a main error message, labeled spans, error code, URL for additional information, help text, and nested inner errors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msg\": \"A really bad error occurred\",\n  \"labels\": [\n    {\n      \"text\": \"I don't know, but it's over nine thousand!\",\n      \"span\": {\n        \"start\": 9001,\n        \"end\": 9007\n      }\n    }\n  ],\n  \"code\": \"my_plugin::bad::really_bad\",\n  \"url\": \"https://example.org/my_plugin/error/bad/really_bad.html\",\n  \"help\": \"you can solve this by not doing the bad thing\",\n  \"inner\": [\n    {\n      \"msg\": \"The bad thing\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting List to NUON String in Nushell\nDESCRIPTION: Outputs a NUON string representing the contents of a list, compact by default.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_nuon.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[1 2 3] | to nuon\n```\n\n----------------------------------------\n\nTITLE: Dropping Columns in Nushell\nDESCRIPTION: Demonstrates the new 'drop column' subcommand for removing the last column from a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-09-nushell_0_28.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\necho [[lib, extension]; [nu-core, rs] [rake, rb]] | drop column\n```\n\n----------------------------------------\n\nTITLE: Get Second Column Example\nDESCRIPTION: Example showing how to get the second column name from a table using the select command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/columns.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name,age,grade]; [bill,20,a]] | columns | select 1\n```\n\n----------------------------------------\n\nTITLE: Sleep with Command Chaining - Nushell\nDESCRIPTION: Example demonstrating how to chain a command after a sleep operation using semicolon.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sleep.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> sleep 1sec; echo done\n```\n\n----------------------------------------\n\nTITLE: Get Help in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `help` command in Nushell is used to display help information.  In PowerShell, equivalent commands include `Get-Help`, `help`, and `man`.  In Unix-like shells, `man` is the common command for displaying manual pages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Take Until Command Signature in Nushell\nDESCRIPTION: Shows the command signature for the 'take until' command in Nushell. It takes a predicate as an argument and optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_until.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> take until {flags} (predicate)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Math Log Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'math log' function in Nushell. It takes a base parameter for which the logarithm should be computed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_log.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math log {flags} (base)\n```\n\n----------------------------------------\n\nTITLE: Creating Single File\nDESCRIPTION: Example showing how to create a single file named 'fixture.json'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> touch fixture.json\n```\n\n----------------------------------------\n\nTITLE: SSH Auth Socket Configuration in Nushell\nDESCRIPTION: Environment variable setup for SSH authentication socket path in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/ssh_agent.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n$env.SSH_AUTH_SOCK = $\"($env.XDG_RUNTIME_DIR)/ssh-agent.socket\"\n```\n\n----------------------------------------\n\nTITLE: Using Math Floor Command in Nushell\nDESCRIPTION: Demonstrates the new floor function in the math command that rounds numbers down to the nearest integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-03-nushell_0_22.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> echo [1.5 2.3 -3.1] | math floor\n───┬────\n 0 │  1\n 1 │  2\n 2 │ -4\n───┴────\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String with Decimal Places in Nushell\nDESCRIPTION: Demonstrates how to convert an integer to a string with three decimal places using the --decimals flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 5 | into string --decimals 3\n5.000\n```\n\n----------------------------------------\n\nTITLE: Custom Commands with Glob Parameters in Nushell\nDESCRIPTION: Shows how to create custom commands that accept glob or string parameters, demonstrating type handling differences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n# open files which match a given glob pattern\ndef open-files [g: glob] {\n  open $g\n  # In case if you want to open one file only\n  # open ($g | into string)\n}\n\n# open one file\ndef open-one-file [g: string] {\n  open $g\n  # In case if you want to open with glob pattern\n  # open ($g | into glob)\n}\n\n# open one file\ndef open-one-file2 [g] {\n  open $g\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to Decimal Example\nDESCRIPTION: Example demonstrating how to convert a string column to decimal format with 2 decimal places using polars commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_decimal.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1, '2.4']] | polars into-df | polars select (polars col b | polars decimal 2) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Wildcard Column Selection Example\nDESCRIPTION: Example showing how to use asterisk wildcard to select all columns in a dataframe using Polars column expression.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_col.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [x 1] [y 2] [z 3]] | polars into-df | polars select (polars col '*') | polars collect\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ x │ 1 │\n│ 1 │ y │ 2 │\n│ 2 │ z │ 3 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Using Math Round Command in Nushell\nDESCRIPTION: Demonstrates the new round function in the math command that rounds numbers to the nearest integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-03-nushell_0_22.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> echo [1.5 2.3 -3.1] | math round\n───┬────\n 0 │  2\n 1 │  2\n 2 │ -3\n───┴────\n```\n\n----------------------------------------\n\nTITLE: Calculating String Lengths for a List in Nushell\nDESCRIPTION: This example shows how to use the 'polars str-lengths' command to calculate string lengths for a list of strings in Nushell. It converts the list to a dataframe and then applies the str-lengths operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-lengths.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[a ab abc] | polars into-df | polars str-lengths\n```\n\n----------------------------------------\n\nTITLE: Closure Serialization in to json and Others\nDESCRIPTION: Changes were made to how closures are serialized in commands like `to json`, `to msgpack`, and `to msgpackz`. They will return errors if attempting to serialize closures unless the new `--serialize` option is used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Parsing Input File as Module in Nushell\nDESCRIPTION: Shows how to use nu-check with the --as-module flag to parse an input file as a module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-check.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> nu-check --as-module module.nu\n```\n\n----------------------------------------\n\nTITLE: Get Basic Directory Path\nDESCRIPTION: Example showing how to get the parent directory of a file path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_dirname.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> '/home/joe/code/test.txt' | path dirname\n/home/joe/code\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Columns Using Spread Operator\nDESCRIPTION: Shows how to select multiple columns by spreading a list of column names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/select.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> let cols = [name type]; [[name type size]; [Cargo.toml toml 1kb] [Cargo.lock toml 2kb]] | select ...$cols\n╭───┬────────────┬──────╮\n│ # │    name    │ type │\n├───┼────────────┼──────┤\n│ 0 │ Cargo.toml │ toml │\n│ 1 │ Cargo.lock │ toml │\n╰───┴────────────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Returning First Item from List in Nushell\nDESCRIPTION: This example demonstrates how to use the 'first' command to return the first item from a list in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/first.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | first\n1\n```\n\n----------------------------------------\n\nTITLE: Collecting Array Element - Nushell Example\nDESCRIPTION: Example showing how to use collect to access the second element of a stream.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/collect.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | collect { |x| $x.1 }\n```\n\n----------------------------------------\n\nTITLE: URL Join with Table Values\nDESCRIPTION: This snippet shows how to use the `url join` command with table values for the `params` field. The example demonstrates constructing a record with nested tables to represent URL parameters, and then using `url join` to generate a complete URL including the parameters.  This new feature enables more complex URL construction scenarios.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n\"{\n    \\\"scheme\\\": \\\"http\\\",\n    \\\"username\\\": \\\"usr\\\",\n    \\\"password\\\": \\\"pwd\\\",\n    \\\"host\\\": \\\"localhost\\\",\n    \\\"params\\\": [\n        [\\\"key\\\", \\\"value\\\"];\n        [\\\"par_1\\\", \\\"aaa\\\"],\n        [\\\"par_2\\\", \\\"bbb\\\"],\n        [\\\"par_1\\\", \\\"ccc\\\"],\n        [\\\"par_2\\\", \\\"ddd\\\"],\n    ],\n    \\\"port\\\": \\\"1234\\\",\n} | url join\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\n\"\nhttp://usr:pwd@localhost:1234?par_1=aaa&par_2=bbb&par_1=ccc&par_2=ddd\n\"\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments with Spread Operator in Nushell\nDESCRIPTION: Demonstrates how to create a wrapper command that forwards its rest arguments to another command using the spread operator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\ndef bar [ ...args ] { foo --flag \"bar\" \"baz\" ...$args }\nbar 1 2 3\n# => [true, bar, baz, [1, 2, 3]]\n```\n\n----------------------------------------\n\nTITLE: Filling a String on the Left Side\nDESCRIPTION: This code snippet demonstrates how to fill a string on the left side to a specified width using a designated character. It uses the 'fill' command with appropriate flags for alignment and width.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/fill.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 'nushell' | fill --alignment l --character '─' --width 15\nnushell────────\n```\n\n----------------------------------------\n\nTITLE: Expression Assignment in Nushell\nDESCRIPTION: Shows how to assign the result of an arithmetic expression to a variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/let.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> let x = 10 + 100\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'source' Command in Nushell\nDESCRIPTION: Specifies the signature for the 'source' command, including flags and filename parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> source {flags} (filename)\n```\n\n----------------------------------------\n\nTITLE: Adding Series to Regular Dataframe\nDESCRIPTION: Example showing how to add a new column 'c' to an existing dataframe using a series conversion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_with-column.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4]]\n    | polars into-df\n    | polars with-column ([5 6] | polars into-df) --name c\n```\n\n----------------------------------------\n\nTITLE: Converting String to Bits String - Nushell\nDESCRIPTION: Example of converting a text string into its binary representation, with each character converted to 8 bits.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_bits.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> 'nushell.sh' | format bits\n01101110 01110101 01110011 01101000 01100101 01101100 01101100 00101110 01110011 01101000\n```\n\n----------------------------------------\n\nTITLE: Updating PATH permanently in Nu\nDESCRIPTION: Updates the PATH environment variable permanently using `config set path [<dir1> <dir2> ...]`. This modifies the Nu configuration file to include the specified directories in the PATH.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_20\n\nLANGUAGE: nu\nCODE:\n```\n\"config set path [<dir1> <dir2> ...]\"\n```\n\n----------------------------------------\n\nTITLE: PROMPT_* Environment Variable Handling\nDESCRIPTION: The `PROMPT_*` environment variables are no longer inherited from the calling process, preventing potential conflicts and ensuring more consistent prompt settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Updating Zero Value Cells to Empty Strings in Nushell\nDESCRIPTION: An example showing how to use the 'update cells' command to replace all zero values in a table with empty strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update_cells.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [\n        [\"2021-04-16\", \"2021-06-10\", \"2021-09-18\", \"2021-10-15\", \"2021-11-16\", \"2021-11-17\", \"2021-11-18\"];\n        [          37,            0,            0,            0,           37,            0,            0]\n    ] | update cells { |value|\n          if $value == 0 {\n            \"\"\n          } else {\n            $value\n          }\n    }\n```\n\n----------------------------------------\n\nTITLE: Convert binary ODS data to table in NuShell\nDESCRIPTION: This snippet demonstrates how to convert binary .ods data into a NuShell table using the `from ods` command. It reads the raw data from the `test.ods` file and pipes it to `from ods` for parsing. This will output a NuShell table representing the spreadsheet data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_ods.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> open --raw test.ods | from ods\n```\n\n----------------------------------------\n\nTITLE: Finding relative paths from a list of absolute paths in Nushell\nDESCRIPTION: This example shows how to process a list of absolute paths and express each one as relative to a common parent path. The command takes multiple paths and returns each one as relative to '/home'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_relative-to.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [ /home/viking, /home/spam ] | path relative-to '/home'\n╭───┬────────╮\n│ 0 │ viking │\n│ 1 │ spam   │\n╰───┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Showing Directory Type Example in Nushell\nDESCRIPTION: Demonstrates how to use the 'path type' command to check that the current directory ('.') is of type 'dir'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_type.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '.' | path type\ndir\n```\n\n----------------------------------------\n\nTITLE: Splitting Git Log into Columns\nDESCRIPTION: Splitting git log output into columns using the custom delimiter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines | split column \"»¦«\"\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Columns to Lazy Dataframe\nDESCRIPTION: Example demonstrating how to add multiple calculated columns to a lazy dataframe using column expressions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_with-column.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4]]\n    | polars into-lazy\n    | polars with-column [\n        ((polars col a) * 2 | polars as \"c\")\n        ((polars col a) * 3 | polars as \"d\")\n      ]\n    | polars collect\n```\n\n----------------------------------------\n\nTITLE: Version Increment Flags in Nushell\nDESCRIPTION: Available flags for incrementing different version components: major, minor, and patch versions. Each flag modifies the version number accordingly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/inc.md#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- --major, -M: increment the major version (eg 1.2.1 -> 2.0.0)\n- --minor, -m: increment the minor version (eg 1.2.1 -> 1.3.0)\n- --patch, -p: increment the patch version (eg 1.2.1 -> 1.2.2)\n```\n\n----------------------------------------\n\nTITLE: Using Overlay Command in Nushell\nDESCRIPTION: Demonstrates the use of the renamed 'overlay use' command to import both environment variables and commands/aliases from a module file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> overlay use spam.nu\n```\n\n----------------------------------------\n\nTITLE: Basic Signature for bytes ends-with Command in Nushell\nDESCRIPTION: Defines the command signature for the 'bytes ends-with' operation in Nushell, showing the pattern parameter and rest arguments for cell path operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_ends-with.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes ends-with {flags} (pattern) ...rest\n```\n\n----------------------------------------\n\nTITLE: Using $in in Catch Closures in Nushell\nDESCRIPTION: Demonstrates how $in now works in catch closures, behaving similarly to other closures like those given to 'each'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-10-nushell_0_74.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\ntry { 'x' | math abs } catch { print $in }\n```\n\n----------------------------------------\n\nTITLE: Transposing Grouped Git Commits in Nushell\nDESCRIPTION: Enhances the previous grouping command by transposing the results to create a clearer table with named columns. The transpose command transforms rows into columns with specified column names 'date' and 'count'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 25 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime | format date '%Y-%m-%d'} | group-by date | transpose date count\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Assignment in Nushell\nDESCRIPTION: Demonstrates how to assign a simple numeric value to a variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/let.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> let x = 10\n```\n\n----------------------------------------\n\nTITLE: Roll up Command Signature in Nu Shell\nDESCRIPTION: Defines the basic command signature for the roll up operation in Nu Shell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_up.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> roll up {flags} \n```\n\n----------------------------------------\n\nTITLE: Nushell Debug Info Command Signature\nDESCRIPTION: This snippet shows the signature of the 'debug info' command in Nushell. It indicates that the command takes optional flags and doesn't require any input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug_info.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> debug info {flags}\n```\n\n----------------------------------------\n\nTITLE: Reading an Environment Variable\nDESCRIPTION: In this snippet, the method to read the value of an environment variable is illustrated. It shows how to access the value assigned to an environment variable from the $env record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n$env.FOO\n```\n\n----------------------------------------\n\nTITLE: URL Decode Command Signature in Nushell\nDESCRIPTION: The basic command signature for the url decode operation in Nushell, showing the command structure with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_decode.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> url decode {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Nushell seq char Command Signature\nDESCRIPTION: The basic syntax and signature of the seq char command that generates character sequences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_char.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> seq char {flags} (start) (end)\n```\n\n----------------------------------------\n\nTITLE: Stopping a Named Plugin\nDESCRIPTION: Example showing how to stop a plugin using its name 'inc'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_stop.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin stop inc\n```\n\n----------------------------------------\n\nTITLE: Basic Random Boolean Generation\nDESCRIPTION: Example of generating a random boolean value with equal probability.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_bool.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> random bool\n```\n\n----------------------------------------\n\nTITLE: Duration Calculations in Nushell\nDESCRIPTION: Shows duration calculations and conversions in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n3.14day\n# => 3day 3hr 21min\n30day / 1sec  # How many seconds in 30 days?\n# => 2592000\n```\n\n----------------------------------------\n\nTITLE: Shuffle Array in Nushell and PowerShell\nDESCRIPTION: The `shuffle` command randomizes the order of elements in an array. In PowerShell, use `$var` (likely referring to a custom function or variable assignment combined with `Sort-Object {Get-Random}`\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\n\"$var\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n\"Sort-Object {Get-Random}\"\n```\n\n----------------------------------------\n\nTITLE: Skipping First Value in List using Nushell 'skip' Command\nDESCRIPTION: Demonstrates how to use the 'skip' command to skip the first value in a list, showing the resulting output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [2 4 6 8] | skip 1\n╭───┬───╮\n│ 0 │ 4 │\n│ 1 │ 6 │\n│ 2 │ 8 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Searching with Range Parameter (RHS Open) in Nushell\nDESCRIPTION: Searches for '.rb' in the string '.rb.rb' but only starting from index 1, using a right-hand-side open range (1..). This returns 3, the position of the second occurrence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_index-of.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n'.rb.rb' | str index-of '.rb' --range 1..\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on macOS/Linux using Homebrew\nDESCRIPTION: Command to install Nushell shell on macOS or Linux systems using the Homebrew package manager.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install nushell\n```\n\n----------------------------------------\n\nTITLE: Creating Sliding Window with Stride in Nushell\nDESCRIPTION: Shows how to use the 'window' command with a stride of 3, creating windows of size 2 across a longer list of numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/window.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1, 2, 3, 4, 5, 6, 7, 8] | window 2 --stride 3\n```\n\n----------------------------------------\n\nTITLE: Recursive File Search with Depth Limit in Nushell\nDESCRIPTION: Example demonstrating how to recursively search for specific file types (Rust and TOML) with a depth limit of 2 folders.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> glob **/*.{rs,toml} --depth 2\n\n```\n\n----------------------------------------\n\nTITLE: Removing directory recursively in Nu\nDESCRIPTION: Recursively removes the given path using the 'rm' command with the '-r' flag. This command deletes the directory and all its contents, including subdirectories and files, permanently.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n\"rm -r <path>\"\n```\n\n----------------------------------------\n\nTITLE: Converting Record to URL with Path and Fragment in Nushell\nDESCRIPTION: This example shows how to use 'url join' to convert a record with a path and fragment into a complete URL string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_join.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n{\n        \"scheme\": \"http\",\n        \"host\": \"www.pixiv.net\",\n        \"port\": \"1234\",\n        \"path\": \"user\",\n        \"fragment\": \"frag\"\n    } | url join\n```\n\n----------------------------------------\n\nTITLE: Expanding Relative Path Example\nDESCRIPTION: Shows how to expand a relative path using the path expand command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_expand.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'foo/../bar' | path expand\n\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The command signature showing the basic syntax for the join command with its required parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/join.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> join {flags} (right-table) (left-on) (right-on)\n```\n\n----------------------------------------\n\nTITLE: Make HTTP Requests in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The table indicates that making HTTP requests in Nushell involves `HttpClient`, `WebClient`, or `HttpWebRequest/Response`. In PowerShell, `Invoke-WebRequest` is used, while in Unix shells, the standard command is `wget`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Bytes Replace Command Signature in Nushell\nDESCRIPTION: The signature for the 'bytes replace' command, which takes a pattern to find, a replacement pattern, and optional cell paths for structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_replace.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes replace {flags} (find) (replace) ...rest\n```\n\n----------------------------------------\n\nTITLE: Sorting by First Name - Nushell\nDESCRIPTION: This snippet sorts the structured table of data by first name after cleaning and organizing. Sorting is a key aspect of data manipulation that allows for better insights.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nopen people.txt | lines | split column \"|\" first_name last_name job | str trim | sort-by first_name\n# => ───┬────────────┬───────────┬──────────\n# =>  # │ first_name │ last_name │ job\n# => ───┼────────────┼───────────┼──────────\n# =>  0 │ Antonio    │ Vivaldi   │ Composer\n# =>  1 │ Bob        │ Ross      │ Painter\n# =>  2 │ Octavia    │ Butler    │ Writer\n# => ───┴────────────┴───────────┴──────────\n```\n\n----------------------------------------\n\nTITLE: Calling Declaration in Nushell Engine (JSON)\nDESCRIPTION: Example of a CallDecl engine call to execute a command using its declaration ID. The call includes context, id, declaration ID, call details, input, and redirection settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 7,\n    \"id\": 49,\n    \"call\": {\n      \"CallDecl\": {\n        \"decl_id\": 432,\n        \"call\": {\n          \"head\": {\n            \"start\": 40400,\n            \"end\": 40403\n          },\n          \"positional\": [\n            {\n              \"String\": {\n                \"val\": \"0.1.2\",\n                \"span\": {\n                  \"start\": 40407,\n                  \"end\": 40415\n                }\n              }\n            }\n          ],\n          \"named\": [\n            [\n              \"major\",\n              {\n                \"Bool\": {\n                  \"val\": true,\n                  \"span\": {\n                    \"start\": 40404,\n                    \"end\": 40406\n                  }\n                }\n              }\n            ]\n          ]\n        },\n        \"input\": {\n          \"Value\": {\n            \"Int\": {\n              \"val\": 400,\n              \"span\": {\n                \"start\": 40390,\n                \"end\": 40393\n              }\n            }\n          }\n        },\n        \"redirect_stdout\": true,\n        \"redirect_stderr\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Size Column to KB - Nushell\nDESCRIPTION: This snippet demonstrates converting the size column of files to kilobytes (KB) using the 'format filesize' command. The command retrieves the file sizes from the 'ls' command output and converts them accordingly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_filesize.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ls | format filesize KB size\n```\n\n----------------------------------------\n\nTITLE: Basic Nushell 'to md' Command Signature\nDESCRIPTION: Defines the signature of the 'to md' command in Nushell that converts data to Markdown format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_md.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> to md {flags} \n```\n\n----------------------------------------\n\nTITLE: Handling Config Engine Call Response in JSON\nDESCRIPTION: Example of a successful result from a Config engine call. The response includes a Config object with various settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCallResponse\": [\n    0,\n    {\n      \"Config\": {\n        \"external_completer\": null,\n        \"filesize_metric\": true,\n        \"table_mode\": \"Rounded\",\n        \"table_move_header\": false,\n        ...\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Parent Process ID in Nushell\nDESCRIPTION: Retrieves the parent process ID (ppid) of the current Nushell process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ps.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> ps | where pid == $nu.pid | get ppid\n```\n\n----------------------------------------\n\nTITLE: Database Query Operations - After Unification (Nushell)\nDESCRIPTION: Example showing the new simplified syntax for database operations in Nushell after command unification. Demonstrates the same operations with a more streamlined syntax that matches dataframe operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-07-05-nushell-0_65.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nopen myfile.db\n| select a\n| from table_1\n| where ((field a) > 1 | and ((field a) < 10))\n```\n\n----------------------------------------\n\nTITLE: Reversing an Array in PowerShell\nDESCRIPTION: Demonstrates how to reverse an array in PowerShell using `[Array]::Reverse($var)`. This is equivalent to the `reverse` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"[Array]::Reverse($var)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Files\nDESCRIPTION: Example demonstrating how to create multiple files (a, b, and c) in a single command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> touch a b c\n```\n\n----------------------------------------\n\nTITLE: Converting a string that's already in snake_case in Nushell\nDESCRIPTION: Shows that applying the str snake-case command to a string that is already in snake_case format does not change it. The command preserves existing underscores.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_snake-case.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\"this_is_the_second_case\" | str snake-case\n```\n\n----------------------------------------\n\nTITLE: Using CMD.EXE Internal Commands in Nushell\nDESCRIPTION: Shows how to execute CMD.EXE internal commands in Nushell, with special handling for commands like 'ver'. Internal commands can be executed using the '^' prefix and take precedence over external commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_cmd.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n^ver        # Executes CMD.EXE's internal VER command\n./ver       # Executes local ver.bat file\nver.bat     # Executes local ver.bat file\n^start     # Executes CMD.EXE's internal START command\n```\n\n----------------------------------------\n\nTITLE: Executing Keybindings Listen Command in Nushell\nDESCRIPTION: This command listens for key events and displays their codes. It's primarily used as an internal debugging tool for Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_listen.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> keybindings listen\n```\n\n----------------------------------------\n\nTITLE: Using rm Command with Globbing Patterns in Nushell\nDESCRIPTION: Explains how to use the `rm` command in Nushell to remove files matching globbing patterns. Initially, the command removes a file named literally '*.txt', and subsequently, it removes files matching the pattern if the literal doesn't exist. Requires Nushell installation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nrm *.txt\n```\n\n----------------------------------------\n\nTITLE: Alternative Standard Library Module Import in Nushell\nDESCRIPTION: Shows alternative space-separated import syntax for standard library modules. Not recommended due to performance impact.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/standard_library.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nuse std log\nuse std formats *\n```\n\n----------------------------------------\n\nTITLE: Executing a Single Command in Nushell\nDESCRIPTION: Runs a single command in Nushell with minimal configuration loading. Does not enter the REPL.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_23\n\nLANGUAGE: nushell\nCODE:\n```\nnu -c \"ls\"\n```\n\n----------------------------------------\n\nTITLE: Sort-by Command Signature\nDESCRIPTION: The basic command signature for the sort-by command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort-by.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> sort-by {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Inserting Directory Listing in Nushell's SQLite Database\nDESCRIPTION: Example of inserting the output of the ls command (directory listing) into a table in the in-memory SQLite database.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_insert.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> ls | stor insert --table-name files\n```\n\n----------------------------------------\n\nTITLE: Changing Directories in Nushell\nDESCRIPTION: Navigate between directories using `cd` command or direct path specification in Nushell\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/explorando.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ncd some_directory\n```\n\nLANGUAGE: nu\nCODE:\n```\nsome_directory\n```\n\n----------------------------------------\n\nTITLE: Basic Command Signature in Nushell\nDESCRIPTION: Shows the basic command signature for the polars str-strip-chars command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-strip-chars.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars str-strip-chars {flags} (pattern)\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Custom Prompt in Nushell\nDESCRIPTION: Example showing how to create a colored prompt using the ansi command to change the prompt color to blue.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-30-nushell_0_16_0.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconfig --set [prompt \"echo $(ansi blue) '> '\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Heterogeneous Lists with 'any' Type in Nushell\nDESCRIPTION: Shows how a list in Nushell can contain elements of different types, resulting in a list type annotation of list<any>. The example creates a list with boolean, integer, and string values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/any.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nlet various = [ true false 42 'Nushell' ]\n$various | describe\n# =>list<any>\n```\n\n----------------------------------------\n\nTITLE: Counting Occurrences with uniq --count in Nushell\nDESCRIPTION: Demonstrates using the '--count' flag to return a table of distinct values along with the count of their occurrences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 2] | uniq --count\n╭───┬───────┬───────╮\n│ # │ value │ count │\n├───┼───────┼───────┤\n│ 0 │     1 │     1 │\n│ 1 │     2 │     2 │\n╰───┴───────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Filling a Number on the Left Side\nDESCRIPTION: This code example fills a number on the left side to a specified width with a chosen character. It demonstrates the use of the 'fill' command with right alignment for numeric values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/fill.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | fill --alignment right --character '0' --width 5\n00001\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean to Binary in Nushell\nDESCRIPTION: This code snippet illustrates how to convert a boolean value into a binary primitive. The conversion results in an output displaying the length and hex values indicating the binary representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_binary.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> true | into binary\nLength: 8 (0x8) bytes | printable whitespace ascii_other non_ascii\n00000000:   01 00 00 00  00 00 00 00                             •0000000\n\n```\n\n----------------------------------------\n\nTITLE: Processing GetEnvVars Engine Call in JSON\nDESCRIPTION: Example of a GetEnvVars engine call to retrieve all environment variables from the caller's scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 9,\n    \"id\": 72,\n    \"call\": \"GetEnvVars\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutable Variable Closure Limitations\nDESCRIPTION: Illustrates limitations of mutable variables in closures and nested definitions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n# naive method to count number of elements in a list\nmut x = 0\n\n[1 2 3] | each { $x += 1 }   # error: $x is captured in a closure\n```\n\n----------------------------------------\n\nTITLE: Searching Help in Nushell\nDESCRIPTION: Demonstrates the new help search functionality in Nushell 0.36, allowing users to search for commands by keyword using the 'help -f' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-24-nushell_0_36.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> help -f string\n────┬──────────────────────────┬────────────────────────────────────────────────┬─────────────\n #  │           name           │                     usage                      │ extra_usage\n────┼──────────────────────────┼────────────────────────────────────────────────┼─────────────\n  0 │ ansi strip               │ strip ansi escape sequences from string        │\n  1 │ build-string             │ Builds a string from the arguments.            │\n  2 │ dataframe concatenate    │ [Series] Concatenates strings with other array │\n  3 │ dataframe contains       │ [Series] Checks if a pattern is contained in a │\n    │                          │ string                                         │\n  4 │ dataframe replace        │ [Series] Replace the leftmost (sub)string by a │\n    │                          │ regex pattern                                  │\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Select Command Signature\nDESCRIPTION: Shows the basic command syntax for the select command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/select.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> select {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Merge deep Command Signature\nDESCRIPTION: The basic syntax and signature for the merge deep command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge_deep.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> merge deep {flags} (value)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'detect columns' Command in Nushell\nDESCRIPTION: Shows how to use the new 'detect columns' command to convert text output from the 'df' command into a structured Nushell table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-11-16-nushell_0_40.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> df\nFilesystem     1K-blocks      Used Available Use% Mounted on\nudev             8108824         0   8108824   0% /dev\ntmpfs            1631284      2068   1629216   1% /run\n/dev/nvme1n1p2 490691512 346066860 119629172  75% /\ntmpfs            8156408    251332   7905076   4% /dev/shm\ntmpfs               5120         4      5116   1% /run/lock\ntmpfs            8156408         0   8156408   0% /sys/fs/cgroup\n/dev/nvme0n1p1    508932    211684    297248  42% /boot/efi\ntmpfs            1631280       128   1631152   1% /run/user/1000\n/dev/nvme0n1p2 238810780 136867812  89742316  61% /media/sophiajt/Data\n```\n\nLANGUAGE: nu\nCODE:\n```\n> df | detect columns\n───┬────────────────┬───────────┬───────────┬───────────┬──────┬────────────────┬────────────────\n # │   Filesystem   │ 1K-blocks │   Used    │ Available │ Use% │    Mounted     │       on\n───┼────────────────┼───────────┼───────────┼───────────┼──────┼────────────────┼────────────────\n 0 │ udev           │ 8108824   │ 0         │ 8108824   │ 0%   │ /dev           │\n 1 │ tmpfs          │ 1631284   │ 2068      │ 1629216   │ 1%   │ /run           │\n 2 │ /dev/nvme1n1p2 │ 490691512 │ 346067044 │ 119628988 │ 75%  │ /              │\n 3 │ tmpfs          │ 8156408   │ 251332    │ 7905076   │ 4%   │ /dev/shm       │\n 4 │ tmpfs          │ 5120      │ 4         │ 5116      │ 1%   │ /run/lock      │ /run/lock\n 5 │ tmpfs          │ 8156408   │ 0         │ 8156408   │ 0%   │ /sys/fs/cgroup │ /sys/fs/cgroup\n 6 │ /dev/nvme0n1p1 │ 508932    │ 211684    │ 297248    │ 42%  │ /boot/efi      │ /boot/efi\n 7 │ tmpfs          │ 1631280   │ 128       │ 1631152   │ 1%   │ /run/user/1000 │ /run/user/1000\n 8 │ /dev/nvme0n1p2 │ 238810780 │ 136867812 │ 89742316  │ 61%  │ /media/st/Data │ /media/st/Data\n───┴────────────────┴───────────┴───────────┴───────────┴──────┴────────────────┴────────────────\n```\n\n----------------------------------------\n\nTITLE: Parsing String as Script in Nushell\nDESCRIPTION: Illustrates how to use nu-check to parse a string as a script directly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-check.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> $'two(char nl)lines' | nu-check\n```\n\n----------------------------------------\n\nTITLE: Coercing List of Integers and Floats to Floats using Nushell\nDESCRIPTION: Convert a list containing both integers and floating point numbers into a list of floats using Nushell. This operation requires the `into float` command, which transforms each element in the list into a float type. The result is a list with all integers and floating points converted to floats.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_float.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [4 -5.9] | into float\n╭───┬───────╮\n│ 0 │  4.00 │\n│ 1 │ -5.90 │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated Custom Commands\nDESCRIPTION: Example of custom commands with type annotations for parameters, showing type checking functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef add [x:int, y] {\n    = $x + $y\n}\n\nadd \"bob\" 4\n```\n\n----------------------------------------\n\nTITLE: Join Path with Absolute Path\nDESCRIPTION: Example showing how to use absolute paths starting with '/'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_join.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/viking' | path join / folder\n/folder\n```\n\n----------------------------------------\n\nTITLE: Comparing File Redirection in Bash and Nushell\nDESCRIPTION: Demonstrates the difference between Bash's > redirection operator and Nushell's save command, while also showing how > is used for comparisons in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho \"hello\" > output.txt\ntest 4 -gt 7\necho $?\n```\n\nLANGUAGE: nu\nCODE:\n```\n4 > 10\n# => false\n```\n\nLANGUAGE: nu\nCODE:\n```\n\"hello\" | save output.txt\n```\n\n----------------------------------------\n\nTITLE: Output Newline Character\nDESCRIPTION: Example showing how to output a newline character using the char command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/char.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> char newline\n\n\n```\n\n----------------------------------------\n\nTITLE: Rotate 2x3 Table Clockwise in Nushell\nDESCRIPTION: This example shows how to rotate a 2x3 table clockwise using the `rotate` command in Nushell. The resulting table's columns are reordered to represent the clockwise rotation of the original table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rotate.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\n> [[a b]; [1 2] [3 4] [5 6]] | rotate\n╭───┬─────────┬─────────┬─────────┬─────────╮\n│ # │ column0 │ column1 │ column2 │ column3 │\n├───┼─────────┼─────────┼─────────┼─────────┤\n│ 0 │       5 │       3 │       1 │ a       │\n│ 1 │       6 │       4 │       2 │ b       │\n╰───┴─────────┴─────────┴─────────┴─────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Rotating an Integer Right by 2 Bits in Nushell\nDESCRIPTION: Example showing how to rotate a number (17) right by 2 bits, resulting in 68.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_ror.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 17 | bits ror 2\n68\n```\n\n----------------------------------------\n\nTITLE: Decoding Arbitrary Base64 Data in Nushell\nDESCRIPTION: Example demonstrating decoding of arbitrary Base64 data with hex output display.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base64.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> \"/w==\" | decode base64\nLength: 1 (0x1) bytes | printable whitespace ascii_other non_ascii\n00000000:   ff                                                   ×\n```\n\n----------------------------------------\n\nTITLE: History Menu Example Usage in Nushell\nDESCRIPTION: Example showing how the history menu displays and allows quick selection of previous commands. Demonstrates the menu's display format and numbering system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\n>\n0: ls | where size > 10MiB\n1: ls | where size > 20MiB\n2: ls | where size > 30MiB\n3: ls | where size > 40MiB\n```\n\n----------------------------------------\n\nTITLE: Running a specific command in Nushell Docker container\nDESCRIPTION: This command runs a specific command within a Nushell Docker container, removing the container after execution. In this example, it lists files in `/usr/bin` that are larger than 10KB.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n\"docker run --rm ghcr.io/nushell/nushell:latest-alpine -c \\\"ls /usr/bin | where size > 10KiB\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Split List Command Signature\nDESCRIPTION: The basic syntax and signature for the split list command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_list.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> split list {flags} (separator)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Error Handling in Nushell\nDESCRIPTION: Shows how Nushell 0.76 improves error messages for invalid string escapes, providing more specific feedback on the exact issue.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-02-21-nushell_0_76.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"bad: \\z\"\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Pattern Matching in Nushell\nDESCRIPTION: Example showing how to perform a case-insensitive search for files and folders that begin with c.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> glob \"(?i)c*\"\n\n```\n\n----------------------------------------\n\nTITLE: Nushell Panic Example Usage\nDESCRIPTION: Example demonstrating how to use the panic command with a custom message to trigger a shell panic.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/panic.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> panic 'This is a custom panic message'\n```\n\n----------------------------------------\n\nTITLE: Modifying PATH in Nushell\nDESCRIPTION: Commands to add new directories to the PATH variable using prepend command and saving to config.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho $nu:path | prepend \"/my/new/directory\" | config --set_into path\n```\n\nLANGUAGE: shell\nCODE:\n```\necho $nu.path | prepend \"/my/new/directory\" | config set_into path\n```\n\n----------------------------------------\n\nTITLE: Create Characters from Integer Codepoints\nDESCRIPTION: Example demonstrating how to create characters from integer codepoint values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/char.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> char --integer (0x60 + 1) (0x60 + 2)\nab\n```\n\n----------------------------------------\n\nTITLE: Plugin Garbage Collector Configuration in Nushell\nDESCRIPTION: Configuration settings for the plugin garbage collector including default and plugin-specific settings\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_18\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.plugin_gc = {\n    default: {\n        enabled: true\n        stop_after: 10sec\n    }\n    plugins: {\n        gstat: {\n            stop_after: 1min\n        }\n        inc: {\n            stop_after: 0sec\n        }\n        example: {\n            enabled: false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP PATCH with Custom Headers\nDESCRIPTION: Send an HTTP PATCH request with custom headers\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_patch.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nhttp patch --headers [my-header-key my-header-value] https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: View Span Example Usage in Nushell\nDESCRIPTION: Example demonstrating how to use the view span command with debug --raw to view source code spans. The example uses placeholder values 1 and 2 for demonstration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_span.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> some | pipeline | or | variable | debug --raw; view span 1 2\n```\n\n----------------------------------------\n\nTITLE: Importing a list of definitions from a module\nDESCRIPTION: This snippet demonstrates how to selectively import a list of definitions from a module (e.g., 'from ndjson' and 'to ndjson' from std/formats).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nuse std/formats [ 'from ndjson' 'to ndjson' ]\n```\n\n----------------------------------------\n\nTITLE: URL Parse Command Signature in Nushell\nDESCRIPTION: Shows the command signature for the url parse command which accepts flags and optional rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_parse.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> url parse {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Variable Mutation in Nushell\nDESCRIPTION: Demonstrates the new mutable variable functionality using the mut keyword and mutation within blocks.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 1\n$x = $x + 100\nprint $x\n```\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 1\nif true {\n    $x += 1000\n}\nprint $x\n```\n\n----------------------------------------\n\nTITLE: Using Nushell glob Command Signature\nDESCRIPTION: The signature for the glob command showing its basic syntax with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> glob {flags} (glob)\n```\n\n----------------------------------------\n\nTITLE: Filling a Number on Both Sides\nDESCRIPTION: This snippet illustrates filling a number on both sides to a predefined width with a specific character. It utilizes the 'fill' command with center alignment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/fill.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 1.1 | fill --alignment center --character '0' --width 5\n01.10\n```\n\n----------------------------------------\n\nTITLE: Using from tsv with Flexible Columns and No Headers\nDESCRIPTION: Shows how to parse TSV data with variable number of columns per row and without treating the first row as headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_tsv.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"value 1\nvalue 2\tdescription 2\" | from tsv --flexible --noheaders\n```\n\n----------------------------------------\n\nTITLE: Using Def Wrapped Commands in Nushell\nDESCRIPTION: This snippet shows how to use `def --wrapped` in Nushell to pass all arguments to another command without creating a help page. This requires Nushell version 0.87.1 or later.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\ndef --wrapped foo [...rest] { echo $rest }\nfoo --help -h\n```\n\nLANGUAGE: nushell\nCODE:\n```\n─┬──────\n0│--help\n1│-h\n─┴──────\n```\n\n----------------------------------------\n\nTITLE: Launching Nushell Without Standard Library\nDESCRIPTION: Command to start Nushell without loading the standard library, useful for performance optimization\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-04-25-nushell_0_79.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nnu --no-std-lib\n```\n\n----------------------------------------\n\nTITLE: Decoding an Encoded String using NuShell\nDESCRIPTION: This snippet shows how to decode a base32hex encoded string using the decode command without any specific options or flags. It illustrates standard decoding functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base32hex.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> \"D1KG====\" | decode base32hex | decode\n```\n\n----------------------------------------\n\nTITLE: Changing Directory Without cd Command\nDESCRIPTION: Demonstrates Nushell's ability to change directory by directly specifying path\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nsome_directory\n```\n\n----------------------------------------\n\nTITLE: Nushell File Redirection Syntax\nDESCRIPTION: Current Nushell implementation (as of 0.72) for file redirection operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/philosophy_0_80.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ncat foo.txt out> bar.txt\ncat foo.txt err> bar.txt\n```\n\n----------------------------------------\n\nTITLE: Converting Between String and Glob Types in Nushell\nDESCRIPTION: Demonstrates the difference between using a string variable and a glob variable, showing how type annotation affects behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet s = \"a*c.txt\"         # a string type.\nopen $s                   # opens a file literally named `a*c.txt`\n\nlet g: glob = \"a*c.txt\"   # a glob type.\nopen $g                   # opens files matching the glob pattern, e.g: `abc.txt`, `aac.txt`\n```\n\n----------------------------------------\n\nTITLE: Nushell MessagePack Compression Command Signature\nDESCRIPTION: Command signature for converting values to brotli-compressed MessagePack format with optional flags for compression quality, window size, and serialization settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_msgpackz.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> to msgpackz {flags}\n```\n\n----------------------------------------\n\nTITLE: Sending Hello Message - Nu Plugin Protocol [JSON]\nDESCRIPTION: Demonstrates how to construct a `Hello` message in JSON format for the Nu plugin, which includes protocol and versioning information necessary for the initial communication handshake. The message must specify the protocol as `nu-plugin` and include a semver-compatible version. Additionally, it lists supported features that the plugin can handle.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hello\": {\n    \"protocol\": \"nu-plugin\",\n    \"version\": \"0.94.0\",\n    \"features\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell with XDG_CONFIG_HOME\nDESCRIPTION: This section outlines how Nushell utilizes the XDG_CONFIG_HOME environment variable to determine its configuration directory, and emphasizes the requirement for setting this variable prior to launching Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Splitting Strings in C#\nDESCRIPTION: Demonstrates how to split strings using `Split` in C#. This is equivalent to the `split_by` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\n\"Split\"\n```\n\n----------------------------------------\n\nTITLE: Signature of 'first' Command in Nushell\nDESCRIPTION: The signature shows the basic syntax for using the 'first' command in Nushell, including flags and the 'rows' parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/first.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> first {flags} (rows)\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Date and Time\nDESCRIPTION: This snippet demonstrates the `date now` command, which provides the current date and time. The result is intended to be displayed to the user.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"date now\"\n```\n\n----------------------------------------\n\nTITLE: Setting Table Literal Metadata\nDESCRIPTION: Example showing how to set datasource-ls metadata on a table literal containing file information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata_set.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[name color]; [Cargo.lock '#ff0000'] [Cargo.toml '#00ff00'] [README.md '#0000ff']] | metadata set --datasource-ls\n```\n\n----------------------------------------\n\nTITLE: Roll Left Command Signature\nDESCRIPTION: Basic command signature showing the roll left syntax with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_left.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> roll left {flags} \n```\n\n----------------------------------------\n\nTITLE: Rendering a Table with Name Column to Grid in Nushell\nDESCRIPTION: Demonstrates how a table with a 'name' column is rendered in grid format, showing only the values from the 'name' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/grid.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> [[name patch]; [0.1.0 false] [0.1.1 true] [0.2.0 false]] | grid\n0.1.0 │ 0.1.1 │ 0.2.0\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Primitives in Nushell\nDESCRIPTION: Demonstrates how to configure color primitives for various UI elements with custom color settings in Nushell configuration\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/coloring_and_theming.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet config = {\n    color_config: {\n        separator: purple\n        leading_trailing_space_bg: \"#ffffff\"\n        header: gb\n        date: wd\n        filesize: c\n        row_index: cb\n        bool: red\n        int: green\n        duration: blue_bold\n        range: purple\n        float: red\n        string: white\n        nothing: red\n        binary: red\n        cellpath: cyan\n        hints: dark_gray\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Directories to PATH\nDESCRIPTION: Example showing how to add a directory to the PATH environment variable list using the append operation. This appends the specified directory to the end of the PATH list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n$env.path ++= [\"~/.local/bin\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering a List of Records to Grid in Nushell\nDESCRIPTION: Shows how a list of records is displayed in grid format, with each record's 'name' field being used as the display value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/grid.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [{name: 'A', v: 1} {name: 'B', v: 2} {name: 'C', v: 3}] | grid\nA │ B │ C\n\n```\n\n----------------------------------------\n\nTITLE: Taking Binary Bytes\nDESCRIPTION: Example of taking the first two bytes from a binary value in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[01 23 45] | take 2\n```\n\n----------------------------------------\n\nTITLE: Getting Current Location in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `pwd` command in Nushell and PowerShell. In PowerShell, `Get-Location` and `pwd` are used to get the current location.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-Location, pwd\"\n```\n\n----------------------------------------\n\nTITLE: Using a Stored Closure with 'any' in Nushell\nDESCRIPTION: Example demonstrating how to use a variable containing a closure as the predicate for the 'any' command to check for odd numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/any.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> let cond = {|e| $e mod 2 == 1 }; [2 4 1 6 8] | any $cond\ntrue\n```\n\n----------------------------------------\n\nTITLE: Replace Basename Example\nDESCRIPTION: Example showing how to replace the basename of a path with a new filename using the --replace flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_basename.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> '/home/joe/test.txt' | path basename --replace 'spam.png'\n/home/joe/spam.png\n```\n\n----------------------------------------\n\nTITLE: Converting String to Integer in a Table with Nushell\nDESCRIPTION: Demonstrates how to convert a column of string values to integers within a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[num]; ['-5'] [4] [1.5]] | into int num\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell 0.42 using Cargo in Rust\nDESCRIPTION: Command to install Nushell 0.42 using Cargo package manager in Rust. This installs the basic version of Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-12-28-nushell_0_42.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Applying Bitwise XOR to a List of Numbers in Nushell\nDESCRIPTION: This snippet shows how to use the 'bits xor' command to perform bitwise XOR operations on a list of numbers in Nushell, with the result displayed in a table format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_xor.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[8 3 2] | bits xor 2\n```\n\n----------------------------------------\n\nTITLE: Preserve Attributes Copy\nDESCRIPTION: Example of copying while preserving specific file attributes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> cp --preserve [ mode timestamps ] myfile newfile\n```\n\n----------------------------------------\n\nTITLE: Basic Table Transposition\nDESCRIPTION: Example showing how to transpose a table with default column names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/transpose.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[c1 c2]; [1 2]] | transpose\n```\n\n----------------------------------------\n\nTITLE: Replace Binary Patterns in Table Columns\nDESCRIPTION: Example of finding and replacing all occurrences of a binary pattern (0x[11]) with another pattern (0x[13]) in specific columns (ColA, ColC) of a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_replace.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[ColA ColB ColC]; [0x[11 12 13] 0x[14 15 16] 0x[17 18 19]]] | bytes replace --all 0x[11] 0x[13] ColA ColC\n```\n\n----------------------------------------\n\nTITLE: View Span Command Signature in Nushell\nDESCRIPTION: Command signature showing the basic syntax for the view span command with flags and required start/end parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_span.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> view span {flags} (start) (end)\n```\n\n----------------------------------------\n\nTITLE: Executing Internal Nushell Command\nDESCRIPTION: This snippet demonstrates how to run the internal 'ls' command in Nushell. This will use Nushell's built-in implementation of the list directory command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/running_externals.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Abbreviated Path Custom Prompt with Git Branch\nDESCRIPTION: Example of a custom prompt that displays an abbreviated path (first letter of each directory) along with the current git branch in blue.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-30-nushell_0_16_0.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconfig --set [prompt 'echo [ $(ansi green) $(pwd | split row \"/\" | first $(pwd | split row \"/\" | count | = $it - 1 ) | each { str substring \"0,1\" | format \"{$it}/\" } | append $(pwd | split row \"/\" | last ) | str join) $(do -i { git rev-parse --abbrev-ref HEAD | trim | echo $(ansi reset) \"(\" $(ansi blue) $it $(ansi reset) \")\" | str join }) $(ansi reset) \"> \"]']\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Cargo in Rust\nDESCRIPTION: Command to install Nushell using Cargo, the Rust package manager. This installs the basic version of Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-30-nushell_0_29.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Converting Record to URL with Query Parameters in Nushell\nDESCRIPTION: This example demonstrates how to use the 'url join' command to convert a record containing URL components, including query parameters, into a complete URL string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_join.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n{\n        \"scheme\": \"http\",\n        \"username\": \"\",\n        \"password\": \"\",\n        \"host\": \"www.pixiv.net\",\n        \"port\": \"\",\n        \"path\": \"/member_illust.php\",\n        \"query\": \"mode=medium&illust_id=99260204\",\n        \"fragment\": \"\",\n        \"params\":\n        {\n            \"mode\": \"medium\",\n            \"illust_id\": \"99260204\"\n        }\n    } | url join\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Overlay Example\nDESCRIPTION: Example demonstrating how to create a new empty overlay named 'spam' in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_new.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> overlay new spam\n\n```\n\n----------------------------------------\n\nTITLE: Using Math Ceil Command in Nushell\nDESCRIPTION: Demonstrates the new ceil function in the math command that rounds numbers up to the nearest integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-03-nushell_0_22.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> echo [1.5 2.3 -3.1] | math ceil\n───┬────\n 0 │  2\n 1 │  3\n 2 │ -3\n───┴────\n```\n\n----------------------------------------\n\nTITLE: Using an Overlay in Nushell\nDESCRIPTION: This snippet shows how to activate the 'spam' overlay, which makes the command and variable definitions available in the current scope. It also demonstrates how to list overlays, verifying that 'spam' is now active.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\noverlay use spam\n\nfoo\n# => foo\n\nbar\n# => bar\n\n$env.BAZ\n# => baz\n\noverlay list\n# => ───┬──────\n# =>  0 │ zero\n# =>  1 │ spam\n# => ───┴──────\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Bits String - Nushell\nDESCRIPTION: Example of converting an integer value to a binary string representation padded to 8 places with zeros.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_bits.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 1 | format bits\n00000001\n```\n\n----------------------------------------\n\nTITLE: Converting Filepath to String in Nushell\nDESCRIPTION: Demonstrates converting a filepath obtained from 'ls' to a string representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n> ls Cargo.toml | get name | into string\n\n```\n\n----------------------------------------\n\nTITLE: Generating 5-Minute Periods Starting January 1, 2020\nDESCRIPTION: This example shows how to use the 'seq date' command to generate the first five 5-minute periods starting from January 1, 2020, with a custom output format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --begin-date '2020-01-01' --periods 5 --increment 5min --output-format '%Y-%m-%d %H:%M:%S'\n```\n\n----------------------------------------\n\nTITLE: Defining Module with Environment and Commands in Nushell\nDESCRIPTION: Illustrates a complete Nushell module definition including environment variables, a custom command, and an alias using the new syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n# spam.nu\n\nexport-env {\n    load-env {\n        FOO: 'foo'\n        BAR: 'bar'\n    }\n}\n\nexport def foo [] { 'foo' }\nexport alias bar = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Defining Uname Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'uname' command, indicating it accepts flags as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uname.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> uname {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'attr search-terms' Attribute in Nushell\nDESCRIPTION: Specifies the signature for the 'attr search-terms' attribute, which is used to add search terms to custom commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/attr_search-terms.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> attr search-terms {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Chaining Sort Commands in Nushell\nDESCRIPTION: Illustrates chaining multiple `sort-by` commands to achieve a complex sort order.  This example first sorts by file extension using a regular closure, then sorts by file size using a custom comparison closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nls\n| sort-by { get name | path parse | get extension }\n| sort-by -c {|a, b| $a.size < $b.size }\n```\n\n----------------------------------------\n\nTITLE: Setting Complete History Configuration in Nushell\nDESCRIPTION: Alternative approach to setting history configuration by providing a complete record. This allows setting all history-related values at once.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-04-configuration_preview.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.history = {\n  file_format: sqlite\n  max_size: 1_000_000\n  sync_on_enter: true\n  isolation: true\n}\n```\n\n----------------------------------------\n\nTITLE: Converting nuon strings to structured data in Nushell\nDESCRIPTION: This Nushell snippet demonstrates how to convert a nuon formatted string into a structured table. The command takes a string input and outputs a table representation. It is used within the Nushell environment and requires the string to be in the nuon format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_nuon.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '{ a:1 }' | from nuon\n╭───┬───╮\n│ a │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Executing Date Humanize Command in Nushell\nDESCRIPTION: This snippet demonstrates the usage of the 'date humanize' command in Nushell. It takes a datetime string as input and returns a humanized relative date format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_humanize.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> \"2021-10-22 20:00:12 +01:00\" | date humanize\n```\n\n----------------------------------------\n\nTITLE: Performing Bitwise XOR on Integers in Nushell\nDESCRIPTION: This example demonstrates how to use the 'bits xor' command to perform a bitwise XOR operation on two integers in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_xor.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n2 | bits xor 2\n```\n\n----------------------------------------\n\nTITLE: Signature of 'config reset' Command in Nushell\nDESCRIPTION: The command signature for 'config reset' in Nushell. It shows the basic syntax for using the command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_reset.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> config reset {flags}\n```\n\n----------------------------------------\n\nTITLE: Custom Format Timestamp String Conversion in Nushell\nDESCRIPTION: This snippet illustrates converting a non-standard timestamp string to a datetime using a custom format specification.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '20210227_135540+0000' | into datetime --format '%Y%m%d_%H%M%S%z'\nSat, 27 Feb 2021 13:55:40 +0000 (4 years ago)\n```\n\n----------------------------------------\n\nTITLE: Following Numeric Path on Custom Value via `FollowPathInt`\nDESCRIPTION: This snippet demonstrates how to follow a numeric path on a custom value, resembling an array-type action. The response type can be PipelineData or Error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [\n    0,\n    {\n      \"CustomValueOp\": [\n        {\n          \"item\": {\n            \"name\": \"version\",\n            \"data\": [0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0]\n          },\n          \"span\": {\n            \"start\": 90,\n            \"end\": 96\n          }\n        },\n        {\n          \"FollowPathInt\": {\n            \"item\": 0,\n            \"span\": {\n              \"start\": 320,\n              \"end\": 321\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arctangent of -1 in Degrees using Nushell\nDESCRIPTION: Example of using the 'math arctan' command with the '--degrees' flag to calculate the arctangent of -1 in Nushell. The result is returned in degrees.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arctan.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> -1 | math arctan --degrees\n-45\n```\n\n----------------------------------------\n\nTITLE: Database Query Operations - Before Unification (Nushell)\nDESCRIPTION: Example showing the previous syntax for database operations in Nushell before command unification. This demonstrates database selection, table access, and condition filtering using the db prefix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-07-05-nushell-0_65.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nopen myfile.db\n| db select a\n| db from table_1\n| db where ((db col a) > 1 | db and ((db col a) < 10))\n```\n\n----------------------------------------\n\nTITLE: Command to List Files in NuShell\nDESCRIPTION: This snippet shows how to use the 'ls' command in NuShell to list files in a directory, similarly to Bash.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_bash.md#2025-04-19_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n`ls`                                                          | Lists the files in the current directory\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`ls <dir>`                                                    | Lists the files in the given directory\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`ls pattern*`                                                 | Lists files that match a given pattern\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`ls --long --all` or `ls -la`                                 | List files with all available information, including hidden files\n```\n\n----------------------------------------\n\nTITLE: Splitting and Trimming Parsed Data - Nushell\nDESCRIPTION: This snippet further processes the contents of a text file by splitting rows using a delimiter and trimming excess whitespace. It demonstrates how to transform raw data into a more usable structured format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/loading_data.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nopen people.txt | lines | split column \"|\"\n# => ───┬──────────┬───────────┬───────────\n# =>  # │ column1  │ column2   │ column3\n# => ───┼──────────┼───────────┼───────────\n# =>  0 │ Octavia  │  Butler   │  Writer\n# =>  1 │ Bob      │  Ross     │  Painter\n# =>  2 │ Antonio  │  Vivaldi  │  Composer\n# => ───┴──────────┴───────────┴───────────\n```\n\n----------------------------------------\n\nTITLE: Importing with Context Information\nDESCRIPTION: This code snippet shows how to import history with additional context about the command execution, such as the current working directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/history_import.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[ command_line cwd ]; [ foo /home ]] | history import\n\n```\n\n----------------------------------------\n\nTITLE: Creating an is-in expression in Nushell using polars\nDESCRIPTION: This example demonstrates how to create a polars is-in expression to check if values in column 'a' are contained in a specified list [one two], adding the result as a new column 'a_in'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-in.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet df = ([[a b]; [one 1] [two 2] [three 3]] | polars into-df);\n            $df | polars with-column (polars col a | polars is-in [one two] | polars as a_in)\n```\n\n----------------------------------------\n\nTITLE: Generating Non-negative Random Integer in Nushell\nDESCRIPTION: Example of generating a non-negative random integer using the 'random int' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_int.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> random int\n```\n\n----------------------------------------\n\nTITLE: Metadata Command Signature in Nushell\nDESCRIPTION: The basic syntax for using the metadata command with optional flags and an expression parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> metadata {flags} (expression)\n```\n\n----------------------------------------\n\nTITLE: Processing Error Plugin Call Response in JSON\nDESCRIPTION: Example of an error response for a plugin call. It includes detailed error information with labels, code, URL, and help text.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CallResponse\": [\n    0,\n    {\n      \"Error\": {\n        \"msg\": \"A really bad error occurred\",\n        \"labels\": [\n          {\n            \"text\": \"I don't know, but it's over nine thousand!\",\n            \"span\": {\n              \"start\": 9001,\n              \"end\": 9007\n            }\n          }\n        ],\n        \"code\": \"my_plugin::bad::really_bad\",\n        \"url\": \"https://example.org/my_plugin/error/bad/really_bad.html\",\n        \"help\": \"you can solve this by not doing the bad thing\",\n        \"inner\": [\n          {\n            \"msg\": \"The bad thing\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Polars Collect Command Signature in Nushell\nDESCRIPTION: The signature for the 'polars collect' command which is used to materialize a lazy dataframe into an eager dataframe in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_collect.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars collect {flags} \n```\n\n----------------------------------------\n\nTITLE: Where Command with Size Filtering in Nushell\nDESCRIPTION: This snippet demonstrates the 'where' command with a condition to filter files by size, showcasing Nushell's ability to work with rich data types like file sizes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nwhere size > 10kb\n```\n\n----------------------------------------\n\nTITLE: Converting Table to Plist in Nushell\nDESCRIPTION: Demonstrates converting a simple Nushell table containing a key-value pair into plist format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_plist.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> { a: 3 } | to plist\n\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Nushell\nDESCRIPTION: New XML parsing format using a record-based structure with tag, attributes, and content fields. Demonstrates converting XML to Nushell data structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-03-14-nushell_0_77.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n'<release>\\n    <project repo=\"https://github.com/nushell/nushell\">nushell</project>\\n    <version>0.77</version>\\n    <message>Now with better xml!</message>\\n  </release>' | from xml\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `transpose` to Python's `zip(*matrix)`\nDESCRIPTION: Explains how to transpose a matrix (list of lists) in Python using `zip(*matrix)`. This provides the equivalent functionality of the `transpose` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"zip(*matrix)\"\n```\n\n----------------------------------------\n\nTITLE: Complete Command Signature in Nu Shell\nDESCRIPTION: Shows the command signature for the complete command that captures external command outputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/complete.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> complete {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating a Record with Space-Separated Key-Value Pairs in Nushell\nDESCRIPTION: Shows how to create a record using space-separated key-value pairs when unambiguous. The record contains 'name' and 'rank' fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/record.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> {name: \"Sam\" rank: 10}\n```\n\n----------------------------------------\n\nTITLE: Using Stored Condition with Take Until in Nushell\nDESCRIPTION: Shows how to use 'take until' with a stored condition. The condition is defined separately and then used in the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_until.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> let cond = {|x| $x > 0 }; [-1 -2 9 1] | take until $cond\n```\n\n----------------------------------------\n\nTITLE: Split List with Multiple Occurrences\nDESCRIPTION: Example showing how to split a list with multiple occurrences of the separator 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_list.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [a, b, c, d, a, e, f, g] | split list a\n```\n\n----------------------------------------\n\nTITLE: Last Command with Range\nDESCRIPTION: Example demonstrating how to get the last item from a numeric range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/last.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 1..3 | last\n3\n```\n\n----------------------------------------\n\nTITLE: Record Values Example - Nushell\nDESCRIPTION: Example showing how to extract values from a simple record into a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/values.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> { mode:normal userid:31415 } | values\n╭───┬────────╮\n│ 0 │ normal │\n│ 1 │  31415 │\n╰───┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Basic Bytes Starts-With Command Signature in Nushell\nDESCRIPTION: The command signature showing the basic syntax for the bytes starts-with command. It accepts a pattern parameter and optional rest parameters for checking cell paths in data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_starts-with.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes starts-with {flags} (pattern) ...rest\n```\n\n----------------------------------------\n\nTITLE: Complex Split Cell-Path Example in Nushell\nDESCRIPTION: Shows how to split a more complex cell-path containing multiple components including strings, numbers, and nested paths into their individual elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_cell-path.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$.a.b?.1.\"2\".\"c.d\" | split cell-path\n```\n\n----------------------------------------\n\nTITLE: String Manipulation in C#\nDESCRIPTION: Demonstrates how to use string functions and the `String` class in C#. This is equivalent to the `str` command in Nushell for performing various string operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\n\"String class\"\n```\n\n----------------------------------------\n\nTITLE: Parsing with Regex Pattern\nDESCRIPTION: Shows how the simple pattern is interpreted using regex syntax internally.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/parse.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"hi there\" | parse --regex '(?s)\\A(?P<foo>.*?) (?P<bar>.*?)\\z'\n```\n\n----------------------------------------\n\nTITLE: Nushell 'to' Command Signature\nDESCRIPTION: The signature for the 'to' command in Nushell which shows how to invoke the command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> to {flags} \n```\n\n----------------------------------------\n\nTITLE: Nushell Configuration for Error Display\nDESCRIPTION: This code snippet shows the configuration settings in Nushell to suppress error messages for non-zero exit codes in the REPL.  It should be added to the `$env.config` file. The snippet defines settings for displaying errors related to exit codes and termination signals.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-09-17-nushell_0_98_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"display_errors: {\\n    exit_code: false\\n    # Core dump errors are always printed, and SIGPIPE never triggers an error.\\n    # The setting below controls message printing for termination by all other signals.\\n    termination_signal: true\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Polars Filter Command Signature\nDESCRIPTION: The basic signature for the polars filter command showing required parameters\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_filter.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars filter {flags} (filter expression)\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator with Records in Nushell\nDESCRIPTION: Demonstrates using the spread operator to create a new record while copying fields from an existing one.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nlet first_record = { name: \"Sam\", rank: 10 }\n{\n    ...$first_record\n    title: \"Mayor\"\n  }\n```\n\n----------------------------------------\n\nTITLE: to toml Command Signature for Nushell\nDESCRIPTION: The command signature showing how to use the 'to toml' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_toml.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> to toml {flags} \n```\n\n----------------------------------------\n\nTITLE: Float Division in Nushell\nDESCRIPTION: Shows floating-point division in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n2.5 / 5.0\n# => 0.5\n```\n\n----------------------------------------\n\nTITLE: Running Nu Scripts Example\nDESCRIPTION: Demonstrates how to create and execute a simple Nushell script file that prints 'hello' and 'world' on separate lines.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-02-18-nushell-0_10_0.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n> cat hello_world.nu\necho hello\necho world\n\n> nu hello_world.nu\nhello\nworld\n```\n\n----------------------------------------\n\nTITLE: Nushell `in` operator\nDESCRIPTION: Checks if a value is present within a list using the `in` operator. The `=` prefix enables the math mode to evaluate the expression.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/math.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n= 1 in [1 2 3]\n# => true\n```\n\n----------------------------------------\n\nTITLE: Nushell uniq-by Command Signature\nDESCRIPTION: The basic syntax for the uniq-by command showing how to use it with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq-by.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> uniq-by {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Record Fields Using each in Nushell\nDESCRIPTION: This example demonstrates how to iterate over each key-value pair in a record by first transposing the record to a table with key-value columns. It retrieves the first element from 'ls' output, transposes it, and then uses 'each' to format each field with an interpolated string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/filters/each-par-each.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls\n| get 0\n| transpose key value\n| inspect\n| each {|kv|\n    $'The value of the \"($kv.key) field is \"($kv.value)\"'\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Nushell environment variables\nDESCRIPTION: This snippet shows how to access various Nushell environment variables using the $nu variable, which now includes values previously part of 'env'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-10-nushell_0_11_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\necho $nu.home-dir $nu.temp-dir $nu.config-path $nu.history-path\n```\n\n----------------------------------------\n\nTITLE: Nushell create submodule with `export module`\nDESCRIPTION: This code shows how to create a submodule definition with `export module`. It creates a module called `my-utils` by creating a `mod.nu` file. This version of `my-utils/mod.nu` will contain the definition of the submodules `increment` and `range-into-list`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nexport module ./increment.nu\nexport module ./range-into-list.nu\n```\n\n----------------------------------------\n\nTITLE: List Mapping in Nushell\nDESCRIPTION: Demonstrates transforming list elements in Nushell using the each command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n'[1, 2, 3, 4, 5]'\n| from json\n| each { |x| $x * 2 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks in Nushell\nDESCRIPTION: This snippet demonstrates how to configure various hooks within the Nushell configuration file. It shows how to define `pre_prompt`, `pre_execution`, and `env_change` hooks using blocks of code that execute when their respective triggers are activated. The `env_change` hook example shows how to capture the `before` and `after` values of the `PWD` environment variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = {\n    # ...other config...\n\n    hooks: {\n        pre_prompt: { print \\\"pre prompt hook\\\" }\n        pre_execution: { print \\\"pre exec hook\\\" }\n        env_change: {\n            PWD: {|before, after| print $\\\"changing directory from ($before) to ($after)\\\" }\n        }\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Module for Overlays in Nushell\nDESCRIPTION: Defines a Nushell module named 'spam' that exports a custom command 'foo', an alias 'bar', and an environment variable 'BAZ'. This module will be used as the basis for overlay examples.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam {\n    export def foo [] {\n        \"foo\"\n    }\n\n    export alias bar = \"bar\"\n\n    export env BAZ {\n        \"baz\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Shadowing Aliases in Nushell\nDESCRIPTION: Nushell enhances its 'alias' feature allowing new aliases to shadow previous ones. The system now correctly handles aliases named identically to commands and maintains backward compatibility with the old alias format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-04-04-nushell_0_78.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> alias l = ls -a\n> alias l = ls -l\n```\n\nLANGUAGE: nu\nCODE:\n```\n> alias ls = ls -a\n```\n\n----------------------------------------\n\nTITLE: Filtering Table Rows in Nushell\nDESCRIPTION: Shows how to filter rows of a table according to a condition using the 'filter' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/filter.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[{a: 1} {a: 2}] | filter {|x| $x.a > 1}\n```\n\n----------------------------------------\n\nTITLE: Preserving Environment Variables Inside Hooks\nDESCRIPTION: This example demonstrates how environment variables defined within hook blocks are preserved in Nushell. Adjust the hooks to manage environmental settings efficiently within blocks using `upsert` for configuration updates.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks {\n    pre_prompt: { $env.SPAM = \"eggs\" }\n})\n\n$env.SPAM\n# => eggs\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Plugin in Nushell\nDESCRIPTION: Example of adding the 'nu_plugin_inc' plugin from the current directory or $env.NU_PLUGIN_DIRS to the default plugin registry file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_add.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> plugin add nu_plugin_inc\n```\n\n----------------------------------------\n\nTITLE: Using Environment Shorthands with Quoted Strings in Nushell\nDESCRIPTION: Shows how to pass a string as a value in environment shorthands in Nushell commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-09-nushell_0_15_0.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> FOO=\"My Bar\" command arg1 arg2\n```\n\n----------------------------------------\n\nTITLE: Getting Terminal Height in Nushell\nDESCRIPTION: Illustrates how to extract just the rows (height) from the 'term size' command output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_size.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> (term size).rows\n```\n\n----------------------------------------\n\nTITLE: Natural Order String Sorting\nDESCRIPTION: Example of sorting alphanumeric strings in natural order using the natural flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> [foo1 foo10 foo9] | sort -n\n```\n\n----------------------------------------\n\nTITLE: Converting Directory Listing with Custom Table Name\nDESCRIPTION: Example of converting the output of the 'ls' command into a SQLite database with a custom table name specified using the -t flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_sqlite.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ls | into sqlite my_ls.db -t my_table\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Path Retrieval in Nushell\nDESCRIPTION: Demonstrates the default case-insensitive behavior when retrieving environment variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> $env | get paTH\n\n```\n\n----------------------------------------\n\nTITLE: Basic ANSI Command Signature\nDESCRIPTION: The basic syntax for using the ansi command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ansi {flags} (code)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'merge' Command in Nu Shell\nDESCRIPTION: Specifies the command signature for the 'merge' command, including flags and value parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> merge {flags} (value)\n```\n\n----------------------------------------\n\nTITLE: Detecting Columns with Guessing\nDESCRIPTION: The 'detect columns --guess' command uses a histogram approach to enhance detection of fixed-width column boundaries, improving output accuracy.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\ndetect columns --guess\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Repository Contributors with Nushell Commands\nDESCRIPTION: This snippet demonstrates fetching contributor information from the Nushell blog repository using the GitHub API, then processing and displaying the results in Nushell's tabular format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-31-happy-nu-year-2020.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfetch https://api.github.com/repos/nushell/blog/stats/contributors | get author | sort-by login | get login\n```\n\n----------------------------------------\n\nTITLE: Prepending Range\nDESCRIPTION: Example demonstrating how to prepend a range of numbers to a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/prepend.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> [3 4] | prepend 0..2\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Dataframe Operations in Nushell\nDESCRIPTION: Shows how to perform grouping and aggregation operations on a large dataframe in Nushell, demonstrating its performance capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-07-13-nushell_0_34.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n# process.nu\nlet df = (dataframe open Data7602DescendingYearOrder.csv)\nlet res = ($df | dataframe group-by year | dataframe aggregate sum | dataframe select geo_count)\n$res\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> benchmark {source process.nu}\n\n───┬───────────────────\n # │     real time\n───┼───────────────────\n 0 │ 557ms 658us 500ns\n───┴───────────────────\n```\n\n----------------------------------------\n\nTITLE: Command Signature for str kebab-case in Nushell\nDESCRIPTION: Shows the command signature for the str kebab-case command, which is used to convert strings to kebab-case format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_kebab-case.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> str kebab-case {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Processing GetPluginConfig Engine Call in JSON\nDESCRIPTION: Example of a GetPluginConfig engine call to retrieve the configuration for a specific plugin from the Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 3,\n    \"id\": 8,\n    \"call\": \"GetPluginConfig\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Joining DataFrames in Nushell\nDESCRIPTION: Demonstrates how to join two DataFrames using single and multiple columns as join keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\n$df_1 | polars join $df_2 int_1 int_1\n```\n\n----------------------------------------\n\nTITLE: Defining Math ArcSinh Command Signature\nDESCRIPTION: Shows the command signature for the math arcsinh function in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arcsinh.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math arcsinh {flags} \n```\n\n----------------------------------------\n\nTITLE: Type Description Examples in Nushell\nDESCRIPTION: Demonstrates the use of the describe command to get type information for different data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/pattern_matching.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n{one: 1 two: 2} | describe\n```\n\nLANGUAGE: nushell\nCODE:\n```\n[{a: 1 b: 2} {a: 2 b:3 }] | describe\n```\n\n----------------------------------------\n\nTITLE: Taking Table Rows\nDESCRIPTION: Example of taking the first two rows from a table in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[editions]; [2015] [2018] [2021]] | take 2\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Databases in Nushell\nDESCRIPTION: Examples of creating SQLite databases from command output in Nushell, showing both default and custom table naming options.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-08-16-nushell-0_67.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n# create a database with a single table named `main`\nls | into sqlite my_ls.db\n\n# same, but name the table `foo`\nls | into sqlite my_ls.db -t foo\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `select` to Python's dictionary comprehension\nDESCRIPTION: Shows how to select specific keys from a dictionary in Python using dictionary comprehension, equivalent to the `select` command in Nushell. This allows for creating a new dictionary with only the desired keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n\"{k:dict[k] for k in keys}\"\n```\n\n----------------------------------------\n\nTITLE: Using Negative Start Index with bytes at in Nushell\nDESCRIPTION: This example demonstrates how to extract the last three bytes from binary data using a negative start index. The output shows the bytes in hexadecimal format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[33 44 55 10 01 13 10] | bytes at (-3)..\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   01 13 10                                             •••\n\n```\n\n----------------------------------------\n\nTITLE: Interleaving without Input and Sorting Results\nDESCRIPTION: This snippet illustrates how to use the 'interleave' command without any initial input streams. The resulting interleaved output is sorted consistently, demonstrating flexibility in data handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/interleave.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> interleave { \"foo\\nbar\\n\" | lines } { \"baz\\nquux\\n\" | lines } | sort\n╭───┬──────╮\n│ 0 │ bar  │\n│ 1 │ baz  │\n│ 2 │ foo  │\n│ 3 │ quux │\n╰───┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Order Reconstruction with Enumerate\nDESCRIPTION: Example showing how to use enumerate and sort-by to maintain order in parallel processing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/par-each.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 1..3 | enumerate | par-each {|p| update item ($p.item * 2)} | sort-by item | get item\n```\n\n----------------------------------------\n\nTITLE: Splitting a String with re\nDESCRIPTION: This snippet illustrates how to split a string into a list of substrings using regular expressions with `re.split` in Python. The `re.split` function takes a regular expression pattern and a string as input. It returns a list of strings, where each string is a substring that was separated by the pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"re.split\"\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Custom Commands\nDESCRIPTION: Shows how to add descriptive comments to command and parameter definitions that will be shown in the help output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\n# A greeting command that can greet the caller\ndef greet [\n  name: string      # The name of the person to greet\n  --age (-a): int   # The age of the person\n] {\n  echo $name $age\n}\n```\n\n----------------------------------------\n\nTITLE: Defining str trim Command Signature in Nushell\nDESCRIPTION: Specifies the command signature for the 'str trim' command, including its flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_trim.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nstr trim {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Chunking Binary Data Example\nDESCRIPTION: Demonstrates chunking binary data into groups of 3 bytes, with the last chunk potentially being smaller.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/chunks.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[11 22 33 44 55 66 77 88] | chunks 3\n╭───┬───────────────╮\n│ 0 │ [17, 34, 51]  │\n│ 1 │ [68, 85, 102] │\n│ 2 │ [119, 136]    │\n╰───┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Unicode Escape in Nushell\nDESCRIPTION: This code snippet demonstrates how Nushell handles invalid unicode escapes within strings. It attempts to use an invalid unicode sequence '\\u{1fbogus}', resulting in a parse error. This highlights Nushell's validation of unicode escape sequences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-02-21-nushell_0_76.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\">\\\"bad: \\\\u{1fbogus}\\\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `range` to Python's `range` type\nDESCRIPTION: Shows the direct equivalent of Nushell's `range` type in Python using the `range` type. This type generates a sequence of numbers, similar to `range` in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n\"range\"\n```\n\n----------------------------------------\n\nTITLE: sys host Command Signature in Nushell\nDESCRIPTION: This snippet shows the signature of the 'sys host' command in Nushell. It indicates that the command can take optional flags but doesn't require any arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_host.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> sys host {flags}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Source Generation Example\nDESCRIPTION: Demonstrates limitations of Nushell's static parsing with dynamic source code generation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n\"print Hello\" | save output.nu\nsource output.nu\n```\n\n----------------------------------------\n\nTITLE: Executing XPath Query with NuShell Plugin\nDESCRIPTION: This code snippet demonstrates how to execute an XPath query on XML data using the 'query xml' command in NuShell. It requires the 'query' plugin, which must be installed and registered. The main parameter 'query' represents the XPath expression to execute, capable of taking any input and producing any output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_xml.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> query xml {flags} (query)\n```\n\n----------------------------------------\n\nTITLE: Listing Last Active Overlay Example\nDESCRIPTION: Example demonstrating how to create a module, use it as an overlay, and list the last activated overlay.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_list.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export def foo [] { \"foo\" } }\n    overlay use spam\n    overlay list | last\nspam\n```\n\n----------------------------------------\n\nTITLE: Using the `interleave` Command in Nushell\nDESCRIPTION: The `interleave` command allows for consuming multiple streams in parallel, producing a combined output stream regardless of the order of input. It is useful for scenarios where output timing varies. Context: Examples illustrate differences in behavior between `interleave` and `zip` commands when processing streams.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-03-05-nushell_0_91_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> seq 1 50 | wrap a | zip { seq 1 50 | wrap b } | flatten\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> seq 1 50 | wrap a | interleave { seq 1 50 | wrap b }\n```\n\nLANGUAGE: nushell\nCODE:\n```\ninterleave ...(\n  (ls projects).name | each { |project|\n    {\n      cd $project\n      make | lines | each { |line| {project: $project, out: $line} }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Empty Item Middle Example\nDESCRIPTION: Illustrates handling of empty items in the middle of a collection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n> \"A{B,,C}\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Experimental Commands in Vue.js\nDESCRIPTION: This Vue.js component computes a list of experimental Nushell commands by filtering and sorting pages from the site. It selects pages with paths containing '/commands/docs/' and having 'experimental' in their categories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/experimental.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('experimental'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Commandline Edit Command Signature\nDESCRIPTION: The base syntax for using the commandline edit command to modify the input buffer. Supports flags for append, insert, and replace operations with a string parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/commandline_edit.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> commandline edit {flags} (str)\n```\n\n----------------------------------------\n\nTITLE: Git Branch Completion Function in Nushell\nDESCRIPTION: Custom completion function for retrieving and formatting git branch names, demonstrating Nushell's external command completion capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-01-nushell_0_59.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"nu-complete git branches\" [] {\n  ^git branch | lines | each { |line| $line | str find-replace \"\\* \" \"\" | str trim }\n}\n```\n\n----------------------------------------\n\nTITLE: AST Minified JSON Example\nDESCRIPTION: Demonstrates getting minified JSON output for the AST.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> ast 'for x in 1..10 { echo $x ' --json --minify\n```\n\n----------------------------------------\n\nTITLE: Basic cd Command Signature in Nushell\nDESCRIPTION: The signature of the cd command in Nushell, showing the command structure with optional flags and path parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cd.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> cd {flags} (path)\n```\n\n----------------------------------------\n\nTITLE: Creating a Record in Nushell\nDESCRIPTION: Example of defining a record (key-value map) in Nushell. The record contains an integer value and a string value, each with its own span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_59\n\nLANGUAGE: nu\nCODE:\n```\n{foo: 5, bar: \"hello nushell\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Record\": {\n    \"val\": {\n      \"foo\": {\n        \"Int\": {\n          \"val\": 42,\n          \"span\": {\n            \"start\": 659813,\n            \"end\": 659814\n          }\n        }\n      },\n      \"bar\": {\n        \"String\": {\n          \"val\": \"hello nushell\",\n          \"span\": {\n            \"start\": 659821,\n            \"end\": 659836\n          }\n        }\n      }\n    },\n    \"span\": {\n      \"start\": 659807,\n      \"end\": 659837\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Installation of Nushell\nDESCRIPTION: Command for installing Nushell using Cargo package manager with optional dataframe feature\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo install nu\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncargo install nu --features=dataframe\n```\n\n----------------------------------------\n\nTITLE: Changing to Home Directory in Nushell\nDESCRIPTION: Example of using cd to navigate to the user's home directory using the tilde shorthand.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cd.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> cd ~\n\n```\n\n----------------------------------------\n\nTITLE: Nushell Math Product Command Signature\nDESCRIPTION: Command signature showing the basic syntax for the math product command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_product.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math product {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting Table to JSON Array in Nushell\nDESCRIPTION: Converts fetched data into a JSON array format using Nushell's to json command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nopen urls.json | get urls | each { |u| http get $u } | to json\n```\n\n----------------------------------------\n\nTITLE: Running sequential commands in Nu\nDESCRIPTION: Runs a command, and if it's successful, runs a second command using the semicolon (';') as a separator.  This allows for executing multiple commands in sequence, where the second command depends on the successful completion of the first.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\n\"command1; command2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in PowerShell\nDESCRIPTION: This snippet shows how to set an environment variable in PowerShell. It sets the environment variable `FOO` to `bar`. This is similar to how environment variables are defined in other shells.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map.md#2025-04-19_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"$env:FOO = 'bar'\"\n```\n\n----------------------------------------\n\nTITLE: Convert integer into cell path in NuShell\nDESCRIPTION: This snippet demonstrates how to convert an integer into a cell path using the `into cell-path` command in NuShell. The input is an integer (5), and the output is the corresponding cell path '$.5'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_cell-path.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\n> 5 | into cell-path\n$.5\n\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with List-of-Records Syntax in Nushell\nDESCRIPTION: Shows how to create a table using Nushell's list-of-records syntax, which is JSON-style. This approach is useful when the table length is not known in advance.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/table.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[{name: \"Sam\", rank: 10}, {name: \"Bob\", rank: 7}]\n# => ╭───┬──────┬──────╮\n# => │ # │ name │ rank │\n# => ├───┼──────┼──────┤\n# => │ 0 │ Sam  │   10 │\n# => │ 1 │ Bob  │    7 │\n# => ╰───┴──────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Using Standard Library Path Helper\nDESCRIPTION: Example of using the standard library's path add utility to prepend directories to the PATH. This gives higher precedence to the added directories and shows how to use path join for proper path construction.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nuse std/util \"path add\"\npath add \"~/.local/bin\"\npath add ($env.CARGO_HOME | path join \"bin\")\n```\n\n----------------------------------------\n\nTITLE: Documenting a Nushell Module\nDESCRIPTION: Example of how to add documentation to a Nushell module using comments at the beginning of the file. This documentation can be viewed using the 'help' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n# A collection of helpful utility functions\n\nexport use ./increment.nu\nexport use ./range-into-list.nu\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Weekly changelog documenting contributions and updates across the Nushell project repositories, including core functionality, documentation, and script additions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-07-22-twin0152.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nushell #152\n\n## Nushell\n\n- zhiburt created [nu-table/ Bump tabled version](https://github.com/nushell/nushell/pull/6097), and [nu-table: Update tests after #6080](https://github.com/nushell/nushell/pull/6082), and [Consider space for single `...` column not enough space](https://github.com/nushell/nushell/pull/6080), and [nu-table: Add a few tests](https://github.com/nushell/nushell/pull/6074), and [nu-table: Fix header style (again 2x)](https://github.com/nushell/nushell/pull/6073), and [nu-table: Add suffix coloring](https://github.com/nushell/nushell/pull/6071)\n- fdncred [enabled find to work on some external streams](https://github.com/nushell/nushell/pull/6094), and [add more shell integration ansi escapes in support of vscode](https://github.com/nushell/nushell/pull/6087), and [enable find to be able to highlight some hits](https://github.com/nushell/nushell/pull/6086)\n- elferherrera added [concat string with lazy expressions](https://github.com/nushell/nushell/pull/6093), and [append string to series](https://github.com/nushell/nushell/pull/6089)\n- merelymyself [added a fair amount of search terms](https://github.com/nushell/nushell/pull/6090), and [make `into string --decimals` add decimals to integer numbers](https://github.com/nushell/nushell/pull/6084), and [add config option to limit external command completions](https://github.com/nushell/nushell/pull/6076)\n- Kangaxx-0 created [`extern` command should be treated as external](https://github.com/nushell/nushell/pull/6083), and [Conditionally disable expansion for external command](https://github.com/nushell/nushell/pull/6014)\n- WindSoilder [made Semicolon stop on error](https://github.com/nushell/nushell/pull/6079)\n- jackos [fixed short-flag completion](https://github.com/nushell/nushell/pull/6067)\n- Mathspy [restored `nu_with_plugins` test macro](https://github.com/nushell/nushell/pull/6065), and [Add plugin CLI argument](https://github.com/nushell/nushell/pull/6064)\n\n## Documentation\n\n- kubouch created [Add hooks documentation](https://github.com/nushell/nushell.github.io/pull/537)\n\n## Nu_Scripts\n\n- Eun created [Use autojump with nushell](https://github.com/nushell/nu_scripts/pull/265)\n```\n\n----------------------------------------\n\nTITLE: Using Semicolon for Multiline Commandlines\nDESCRIPTION: Shows how to use a semicolon to combine multiple commands into a single commandline in Nushell. This example highlights that when multiple commands are processed as one, they fail if dependent on state changes from previous commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/how_nushell_code_gets_run.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ncd spam; source-env foo.nu\n```\n\n----------------------------------------\n\nTITLE: Grouping Trips by ID and Calculating Mean Duration\nDESCRIPTION: Filters trips with 'N' store_and_fwd_flag, groups by ID, calculates mean trip duration, sorts by ID, and displays first 5 results\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/polars_v_pandas_v_nushell.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n$df | polars filter-with ((polars col store_and_fwd_flag) == \"N\") | polars group-by id | polars agg (polars col trip_duration | polars mean) | polars sort-by id | polars first 5 | polars collect\n```\n\n----------------------------------------\n\nTITLE: Running Nushell with Plugins using Command Line Arguments\nDESCRIPTION: This code snippet demonstrates how to run Nushell with a specific set of plugins using the `--plugins` command-line option. This allows you to specify the plugin executable files without needing to add them to the registry.  The plugin paths must be in a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\nnu --plugins '[./my_plugins/nu_plugin_cool]'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command with Rest Parameters in Nushell\nDESCRIPTION: Demonstrates how to define a custom command 'foo' with a flag, required parameter, optional parameter, and rest parameters. The command returns the parameters as a NUON formatted list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\ndef foo [ --flag req opt? ...args ] { [$flag, $req, $opt, $args] | to nuon }\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean to Float using Nushell\nDESCRIPTION: Demonstrates the conversion of a boolean value into a float in Nushell using the `into float` command. The command converts `true` to `1.0` and `false` to `0.0`, which is the output of the conversion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_float.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> true | into float\n1\n```\n\n----------------------------------------\n\nTITLE: Configuring History Menu in Nushell\nDESCRIPTION: Configuration settings for the Nushell history menu, which provides access to command history. Includes settings for layout, pagination, and styling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n\n    menus = [\n      ...\n      {\n        name: history_menu\n        only_buffer_difference: true # Search is done on the text written after activating the menu\n        marker: \"? \"                 # Indicator that appears with the menu is active\n        type: {\n            layout: list             # Type of menu\n            page_size: 10            # Number of entries that will presented when activating the menu\n        }\n        style: {\n            text: green                   # Text style\n            selected_text: green_reverse  # Text style for selected option\n            description_text: yellow      # Text style for description\n        }\n      }\n      ...\n    ]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Floor Division Changes in Nushell 0.100.0\nDESCRIPTION: This snippet highlights changes to the floor division operator in Nushell. It explains automatic float promotion when one operand is a float, altering the behavior of floor division to match expectations from other arithmetic operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n# Before\n(1 // 1 | describe) == int\n(1 // 1.0 | describe) == int\n(1.0 // 1.0 | describe) == int\n\n# After\n(1 // 1 | describe) == int\n(1 // 1.0 | describe) == float\n(1.0 // 1.0 | describe) == float\n```\n\n----------------------------------------\n\nTITLE: List Filtering in Nushell\nDESCRIPTION: Shows how to filter lists in Nushell using the where command with a condition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n'[{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}]'\n| from json\n| where age > 28\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `rename` to Rust's `map.insert(\\\"key2\\\", map.remove(\\\"key\\\").unwrap())`\nDESCRIPTION: Explains how to rename a key in a Rust  by reassigning the value to a new key and then deleting the old key. This achieves the same result as the `rename` command in Nushell .\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_37\n\nLANGUAGE: Rust\nCODE:\n```\n\"map.insert(\\\"key2\\\", map.remove(\\\"key\\\").unwrap())\"\n```\n\n----------------------------------------\n\nTITLE: Using the Glob Command in Nushell\nDESCRIPTION: Demonstrates the glob command which returns a list of fully qualified pathnames that match the provided pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nglob *.nu\n# => [ /home/you/dev/foo.nu /home/you/dev/bar.nu ]\n```\n\n----------------------------------------\n\nTITLE: Converting Tabular Data to Markdown with to-md\nDESCRIPTION: Demonstrates the new to-md command that converts tabular data to Markdown format, allowing for easy integration with documentation systems.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-31-nushell_0_12_0.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n❯ ls | to-md\n|name|type|size|modified|\n|-|-|-|-|\n|CODE_OF_CONDUCT.md|File|3.4 KB|5 months ago|\n|Cargo.lock|File|104.5 KB|21 mins ago|\n```\n\n----------------------------------------\n\nTITLE: Values Command Signature - Nushell\nDESCRIPTION: Basic command signature for the values command showing its syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/values.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> values {flags} \n```\n\n----------------------------------------\n\nTITLE: Rounding with Precision Specification\nDESCRIPTION: Example demonstrating rounding numbers to a specific decimal precision using the --precision flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_round.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [1.555 2.333 -3.111] | math round --precision 2\n╭───┬───────╮\n│ 0 │  1.56 │\n│ 1 │  2.33 │\n│ 2 │ -3.11 │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Merging Two Records Using 'merge' in Nu Shell\nDESCRIPTION: Shows how to merge two records using the 'merge' command in Nu Shell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> {a: 1, b: 2} | merge {c: 3}\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Search for a Single Record from a Table in Nushell\nDESCRIPTION: This example illustrates how to perform a fuzzy search for a single record from a list of files, using the `input list` command with the `--fuzzy` flag to aid the selection process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input_list.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ls | input list --fuzzy 'Select the target'\n```\n\n----------------------------------------\n\nTITLE: Taking Elements Based on Field Value in Nushell\nDESCRIPTION: Illustrates using 'take while' to select elements from a list of records based on a field value condition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_while.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a: -1} {a: -2} {a: 9} {a: 1}] | take while {|x| $x.a < 0 }\n╭───┬────╮\n│ # │ a  │\n├───┼────┤\n│ 0 │ -1 │\n│ 1 │ -2 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Profile Config with Increased Depth\nDESCRIPTION: Example demonstrating profile configuration evaluation with increased depth granularity.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug_profile.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> debug profile { source $nu.config-path } --max-depth 4\n```\n\n----------------------------------------\n\nTITLE: List Left Shift Operation\nDESCRIPTION: Shows how to perform left shift operation on a list of numbers\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shl.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[5 3 2] | bits shl 2\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Table with All Flag in Nushell\nDESCRIPTION: Illustrates flattening a column containing a nested table using the --all flag and accessing a specific field.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/flatten.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[origin, people]; [Ecuador, ([[name, meal]; ['Andres', 'arepa']])]] | flatten --all | get meal\n```\n\n----------------------------------------\n\nTITLE: Encoding Binary to Lowercase Hex\nDESCRIPTION: Demonstrates using the --lower flag to generate lowercase hexadecimal output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_hex.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[AD EF] | encode hex --lower\nadef\n```\n\n----------------------------------------\n\nTITLE: Rendering Shell Commands Table with Vue.js and HTML\nDESCRIPTION: This snippet creates an HTML table to display the filtered shell commands. It uses Vue.js directives to iterate over the commands and render each row with the command name (as a link) and its description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/shells.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Math Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'math' command in Nushell. It shows that the command takes flags as arguments and does not require input, producing a string output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math {flags} \n```\n\n----------------------------------------\n\nTITLE: Error handling with 'insert' command in Nushell\nDESCRIPTION: Example showing the error behavior of the 'insert' command when attempting to insert at an index outside the bounds of a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\n[0, 1, 2] | insert 5 5           # will give \"index too large\" error\n```\n\n----------------------------------------\n\nTITLE: Convert string into cell path via split row in NuShell\nDESCRIPTION: This snippet illustrates converting a string into a cell path using `split row` and `into cell-path` in NuShell.  First, the string 'some.path' is split into a list based on the '.' delimiter. Then, this list is converted into a cell path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_cell-path.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\n> 'some.path' | split row '.' | into cell-path\n$.some.path\n\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from Start of List in Nushell\nDESCRIPTION: Shows how to take a specific number of elements from the start of a list using the first command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_lists.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nlet colors = [yellow green purple]\nlet colors = ($colors | first 2)\n$colors\n```\n\n----------------------------------------\n\nTITLE: Accessing a specific column\nDESCRIPTION: Opens a file, splits it into lines and columns, and then retrieves the values from a specific column ('Column1') using the `get` command.  This allows accessing specific data fields after splitting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nopen gente.txt | lines | split column \" | \" | get Column1\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicode Keybindings in Nushell\nDESCRIPTION: Example configuration for Unicode code point-based keybindings in Nushell. This shows how to set up a keybinding using a Unicode code point (Greek letter Alpha) in the config file, specifying the command name, modifier, keycode, mode, and action.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n$env.config = {\n    ...\n\n    keybindings: [\n        {\n            name: <command_name>, # name of the command\n            modifier: none,       # key modifier\n            keycode: char_u0391,  # Unicode code for Greek 'Α'\n            mode: vi_normal,      # mode in which this binding should work\n            event: {\n                send: <action>    # action to be performed\n            }\n        }\n    ]\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Table Columns\nDESCRIPTION: This example illustrates formatting specific columns from a table into a string.  It uses `format pattern` to extract and print the values from the 'col2' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_pattern.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[col1, col2]; [v1, v2] [v3, v4]] | format pattern '{col2}'\n```\n\n----------------------------------------\n\nTITLE: Format Command Basic Signature\nDESCRIPTION: Shows the basic signature for the format command in Nu Shell. The command requires using specific subcommands for different formatting operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nformat {flags}\n```\n\n----------------------------------------\n\nTITLE: Excluding Directories from glob Search in Nushell\nDESCRIPTION: Example showing how to search for files named tsconfig.json while excluding those in node_modules directories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n> glob **/tsconfig.json --exclude [**/node_modules/**]\n\n```\n\n----------------------------------------\n\nTITLE: Encoding Filesize Value in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of encoding a filesize value in JSON format for the Nushell plugin protocol, representing bytes with span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Filesize\": {\n    \"val\": 33973248,\n    \"span\": {\n      \"start\": 7740,\n      \"end\": 7747\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Data Representation\nDESCRIPTION: Explicit binary data representation in different bases\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/types_of_data.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n0x[1F FF]  # Hexadecimal\n0b[1 1010] # Binary\n0o[377]    # Octal\n```\n\n----------------------------------------\n\nTITLE: Requesting HTTP communication options in Nu Shell\nDESCRIPTION: This snippet demonstrates the use of the 'http options' command in Nu Shell to request permitted HTTP communication options for a given URL. The command supports various flags such as authentication, custom headers, and timeout settings. It is commonly used for initiating CORS preflight requests. The required input is the URL, and it returns any potential communication options provided by the server.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_options.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> http options https://www.example.com\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http options --user myuser --password mypass https://www.example.com\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http options --headers [my-header-key my-header-value] https://www.example.com\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http options --headers [my-header-key-A my-header-value-A my-header-key-B my-header-value-B] https://www.example.com\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http options https://media.example.com/api/ --headers [Origin https://www.example.com Access-Control-Request-Headers \"Content-Type, X-Custom-Header\" Access-Control-Request-Method GET]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Polars All-True Command\nDESCRIPTION: This example demonstrates how to check if all boolean values in an array are true by first converting it to a dataframe and then applying the all-true operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_all-true.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[true true true] | polars into-df | polars all-true\n```\n\n----------------------------------------\n\nTITLE: Polars Rename Command Signature\nDESCRIPTION: The basic command signature for the polars rename operation, showing the required parameters for columns to rename and their new names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_rename.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars rename {flags} (columns) (new names)\n```\n\n----------------------------------------\n\nTITLE: from plist Command Signature in Nushell\nDESCRIPTION: The command signature for the 'from plist' command that converts plist data to Nushell values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_plist.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from plist {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating Nu Plugin Node Example\nDESCRIPTION: This snippet refers to the creation of a new Nushell plugin example written in JavaScript named `nu_plugin_node_example.js`. This example serves as a resource for developers looking to create Nushell plugins using Node.js, demonstrating the integration of JavaScript within the Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-04-18-twin0295.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\n        \"whiter001 [created `nu_plugin_node_example.js`](https://github.com/nushell/nushell/pull/15482)\"\n\n```\n\n----------------------------------------\n\nTITLE: Basic Path Command Signature in Nushell\nDESCRIPTION: Shows the basic signature for the path command with flags. This is the root command that requires using one of its subcommands for actual functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> path {flags} \n```\n\n----------------------------------------\n\nTITLE: Random Boolean Command Signature\nDESCRIPTION: The basic command signature for generating random boolean values in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_bool.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> random bool {flags}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Error Behavior for Table Operations in Nushell\nDESCRIPTION: Illustrates how operations like 'get', 'select', and cell path access on tables now error when encountering a hole, and how to opt into null-conversion behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-10-nushell_0_74.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n〉[{a:1} {b:2} {a:3}] | select -i foo | to nuon\n[[foo]; [null], [null], [null]]\n```\n\nLANGUAGE: nu\nCODE:\n```\n〉[{a:1} {b:2} {a:3}] | select -i a | default 0 a\n[[a]; [1], [0], [3]]\n〉[{a:1} {b:2} {a:3}] | select -i foo | default 0 foo\n[[foo]; [0], [0], [0]]\n```\n\n----------------------------------------\n\nTITLE: Importing module from NU_LIB_DIRS\nDESCRIPTION: This snippet illustrates how to import a module file using a relative or absolute path. Nushell searches `$env.NU_LIB_DIRS` if a relative path doesn't directly match a file in the current directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nuse ~/nushell/modules/std-rfc/bulk-rename.nu\n# Or\ncd ~/nushell/modules\nuse std-rfc/bulk-rename.nu\n```\n\n----------------------------------------\n\nTITLE: Creating and Listing Dataframes in Nushell\nDESCRIPTION: Example showing how to create a new dataframe and list it using polars store-ls. Creates a dataframe from a 2x2 array and then displays the stored dataframes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_store-ls.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> let test = ([[a b];[1 2] [3 4]] | polars into-df);\n    polars store-ls\n```\n\n----------------------------------------\n\nTITLE: Using Trash Removal in Nushell\nDESCRIPTION: Example of using the rm command with trash flag to move files to recycle bin instead of permanent deletion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrm myfile.txt --trash\n```\n\n----------------------------------------\n\nTITLE: Importing module with relative path\nDESCRIPTION: This snippet demonstrates how to import a module using a relative path after changing the current directory with `cd`. It uses `nupm` module as an example.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n# cd then use the mod.nu in the relative nupm directory\ncd ~/nushell/modules\nuse nupm\n# or\nuse nupm/\n```\n\n----------------------------------------\n\nTITLE: Split String in Nushell and PowerShell\nDESCRIPTION: The `split_by` command splits a string based on a delimiter.  In PowerShell, `String.Split()` is used for splitting strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_28\n\nLANGUAGE: powershell\nCODE:\n```\n\"String.Split()\"\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Variables in Nushell\nDESCRIPTION: Shows how to display all environment variables and their values in Nushell, including system and Cargo-related variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/setup.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$env\n# => ─────────────────────────────────┬────────────────────────────────────────────\n# =>  ALLUSERSPROFILE                 │ C:\\ProgramData\n# =>  CARGO_PKG_AUTHORS               │ The Nu Project Contributors\n# =>  CARGO_PKG_DESCRIPTION           │ A new type of shell\n# =>  CARGO_PKG_HOMEPAGE              │ https://www.nushell.sh\n# =>  CARGO_PKG_LICENSE               │ MIT\n# =>  CARGO_PKG_LICENSE_FILE          │\n# =>  CARGO_PKG_NAME                  │ nu\n# =>  CARGO_PKG_REPOSITORY            │ https://github.com/nushell/nushell\n# =>  CARGO_PKG_VERSION               │ 0.59.0\n# =>  CARGO_PKG_VERSION_MAJOR         │ 0\n```\n\n----------------------------------------\n\nTITLE: Converting Octal String to Integer in Nushell\nDESCRIPTION: Shows how to convert an octal string (with 0o prefix) to its integer value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n'0o10132' | into int\n```\n\n----------------------------------------\n\nTITLE: String Distance Calculation using Levenshtein Algorithm\nDESCRIPTION: Introduces new `str distance` command to calculate edit distance between strings using Levenshtein algorithm.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n'nushell' | str distance 'nutshell'\n```\n\n----------------------------------------\n\nTITLE: Handling Metadata Plugin Call Response in JSON\nDESCRIPTION: Example of a successful response to a Metadata plugin call. It includes optional metadata fields like version.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CallResponse\": [\n    0,\n    {\n      \"Metadata\": {\n        \"version\": \"1.2.3\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Data Message in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of a Data message in JSON format for the Nushell plugin protocol. It shows how to structure a message containing a string value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Data\": [\n    0,\n    {\n      \"List\": {\n        \"String\": {\n          \"val\": \"Hello, world!\",\n          \"span\": {\n            \"start\": 40000,\n            \"end\": 40015\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IntRange with Unbounded End in Nushell\nDESCRIPTION: Example of an integer range with unbounded end. The range starts at 0 with a step of 1 and continues indefinitely.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_52\n\nLANGUAGE: nu\nCODE:\n```\n0..\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Range\": {\n    \"val\": {\n      \"IntRange\": {\n        \"start\": 0,\n        \"step\": 1,\n        \"end\": \"Unbounded\"\n      }\n    },\n    \"span\": {\n      \"start\": 1380,\n      \"end\": 1383\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: View Original Nushell Invocation\nDESCRIPTION: Example command showing how to view the first registered file, which typically shows how Nushell was originally invoked.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_files.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> view files | get 0\n```\n\n----------------------------------------\n\nTITLE: Moving a file in Nu\nDESCRIPTION: Moves a file to a new location using the 'mv' command.  The command takes two arguments: the source path and the destination path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n\"mv <source> <dest>\"\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV with Flexible Columns in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'from csv' command with the '--flexible' flag, allowing for greater adaptability in handling CSV data that may contain varying columns across rows. It ensures that no data is truncated if the number of values exceeds initial row definitions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_11\n\nLANGUAGE: csv\nCODE:\n```\nvalue\n1,aaa\n2,bbb\n3\n4,ddd\n5,eee,extra\n```\n\nLANGUAGE: nu\nCODE:\n```\n.. | from csv --flexible --noheaders\n```\n\n----------------------------------------\n\nTITLE: Roll Right Command Signature\nDESCRIPTION: The basic command signature for the roll right operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_right.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> roll right {flags} \n```\n\n----------------------------------------\n\nTITLE: Environment Variable Handling in Python\nDESCRIPTION: Python implementation for environment variable operations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nos.environ\n```\n\n----------------------------------------\n\nTITLE: Command Signature for from ssv in Nushell\nDESCRIPTION: The signature for the 'from ssv' command showing its basic syntax with flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_ssv.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from ssv {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining save Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'save' command, including its flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/save.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nsave {flags} (filename)\n```\n\n----------------------------------------\n\nTITLE: Basic Cal Command Signature in Nushell\nDESCRIPTION: The basic syntax for the 'cal' command in Nushell, which displays a calendar with various optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cal.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> cal {flags} \n```\n\n----------------------------------------\n\nTITLE: Importing Full Standard Library in Nushell\nDESCRIPTION: Command to import the entire standard library into the current scope. Not recommended for scripts due to longer load times.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/standard_library.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nuse std *\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'math min' Command in Nushell\nDESCRIPTION: Specifies the signature for the 'math min' command, which takes flags as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_min.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math min {flags}\n```\n\n----------------------------------------\n\nTITLE: Updating Nushell Configuration in TOML\nDESCRIPTION: A change was made to the Nushell configuration file to use the environment variable PROMPT_COMMAND instead of a hardcoded value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-01-07-twin0124.md#2025-04-19_snippet_0\n\nLANGUAGE: Toml\nCODE:\n```\nenv.PROMPT_COMMAND\n```\n\n----------------------------------------\n\nTITLE: Defining mv Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'mv' command in Nushell, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mv.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> mv {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'explore' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'explore' command, indicating its basic usage pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/explore.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> explore {flags} \n```\n\n----------------------------------------\n\nTITLE: Raw JSON Response Handling in Nushell\nDESCRIPTION: Fetches data from multiple URLs and displays raw JSON responses using the --raw flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nopen urls.json | get urls | each { |u| http get $u -r }\n```\n\n----------------------------------------\n\nTITLE: Parsing Human Readable Datetimes in Nushell\nDESCRIPTION: This snippet demonstrates parsing various human-readable datetime strings into datetime objects in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n> 'Today at 18:30' | into datetime\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> 'Last Friday at 19:45' | into datetime\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> 'In 5 minutes and 30 seconds' | into datetime\n\n```\n\n----------------------------------------\n\nTITLE: Compact with Empty Flag Example\nDESCRIPTION: Example showing how to filter out both null values and empty items (empty strings, arrays, and objects) from a list\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/compact.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [1, null, 2, \"\", 3, [], 4, {}, 5] | compact --empty\n```\n\n----------------------------------------\n\nTITLE: Update Command Signature in Nushell\nDESCRIPTION: The signature for the update command in Nushell, showing its basic syntax pattern with flags, field parameter, and replacement value parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> update {flags} (field) (replacement value)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'each while' Command in Nushell\nDESCRIPTION: Specifies the command signature for 'each while', including flags and a closure parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each_while.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> each while {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Table of Changelog Entries\nDESCRIPTION: A markdown table displaying changelog entries with columns for author, title, and pull request link. Each row represents a contribution to the Nushell project.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| author                                               | title                                                                                                                 | link                                                    |\n| ---------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- |\n| [@0x4D5352](https://github.com/0x4D5352)             | Improve example formatting in README.md                                                                               | [#14695](https://github.com/nushell/nushell/pull/14695) |\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Directories in the Stack in Nushell\nDESCRIPTION: Examples of using dirs next and dirs goto commands to switch between directories in the stack.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/directory_stack.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndirs next\n# Active was 3, is now 0\npwd\n# => /home/myuser/src/repo/nushell\ndirs goto 2\n# => /home/myuser/src/repo/nu_scripts\n```\n\n----------------------------------------\n\nTITLE: Removing Directories from the Stack in Nushell\nDESCRIPTION: Example of using the dirs drop command to remove the current directory from the stack.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/directory_stack.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\ndirs drop\ndirs\n# => ╭───┬────────┬──────────────────────────────────╮\n# => │ # │ active │               path               │\n# => ├───┼────────┼──────────────────────────────────┤\n# => │ 0 │ false  │ /home/myuser/src/repo/nushell    │\n# => │ 1 │ true   │ /home/myuser/src/repo/reedline   │\n# => │ 2 │ false  │ /home/myuser                     │\n# => ╰───┴────────┴──────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting One Row Table to Record in nushell\nDESCRIPTION: This nushell command converts a one row table with a header to a record format. No specific dependencies are required beyond nushell itself. Inputs provided as a table are converted to a corresponding record structure, capturing the header and values as key-value pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_record.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> [[value]; [false]] | into record\n```\n\n----------------------------------------\n\nTITLE: Accessing a List Value in Nushell\nDESCRIPTION: In this snippet, a list of names is defined, and a specific value is accessed using the corresponding index. The example emphasizes that list indices are zero-based.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet scoobies_list = [ Velma Fred Daphne Shaggy Scooby ]\n$scoobies_list.2\n# => Daphne\n```\n\n----------------------------------------\n\nTITLE: Running Commands in Parallel with Interleaving\nDESCRIPTION: This example executes two commands concurrently, utilizing the 'interleave' function to combine their outputs. The outputs are annotated to specify which output belongs to which command, enhancing clarity.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/interleave.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> (\ninterleave\n    { nu -c \"print hello; print world\" | lines | each { \"greeter: \" ++ $in } }\n    { nu -c \"print nushell; print rocks\" | lines | each { \"evangelist: \" ++ $in } }\n)\n\n```\n\n----------------------------------------\n\nTITLE: Using Double-quoted Strings with Escape Characters in Nushell\nDESCRIPTION: Demonstrates the use of double-quoted strings in Nushell, which support escape characters for special formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\"hello\\nworld\"\n# => hello\n# => world\n```\n\n----------------------------------------\n\nTITLE: Modifying File Modified Time\nDESCRIPTION: Example showing how to change only the last modified time of a file using the -m flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> touch -m fixture.json\n```\n\n----------------------------------------\n\nTITLE: Signature of the 'to html' Command in Nushell\nDESCRIPTION: Shows the command signature for the 'to html' command in Nushell which is used to convert tabular data to HTML.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_html.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> to html {flags} \n```\n\n----------------------------------------\n\nTITLE: Encoding String Data in Base32\nDESCRIPTION: Example demonstrating how to encode a text string (\"hello there\") into Base32 format with padding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base32.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"hello there\" | encode base32\nNBSWY3DPEB2GQZLSMU======\n```\n\n----------------------------------------\n\nTITLE: Regex Vergleich mit Ignore-Case in Nushell\nDESCRIPTION: Demonstriert wie man mit dem `(?i)` Parameter, reguläre Ausdrücke ohne Beachtung der Gross- Kleinschreibung vergleicht.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/operators.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n```nu\n\"FOO\" =~ \"foo\" # gibt false zurück\n\"FOO\" =~ \"(?i)foo\" # gibt true zurück\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the Signature of `stor export` Command in Nushell\nDESCRIPTION: The signature of the `stor export` command, showing its basic syntax structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_export.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> stor export {flags} \n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive String Sorting\nDESCRIPTION: Example of sorting strings ignoring case sensitivity.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [airplane Truck Car] | sort -i\n```\n\n----------------------------------------\n\nTITLE: Appending a Row to a Table in Nushell\nDESCRIPTION: This snippet demonstrates how to append a new row to an existing table with columns 'edition' and 'next_edition'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | insert next_edition 2021 | append {edition: 2021 next_edition: 2024}\n```\n\n----------------------------------------\n\nTITLE: Output Multi-byte Unicode Character\nDESCRIPTION: Example showing how to output a complex multi-byte Unicode character.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/char.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> char --unicode 1F468 200D 1F466 200D 1F466\n👨‍👦‍👦\n```\n\n----------------------------------------\n\nTITLE: Parsing a String Without Padding using NuShell\nDESCRIPTION: This example explains how to decode a base32hex string that does not include padding. It requires the use of the --nopad flag. The snippet showcases the flexibility of handling different input formats.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base32hex.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> \"ATNAQ\" | decode base32hex --nopad\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   57 6e ad                                             Wn×\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Path Commands with Vue.js\nDESCRIPTION: A Vue.js computed property that filters page data to extract path-related commands. It filters pages that include '/commands/docs/' in their path and have 'path' in their categories, then sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/path.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('path'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables from a Nushell Module\nDESCRIPTION: Example of a module that exports both an environment variable and a command, demonstrating how to use the exported environment variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n# greetings.nu\n\nexport env MYNAME { \"Arthur, King of the Britons\" }\n\nexport def hello [name: string] {\n    $\"hello ($name)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exported Module Constants\nDESCRIPTION: Shows different ways of importing and accessing constants from modules, including direct import and module-level record access.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-08-22-nushell_0_84_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> use spam\n\n> $spam\n╭──────┬───────────────────╮\n│ eggs │ {record 2 fields} │\n│ X    │ x                 │\n╰──────┴───────────────────╯\n\n> use spam eggs viking\n\n> $viking\neats\n```\n\n----------------------------------------\n\nTITLE: Internal Command Completer Behavior Change\nDESCRIPTION: Internal commands in Nushell will no longer utilize the external completer for completions, ensuring a more optimized and accurate suggestion approach.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Type Mismatch Error Handling in Nushell\nDESCRIPTION: This snippet demonstrates how Nushell handles type mismatches when performing operations on incompatible data types, providing an error message with helpful guidance.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\"spam\" - 1\n# => Error: nu::parser::unsupported_operation (link)\n# => \n# =>   × Types mismatched for operation.\n# =>    ╭─[entry #49:1:1]\n# =>  1 │ \"spam\" - 1\n# =>    · ───┬── ┬ ┬\n# =>    ·    │   │ ╰── int\n# =>    ·    │   ╰── doesn't support these values.\n# =>    ·    ╰── string\n# =>    ╰────\n# =>   help: Change string or int to be the right types and try again.\n```\n\n----------------------------------------\n\nTITLE: Creating a Nushell Module in a File\nDESCRIPTION: Example of defining a module in a separate file named 'greetings.nu', which includes two exported commands that follow the same pattern as the inline module definition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n# greetings.nu\n\nexport def hello [name: string] {\n    $\"hello ($name)!\"\n}\n\nexport def hi [where: string] {\n    $\"hi ($where)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nushell Documentation Updates in Markdown\nDESCRIPTION: Markdown list of recent updates and contributions to the Nushell documentation repository, including new additions and corrections.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-13-twin0103.md#2025-04-19_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## Documentation\n\n- hedonihilist [added doc for `filesize_metric` config](https://github.com/nushell/nushell.github.io/pull/187)\n- jafriyie1 [added config path argument to first paragraph of configuration.md file](https://github.com/nushell/nushell.github.io/pull/186)\n- dywedir created [2021-08-03-nushell_0_35.md: Fix typo data -> date](https://github.com/nushell/nushell.github.io/pull/184)\n```\n\n----------------------------------------\n\nTITLE: Processing Signal Message in JSON\nDESCRIPTION: Example of a Signal message used to relay signals from the engine to the plugin. This example shows an Interrupt signal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Signal\": \"Interrupt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Convert specific sheets from ODS to table in NuShell\nDESCRIPTION: This snippet demonstrates converting specific sheets from an .ods file to a NuShell table. The `--sheets` flag allows specifying a list of sheet names to include in the conversion.  It takes the raw binary output from the open command and pipes it to the from ods command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_ods.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> open --raw test.ods | from ods --sheets [Spreadsheet1]\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Experimental Paging Feature in Rust\nDESCRIPTION: Command to install Nushell with the experimental table paging feature using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-30-nushell_0_29.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=table-pager\n```\n\n----------------------------------------\n\nTITLE: Setting up Pre-Prompt Hook for Overlay Management\nDESCRIPTION: Configures a pre-prompt hook to export active overlays as an environment variable for Starship integration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/setup.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n# set NU_OVERLAYS with overlay list, useful for starship prompt\n$env.config.hooks.pre_prompt = ($env.config.hooks.pre_prompt | append {||\n  let overlays = overlay list | range 1..\n  if not ($overlays | is-empty) {\n    $env.NU_OVERLAYS = $overlays | str join \", \"\n  } else {\n    $env.NU_OVERLAYS = null\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing Alias Source in Nushell\nDESCRIPTION: Example showing how to view the source definition of an alias\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_source.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nalias hello = echo hi; view source hello\n```\n\n----------------------------------------\n\nTITLE: Reversing a Single String in Nushell\nDESCRIPTION: Example showing how to reverse a single string 'Nushell' using the str reverse command, resulting in 'llehsuN'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_reverse.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'Nushell' | str reverse\nllehsuN\n```\n\n----------------------------------------\n\nTITLE: Full Gradient Example in Nushell\nDESCRIPTION: Example demonstrating both foreground and background gradients with different start and end colors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_gradient.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff' --fgend '0xe81cff' --bgstart '0xe81cff' --bgend '0x40c9ff'\n```\n\n----------------------------------------\n\nTITLE: Converting Complex Record to Indented NUON in Nushell\nDESCRIPTION: Converts a more complex record with multiple data types to indented NUON format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_nuon.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n{date: 2000-01-01, data: [1 [2 3] 4.56]} | to nuon --indent 2\n```\n\n----------------------------------------\n\nTITLE: Process CPU Usage Monitor in Nushell\nDESCRIPTION: Lists running processes sorted by CPU utilization in descending order. Filters for processes with non-zero CPU usage and displays process details.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/system.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nps | where cpu > 0 | sort-by cpu | reverse\n```\n\n----------------------------------------\n\nTITLE: Printing All Current Limits in Nushell\nDESCRIPTION: Example showing how to print all current resource limits using the ulimit command with the -a flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ulimit.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ulimit -a\n```\n\n----------------------------------------\n\nTITLE: Basic cp Command Signature\nDESCRIPTION: The basic signature for the cp command in Nushell with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> cp {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Signed Number Left Shift\nDESCRIPTION: Demonstrates left shifting a signed hexadecimal number by 1 bit\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shl.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n0x7F | bits shl 1 --signed\n```\n\n----------------------------------------\n\nTITLE: Shifting Right a List of Numbers in Nushell\nDESCRIPTION: Shows how to apply the 'bits shr' command to a list of numbers in Nushell, shifting each number right by 2 bits.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shr.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [15 35 2] | bits shr 2\n╭───┬───╮\n│ 0 │ 3 │\n│ 1 │ 8 │\n│ 2 │ 0 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Command template for installing optional Nushell plugins using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-07-26-nushell-0_66.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Notifying Drop of Custom Value via `Dropped`\nDESCRIPTION: This snippet demonstrates how to notify that a custom value has been dropped. The response can either be an Empty pipeline data or an Error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [\n    0,\n    {\n      \"CustomValueOp\": [\n        {\n          \"item\": {\n            \"name\": \"handle\",\n            \"data\": [78, 60],\n            \"notify_on_drop\": true\n          },\n          \"span\": {\n            \"start\": 1820,\n            \"end\": 1835\n          }\n        },\n        \"Dropped\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Polars Take Command Signature\nDESCRIPTION: Command signature showing basic syntax and parameter format for the polars take command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_take.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars take {flags} (indices)\n```\n\n----------------------------------------\n\nTITLE: Using date list-timezone Command Signature in Nushell\nDESCRIPTION: Command signature showing the basic syntax for the date list-timezone command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_list-timezone.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> date list-timezone {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining Keybindings Listen Command Signature in Nushell\nDESCRIPTION: This snippet shows the command signature for 'keybindings listen'. It indicates that the command can take flags as arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_listen.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> keybindings listen {flags}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Radix-Prefixed Integer Literals After\nDESCRIPTION: This code demonstrates how Nushell handles invalid radix-prefixed integer literals after a fix.  Invalid literals like `0x22bogus` now result in a specific 'Invalid literal' error indicating that there are invalid digits for the specified radix. This provides a more precise error message.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-02-21-nushell_0_76.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n\">( 0 + 0x22bogus ) # hex int literal\"\n\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Radix-Prefixed Integer Literals Before\nDESCRIPTION: This code demonstrates how Nushell previously handled invalid radix-prefixed integer literals. Before the fix, invalid literals like `0x22bogus` would result in a `nu::parser::unsupported_operation` error because it was being interpreted as a bare string, rather than a malformed integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-02-21-nushell_0_76.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n\">( 0 + 0x22bogus ) # hex int literal\"\n\n```\n\n----------------------------------------\n\nTITLE: Converting Glob to Glob in Nushell\nDESCRIPTION: Example demonstrating that applying 'into glob' to an existing glob pattern maintains the pattern, showing idempotence of the operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_glob.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> '1234' | into glob | into glob\n1234\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `prepend` to Python's `println!`\nDESCRIPTION: Illustrates how to prepend an element to a Rust using `println!`, equivalent to the `prepend` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_35\n\nLANGUAGE: Rust\nCODE:\n```\n\"println!`\"\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The basic command signature for the transpose command showing its syntax with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/transpose.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> transpose {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Basic Process Listing Command Signature in Nushell\nDESCRIPTION: Defines the basic command signature for the ps command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ps.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ps {flags} \n```\n\n----------------------------------------\n\nTITLE: Basic Usage Signature for 'stor update' Command in Nushell\nDESCRIPTION: The command signature showing how to use the 'stor update' command with its available flags. This is the fundamental syntax for updating records in the in-memory SQLite database.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_update.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> stor update {flags} \n```\n\n----------------------------------------\n\nTITLE: Save Output to File in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `save` command saves output to a file. In PowerShell, `Write-Output` or `Out-File` are used.  In Unix shells, redirection `> foo.txt` is used to save output to a file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Defining seq Command Signature in Nushell\nDESCRIPTION: Specifies the command signature for the 'seq' command in Nushell, including flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> seq {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Equivalent Dataframe Operation in Python using Pandas\nDESCRIPTION: Provides a comparison of the same dataframe operation performed in Python using the pandas library.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-07-13-nushell_0_34.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.read_csv(\"Data7602DescendingYearOrder.csv\")\nres = df.groupby(\"year\")[\"geo_count\"].sum()\nprint(res)\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> benchmark {python .\\load.py}\n\n───┬────────────────────────\n # │       real time\n───┼────────────────────────\n 0 │ 1sec 966ms 954us 800ns\n───┴────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Math Sinh Command Signature\nDESCRIPTION: Command signature showing basic syntax for the math sinh operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sinh.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math sinh {flags} \n```\n\n----------------------------------------\n\nTITLE: Showing All Externs - Nushell\nDESCRIPTION: This command is used to display all available externs in Nushell, which are external commands or scripts that can be executed. It does not take any parameters and outputs a table listing all externs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_externs.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> help externs\n\n```\n\n----------------------------------------\n\nTITLE: Pipeline Example in Nu\nDESCRIPTION: This code snippet demonstrates a basic pipeline in Nu. It opens a \"Cargo.toml\" file, increments the \"package.version\" field, and saves the result to a new file named \"Cargo_new.toml\". The `open`, `inc`, and `save` commands represent the input, filter, and output stages of the pipeline, respectively.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/pipeline.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> open \"Cargo.toml\" | inc package.version | save \"Cargo_new.toml\"\n```\n\n----------------------------------------\n\nTITLE: Basic File Deletion in Nushell\nDESCRIPTION: Demonstrates basic file deletion using the rm command, which either deletes or moves to trash based on the 'always_trash' configuration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rm.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> rm file.txt\n```\n\n----------------------------------------\n\nTITLE: Mod Operator Adjustments in Nushell 0.100.0\nDESCRIPTION: This code snippet illustrates the changes made to the `mod` operator in Nushell to align with the new division behavior. The result of `mod` now depends on the floor division result, ensuring consistency in mathematical operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet quotient = $n // $d\nlet remainder = $n mod $d\n$n == $quotient * $d + $remainder\n\n# Before\nlet q = 8 // -3   # -3\nlet r = 8 mod -3  # 2\n8 == $q * -3 + $r # false\n\n# After\nlet q = 8 // -3   # -3\nlet r = 8 mod -3  # -1\n8 == $q * -3 + $r # true\n```\n\n----------------------------------------\n\nTITLE: Split Column Command Signature - Nushell\nDESCRIPTION: The command signature showing the basic syntax for the split column command with flags parameter definition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_column.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> split column {flags} (separator) ...rest\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE with JSON Body\nDESCRIPTION: Send an HTTP DELETE request with a JSON-formatted request body and specific content type\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_delete.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nhttp delete --content-type application/json --data { field: value } https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Converting Tables to Basic Markdown in Nushell\nDESCRIPTION: Example of converting a simple table to Markdown format without any formatting options.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_md.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [1 2]] | to md\n|foo|bar|\n|-|-|\n|1|2|\n\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Search with Nushell\nDESCRIPTION: This snippet illustrates how to perform a case-insensitive search for file names using regular expression operators in Nushell, specifically the =~ operator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-15-top-nushell-hacks.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n❯ ls | where name =~ '(?i)car'\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Nushell Commands Table with Vue.js\nDESCRIPTION: This HTML template uses Vue.js to render a table of default Nushell commands. It iterates over the filtered and sorted commands, displaying each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/default.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Accessing a Table Column in Nushell\nDESCRIPTION: This snippet demonstrates how to access an entire column from a table. The example retrieves the weather conditions for each day from the previously defined table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n$data.condition\n# => ╭───┬────────╮\n# => │ 0 │ sunny  │\n# => │ 1 │ sunny  │\n# => │ 2 │ cloudy │\n# => │ 3 │ rain   │\n# => ╰───┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Polars Dataframe to Nushell Value with Index\nDESCRIPTION: This example demonstrates how to convert a Polars dataframe to a Nushell value, adding an index column. It shows the head rows of the dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-nu.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars into-nu --index\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Parameters with Linebreaks in Nushell\nDESCRIPTION: Shows how to define a command with multiple parameters separated by linebreaks, useful for improved readability with many parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_19\n\nLANGUAGE: nu\nCODE:\n```\n# Linebreaks\ndef greet [\n  name1\n  name2\n] {\n  $\"Hello, ($name1) and ($name2)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: AST Complex Pipeline Example\nDESCRIPTION: Demonstrates flattened AST output for a more complex pipeline with sorting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> ast 'ls | sort-by type name -i' --flatten\n```\n\n----------------------------------------\n\nTITLE: Calculate e^1\nDESCRIPTION: Example showing how to calculate e (Euler's number) by raising e to the power of 1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_exp.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | math exp\n2.718281828459045\n```\n\n----------------------------------------\n\nTITLE: Polars All-False Command Signature in Nushell\nDESCRIPTION: The signature of the 'polars all-false' command which operates on dataframes to check if all values are false.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_all-false.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars all-false {flags} \n```\n\n----------------------------------------\n\nTITLE: Rounding List of Numbers - Basic Usage\nDESCRIPTION: Example showing how to round a list of numbers to the nearest integer using math round.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_round.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [1.5 2.3 -3.1] | math round\n╭───┬────╮\n│ 0 │  2 │\n│ 1 │  2 │\n│ 2 │ -3 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Capitalizing a Name in Nushell\nDESCRIPTION: Example demonstrating capitalization of a name. The input 'anton' is transformed to 'Anton', making the first letter uppercase while preserving the rest of the string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_capitalize.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'anton' | str capitalize\nAnton\n```\n\n----------------------------------------\n\nTITLE: Bytes Command Signature in Nushell\nDESCRIPTION: The signature for the 'bytes' command in Nushell, showing the basic syntax for using the command with flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes {flags} \n```\n\n----------------------------------------\n\nTITLE: Git Remote Completion Function in Nushell\nDESCRIPTION: Custom completion function for retrieving git remote names, showcasing Nushell's flexible completion system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-01-nushell_0_59.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"nu-complete git remotes\" [] {\n  ^git remote | lines | each { |line| $line | str trim }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Port Command Signature - Nushell\nDESCRIPTION: Shows the command signature for the port command with optional start and end parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/port.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> port {flags} (start) (end)\n```\n\n----------------------------------------\n\nTITLE: Creating a Byte Array with Custom Separator in Nushell\nDESCRIPTION: Example showing how to concatenate multiple binary objects into a single binary output with a custom separator (0x01) between each element.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_collect.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [0x[11] 0x[33] 0x[44]] | bytes collect 0x[01]\nLength: 5 (0x5) bytes | printable whitespace ascii_other non_ascii\n00000000:   11 01 33 01  44                                      ••3•D\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Data in Headers Command in Nushell\nDESCRIPTION: Example showing how the 'headers' command removes columns that don't have data in their first row. The command only keeps columns that have values in the row used for headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/headers.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"a b c|1 2 3|1 2 3 4\" | split row \"|\" | split column \" \" | headers\n╭───┬───┬───┬───╮\n│ # │ a │ b │ c │\n├───┼───┼───┼───┤\n│ 0 │ 1 │ 2 │ 3 │\n│ 1 │ 1 │ 2 │ 3 │\n╰───┴───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Special Characters\nDESCRIPTION: Example demonstrating how to combine prompt character, newline, and hamburger menu character.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/char.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> (char prompt) + (char newline) + (char hamburger)\n▶\n≡\n```\n\n----------------------------------------\n\nTITLE: Converting a string to snake_case in Nushell\nDESCRIPTION: Demonstrates how to convert a string to snake_case format using the str snake-case command. This converts camelCase or PascalCase strings to snake_case where words are separated by underscores.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_snake-case.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\"NuShell\" | str snake-case\n```\n\n----------------------------------------\n\nTITLE: Creating a Null Check Expression for a Column (Nushell)\nDESCRIPTION: Creates a null check expression that can be used in other polars operations. This example shows how to check for null values in column 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-null.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\npolars col a | polars is-null\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'math ceil' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'math ceil' function in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_ceil.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math ceil {flags} \n```\n\n----------------------------------------\n\nTITLE: Debug Commands Table Template\nDESCRIPTION: HTML table template that displays debug commands and their descriptions. Uses Vue.js v-for directive to iterate through filtered commands and display their titles as links along with usage information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/debug.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Listening for Keyboard Shortcuts in Nushell\nDESCRIPTION: This example demonstrates how to use the `input listen` command to listen specifically for keyboard shortcuts.  The `--types [key]` flag ensures that only key press events are captured and processed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input_listen.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> input listen --types [key]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Powerline Prompt in Nushell\nDESCRIPTION: Demonstrates how to configure Nushell to use Powerline for the prompt as an alternative to Starship. This example shows the flexibility of the new external prompt system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-01-nushell_0_19.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nconfig set prompt `echo $(powerline shell left)`\n```\n\n----------------------------------------\n\nTITLE: Git Log with Custom Delimiter\nDESCRIPTION: Git log using special delimiter »¦« to avoid conflicts with commit message content.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5\n```\n\n----------------------------------------\n\nTITLE: Using Default Day Increment in seq date\nDESCRIPTION: This example shows that the increment defaults to days if no duration is supplied when using the 'seq date' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --begin-date '2020-01-01' --end-date '2020-01-31' --increment 5\n```\n\n----------------------------------------\n\nTITLE: Installing a Plugin from Crates.io using Cargo\nDESCRIPTION: This code snippet shows how to install a plugin from crates.io using `cargo`. The plugin name should include the `nu_plugin_` prefix. The `--locked` flag ensures version consistency based on the `Cargo.lock` file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\ncargo install nu_plugin_<plugin_name> --locked\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite-backed History in Nushell\nDESCRIPTION: Configuration snippet to enable SQLite-backed command history in Nushell, which allows for richer history querying and metadata storage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-06-14-nushell_0_64.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet-env config = {\n  ...\n  history_file_format: \"sqlite\" # \"sqlite\" or \"plaintext\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Polars Get-Weekday Command Signature\nDESCRIPTION: The basic command signature for the polars get-weekday operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-weekday.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars get-weekday {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating Directories with Nushell\nDESCRIPTION: This code snippet highlights the usage of the `mkdir` command in Nushell to create directories. The command behaves like `mkdir -p` in Unix/Linux, creating multiple directory levels and not failing if directories exist.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/moving_around.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nmkdir modules/my/new_module\n```\n\n----------------------------------------\n\nTITLE: Creating a List in Nushell\nDESCRIPTION: Example of defining a list in Nushell. The list contains integer and string values, each with its own span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_60\n\nLANGUAGE: nu\nCODE:\n```\n[1, 2, foo, bar]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"List\": {\n    \"vals\": [\n      {\n        \"Int\": {\n          \"val\": 1,\n          \"span\": {\n            \"start\": 659951,\n            \"end\": 659952\n          }\n        }\n      },\n      {\n        \"Int\": {\n          \"val\": 2,\n          \"span\": {\n            \"start\": 659954,\n            \"end\": 659955\n          }\n        }\n      },\n      {\n        \"String\": {\n          \"val\": \"foo\",\n          \"span\": {\n            \"start\": 659957,\n            \"end\": 659960\n          }\n        }\n      },\n      {\n        \"String\": {\n          \"val\": \"bar\",\n          \"span\": {\n            \"start\": 659962,\n            \"end\": 659965\n          }\n        }\n      }\n    ],\n    \"span\": {\n      \"start\": 659950,\n      \"end\": 659966\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Split Binary Data Using String Separator\nDESCRIPTION: Example demonstrating how to split binary data using a string separator (\"--\"). The command splits the binary input into separate components.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_split.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[61 2D 2D 62 2D 2D 63] | bytes split \"--\"\n╭───┬──────╮\n│ 0 │ [97] │\n│ 1 │ [98] │\n│ 2 │ [99] │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Creating Dataframe with Last Rows in Nushell\nDESCRIPTION: Example of using 'polars last' to create a new dataframe containing only the last row of the input dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_last.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars last 1\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 3 │ 4 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: String Functions in Nushell and PowerShell\nDESCRIPTION: The `str` command (denoted by `*`) represents string functions. In PowerShell, the `String class` provides string manipulation methods.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Calculating Arcsine of 1 in Nushell\nDESCRIPTION: Demonstrates how to use the 'math arcsin' command to calculate the arcsine of 1 in Nushell, returning the result in radians.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arcsin.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 1 | math arcsin\n1.5707963267948966\n```\n\n----------------------------------------\n\nTITLE: Querying HKEY_CURRENT_USER Registry Hive in Nushell\nDESCRIPTION: Example of querying the HKEY_CURRENT_USER hive in the Windows registry using the 'registry query' command with the --hkcu flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/registry_query.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> registry query --hkcu environment\n```\n\n----------------------------------------\n\nTITLE: Polars Contains Command Signature\nDESCRIPTION: The basic command signature showing the pattern parameter requirement.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_contains.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars contains {flags} (pattern)\n```\n\n----------------------------------------\n\nTITLE: Accessing Deeper Nested Data with Path Notation in Nushell\nDESCRIPTION: Demonstrates using a path notation (host.sessions) with the get command to access deeper nested data in the system information, showing the active user sessions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nsys | get host.sessions\n# => ───┬─────────\n# =>  # │ <value>\n# => ───┼─────────\n# =>  0 │ sophia\n# => ───┴─────────\n```\n\n----------------------------------------\n\nTITLE: Splitting columns using `split column`\nDESCRIPTION: Opens a file, splits it into lines, and then splits each line into columns based on a delimiter using the `split column` command.  The delimiter is specified as an argument to the `split column` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nopen gente.txt | lines | split column \"|\"\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Mask from Polars Series in Nushell\nDESCRIPTION: Shows how to create a boolean mask from a Polars Series using comparison operators in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_26\n\nLANGUAGE: nu\nCODE:\n```\nlet mask_0 = $df_5 == 8\n$mask_0\n```\n\n----------------------------------------\n\nTITLE: Choosing an Item from a Table with a Specific Display Value in Nushell\nDESCRIPTION: This snippet shows how to use the `input list` command to choose an item from a table while specifying a column to be used as the display value, allowing for more meaningful user interactions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/input_list.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> [[name price]; [Banana 12] [Kiwi 4] [Pear 7]] | input list -d name\n```\n\n----------------------------------------\n\nTITLE: Setting Single-use Environment Variables\nDESCRIPTION: This snippet presents a shorthand way of setting a temporary environment variable for the duration of a command execution, mimicking functionality seen in other shell environments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nFOO=BAR $env.FOO\n```\n\nLANGUAGE: nu\nCODE:\n```\nwith-env { FOO: BAR } { $env.FOO }\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin by Name in Nushell\nDESCRIPTION: Example of removing the installed signatures for the 'inc' plugin from the plugin registry file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_rm.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> plugin rm inc\n\n```\n\n----------------------------------------\n\nTITLE: External Nu Command Execution\nDESCRIPTION: Shows how to execute Nushell commands from outside the shell using the -c flag to list file names in a directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-02-18-nushell-0_10_0.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n> ./nu -c \"ls | get name\"\n─────┬───────────────────────────────\n #   │ <value>\n─────┼───────────────────────────────\n   0 │ .cargo-lock\n   1 │ .fingerprint\n   2 │ build\n   3 │ deps\n```\n\n----------------------------------------\n\nTITLE: Finding Declaration in Nushell Engine (JSON)\nDESCRIPTION: Example of a FindDecl engine call to find the declaration ID for a command named 'inc' in scope. The call includes context and id for the request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 7,\n    \"id\": 48,\n    \"call\": {\n      \"FindDecl\": \"inc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on macOS/Linux using Homebrew\nDESCRIPTION: This command installs Nushell on macOS or Linux systems using the Homebrew package manager. It assumes that Homebrew is already installed on the system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"$ brew install nushell\"\n```\n\n----------------------------------------\n\nTITLE: Changes to Echo Command\nDESCRIPTION: The 'echo' command now matches its help text by returning arguments rather than printing them directly. Use 'print' to display values to stdout or stderr.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\necho\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Command to install the core Nushell package using Cargo package manager for Rust\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-10-nushell_0_92_2.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Parsing Input File as Script in Nushell\nDESCRIPTION: Demonstrates how to use nu-check to parse an input file as a script, which is the default behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-check.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> nu-check script.nu\n```\n\n----------------------------------------\n\nTITLE: Viewing Configuration Documentation in Nushell\nDESCRIPTION: Command to view the enhanced documentation for configuration options in Nushell 0.101+. This replaces the previous sample configuration files with a command that displays documentation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-04-configuration_preview.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconfig nu --doc | nu-highlight | less -R\n```\n\n----------------------------------------\n\nTITLE: Using hash md5 Command in Nushell\nDESCRIPTION: The `hash md5` command syntax with flags and parameters. It takes input data and generates an MD5 hash, with options to output in hexadecimal (default) or binary format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_md5.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> hash md5 {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Date Humanize Command Signature in Nushell\nDESCRIPTION: This snippet shows the command signature for the 'date humanize' command in Nushell. It indicates that the command can be used with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_humanize.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> date humanize {flags}\n```\n\n----------------------------------------\n\nTITLE: Rotating a List of Numbers with Two-Byte Word Size in Nushell\nDESCRIPTION: Example demonstrating how to rotate a list of numbers right by 2 bits with a specified word size of 2 bytes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_ror.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [15 33 92] | bits ror 2 --number-bytes 2\n╭───┬───────╮\n│ 0 │ 49155 │\n│ 1 │ 16392 │\n│ 2 │    23 │\n╰───┴───────╯\n\n```\n\n----------------------------------------\n\nTITLE: Export-env Command Signature - Nushell\nDESCRIPTION: The basic signature format for the export-env command showing parameter structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export-env.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> export-env {flags} (block)\n```\n\n----------------------------------------\n\nTITLE: Par-each Command Signature\nDESCRIPTION: Basic command signature showing the syntax for the par-each command with flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/par-each.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> par-each {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The basic signature for the query web command showing the required flags format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_web.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nquery web {flags}\n```\n\n----------------------------------------\n\nTITLE: Nushell Bits Command Signature\nDESCRIPTION: The basic signature for using the bits command module in Nushell. This command requires using one of its subcommands as it cannot be used standalone.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> bits {flags} \n```\n\n----------------------------------------\n\nTITLE: Accessing System Information with sys\nDESCRIPTION: This snippet refers to the `sys` module in Python, which provides access to system-specific parameters and functions. The `sys` module can be used to retrieve information about the Python interpreter, the operating system, and the command-line arguments. It's a powerful tool for interacting with the system environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n\"sys\"\n```\n\n----------------------------------------\n\nTITLE: Comma Skip Example\nDESCRIPTION: Demonstrates handling of commas outside brace expressions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 'Welcome\\, {home,mon ami}!' | str expand\n```\n\n----------------------------------------\n\nTITLE: Last Command with Binary Data\nDESCRIPTION: Example showing how to get the last 2 bytes from binary data with hexadecimal representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/last.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[01 23 45] | last 2\nLength: 2 (0x2) bytes | printable whitespace ascii_other non_ascii\n00000000:   23 45                                                #E\n```\n\n----------------------------------------\n\nTITLE: HTTP Requests in PowerShell using Invoke-WebRequest\nDESCRIPTION: Demonstrates how to perform HTTP POST requests in PowerShell using `Invoke-WebRequest`. This is equivalent to the `post` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Invoke-WebRequest\"\n```\n\n----------------------------------------\n\nTITLE: Returning First Two Items from List in Nushell\nDESCRIPTION: This example shows how to use the 'first' command with a numeric argument to return the first two items from a list in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/first.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | first 2\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 2 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Changes to match Command Behavior\nDESCRIPTION: The `match` command's behavior has been altered so that it no longer executes closures returned from match arms, and instead, it now returns the closure itself.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\nmatch 1 { _ => {|| print hi} }\n# => closure_1090\n```\n\n----------------------------------------\n\nTITLE: Create Temporary File with Suffix\nDESCRIPTION: Creates a temporary file in the current working directory with a specified .txt suffix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mktemp.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> mktemp --suffix .txt\n<WORKING_DIR>/tmp.lekjbhelyx.txt\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Directories in the Stack in Nushell\nDESCRIPTION: Example showing how to add multiple directories to the stack and view the full list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/directory_stack.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\ndirs add ../nu_scripts\ndirs add ~\ndirs\n# => ╭───┬────────┬────────────────────────────────────╮\n# => │ # │ active │                path                │\n# => ├───┼────────┼────────────────────────────────────┤\n# => │ 0 │ false  │ /home/myuser/src/repo/nushell      │\n# => │ 1 │ false  │ /home/myuser/src/repo/reedline     │\n# => │ 2 │ false  │ /home/myuser/src/repo/nu_scripts   │\n# => │ 3 │ true   │ /home/myuser                       │\n# => ╰───┴────────┴────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for Command Filtering\nDESCRIPTION: Vue.js computed property that filters pages to extract bytes-related commands and sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/bytes.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('bytes'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Filesize\nDESCRIPTION: Shows how to convert an integer value to filesize format. The integer 5 is converted to '5 B' (5 bytes).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_filesize.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n5 | into filesize\n```\n\n----------------------------------------\n\nTITLE: Interpreting Null as False - Nushell\nDESCRIPTION: This snippet shows how to use the 'into bool' command with the --relaxed flag to interpret a null value as false in the conversion process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> null | into bool --relaxed\nfalse\n```\n\n----------------------------------------\n\nTITLE: Sorting LazyFrame by Multiple Columns\nDESCRIPTION: Example demonstrating how to sort a dataframe by multiple columns with mixed sort directions using the -r flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sort-by.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [6 2] [1 1] [1 4] [2 4]] | polars into-df | polars sort-by [a b] -r [false true]\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 1 │ 4 │\n│ 1 │ 1 │ 1 │\n│ 2 │ 2 │ 4 │\n│ 3 │ 6 │ 2 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Filtering Processes by CPU Usage in Nushell\nDESCRIPTION: Demonstrates filtering the ps command output to show only processes using more than 10% CPU, showcasing how Nushell commands can be piped together to analyze system information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nps | where cpu > 10\n# => ───┬──────┬──────────────────┬─────────┬────────┬──────────┬─────────\n# =>  # │ pid  │ name             │ status  │ cpu    │ mem      │ virtual\n# => ───┼──────┼──────────────────┼─────────┼────────┼──────────┼─────────\n# =>  0 │ 3971 │ Google Chrome He │ Running │ 5.1263 │  99.4 MB │  5.5 GB\n# =>  1 │  360 │ iTerm2           │ Running │ 6.6635 │ 218.6 MB │  6.0 GB\n# => ───┴──────┴──────────────────┴─────────┴────────┴──────────┴─────────\n```\n\n----------------------------------------\n\nTITLE: Configuring Starship Prompt in Nushell\nDESCRIPTION: This snippet defines environmental variables and prompt creation function for integrating Starship into the Nushell environment, allowing for custom prompt displays and configurations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/3rdpartyprompts.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n$env.STARSHIP_SHELL = \"nu\"\n\ndef create_left_prompt [] {\n    starship prompt --cmd-duration $env.CMD_DURATION_MS $'--status=($env.LAST_EXIT_CODE)'\n}\n\n# Use nushell functions to define your right and left prompt\n$env.PROMPT_COMMAND = { || create_left_prompt }\n$env.PROMPT_COMMAND_RIGHT = \"\"\n\n# The prompt indicators are environmental variables that represent\n# the state of the prompt\n$env.PROMPT_INDICATOR = \"\"\n$env.PROMPT_INDICATOR_VI_INSERT = \": \"\n$env.PROMPT_INDICATOR_VI_NORMAL = \"〉\"\n$env.PROMPT_MULTILINE_INDICATOR = \"::: \"\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Completer System in Nushell\nDESCRIPTION: Combined completer system that routes completion requests to appropriate completers based on command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/external_completers.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nlet multiple_completers = {|spans|\n    match $spans.0 {\n        ls => $ls_completer\n        git => $git_completer\n        _ => $default_completer\n    } | do $in $spans\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding UTF-16 to UTF-8 String in Nushell\nDESCRIPTION: This example shows how to decode a UTF-16 encoded binary string into a Nushell UTF-8 string using the 'decode' command with 'utf-16be' encoding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[00 53 00 6F 00 6D 00 65 00 20 00 44 00 61 00 74 00 61] | decode utf-16be\n```\n\n----------------------------------------\n\nTITLE: Base32 Command Signature\nDESCRIPTION: The basic command signature for the encode base32 operation, showing the command structure with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base32.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> encode base32 {flags} \n```\n\n----------------------------------------\n\nTITLE: Touch Command Basic Signature\nDESCRIPTION: Basic command signature showing the touch command syntax with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> touch {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Unique Command Signature\nDESCRIPTION: Shows the basic command signature for the polars unique operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unique.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars unique {flags}\n```\n\n----------------------------------------\n\nTITLE: Reversing Multiple Strings in a List with Nushell\nDESCRIPTION: Example demonstrating how to reverse multiple strings in a list, where each string is reversed individually and the result is presented as a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_reverse.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ['Nushell' 'is' 'cool'] | str reverse\n╭───┬─────────╮\n│ 0 │ llehsuN │\n│ 1 │ si      │\n│ 2 │ looc    │\n╰───┴─────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Multiplying List Elements in Nushell\nDESCRIPTION: Example showing how to multiply each element in a list by 2 using the each command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3] | each {|e| 2 * $e }\n```\n\n----------------------------------------\n\nTITLE: Executing Polars Summary Command in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'polars summary' command to generate descriptive statistics for a dataframe in Nushell. It creates a simple dataframe and applies the summary command to it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_summary.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 1] [1 1]] | polars into-df | polars summary\n```\n\n----------------------------------------\n\nTITLE: Signature of polars fetch command in Nushell\nDESCRIPTION: The command signature shows that polars fetch takes an optional flags parameter and a required rows parameter that specifies the number of rows to be fetched from the lazyframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_fetch.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> polars fetch {flags} (rows)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'bits shr' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'bits shr' operation in Nushell, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shr.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bits shr {flags} (bits)\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `mv` to Python's `shutil.move`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `mv` command using Python's `shutil.move`. This shows how to move files or directories in Python, analogous to how `mv` works in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"shutil.move\"\n```\n\n----------------------------------------\n\nTITLE: Displaying SQLite Database Schema with Nushell Command\nDESCRIPTION: This code snippet demonstrates how to display the schema of a SQLite database using Nushell. The command uses the `open` keyword to read a SQLite database file named `foo.db` and then pipes it to the `schema` command to show its structure. There are no specific dependencies, but the SQLite database file must be accessible. The command expects an input of a database file and outputs its schema.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/schema.md#2025-04-19_snippet_0\n\nLANGUAGE: Nushell\nCODE:\n```\n> open foo.db | schema\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with All Features\nDESCRIPTION: Command to install Nushell with all features enabled using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> cargo install nu --all-features\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data CSV in Nushell\nDESCRIPTION: Shows how to create a CSV file with test data for DataFrame operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n\"int_1,int_2,float_1,float_2,first\\n9,14,0.4,3.0,a\\n8,13,0.3,2.0,a\\n7,12,0.2,1.0,a\\n6,11,0.1,0.0,b\" | save --raw --force test_small_a.csv\n```\n\n----------------------------------------\n\nTITLE: Nushell `from vcf` Command Signature\nDESCRIPTION: The command signature for the `from vcf` command, showing its basic usage syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_vcf.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from vcf {flags} \n```\n\n----------------------------------------\n\nTITLE: Measure Object in Nushell and PowerShell\nDESCRIPTION: The `size` command measures the size or number of elements. In PowerShell, `Measure-Object` or `measure` are used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Defining the Where Command Signature in Rust\nDESCRIPTION: This Rust code snippet shows the definition of the 'where' command signature in Nushell, specifying that it requires a condition parameter of SyntaxShape::Math type.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nSignature::build(\"where\").required(\n    \"condition\",\n    SyntaxShape::Math,\n    \"the condition that must match\",\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Version Information with sys\nDESCRIPTION: This snippet illustrates how to retrieve Python version information using `sys.version` and `sys.version_info`. `sys.version` provides a string containing the version, while `sys.version_info` returns a tuple with major, minor, and micro version numbers. This information is useful for determining compatibility and feature support.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n\"sys.version, sys.version_info\"\n```\n\n----------------------------------------\n\nTITLE: Applying Bitwise XOR to Binary Data with Specified Endianness in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'bits xor' command with the '--endian' flag to perform a bitwise XOR operation on binary data of varying lengths with specified endianness in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_xor.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n0x[ca fe] | bits xor 0x[aa] --endian big\n```\n\n----------------------------------------\n\nTITLE: Importing Command Line History with Input\nDESCRIPTION: This snippet demonstrates how to append a specific string, `foo`, to the current history using the 'history import' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/history_import.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> echo foo | history import\n\n```\n\n----------------------------------------\n\nTITLE: Defining from yml Command Signature in Nushell\nDESCRIPTION: Signature definition for the 'from yml' command that parses YAML/YML formatted text into a table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_yml.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from yml {flags} \n```\n\n----------------------------------------\n\nTITLE: Error Message for Invalid Login Shell Change\nDESCRIPTION: This shell script snippet shows the error message displayed when attempting to change the login shell to Nushell when it's not listed in the /etc/shells file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/default_shell.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nchsh: /home/user/.cargo/bin/nu is an invalid shell\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Table Modes in Nushell\nDESCRIPTION: Examples showing different table border modes in Nushell with their visual outputs. The snippet demonstrates switching between 'rounded' and 'psql' modes and displaying the first 5 entries from the table mode list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.table.mode = 'rounded'\ntable --list | first 5\n# => ╭───┬────────────────╮\n# => │ 0 │ basic          │\n# => │ 1 │ compact        │\n# => │ 2 │ compact_double │\n# => │ 3 │ default        │\n# => │ 4 │ heavy          │\n# => ╰───┴────────────────╯\n\n$env.config.table.mode = 'psql'\ntable --list | first 5\n# =>  0 | basic\n# =>  1 | compact\n# =>  2 | compact_double\n# =>  3 | default\n# =>  4 | heavy\n```\n\n----------------------------------------\n\nTITLE: Structuring Configuration Options for Nushell\nDESCRIPTION: This code snippet defines how the configuration options for Nushell should be arranged in a structured manner. It organizes various settings into subrecords for improved readability and future extensibility.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n  ls: {\n    use_ls_colors: true # use the LS_COLORS environment variable to colorize output\n    clickable_links: true # enable or disable clickable links. Your terminal has to support links.\n  }\n  rm: {\n    always_trash: true # always act as if -t was given. Can be overridden with -p\n  }\n  cd: {\n    abbreviations: true # allows `cd s/o/f` to expand to `cd some/other/folder`\n  }\n  table: {\n    mode: rounded # basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other\n    index_mode: always # \"always\" show indexes, \"never\" show indexes, \"auto\" = show indexes when a table has \"index\" column\n    trim: {\n      methodology: wrapping # wrapping or truncating\n      wrapping_try_keep_words: true # A strategy used by the 'wrapping' methodology\n      truncating_suffix: \"...\" # A suffix used by the 'truncating' methodology\n    }\n  }\n  history: {\n    max_size: 10000 # Session has to be reloaded for this to take effect\n    sync_on_enter: true # Enable to share history between multiple sessions, else you have to close the session to write history to file\n    file_format: \"plaintext\" # \"sqlite\" or \"plaintext\"\n  }\n  completions: {\n    case_sensitive: false # set to true to enable case-sensitive completions\n    quick: true  # set this to false to prevent auto-selecting completions when only one remains\n    partial: true  # set this to false to prevent partial filling of the prompt\n    algorithm: \"prefix\"  # prefix or fuzzy\n    external: {\n      enable: true # set to false to prevent nushell looking into $env.PATH to find more suggestions, `false` recommended for WSL users as this look up my be very slow\n      max_results: 100 # setting it lower can improve completion performance at the cost of omitting some options\n      completer: null # check 'carapace_completer' above as an example\n    }\n  }\n  filesize: {\n    metric: true # true => KB, MB, GB (ISO standard), false => KiB, MiB, GiB (Windows standard)\n    format: \"auto\" # b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, zb, zib, auto\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating File-based Overlay\nDESCRIPTION: Example demonstrating how to create an overlay from a file containing environment definitions\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_use.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 'export-env { $env.FOO = \"foo\" }' | save spam.nu\n    overlay use spam.nu\n    $env.FOO\n```\n\n----------------------------------------\n\nTITLE: Basic Split Cell-Path Example in Nushell\nDESCRIPTION: Demonstrates splitting a simple cell-path with an optional component into its constituent parts. The output shows each component and whether it's optional.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_cell-path.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$.5?.c | split cell-path\n```\n\n----------------------------------------\n\nTITLE: Using the Get and Wrap Commands\nDESCRIPTION: Examples showing how to use the get command to extract names and wrap command to create named tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-18-nushell-0_7_0.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> ls | get name\n────┬────────────────────\n #  │ <value>\n────┼────────────────────\n  0 │ target\n  1 │ CODE_OF_CONDUCT.md\n  2 │ .cargo\n  3 │ src\n  4 │ features.toml\n  5 │ TODO.md\n```\n\nLANGUAGE: shell\nCODE:\n```\n> ls | get name | wrap filename\n────┬────────────────────\n #  │ filename\n────┼────────────────────\n  0 │ target\n  1 │ CODE_OF_CONDUCT.md\n  2 │ .cargo\n  3 │ src\n  4 │ features.toml\n  5 │ TODO.md\n```\n\n----------------------------------------\n\nTITLE: Signature of stor import Command in Nushell\nDESCRIPTION: The command signature for the 'stor import' command used to import a SQLite database file into Nushell's in-memory SQLite database.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_import.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> stor import {flags} \n```\n\n----------------------------------------\n\nTITLE: Vue Component for Command List Filtering\nDESCRIPTION: Vue.js component that filters pages containing command documentation and sorts them alphabetically by title. Used to populate the command reference table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.indexOf('/commands/docs/') >= 0)\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Month's Calendar in Nushell\nDESCRIPTION: Example showing how to display the current month's calendar by using the 'cal' command without arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cal.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> cal\n\n```\n\n----------------------------------------\n\nTITLE: Nushell 'str screaming-snake-case' Command Signature\nDESCRIPTION: The command signature showing the syntax for the 'str screaming-snake-case' command, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_screaming-snake-case.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> str screaming-snake-case {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Handling GetConfig Engine Call in JSON\nDESCRIPTION: Example of a GetConfig engine call to retrieve the Nushell engine configuration. It includes context and id for tracking the call.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 0,\n    \"id\": 0,\n    \"call\": \"GetConfig\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying System Information\nDESCRIPTION: This snippet demonstrates the `sys` command, which returns system information in a table format. The table contains various system-related details, some of which are nested tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"sys\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Range in C#\nDESCRIPTION: Demonstrates how to create a range of numbers in C# using `Range`. This is equivalent to the `range` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n\"Range\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Command Equivalents in Multiple Languages\nDESCRIPTION: Demonstrates the equivalent filtering commands across different programming languages, including filter, where, and related operations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map_imperative.md#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfilter\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfilter\n```\n\nLANGUAGE: Rust\nCODE:\n```\nfilter\n```\n\nLANGUAGE: Nushell\nCODE:\n```\nwhere\n```\n\n----------------------------------------\n\nTITLE: Parsing Input File with Debug Output in Nushell\nDESCRIPTION: Illustrates using nu-check with the --debug flag to parse an input file and show error messages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-check.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> nu-check --debug script.nu\n```\n\n----------------------------------------\n\nTITLE: Exposing Script Name in Nushell\nDESCRIPTION: This Nushell script utilizes the newly introduced `$env.PROCESS_PATH` to print the script's execution path, similar to using `sys.argv[0]` in Python. No additional dependencies are needed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n#!/usr/bin/env nu\n# in demo.nu\n\ndef main [] {\n    printf $\"I was called as ($env.PROCESS_PATH)\"\n}\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndemo.nu          # will show \"I was called as demo.nu\"\n./demo.nu        # will show \"I was called as ./demo.nu\"\n/path/to/demo.nu # will show \"I was called as /path/to/demo.nu\"\n```\n\n----------------------------------------\n\nTITLE: Encode Command Signature in Nushell\nDESCRIPTION: The basic signature for the encode command showing the required syntax with flags and encoding parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> encode {flags} (encoding)\n```\n\n----------------------------------------\n\nTITLE: Defining Division Behavior in Nushell 0.100.0\nDESCRIPTION: This code snippet illustrates the updated behavior of division operations in Nushell. It shows that division between any two types now consistently returns a float, except in specific cases involving filesize or duration. This ensures better type consistency across operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n(1 / 2 | describe) == float\n(2 / 2 | describe) == float\n(1KB / 1KB | describe) == float\n(2sec / 2sec | describe) == float\n\n# There is no floating point representation for filesizes and durations,\n# so truncating division is used in this case.\n(5B / 2) == 2B\n(2sec / 2.0) == 1sec\n```\n\n----------------------------------------\n\nTITLE: Dropping Rows in Different Order\nDESCRIPTION: Example demonstrating that the order of row numbers doesn't affect the final result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3,4,5] | drop nth 2 0 4\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 3 │\n│ 2 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Polars Integer Command Signature\nDESCRIPTION: The basic command signature for the polars integer operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_integer.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars integer {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'attr example' Command in Nushell\nDESCRIPTION: Specifies the signature for the 'attr example' command, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/attr_example.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> attr example {flags} (description) (example)\n```\n\n----------------------------------------\n\nTITLE: Defining Polars Cache Command Signature in Nushell\nDESCRIPTION: The signature definition for the 'polars cache' command that shows it takes flags as parameters and can process any input type to produce any output type.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cache.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars cache {flags} \n```\n\n----------------------------------------\n\nTITLE: Listing Nushell Core Updates in Markdown\nDESCRIPTION: Markdown list of recent updates and contributions to the main Nushell repository, including new features and bug fixes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-13-twin0103.md#2025-04-19_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## Nushell\n\n- andrasio added [flexible dropping of rows (by desired row number)](https://github.com/nushell/nushell/pull/3917)\n- lily-mara fixed [some long-standing Rustyline issues](https://github.com/nushell/nushell/pull/3916)\n- baoyachi [fixed time format without timezone bug. enhance,optimize suggest upgrade.](https://github.com/nushell/nushell/pull/3914)\n- elferherrera added a [Describe command](https://github.com/nushell/nushell/pull/3907)\n- hedonihilist added a way to [count the size of the directories when calculating the size in DirInfo](https://github.com/nushell/nushell/pull/3902)\n- efx [documented engine-p porting](https://github.com/nushell/nushell/pull/3868)\n```\n\n----------------------------------------\n\nTITLE: Removing a File with os\nDESCRIPTION: This snippet demonstrates how to remove a file using `os.remove` in Python. The function takes the path to the file as an argument.  It's a fundamental operation for deleting files from the file system, but it requires careful error handling to prevent unexpected issues.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"os.remove\"\n```\n\n----------------------------------------\n\nTITLE: Empty Item End Example\nDESCRIPTION: Shows expansion with empty items at the end of a collection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n> \"A{B,C,}\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Nushell Welcome Message Display\nDESCRIPTION: Shows the new welcome message format in Nushell 0.9.0, displaying version information and helpful hints for new users.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-01-28-nushell-0_9_0.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWelcome to Nushell 0.9.0 (type 'help' for more info)\nnushell on 📙 bump_to_0_9_0 is 📦 v0.9.0 via 🦀 v1.40.0\n❯\n```\n\n----------------------------------------\n\nTITLE: Listing Files and Directories in Nushell and PowerShell\nDESCRIPTION: Demonstrates the equivalent of `ls` command in Nushell and PowerShell. In PowerShell, the commands `Get-ChildItem`, `dir`, and `ls` are used for listing files and directories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-ChildItem, dir, ls\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Extra Features\nDESCRIPTION: Installation command for Nushell with additional features enabled using the extra flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-02-16-nushell_0_27.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Rolling Table Columns Right\nDESCRIPTION: Example demonstrating how to roll columns of a table to the right, affecting both headers and data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_right.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b c]; [1 2 3] [4 5 6]] | roll right\n╭───┬───┬───┬───╮\n│ # │ c │ a │ b │\n├───┼───┼───┼───┤\n│ 0 │ 3 │ 1 │ 2 │\n│ 1 │ 6 │ 4 │ 5 │\n╰───┴───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Select Data in Nushell and PowerShell\nDESCRIPTION: The `select` command, marked with `***`, selects specific data.  In PowerShell, `Select-Object` or `select` are used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Listing Rust Files\nDESCRIPTION: Example of using the 'ls' command with a glob pattern to list only Rust files (*.rs).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> ls *.rs\n```\n\n----------------------------------------\n\nTITLE: Importing module with absolute path\nDESCRIPTION: This example shows how to import a module using an absolute path. It assumes that `nupm` module exists in the `~/nushell/modules/` directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nuse ~/nushell/modules/nupm\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer within Negative and Positive Range in Nushell\nDESCRIPTION: Example of generating a random integer between -10 (inclusive) and 10 (inclusive) using the 'random int' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_int.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> random int (-10)..10\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Lazyframe Commands\nDESCRIPTION: An HTML table structure that displays Lazyframe commands and their descriptions. The table uses Vue.js v-for directive to iterate through the filtered commands and display them in alphabetical order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/lazyframe.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using URL Encoding Command in Nushell\nDESCRIPTION: Demonstrates the usage of the new 'url encode' command for percent-encoding URLs, with options to preserve URL structure or encode the entire string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-10-nushell_0_74.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 'https://example.com/foo bar' | url encode\nhttps://example.com/foo%20bar\n> 'https://example.com/foo bar' | url encode --all\nhttps%3A%2F%2Fexample%2Ecom%2Ffoo%20bar\n```\n\n----------------------------------------\n\nTITLE: Stderr Piping Support in Nushell\nDESCRIPTION: This code snippet illustrates how to pipe the stderr output from an external command to another command in Nushell. This feature enhances error handling by allowing users to manage error outputs separately from standard outputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-03-05-nushell_0_91_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ncmd e>| less\n```\n\nLANGUAGE: nushell\nCODE:\n```\ncmd o+e>| less\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings with String Indexing\nDESCRIPTION: Demonstrates finding character positions with str index-of and extracting substrings using str substring with range notation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\n'Hello World!' | str index-of 'o'\n# => 4\n'Hello World!' | str index-of 'r'\n# => 8\n'Hello World!' | str substring 4..8\n# => o Wo\n```\n\n----------------------------------------\n\nTITLE: Basic Nushell Command Formatting\nDESCRIPTION: Demonstrates proper spacing around pipe symbols and command components in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/style_guide.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff' --fgend '0xe81cff'\n```\n\n----------------------------------------\n\nTITLE: Generate Default Random Float\nDESCRIPTION: Generates a random float between 0 and 1 with no range specified.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_float.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> random float\n```\n\n----------------------------------------\n\nTITLE: Export Extern Example - Echo Command Definition\nDESCRIPTION: Demonstrates how to export an external command signature for the 'echo' command, defining it to accept a text parameter of type string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_extern.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nexport extern echo [text: string]\n```\n\n----------------------------------------\n\nTITLE: Displaying Nushell Commands in a Table\nDESCRIPTION: This HTML snippet defines a table to display Nushell commands. It uses Vue.js directives `v-for` to iterate through the `commands` array and create a row for each command. Each row includes a link to the command's documentation page and a description of the command's usage, obtained from the frontmatter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/command_reference.md#2025-04-19_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tr>\n    <th>コマンド</th>\n    <th>説明 </th>\n  </tr>\n  <tr v-for=\"command in commands\">\n   <td><a :href=\"command.path\"><code>{{ command.title }}</code></a></td>\n   <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Type Error in Nushell\nDESCRIPTION: This snippet shows an error message when incompatible types (duration and filesize) are used in a mathematical operation. Nushell provides readable error messages to help users understand type compatibility issues.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nerror: Coercion error\n  ┌─ shell:1:3\n  │\n1 │ = 1min + 1kb\n  │   ^^^^   --- filesize(in bytes)\n  │   │\n  │   duration\n```\n\n----------------------------------------\n\nTITLE: Process Search in Nushell\nDESCRIPTION: Searches for a specific process by name and displays its details including PID, CPU usage, memory usage and virtual memory size.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/system.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nps | where name == Notepad2.exe\n```\n\n----------------------------------------\n\nTITLE: Computing Log2 for Multiple Values in Nushell\nDESCRIPTION: Shows how to use the 'math log' command with base 2 on a list of values [16, 8, 4]. The output is presented in a tabular format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_log.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [16 8 4] | math log 2\n╭───┬──────╮\n│ 0 │ 4.00 │\n│ 1 │ 3.00 │\n│ 2 │ 2.00 │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature for str pascal-case\nDESCRIPTION: The signature syntax for the str pascal-case command in Nushell, showing the basic command structure with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_pascal-case.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str pascal-case {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Sampling Rows from Dataframe in Nushell\nDESCRIPTION: Demonstrates how to sample a single row from a dataframe using the 'polars sample' command with the '--n-rows' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sample.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars sample --n-rows 1\n```\n\n----------------------------------------\n\nTITLE: Using Custom Themes in Nushell Tables\nDESCRIPTION: Example showing how to apply a custom theme ('basic' in this case) to a table for a single rendering operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [2 [4 4]]] | table --theme basic\n```\n\n----------------------------------------\n\nTITLE: Writing Multiline Commands in Nushell\nDESCRIPTION: Shows how to create a table using multiline syntax in Nushell. This example demonstrates the same table as above but with improved readability through line breaks and optional commas to separate cells.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-01-nushell_0_19.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\necho [\n[name, size];\n[ST, 185]\n[KJ, 160]\n]\n```\n\n----------------------------------------\n\nTITLE: Polars filter-with Command Signature\nDESCRIPTION: The basic command signature for the polars filter-with operation, showing the required mask or expression parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_filter-with.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars filter-with {flags} (mask or expression)\n```\n\n----------------------------------------\n\nTITLE: Taking Elements Until Positive in Nushell\nDESCRIPTION: Demonstrates using 'take until' to take elements from a list until a positive number is encountered. The predicate checks if the element is greater than 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_until.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [-1 -2 9 1] | take until {|x| $x > 0 }\n```\n\n----------------------------------------\n\nTITLE: Value Selection in Nushell\nDESCRIPTION: Shows how to access object properties in Nushell using the get command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n'{\"name\": \"Alice\", \"age\": 30}' | from json | get name\n```\n\n----------------------------------------\n\nTITLE: Importing specific definitions from a module\nDESCRIPTION: This snippet demonstrates how to selectively import a subset of the definitions of a module (e.g., PI from std/math).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nuse std/math PI\nlet circle = 2 * $PI * $radius\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `skip` to Python's list slicing\nDESCRIPTION: Illustrates how to skip elements in a Python list using slicing, equivalent to the `skip` command in Nushell.  List slicing creates a new list containing a subset of the original list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n\"list[x:]\"\n```\n\n----------------------------------------\n\nTITLE: Getting host information from sys in Nushell\nDESCRIPTION: This snippet uses the `get` command to retrieve the \"host\" column from the output of the `sys` command. The \"host\" column contains a structured table with information about the OS, hostname, and CPU details.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n\tsys | get host\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Lengths of Multiple Binary Values in Nushell\nDESCRIPTION: Example demonstrating how to get the lengths of multiple binary values using 'bytes length' on a list. Returns a table with length values for each binary in the list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_length.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [0x[1F FF AA AB] 0x[1F]] | bytes length\n╭───┬───╮\n│ 0 │ 4 │\n│ 1 │ 1 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: List Operations Example\nDESCRIPTION: Basic list/array operations across different languages showing append and count operations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/nushell_map_imperative.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nappend mylist value\\ncount mylist\n```\n\nLANGUAGE: python\nCODE:\n```\nlist.append(value)\\nlen(list)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.add(value)\\nlist.size\n```\n\nLANGUAGE: cpp\nCODE:\n```\nvector.push_back(value)\\nvector.length()\n```\n\nLANGUAGE: rust\nCODE:\n```\nvec.push(value)\\nvec.len()\n```\n\n----------------------------------------\n\nTITLE: Grouping Records by Key with jq\nDESCRIPTION: Shows how to use jq's group_by function to group an array of objects by a common key ('category').\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\necho '[{\"category\": \"A\", \"value\": 10}, {\"category\": \"B\", \"value\": 20}, {\"category\": \"A\", \"value\": 5}]' |\njq -r 'group_by(.category)'\n```\n\n----------------------------------------\n\nTITLE: SSH Agent Socket Setup\nDESCRIPTION: Shell command to start SSH agent with a specific socket path for system-wide access.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/ssh_agent.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nssh-agent -D -a /run/user/1000/ssh-agent.socket\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Directory Navigation in Nushell\nDESCRIPTION: Shows how Nushell 0.12.0 supports automatic directory navigation like Fish shell, allowing users to change directories by typing their name, including drive switching on Windows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-31-nushell_0_12_0.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0\n❯ docs\nnushell/docs on 📙 master\n❯ ..\nnushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0\n```\n\n----------------------------------------\n\nTITLE: Converting MessagePack Data Using NuShell\nDESCRIPTION: This code demonstrates how to convert a list of values encoded in MessagePack format into Nu values. The \"from msgpack\" command processes hexadecimal input data, converting it to a tabular format within NuShell. No special dependencies are required, but the input must be properly encoded MessagePack data. The output is a table with indexed rows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_msgpack.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[93A3666F6F2AC2] | from msgpack\n╭───┬───────╮\n│ 0 │ foo   │\n│ 1 │    42 │\n│ 2 │ false │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Nushell\nDESCRIPTION: Nushell 0.78 introduces the 'match' expression, enabling pattern matching on values. It supports a variety of patterns and provides a flexible way to handle different value structures such as constants, ranges, records, and lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-04-04-nushell_0_78.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nmatch 3 {\n  1 => { print \"it's a 1\" }\n  1..10 => { print \"it's between 1 and 10\" }\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\nmatch $a {\n  {x: $x, y: 10} => { print $\"y is: 10 and x is: ($x)\" }\n  _ => { print \"the above didn't match, so we print this instead\" }\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\nmatch $list {\n  [$one] => { print \"one element list\" }\n  [$one, $two] => { print \"two element list\" }\n  [$head, ..$tail] => { print $\"the tail of the list is ($tail)\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive File Listing with Property Access in Nushell\nDESCRIPTION: This snippet demonstrates recursive directory listing combined with property access, showing how Nushell can efficiently stream results even for large directory structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nls **/* | echo $it.name\n```\n\n----------------------------------------\n\nTITLE: Spreading List into `run-external` Command in Nushell\nDESCRIPTION: This code snippet demonstrates list spreading into the `run-external` command in Nushell. It defines a list containing the command and its arguments, then spreads this list into the `run-external` command using the `...` operator. This is equivalent to calling `run-external cat hello.txt`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nlet command = [\"cat\" \"hello.txt\"]\nrun-external ...$command\n# => hello world!\n```\n\n----------------------------------------\n\nTITLE: Finding Declarations in Nushell Plugin Development\nDESCRIPTION: This Rust code illustrates how to find and call declarations within the Nushell engine for plugin development. It highlights error handling when a required declaration is not found and how to manipulate data within pipelines.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet nu_highlight = engine.find_decl(\"nu-highlight\")?.ok_or_else(|| {\n    LabeledError::new(\"nu-highlight not found\")\n        .with_label(\"required by my plugin\", call.head)\n})?;\n\nlet input =\n    Value::string(\"if 2 > 3 { 'broken' } else { 'all good' }\", call.head)\n        .into_pipeline_data();\n\nlet output = engine\n    .call_decl(\n        nu_highlight,\n        EvaluatedCall::new(call.head),\n        input,\n        true,\n        false,\n    )?\n    .into_value(call.head)?\n    .into_string()?;\n\nValue::string(format!(\"highlighted string: {output}\"), call.head)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'bits or' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'bits or' operation in Nushell, including the target parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_or.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bits or {flags} (target)\n```\n\n----------------------------------------\n\nTITLE: Checking if a string ends with a specific substring in Nushell\nDESCRIPTION: The 'str ends-with' command checks if a string ends with a specified substring. It supports both single strings and collections, with an option for case-insensitive matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_ends-with.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nstr ends-with {flags} (string) ...rest\n```\n\n----------------------------------------\n\nTITLE: Shuffling a List with random\nDESCRIPTION: This code snippet shows how to shuffle the elements of a list randomly using `random.shuffle` in Python.  The `shuffle` function modifies the list in place, reordering its elements randomly. This is useful in simulations, games, and other applications where you need to introduce randomness.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n\"random.shuffle\"\n```\n\n----------------------------------------\n\nTITLE: Reading and Modifying Version in Cargo.toml\nDESCRIPTION: Demonstrates how to read a version number from Cargo.toml, increment the patch version, and save changes back to the file using Nushell commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/files.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nopen Cargo.toml | get package.version\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen Cargo.toml | upsert package.version { |p| $p | get package.version | inc --patch } | save -f Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Hiding a module definition selectively\nDESCRIPTION: This snippet demonstrates how to selectively hide the 'main' definition from the 'assert' module, which is the 'assert' command itself. The subcommands (like `assert equal`) remain available.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\nuse std/assert\nhide assert main\nassert equal 1 1\n# => assertion passes\n\nassert true\n# => Error:\n# => help: A command with that name exists in module `assert`. Try importing it with `use`\n```\n\n----------------------------------------\n\nTITLE: Word Occurrence Count with Ripgrep\nDESCRIPTION: Demonstrates how to use ripgrep with Nushell to count occurrences of a string across files and sort the results by frequency.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/files.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nrg -c Value | lines | split column \":\" file line_count | into int line_count | sort-by line_count | reverse\n```\n\n----------------------------------------\n\nTITLE: Using Type Inference with CSV Data in Nushell\nDESCRIPTION: Demonstrates Nushell's type inference capabilities when working with CSV data, showing how it automatically detects decimal numbers and allows using numerical operations like sum.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-31-nushell_0_12_0.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n❯ open tests/fixtures/formats//caco3_plastics.csv | get cif_per_net_weight\n───┬─────────\n # │ <value>\n───┼─────────\n 0 │  0.2300\n 1 │  0.3100\n 2 │  0.1400\n 3 │  0.2300\n 4 │  0.2100\n 5 │  0.2800\n 6 │  0.3000\n 7 │  0.2500\n 8 │  0.2800\n───┴─────────\nnushell on 📙 master is 📦 v0.12.0 via 🦀 v1.42.0\n❯ open tests/fixtures/formats//caco3_plastics.csv | get cif_per_net_weight | sum\n2.23\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUID in Nushell\nDESCRIPTION: This command generates a random UUID string. It supports different versions (1, 3, 4, 5, 7) and allows specifying namespace, name, and MAC address for certain versions. The default version is 4 if not specified.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_uuid.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nrandom uuid {flags}\n```\n\n----------------------------------------\n\nTITLE: Creating a mask for unique values in a simple array with Polars in Nushell\nDESCRIPTION: This example demonstrates how to create a boolean mask indicating which values in an array are unique. The result shows that only the first occurrence is marked as true, while all duplicates are marked as false.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-unique.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[5 6 6 6 8 8 8] | polars into-df | polars is-unique\n```\n\n----------------------------------------\n\nTITLE: Using Fuzzy Matching in Nushell\nDESCRIPTION: Example of using fuzzy matching with the new =~ operator in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n❯ ls | where name =~ \"yml\"\n```\n\n----------------------------------------\n\nTITLE: Preserving Custom Definitions When Hiding Overlays in Nushell\nDESCRIPTION: Shows how to use the '--keep-custom' flag with 'overlay hide' to retain custom definitions in the next active overlay when removing the current overlay.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n(zero)> overlay use spam\n\n(spam)> def eggs [] { \"eggs\" }\n\n(spam)> overlay hide --keep-custom spam\n\n(zero)> eggs\neggs\n```\n\n----------------------------------------\n\nTITLE: Encoding Date Value in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of encoding a date value in JSON format for the Nushell plugin protocol, using RFC 3339 format with span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Date\": {\n    \"val\": \"1996-12-19T16:39:57-08:00\",\n    \"span\": {\n      \"start\": 181525,\n      \"end\": 181528\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Directory Copy\nDESCRIPTION: Example of recursively copying a directory to another location.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> cp -r dir_a dir_b\n```\n\n----------------------------------------\n\nTITLE: Calculate e^0\nDESCRIPTION: Example showing how to calculate e raised to the power of zero, which equals 1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_exp.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 0 | math exp\n1\n```\n\n----------------------------------------\n\nTITLE: Empty Item Start Example\nDESCRIPTION: Demonstrates handling of empty items at the start of a collection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> \"A{,B,C}\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for Debug Commands\nDESCRIPTION: Vue.js component script that filters pages to find debug-related commands and sorts them alphabetically by title. It processes the @temp/pages data to generate the command list for display.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/debug.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('debug'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Plugin Commands in Nushell\nDESCRIPTION: Query to show all available plugin commands in the current scope\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_15\n\nLANGUAGE: nu\nCODE:\n```\nscope commands | where type == \"plugin\"\n```\n\n----------------------------------------\n\nTITLE: Reading All Lines From a File in C#\nDESCRIPTION: Demonstrates how to read all lines from a file using `File.ReadAllLines` in C#. This is equivalent to a command like `lines` in Nushell for processing file content line by line.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"File.ReadAllLines\"\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP DELETE Request\nDESCRIPTION: Perform a simple HTTP DELETE request to a specified URL without additional parameters\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_delete.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nhttp delete https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Processing PipelineData Plugin Call Response in JSON\nDESCRIPTION: Example of a successful result with a Nu Value. It contains a PipelineDataHeader with an Int value and span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CallResponse\": [\n    0,\n    {\n      \"Value\": {\n        \"Int\": {\n          \"val\": 42,\n          \"span\": {\n            \"start\": 12,\n            \"end\": 14\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Cargo\nDESCRIPTION: Commands for installing Nushell using Cargo package manager, with optional extra features for dataframes and SQLite support.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-10-18-nushell-0_70.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n\n# With extra features\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Basic Command Signature - Nushell\nDESCRIPTION: The basic signature for the detect columns command with flag options.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/detect_columns.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> detect columns {flags} \n```\n\n----------------------------------------\n\nTITLE: Invalid Record Parsing Example in Nushell\nDESCRIPTION: This snippet demonstrates a previously valid Nushell code that is now considered an error due to changes in record parsing. It highlights a case where `:: 1` used to parse as a record with `':'` as the key, but now results in a parsing error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-09-17-nushell_0_98_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n\"{ :: 1 }\n# This used to parse as { ':': 1 }, but it is now an error.\"\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Record in nushell\nDESCRIPTION: This snippet shows how to convert a duration into a record format in nushell. The command takes a duration input and outputs a record detailing elements of the duration such as weeks, days, hours, and seconds. The input must be a duration expression and the output is a record of its components.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_record.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> (-500day - 4hr - 5sec) | into record\n```\n\n----------------------------------------\n\nTITLE: Formatted Plugin Signature JSON\nDESCRIPTION: Presents the formatted JSON structure of a Nushell plugin signature, showing detailed metadata about the plugin's command interface, parameters, and type information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Signature\": [\n    {\n      \"sig\": {\n        \"name\": \"len\",\n        \"description\": \"calculates the length of its input\",\n        \"extra_description\": \"\",\n        \"search_terms\": [],\n        \"required_positional\": [],\n        \"optional_positional\": [],\n        \"rest_positional\": null,\n        \"vectorizes_over_list\": false,\n        \"named\": [\n          {\n            \"long\": \"help\",\n            \"short\": \"h\",\n            \"arg\": null,\n            \"required\": false,\n            \"desc\": \"Display the help message for this command\",\n            \"var_id\": null,\n            \"default_value\": null\n          }\n        ],\n        \"input_type\": \"String\",\n        \"output_type\": \"Int\",\n        \"input_output_types\": [],\n        \"allow_variants_without_examples\": false,\n        \"is_filter\": false,\n        \"creates_scope\": false,\n        \"allows_unknown_args\": false,\n        \"category\": \"Default\"\n      },\n      \"examples\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Nushell Math Arctanh Command Signature\nDESCRIPTION: Command signature showing the basic syntax for using the math arctanh command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arctanh.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math arctanh {flags} \n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `mv` to Rust's `fs::rename`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `mv` command using Rust's `fs::rename`. This shows how to move files or directories in Rust, analogous to how `mv` works in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_33\n\nLANGUAGE: Rust\nCODE:\n```\n\"fs::rename\"\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Var Command Signature\nDESCRIPTION: The basic command signature for the polars var operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_var.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars var {flags}\n```\n\n----------------------------------------\n\nTITLE: Hiding Last Activated Overlay\nDESCRIPTION: Example showing how to hide the most recently activated overlay.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_hide.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export-env { $env.FOO = \"foo\" } }\n    overlay use spam\n    overlay hide\n\n```\n\n----------------------------------------\n\nTITLE: Nushell Python Plugin Timeit Comparison (0.91.0)\nDESCRIPTION: This snippet demonstrates the execution time of a Python plugin command using `timeit` in Nushell version 0.91.0. It calculates the average execution time for 100 iterations of executing the `nu-python` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n\n# 0.91.0\n> 1..100 | each { timeit { nu-python 1 foo } } | math avg\n40ms 704µs 902ns\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Pull Requests\nDESCRIPTION: A markdown table listing pull requests with contributor names, descriptions and PR numbers for the Nushell project\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| [@fdncred](https://github.com/fdncred) | finish removing terminal_size dep | [#14819](https://github.com/nushell/nushell/pull/14819) |\n| [@fdncred](https://github.com/fdncred) | replace icons in grid with devicons + color | [#14827](https://github.com/nushell/nushell/pull/14827) |\n```\n\n----------------------------------------\n\nTITLE: Updating PATH temporarily in Nu\nDESCRIPTION: Updates the PATH environment variable temporarily using `pathvar add <path>`. This change only affects the current session and is not persisted across sessions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_21\n\nLANGUAGE: nu\nCODE:\n```\n\"pathvar add <path>\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating shuffle command in Nushell\nDESCRIPTION: This snippet shows how to use the new 'shuffle' command in Nushell to randomly reorder the output of 'help commands'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-10-nushell_0_11_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands | shuffle\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type Metadata\nDESCRIPTION: Example showing how to set content-type metadata and display it using the metadata command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata_set.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 'crates' | metadata set --content-type text/plain | metadata\n╭──────────────┬────────────╮\n│ content_type │ text/plain │\n╰──────────────┴────────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Wrap Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'wrap' command, including flags and a required 'name' parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/wrap.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> wrap {flags} (name)\n```\n\n----------------------------------------\n\nTITLE: Generating Histogram Bins with Nushell\nDESCRIPTION: Demonstrates how to create histogram bins from a dataset in Nushell using group-by and each to categorize numbers into ranges of 5.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_22\n\nLANGUAGE: nu\nCODE:\n```\n'[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]'\n| from json\n| group-by --to-table { $in // 5 * 5 }\n| each { |row| {bin: $row.items.0, count: ($row.items | length)} }\n# => ╭───┬─────┬───────╮\n# => │ # │ bin │ count │\n# => ├───┼─────┼───────┤\n# => │ 0 │   1 │     4 │\n# => │ 1 │   5 │     5 │\n# => │ 2 │  10 │     5 │\n# => │ 3 │  15 │     1 │\n# => ╰───┴─────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Script Execution and Flow Control in Nushell\nDESCRIPTION: Commands for running scripts, controlling program flow, and conditional execution in Nushell. These correspond to CMD.EXE's CALL, EXIT, FOR, and IF commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_cmd.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n<filename.bat>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nnu <filename>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nsource <filename>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nuse <filename>\n```\n\nLANGUAGE: nushell\nCODE:\n```\nexit\n```\n\nLANGUAGE: nushell\nCODE:\n```\nfor $<var> in <set> { <command> }\n```\n\nLANGUAGE: nushell\nCODE:\n```\nif $env.LAST_EXIT_CODE >= <number> { <command> }\n```\n\nLANGUAGE: nushell\nCODE:\n```\nif <string> == <string> { <command> }\n```\n\nLANGUAGE: nushell\nCODE:\n```\nif (<filename> | path exists) { <command> }\n```\n\nLANGUAGE: nushell\nCODE:\n```\nif '$<variable>' in (scope variables).name { <command> }\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean Values to Integers in Nushell\nDESCRIPTION: Shows how to convert boolean values to their integer equivalents (0 for false, 1 for true).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_int.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n[false, true] | into int\n```\n\n----------------------------------------\n\nTITLE: Preserving absolute paths when expanding globs - Markdown\nDESCRIPTION: This snippet explains a bug related to the expansion of the tilde symbol (~) to home directories when not quoted, affecting globbing operations. The solution provided in this release corrects the function to handle such cases appropriately.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-03-nushell_0_94_2.md#2025-04-19_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Sorting data by a specific column\nDESCRIPTION: Opens a file, splits it into lines and columns, names the columns, and then sorts the data by the 'primer_nombre' column using the `sort-by` command.  This demonstrates data manipulation after parsing and structuring.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nopen gente.txt | lines | split column \" | \" primer_nombre apellido trabajo | sort-by primer_nombre\n```\n\n----------------------------------------\n\nTITLE: Checking for Cross-Column Elements in a List Column with Polars in Nushell\nDESCRIPTION: Creates a dataframe with a list column and a string column, then checks if the value from the string column is contained in the corresponding list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_list-contains.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet df = [[a, b]; [[a,b,c], a] [[b,c,d], f] [[c,d,f], f]] | polars into-df -s {a: list<str>, b: str};\n                let df2 = $df | polars with-column [(polars col a | polars list-contains b | polars as c)] | polars collect;\n                $df2.c\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Save Command Signature\nDESCRIPTION: The basic command signature for saving Polars dataframes to disk\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars save {flags} (path)\n```\n\n----------------------------------------\n\nTITLE: Adding a Column with polars expr-not in Nushell\nDESCRIPTION: Creates a dataframe with a new column that shows which values in column 'a' are NOT greater than 2. The example demonstrates creating a dataframe, applying a NOT expression to a condition, and renaming the result column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_expr-not.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a]; [1] [2] [3] [4] [5]] | polars into-df\n                    | polars with-column [(((polars col a) > 2)\n                    | polars expr-not\n                    | polars as a_expr_not)]\n                    | polars collect\n                    | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Filter Processes by Name in Nushell\nDESCRIPTION: Filters and displays processes that have 'nu' in their name using pattern matching.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ps.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> ps | where name =~ 'nu'\n```\n\n----------------------------------------\n\nTITLE: Counting Length of Null Value using Length Command in Nushell\nDESCRIPTION: Demonstrates how the 'length' command handles null values, returning a count of zero for a null input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/length.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> null | length\n0\n```\n\n----------------------------------------\n\nTITLE: Checking Empty List with Nushell is-empty\nDESCRIPTION: This example shows using `is-empty` in Nushell to check if a list is empty. It takes a list as input and returns a boolean indicating whether the list is empty. There are no external dependencies other than having Nushell installed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-empty.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [] | is-empty\ntrue\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'explain' Command in Nushell\nDESCRIPTION: This snippet shows the signature for the 'explain' command in Nushell. It takes flags and a closure as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/explain.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> explain {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Polars Get-Hour Command Signature\nDESCRIPTION: The basic command signature for the polars get-hour command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-hour.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars get-hour {flags} \n```\n\n----------------------------------------\n\nTITLE: Limiting Results with 'first' Command in Nushell\nDESCRIPTION: Combining 'sort-by' and 'first' commands to display only the first 5 smallest files in the directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nls | sort-by size | first 5\n# => ---+---------+------+----------+--------+------------+------------\n# =>  # | name    | type | readonly | size   | accessed   | modified\n# => ---+---------+------+----------+--------+------------+------------\n# =>  0 | skip.rs | File |          | 1.7 KB | 2 days ago | 2 days ago\n# =>  1 | add.rs  | File |          | 2.7 KB | 2 days ago | 2 days ago\n# =>  2 | edit.rs | File |          | 2.7 KB | 2 days ago | 2 days ago\n# =>  3 | sum.rs  | File |          | 3.0 KB | 2 days ago | 2 days ago\n# =>  4 | tree.rs | File |          | 3.0 KB | 2 days ago | 2 days ago\n# => ---+---------+------+----------+--------+------------+------------\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Ignore Flags\nDESCRIPTION: Demonstration of running a closure while ignoring command errors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> do --ignore-errors { thisisnotarealcommand }\n```\n\n----------------------------------------\n\nTITLE: Creating a Record with Comma-Separated Key-Value Pairs in Nushell\nDESCRIPTION: Demonstrates how to create a record using comma-separated key-value pairs. The record contains 'name' and 'rank' fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/record.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> {name: \"Sam\", rank: 10}\n```\n\n----------------------------------------\n\nTITLE: From TOML Command Signature in Nushell\nDESCRIPTION: Defines the signature of the 'from toml' command, showing its basic syntax and usage pattern. The command takes TOML-formatted string input and produces a record output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_toml.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from toml {flags} \n```\n\n----------------------------------------\n\nTITLE: Command Signature for str camel-case in Nushell\nDESCRIPTION: The signature of the 'str camel-case' command showing its syntax and parameter structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_camel-case.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> str camel-case {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Getting system information with sys in Nushell\nDESCRIPTION: This snippet demonstrates the `sys` command in Nushell, which provides information about the system on which Nushell is running. The output includes structured tables within cells, requiring specific column selection to view the data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n\tsys\n\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer with Lower Bound in Nushell\nDESCRIPTION: Example of generating a random integer greater than or equal to 100000 using the 'random int' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_int.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> random int 100000..\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias for Improved 'df' Command in Nushell\nDESCRIPTION: Shows how to create an alias that combines the 'df' command with the new 'detect columns' feature and other refinements for easier use.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-11-16-nushell_0_40.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> alias df = (^df | detect columns | drop column | into filesize 1K-blocks Used Available)\n```\n\n----------------------------------------\n\nTITLE: Updating a Value at a Specific Index in a List\nDESCRIPTION: Example showing how to update a value at a specific index (position 1) in a list, replacing 2 with 4.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | update 1 4\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 4 │\n│ 2 │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Adding Flags to Custom Commands\nDESCRIPTION: Demonstrates how to define command flags (named parameters) alongside positional parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [\n  name: string\n  --age: int\n] {\n  echo $name $age\n}\n```\n\n----------------------------------------\n\nTITLE: Weekly Changelog in Markdown\nDESCRIPTION: A markdown-formatted list of contributions and updates to the Nushell project, including links to pull requests and descriptions of changes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-02-19-twin0078.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #78\n\n- WatsonThink added [tilde support to `source`](https://github.com/nushell/nushell/pull/3059)\n- rezural added [terminal height to the internal host information](https://github.com/nushell/nushell/pull/3064)\n- fdncred improved the [`table` test app](https://github.com/nushell/nushell/pull/3065), improved [the help text](https://github.com/nushell/nushell/pull/3054)\n- stormasm also improved the [`table` test app](https://github.com/nushell/nushell/pull/3067)\n- LhKipp updated the [default config](https://github.com/nushell/nushell/pull/3069)\n- ahkrr also updated the [default config](https://github.com/nushell/nushell/pull/3060)\n- andrasio fixed the [PATH bug that slipped into 0.27.0](https://github.com/nushell/nushell/pull/3072), improved the [tests for .nu-env](https://github.com/nushell/nushell/pull/3078)\n- jonathandturner added [column truncation](https://github.com/nushell/nushell/pull/3061), released [0.27](https://github.com/nushell/nushell/pull/3063), released [0.27.1](https://github.com/nushell/nushell/pull/3073), fixed [`let-env`](https://github.com/nushell/nushell/pull/3057), fixed [error on external prompts on startup](https://github.com/nushell/nushell/pull/3056)\n- ilius fixed some [parsing issues with matching brackets](https://github.com/nushell/nushell/pull/3053)\n- watzon updated [the README](https://github.com/nushell/nushell/pull/3052)\n```\n\n----------------------------------------\n\nTITLE: Importing Directory Stack Aliases in Nushell\nDESCRIPTION: Command to import the shells-aliases that provide alternative syntax for the directory stack commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/directory_stack.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nuse std/dirs shells-aliases *\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message in Nushell\nDESCRIPTION: This is an example of an error message displayed by Nushell. It shows the error type, the line number where the error occurred, a snippet of the code that caused the error, and a helpful suggestion ('did you mean 'for'?') to guide the user in resolving the issue. The error also indicates that the external command failed because the file or directory was not found.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nError: nu::shell::external_command\n\n  × External command failed\n   ╭─[entry #4:1:1]\n 1 │ foo\n   · ─┬─\n   ·  ╰── did you mean 'for'?\n   ╰────\n  help: No such file or directory (os error 2)\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine of Pi/2 in Nushell\nDESCRIPTION: Demonstrates how to calculate the sine of π/2 using the 'math sin' command in Nushell. The result is rounded to 4 decimal places using the 'math round' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sin.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 3.141592 / 2 | math sin | math round --precision 4\n1\n```\n\n----------------------------------------\n\nTITLE: Case-Specific File Name Pattern Matching in Nushell\nDESCRIPTION: Example showing how to search for files and folders that begin with either uppercase C or lowercase c.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> glob \"[Cc]*\"\n\n```\n\n----------------------------------------\n\nTITLE: Indented XML Formatting in Nushell\nDESCRIPTION: Example showing how to use the --indent flag to format XML with custom indentation (3 spaces in this case).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_xml.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> {tag: note content : [{tag: remember content : [Event]}]} | to xml --indent 3\n<note>\n   <remember>Event</remember>\n</note>\n```\n\n----------------------------------------\n\nTITLE: Partial Escaping in XML Conversion\nDESCRIPTION: Example demonstrating the --partial-escape flag which produces fewer escaping sequences in the resulting XML, only escaping mandatory characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_xml.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> {tag: note attributes: {a: \"'qwe'\\\\\"} content: [\"\\\"'\"]} | to xml --partial-escape\n<note a=\"'qwe'\\\">\"\\'</note>\n```\n\n----------------------------------------\n\nTITLE: sys users Command Signature in Nushell\nDESCRIPTION: The signature for the 'sys users' command showing its basic syntax. The command doesn't require any arguments but accepts optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_users.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> sys users {flags} \n```\n\n----------------------------------------\n\nTITLE: Bash-style File Redirection Examples\nDESCRIPTION: Traditional Bash file redirection syntax showing output redirection and error redirection patterns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/philosophy_0_80.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat foo.txt > bar.txt\ncat foo.txt >> bar.txt\ncat foo.txt 2> bar.txt\n```\n\n----------------------------------------\n\nTITLE: Example Usage of sys users Command in Nushell\nDESCRIPTION: A simple example showing how to use the 'sys users' command to display information about all users on the system. The command returns a table with user information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_users.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> sys users\n\n```\n\n----------------------------------------\n\nTITLE: Keeping Custom Commands After Hiding Overlay\nDESCRIPTION: Example showing how to keep custom commands when hiding an overlay using the --keep-custom flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_hide.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export def foo [] { \"foo\" } }\n    overlay use spam\n    def bar [] { \"bar\" }\n    overlay hide spam --keep-custom\n    bar\n\n```\n\n----------------------------------------\n\nTITLE: Strip Characters From Start Only Example\nDESCRIPTION: Shows how to strip exclamation marks from only the start of strings in a dataframe column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-strip-chars.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n[[text]; [\"!!!hello\"] [\"!!!world\"] [\"!!!test\"]] | polars into-df | polars select (polars col text | polars str-strip-chars --start \"!\") | polars collect\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Chart Commands with Vue.js\nDESCRIPTION: This Vue.js component filters pages to find chart-related Nushell commands, sorts them alphabetically, and computes a list for display. It requires the '@temp/pages' import to access page data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/chart.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('chart'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Commands in Nushell\nDESCRIPTION: Demonstrates creating a basic custom command that adds two numbers. Custom commands can be defined and used anywhere in the scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndef add [x, y] {\n    = $x + $y\n}\n\nadd 1 5\n```\n\n----------------------------------------\n\nTITLE: Counting Bytes in Binary Data using Length Command in Nushell\nDESCRIPTION: Illustrates the use of the 'length' command to count the number of bytes in binary data. The example uses a binary representation of two bytes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/length.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[01 02] | length\n2\n```\n\n----------------------------------------\n\nTITLE: Printing Specific Resource Limits in Nushell\nDESCRIPTION: Example showing how to print specific resource limits (core size, data size, and file size) using the ulimit command with multiple flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ulimit.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ulimit --core-size --data-size --file-size\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FloatRange in Nushell\nDESCRIPTION: Example of a floating-point range. The range starts at 7.5, has a step of 1, and includes 10.5 as the end value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_56\n\nLANGUAGE: nu\nCODE:\n```\n7.5..10.5\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Range\": {\n    \"val\": {\n      \"FloatRange\": {\n        \"start\": 7.5,\n        \"step\": 1,\n        \"end\": { \"Included\": 10.5 }\n      }\n    },\n    \"span\": {\n      \"start\": 1380,\n      \"end\": 1389\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Cargo\nDESCRIPTION: Commands for installing Nushell using Cargo, including options for extra features and experimental paging.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-05-11-nushell_0_31.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=extra\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=table-pager\n```\n\n----------------------------------------\n\nTITLE: Decoding Arbitrary Binary Data using NuShell\nDESCRIPTION: This code snippet demonstrates how to decode arbitrary base32hex encoded binary data. It takes a string input and converts it to binary output. The example highlights decoding with padding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base32hex.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> \"ATNAQ===\" | decode base32hex\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   57 6e ad                                             Wn×\n```\n\n----------------------------------------\n\nTITLE: Appending and Concatenating Lists in Nushell\nDESCRIPTION: This code snippet illustrates the use of the `++` operator for concatenation and the `append` command for appending values to a list in Nushell.  It demonstrates the corrected usage after a breaking change where `++` now only performs concatenation, requiring `append` for adding single elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nmut list = [1 2]\n$list ++= [3]\n$list = $list | append 4\n```\n\n----------------------------------------\n\nTITLE: Killing a Job in Nushell\nDESCRIPTION: This example demonstrates how to spawn a background job using `job spawn` and then immediately kill it using `job kill`. The `id` of the spawned job is captured in a variable and then passed to `job kill` to terminate the job.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job_kill.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> let id = job spawn { sleep 10sec }; job kill $id\n```\n\n----------------------------------------\n\nTITLE: Plugin Dependencies Import\nDESCRIPTION: Required Python module imports for JSON handling and system operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport sys\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell Table Mode to Light\nDESCRIPTION: Sets the Nushell table display mode to light, which provides a less visually heavy table design. This command changes the configuration setting for how tables are displayed in the terminal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-09-24-nushell_0_3_0.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> config --set [table_mode light]\n```\n\n----------------------------------------\n\nTITLE: Job Command Signature in Nushell\nDESCRIPTION: Base command for working with background jobs, requiring a subcommand to perform specific actions on jobs\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> job {flags}\n```\n\n----------------------------------------\n\nTITLE: Defining Exit Command Signature in Nushell\nDESCRIPTION: Specifies the signature of the 'exit' command in Nushell, including optional flags and an exit code parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/exit.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> exit {flags} (exit_code)\n```\n\n----------------------------------------\n\nTITLE: Using Duration Values in Nushell File Filtering\nDESCRIPTION: This snippet demonstrates how to use the new duration support in Nushell to filter files based on when they were accessed. The example shows filtering files that were accessed less than a week ago using the '<1w' duration syntax with the 'where' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n❯ ls | where accessed < 1w\n━━━┯━━━━━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━\n # │ name          │ type      │ size     │ accessed    │ modified\n───┼───────────────┼───────────┼──────────┼─────────────┼─────────────\n 0 │ Cargo.toml    │ File      │   4.7 KB │ an hour ago │ an hour ago\n 1 │ Makefile.toml │ File      │    449 B │ 2 days ago  │ 2 days ago\n 2 │ README.md     │ File      │  19.5 KB │ an hour ago │ an hour ago\n 3 │ Cargo.lock    │ File      │ 170.7 KB │ an hour ago │ an hour ago\n 4 │ crates        │ Directory │   4.1 KB │ an hour ago │ an hour ago\n 5 │ TODO.md       │ File      │   1.3 KB │ an hour ago │ an hour ago\n━━━┷━━━━━━━━━━━━━━━┷━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━\n```\n\n----------------------------------------\n\nTITLE: Advanced Regex Replacements with fancy-regex in Nushell - Example 2\nDESCRIPTION: Demonstrates using character classes with hexadecimal digits in a replacement pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n> 'GHIKK-9+*' | str replace -r '[*[:xdigit:]+]' 'z'\nGHIKK-z+*\n```\n\n----------------------------------------\n\nTITLE: Command Reference Table Template\nDESCRIPTION: HTML table template that displays command documentation including command name, categories, and usage information. Uses Vue directives to iterate through filtered commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/README.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Categories</th>\n    <th>Description</th>\n    <th>Feature</th>\n  </tr>\n  <tr v-for=\"command in commands\">\n   <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n   <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.categories }}</td>\n   <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: String Literal vs Glob Interpretation in Nushell\nDESCRIPTION: Shows how quoted strings are interpreted as literals rather than glob patterns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nopen \"*.txt\"  # it's quoted, opens a file named `*.txt`\nopen '*.txt'  # it's quoted, opens a file named `*.txt`\n```\n\n----------------------------------------\n\nTITLE: Defining the Polars agg Command Signature in Nushell\nDESCRIPTION: Shows the command signature for the 'polars agg' command, which accepts expressions that define the aggregations to be applied to grouped data in a LazyFrame.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_agg.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars agg {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Join Strings in Column Example\nDESCRIPTION: Example demonstrating how to join strings in a column using a comma delimiter. Creates a dataframe with repeated 'abc' values and joins them.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-join.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a]; [abc] [abc] [abc]] | polars into-df | polars select (polars col a | polars str-join -d ',') | polars collect\n```\n\n----------------------------------------\n\nTITLE: Nushell Scope Command Basic Signature\nDESCRIPTION: Shows the basic command signature for the Nushell scope command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscope {flags}\n```\n\n----------------------------------------\n\nTITLE: Generating Histogram Bins with jq\nDESCRIPTION: Shows how to create histogram bins from a data set using jq's group_by and map functions to categorize data into ranges.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\necho '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]' |\njq -r 'group_by(. / 5 | floor * 5) | map({ bin: .[0], count: length })'\n```\n\n----------------------------------------\n\nTITLE: Grapheme Clusters Splitting Example - Nushell\nDESCRIPTION: Shows how to split a string containing Unicode characters using the --grapheme-clusters flag to preserve combined characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_chars.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '🇯🇵ほげ' | split chars --grapheme-clusters\n╭───┬────╮\n│ 0 │ 🇯🇵 │\n│ 1 │ ほ │\n│ 2 │ げ │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Updating Record Value in Nushell\nDESCRIPTION: This example demonstrates how to update an existing value in a record using the 'upsert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n{'name': 'nu', 'stars': 5} | upsert name 'Nushell'\n```\n\n----------------------------------------\n\nTITLE: Equivalent If-Else Implementation in Nushell\nDESCRIPTION: Shows the equivalent implementation using if-else statements instead of pattern matching, demonstrating how match can be more concise.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/pattern_matching.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[black red yellow green purple blue] | each {|c|\n  if ($c == \"black\") {\n   \"classy\"\n  } else if ($c in [\"red\", \"green\", \"blue\"]) {\n    \"fundamental\"\n  } else if ($c in ['yellow', \"purple\"]) {\n    \"vibrant\"\n  } else {\n    \"innovative\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Creation\nDESCRIPTION: Demonstrates how to create custom error messages with detailed error spans and labels.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\ndef one-to-ten [x: int] {\n  let span = (metadata $x).span\n  if $x > 10 || $x < 1 {\n    error make {\n      msg: \"Value not between 1 and 10\",\n      label: {\n        text: \"expected a value between 1 and 10\",\n        start: $span.start,\n        end: $span.end\n      }\n    }\n  } else {\n    $\"passed ($x)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling External Command Exit Codes in Nushell\nDESCRIPTION: Shows how to access the exit code of the last external command using either $env.LAST_EXIT_CODE or within a try-catch block using the error object's exit_code property.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/special_variables.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n^ls file-that-does-not-exist e> /dev/null\n$env.LAST_EXIT_CODE\n# => 2\n\n# or\ntry {\n  ^ls file-that-does-not-exist e> /dev/null\n} catch {|e|\n  print $e.exit_code\n}\n# => 2\n```\n\n----------------------------------------\n\nTITLE: Calculating Averages with Nushell\nDESCRIPTION: Demonstrates how to calculate an average of values in a data set using Nushell's get and math avg commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_20\n\nLANGUAGE: nu\nCODE:\n```\n'[{\"score\": 90}, {\"score\": 85}, {\"score\": 95}]'\n| from json\n| get score\n| math avg\n# => 90\n```\n\n----------------------------------------\n\nTITLE: Creating Polars Series from List in Nushell\nDESCRIPTION: Illustrates how to create a Polars Series (single-column DataFrame) from a list of integers using the 'polars into-df' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_19\n\nLANGUAGE: nu\nCODE:\n```\nlet df_5 = [9 8 4] | polars into-df\n$df_5\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive String Prefix Checking in Nushell\nDESCRIPTION: This example uses the --ignore-case flag to perform a case-insensitive check on whether 'Cargo.toml' starts with 'cargo'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_starts-with.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 'Cargo.toml' | str starts-with --ignore-case 'cargo'\n```\n\n----------------------------------------\n\nTITLE: Hash SHA256 Command Signature in Nushell\nDESCRIPTION: The signature of the hash sha256 command in Nushell, showing its basic syntax with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_sha256.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> hash sha256 {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Mutating String Variables in Nushell\nDESCRIPTION: Shows how to mutate a string variable by concatenating another string using the '+=' operator in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/string.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet mut greeting = \"Hello\"\ngreeting += \" World\"\n```\n\n----------------------------------------\n\nTITLE: Adding Keybindings in Nushell\nDESCRIPTION: This snippet demonstrates how to add a custom keybinding to open the completion menu using 'Ctrl + t'. It requires editing the Nushell 'config.nu' file to include entries under 'keybindings'. Elements like 'name', 'modifier', 'keycode', 'mode', and 'event' must be specified.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n    keybindings: [\n      {\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: { send: menu name: completion_menu }\n      }\n    ]\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE with Pipeline Input\nDESCRIPTION: Execute an HTTP DELETE request using JSON content from a pipeline\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_delete.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nopen foo.json | http delete https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Executing Debug Info Command in Nushell\nDESCRIPTION: This snippet demonstrates the usage of the 'debug info' command in Nushell. It shows how to view process memory information for debugging purposes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug_info.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> debug info\n```\n\n----------------------------------------\n\nTITLE: Appending DataFrame as New Columns\nDESCRIPTION: Example demonstrating how to append a dataframe as new columns, creating duplicate columns with _x suffix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_append.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> let a = ([[a b]; [1 2] [3 4]] | polars into-df);\n    $a | polars append $a\n```\n\n----------------------------------------\n\nTITLE: Implementing Alias Completion Support in Nushell\nDESCRIPTION: Workaround for alias completion support in Nushell by expanding aliases before completion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/external_completers.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n# if the current command is an alias, get it's expansion\nlet expanded_alias = (scope aliases | where name == $spans.0 | get -i 0 | get -i expansion)\n\n# overwrite\nlet spans = (if $expanded_alias != null  {\n    # put the first word of the expanded alias first in the span\n    $spans | skip 1 | prepend ($expanded_alias | split row \" \" | take 1)\n} else { $spans })\n```\n\n----------------------------------------\n\nTITLE: Saving DataFrame to Parquet\nDESCRIPTION: Example of saving a regular dataframe to a parquet file\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_save.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [1 2] [3 4]] | polars into-df | polars save test.parquet\n```\n\n----------------------------------------\n\nTITLE: Describing Integer Type in Nushell\nDESCRIPTION: Uses the 'describe' command to show the type of an integer value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n42 | describe\n# => int\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin by Filename in Nushell\nDESCRIPTION: Example of removing a plugin by specifying its full file path rather than just the plugin name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_rm.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> plugin rm ~/.cargo/bin/nu_plugin_inc\n\n```\n\n----------------------------------------\n\nTITLE: Parsing TOML with `from toml`\nDESCRIPTION: Opens a `Cargo.lock` file and parses it as TOML using the `from toml` command. The `from` command is used to specify the format when Nu can't determine it automatically from the file extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nopen Cargo.lock | from toml\n```\n\n----------------------------------------\n\nTITLE: Merging Tables Example\nDESCRIPTION: Shows how to merge two tables with nested structures using the merge deep command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/merge_deep.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [{columnA: 0, columnB: [{B1: 1}]}] | merge deep [{columnB: [{B2: 2}]}]\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Tree in PowerShell\nDESCRIPTION: Demonstrates how to display a directory tree structure in PowerShell using `tree`.  This requires the tree command to be available on the system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_38\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"tree\"\n```\n\n----------------------------------------\n\nTITLE: Subexpression with Path Access in Nushell\nDESCRIPTION: This example demonstrates accessing a specific column from the result of a subexpression. It combines `ls` with a path access to retrieve only the 'name' column. This is done using the syntax `(ls).name`, which is equivalent to `ls | get name`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/variables_and_subexpressions.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\necho (ls).name\n```\n\n----------------------------------------\n\nTITLE: Converting Table to LazyFrame Example\nDESCRIPTION: Example showing how to convert a basic table into a lazy dataframe using polars into-lazy.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-lazy.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b];[1 2] [3 4]] | polars into-lazy\n```\n\n----------------------------------------\n\nTITLE: Multiple Expressions in Nushell Commands\nDESCRIPTION: Defines a command with multiple expressions to demonstrate that the final expression becomes the return value of the command, following Nushell's implicit return behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\ndef eight [] {\n  1 + 1\n  2 + 2\n  4 + 4\n}\n\neight\n# => 8\n```\n\n----------------------------------------\n\nTITLE: Sampling Dataframe with Fraction and Replacement in Nushell\nDESCRIPTION: Shows how to sample rows from a dataframe using a fraction and with replacement using the 'polars sample' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sample.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [1 2] [3 4] [5 6]] | polars into-df | polars sample --fraction 0.5 --replace\n```\n\n----------------------------------------\n\nTITLE: Inspect Command Signature in Nushell\nDESCRIPTION: The formal signature definition of the inspect command in Nushell, showing its syntax structure with optional flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/inspect.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> inspect {flags} \n```\n\n----------------------------------------\n\nTITLE: Sys Get Nested Example Fix - Shell\nDESCRIPTION: This snippet points to a fix in the `sys_get_nested_example.sh` script. The fix involved correcting the username within the script. Correcting examples is important to prevent confusion and ensure accurate guidance for users.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nUmeSiyah [fixed username in sys_get_nested_example.sh](https://github.com/nushell/nushell.github.io/pull/1386).\n```\n\n----------------------------------------\n\nTITLE: Find in Records Using Regex\nDESCRIPTION: Example showing how to search in record structures using regex patterns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> [[version name]; ['0.1.0' nushell] ['0.1.1' fish] ['0.2.0' zsh]] | find --regex \"nu\"\n╭───┬─────────┬─────────╮\n│ # │ version │  name   │\n├───┼─────────┼─────────┤\n│ 0 │ 0.1.0   │ nushell │\n╰───┴─────────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Listing Weekly Nushell Updates in Markdown\nDESCRIPTION: This Markdown snippet provides a structured list of recent updates to the Nushell project, including changes to Nushell, engine-q, and reedline repositories. It details various pull requests with links and brief descriptions of the changes made by different contributors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-11-26-twin0118.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# This week in Nushell #118\n\n## Nushell\n\n- BraulioVM added [save --append: create file if it doesn't exist](https://github.com/nushell/nushell/pull/4156)\n- tshepang [fixed markup](https://github.com/nushell/nushell/pull/4155)\n- EdwardBetts [corrected spelling](https://github.com/nushell/nushell/pull/4152)\n- ahkrr [upgraded dependencies ](https://github.com/nushell/nushell/pull/4135)\n\n## engine-q\n\n- jt [added better exit command](https://github.com/nushell/engine-q/pull/369), [moved row condition to block](https://github.com/nushell/engine-q/pull/368), [updated reedline for multiline prompt](https://github.com/nushell/engine-q/pull/364), and [added better comment skipping](https://github.com/nushell/engine-q/pull/359)\n- luccasmmg added [`from vcf` `from ics` and `from ini` ](https://github.com/nushell/engine-q/pull/367)\n- elferherrera added [Dataframe feature](https://github.com/nushell/engine-q/pull/361)\n- stormasm [ported over the `drop` command from nushell](https://github.com/nushell/engine-q/pull/358)\n- kubouch [fixed reading of LS_COLORS + ls displays symlink](https://github.com/nushell/engine-q/pull/357)\n- fdncred [added coloring by primitive, bring in nu-ansi-term crate](https://github.com/nushell/engine-q/pull/353)\n\n## reedline\n\n- aslynatilla created [Simple multiline continuation prompt](https://github.com/nushell/reedline/pull/184)\n```\n\n----------------------------------------\n\nTITLE: stor open Command Signature in Nushell\nDESCRIPTION: The signature syntax for the 'stor open' command in Nushell that opens an in-memory SQLite database. The command takes optional flags and returns a database connection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_open.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> stor open {flags} \n```\n\n----------------------------------------\n\nTITLE: Looping Constructs in Nushell\nDESCRIPTION: Shows the usage of new loop and while commands for iteration control.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nloop {\n    print \"hit ctrl-c to break out of this example\"\n}\n```\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 0\nwhile $x < 10 {\n    print $x\n    $x += 1\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Values in Nushell\nDESCRIPTION: This snippet shows how to use the 'inc' command in Nushell to increment numeric values and version numbers in data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/trabajando_con_tablas.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | inc edition\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen Cargo.toml | get package.version\n```\n\nLANGUAGE: nushell\nCODE:\n```\nopen Cargo.toml | inc package.version --minor | get package.version\n```\n\n----------------------------------------\n\nTITLE: Batch URL Encoding in Nushell\nDESCRIPTION: Shows how to encode multiple URLs in a list, including URLs with special characters and non-ASCII characters. The command handles spaces, special characters, and Unicode characters appropriately.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_encode.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n['https://example.com/foo bar' 'https://example.com/a>b' '中文字/eng/12 34'] | url encode\n```\n\n----------------------------------------\n\nTITLE: Math Exp Command Signature\nDESCRIPTION: Shows the basic command signature for the math exp operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_exp.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math exp {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating a Nushell Plugin Project with Cargo\nDESCRIPTION: Initial setup commands to create a new Rust project for a Nushell plugin. This creates a new cargo project named 'nu_plugin_len' and navigates into the project directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo new nu_plugin_len\ncd nu_plugin_len\n```\n\n----------------------------------------\n\nTITLE: Nushell create range-into-list module\nDESCRIPTION: This snippet create a new module called `range-into-list.nu`. This module will convert a range into a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nexport def main []: range -> list {\n    # It looks odd, yes, but the following is just\n    # a simple way to convert ranges to lists\n    each {||}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Commands with Rest Arguments in Nushell\nDESCRIPTION: Demonstrates how to define a custom command that uses the rest parameter to accept multiple integer arguments, which are then summed together using the math sum command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-26-nushell_0_26.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ndef my-cmd[...rest:int] {\n    echo $rest | math sum\n}\n```\n\n----------------------------------------\n\nTITLE: Repeating Character Pattern Matching in Nushell\nDESCRIPTION: Example showing how to search for files or folders with 3 consecutive a's in the name using character repetition syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> glob <a*:3>\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Byte Stream as Script with Debug Output in Nushell\nDESCRIPTION: Demonstrates parsing a byte stream as a script using nu-check with debug output enabled.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-check.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> open foo.nu | nu-check --debug script.nu\n```\n\n----------------------------------------\n\nTITLE: Opening Default Environment Configuration\nDESCRIPTION: Example showing how to open the user's env.nu file in the default editor.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_env.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> config env\n\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Min Command Signature\nDESCRIPTION: Demonstrates the basic command signature for the polars min operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_min.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars min {flags} \n```\n\n----------------------------------------\n\nTITLE: HTML Table Template with Vue Directives\nDESCRIPTION: HTML table structure using Vue directives to iterate over commands and display their titles and usage information. Includes proper linking to command documentation pages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/core.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Executing Query Command in Nushell\nDESCRIPTION: The signature for the 'query' command in Nushell. It takes flags as arguments and can accept any input type, producing any output type.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> query {flags}\n```\n\n----------------------------------------\n\nTITLE: Float Precision Example in Nushell\nDESCRIPTION: Demonstrates the approximate nature of decimal values in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n10.2 * 5.1\n# => 52.01999999999999\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: A markdown formatted changelog documenting updates and contributions to the Nushell project ecosystem, including feature additions, bug fixes, and documentation improvements\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-02-27-twin0079.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #79\n\n- ilius added [-i, -m, and -s flags to `match`](https://github.com/nushell/nushell/pull/3111)\n- jonathandturner bumped to [0.27.2](https://github.com/nushell/nushell/pull/3109), updated the wasm demo [to the latest nushell](https://github.com/nushell/demo)\n- andrasio added the [ability to drop columns](https://github.com/nushell/nushell/pull/3107), added [the ability to rotate columns or rows around](https://github.com/nushell/nushell/pull/3097), and also to [rotate the whole table](https://github.com/nushell/nushell/pull/3086)\n- fdncred updated [the readme](https://github.com/nushell/nushell/pull/3106), fixed the [ci badge](https://github.com/nushell/nushell/pull/3105), improved access to [ansi light colors](https://github.com/nushell/nushell/pull/3100), added [`ansi strip`](https://github.com/nushell/nushell/pull/3095), added [nu-ansi-term](https://github.com/nushell/nushell/pull/3089), added [internal timing of commands](https://github.com/nushell/nushell/pull/3081)\n- stormasm fixed a crash with [`flatten`](https://github.com/nushell/nushell/pull/3099)\n- rezural refactored [`table` to return a string](https://github.com/nushell/nushell/pull/3088)\n- iCodeSometime fixed [path handling with '.'](https://github.com/nushell/nushell/pull/3084), fixed a [website issue](https://github.com/nushell/nushell.github.io/pull/104)\n- more scripts were added to the [nushell script collection](https://github.com/nushell/nu_scripts)\n- VSCode plugin [got an update](https://github.com/nushell/vscode-nushell-lang)\n- JTurtl3 fixed a [typo in the book](https://github.com/nushell/nushell.github.io/pull/103)\n```\n\n----------------------------------------\n\nTITLE: Nushell Roll Command Signature\nDESCRIPTION: The basic signature for the roll command, which requires using one of its subcommands for actual functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> roll {flags} \n```\n\n----------------------------------------\n\nTITLE: Pipeline Blocks with Each Command\nDESCRIPTION: Demonstrates the new each command functionality for processing table rows individually.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-21-nushell_0_13_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nls | each { to-json }\n```\n\n----------------------------------------\n\nTITLE: Creating a Byte Array from Input in Nushell\nDESCRIPTION: Example demonstrating how to concatenate multiple binary objects into a single binary output without a separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_collect.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [0x[11] 0x[13 15]] | bytes collect\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   11 13 15                                             •••\n```\n\n----------------------------------------\n\nTITLE: Changes to Table Command\nDESCRIPTION: The 'table' command has been updated to always pretty print binary values, enhancing the output formatting regardless of subsequent commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\ntable\n```\n\n----------------------------------------\n\nTITLE: Executing 'query webpage-info' Command in Nushell\nDESCRIPTION: This snippet shows the signature of the 'query webpage-info' command in Nushell. It takes optional flags as input and outputs a record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_webpage-info.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nquery webpage-info {flags}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins with Cargo in Rust\nDESCRIPTION: Command to install Nushell plugins using Cargo. The placeholder <plugin name> should be replaced with the actual plugin name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-04-20-nushell_0_30.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Creating Table Literals in Nushell\nDESCRIPTION: Demonstrates how to create table literals in Nushell by separating headers from data using a semicolon. The example shows creating a simple two-column table with name and size data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-01-nushell_0_19.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\necho [[name size]; [ST 185] [KJ 160]]\n```\n\n----------------------------------------\n\nTITLE: String Functions with str\nDESCRIPTION: This snippet refers to the various built-in string functions available in Python. Python's `str` type provides a rich set of methods for manipulating strings, including operations for finding substrings, replacing characters, converting case, and formatting text. These functions are essential for working with text data in Python.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"str functions\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian/Ubuntu\nDESCRIPTION: Installing required package configuration and SSL development libraries for Nushell\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install pkg-config libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with ls Command\nDESCRIPTION: Demonstrates Nushell's ls command which returns a structured table instead of plain text output\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Traditional Function Call in Nushell Grammar\nDESCRIPTION: Example of experimental function call syntax in Nushell's new grammar system, demonstrating traditional parenthetical function invocation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-27-nushell-0_69.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nfoo(3)\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Chrono Version - Rust\nDESCRIPTION: This snippet indicates that the minimum required version of the `chrono` crate has been specified in the Nushell project. This ensures compatibility and avoids potential issues arising from using older versions. Specifying minimum versions helps maintain a stable build environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nsholderbach [specified the required minimum `chrono` version](https://github.com/nushell/nushell/pull/12766)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Default Nushell Commands using Vue.js\nDESCRIPTION: This Vue.js script filters pages to show only default Nushell commands, sorts them alphabetically, and makes them available to the template. It relies on a 'pages' import from a temporary file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/default.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('default'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Table of Key-Value Pairs to Query String in Nushell\nDESCRIPTION: Demonstrates how to use 'url build-query' with a table input containing key-value pairs. It generates a query string with multiple occurrences of the same key for repeated values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_build-query.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[[key, value]; [a, one], [a, two], [b, three], [a, four]] | url build-query\n```\n\n----------------------------------------\n\nTITLE: Generating Date Sequences with seq date in Nushell\nDESCRIPTION: The 'seq date' command in Nushell is used to print sequences of dates. It supports various flags for customizing the output format, date range, increment, and direction.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date {flags}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry References\nDESCRIPTION: Git commit references and pull request numbers documenting recent changes to the Nushell project, including path canonicalization, trash functionality, and alias support.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-17-twin0034.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- quebin31 improved how we canonicalize our paths (#1571, #1576, #1588)\n- jonathandturner made trash optional (#1572), changed uptime to being a duration (#1573), added quickcheck support (#1574), allowed pipelines in blocks (#1579), fixed windows panic (#1581), added expression blocks (#1584), aliases (#1589, #1593)\n```\n\n----------------------------------------\n\nTITLE: Sorting and Selecting a Specific Row with 'nth' in Nushell\nDESCRIPTION: First sorting table data by name and then selecting a specific row (the 6th row) using the 'nth' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nls | sort-by name\n# => ---+---------------+------+----------+---------+------------+------------\n# =>  # | name          | type | readonly | size    | accessed   | modified\n# => ---+---------------+------+----------+---------+------------+------------\n# =>  0 | add.rs        | File |          | 2.7 KB  | 2 days ago | 2 days ago\n# =>  1 | binaryview.rs | File |          | 13.0 KB | a day ago  | a day ago\n# =>  2 | edit.rs       | File |          | 2.7 KB  | 2 days ago | 2 days ago\n# =>  3 | inc.rs        | File |          | 11.8 KB | 2 days ago | 2 days ago\n# =>  4 | skip.rs       | File |          | 1.7 KB  | 2 days ago | 2 days ago\n# =>  5 | str.rs        | File |          | 21.4 KB | 2 days ago | 2 days ago\n# =>  6 | sum.rs        | File |          | 3.0 KB  | 2 days ago | 2 days ago\n# =>  7 | sys.rs        | File |          | 9.2 KB  | 2 days ago | 2 days ago\n# =>  8 | textview.rs   | File |          | 9.4 KB  | 2 days ago | 2 days ago\n# =>  9 | tree.rs       | File |          | 3.0 KB  | 2 days ago | 2 days ago\n# => ---+---------------+------+----------+---------+------------+------------\n\nls | sort-by name | nth 5\n# => --------+------+----------+---------+------------+------------\n# =>  name   | type | readonly | size    | accessed   | modified\n# => --------+------+----------+---------+------------+------------\n# =>  str.rs | File |          | 21.4 KB | 2 days ago | 2 days ago\n# => --------+------+----------+---------+------------+------------\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Hooks\nDESCRIPTION: This example shows how to define multiple hooks for a single trigger in Nushell. Instead of a single block of code, a list of blocks is provided, which will be executed sequentially when the trigger is activated. This allows for more complex behavior to be implemented through a series of smaller, more manageable hooks.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = {\n    ...other config...\n\n    hooks: {\n        pre_prompt: [\n            { print \\\"pre prompt hook\\\" }\n            { print \\\"pre prompt hook2\\\" }\n        ]\n        pre_execution: [\n            { print \\\"pre exec hook\\\" }\n            { print \\\"pre exec hook2\\\" }\n        ]\n        env_change: {\n            PWD: [\n                {|before, after| print $\\\"changing directory from ($before) to ($after)\\\" }\n                {|before, after| print $\\\"changing directory from ($before) to ($after) 2\\\" }\n            ]\n        }\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Expanded Form of $it Variable in Nushell\nDESCRIPTION: Shows how Nushell internally expands the $it variable into a full 'each' block. This transformation happens automatically when processing commands with $it references.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-05-12-nushell_0_14_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> ls | each { echo $it.name }\n```\n\n----------------------------------------\n\nTITLE: Case Insensitivity in Regular Expressions in Nushell\nDESCRIPTION: This snippet provides examples of how to perform case-insensitive string comparisons using regular expressions in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n\"FOO\" =~ \"foo\" # returns false\n\"FOO\" =~ \"(?i)foo\" # returns true\n\"FOO\" | str contains --ignore-case \"foo\"\n(\"FOO\" | str downcase) == (\"Foo\" | str downcase)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Headers in CSV Data - Nushell\nDESCRIPTION: This snippet shows how to utilize the 'from csv' command with the --noheaders flag to parse CSV data while ignoring the header row, treating all rows as data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> open data.txt | from csv --noheaders\n```\n\n----------------------------------------\n\nTITLE: Conditional Assignment to Mutable Variables in Nushell\nDESCRIPTION: Demonstrates how to use a conditional expression to determine the value assigned to a mutable variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mut.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = if false { -1 } else { 1 }\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration in Nushell\nDESCRIPTION: This snippet demonstrates the relaxed syntax for variable declaration using `let` in Nushell, allowing assignment of command pipeline outputs without parentheses. The code assigns the result of filtering file names to the `filenames` variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-07-25-nushell_0_83.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet filenames = ls | where type == file | get name\n```\n\n----------------------------------------\n\nTITLE: Stopping a Plugin Using Filepath\nDESCRIPTION: Example demonstrating how to stop a plugin using its full filepath.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_stop.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin stop ~/.cargo/bin/nu_plugin_inc\n```\n\n----------------------------------------\n\nTITLE: Getting an absolute path relative to the current file in Nushell\nDESCRIPTION: Example of getting the absolute form of a path relative to the current file using the 'path self' command with a relative path parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_self.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> const current_file = path self ../foo\n```\n\n----------------------------------------\n\nTITLE: View Files Command Signature in Nushell\nDESCRIPTION: The basic command signature for viewing files registered in Nushell's EngineState memory. Accepts flags as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_files.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> view files {flags} \n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Record Data\nDESCRIPTION: Shows how to extract specific columns from structured command information using get command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands | where command == \"each\" | get params\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature Definition\nDESCRIPTION: Defines the command signature for the scope variables command that shows variables in current scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_variables.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> scope variables {flags} \n```\n\n----------------------------------------\n\nTITLE: Using 'uniq-by' Command in Nushell\nDESCRIPTION: Shows how to use the new 'uniq-by' command to filter a table by entries appearing in a particular column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-12-20-nushell-0.73.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n〉 [[fruit day]; [apple monday] [apple friday] [Apple friday] [apple monday] [pear monday] [orange tuesday]] | uniq-by fruit\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive File Filtering in Nushell\nDESCRIPTION: Shows how to find files called \"readme\" case-insensitively without an explicit closure using the 'where' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nls | where ($it.name | str downcase) =~ readme\n```\n\n----------------------------------------\n\nTITLE: Metadata Set Command Signature\nDESCRIPTION: The basic command signature for the metadata set command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata_set.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> metadata set {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining a command with a rest parameter\nDESCRIPTION: This Nushell code defines a command named `foo` that accepts a rest parameter `args`. The `...args` syntax allows the command to accept a variable number of arguments, which are then converted to a Nuon format using the `to nuon` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-01-09-nushell_0_89_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n```nushell\ndef foo [ ...args ] { $args | to nuon }\n```\n```\n\n----------------------------------------\n\nTITLE: Summing Values in C#\nDESCRIPTION: Demonstrates how to sum values using `Sum` in C#. This is the equivalent of the `sum` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\n\"Sum\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Int Value in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of encoding an integer value in JSON format for the Nushell plugin protocol, including span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Int\": {\n    \"val\": -2,\n    \"span\": {\n      \"start\": 4040,\n      \"end\": 4042\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Format String DateTime Using Default Format\nDESCRIPTION: Example of formatting a string datetime value using the default RFC 2822 format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_date.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> \"2021-10-22 20:00:12 +01:00\" | format date\nFri, 22 Oct 2021 20:00:12 +0100\n```\n\n----------------------------------------\n\nTITLE: Chunks Command Signature\nDESCRIPTION: The basic signature for the chunks command showing required parameters and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/chunks.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> chunks {flags} (chunk_size)\n```\n\n----------------------------------------\n\nTITLE: Implementing Try/Catch Error Handling in Nushell\nDESCRIPTION: Examples of using the new try/catch functionality for error handling, including both basic error catching and accessing error details through closure syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ntry {\n    1 / 0\n} catch {\n    print \"look, no crash\"\n}\n```\n\nLANGUAGE: nushell\nCODE:\n```\ntry {\n    1 / 0\n} catch {|e|\n    print \"look, no crash.\"\n    print $e\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Bytes in Binary Data using Nushell 'skip' Command\nDESCRIPTION: Illustrates how to use the 'skip' command to skip the first two bytes of a binary value, showing the resulting output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[01 23 45 67] | skip 2\nLength: 2 (0x2) bytes | printable whitespace ascii_other non_ascii\n00000000:   45 67                                                Eg\n```\n\n----------------------------------------\n\nTITLE: Multiple Environment Variable Shorthands in Nushell\nDESCRIPTION: Illustrates the new ability to pass multiple environment variable shorthands to a single command in Nushell 0.34.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-07-13-nushell_0_34.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> FOO=bar BAR=baz $nu.env.FOO + $nu.env.BAR\nbarbaz\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Datetime with Nanosecond Precision in Nushell\nDESCRIPTION: Demonstrates converting strings to datetime with high resolution (nanoseconds) using the '%9f' format specifier for fractional seconds.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_as-datetime.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[\"2021-12-30 00:00:00.123456789\" \"2021-12-31 00:00:00.123456789\"] | polars into-df | polars as-datetime \"%Y-%m-%d %H:%M:%S.%9f\"\n```\n\n----------------------------------------\n\nTITLE: Defining Closures in Nushell\nDESCRIPTION: This example shows how to create a closure in Nushell, which might look similar to a block but is a different construct. The snippet demonstrates that closures are first-class values that can be passed around.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/block.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> { echo foo } | describe\nclosure\n# Alternatively\n> {|| echo foo } | describe\nclosure\n```\n\n----------------------------------------\n\nTITLE: Prepending Multiple Integers\nDESCRIPTION: Example demonstrating how to prepend multiple integers to a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/prepend.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [2 3 4] | prepend [0 1]\n```\n\n----------------------------------------\n\nTITLE: Applying Uppercase to Multiple Strings in Polars Dataframe in Nushell\nDESCRIPTION: Shows how to use 'polars uppercase' on a dataframe created from a list of strings. This example creates a dataframe from a list of mixed-case strings and applies uppercase to all elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_uppercase.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[Abc aBc abC] | polars into-df | polars uppercase\n```\n\n----------------------------------------\n\nTITLE: Command Signature for Polars With-Column\nDESCRIPTION: The basic signature showing how to use the polars with-column command with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_with-column.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars with-column {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Bytes Split Command Signature\nDESCRIPTION: Command signature showing the basic syntax for the bytes split command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_split.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> bytes split {flags} (separator)\n```\n\n----------------------------------------\n\nTITLE: Filtering Processes by CPU Usage\nDESCRIPTION: This snippet shows how to filter the output of the `ps` command to show only processes actively using the CPU. It uses the `where` command with a condition based on the 'cpu' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"ps | where cpu > 0\"\n```\n\n----------------------------------------\n\nTITLE: Recursive Value Transformation in Nushell\nDESCRIPTION: This command applies a mapping function recursively to all values in a complex data structure. It handles records, lists, and primitive values, allowing for deep transformation of nested data. The command includes error handling for unsupported types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_26\n\nLANGUAGE: nushell\nCODE:\n```\nexport def filter-map [mapping_fn: closure] {\n    let input = $in\n\n    match ($input | describe-primitive) {\n        \"record\" => {\n            $input\n            | items { |key, value|\n                  {key: $key, value: ($value | filter-map $mapping_fn)}\n              }\n            | transpose -rd\n        },\n        \"list\" => {\n            $input\n            | each { |value|\n                  $value | filter-map $mapping_fn\n              }\n        },\n        \"table\" | \"block\" | \"closure\" => { error make {msg: \"unimplemented\"} },\n        _ => {\n            do $mapping_fn $input\n        },\n    }\n}\n\n#[test]\ndef test_filtermap [] {\n    assert equal ({a: 42} | filter-map {|x| if ($x | describe) == \"int\" { $x * 2 } else { $x }}) {a: 84}\n    assert equal ({a: 1, b: 2, c: {d: 3}} | filter-map {|x| if ($x | describe) == \"int\" { $x * 2 } else { $x }}) {a: 2, b: 4, c: {d: 6}}\n    assert equal ({a: 1, b: \"2\", c: {d: 3}} | filter-map {|x| if ($x | describe) == \"int\" { $x * 2 } else { $x }}) {a: 2, b: \"2\", c: {d: 6}}\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Definitions While Hiding Overlays\nDESCRIPTION: This snippet demonstrates how to hide an overlay while keeping the definitions and environment variables associated with it. It showcases the use of the '--keep-custom' flag to retain custom definitions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n(zero)> overlay use spam\n\n(spam)> def eggs [] { \"eggs\" }\n\n(spam)> overlay hide --keep-custom spam\n\n(zero)> eggs\neggs\n```\n\n----------------------------------------\n\nTITLE: Signature for polars count-null Command in Nushell\nDESCRIPTION: The command signature for the polars count-null command, showing its basic syntax and structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_count-null.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars count-null {flags} \n```\n\n----------------------------------------\n\nTITLE: Profile Output Example\nDESCRIPTION: Example showing the detailed profiler output format with depth and IDs for a nested command structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug_profile.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\ndepth   id   parent_id                    source                     pc            instruction\n    0    0           0   debug profile { do { if true { 'spam' } } }  0   <start>\n    1    1           0   { if true { 'spam' } }                       0   load-literal    %1, closure(2164)\n    1    2           0   { if true { 'spam' } }                       1   push-positional %1\n    1    3           0   { do { if true { 'spam' } } }                2   redirect-out    caller\n    1    4           0   { do { if true { 'spam' } } }                3   redirect-err    caller\n    1    5           0   do                                           4   call            decl 7 \"do\", %0\n    2    6           5   true                                         0   load-literal    %1, bool(true)\n    2    7           5   if                                           1   not             %1\n    2    8           5   if                                           2   branch-if       %1, 5\n    2    9           5   'spam'                                       3   load-literal    %0, string(\"spam\")\n    2   10           5   if                                           4   jump            6\n    2   11           5   { if true { 'spam' } }                       6   return          %0\n    1   12           0   { do { if true { 'spam' } } }                5   return          %0\n```\n\n----------------------------------------\n\nTITLE: Bits Rotate Right Command Signature in Nushell\nDESCRIPTION: The command signature for the 'bits ror' command, showing the required bits parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_ror.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bits ror {flags} (bits)\n```\n\n----------------------------------------\n\nTITLE: Defining an alias temporarily in Nu\nDESCRIPTION: Defines an alias temporarily using `alias s = git status -sb`. This creates an alias named 's' for the 'git status -sb' command, which is only available for the current session.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_27\n\nLANGUAGE: nu\nCODE:\n```\n\"alias s = git status -sb\"\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid 2 Character Escape in Nushell\nDESCRIPTION: This code snippet shows Nushell's error handling for invalid two-character escape sequences. The attempted escape sequence '\\z' is not recognized, leading to an 'Invalid literal' error. This showcases Nushell's strictness regarding valid escape sequences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-02-21-nushell_0_76.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\">\\\"bad: \\\\z\\\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Metadata Access Command Signature\nDESCRIPTION: The basic signature for the metadata access command showing required parameters and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata_access.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> metadata access {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Using Average Command in Nushell\nDESCRIPTION: Example of using the new average command to calculate mean values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nls | get size | average\n```\n\n----------------------------------------\n\nTITLE: Using Bits Not with Number Bytes Flag in Nushell\nDESCRIPTION: Example of 'bits not' command with the --number-bytes flag set to 2, treating input as 2-byte numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_not.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [4 3 2] | bits not --number-bytes 2\n╭───┬───────╮\n│ 0 │ 65531 │\n│ 1 │ 65532 │\n│ 2 │ 65533 │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Custom Overlay Naming in Nushell\nDESCRIPTION: Demonstration of customizing overlay names using the 'as' keyword when adding overlays in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-08-16-nushell-0_67.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam { export def foo [] { \"foo\" } }\n\n> overlay add spam as eggs\n\n> overlay list | last\neggs\n\n> foo\nfoo\n\n> overlay remove eggs\n```\n\n----------------------------------------\n\nTITLE: Successful PipelineData Engine Call Response\nDESCRIPTION: This snippet represents the JSON response for a successful engine call, providing a ListStream ID and span details, confirming that the operation returned data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCallResponse\": [\n    0,\n    {\n      \"ListStream\": {\n        \"id\": 23,\n        \"span\": {\n          \"start\": 8081,\n          \"end\": 8087\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup Commands in Nushell\nDESCRIPTION: Shows how to configure commands that automatically run when Nushell starts using the startup config variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-21-nushell_0_13_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nconfig --set [startup [\"alias myecho [msg] { echo $msg }\"]]\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell plugin with cargo\nDESCRIPTION: This command installs a specific Nushell plugin using cargo. Replace `<plugin name>` with the actual name of the plugin to install. This command assumes that Rust and cargo are already installed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-06-06-nushell_0_81.md#2025-04-19_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"cargo install nu_plugin_<plugin name>\"\n```\n\n----------------------------------------\n\nTITLE: Exiting Nushell Example\nDESCRIPTION: Demonstrates how to use the 'exit' command to exit the current Nushell session.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/exit.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> exit\n\n```\n\n----------------------------------------\n\nTITLE: Restricting Use of Internal Variables in Nushell\nDESCRIPTION: This snippet demonstrates error generation when attempting to redefine internal Nushell variables within command definitions. It requires an understanding of Nushell's internal variable handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\ndef foo [nu] { print $nu }\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef bar [env] { print $env }\n```\n\nLANGUAGE: nushell\nCODE:\n```\ndef baz [in] { print $in }\n```\n\nLANGUAGE: nushell\nCODE:\n```\nmetadata $env\n```\n\nLANGUAGE: nushell\nCODE:\n```\nError:   × Built-in variables `$env` and `$nu` have no metadata\n   ╭─[entry #1:1:1]\n 1 │ metadata $env\n   ·          ──┬─\n   ·            ╰── no metadata available\n   ╰────\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo in Rust\nDESCRIPTION: Commands to install Nushell using Cargo, the Rust package manager. It includes options for installing the basic version and a version with extra features.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-10-05-nushell_0_38.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Setting Default Editor in Nushell\nDESCRIPTION: Shows how to set the EDITOR environment variable in Nushell configuration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/setup.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n$env.EDITOR = 'vim'\n```\n\n----------------------------------------\n\nTITLE: Path Search in Python\nDESCRIPTION: Python implementation of which command using shutil module\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nshutil.which\n```\n\n----------------------------------------\n\nTITLE: Filtering Format Commands with Vue.js\nDESCRIPTION: A Vue.js script that filters pages to display only commands categorized as 'formats'. It imports page data from a temporary source and uses computed properties to filter and sort the commands alphabetically.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/formats.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('formats'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Collect Command Signature - Nushell\nDESCRIPTION: The basic signature pattern for the collect command showing required syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/collect.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> collect {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: NuShell Command: ls (implicit table)\nDESCRIPTION: This example shows that the `ls` command in NuShell is equivalent to `ls | table`. NuShell automatically appends the `table` command to pipelines that do not have an explicit output command to provide a formatted table view of the results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/pipeline.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nls\n```\n\nLANGUAGE: nu\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Random Binary Command Signature\nDESCRIPTION: Shows the command signature for generating random binary data in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_binary.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> random binary {flags} (length)\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Extracting a Field from a Record in Nushell\nDESCRIPTION: An alternative approach to extract the 'name' field from the third record in a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> ls | get 2.name\n\n```\n\n----------------------------------------\n\nTITLE: Converting Table to YAML in Nushell - Command Signature\nDESCRIPTION: Shows the basic command signature for converting data to YAML format in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_yaml.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> to yaml {flags} \n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `get` to Python's list indexing\nDESCRIPTION: Illustrates how to access elements in a Python list using indexing, equivalent to the `get` command in Nushell.  Accessing elements at specific indices is a fundamental list operation in Python.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"list[x]\"\n```\n\n----------------------------------------\n\nTITLE: Activating an Environment on Directory Entry\nDESCRIPTION: This snippet illustrates how to automatically activate an environment when entering a specific directory. It checks for the existence of a `test-env.nu` file in the target directory and uses `overlay use` to activate the environment.  When leaving the directory it will automatically hide the overlay.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks.env_change.PWD {\n    [\n        {\n            condition: {|_, after|\n                ($after == '/path/to/target/dir'\n                    and ($after | path join test-env.nu | path exists))\n            }\n            code: \\\"overlay use test-env.nu\\\" \n        }\n        {\n            condition: {|before, after|\n                ('/path/to/target/dir' not-in $after\n                    and '/path/to/target/dir' in $before\n                    and 'test-env' in (overlay list))\n            }\n            code: \\\"overlay hide test-env --keep-env [ PWD ]\\\" \n        }\n    ]\n})\"\n```\n\n----------------------------------------\n\nTITLE: Running a Script with Custom Config in Nushell\nDESCRIPTION: Executes a script file using a custom config file, loading default and user configurations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_28\n\nLANGUAGE: nushell\nCODE:\n```\nnu --config foo_config.nu test.nu\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing using Regular Expression with Named Capture Groups in Nushell\nDESCRIPTION: Shows how to use named capture groups in regular expressions for variable substitution patterns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 'hello=world' | str replace -r '\\$?(?<varname>.*)=(?<value>.*)' '$$$varname = $value'\n$hello = world\n```\n\n----------------------------------------\n\nTITLE: Viewing Block Source in Nushell\nDESCRIPTION: Example showing how to view the source code of a code block variable\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_source.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet abc = {|| echo 'hi' }; view source $abc\n```\n\n----------------------------------------\n\nTITLE: Creating New Columns with When-Otherwise Expressions in Polars\nDESCRIPTION: Uses 'when' and 'otherwise' expressions to create two new columns in a dataframe based on conditional logic. Creates column 'c' and 'd' with different conditional values based on column 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_otherwise.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[a b]; [6 2] [1 4] [4 1]]\n   | polars into-lazy\n   | polars with-column (\n    polars when ((polars col a) > 2) 4 | polars otherwise 5 | polars as c\n     )\n   | polars with-column (\n    polars when ((polars col a) > 5) 10 | polars when ((polars col a) < 2) 6 | polars otherwise 0 | polars as d\n     )\n   | polars collect\n```\n\n----------------------------------------\n\nTITLE: Recording Definitions in an Overlay\nDESCRIPTION: This snippet explains how to add definitions to the last active overlay and what happens when the overlay is hidden. It demonstrates how commands are retained in the overlay's context and gives an error when trying to access them after the overlay is removed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n(zero)> overlay use spam\n\n(spam)> def eggs [] { \"eggs\" }\n\n(spam)> overlay hide spam\n\n(zero)> eggs\nError: Can't run executable...\n```\n\n----------------------------------------\n\nTITLE: Signature Definition for polars is-duplicated\nDESCRIPTION: Defines the command signature for the polars is-duplicated function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-duplicated.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars is-duplicated {flags}\n```\n\n----------------------------------------\n\nTITLE: Ordering in Cell-Path Access for Nested Data in Nushell\nDESCRIPTION: Illustrates the importance of ordering when accessing nested data using cell-path in Nushell, showing how different orderings can lead to different results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/cellpath.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n# Accesses the second day, third temperature\n> $data.1.temps.2\n34.91\n# Also accesses the second day, third temperature\n> $data.temps.1.2\n34.91\n# Accesses the third day, second temperature\n> $data.temps.2.1\n36.67\n```\n\n----------------------------------------\n\nTITLE: Fehlertyp Behandlung in Nushell\nDESCRIPTION: Dieses Code-Snippet zeigt, wie Nushell einen Fehler ausgibt, wenn eine Operation auf inkompatible Datentypen angewendet wird. In diesem Fall wird versucht, eine Zahl von einer Zeichenkette zu subtrahieren, was zu einem Typfehler führt.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/operators.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n```nu\n\"spam\" - 1\n# => Error: nu::parser::unsupported_operation (link)\n# => \n# =>   × Types mismatched for operation.\n# =>    ╭─[entry #49:1:1]\n# =>  1 │ \"spam\" - 1\n# =>    · ───┬── ┬ ┬\n# =>    ·    │   │ ╰── int\n# =>    ·    │   ╰── doesn't support these values.\n# =>    ·    ╰── string\n# =>    ╰────\n# =>   help: Change string or int to be the right types and try again.\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins in Rust\nDESCRIPTION: Generic command to install Nushell plugins using Cargo. Replace <plugin name> with the specific plugin you want to install.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-30-nushell_0_29.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `str join` to Python's `str.join`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `str join` command in Python using the `str.join` method.  This method concatenates elements of an iterable into a single string using the specified separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\n\"str.join\"\n```\n\n----------------------------------------\n\nTITLE: Command Signature Definition in Nushell\nDESCRIPTION: Defines the command signature for the bits and operation with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_and.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bits and {flags} (target)\n```\n\n----------------------------------------\n\nTITLE: File Operation Commands in Nushell\nDESCRIPTION: Demonstrates file operation commands in Nushell, including the 'open' command variants for handling structured and raw data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_cmd.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopen --raw  # Display contents of a text file as raw data\nopen       # Open a file as structured data\n```\n\n----------------------------------------\n\nTITLE: Reading /etc/passwd with Nushell\nDESCRIPTION: Command to parse the /etc/passwd file on Unix systems, splitting each line into columns and converting the result into a structured value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nopen /etc/passwd | lines | split column \":\" user . uid gid desc home shell | into value\n```\n\n----------------------------------------\n\nTITLE: Converting List of Pairs to Record in nushell\nDESCRIPTION: This nushell command converts a list of pairs into a record. The list should have the format of nested lists where each element pair is intended to be key-value pairs in the record. The output will be a record that captures these pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_record.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar] [baz quux]] | into record\n```\n\n----------------------------------------\n\nTITLE: Advanced Color Configuration with Multiple Color Properties\nDESCRIPTION: Shows a more complex color configuration with detailed color settings including foreground, background, and attributes\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/coloring_and_theming.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet config = {\n    color_config: {\n        separator: \"#88b719\"\n        leading_trailing_space_bg: white\n        header: {\n            fg: \"#B01455\",\n            bg: \"#ffb900\",\n            attr: bli\n        }\n        date: \"#75507B\"\n        filesize: \"#729fcf\"\n        row_index: {\n            fg: \"#e50914\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for URL Command in Nushell\nDESCRIPTION: Specifies the basic syntax for using the 'url' command in Nushell. This command requires the use of subcommands and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> url {flags} \n```\n\n----------------------------------------\n\nTITLE: Filling NaN Values with Zero in Array\nDESCRIPTION: Example showing how to fill NaN values with 0 in a simple numeric array converted to a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_fill-nan.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 NaN 3 NaN] | polars into-df | polars fill-nan 0\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `sort-by` to Python's `sorted`, `list.sort`\nDESCRIPTION: Explains how to sort a list in Python using either the `sorted` function (for creating a new sorted list) or the `list.sort` method (for in-place sorting), corresponding to the `sort-by` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n\"sorted\", \"list.sort\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Generic command to install Nushell plugins. Replace '<plugin name>' with the specific plugin you want to install.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-03-nushell_0_35.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Defining nu-check Command Signature in Nushell\nDESCRIPTION: Specifies the command signature for nu-check, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-check.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> nu-check {flags} (path)\n```\n\n----------------------------------------\n\nTITLE: Find Characters in String List\nDESCRIPTION: Example showing how to search for characters in a list of strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [moe larry curly] | find l\n╭───┬───────╮\n│ 0 │ larry │\n│ 1 │ curly │\n╰───┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Bytes Reverse Command Signature\nDESCRIPTION: The basic syntax and signature for the bytes reverse command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_reverse.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes reverse {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Basic Git Log Command\nDESCRIPTION: Simple git log command that shows commit history.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ngit log\n```\n\n----------------------------------------\n\nTITLE: Renaming Files in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `rename` command in Nushell and PowerShell. In PowerShell, `Rename-Item`, `ren`, and `rni` are used to rename files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Rename-Item, ren, rni\"\n```\n\n----------------------------------------\n\nTITLE: Sorting by Cell Path in Nushell\nDESCRIPTION: Demonstrates using a cell path as a sort key in the `sort-by` command. This allows sorting based on nested values within records, making it easier to organize data based on specific criteria.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"> [[name info]; [Cairo {founded: 969}] [Kyoto {founded: 794}]] | sort-by info.founded\n  ╭───┬───────┬───────────────────╮\n  │ # │ name  │       info        │\n  ├───┼───────┼───────────────────┤\n  │ 0 │ Kyoto │ ╭─────────┬─────╮ │\n  │   │       │ │ founded │ 794 │ │\n  │   │       │ ╰─────────┴─────╯ │\n  │ 1 │ Cairo │ ╭─────────┬─────╮ │\n  │   │       │ │ founded │ 969 │ │\n  │   │       │ ╰─────────┴─────╯ │\n  ╰───┴───────┴───────────────────╯\"\n```\n\n----------------------------------------\n\nTITLE: Polars N-Unique Command Signature\nDESCRIPTION: The basic command signature for the polars n-unique command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_n-unique.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars n-unique {flags} \n```\n\n----------------------------------------\n\nTITLE: Executing Help on NuShell Modules - NuShell\nDESCRIPTION: This snippet demonstrates how to use the 'help modules' command in NuShell to list all available modules. It takes no parameters and returns a table representing the modules.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_modules.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> help modules\n\n```\n\n----------------------------------------\n\nTITLE: Named Columns in Git Log\nDESCRIPTION: Adding column names to the git log output table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines | split column \"»¦«\" commit subject name email date\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Echo in Nushell\nDESCRIPTION: This snippet demonstrates how to declare a variable and then echo its value using the `$` prefix in Nushell. The `let` keyword assigns the value 4 to the variable `my_value`. The `echo` command then prints the value of the variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/variables_and_subexpressions.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet my_value = 4\necho $my_value\n# => 4\n```\n\n----------------------------------------\n\nTITLE: Reducing with functools\nDESCRIPTION: This snippet demonstrates how to use the `functools.reduce` function in Python to apply a function cumulatively to the items of a sequence.  `reduce` is useful when you need to combine the elements of a list into a single value. It requires a function that takes two arguments and returns a single value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"functools.reduce\"\n```\n\n----------------------------------------\n\nTITLE: Drop Nulls Example with Division Operation\nDESCRIPTION: Example demonstrating how to create a dataframe, perform division operations, and drop resulting null values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_drop-nulls.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet df = ([[a b]; [1 2] [3 0] [1 2]] | polars into-df);\nlet res = ($df.b / $df.b);\nlet a = ($df | polars with-column $res --name res);\n$a | polars drop-nulls\n```\n\n----------------------------------------\n\nTITLE: Command Signature for polars arg-where in Nushell\nDESCRIPTION: Shows the signature of the `polars arg-where` command which takes column name expressions to evaluate.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-where.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars arg-where {flags} (column name)\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Core Package\nDESCRIPTION: Command to install the main Nushell package using Cargo package manager.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-18-nushell-0_7_0.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: History Commands Table Template\nDESCRIPTION: HTML table structure that displays the filtered history commands. Each row contains a command name as a link and its usage description, with pre-wrapped whitespace formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/history.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using ignore to suppress command output in Nushell\nDESCRIPTION: Demonstrates how to use the 'ignore' command to convert any pipeline result to nothing, which prevents output from being displayed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/nothing.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ngit checkout featurebranch | ignore\n```\n\n----------------------------------------\n\nTITLE: Checking for Literal Elements in a List Column with Polars in Nushell\nDESCRIPTION: Creates a dataframe with a list column and checks if the literal value 'a' is contained in each list, returning a boolean result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_list-contains.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nlet df = [[a]; [[a,b,c]] [[b,c,d]] [[c,d,f]]] | polars into-df -s {a: list<str>};\n                let df2 = $df | polars with-column [(polars col a | polars list-contains (polars lit a) | polars as b)] | polars collect;\n                $df2.b\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature for 'scope modules'\nDESCRIPTION: This code block shows the signature of the 'scope modules' command in Nushell. It indicates that the command can be run with optional flags but doesn't require any specific arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_modules.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> scope modules {flags}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Generator Commands with Vue.js\nDESCRIPTION: This Vue.js component filters pages to find generator commands, sorts them alphabetically, and computes a list of commands to be displayed in the table. It requires the '@temp/pages' module to access page data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/generators.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('generators'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Category to Custom Command in Nushell\nDESCRIPTION: This example demonstrates how to use the '@category' attribute to add a category to a custom command. The command 'double' is categorized under 'math' and doubles the input number.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/attr_category.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> # Double numbers\n    @category math\n    def double []: [number -> number] { $in * 2 }\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Basic installation command for Nushell using Rust's package manager Cargo\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-02-08-nushell_0_44.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `shuffle` to Python's `random.shuffle`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `shuffle` command in Python using the `random.shuffle` function.  This function shuffles the elements of a list in place.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n\"random.shuffle\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell 0.35 using Cargo\nDESCRIPTION: Command to install Nushell 0.35 using Cargo, the Rust package manager. This installs the basic version of Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-03-nushell_0_35.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell 0.64 with Cargo\nDESCRIPTION: Commands to install Nushell 0.64 using Cargo, including options for additional features and plugins.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-06-14-nushell_0_64.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\ncargo install nu --features=extra\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Nushell Value Conversion to MessagePack\nDESCRIPTION: Converts Nushell values into MessagePack format. It takes a Nushell value as input and outputs the corresponding MessagePack representation as a byte stream. This can be saved to a file using the `save` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n> 'Nushell' | to msgpack\nLength: 8 (0x8) bytes | printable whitespace ascii_other non_ascii\n00000000:   a7 4e 75 73  68 65 6c 6c                             ×Nushell\n\n# Save in MessagePack format to nushell.msgpack:\n> {nushell: rocks} | save nushell.msgpack\n```\n\n----------------------------------------\n\nTITLE: Polars Unpivot Command Signature\nDESCRIPTION: The basic command signature for the polars unpivot operation, showing the command structure and available flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unpivot.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars unpivot {flags}\n```\n\n----------------------------------------\n\nTITLE: Defining Export Use Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'export use' command, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_use.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nexport use {flags} (module) ...rest\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Error Example in Nushell\nDESCRIPTION: Example showing the stricter enforcement of environment variable setting, where repeating the same variable name is now disallowed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n# Now raises an error\nFOO=bar FOO=bla command\n```\n\n----------------------------------------\n\nTITLE: Posting Data with urllib\nDESCRIPTION: This snippet shows how to perform a HTTP POST request using the `urllib.request` module in Python. The `urlopen` function is used to open a URL, which can include sending data to the server. It's a fundamental operation for interacting with web services and APIs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"urllib.request.urlopen\"\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for History Commands\nDESCRIPTION: JavaScript component logic that filters and sorts history-related commands from the pages data structure. It processes pages that are in the commands/docs path and have 'history' in their categories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/history.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('history'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering After Aggregating with Nushell\nDESCRIPTION: Demonstrates how to group records, calculate a sum for each group, and then filter results based on the sum using Nushell's group-by, update, and where commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\n'[{\"category\": \"A\", \"value\": 10}, {\"category\": \"B\", \"value\": 20}, {\"category\": \"A\", \"value\": 5}]'\n| from json\n| group-by --to-table category\n| update items { |row| $row.items.value | math sum }\n| rename category value\n| where value > 17\n# => ╭───┬──────────┬───────╮\n# => │ # │ category │ value │\n# => ├───┼──────────┼───────┤\n# => │ 0 │ B        │    20 │\n# => ╰───┴──────────┴───────╯\n```\n\n----------------------------------------\n\nTITLE: Generate Random Float within Specific Range\nDESCRIPTION: Generates a random float between 1.0 and 1.1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_float.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> random float 1.0..1.1\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on macOS/Linux via Nix profile\nDESCRIPTION: This command installs Nushell using the Nix package manager. It adds Nushell to the user's Nix profile, making it available in the shell environment. It assumes that Nix is already installed and configured.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix profile install nixpkgs#nushell\n```\n\n----------------------------------------\n\nTITLE: Splitting Pipe-Separated Values into Columns in Nushell\nDESCRIPTION: Uses split-column command to divide pipe-separated content into multiple columns. This transforms unstructured text data into a structured table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nopen people.psv | lines | split-column \"|\"\n```\n\n----------------------------------------\n\nTITLE: External echo command usage in Nushell\nDESCRIPTION: This snippet demonstrates how to run an external command, `echo`, and pass data to it from Nushell. The `^` symbol is used to specify that the external `echo` command should be used instead of the built-in Nushell `echo` command.  This showcases how Nushell can interact with external commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n\tsys | get host.username | ^echo\n\n```\n\n----------------------------------------\n\nTITLE: Command Signature for path split in Nushell\nDESCRIPTION: The signature of the 'path split' command, showing its syntax. This command can take flags and operates on string or list inputs to produce structured list outputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_split.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> path split {flags} \n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fall-Through Signatures for Known Externals in Nushell\nDESCRIPTION: Shows how unrecognized arguments for externals defined with 'extern' are now ignored instead of throwing errors. Also demonstrates this behavior with 'exec'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-10-nushell_0_74.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> extern `git checkout` []\n> git checkout -b foo  # does not throw an error\n\n> nu -c 'exec ls -l'  # does not throw an error\n```\n\n----------------------------------------\n\nTITLE: Single Foreground End Color Gradient in Nushell\nDESCRIPTION: Example showing gradient with only end color specified, start color defaults to black.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_gradient.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 'Hello, Nushell! This is a gradient.' | ansi gradient --fgend '0xe81cff'\n```\n\n----------------------------------------\n\nTITLE: Skipping Table Rows Based on Field Value in Nushell\nDESCRIPTION: Illustrates using 'skip until' to skip rows in a table until a row with a positive 'a' field value is encountered.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_until.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n[{a: -2} {a: 0} {a: 2} {a: -1}] | skip until {|x| $x.a > 0 }\n```\n\n----------------------------------------\n\nTITLE: Bash Logic Operators Example\nDESCRIPTION: Traditional Bash syntax for conditional command execution using && and || operators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/philosophy_0_80.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat foo.txt && cat bar.txt\ncat foo.txt || cat bar.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Nushell Version Information\nDESCRIPTION: This command displays the Nushell version and its build configuration. It takes no arguments and returns a record containing version information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/version.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> version\n```\n\n----------------------------------------\n\nTITLE: Finding First Index of Byte Pattern in Nushell\nDESCRIPTION: Demonstrates searching for the first occurrence of a byte pattern in binary data, returning the starting index of the match.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_index-of.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n>  0x[33 44 55 10 01 13 44 55] | bytes index-of 0x[44 55]\n1\n```\n\n----------------------------------------\n\nTITLE: Weekly Update Content in Markdown\nDESCRIPTION: A markdown-formatted changelog detailing contributions from various developers to the Nushell project, including command improvements, documentation updates, and RFCs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-07-twin0050.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #50\n\n- JosephTLyons fixed [histogram example](https://github.com/nushell/nushell/pull/2271), renamed [-f to -l in `ls` and `ps`](https://github.com/nushell/nushell/pull/2283), did some [internals cleanup](https://github.com/nushell/nushell/pull/2290)\n- jonathandturner removed [build.rs pre-build steps](https://github.com/nushell/nushell/pull/2282), added [--partial to `to html`](https://github.com/nushell/nushell/pull/2291), added support for [`do -i` to also redirect stderr](https://github.com/nushell/nushell/pull/2309), added [more columns to `ls` in demo](https://github.com/nushell/demo/pull/55)\n- thegedge updated the first parsing stage to [return partial results](https://github.com/nushell/nushell/pull/2284)\n- jzaefferer updated the [docs for alias](https://github.com/nushell/nushell/pull/2285), added a [ribbon and WIP note to demo](https://github.com/nushell/demo/pull/48), optionally [pivot table on overflow in demo](https://github.com/nushell/demo/pull/49), added a [loading indicator for the demo](https://github.com/nushell/demo/pull/50), switched demo to using [`to html --partial`](https://github.com/nushell/demo/pull/54), added [link to demo and fixed link to blog on main site](https://github.com/nushell/nushell.github.io/pull/57), copied [CONTRIBUTING info to main site](https://github.com/nushell/nushell.github.io/pull/56)\n- coolshaurya updated `str collect` to take [an optional separator](https://github.com/nushell/nushell/pull/2289)\n- bailey-layzer added [the `reduce` command](https://github.com/nushell/nushell/pull/2292)\n- kornelski moved Nu to use [the supported app-dirs crate](https://github.com/nushell/nushell/pull/2293)\n- k-brk added [`str contains` and `str index-of`](https://github.com/nushell/nushell/pull/2298)\n- andrasio did an [overhaul of how data reporting works internally](https://github.com/nushell/nushell/pull/2299), added support for [regular values in `histograms`](https://github.com/nushell/nushell/pull/2300), added [samping support for variance and standard deviation](https://github.com/nushell/nushell/pull/2310)\n- nmandery added support for [parsing many more date formats](https://github.com/nushell/nushell/pull/2303)\n- fdncred updated the [rustyline default configuration](https://github.com/nushell/nushell/pull/2305)\n- candostdagdeviren added links for [`Tagged<Value>` and `ShellError` in the docs](https://github.com/nushell/contributor-book/pull/27)\n- homburg added comparison of [Nushell and Bash output to the book](https://github.com/nushell/book/pull/118)\n\nRFCs:\n\n- jonathandturner proposed a new [data representationt to replace the current Row/Table model](https://github.com/nushell/rfcs/pull/3)\n```\n\n----------------------------------------\n\nTITLE: Listing Filter Commands in Nushell\nDESCRIPTION: This command displays all available filter commands in Nushell by filtering the help command output where the category equals 'filters'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/filters/00_filters_overview.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nhelp commands | where category == filters\n```\n\n----------------------------------------\n\nTITLE: Signature for str replace Command in Nushell\nDESCRIPTION: Defines the command signature for the 'str replace' command, showing how it accepts find and replace patterns along with additional parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> str replace {flags} (find) (replace) ...rest\n```\n\n----------------------------------------\n\nTITLE: Generating First 10 Days of January 2020 Using --days Flag\nDESCRIPTION: This example demonstrates an alternative way to generate the first 10 days of January 2020 using the --days flag instead of an end date.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --begin-date '2020-01-01' --days 10 --increment 1day\n```\n\n----------------------------------------\n\nTITLE: Checking Binary Data with Non-Matching Pattern in Nushell\nDESCRIPTION: Example showing a case where the binary data does not end with the specified pattern (0x[11]), returning false.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_ends-with.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AA] | bytes ends-with 0x[11]\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Math Tanh Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'math tanh' function in Nushell. It shows that the command takes optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_tanh.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math tanh {flags}\n```\n\n----------------------------------------\n\nTITLE: Engine Call Error Response Structure\nDESCRIPTION: This snippet shows the JSON structure for an error response to an engine call made by the plugin. It contains a labeled error message, including possible details like code and help links.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCallResponse\": [\n    0,\n    {\n      \"Error\": {\n        \"LabeledError\": {\n          \"msg\": \"The connection closed.\",\n          \"labels\": [],\n          \"code\": null,\n          \"url\": null,\n          \"help\": null,\n          \"inner\": []\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Uname Command in Nushell\nDESCRIPTION: Demonstrates how to use the 'uname' command to print all system information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uname.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> uname\n```\n\n----------------------------------------\n\nTITLE: OpenGraph Properties Extraction Example\nDESCRIPTION: Example showing how to extract OpenGraph meta properties from a webpage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_web.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://www.rust-lang.org | query web --query 'meta[property^=\"og:\"]' --attribute [ property content ]\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Replace-All Command Signature\nDESCRIPTION: Shows the basic command signature for the polars replace-all operation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_replace-all.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars replace-all {flags}\n```\n\n----------------------------------------\n\nTITLE: Defining sys net Command Signature in Nushell\nDESCRIPTION: This snippet shows the command signature for 'sys net'. It indicates that the command can be run with optional flags and takes no input arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_net.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> sys net {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating a Directory in Nushell and PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `mkdir` command in Nushell and PowerShell. In PowerShell, `mkdir` and `md` are used to create a directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"mkdir, md\"\n```\n\n----------------------------------------\n\nTITLE: Example: Counting Length Using Grapheme Clusters in Nushell\nDESCRIPTION: Shows how to use the --grapheme-clusters flag to count string length properly with Unicode characters, where each visible character has length 1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_length.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '🇯🇵ほげ ふが ぴよ' | str length  --grapheme-clusters\n9\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Commands with Short Flags in Nushell\nDESCRIPTION: Shows how to create a custom command with both long and short flag options. The example defines a command that accepts an integer parameter with either --bar or -b syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-26-nushell_0_26.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ndef foo [--bar(-b): int] {\n    echo $bar\n}\n\nfoo -b 10\nfoo --bar 10\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Displaying String Commands\nDESCRIPTION: A responsive HTML table template that renders Nushell string commands. It iterates through the filtered command list using Vue.js directives to display each command name as a link and its corresponding usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/strings.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Executing 'sys disks' Command in Nushell\nDESCRIPTION: This command is used to view information about the system disks in Nushell. It takes no arguments and returns a table of disk information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_disks.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> sys disks {flags}\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins Example\nDESCRIPTION: Demonstrates how to list all installed plugins with their details including name, version, status, PID, filename, shell, and commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_list.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> plugin list\n╭───┬──────┬─────────┬─────────┬────────┬───────────────────────────────┬───────┬─────────────╮\n│ # │ name │ version │ status  │  pid   │           filename            │ shell │  commands   │\n├───┼──────┼─────────┼─────────┼────────┼───────────────────────────────┼───────┼─────────────┤\n│ 0 │ inc  │ 0.103.0 │ running │ 106480 │ /opt/nu/plugins/nu_plugin_inc │       │ ╭───┬─────╮ │\n│   │      │         │         │        │                               │       │ │ 0 │ inc │ │\n│   │      │         │         │        │                               │       │ ╰───┴─────╯ │\n╰───┴──────┴─────────┴─────────┴────────┴───────────────────────────────┴───────┴─────────────╯\n```\n\n----------------------------------------\n\nTITLE: Markdown Weekly Update Content\nDESCRIPTION: A structured changelog in markdown format listing updates and contributions to Nushell, its documentation, and scripts repository\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-06-24-twin0148.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nushell #148\n\n## Nushell\n\n- WindSoilder [fixed plugin path with whitespace](https://github.com/nushell/nushell/pull/5871), and [Port command](https://github.com/nushell/nushell/pull/5849), and [fix exit code](https://github.com/nushell/nushell/pull/5835)\n- jt [bumped to 0.64.1 dev version](https://github.com/nushell/nushell/pull/5865)\n- merelymyself [finished git fetch custom completions to allow for completing branch](https://github.com/nushell/nushell/pull/5859), and [Prevents duplicate fields in `transpose -r`](https://github.com/nushell/nushell/pull/5840), and [Calculate history duration properly (sqlite)](https://github.com/nushell/nushell/pull/5827)\n- fdncred [cleaned up `$config` as a built-in](https://github.com/nushell/nushell/pull/5852), and [update reedline config based on recent reedline changes](https://github.com/nushell/nushell/pull/5845)\n- Kangaxx-0 [removed external nu from nu config](https://github.com/nushell/nushell/pull/5847), and [Add more tests for completion](https://github.com/nushell/nushell/pull/5826)\n- elferherrera [removed quotes from external args](https://github.com/nushell/nushell/pull/5846), and [Allow type comparison](https://github.com/nushell/nushell/pull/5844), and [Exclude ./... from expansion](https://github.com/nushell/nushell/pull/5839), and [Db commands without DB](https://github.com/nushell/nushell/pull/5838)\n- hustcer created [feat: Update dockerfile for latest nu release](https://github.com/nushell/nushell/pull/5843)\n- skelly37 created [root/admin prompt is red now](https://github.com/nushell/nushell/pull/5836)\n\n## Documentation\n\n- hustcer created [Fix broken images in README.md](https://github.com/nushell/nushell.github.io/pull/518), and [fix broken table rendering for operators](https://github.com/nushell/nushell.github.io/pull/517), and [Update zh_CN translation of dataframes and working_with_strings](https://github.com/nushell/nushell.github.io/pull/516), and [Update doc template for commands](https://github.com/nushell/nushell.github.io/pull/515), and [Update zh_CN translation for nu books](https://github.com/nushell/nushell.github.io/pull/514), and [feat: update some zh_CN translations of nu book](https://github.com/nushell/nushell.github.io/pull/513)\n- petrisch created [DE translation for loading data and working with strings](https://github.com/nushell/nushell.github.io/pull/512)\n\n## Nu_Scripts\n\n- Yethal created [Added delete-merged-branches.nu](https://github.com/nushell/nu_scripts/pull/255)\n```\n\n----------------------------------------\n\nTITLE: Parallel file processing in Nushell\nDESCRIPTION: This code shows a Nushell script to iterate through files matching a pattern, open each file, count the number of lines, and create a record with the filename and line count. This script is modified to use `par-each` for parallel processing of the files, improving performance.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\nls **/*.rs | par-each { |row|\n  let num_lines = (open $row.name | lines | length)\n  {name: $row.name, loc: $num_lines}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Signature Definition for plugin list Command\nDESCRIPTION: Shows the basic command signature for the plugin list command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_list.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> plugin list {flags} \n```\n\n----------------------------------------\n\nTITLE: Math Variance Command Signature\nDESCRIPTION: Shows the basic command signature for the math variance function in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_variance.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math variance {flags} \n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugin\nDESCRIPTION: Example of installing a Nushell plugin (textview) using Cargo package manager.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-18-nushell-0_7_0.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_textview\n```\n\n----------------------------------------\n\nTITLE: Triggering a deprecation warning\nDESCRIPTION: This code shows the error message when using the deprecated `--flag: bool` syntax. The message informs the user that the syntax is deprecated and will be removed in a future version, advising them to use `--flag` instead.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-01-09-nushell_0_89_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n```nushell\nError:   × Deprecated: --flag: bool\n   ╭─[entry #3:1:1]\n 1 │ def spam [--foo: bool] { $foo }\n   ·                  ──┬─\n   ·                    ╰── `--flag: bool` is deprecated and will be removed in 0.90. Please use `--flag` instead, more info: https://www.nushell.sh/book/custom_commands.html\n   ╰────\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Optional Dataframe Feature\nDESCRIPTION: This command allows users to install the Nushell package with optional dataframe functionality using the Cargo package manager. It is necessary to have Rust installed to execute this command, which is useful for users who need to utilize dataframes in their scripting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-05-16-nushell_0_80.md#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncargo install nu --features=dataframe\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin with Custom Registry File in Nushell\nDESCRIPTION: Example of adding the 'nu_plugin_polars' plugin to a specific plugin registry file named 'polars.msgpackz' using the --plugin-config flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_add.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> plugin add --plugin-config polars.msgpackz nu_plugin_polars\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Shift Command Signature\nDESCRIPTION: The basic command signature for the polars shift operation showing the required period parameter and available flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_shift.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars shift {flags} (period)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: A markdown formatted changelog detailing updates and contributions to the Nushell project and engine-q repository, including links to pull requests and contributor information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-09-18-twin0108.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nushell #108\n\nBig news this week - [virtualenv added Nushell support](https://virtualenv.pypa.io/en/latest/changelog.html#v20-8-0-2021-09-16)!\n\n## Nushell\n\n- aminya [fixed enabling SIMD](https://github.com/nushell/nushell/pull/4021)\n- jt created [bump 0.37.1](https://github.com/nushell/nushell/pull/4019), and [temporarily remove the circular dep](https://github.com/nushell/nushell/pull/4009), and [Update main.wxs](https://github.com/nushell/nushell/pull/4007), and [released to 0.37](https://github.com/nushell/nushell/pull/4006)\n- kubouch [moved nu-path tests to integration tests](https://github.com/nushell/nushell/pull/4015), and updated [path commands: Put column path args behid flag; Allow `path join` appending without flag](https://github.com/nushell/nushell/pull/4008), and added [Small fixes and refactors to paths & source command](https://github.com/nushell/nushell/pull/3998)\n- tw4452852 [added command `g` to switch shell quickly](https://github.com/nushell/nushell/pull/4014)\n- elferherrera [updated to polars 0.16](https://github.com/nushell/nushell/pull/4013), and [changed name to PROMPT_COMMAND](https://github.com/nushell/nushell/pull/4003)\n- fdncred [added table selector for downloading web tables](https://github.com/nushell/nushell/pull/4004)\n\n## engine-q\n\n- jt added [very early proof-of-concept git branch completion](https://github.com/nushell/engine-q/pull/49), and added [block param types](https://github.com/nushell/engine-q/pull/46)\n- elferherrera improved [error check on def and alias](https://github.com/nushell/engine-q/pull/48), and improved [parse errors for def, let and alias](https://github.com/nushell/engine-q/pull/40)\n- stormasm created [more block param and build string tests in concert with lists](https://github.com/nushell/engine-q/pull/47)\n- kubouch [allowed parsing left-unbounded range (..10)](https://github.com/nushell/engine-q/pull/45), [floating point ranges](https://github.com/nushell/engine-q/pull/44), and [added stepping support & reversing to ranges](https://github.com/nushell/engine-q/pull/43)\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Command pattern for installing plugins for Nushell. Users can replace 'plugin name' with specific plugin names they want to install.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-12-15-nushell_0_24.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Listing Project Updates in Markdown\nDESCRIPTION: A markdown-formatted list of contributions and changes made to the Nushell project, including links to pull requests and brief descriptions of the changes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-09-twin0072.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# This week in Nu #72\n\n- jonathandturner improved [some errors](https://github.com/nushell/nushell/pull/2839), improved [InputStream](https://github.com/nushell/nushell/pull/2847), fixed a [variable scope leak](https://github.com/nushell/nushell/pull/2849), added [shadowing](https://github.com/nushell/nushell/pull/2851), add support for [`source` during parsing](https://github.com/nushell/nushell/pull/2855), renamed [set/set-env to let/let-env](https://github.com/nushell/nushell/pull/2859), released [0.25.0](https://github.com/nushell/nushell/pull/2860), pinned [`syn` to avoid build breakage](https://github.com/nushell/nushell/pull/2868), removed [the line primitive](https://github.com/nushell/nushell/pull/2887), renamed [Path and Pattern](https://github.com/nushell/nushell/pull/2889), updated startup to [treat all startup lines as coming from the same source](https://github.com/nushell/nushell/pull/2890), and fixed [reading/writing of bigint/bigdecimal](https://github.com/nushell/nushell/pull/2893)\n- JosephTLyons fixed a [typo in the sorting error message](https://github.com/nushell/nushell/pull/2841)\n- LhKipp added the [ability to use a comment above the custom command as part of its description](https://github.com/nushell/nushell/pull/2846), improved [the precedence rules for `which`](https://github.com/nushell/nushell/pull/2885)\n- jinlow added [support for filesizes to `math median`](https://github.com/nushell/nushell/pull/2848)\n- baoyachi [reduced the number of dependencies](https://github.com/nushell/nushell/pull/2853), updated [shadow-rs](https://github.com/nushell/nushell/pull/2861)\n- stormasm [refactoring some function in nu-cli](https://github.com/nushell/nushell/pull/2854)\n- sousajf1 [updated some dependencies](https://github.com/nushell/nushell/pull/2857)\n- wycats [improved and documented the lexer](https://github.com/nushell/nushell/pull/2865)\n- TrevorAC99 [updated rust-embed](https://github.com/nushell/nushell/pull/2880)\n- fdncred created a new [VSCode plugin for Nushell!](https://github.com/nushell/vscode-nushell-lang)\n```\n\n----------------------------------------\n\nTITLE: Updating environment temporarily in Nu\nDESCRIPTION: Updates the environment temporarily by prepending the environment variable assignment to the command. This affects the environment only for the duration of the command's execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_24\n\nLANGUAGE: nu\nCODE:\n```\n\"FOO=BAR ./bin\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Dataframe Support\nDESCRIPTION: Command to install Nushell with optional dataframe functionality enabled\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-10-nushell_0_92_2.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=dataframe\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell 0.35 with Extra Features\nDESCRIPTION: Command to install Nushell 0.35 with additional features using Cargo. This installs an extended version of Nushell with more functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-03-nushell_0_35.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Rust Plugin Interface - Getting Current Directory\nDESCRIPTION: Rust method to retrieve the current working directory context for a plugin call, helping plugins maintain proper directory state.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nEngineInterface::get_current_dir()\n```\n\n----------------------------------------\n\nTITLE: Polars Into-Lazy Command Signature\nDESCRIPTION: The basic command signature for the polars into-lazy command showing its syntax structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-lazy.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars into-lazy {flags}\n```\n\n----------------------------------------\n\nTITLE: Basic Polars When Condition\nDESCRIPTION: Creates a simple when condition that returns 4 when column 'a' is greater than 2\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_when.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\npolars when ((polars col a) > 2) 4\n```\n\n----------------------------------------\n\nTITLE: Killing a Process in Nushell and PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `kill` command in Nushell and PowerShell. In PowerShell, `Stop-Process` is used to terminate processes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Stop-Process, kill\"\n```\n\n----------------------------------------\n\nTITLE: Registering Signal Handler in Rust for Nushell Plugin\nDESCRIPTION: Example of registering a signal handler in Rust for a Nushell plugin, responding to Interrupt and Reset signals.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\nlet _guard = engine.register_signal_handler(Box::new(move |action| {\n    match action {\n        SignalAction::Interrupt => println!(\"Interrupt signal received\"),\n        SignalAction::Reset => println!(\"Reset signal received\"),\n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Nushell Variable Mutation Example\nDESCRIPTION: Example of limited mutation support in Nushell 0.80 using the mut keyword.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/philosophy_0_80.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nmut x = 100\n$x = 200\nprint $x\n```\n\n----------------------------------------\n\nTITLE: Converting String with Unit to Filesize\nDESCRIPTION: Shows how to convert a string with a unit to filesize format. The string '-1KB' is converted to '-1.0 kB'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_filesize.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n'-1KB' | into filesize\n```\n\n----------------------------------------\n\nTITLE: Installing Debian/Ubuntu dependencies for Nushell\nDESCRIPTION: This script installs required packages for building Nushell on Debian and Ubuntu systems using apt-get.  It includes pkg-config, build-essential and libssl-dev, which are necessary to compile Nushell from source.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"curl -fsSL https://apt.fury.io/nushell/gpg.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/fury-nushell.gpg\necho \\\"deb https://apt.fury.io/nushell/ /\\\" | sudo tee /etc/apt/sources.list.d/fury.list\nsudo apt update\nsudo apt install nushell\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Single Series in Polars DataFrame\nDESCRIPTION: Example showing how to rename a single series column in a Polars DataFrame created from a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_rename.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [5 6 7 8] | polars into-df | polars rename '0' new_name\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Uso do Menu de Histórico no Nushell\nDESCRIPTION: Demonstração de como o menu de histórico pode ser usado para inserir comandos previamente executados.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/line_editor.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet a = ()\n```\n\nLANGUAGE: nu\nCODE:\n```\nlet a = (ls | where size > 10MiB)\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Environment Variable\nDESCRIPTION: Demonstrates how to access a specific environment variable's value in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/setup.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n$env.APPDATA\n```\n\n----------------------------------------\n\nTITLE: Nothing Type in Nushell\nDESCRIPTION: Example of the 'null' value in Nushell, representing the absence of a value. Contains span information for tracking position in source.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_63\n\nLANGUAGE: nu\nCODE:\n```\nnull\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Nothing\": {\n    \"span\": {\n      \"start\": 64550,\n      \"end\": 64554\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Annotation Syntax in Nushell\nDESCRIPTION: The annotation syntax for declaring a Boolean variable in Nushell is 'bool'. Boolean literals can only be 'true' or 'false'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/bool.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nbool\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Environment Variable Updates in Nushell Source Command\nDESCRIPTION: This snippet shows how the $env.CURRENT_FILE, $env.FILE_PWD, and $env.PROCESS_PATH variables are updated when a file is sourced in Nushell. It prints the values of these environment variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n# test_source.nu\nprint $\"$env.CURRENT_FILE = ($env.CURRENT_FILE?)\"\nprint $\"$env.FILE_PWD = ($env.FILE_PWD?)\"\nprint $\"$env.PROCESS_PATH = ($env.PROCESS_PATH?)\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\nsource test_source.nu\n# => $env.CURRENT_FILE = /Users/fdncred/src/nushell/test_source.nu\n# => $env.FILE_PWD = /Users/fdncred/src/nushell\n# => $env.PROCESS_PATH =\n```\n\n----------------------------------------\n\nTITLE: Creating a string with separator in Nushell\nDESCRIPTION: Example showing how to join elements of a list into a single string with a hyphen separator using the 'str join' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_join.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> ['nu', 'shell'] | str join '-'\nnu-shell\n```\n\n----------------------------------------\n\nTITLE: Nanosecond-Precision Unix Timestamp Conversion in Nushell\nDESCRIPTION: This snippet converts a nanosecond-precision Unix timestamp to a datetime with a specified offset from UTC.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> 1614434140123456789 | into datetime --offset -5\nSat, 27 Feb 2021 13:55:40 +0000 (4 years ago)\n```\n\n----------------------------------------\n\nTITLE: Command Signature for Lines Filter in Nushell\nDESCRIPTION: Shows the basic command signature for the lines command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/lines.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> lines {flags} \n```\n\n----------------------------------------\n\nTITLE: Range Expansion Example\nDESCRIPTION: Demonstrates expanding a numeric range within braces to produce a list of strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> \"{3..5}\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error When Redundantly Converting TOML in Nushell\nDESCRIPTION: This snippet shows an error that occurs when trying to convert an already parsed TOML file using 'from toml'. The error demonstrates how Nushell uses metadata to track the origin of values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/metadata.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen Cargo.toml | from toml\n# => error: Expected a string from pipeline\n# => - shell:1:18\n# => 1 | open Cargo.toml | from toml\n# =>   |                   ^^^^^^^^^ requires string input\n# => - shell:1:5\n# => 1 | open Cargo.toml | from toml\n# =>   |      ---------- object originates from here\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v4 (Random) in Nushell\nDESCRIPTION: This example explicitly generates a UUID v4 string, which is purely random.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_uuid.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nrandom uuid -v 4\n```\n\n----------------------------------------\n\nTITLE: Vue.js Script for Filtering and Displaying Random-Category Commands in Nushell\nDESCRIPTION: A Vue.js component that filters the documentation pages to show only commands in the 'random' category. It accesses the temporary pages data, filters for command documentation paths, then further filters for the random category, and sorts them alphabetically.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/random.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('random'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stream Transformation Plugin in Rust\nDESCRIPTION: This code snippet shows how to implement a plugin that transforms a stream of integers by multiplying each value by two. It demonstrates handling both successful transformations and errors in the stream.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nfn run(..., input: PipelineData) -> Result<PipelineData, ShellError> {\n    Ok(input.map(|value| {\n        let span = value.span();\n        match value.as_int() {\n            Ok(int) => Value::int(int * 2, span),\n\n            // In list streams (i.e., lists of `Value`), errors are always represented by\n            // `Value::Error`.\n            Err(err) => Value::error(err, span),\n        }\n    }))\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Variables in Nushell\nDESCRIPTION: Shows how to declare and use constant variables that are evaluated at parse-time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/variables.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nconst script_file = 'path/to/script.nu'\nsource $script_file\n```\n\n----------------------------------------\n\nTITLE: Last Command Signature\nDESCRIPTION: The basic syntax for the last command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/last.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> last {flags} (rows)\n```\n\n----------------------------------------\n\nTITLE: Killing Process with Basic Signature in Nushell\nDESCRIPTION: Basic command signature showing the kill command format with flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/kill.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> kill {flags} (pid) ...rest\n```\n\n----------------------------------------\n\nTITLE: Opening a JSON file\nDESCRIPTION: Opens a JSON file using the `open` command. Nu parses the JSON content and displays it as a table.  This allows for further data manipulation using Nu's commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen editors/vscode/package.json\n```\n\n----------------------------------------\n\nTITLE: Applying Bitwise OR to Binary Data in Nushell\nDESCRIPTION: Illustrates the use of 'bits or' command with binary data represented in hexadecimal format in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_or.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[88 cc] | bits or 0x[42 32]\nLength: 2 (0x2) bytes | printable whitespace ascii_other non_ascii\n00000000:   ca fe                                                ××\n```\n\n----------------------------------------\n\nTITLE: Enumerate Command Signature in Nushell\nDESCRIPTION: The basic syntax for the enumerate command which takes optional flags as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/enumerate.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> enumerate {flags} \n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Files with Globbing Patterns in Nushell\nDESCRIPTION: This snippet demonstrates the behavior of file commands in Nushell when handling filenames with globbing patterns. Initially, the file named '*.txt' is removed as a literal, followed by removing all matching files when the literal is not found. Requires Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ntouch *.txt foo.txt bar.txt baz.txt\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terminal Background Color with Bell Character in Nushell\nDESCRIPTION: Demonstrates an alternative method to get the terminal background color using the bell character as a terminator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_query.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> term query $'(ansi osc)10;?(char bel)' --prefix $'(ansi osc)10;' --terminator (char bel)\n```\n\n----------------------------------------\n\nTITLE: Git Committer Activity Histogram in Nushell\nDESCRIPTION: Generates a histogram of Git committer activity, displaying contributors and their relative merge frequency sorted in descending order\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/git.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ngit log --pretty=%h»¦«%aN»¦«%s»¦«%aD | lines | split column \"»¦«\" sha1 committer desc merged_at | histogram committer merger | sort-by merger | reverse\n```\n\n----------------------------------------\n\nTITLE: Generate a Sequence of Numbers in Nushell\nDESCRIPTION: Creates a numbered sequence from 0 to 10 in increments of 2 using the generate command with a conditional closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/generate.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ngenerate {|i| if $i <= 10 { {out: $i, next: ($i + 2)} }} 0\n```\n\n----------------------------------------\n\nTITLE: chsh Invalid Shell Error Message\nDESCRIPTION: This snippet demonstrates the error message that might appear when trying to set Nu as the login shell without adding it to the `/etc/shells` file on some Linux distributions.  It indicates that `chsh` command cannot change to the specified shell because it's not listed as valid.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/default_shell.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"chsh: impossible de changer de shell en /home/you/.cargo/bin/nu : shell non valide\"\n```\n\n----------------------------------------\n\nTITLE: Polars Columns Command Signature in Nushell\nDESCRIPTION: The command signature for the 'polars columns' command, which shows dataframe columns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_columns.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars columns {flags} \n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Search Paths\nDESCRIPTION: Example configuration for setting up plugin search directories using the NU_PLUGIN_DIRS constant.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\nconst NU_PLUGIN_DIRS = [\n  ($nu.current-exe | path dirname)\n  ($nu.data-dir | path join 'plugins' | path join (version).version)\n  ($nu.config-path | path dirname | path join 'plugins')\n]\n```\n\n----------------------------------------\n\nTITLE: Using Grapheme Cluster Flags in Nushell String Operations\nDESCRIPTION: Demonstrates the use of the new --graphemes/-g flag with string operations to measure length and perform operations based on extended grapheme clusters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-31-nushell_0_75.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'🇯🇵ほげ ふが ぴよ'   | str substring 4..6 -g\n'🇯🇵ほげ ふが ぴよ'   | str length -g\n'🇯🇵ほげ ふが ぴよ'   | str index-of 'ふが' -g\n'🇯🇵ほげ' | split chars -g | to nuon\n```\n\n----------------------------------------\n\nTITLE: Searching with Range Parameter (LHS Open) in Nushell\nDESCRIPTION: Searches for '6' in the string '123456' but only up to index 4, using a left-hand-side open range (..4). Returns -1 because '6' is at position 5, which is outside the search range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_index-of.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n'123456' | str index-of '6' --range ..4\n```\n\n----------------------------------------\n\nTITLE: Defining Commandline Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'commandline' command in Nushell. This command is used to view the current command line input buffer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/commandline.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> commandline {flags}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Winget Command\nDESCRIPTION: Command to install Nushell directly from the official Microsoft winget package repository\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-06-18-twin0095.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwinget install nu\n```\n\n----------------------------------------\n\nTITLE: Listing Processes with Nushell\nDESCRIPTION: This snippet demonstrates the `ps` command in Nushell, which lists currently running processes and their status. The output is structured as a table, allowing further filtering and manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"ps\"\n```\n\n----------------------------------------\n\nTITLE: Defining the 'bytes collect' Command Signature in Nushell\nDESCRIPTION: The signature for the 'bytes collect' command, showing the command syntax with optional flags and a separator parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_collect.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes collect {flags} (separator)\n```\n\n----------------------------------------\n\nTITLE: Parsing Internal Stream as Module with Debug Output in Nushell\nDESCRIPTION: Shows how to parse an internal stream as a module using nu-check with debug output and the as-module flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-check.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> open module.nu | lines | nu-check --debug --as-module module.nu\n```\n\n----------------------------------------\n\nTITLE: Creating and Describing Polars DataFrame CustomValue in Nushell\nDESCRIPTION: This snippet shows how to create a Polars DataFrame CustomValue using the nu_plugin_polars plugin and the ls command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/custom_value.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nls | polars into-df | describe\n# => NuDataFrameCustomValue\n```\n\n----------------------------------------\n\nTITLE: Drop Nulls Example with Simple Division\nDESCRIPTION: Example showing how to create a simple dataframe with division operations and remove null values from the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_drop-nulls.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet s = ([1 2 0 0 3 4] | polars into-df);\n($s / $s) | polars drop-nulls\n```\n\n----------------------------------------\n\nTITLE: Executing Polars Store-rm Command in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'polars store-rm' command to remove a stored Dataframe from the plugin cache. It first creates a Dataframe, then retrieves the key of the first stored object, and finally removes it using the store-rm command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_store-rm.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet df = ([[a b];[1 2] [3 4]] | polars into-df);\n    polars store-ls | get key | first | polars store-rm $in\n```\n\n----------------------------------------\n\nTITLE: Opening User's config.nu in Default Editor using Nushell\nDESCRIPTION: Demonstrates how to open the user's config.nu file in the default editor using the 'config nu' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_nu.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nconfig nu\n```\n\n----------------------------------------\n\nTITLE: Displaying Input/Output Types for Commandline in Markdown\nDESCRIPTION: Shows the input and output types for the 'commandline' command using a Markdown table. The command takes no input and outputs a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/commandline.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| input   | output |\n| ------- | ------ |\n| nothing | string |\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Data Record in Nushell's SQLite Database\nDESCRIPTION: Example of inserting data into an in-memory SQLite database using the --data-record flag with column-name and column-value pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_insert.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> stor insert --table-name nudb --data-record {bool1: true, int1: 5, float1: 1.1, str1: fdncred, datetime1: 2023-04-17}\n```\n\n----------------------------------------\n\nTITLE: Defining LocalSocket Feature for Nu Plugin [JSON]\nDESCRIPTION: Illustrates how to define and advertise support for the `LocalSocket` feature within a Nu plugin using JSON. This feature allows the plugin to communicate via local socket instead of standard I/O. The feature map must contain a `name` key to identify the feature.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"LocalSocket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Commands to install Nushell using Rust's package manager Cargo. Shows both basic and full-featured installation options.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-04-12-nushell_0_61.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\ncargo install nu --all-features\n```\n\n----------------------------------------\n\nTITLE: Pinning Base64 Version - Rust\nDESCRIPTION: This snippet highlights the pinning of the `base64` crate to a specific fixed patch version within the Nushell project. This is a strategy to prevent unexpected breakages due to changes in newer versions of the dependency. Pinning dependencies improves build reproducibility and stability.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nsholderbach [pinned `base64` to the fixed patch version](https://github.com/nushell/nushell/pull/12762)\n```\n\n----------------------------------------\n\nTITLE: Basic Plist Command Signature in Nushell\nDESCRIPTION: Shows the basic command signature for the 'to plist' command with its flags and syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_plist.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> to plist {flags} \n```\n\n----------------------------------------\n\nTITLE: Updating User Information Display in Nushell\nDESCRIPTION: Changed the command to display user sessions from 'sys | get host.users' to 'sys | get host.sessions' for clarity.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-13-twin0029.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- neuronull changed `sys | get host.users` to `sys | get host.sessions` to make it more obvious it lists user sessions (#1480)\n```\n\n----------------------------------------\n\nTITLE: Binary Data Literal Syntax in Nushell\nDESCRIPTION: Examples of different ways to represent binary data in Nushell, including hexadecimal, octal, and binary representations. Shows the syntax for creating binary literals with their specific prefixes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/binary.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n0x[ffffffff]\n```\n\nLANGUAGE: nushell\nCODE:\n```\n0o[1234567]\n```\n\nLANGUAGE: nushell\nCODE:\n```\n0b[10101010101]\n```\n\nLANGUAGE: nushell\nCODE:\n```\n0x[ffff ffff]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multi-line Format Examples\nDESCRIPTION: Shows incorrect multi-line formatting patterns that should be avoided in Nushell code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/style_guide.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n[[status]; [UP] [UP]] | all { |el|\n    $el.status == UP}\n\n[1  2 3 4] | reduce {|elt, acc|\n    $elt + $acc\n}\n\n{\n   x: 1,\n   y: 2\n}\n\n[{name: \"Teresa\", age: 24},\n  {name: \"Thomas\", age: 26}]\n\nlet selectedProfile = (\n    for it in ($credentials | transpose name credentials) {\n        echo $it.name\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Command pattern for installing optional Nushell plugins using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-04-12-nushell_0_61.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Polars Command Signature in Nushell\nDESCRIPTION: The signature for the `polars` command in Nushell, showing it requires flags to operate. This command provides dataframe manipulation capabilities through various subcommands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars {flags} \n```\n\n----------------------------------------\n\nTITLE: Polars LazyFrame Command Signature\nDESCRIPTION: Command signature showing the basic syntax for the polars sort-by command with flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sort-by.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars sort-by {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Choosing Rust version with Rustup\nDESCRIPTION: This snippet shows the rustup prompt for choosing a Rust version.  The user should enter 1 to select the default, recommended version, and then press enter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n\"Once you are ready, press 1 and then enter.\"\n```\n\n----------------------------------------\n\nTITLE: Generating Randomness in PowerShell\nDESCRIPTION: Shows how to generate randomness in PowerShell.  This can be used for shuffling data using `Sort-Object {Get-Random}`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"$var\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Sort-Object {Get-Random}\"\n```\n\n----------------------------------------\n\nTITLE: Shifting Right a Number by 2 Bits in Nushell\nDESCRIPTION: Demonstrates how to use the 'bits shr' command to shift right a number by 2 bits in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shr.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 8 | bits shr 2\n2\n```\n\n----------------------------------------\n\nTITLE: Nushell Reverse Command Signature\nDESCRIPTION: Base syntax for the reverse command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reverse.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> reverse {flags} \n```\n\n----------------------------------------\n\nTITLE: Splitting Bytes from Socket/Pipe in Nushell\nDESCRIPTION: This code snippet demonstrates using the `bytes split` command in Nushell to process data from a socket or pipe. It opens a raw socket, splits the byte stream based on a null character delimiter, and then decodes each resulting chunk. This approach enables streaming processing of data delimited by characters other than newlines.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nopen --raw ./events.sock | bytes split (char nul) | each { decode }\n```\n\n----------------------------------------\n\nTITLE: Encoding Raw Data Message in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of a Data message with raw byte data in JSON format for the Nushell plugin protocol.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Data\": [\n    0,\n    {\n      \"Raw\": {\n        \"Ok\": [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Random 16 Bytes\nDESCRIPTION: Example showing how to generate 16 random bytes using the random binary command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_binary.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> random binary 16\n```\n\n----------------------------------------\n\nTITLE: Skipping Rows in Table using Nushell 'skip' Command\nDESCRIPTION: Shows how to use the 'skip' command to skip the first two rows of a table, displaying the resulting output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[editions]; [2015] [2018] [2021]] | skip 2\n╭───┬──────────╮\n│ # │ editions │\n├───┼──────────┤\n│ 0 │     2021 │\n╰───┴──────────╯\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings in Nushell\nDESCRIPTION: Demonstrates string concatenation using the '+' operator in Nushell. This operation combines two strings into a single string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/string.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"Hello\" + \" World\"\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer Editor Configuration\nDESCRIPTION: Examples of configuring the buffer editor path and arguments for use with the config command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.buffer_editor = \"code\"\n$env.config.buffer_editor = \"vi\"\n$env.config.buffer_editor = [\"emacsclient\", \"-s\", \"light\", \"-t\"]\n```\n\n----------------------------------------\n\nTITLE: Outputting Nushell Data to External Commands\nDESCRIPTION: Demonstrates how to properly format Nushell structured data for external command processing, using 'ls', 'grep', and external 'ls' as examples.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\nls /usr/share/nvim/runtime/ | get name | to text | ^grep tutor | tr -d '\\n' | ^ls -la $in\n```\n\nLANGUAGE: nushell\nCODE:\n```\nls /usr/share/nvim/runtime/ | get name | find tutor | ansi strip | ^ls -al ...$in\n```\n\n----------------------------------------\n\nTITLE: Moving a file to trash in Nu\nDESCRIPTION: Moves the given file to the system trash using the 'rm' command with the '-t' flag. This allows the file to be recovered from the trash if needed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n\"rm -t <path>\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Content\nDESCRIPTION: A markdown-formatted changelog listing various pull requests and contributions to the Nushell project, including documentation updates, bug fixes, and feature additions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-05-15-twin0038.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #38\n\n- andrasio did some refactoring of grouping ([#1792](https://github.com/nushell/nushell/pull/1792))\n- Samboy218 made empty a calculable value for directory sizes ([#1789](https://github.com/nushell/nushell/pull/1789))\n- AdminXVII moved Nu to the `directories` crate ([#1782](https://github.com/nushell/nushell/pull/1782))\n- Delapouite added docs for `rename` ([#1781](https://github.com/nushell/nushell/pull/1781)) and other commands ([#1778](https://github.com/nushell/nushell/pull/1778), [#1775](https://github.com/nushell/nushell/pull/1775), [#1774](https://github.com/nushell/nushell/pull/1774), [#1761](https://github.com/nushell/nushell/pull/1761))\n- daschl extended the Nu library API to allow for embedding with custom commands ([#1780](https://github.com/nushell/nushell/pull/1780))\n- jonathandturner updated the README ([#1779](https://github.com/nushell/nushell/pull/1779)), released 0.14 ([#1766](https://github.com/nushell/nushell/pull/1766)), added some help examples ([#1759](https://github.com/nushell/nushell/pull/1759), [#1755](https://github.com/nushell/nushell/pull/1755)), fixed bugs in it-expansion ([#1757](https://github.com/nushell/nushell/pull/1757)), simplified list view ([#1749](https://github.com/nushell/nushell/pull/1752))\n- hdhoang fixed a typo in `cal` ([#1776](https://github.com/nushell/nushell/pull/1776))\n- JosephTLyons fixed a typo in `config` ([#1769](https://github.com/nushell/nushell/pull/1769)), updated `cal` docs ([#1746](https://github.com/nushell/nushell/pull/1746)), added the `cal` command ([#1739](https://github.com/nushell/nushell/pull/1739))\n- thegedge added examples to some commands ([#1765](https://github.com/nushell/nushell/pull/1765))\n- elichai added the ability for help to have examples ([#1752](https://github.com/nushell/nushell/pull/1752))\n- nespera fixed the help text for the `alias` command ([#1742](https://github.com/nushell/nushell/pull/1742))\n- 1ntEgr8 fixed a bug in `start` ([#1738](https://github.com/nushell/nushell/pull/1738))\n- ryepesg started a new book chapters comparing to imperative and functional langauges ([#82](https://github.com/nushell/book/pull/82))\n- jzaefferer updated the book introduction to the latest Nu ([#77](https://github.com/nushell/book/pull/77))\n- Also _big_ thanks to mhmdanas, 0xABAD, hilias, andrasio, Dimagog, rutrum, fdncred for fixing typos in the book\n```\n\n----------------------------------------\n\nTITLE: Performing Operation on Custom Value via `Operation`\nDESCRIPTION: This snippet illustrates how to perform an operation using a custom value with another value. The response can be PipelineData or Error, depending on the operation outcome.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [\n    0,\n    {\n      \"CustomValueOp\": [\n        {\n          \"item\": {\n            \"name\": \"version\",\n            \"data\": [0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0]\n          },\n          \"span\": {\n            \"start\": 90,\n            \"end\": 96\n          }\n        },\n        {\n          \"Operation\": [\n            {\n              \"item\": {\n                \"Math\": \"Plus\"\n              },\n              \"span\": {\n                \"start\": 180,\n                \"end\": 181\n              }\n            },\n            {\n              \"Int\": {\n                \"val\": 7,\n                \"span\": {\n                  \"start\": 183,\n                  \"end\": 184\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Reference and Relative Time\nDESCRIPTION: Example showing how to set timestamps relative to a reference file's time.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n> touch -r fixture.json -d \"-1 month\" a\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Aliases in Nushell\nDESCRIPTION: Demonstrates how to create and use command aliases in Nushell. The example shows creating an alias 'myecho' that wraps the echo command with a parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-21-nushell_0_13_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nalias myecho [msg] { echo $msg }\nmyecho \"hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Executing Keybindings List Command in Nushell\nDESCRIPTION: The basic syntax for running the 'keybindings list' command in Nushell. This command lists available options that can be used to create keybindings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_list.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> keybindings list {flags}\n```\n\n----------------------------------------\n\nTITLE: Path Basename Command Signature\nDESCRIPTION: The basic syntax for the path basename command showing required structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_basename.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> path basename {flags} \n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Unicode Escape Syntax in Nushell\nDESCRIPTION: Shows how to use the new Unicode escape syntax in Nushell strings, allowing insertion of any Unicode code point using 1-6 hex digits.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-31-nushell_0_75.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\necho \"AB\\u{43}\\u{044}\"\necho \"Gabriel, blow your \\u{1f3BA}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Nanoseconds from Datetime in Polars Dataframe\nDESCRIPTION: Example showing how to extract nanoseconds from datetime values in a Polars dataframe. Creates a datetime object, converts it to a dataframe, and extracts the nanosecond component.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-nanosecond.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-nanosecond\n```\n\n----------------------------------------\n\nTITLE: Filtering Git Commits by Age in Nushell\nDESCRIPTION: Demonstrates how to filter Git commits that are less than a year old using the where command. The command first converts the date string into a datetime object, then compares it with the current date minus 365 days.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 25 | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 365day))\n```\n\n----------------------------------------\n\nTITLE: ByteStream Header Variant Example in JSON\nDESCRIPTION: Example of a ByteStream header variant that starts a byte stream. It specifies the stream identifier, span information, and the type of the stream as String for text data with valid UTF-8 encoding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ByteStream\": {\n    \"id\": 7,\n    \"span\": {\n      \"start\": 49011,\n      \"end\": 49027\n    },\n    \"type\": \"String\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cursor Position in Nushell\nDESCRIPTION: Demonstrates how to use the 'term query' command to get the cursor position in the terminal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_query.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> term query (ansi cursor_position) --prefix (ansi csi) --terminator 'R'\n```\n\n----------------------------------------\n\nTITLE: Nushell Every Command Signature\nDESCRIPTION: The command signature showing the basic syntax for the 'every' command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/every.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> every {flags} (stride)\n```\n\n----------------------------------------\n\nTITLE: Opening file in raw mode\nDESCRIPTION: Opens a `Cargo.toml` file in raw mode using the `--raw` flag. This returns the file's content as a string, bypassing Nu's automatic parsing and data structuring.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nopen Cargo.toml --raw\n```\n\n----------------------------------------\n\nTITLE: Checking Outdated Translations in Nu\nDESCRIPTION: Command to run a helper script for checking outdated translations for a specific locale in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nnu tools/i18n.nu outdated zh-CN\n```\n\n----------------------------------------\n\nTITLE: Recursive Pattern for Keyboard Input in Nushell\nDESCRIPTION: Recursive implementation for handling keyboard input with a custom command that calls itself until desired key is pressed. Limited by recursion limit setting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/input_listen_keys.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef run_some_code [] {\n  print \"I'm running the code and returning 42\"\n  42\n}\n\nprint '(a) Run some code (x) Exit'\n\ndef input_loop [] {\n  let key = (input listen --types [key])\n  if ($key.code == 'a') and ($key.modifiers == []) {\n      run_some_code\n  } else if ($key.code == 'x') and ($key.modifiers == []) {\n      print 'User exited'\n  } else if ($key.code == 'c') and ($key.modifiers == ['keymodifiers(control)']) {\n      print 'Terminated with Ctrl-C'\n  } else {\n      print \"That key wasn't recognized.\"\n      print 'Press (a) to run some code or (x) to Exit'\n      # Recurse\n      input_loop\n  }\n}\ntry {\n  input_loop\n} catch {|e| print ($e.debug)}\n```\n\n----------------------------------------\n\nTITLE: Zipping Streams with Sequence Generator\nDESCRIPTION: Demonstrates zipping a sequence with a closure that generates another sequence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/zip.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> seq 1 3 | zip { seq 4 600000000 }\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell plugins using Cargo in Rust\nDESCRIPTION: Generic command to install Nushell plugins using Cargo package manager in Rust. Replace <plugin name> with the specific plugin you want to install.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-12-28-nushell_0_42.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Clear Command Signature in Nushell\nDESCRIPTION: The basic signature format for the clear command showing the command structure with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/clear.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> clear {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting a Table Column to Title Case in Nushell\nDESCRIPTION: Example showing how to apply the 'str title-case' command to a specific column in a Nushell table, converting values to Title Case while preserving the table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_title-case.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[title, count]; ['nu test', 100]] | str title-case title\n╭───┬─────────┬───────╮\n│ # │  title  │ count │\n├───┼─────────┼───────┤\n│ 0 │ Nu Test │   100 │\n╰───┴─────────┴───────╯\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `get` to Rust's `Vec[x]`\nDESCRIPTION: Illustrates how to access elements in a Rust Vector using indexing, equivalent to the `get` command in Nushell.  Accessing elements at specific indices is a fundamental Vector operation in Rust.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_34\n\nLANGUAGE: Rust\nCODE:\n```\n\"Vec[x]\"\n```\n\n----------------------------------------\n\nTITLE: Parsing with Look Ahead Atomic Group\nDESCRIPTION: Example of parsing using fancy-regex look ahead atomic group pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/parse.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> \"abcd\" | parse --regex '^a(bc(?=d)|b)cd$'\n```\n\n----------------------------------------\n\nTITLE: Disabling Garbage Collection for Nushell Plugins in Other Languages\nDESCRIPTION: Demonstrates how to disable garbage collection for Nushell plugins in languages other than Rust using the GcDisabled option. This can be sent at any time to control the plugin's garbage collection behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Option\": {\n    \"GcDisabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Command to install Nushell using Cargo, the Rust package manager. This is the basic installation method for users who have Rust installed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-12-15-nushell_0_24.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Cargo in Rust\nDESCRIPTION: Commands to install Nushell using Cargo, the Rust package manager. Includes options for installing with extra features and the experimental table pager.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-04-20-nushell_0_30.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\ncargo install nu --features=extra\ncargo install nu --features=table-pager\n```\n\n----------------------------------------\n\nTITLE: Creating an Error Value in Nushell\nDESCRIPTION: Example of explicitly creating an error value in Nushell using 'error make'. The error contains a message, label text, and span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_64\n\nLANGUAGE: nu\nCODE:\n```\nerror make {\n  msg: \"foo\"\n  label: {\n    text: \"bar\"\n    span: {\n      start: 0\n      end: 0\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Error\": {\n    \"val\": {\n      \"msg\": \"foo\",\n      \"labels\": [\n        {\n          \"text\": \"bar\",\n          \"span\": {\n            \"start\": 0,\n            \"end\": 0\n          }\n        }\n      ],\n      \"code\": null,\n      \"url\": null,\n      \"help\": null,\n      \"inner\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Histogram Command in Nushell\nDESCRIPTION: Example of using the new histogram command in Nushell to visualize data from a CSV file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> open tests/fixtures/formats/caco3_plastics.csv | histogram origin\n```\n\n----------------------------------------\n\nTITLE: Converting List of Booleans to Dataframe in Nushell\nDESCRIPTION: Example demonstrating how boolean values are preserved when converting a list to a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n[true true false] | polars into-df\n```\n\n----------------------------------------\n\nTITLE: Listing Nushell Filter Commands\nDESCRIPTION: A command to display all available filter commands in Nushell by querying the help system and filtering results by category.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/flow_control/00_flow_control_overview.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands | where category == filters\n```\n\n----------------------------------------\n\nTITLE: Writing Brotli-Compressed MessagePack\nDESCRIPTION: Converts Nu values into Brotli-compressed MessagePack format. It first converts the Nushell values to MessagePack and then compresses the result using Brotli. The `open` and `save` commands automatically use `msgpackz` conversion if the file extension matches.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\nopen ~/.config/nushell/plugin.msgpackz |\n    update plugins {\n        # Remove plugins with missing files:\n        where { get filename | path exists }\n    } |\n    save -f ~/.config/nushell/plugin.msgpackz\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'config nu' Command in Nushell\nDESCRIPTION: Specifies the command signature for 'config nu', including its flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_nu.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nconfig nu {flags}\n```\n\n----------------------------------------\n\nTITLE: Moving Files in Nushell and PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `mv` command in Nushell and PowerShell. In PowerShell, `Move-Item`, `mv`, `move`, and `mi` are used to move files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Move-Item, mv, move, mi\"\n```\n\n----------------------------------------\n\nTITLE: Removing Plugins in Nushell\nDESCRIPTION: Command to remove a plugin from the Nushell registry\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_19\n\nLANGUAGE: nu\nCODE:\n```\nplugin rm gstat\n```\n\n----------------------------------------\n\nTITLE: Random Dice Command Signature in Nushell\nDESCRIPTION: The basic command signature for the random dice roll functionality in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/random_dice.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> random dice {flags} \n```\n\n----------------------------------------\n\nTITLE: Rendering a Record to Grid in Nushell\nDESCRIPTION: Demonstrates how a record is rendered in grid format, showing only the 'name' value or the first value if no 'name' field exists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/grid.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> {name: 'foo', b: 1, c: 2} | grid\nfoo\n\n```\n\n----------------------------------------\n\nTITLE: Finding Random Free Port - Nushell Example\nDESCRIPTION: Shows how to get a free port from the system without specifying a range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/port.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> port\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Dataframe in Repr Format using Nushell\nDESCRIPTION: This example demonstrates how to convert a table to a Polars dataframe and then display it in repr format. It shows the structure and content of the dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-repr.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [2025-01-01 2] [2025-01-02 4]] | polars into-df | polars into-repr\n```\n\n----------------------------------------\n\nTITLE: Opening a PDF File Using NuShell\nDESCRIPTION: This snippet illustrates the use of the `start` command for opening a PDF file ('file.pdf') in the default PDF viewer. The command requires the path to the PDF file to function correctly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/start.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> start file.pdf\n\n```\n\n----------------------------------------\n\nTITLE: Match Statement Assignment in Nushell\nDESCRIPTION: This snippet showcases assigning a value to an environment variable using a `match` statement in Nushell. Based on the value of 3, `$env.BUILD_EXT` is assigned either 'yes!' or 'no!'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-07-25-nushell_0_83.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n$env.BUILD_EXT = match 3 { 1 => { 'yes!' }, _ => { 'no!' } }\n```\n\n----------------------------------------\n\nTITLE: Count Rows in Dataframe Example\nDESCRIPTION: Example showing how to count the number of rows in a dataframe using polars len command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_len.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars select (polars len) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Decoding Base32 in Nushell\nDESCRIPTION: The 'decode base32' command in Nushell is used to decode Base32 encoded values. It can handle arbitrary binary data and encoded strings, with an option to decode without padding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base32.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> decode base32 {flags}\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> \"AEBAGBAF\" | decode base32\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> \"NBUQ====\" | decode base32 | decode\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> \"NBUQ\" | decode base32 --nopad\n```\n\n----------------------------------------\n\nTITLE: Command Signature in Nushell\nDESCRIPTION: Shows the basic command signature for retrieving CPU information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_cpu.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> sys cpu {flags} \n```\n\n----------------------------------------\n\nTITLE: Accessing Record Values in Nushell\nDESCRIPTION: Demonstrates how to access record values using quotes, especially when key names could be confused with numeric values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\nlet record_example = {\n  \"1\": foo\n  \"2\": baz\n  \"3\": far\n}\n\n$record_example.\"1\"\n# =>   foo\n```\n\n----------------------------------------\n\nTITLE: Registering a Python plugin in Nushell\nDESCRIPTION: This snippet demonstrates registering a Python script as a Nushell plugin.  It utilizes the `register` command with `-e` to specify JSON serialization and `-s` to indicate that Python should be used to execute the plugin script.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\n> register -e json -s python ~/my_plugins/plugin.py\n\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table for Dataframe Commands\nDESCRIPTION: This code snippet represents a markdown table listing various dataframe commands in Nushell. It includes command names, what they apply to, descriptions, and Nushell equivalents where available.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\n| Command Name           | Applies To            | Description                                                                                      | Nushell Equivalent      |\n| ---------------------- | --------------------- | ------------------------------------------------------------------------------------------------ | ----------------------- |\n| polars agg             | dataframe             | Performs a series of aggregations from a group-by.                                               | math                    |\n| polars agg-groups      | expression            | Creates an agg_groups expression.                                                                |                         |\n| polars all-false       | dataframe             | Returns true if all values are false.                                                            |                         |\n| polars all-true        | dataframe             | Returns true if all values are true.                                                             | all                     |\n| polars append          | dataframe             | Appends a new dataframe.                                                                         |                         |\n| polars arg-max         | dataframe             | Return index for max value in series.                                                            |                         |\n| polars arg-min         | dataframe             | Return index for min value in series.                                                            |                         |\n| polars arg-sort        | dataframe             | Returns indexes for a sorted series.                                                             |                         |\n| polars arg-true        | dataframe             | Returns indexes where values are true.                                                           |                         |\n| polars arg-unique      | dataframe             | Returns indexes for unique values.                                                               |                         |\n| polars arg-where       | any                   | Creates an expression that returns the arguments where expression is true.                       |                         |\n| polars as              | expression            | Creates an alias expression.                                                                     |                         |\n| polars as-date         | dataframe             | Converts string to date.                                                                         |                         |\n| polars as-datetime     | dataframe             | Converts string to datetime.                                                                     |                         |\n| polars cache           | dataframe             | Caches operations in a new LazyFrame.                                                            |                         |\n| polars cast            | expression, dataframe | Cast a column to a different dtype.                                                              |                         |\n| polars col             | any                   | Creates a named column expression.                                                               |                         |\n| polars collect         | dataframe             | Collect lazy dataframe into eager dataframe.                                                     |                         |\n| polars columns         | dataframe             | Show dataframe columns.                                                                          |                         |\n| polars concat-str      | any                   | Creates a concat string expression.                                                              |                         |\n| polars concatenate     | dataframe             | Concatenates strings with other array.                                                           |                         |\n| polars contains        | dataframe             | Checks if a pattern is contained in a string.                                                    |                         |\n| polars count           | expression            | Creates a count expression.                                                                      |                         |\n| polars count-null      | dataframe             | Counts null values.                                                                              |                         |\n| polars cumulative      | dataframe             | Cumulative calculation for a series.                                                             |                         |\n| polars datepart        | expression            | Creates an expression for capturing the specified datepart in a column.                          |                         |\n| polars drop            | dataframe             | Creates a new dataframe by dropping the selected columns.                                        | drop                    |\n| polars drop-duplicates | dataframe             | Drops duplicate values in dataframe.                                                             |                         |\n| polars drop-nulls      | dataframe             | Drops null values in dataframe.                                                                  |                         |\n| polars dummies         | dataframe             | Creates a new dataframe with dummy variables.                                                    |                         |\n| polars explode         | expression, dataframe | Explodes a dataframe or creates a explode expression.                                            |                         |\n| polars expr-not        | expression            | Creates a not expression.                                                                        |                         |\n| polars fetch           | dataframe             | Collects the lazyframe to the selected rows.                                                     |                         |\n| polars fill-nan        | dataframe             | Replaces NaN values with the given expression.                                                   |                         |\n| polars fill-null       | dataframe             | Replaces NULL values with the given expression.                                                  |                         |\n| polars filter          | dataframe             | Filter dataframe based in expression.                                                            |                         |\n| polars filter-with     | dataframe             | Filters dataframe using a mask or expression as reference.                                       |                         |\n| polars first           | expression, dataframe | Show only the first number of rows or create a first expression                                  | first                   |\n| polars flatten         | expression, dataframe | An alias for polars explode.                                                                     |                         |\n| polars get             | dataframe             | Creates dataframe with the selected columns.                                                     | get                     |\n| polars get-day         | dataframe             | Gets day from date.                                                                              |                         |\n| polars get-hour        | dataframe             | Gets hour from date.                                                                             |                         |\n| polars get-minute      | dataframe             | Gets minute from date.                                                                           |                         |\n| polars get-month       | dataframe             | Gets month from date.                                                                            |                         |\n| polars get-nanosecond  | dataframe             | Gets nanosecond from date.                                                                       |                         |\n| polars get-ordinal     | dataframe             | Gets ordinal from date.                                                                          |                         |\n| polars get-second      | dataframe             | Gets second from date.                                                                           |                         |\n| polars get-week        | dataframe             | Gets week from date.                                                                             |                         |\n| polars get-weekday     | dataframe             | Gets weekday from date.                                                                          |                         |\n| polars get-year        | dataframe             | Gets year from date.                                                                             |                         |\n```\n\n----------------------------------------\n\nTITLE: Signature Definition for Config Flatten Command in Nushell\nDESCRIPTION: Shows the command signature for the config flatten command which takes only optional flags and returns configuration in flattened form.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_flatten.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> config flatten {flags} \n```\n\n----------------------------------------\n\nTITLE: Keychain Integration in Nushell\nDESCRIPTION: Script to integrate Keychain SSH key management with Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/ssh_agent.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nkeychain --eval --quiet <your ssh keys, eg. id_ed25519>\n    | lines\n    | where not ($it | is-empty)\n    | parse \"{k}={v}; export {k2};\"\n    | select k v\n    | transpose --header-row\n    | into record\n    | load-env\n```\n\n----------------------------------------\n\nTITLE: Command Signature for Path Expansion\nDESCRIPTION: Shows the basic command signature for the path expand functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_expand.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> path expand {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining Loop Command Signature in Nushell\nDESCRIPTION: Specifies the command signature for the 'loop' command in Nushell, indicating that it takes a block as an argument.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/loop.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nloop {flags} (block)\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values with Match Command in Nushell\nDESCRIPTION: Demonstrates the updated `match` command functionality to properly handle `null` values in Nushell, where previously it would fail. Ensures compatibility with null data types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> match null { null => \"success\", _ => \"failure\" }\n```\n\n----------------------------------------\n\nTITLE: Using the 'Until' Event Type in Nushell Keybindings\nDESCRIPTION: This example sets up a keybinding with conditional event execution using the 'until' keyword. It alternates between opening a completion menu and moving to the next element, only triggering the next event upon success.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n    keybindings: [\n      {\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: {\n          until: [\n            { send: menu name: completion_menu }\n            { send: menunext }\n          ]\n        }\n      }\n    ]\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Syntax for Temporary Environment Variables in Nushell\nDESCRIPTION: Shows the shorthand syntax for setting temporary environment variables in Nushell, similar to how it works in Bash and other shells. This provides a more concise way to set variables for a single command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-05-12-nushell_0_14_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> DEBUG=true command arg1 arg2\n```\n\n----------------------------------------\n\nTITLE: Filtering and Displaying Plugin Commands with Vue.js\nDESCRIPTION: This snippet defines a Vue.js component that filters documentation pages to find plugin commands, sorts them alphabetically, and makes them available for rendering in the template. It filters pages by path and category to isolate plugin-specific commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/plugin.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('plugin'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the MyEach Plugin for Closure Evaluation in Nushell\nDESCRIPTION: This Nushell command demonstrates the use of the MyEach plugin to apply a closure to each element of a list, multiplying each number by 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_18\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3] | my-each { |i| $i * 2 }\n╭───┬───╮\n│ 0 │ 2 │\n│ 1 │ 4 │\n│ 2 │ 6 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Example: Checking All False Values in a Boolean Array in Nushell\nDESCRIPTION: An example showing how to use 'polars all-false' to check if all values in a boolean array are false, returning true when all are false.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_all-false.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [false false false] | polars into-df | polars all-false\n╭───┬───────────╮\n│ # │ all_false │\n├───┼───────────┤\n│ 0 │ true      │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Defining a command with an optional boolean flag\nDESCRIPTION: This code shows the deprecated way of defining a command with an optional boolean flag in Nushell.  Using `--foo: bool` is deprecated and will be removed in version 0.90. The recommended way is to use `--foo` instead.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-01-09-nushell_0_89_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n```nushell\ndef spam [--foo: bool] { $foo }\n```\n```\n\n----------------------------------------\n\nTITLE: Binary Data Representation in Nushell\nDESCRIPTION: Example of a binary literal in Nushell. The binary data contains four bytes represented as hexadecimal values, with span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_65\n\nLANGUAGE: nu\nCODE:\n```\n0x[aa bb cc dd]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Binary\": {\n    \"val\": [170, 187, 204, 221],\n    \"span\": {\n      \"start\": 659637,\n      \"end\": 659652\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Converting File with Nu Shell\nDESCRIPTION: This Nu Shell snippet attempts to open a 'Cargo.toml' file and convert it using 'from toml'. The example demonstrates an error that occurs when the 'from toml' command does not receive a string input. The output includes a detailed error message and trace for debugging. Nu Shell must be installed, and 'Cargo.toml' should exist and be accessible.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/metadata.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen Cargo.toml | from toml\n# => error: Expected a string from pipeline\n# => - shell:1:18\n# => 1 | open Cargo.toml | from toml\n# =>   |                   ^^^^^^^^^ requires string input\n# => - shell:1:5\n# => 1 | open Cargo.toml | from toml\n# =>   |      ---------- object originates from here\n\n```\n\n----------------------------------------\n\nTITLE: Basic Module Command Signature\nDESCRIPTION: Shows the basic command signature for defining a module in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/module.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> module {flags} (module) (block)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of polars expr-not in Nushell\nDESCRIPTION: Creates a logical NOT expression to negate a comparison condition. This example negates the condition 'column a is greater than 2'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_expr-not.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n(polars col a) > 2) | polars expr-not\n```\n\n----------------------------------------\n\nTITLE: Computing ArcSinh Example\nDESCRIPTION: Demonstrates how to calculate the inverse hyperbolic sine of 0 using the math arcsinh command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arcsinh.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 0 | math arcsinh\n0\n```\n\n----------------------------------------\n\nTITLE: Conditional Hook Example\nDESCRIPTION: This snippet introduces the concept of conditional hooks in Nushell. It shows how to define a hook that only executes if a specific condition is met. The `condition` block is evaluated, and if it returns `true`, the `code` block is executed. This example uses the `PWD` environment variable to check if the current directory matches a specific path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks {\n    env_change: {\n        PWD: [\n            {\n                condition: {|before, after| $after == /some/path/to/directory }\n                code: {|before, after| load-env { SPAM: eggs } }\n            }\n        ]\n    }\n})\"\n```\n\n----------------------------------------\n\nTITLE: List Creation in Nushell\nDESCRIPTION: Creating simple lists with multiple values\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/types_of_data.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\necho [sam fred george]\n```\n\n----------------------------------------\n\nTITLE: Getting System Information in Bash\nDESCRIPTION: This snippet shows the Bash commands to get system information, equivalent to the `sys` command in Nushell. Includes commands like `uname`, `lshw`, `lsblk`, `lscpu`, `lsusb`, `hdparam`, and `free`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_39\n\nLANGUAGE: Bash\nCODE:\n```\n\"uname, lshw, lsblk, lscpu, lsusb, hdparam, free\"\n```\n\n----------------------------------------\n\nTITLE: Saving Modified Table to a New File in Nushell\nDESCRIPTION: This snippet shows how to save a modified table to a new TOML file using the save command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | insert next_edition 2021 | save rustfmt2.toml\nopen rustfmt2.toml\n```\n\n----------------------------------------\n\nTITLE: Displaying File Listings as Tables in Nushell\nDESCRIPTION: Using the 'ls' command to display directory contents as a formatted table, showing file properties like name, type, size, and timestamps.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nls\n# => ---+---------------+------+----------+---------+------------+------------\n# =>  # | name          | type | readonly | size    | accessed   | modified\n# => ---+---------------+------+----------+---------+------------+------------\n# =>  0 | add.rs        | File |          | 2.7 KB  | 2 days ago | 2 days ago\n# =>  1 | sum.rs        | File |          | 3.0 KB  | 2 days ago | 2 days ago\n# =>  2 | inc.rs        | File |          | 11.8 KB | 2 days ago | 2 days ago\n# =>  3 | str.rs        | File |          | 21.4 KB | 2 days ago | 2 days ago\n# =>  4 | skip.rs       | File |          | 1.7 KB  | 2 days ago | 2 days ago\n# =>  5 | textview.rs   | File |          | 9.4 KB  | 2 days ago | 2 days ago\n# =>  6 | binaryview.rs | File |          | 13.0 KB | a day ago  | a day ago\n# =>  7 | edit.rs       | File |          | 2.7 KB  | 2 days ago | 2 days ago\n# =>  8 | tree.rs       | File |          | 3.0 KB  | 2 days ago | 2 days ago\n# =>  9 | sys.rs        | File |          | 9.2 KB  | 2 days ago | 2 days ago\n# => ---+---------------+------+----------+---------+------------+------------\n```\n\n----------------------------------------\n\nTITLE: Illustrating Block Usage in Nushell\nDESCRIPTION: This snippet demonstrates the usage of a block in Nushell. Blocks are used to represent code that can be executed on data rows, often used in filtering operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/tipos_de_dados.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nwhere { $it.size > 10kb }\n```\n\n----------------------------------------\n\nTITLE: Installing macOS dependencies with Homebrew\nDESCRIPTION: This command installs the `openssl` and `cmake` packages using `brew` on macOS systems. These packages are dependencies required to build Nushell from source.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n\"Using [Homebrew](https://brew.sh/), you will need to install \\\"openssl\\\" and \\\"cmake\\\" using:\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Time in RFC 3339 Format in Nushell\nDESCRIPTION: This example shows how to get the current time in full RFC 3339 format with time zone information using the debug command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_now.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\ndate now | debug\n```\n\n----------------------------------------\n\nTITLE: Converting Complex YAML to Nested Table in Nushell\nDESCRIPTION: Example of converting a YAML string with nested array structure to a Nushell table with nested tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_yml.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> '[ a: 1, b: [1, 2] ]' | from yaml\n╭───┬────┬───────────╮\n│ # │ a  │     b     │\n├───┼────┼───────────┤\n│ 0 │  1 │    ❎     │\n│ 1 │ ❎ │ ╭───┬───╮ │\n│   │    │ │ 0 │ 1 │ │\n│   │    │ │ 1 │ 2 │ │\n│   │    │ ╰───┴───╯ │\n╰───┴────┴───────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Adding Examples to Custom Command in Nushell\nDESCRIPTION: Demonstrates how to use the '@example' attribute to add examples to a custom command, including specifying expected results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/attr_example.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> # Double numbers\n    @example \"double an int\" { 2 | double } --result 4\n    @example \"double a float\" { 0.25 | double } --result 0.5\n    def double []: [number -> number] { $in * 2 }\n```\n\n----------------------------------------\n\nTITLE: Polars Decimal Command Signature\nDESCRIPTION: Command signature showing the syntax for the polars decimal command with optional flags and required infer_length parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_decimal.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars decimal {flags} (infer_length)\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Displaying Path Commands\nDESCRIPTION: A HTML table structure that displays the filtered path commands. The table has two columns - Command (with links to individual command documentation) and Description (showing the command usage). It uses Vue's v-for directive to iterate over the filtered commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/path.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Commands for installing Nushell shell using Rust's Cargo package manager. Shows basic installation and installation with extra features.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-07-26-nushell-0_66.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Accessing a Column in System Information\nDESCRIPTION: This snippet uses the `get` command to access the 'host' column in the output of the `sys` command. The 'host' column contains nested information about the system's host.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"sys | get host\"\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for Filtering Filesystem Commands\nDESCRIPTION: A Vue.js script block that computes filtered commands from the pages data source. It filters for filesystem-related commands and sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/filesystem.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('filesystem'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Environment Configuration in Vim\nDESCRIPTION: Command to open Nushell environment configuration file in Vim editor.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/setup.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nvim $nu.env-path\n```\n\n----------------------------------------\n\nTITLE: Filtering System Commands with Vue.js\nDESCRIPTION: Vue.js component script that filters pages to extract system-related commands and sorts them alphabetically by title. It imports page data and processes it for display.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/system.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pages from '@temp/pages'\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('system'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Math Floor Command Signature\nDESCRIPTION: Command signature for the math floor function showing basic syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_floor.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math floor {flags} \n```\n\n----------------------------------------\n\nTITLE: Accessing Last Exit Code in Nushell\nDESCRIPTION: Shows how to retrieve the exit code of the last executed external command using an environment variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndo { external }\n$env.LAST_EXIT_CODE\n```\n\n----------------------------------------\n\nTITLE: Checking Binary Data Ending with 0x[AA] in Nushell\nDESCRIPTION: Example showing how to check if a binary value ends with the byte pattern 0x[AA], resulting in a true value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_ends-with.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AA] | bytes ends-with 0x[AA]\ntrue\n```\n\n----------------------------------------\n\nTITLE: Enumerate and Iteration Example\nDESCRIPTION: Shows how to use enumerate to access both index and item in an iteration\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/thinking_in_nushell.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nls | enumerate | each { |row| $\"Number ($row.index) is size ($row.item.size)\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Command to install optional Nushell plugins using Cargo\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-10-nushell_0_92_2.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Dropping First Three Numeric Rows\nDESCRIPTION: Example demonstrating dropping the first three rows from a numeric list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3,4,5] | drop nth 0 1 2\n╭───┬───╮\n│ 0 │ 3 │\n│ 1 │ 4 │\n│ 2 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Removed Commands with Vue.js\nDESCRIPTION: This Vue.js component computes a list of removed Nushell commands by filtering pages that include '/commands/docs/' in their path and have 'removed' in their categories. The commands are then sorted alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/removed.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('removed'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Nushell Prompt Command\nDESCRIPTION: Example of setting a custom prompt that displays date and current directory\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/coloring_and_theming.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n$env.PROMPT_COMMAND = { $\"(date now | format date '%m/%d/%Y %I:%M:%S%.3f'): (pwd | path basename)\" }\n```\n\n----------------------------------------\n\nTITLE: Converting Duration String to Duration Value in Nushell\nDESCRIPTION: Demonstrates how to convert a simple duration string into a duration value. The command parses the input '7min' and returns a duration object.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_duration.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n'7min' | into duration\n```\n\n----------------------------------------\n\nTITLE: Nushell ANSI Link Command Signature\nDESCRIPTION: The basic syntax for the ansi link command showing the command structure with flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_link.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ansi link {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Using Echo with Range in Nushell\nDESCRIPTION: Demonstrates how the 'echo' command now iterates over a range in Nushell, producing a table output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-09-nushell_0_15_0.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> echo 1..3\n───┬───\n 0 │ 1\n 1 │ 2\n 2 │ 3\n───┴───\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Stable Features\nDESCRIPTION: Command to install Nushell with all stable features using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-18-nushell-0_7_0.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=stable\n```\n\n----------------------------------------\n\nTITLE: Comparing 'select' and 'get' Commands in Nushell\nDESCRIPTION: Demonstrating the difference between 'select' and 'get' commands when extracting column data, where 'select' maintains the column name while 'get' returns values with a generic 'value' header.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nls | select name\n# => ---+---------------\n# =>  # | name\n# => ---+---------------\n# =>  0 | add.rs\n# =>  1 | sum.rs\n# =>  2 | inc.rs\n# =>  3 | str.rs\n# =>  4 | skip.rs\n# =>  5 | textview.rs\n# =>  6 | binaryview.rs\n# =>  7 | edit.rs\n# =>  8 | tree.rs\n# =>  9 | sys.rs\n# => ---+---------------\n```\n\n----------------------------------------\n\nTITLE: Encoding Drop Message in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of a Drop message in JSON format for the Nushell plugin protocol, indicating disinterest in further messages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Drop\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining bytes remove Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'bytes remove' command, including its flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_remove.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes remove {flags} (pattern) ...rest\n```\n\n----------------------------------------\n\nTITLE: Hiding Index Column in Nushell Tables\nDESCRIPTION: Example demonstrating how to force the index column to be hidden by setting the '-i' parameter to false.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [2 [4 4]]] | table -i false\n```\n\n----------------------------------------\n\nTITLE: Split List with Character Separator\nDESCRIPTION: Example showing how to split a list of characters using 'd' as separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_list.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [a, b, c, d, e, f, g] | split list d\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Nushell Performance in Rust\nDESCRIPTION: A Nushell command pipeline used for benchmarking performance improvements in version 0.30. It processes 10 million records with various operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-04-20-nushell_0_30.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\necho 1..10000000 | prepend 777 | append 555 | where $it > 7 | length\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Custom Prompt in Nushell\nDESCRIPTION: Example of configuring a simple custom prompt in Nushell using the config command. This sets the prompt to display a basic '> ' character.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-30-nushell_0_16_0.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconfig --set [prompt \"echo '> '\"]\n```\n\n----------------------------------------\n\nTITLE: Serializing Rust Ordering Type in JavaScript\nDESCRIPTION: Demonstrates how Rust's Ordering enum values are serialized as string literals for comparison operations. Shows the three possible states: Less, Equal, and Greater.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n'Less'; // left hand side is less than right hand side\n'Equal'; // both values are equal\n'Greater'; // left hand side is greater than right hand side\n```\n\n----------------------------------------\n\nTITLE: Keybinding for Abbreviation in Nushell\nDESCRIPTION: This JavaScript snippet defines a keybinding that triggers an alias expansion on pressing 'ctrl+space' in Nushell, offering a feature to speed up command entry.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-15-top-nushell-hacks.md#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n  {\n    name: abbr\n    modifier: control\n    keycode: space\n    mode: [emacs, vi_normal, vi_insert]\n    event: [\n    { send: menu name: abbr_menu }\n    { edit: insertchar, value: ' '}\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Fetching Contents from a URL using HTTP GET in Nushell\nDESCRIPTION: This code snippet demonstrates the usage of the `http get` command to fetch content from a specific URL. The command supports various flags for authentication, timeout, headers, and response formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_get.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> http get https://www.example.com\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http get --user myuser --password mypass https://www.example.com\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http get --headers [my-header-key my-header-value] https://www.example.com\n\n```\n\nLANGUAGE: nu\nCODE:\n```\n> http get --headers [my-header-key-A my-header-value-A my-header-key-B my-header-value-B] https://www.example.com\n\n```\n\n----------------------------------------\n\nTITLE: Nushell Logic Operation Equivalents\nDESCRIPTION: Current Nushell implementation (as of 0.72) for conditional command execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/philosophy_0_80.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\ncat foo.txt; cat bar.txt\ntry { cat foo.txt } catch { cat bar.txt }\n```\n\n----------------------------------------\n\nTITLE: Matching Pipeline Input in Nushell\nDESCRIPTION: Shows how to use the 'match' command with pipeline input and nested record structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/match.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n{a: {b: 3}} | match $in {{a: { $b }} => ($b + 10) }\n```\n\n----------------------------------------\n\nTITLE: Sorting Table Data by Column in Nushell\nDESCRIPTION: Using the 'sort-by' command to sort a table by the file size column, arranging files from smallest to largest.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nls | sort-by size\n# => ---+---------------+------+----------+---------+------------+------------\n# =>  # | name          | type | readonly | size    | accessed   | modified\n# => ---+---------------+------+----------+---------+------------+------------\n# =>  0 | skip.rs       | File |          | 1.7 KB  | 2 days ago | 2 days ago\n# =>  1 | add.rs        | File |          | 2.7 KB  | 2 days ago | 2 days ago\n# =>  2 | edit.rs       | File |          | 2.7 KB  | 2 days ago | 2 days ago\n# =>  3 | sum.rs        | File |          | 3.0 KB  | 2 days ago | 2 days ago\n# =>  4 | tree.rs       | File |          | 3.0 KB  | 2 days ago | 2 days ago\n# =>  5 | sys.rs        | File |          | 9.2 KB  | 2 days ago | 2 days ago\n# =>  6 | textview.rs   | File |          | 9.4 KB  | 2 days ago | 2 days ago\n# =>  7 | inc.rs        | File |          | 11.8 KB | 2 days ago | 2 days ago\n# =>  8 | binaryview.rs | File |          | 13.0 KB | a day ago  | a day ago\n# =>  9 | str.rs        | File |          | 21.4 KB | 2 days ago | 2 days ago\n# => ---+---------------+------+----------+---------+------------+------------\n```\n\n----------------------------------------\n\nTITLE: Detect Columns with Guess Flag - Nushell\nDESCRIPTION: Example showing how to use the --guess flag when the default algorithm doesn't work effectively for filesystem data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/detect_columns.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n>\n'Filesystem     1K-blocks      Used Available Use% Mounted on\nnone             8150224         4   8150220   1% /mnt/c' | detect columns --guess\n```\n\n----------------------------------------\n\nTITLE: Nushell Math Median Command Signature\nDESCRIPTION: Basic command signature for the math median operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_median.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math median {flags} \n```\n\n----------------------------------------\n\nTITLE: Working with Binary Data in Nushell\nDESCRIPTION: Shows how to read and compare binary data from a JPEG file header\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\nopen nushell_logo.jpg\n| into binary\n| first 2\n| $in == 0x[ff d8]\n# => true\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Math Arcsin Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'math arcsin' function in Nushell, showing the basic syntax for calling the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arcsin.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math arcsin {flags} \n```\n\n----------------------------------------\n\nTITLE: Selecting a Row After Sorting with Custom Index in Nushell\nDESCRIPTION: This snippet demonstrates how row selection works when a table has been sorted with the index column preserved, showing that 'select' refers to the position, not the index value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_20\n\nLANGUAGE: nushell\nCODE:\n```\nls | enumerate | flatten | sort-by modified | select 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Help Menu in Nushell\nDESCRIPTION: Configuration settings for the Nushell help menu, including layout, styling, and behavior parameters. Defines menu appearance, search behavior, and display characteristics.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n  $env.config = {\n    ...\n\n    menus = [\n      ...\n      {\n        name: help_menu\n        only_buffer_difference: true # Search is done on the text written after activating the menu\n        marker: \"? \"                 # Indicator that appears with the menu is active\n        type: {\n            layout: description      # Type of menu\n            columns: 4               # Number of columns where the options are displayed\n            col_width: 20           # Optional value. If missing all the screen width is used to calculate column width\n            col_padding: 2           # Padding between columns\n            selection_rows: 4        # Number of rows allowed to display found options\n            description_rows: 10     # Number of rows allowed to display command description\n        }\n        style: {\n            text: green                   # Text style\n            selected_text: green_reverse  # Text style for selected option\n            description_text: yellow      # Text style for description\n        }\n      }\n      ...\n    ]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Filtering Math Commands with Vue.js\nDESCRIPTION: A Vue.js script that filters and sorts pages from the documentation that belong to the 'math' category. It makes these commands available as a computed property for rendering in the template.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/math.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('math'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Polars Drop-Nulls Command Signature\nDESCRIPTION: The basic command signature showing the syntax and parameters for the polars drop-nulls command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_drop-nulls.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars drop-nulls {flags} (subset)\n```\n\n----------------------------------------\n\nTITLE: Using the Optional Operator in Nushell\nDESCRIPTION: Shows how to use the optional operator (?) to suppress errors when accessing potentially missing data in a cell path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/navigating_structured_data.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\nlet cp: cell-path = $.temps?.1 # only get the 2nd location from the temps column\n\n# Ooops, we've removed the temps column\n$data | reject temps | get $cp\n```\n\n----------------------------------------\n\nTITLE: Using capture-foreign-env Command\nDESCRIPTION: Examples showing how to use the capture-foreign-env command with different shells and script files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/foreign_shell_scripts.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n# Default usage, running the script with `/bin/sh`\nload-env (open script.sh | capture-foreign-env)\n\n# Running a different shell's script\n# fish might be elsewhere on your system, if it's in the PATH, `fish` is enough\nload-env (open script.fish | capture-foreign-env --shell /usr/local/bin/fish)\n```\n\n----------------------------------------\n\nTITLE: Checking Set Membership with Lists in Nushell\nDESCRIPTION: Example of using the 'in' operator to check if a value is present in a list, along with the 'not' operator to invert the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/list.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nnot (12 in [1 2 3])\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean to String in Nushell\nDESCRIPTION: Demonstrates converting a boolean value to its string representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> true | into string\ntrue\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings in Nushell\nDESCRIPTION: Demonstrates how to split strings using the split chars command, which divides a string into a list of individual characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n'aeiou' | split chars\n# => ╭───┬───╮\n# => │ 0 │ a │\n# => │ 1 │ e │\n# => │ 2 │ i │\n# => │ 3 │ o │\n# => │ 4 │ u │\n# => ╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Input Stream in Nushell\nDESCRIPTION: Demonstrates how to use the 'load-env' command to load environment variables from an input stream and access them.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/load-env.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> {NAME: ABE, AGE: UNKNOWN} | load-env; $env.NAME\nABE\n```\n\n----------------------------------------\n\nTITLE: Multiline Command with Pipe - Nushell\nDESCRIPTION: Shows an example of multiline command using pipe symbols in Nushell. The pipe symbol at the end of the line signals that the command continues on the next line. Comments can be placed after the pipe symbol on the same line.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n```nu\nls                     |\nwhere name =~ '^[0-9]' | # Comments after a trailing pipe are okay\nget name               |\nmv ...$in ./backups/\n```\n```\n\n----------------------------------------\n\nTITLE: Executing sys host Command in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'sys host' command in Nushell to display information about the system host. The command takes no arguments and returns a record containing host information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_host.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> sys host\n```\n\n----------------------------------------\n\nTITLE: Generating Six-Hour Intervals for Two Days\nDESCRIPTION: This example demonstrates how to use the 'seq date' command to print every six hours starting January 1st, 2020 until January 3rd, 2020, with a custom output format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --begin-date '2020-01-01' --end-date '2020-01-03' --increment 6hr --output-format '%Y-%m-%d %H:%M:%S'\n```\n\n----------------------------------------\n\nTITLE: Filtering and Displaying Lazyframe Commands with Vue.js\nDESCRIPTION: A Vue.js component that filters documentation pages related to Lazyframe commands and displays them in a sortable table. The component computes a list of commands by filtering pages that include '/commands/docs/' in their path and have 'lazyframe' in their categories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/lazyframe.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('lazyframe'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Span Contents in Nushell Engine (JSON)\nDESCRIPTION: Example of a GetSpanContents engine call to retrieve the contents of a Span from the engine. The call includes id and the span details with start and end positions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"id\": 72,\n    \"call\": {\n      \"GetSpanContents\": {\n        \"start\": 38881,\n        \"end\": 39007\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Math Arccosh Function in Nushell\nDESCRIPTION: Specifies the command signature for the 'math arccosh' function in Nushell. It shows that the function takes flags as optional parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arccosh.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math arccosh {flags}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arccosine in Degrees\nDESCRIPTION: Example demonstrating how to calculate the arccosine of -1 with output in degrees using the --degrees flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arccos.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> -1 | math arccos --degrees\n180\n```\n\n----------------------------------------\n\nTITLE: Rendering Dataframe Commands Table in HTML with Vue.js\nDESCRIPTION: This HTML template uses Vue.js directives to render a table of Dataframe or Lazyframe commands. It iterates over the 'commands' computed property to display each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/dataframe_or_lazyframe.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Performing Parse-time Evaluation in Nushell\nDESCRIPTION: This code snippet demonstrates how to perform string interpolation at parse time in Nushell. It uses the `const` keyword to define a variable and the `use` command to import a configuration file using the `$nu.default-config-dir` path. The `ansi` command also supports parse-time evaluation as shown in the code comments. Key parameters include the variable `name` and commands `use` and `ansi`. Expected output is the evaluation and usage of the specified Nushell script based on file path composition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-02-06-nushell_0_90_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nconst name = \"spam\"\nuse ($nu.default-config-dir | path join \"$($name).nu\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Directory Navigation Commands in Nushell\nDESCRIPTION: Example showing how to define a custom environment-aware command that changes directory, requiring the '--env' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cd.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> def --env gohome [] { cd ~ }\n\n```\n\n----------------------------------------\n\nTITLE: Keeping Empty Sublists with split list\nDESCRIPTION: The behavior of the `split list` command has been updated to retain empty sublists when splitting a list with consecutive separators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n[1 1 0 0 3 3 0 4 4] | split list 0\n# => [[1 1] [] [2 2] [3 3]]\n```\n\n----------------------------------------\n\nTITLE: Showing Help for a Specific Alias in Nushell\nDESCRIPTION: The command 'help aliases my-alias' is used to retrieve help information for a specific alias named 'my-alias'. The input is the name of the alias, and the output provides details about that single alias.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_aliases.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> help aliases my-alias\n\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Columns in Polars DataFrame with Nushell\nDESCRIPTION: Illustrates how to create a new column in a Polars DataFrame using complex arithmetic operations between existing columns in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_25\n\nLANGUAGE: nu\nCODE:\n```\nlet df_9 = $df_8 | polars with-column ($df_8.a * $df_8.b / $df_8.new_col) --name my_sum\n$df_9\n```\n\n----------------------------------------\n\nTITLE: Viewing Internal Representation Code in Nushell\nDESCRIPTION: This snippet illustrates how to print IR code for a given target or custom command in Nushell. Requires Nushell with commands that output internal representations. Accepts code blocks or command names, illustrating internal structure and behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> view ir { 1 + 1 }\n# 2 registers, 5 instructions, 0 bytes of data\n   0: load-literal           %0, int(1)\n   1: load-literal           %1, int(1)\n   2: binary-op              %0, Math(Plus), %1\n   3: span                   %0\n   4: return                 %0\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> use std\n> view ir 'std assert'\n# 8 registers, 41 instructions, 48 bytes of data\n   0: load-variable          %1, var 46\n   1: not                    %1\n   2: branch-if              %1, 6       # if false\n   3: drop                   %0          # label(0)\n   4: return-early           %0\n   5: jump                   7           # end if\n...\n```\n\n----------------------------------------\n\nTITLE: Rendering Generator Commands Table with Vue.js\nDESCRIPTION: This HTML snippet uses Vue.js directives to render a table of generator commands. It iterates over the computed 'commands' property to display each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/generators.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Basic Integer Bitwise AND Operation\nDESCRIPTION: Demonstrates a simple bitwise AND operation between two integer values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_and.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 2 | bits and 2\n```\n\n----------------------------------------\n\nTITLE: Commenting in Multiline Pipes in Nushell\nDESCRIPTION: This Nushell snippet illustrates the use of comments within multiline pipes, helping users to temporarily disable certain commands for debugging purposes. The snippet includes comments that, when prefixed with `#`, do not affect the execution flow, allowing more flexible editing and testing of scripts.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-06-27-nushell_0_82.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nls\n| where type == file\n# | sort-by size\n| get name\n```\n\n----------------------------------------\n\nTITLE: Importing a Plugin in Nushell\nDESCRIPTION: This code snippet shows how to import a plugin into the current Nushell session. The `use` command makes the plugin's commands available for immediate use. The name of the plugin is used without the `nu_plugin` prefix or any extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n# The name of the plugin, without the leading `nu_plugin` nor any extension\nuse polars\n```\n\n----------------------------------------\n\nTITLE: Drop nth Command Signature\nDESCRIPTION: The basic syntax and parameters for the drop nth command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> drop nth {flags} (row number or row range) ...rest\n```\n\n----------------------------------------\n\nTITLE: Leaving Foreground in Nushell Engine (JSON)\nDESCRIPTION: Example of a LeaveForeground engine call to reset the state set by EnterForeground. The call includes context and id for the request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 0,\n    \"id\": 0,\n    \"call\": \"LeaveForeground\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing without Expanding Capture Groups in Nushell\nDESCRIPTION: Shows how to prevent expanding capture groups in the replacement string using the -n flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n> 'dogs_$1_cats' | str replace -r '\\$1' '$2' -n\ndogs_$2_cats\n```\n\n----------------------------------------\n\nTITLE: Return Command Signature in Nushell\nDESCRIPTION: Shows the basic syntax for the return command in Nushell, which allows returning early from a custom command with an optional return value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/return.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> return {flags} (return_value)\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Bits String - Nushell\nDESCRIPTION: Example of converting a duration value to a binary string representation padded to 8 places with zeros.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_bits.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 1ns | format bits\n00000001\n```\n\n----------------------------------------\n\nTITLE: Ignoring Comments in CSV Data - Nushell\nDESCRIPTION: This snippet demonstrates how to ignore lines beginning with a specified comment character using the --comment flag with 'from csv', enabling cleaner data parsing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> open data.txt | from csv --comment '#'\n```\n\n----------------------------------------\n\nTITLE: Building Nushell in Release Mode\nDESCRIPTION: Compiling Nushell from source code with optimizations enabled for production use\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd nushell && cargo build --release && cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Defining Date Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the 'date' command in Nushell. It shows that the command takes optional flags but doesn't provide specific details about them.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> date {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining Record Type Annotations in Nushell\nDESCRIPTION: This code snippet demonstrates how to define a record with specific type annotations in Nushell. The defined record requires two fields: 'name' as a string and 'age' as an integer. This approach enhances type safety in scripts by ensuring that the necessary fields are present.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-05-16-nushell_0_80.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndef okay [person: record<name: string age: int>] {}\n```\n\n----------------------------------------\n\nTITLE: Modifying Environment Variables in Nushell\nDESCRIPTION: Commands to add or modify environment variables using the insert command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho $nu:env | insert GREETING hello_world | config --set_into env\n```\n\nLANGUAGE: shell\nCODE:\n```\necho $nu.env | insert GREETING hello_world | config set_into env\n```\n\n----------------------------------------\n\nTITLE: Opening VSCode JSON Configuration\nDESCRIPTION: This shell script snippet likely navigates to the VSCode editor's settings or extensions directory and then uses Nu to open the JSON configuration file. This displays the settings as a structured table within the Nu shell, allowing for easy inspection and manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/loading_data.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"/Applications/Visual\\ Studio\\ Code.app/Contents/Resources/app/bin/code \\ncd \\\"$HOME/.vscode/extensions/ms-vscode.powershell-2024.2.1/syntaxes\\\"\\nnu -c 'open powershell.tmLanguage.json'\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Script Definition Order\nDESCRIPTION: Demonstrates that function definitions can come after their usage in Nushell scripts\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ngreet \"world\"\n\ndef greet [name] {\n  [\"hello\" $name]\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Data Processing Script\nDESCRIPTION: Vue computed property that filters pages to get core commands and sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/core.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('core'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Definition in Nushell\nDESCRIPTION: Demonstrates creating immutable variables using the let keyword with string values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nlet name = \"Nushell\"\necho $name\n```\n\n----------------------------------------\n\nTITLE: Finding and replacing a pattern in Nu\nDESCRIPTION: Finds and replaces a pattern in a string using the `str find-replace` command. This allows for substituting one substring with another within a given string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n\"str find-replace\"\n```\n\n----------------------------------------\n\nTITLE: Converting Filepath to Binary in Nushell\nDESCRIPTION: This code shows how to convert a filepath string into a Nushell binary primitive. The path is expanded before conversion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_binary.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> ls | where name == LICENSE | get name | path expand | into binary\n\n```\n\n----------------------------------------\n\nTITLE: Polars Count Command Signature in Nushell\nDESCRIPTION: The command signature for the 'polars count' command showing its basic syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_count.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars count {flags} \n```\n\n----------------------------------------\n\nTITLE: Conditional Execution in Nushell\nDESCRIPTION: Shows how boolean values are used in conditional statements in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nlet num = -2\nif $num < 0 { print \"It's negative\" }\n# => It's negative\n```\n\n----------------------------------------\n\nTITLE: Removing All Occurrences of a Pattern in a Record Field in Nushell\nDESCRIPTION: Shows how to remove all occurrences of a byte pattern from a specific field in a record using the '--all' flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_remove.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> { data: 0x[10 AA 10 BB 10] } | bytes remove --all 0x[10] data\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Command pattern for installing optional Nushell plugins using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-10-18-nushell-0_70.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Importing Qualified Module Definitions in Nushell\nDESCRIPTION: Illustrates importing all definitions from a module qualified by the module name, then calling multiple functions from the module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/use.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam { export def foo [] { \"foo\" }; export def bar [] { \"bar\" } }; use spam; (spam foo) + (spam bar)\n```\n\n----------------------------------------\n\nTITLE: Defining Help Commands in Nushell\nDESCRIPTION: This snippet outlines the usage of the 'help commands' command in Nushell, providing a signature and describing its parameters and flags. It specifies the input and output types for better understanding and utilization.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_commands.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- This file is automatically generated. Please edit the command in https://github.com/nushell/nushell instead. -->\n\n# `help commands` for [core](/commands/categories/core.md)\n\n<div class='command-title'>Show help on nushell commands.</div>\n\n## Signature\n\n```> help commands {flags} ...rest```\n\n## Flags\n\n -  `--find, -f {string}`: string to find in command names, descriptions, and search terms\n\n## Parameters\n\n -  `...rest`: The name of command to get help on.\n\n\n## Input/output types:\n\n| input   | output |\n| ------- | ------ |\n| nothing | table  |\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level Environment Variable in Nushell\nDESCRIPTION: Demonstrates how to set the NU_LOG_LEVEL environment variable to control the output of log messages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nNU_LOG_LEVEL=DEBUG nu std_log.nu\n```\n\n----------------------------------------\n\nTITLE: Nushell Command Signature\nDESCRIPTION: The command signature for the math cosh function in Nushell that calculates the hyperbolic cosine of a number.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_cosh.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> math cosh {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting Float to String with Default Formatting in Nushell\nDESCRIPTION: Demonstrates basic conversion of a floating-point number to string with default formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 4.3 | into string\n4.3\n```\n\n----------------------------------------\n\nTITLE: Basic Loop Pattern for Keyboard Input in Nushell\nDESCRIPTION: Simple loop implementation for handling keyboard input. Uses input listen to capture keystrokes and execute actions based on pressed keys. Cannot return values due to break statement limitations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/input_listen_keys.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndef run_some_code [] {\n  print \"I'm running the code, but I can't return a\"\n  print \"value because I need to `break` out of the loop.\"\n  42\n  break\n}\n\nprint '(a) Run some code (x) Exit'\n\nloop {\n  let key = (input listen --types [key])\n  if ($key.code == 'a') and ($key.modifiers == []) {\n      run_some_code\n  } else if ($key.code == 'x') and ($key.modifiers == []) {\n      print 'User exited'\n      break\n  } else if ($key.code == 'c') and ($key.modifiers == ['keymodifiers(control)']) {\n      print 'Terminated with Ctrl-C'\n      break\n  } else {\n      print \"That key wasn't recognized.\"\n      print 'Press (a) to run some code or (x) to Exit'\n      continue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nushell Block vs Closure Examples\nDESCRIPTION: Demonstration of the distinction between blocks and closures in Nushell 0.80, showing their different use cases and syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/philosophy_0_80.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nfor x in 1..100 {\n  print $x\n}\n\nls | each { |x| $x.name + \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Environment Variables in Modules\nDESCRIPTION: Example showing how environment variables in modules are code blocks that execute each time the module is used, creating dynamic values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nmodule roll { export env ROLL { random dice | into string } }\n\nuse roll ROLL\n\n# => $env.ROLL\n# => 4\n\n# => $env.ROLL\n# => 4\n\nuse roll ROLL\n\n# => $env.ROLL\n# => 6\n\n$env.ROLL\n# => 6\n```\n\n----------------------------------------\n\nTITLE: Reversing Strings and String Lists\nDESCRIPTION: Demonstrates the str reverse command which can reverse individual strings or lists of strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\n'Nushell' | str reverse\n# => llehsuN\n['Nushell' 'is' 'cool'] | str reverse\n# => ╭───┬─────────╮\n# => │ 0 │ llehsuN │\n# => │ 1 │ si      │\n# => │ 2 │ looc    │\n# => ╰───┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Querying Nushell Configuration Path in Nushell\nDESCRIPTION: Demonstrates how to find the location of the keybindings configuration file using the $nu.keybinding-path variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> echo $nu.keybinding-path\n```\n\n----------------------------------------\n\nTITLE: Building Binary Data from Hexadecimal Values in Nushell\nDESCRIPTION: Demonstrates how to use the 'bytes build' command to create binary data from hexadecimal values. The command combines multiple byte sequences into a single binary output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_build.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> bytes build 0x[01 02] 0x[03] 0x[04]\n```\n\n----------------------------------------\n\nTITLE: Filtering with Existing Closure in Nushell\nDESCRIPTION: Shows how to filter a list using an existing closure condition with the 'filter' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/filter.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nlet a = {$in > 3}; [1, 2, 5, 6] | filter $a\n```\n\n----------------------------------------\n\nTITLE: Basic Disk Usage Example\nDESCRIPTION: Example showing how to check disk usage of the current directory using the du command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/du.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> du\n\n```\n\n----------------------------------------\n\nTITLE: Grouping Records by Key with Nushell\nDESCRIPTION: Demonstrates how to use Nushell's group-by command with the --to-table flag to group records by a common key ('category').\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n'[{\"category\": \"A\", \"value\": 10}, {\"category\": \"B\", \"value\": 20}, {\"category\": \"A\", \"value\": 5}]'\n| from json\n| group-by --to-table category\n# => ╭───┬───────┬──────────────────────────╮\n# => │ # │ group │          items           │\n# => ├───┼───────┼──────────────────────────┤\n# => │ 0 │ A     │ ╭───┬──────────┬───────╮ │\n# => │   │       │ │ # │ category │ value │ │\n# => │   │       │ ├───┼──────────┼───────┤ │\n# => │   │       │ │ 0 │ A        │    10 │ │\n# => │   │       │ │ 1 │ A        │     5 │ │\n# => │   │       │ ╰───┴──────────┴───────╯ │\n# => │ 1 │ B     │ ╭───┬──────────┬───────╮ │\n# => │   │       │ │ # │ category │ value │ │\n# => │   │       │ ├───┼──────────┼───────┤ │\n# => │   │       │ │ 0 │ B        │    20 │ │\n# => │   │       │ ╰───┴──────────┴───────╯ │\n# => ╰───┴───────┴──────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Record Sorting by Key in Nushell\nDESCRIPTION: Shows how to sort a record by its keys in alphabetical order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n{x: 123, a: hello!, foo: bar} | sort\n```\n\n----------------------------------------\n\nTITLE: Character Range and Repetition Pattern in Nushell\nDESCRIPTION: Example showing how to search for files or folders with only characters a through d appearing between 1 and 10 times in the name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n> glob <[a-d]:1,10>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Math Sum Command in Nushell\nDESCRIPTION: Specifies the signature for the 'math sum' command in Nushell, showing its basic syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sum.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math sum {flags}\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `str stats`, `str length`, `length` to Python's `len`\nDESCRIPTION: Shows the equivalent of Nushell's `str stats`, `str length`, and `length` commands in Python using the `len` function. This function returns the length of a string, list, or other iterable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n\"len\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `save` to Python's `io.TextIOWrapper.write`\nDESCRIPTION: Explains how to save data to a file in Python using `io.TextIOWrapper.write`. This demonstrates how to write data to a text file, equivalent to the `save` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n\"io.TextIOWrapper.write\"\n```\n\n----------------------------------------\n\nTITLE: Pivoting a Matrix with zip\nDESCRIPTION: This snippet demonstrates how to pivot a matrix using the `zip` function in Python.  The `zip(*matrix)` operation transposes the rows and columns of the matrix. This can be useful when you need to rearrange data for analysis or processing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"zip(*matrix)\"\n```\n\n----------------------------------------\n\nTITLE: Complex Polars When Expression with DataFrame Transformation\nDESCRIPTION: Creates a dataframe with multiple conditional columns using when expressions and otherwise clauses\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_when.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[a b]; [6 2] [1 4] [4 1]]\n   | polars into-lazy\n   | polars with-column (\n    polars when ((polars col a) > 2) 4 | polars otherwise 5 | polars as c\n     )\n   | polars with-column (\n    polars when ((polars col a) > 5) 10 | polars when ((polars col a) < 2) 6 | polars otherwise 0 | polars as d\n     )\n   | polars collect\n```\n\n----------------------------------------\n\nTITLE: Conditional output with 'else' in Nushell\nDESCRIPTION: This snippet showcases the use of the 'if' command with an 'else' block in Nushell. It evaluates the condition `5 < 3`; if true, it outputs 'yes!', otherwise, it outputs 'no!'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/if.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"> if 5 < 3 { 'yes!' } else { 'no!' }\"\n\n```\n\n----------------------------------------\n\nTITLE: Arithmetische Operation mit Klammern in Nushell\nDESCRIPTION: Dieses Code-Snippet demonstriert, wie Klammern verwendet werden können, um die Reihenfolge der Operationen in einem mathematischen Ausdruck in Nushell zu ändern. Klammern erzwingen, dass die Addition vor der Multiplikation ausgeführt wird.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/operators.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n```nu\n3 * (1 + 2)\n# => 9\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Shell Script Execution in Nushell\nDESCRIPTION: Demonstrates the limitations of directly executing zsh scripts in Nushell, particularly with environment variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/foreign_shell_scripts.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n# This works, using zsh to print \"Hello\"\n'echo Hello' | zsh -c $in\n\n# This exits with an error because $env.VAR is not defined\n'export VAR=\"Hello\"' | zsh -c $in\nprint $env.VAR\n```\n\n----------------------------------------\n\nTITLE: Decoding Raw Byte Streams in Nushell\nDESCRIPTION: Demonstrates how to use the 'decode' command to convert a raw byte stream to text using a specific character encoding in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n0x[8a 4c] | decode shift-jis\n# => 貝\n```\n\n----------------------------------------\n\nTITLE: Searching within Module Names and Descriptions - NuShell\nDESCRIPTION: This NuShell snippet illustrates how to search for a specific string within module names and descriptions using the '--find' flag. It identifies modules matching the search criteria and displays relevant information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_modules.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> help modules --find my-module\n\n```\n\n----------------------------------------\n\nTITLE: Querying Windows Registry with Nushell\nDESCRIPTION: Signature for the 'registry query' command in Nushell. It allows querying the Windows registry with optional flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/registry_query.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> registry query {flags} (key) (value)\n```\n\n----------------------------------------\n\nTITLE: Signature for Nushell inc Command\nDESCRIPTION: Command signature demonstrating the syntax for using the `inc` command with optional flags and cell path parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/inc.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ninc {flags} (cell_path)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Closure in Nushell Engine (JSON)\nDESCRIPTION: Example of an EvalClosure engine call to evaluate a Closure with arguments. The call includes context, id, closure details, positional arguments, input, and redirection settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 7,\n    \"id\": 40,\n    \"call\": {\n      \"EvalClosure\": {\n        \"closure\": {\n          \"item\": {\n            \"block_id\": 72,\n            \"captures\": []\n          },\n          \"span\": {\n            \"start\": 780,\n            \"end\": 812\n          }\n        },\n        \"positional\": [\n          {\n            \"Int\": {\n              \"val\": 7,\n              \"span\": {\n                \"start\": 3080,\n                \"end\": 3081\n              }\n            }\n          }\n        ],\n        \"input\": \"Empty\",\n        \"redirect_stdout\": true,\n        \"redirect_stderr\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repeating List and Flattening in Nushell\nDESCRIPTION: This snippet shows an example of how to use the `repeat` command in the standard library to achieve scalar list multiplication in Nushell. First the `repeat` command is brought into scope with `use std repeat`. Then, the list `[1, 2]` is repeated 3 times and the result is flattened to produce a single list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n[1, 2] | repeat 3 | flatten\n```\n\n----------------------------------------\n\nTITLE: Checking Non-Matching String Prefix in Nushell\nDESCRIPTION: This example demonstrates a case where the string does not start with the specified substring, resulting in a false output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_starts-with.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 'Cargo.toml' | str starts-with '.toml'\n```\n\n----------------------------------------\n\nTITLE: Polars String Split Command Signature\nDESCRIPTION: The basic command signature for the polars str-split operation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-split.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars str-split {flags} (expr)\n```\n\n----------------------------------------\n\nTITLE: Getting Terminal Width in Nushell\nDESCRIPTION: Shows how to extract just the columns (width) from the 'term size' command output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_size.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> (term size).columns\n```\n\n----------------------------------------\n\nTITLE: Executing 'commandline set-cursor' Command in Nushell\nDESCRIPTION: This snippet shows the signature for the 'commandline set-cursor' command in Nushell. It allows setting the cursor position in the command line buffer, either to a specific position or to the end of the buffer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/commandline_set-cursor.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> commandline set-cursor {flags} (pos)\n```\n\n----------------------------------------\n\nTITLE: Basic Nushell Parse Command Signature\nDESCRIPTION: Shows the basic command signature for the parse command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/parse.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> parse {flags} (pattern)\n```\n\n----------------------------------------\n\nTITLE: Timing a Command with Input Value in Nushell\nDESCRIPTION: Example of using timeit to measure how long it takes to split a string into characters, with the string provided as input to the closure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/timeit.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'A really long string' | timeit { split chars }\n```\n\n----------------------------------------\n\nTITLE: Searching Within Alias Names and Descriptions in Nushell\nDESCRIPTION: The 'help aliases --find my-alias' command is utilized to search for a specific string within the names and descriptions of aliases. The flag '--find' or '-f' is required to specify the search string, and it outputs matched aliases in table format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_aliases.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> help aliases --find my-alias\n\n```\n\n----------------------------------------\n\nTITLE: Checking substring presence in multiple table columns in Nushell\nDESCRIPTION: This example shows how to check for a substring across multiple columns of a table. The command applies the check to both specified columns for each row.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_contains.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n[[ColA ColB]; [test hello]] | str contains 'e' ColA ColB\n```\n\n----------------------------------------\n\nTITLE: Importing Environment-Modifying Command from Module in Nushell\nDESCRIPTION: Shows how to define and import a custom command that modifies the environment, then calls it and checks the environment variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/use.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nmodule foo { export def --env bar [] { $env.FOO_BAR = \"BAZ\" } }; use foo bar; bar; $env.FOO_BAR\n```\n\n----------------------------------------\n\nTITLE: Using Split-by Command in Nushell\nDESCRIPTION: Example of using the new split-by command to further group data after an initial group-by operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/home/sophia/Source/nushell(better_duration)> open tests/fixtures/formats/caco3_plastics.csv | group-by origin | split-by shipped_at\n```\n\n----------------------------------------\n\nTITLE: Scoped Directory Navigation in Nushell\nDESCRIPTION: Demonstrates the new scoped `cd` behavior where directory changes are localized to the current block, preventing permanent environment changes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ncd ./foo\ndo { cd ./bar }\n```\n\nLANGUAGE: nu\nCODE:\n```\nls | where type == dir | each { |row| cd $row.name; ls | length }\n```\n\nLANGUAGE: nu\nCODE:\n```\ndef-env my-cd [path] {\n  cd $path\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Basic installation command for Nushell using Cargo package manager. Installs the core functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-02-16-nushell_0_27.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Defining the break command signature in Nushell\nDESCRIPTION: Shows the command signature for the 'break' command in Nushell, indicating it takes flags but no arguments and doesn't require input or produce output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/break.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> break {flags} \n```\n\n----------------------------------------\n\nTITLE: Handling Commands Without Input Support in Nushell\nDESCRIPTION: Shows how to properly use commands that don't accept input streams, such as 'ls', by explicitly referencing the input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\necho .. | ls $in\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Search Path in Nushell\nDESCRIPTION: This code snippet demonstrates how to set the plugin search path in Nushell to include the directory where the Nushell executable is located. This allows Nushell to find and load plugins from that directory. It assumes the core plugins are installed in the same directory as the Nushell binary.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nconst NU_PLUGIN_DIRS = [\n  ($nu.current-exe | path dirname)\n  ...$NU_PLUGIN_DIRS\n]\n```\n\n----------------------------------------\n\nTITLE: Converting Filepath to Glob Pattern in Nushell\nDESCRIPTION: Example showing how to convert a filepath to a glob pattern by first getting the name from an ls command result and then applying 'into glob'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_glob.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> ls Cargo.toml | get name | into glob\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar in Table Format with cal Command\nDESCRIPTION: Demonstrates the 'cal' command which displays a calendar in table format. The output includes columns for each day of the week and rows for each week in the current month.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-05-12-nushell_0_14_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> cal\n───┬────────┬────────┬─────────┬───────────┬──────────┬────────┬──────────\n # │ sunday │ monday │ tuesday │ wednesday │ thursday │ friday │ saturday\n───┼────────┼────────┼─────────┼───────────┼──────────┼────────┼──────────\n 0 │        │        │         │           │          │      1 │        2\n 1 │      3 │      4 │       5 │         6 │        7 │      8 │        9\n 2 │     10 │     11 │      12 │        13 │       14 │     15 │       16\n 3 │     17 │     18 │      19 │        20 │       21 │     22 │       23\n 4 │     24 │     25 │      26 │        27 │       28 │     29 │       30\n 5 │     31 │        │         │           │          │        │\n───┴────────┴────────┴─────────┴───────────┴──────────┴────────┴──────────\n```\n\n----------------------------------------\n\nTITLE: Base64 Command Signature in Nushell\nDESCRIPTION: Shows the basic command signature for the decode base64 command with flags support.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_base64.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> decode base64 {flags} \n```\n\n----------------------------------------\n\nTITLE: Generating a Sequence with range\nDESCRIPTION: This snippet shows how to generate a sequence of numbers using the `range` function in Python. The `range` function can be used to create a sequence of integers, which is commonly used in loops and other iterative processes. It's an efficient way to generate a series of numbers on demand.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"range\"\n```\n\n----------------------------------------\n\nTITLE: Plugin List Status Update\nDESCRIPTION: This code snippet shows how to replace the `is_running` filter with the new `status` filter in the `plugin list` command after the update. The old code filters the plugin list where `is_running` is true, while the new code filters where `status` is equal to `running`. This change reflects the new status column in the `plugin list` output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n\"# 0.99.0\nplugin list | where is_running\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\n\"# 0.100.0\nplugin list | where status == running\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Table Data in Nushell\nDESCRIPTION: Demonstrates the new 'rotate' command for transforming table data by turning rows into columns and vice versa. Includes examples of clockwise and counter-clockwise rotation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-09-nushell_0_28.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\necho [[col1, col2, col3]; [cell1, cell2, cell3] [cell4, cell5, cell6]] | rotate\n```\n\nLANGUAGE: nushell\nCODE:\n```\necho [[col1, col2, col3]; [cell1, cell2, cell3] [cell4, cell5, cell6]] | rotate counter-clockwise\n```\n\n----------------------------------------\n\nTITLE: Calculating Edit Distance Between Two Strings in Nushell\nDESCRIPTION: An example showing how to get the edit distance between two simple strings. Returns 1 because 'nushell' and 'nutshell' differ by 1 character insertion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_distance.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'nushell' | str distance 'nutshell'\n1\n```\n\n----------------------------------------\n\nTITLE: Setting GcDisabled Option in Nushell Engine (JSON)\nDESCRIPTION: Example of setting the GcDisabled option to true, which stops the plugin from being automatically garbage collected.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Option\": {\n    \"GcDisabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Color Theme in Nushell 0.101+\nDESCRIPTION: Example of how to set color themes using the new standard library commands in Nushell 0.101+, replacing the previous $light_theme and $dark_theme variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-04-configuration_preview.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nuse std/config *\n$env.config.color_config = (dark-theme)\n```\n\n----------------------------------------\n\nTITLE: Window Operation Example in Nushell\nDESCRIPTION: Shows the each window command that creates a sliding window of two rows and calculates their average age\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-22-nushell_0_20.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n... | each window 2 { get age | math avg }\n───┬─────────\n 0 │ 35.0000\n 1 │ 40.0000\n 2 │ 41.0000\n 3 │ 54.0000\n 4 │ 33.5000\n───┴─────────\n```\n\n----------------------------------------\n\nTITLE: Converting a Nushell record to CSV\nDESCRIPTION: Demonstrates how to convert a record (key-value pairs) into CSV format, where keys become column headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_csv.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n{a: 1 b: 2} | to csv\n```\n\n----------------------------------------\n\nTITLE: Processing Signature Plugin Call Response in JSON\nDESCRIPTION: Example of a successful response to a Signature plugin call. It contains an array of command signatures with detailed information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CallResponse\": [\n    0,\n    {\n      \"Signature\": [\n        {\n          \"sig\": {\n            \"name\": \"len\",\n            \"description\": \"calculates the length of its input\",\n            \"extra_description\": \"\",\n            \"search_terms\": [],\n            \"required_positional\": [],\n            \"optional_positional\": [],\n            \"rest_positional\": null,\n            \"vectorizes_over_list\": false,\n            \"named\": [\n              {\n                \"long\": \"help\",\n                \"short\": \"h\",\n                \"arg\": null,\n                \"required\": false,\n                \"desc\": \"Display the help message for this command\",\n                \"var_id\": null,\n                \"default_value\": null\n              }\n            ],\n            \"input_type\": \"String\",\n            \"output_type\": \"Int\",\n            \"input_output_types\": [],\n            \"allow_variants_without_examples\": false,\n            \"is_filter\": false,\n            \"creates_scope\": false,\n            \"allows_unknown_args\": false,\n            \"category\": \"Default\"\n          },\n          \"examples\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'job unfreeze' Command in Nushell\nDESCRIPTION: This snippet shows the command signature for the 'job unfreeze' command in Nushell. It takes an optional 'id' parameter representing the process id to unfreeze.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job_unfreeze.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> job unfreeze {flags} (id)\n```\n\n----------------------------------------\n\nTITLE: Using 'ps' Command in Nushell\nDESCRIPTION: This snippet demonstrates the enhanced 'ps' command in Nushell, showing process information including memory usage in a tabular format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-01-07-nushell-0_8_0.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n─────┬───────┬──────────────────────────────────────┬──────────┬─────────┬──────────┬──────────\n #   │ pid   │ name                                 │ status   │ cpu     │ mem      │ virtual\n─────┼───────┼──────────────────────────────────────┼──────────┼─────────┼──────────┼──────────\n 250 │  4729 │ ibus-engine-simple                   │ Sleeping │  0.0000 │   3.3 MB │ 176.7 MB\n 251 │  5964 │ gedit                                │ Sleeping │  0.0000 │  29.2 MB │ 496.5 MB\n 252 │  5860 │ seahorse                             │ Sleeping │  0.0000 │  24.0 MB │ 488.7 MB\n 253 │  6594 │ gnome-terminal-server                │ Sleeping │  0.0000 │  47.8 MB │ 675.0 MB\n```\n\n----------------------------------------\n\nTITLE: Formatting List of Durations to Microseconds in Nushell\nDESCRIPTION: This snippet illustrates how to convert a list of duration inputs into their corresponding microsecond string representations. It takes a list of durations in seconds and outputs them as a table of microseconds.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_duration.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [1sec 2sec] | format duration µs\n╭───┬────────────╮\n│ 0 │ 1000000 µs │\n│ 1 │ 2000000 µs │\n╰───┴────────────╯\n```\n\n----------------------------------------\n\nTITLE: Filtering Polars DataFrame with Boolean Mask in Nushell\nDESCRIPTION: Demonstrates how to filter a Polars DataFrame using a boolean mask with the 'polars filter-with' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_27\n\nLANGUAGE: nu\nCODE:\n```\n$df_9 | polars filter-with $mask_0\n```\n\n----------------------------------------\n\nTITLE: Checking String for Non-Emptiness in Nu\nDESCRIPTION: This snippet demonstrates how to use the 'is-not-empty' command in Nu to check if a string is not empty. There are no prerequisites as this command is built into Nu, accepting any input to return a boolean result indicating non-emptiness.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/is-not-empty.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> '' | is-not-empty\nfalse\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Table-literal Syntax in Nushell\nDESCRIPTION: Demonstrates how to create a table using Nushell's table-literal syntax. This syntax requires specifying column names followed by a semicolon and then the data rows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/table.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[[column1, column2]; [Value1, Value2] [Value3, Value4]]\n# => ╭───┬─────────┬─────────╮\n# => │ # │ column1 │ column2 │\n# => ├───┼─────────┼─────────┤\n# => │ 0 │ Value1  │ Value2  │\n# => │ 1 │ Value3  │ Value4  │\n# => ╰───┴─────────┴─────────╯\n```\n\n----------------------------------------\n\nTITLE: Signature of Removed let-env Command in Nushell\nDESCRIPTION: Shows the signature of the removed 'let-env' command, including its parameters. This command was used to set environment variables but has been replaced with a new syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/let-env.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> let-env {flags} (var_name) (initial_value)\n```\n\n----------------------------------------\n\nTITLE: Saving Output to File in Bash\nDESCRIPTION: This snippet shows the equivalent of the `save` command in Nushell and Bash. In Bash, redirection `> foo.txt` is used to save output to a file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_22\n\nLANGUAGE: Bash\nCODE:\n```\n\"> foo.txt\"\n```\n\n----------------------------------------\n\nTITLE: Example of Adding a Single Hook to Existing Config\nDESCRIPTION: Illustrates adding a single hook to the existing configuration for handling PWD environment changes. It ensures the hook is properly appended if it doesn't already exist in the configuration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = ($env.config | upsert hooks.env_change.PWD {|config|\n    let val = ($config | get -i hooks.env_change.PWD)\n\n    if $val == null {\n        $val | append {|before, after| print $\"changing directory from ($before) to ($after)\" }\n    } else {\n        [\n            {|before, after| print $\"changing directory from ($before) to ($after)\" }\n        ]\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Dataframe Commands in Vue.js\nDESCRIPTION: This Vue.js component filters pages to find Dataframe or Lazyframe commands, sorts them alphabetically, and computes the result as a 'commands' property. It requires a 'pages' array containing command information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/dataframe_or_lazyframe.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('dataframe or lazyframe'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Left-to-Right Subtraction Reduction\nDESCRIPTION: Shows how reduce processes items from left to right, performing sequential subtraction.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[ 1 2 3 4 ] | reduce {|it, acc| $acc - $it }\n```\n\n----------------------------------------\n\nTITLE: Listing Commandline Subcommands in Markdown\nDESCRIPTION: Presents a table of subcommands for the 'commandline' command, including their names, descriptions, and types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/commandline.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| name                                                                 | description                                   | type     |\n| -------------------------------------------------------------------- | --------------------------------------------- | -------- |\n| [`commandline edit`](/commands/docs/commandline_edit.md)             | Modify the current command line input buffer. | built-in |\n| [`commandline get-cursor`](/commands/docs/commandline_get-cursor.md) | Get the current cursor position.              | built-in |\n| [`commandline set-cursor`](/commands/docs/commandline_set-cursor.md) | Set the current cursor position.              | built-in |\n```\n\n----------------------------------------\n\nTITLE: Python-like Operators\nDESCRIPTION: This snippet illustrates Python-like operators for string and list multiplication which are removed from Nushell. The string `\"foo\"` multiplied by an integer is showed as example in Python.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n3 * \"foo\"\n[1, 2] * 10\n```\n\n----------------------------------------\n\nTITLE: Starting Nushell REPL with Minimal Features\nDESCRIPTION: Launches Nushell REPL without standard library or any configuration files for fastest startup.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_29\n\nLANGUAGE: nushell\nCODE:\n```\nnu -n --no-std-lib\n```\n\n----------------------------------------\n\nTITLE: Viewing Cargo.toml File Structure in Nushell\nDESCRIPTION: Shows how to open and display the structure of a Cargo.toml file in Nushell, demonstrating the shell's ability to parse and display structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n> open Cargo.toml\n------------+--------------+------------------+----------+----------\n bin        | dependencies | dev-dependencies | lib      | package\n------------+--------------+------------------+----------+----------\n [11 items] | [object]     | [object]         | [object] | [object]\n------------+--------------+------------------+----------+----------\n> open Cargo.toml | tags\n----------+------------------------------------------\n span     | origin\n----------+------------------------------------------\n [object] | /home/sophia/Source/nushell/Cargo.toml\n----------+------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining Term Query Command Signature in Nushell\nDESCRIPTION: Specifies the command signature for the 'term query' command, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_query.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> term query {flags} (query)\n```\n\n----------------------------------------\n\nTITLE: Regex-based Case-Insensitive File Filtering in Nushell\nDESCRIPTION: Demonstrates how to find files called \"readme\" case-insensitively using only regex with the 'where' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/where.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nls | where name =~ '(?i)readme'\n```\n\n----------------------------------------\n\nTITLE: Creating Error with the error make Command in Nushell\nDESCRIPTION: Creates a custom error message with a main message and a labeled span that highlights the problematic part of the code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/creating_errors.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nerror make {msg: \"this is fishy\", label: {text: \"fish right here\", span: $span } }\n```\n\n----------------------------------------\n\nTITLE: Specialized String Contains Assertion\nDESCRIPTION: Shows usage of the specialized string contains assertion command for better error messages.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nlet a = \"a needle\"\nlet b = \"haystack\"\nassert str contains $b $a\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Duration with Specific Timestamp in Nushell\nDESCRIPTION: This example demonstrates calculating the time duration between the current date and a specific timestamp in the past, including time zone information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_now.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n(date now) - 2019-05-01T04:12:05.20+08:00\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Descriptions and Styles in Nushell Completions\nDESCRIPTION: This snippet showcases how to include descriptions and styles in Nushell custom completions. The `my_commits` command returns a list of records with `value`, `description`, and `style` fields. Styling options include foreground and background colors, which enhance the display of completion suggestions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_completions.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndef my_commits [] {\n    [\n        { value: \"5c2464\", description: \"Add .gitignore\", style: red },\n        # \"attr: ub\" => underlined and bolded\n        { value: \"f3a377\", description: \"Initial commit\", style: { fg: green, bg: \"#66078c\", attr: ub } }\n    ]\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\ndef my-command [commit: string@my_commits] {\n    print $commit\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning Background Jobs in Nushell\nDESCRIPTION: Demonstrates how to spawn a background job using job spawn, which executes a closure in a background thread and returns a unique integer ID. The example shows how a command runs in the background while the shell continues execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/background_jobs.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n'i am' | save status.txt\n\njob spawn { sleep 10sec; ' inevitable' | save --append status.txt }\n# => 1\n\nopen status.txt\n# => i am\n\n# wait for 10 seconds\nsleep 10sec\n\nopen status.txt\n# => i am inevitable\n```\n\n----------------------------------------\n\nTITLE: Renaming Multiple DataFrame Columns\nDESCRIPTION: Example showing how to rename multiple columns simultaneously in a Polars DataFrame using lists of old and new column names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_rename.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars rename [a b] [a_new b_new]\n```\n\n----------------------------------------\n\nTITLE: Valid Pipeline Redirection in Nushell\nDESCRIPTION: Illustrates a valid pipeline redirection in Nushell, where output is directed to a file, demonstrating correct syntax and expected command behavior. Requires Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\necho aaa o> foo.txt | ignore\n```\n\n----------------------------------------\n\nTITLE: Autocomplete for Overlay Use\nDESCRIPTION: The `overlay use` command now includes enhanced autocomplete functionality, listing more directories thanks to contributions from the community.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Variable Scoping in Nushell\nDESCRIPTION: Shows variable scoping rules within code blocks and demonstrates variable shadowing behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nlet size = 10\ndo {\n    let size = 5\n    echo $size     # prints 5\n}\necho $size         # prints 10\n```\n\n----------------------------------------\n\nTITLE: Decoding Uppercase Hex Data\nDESCRIPTION: Demonstrates decoding uppercase hexadecimal string to binary data, showing the output in a formatted byte view.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_hex.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> \"09FD\" | decode hex\nLength: 2 (0x2) bytes | printable whitespace ascii_other non_ascii\n00000000:   09 fd                                                _×\n\n```\n\n----------------------------------------\n\nTITLE: Strip Characters Using Expression Example\nDESCRIPTION: Shows how to strip characters using a Polars expression instead of a direct string pattern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-strip-chars.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[text]; [\"!!!hello!!!\"] [\"!!!world!!!\"] [\"!!!test!!!\"]] | polars into-df | polars select (polars col text | polars str-strip-chars (polars lit \"!\")) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Nushell Keybindings Command Signature\nDESCRIPTION: The basic command signature for the keybindings command in Nushell. It takes optional flags as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> keybindings {flags} \n```\n\n----------------------------------------\n\nTITLE: Rendering Math Commands Table with Vue.js\nDESCRIPTION: An HTML table template that iterates over the filtered math commands and displays their titles as links along with their usage descriptions. The template uses Vue.js directives for dynamic rendering.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/math.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Compact Command Signature\nDESCRIPTION: The basic syntax for the compact command with its flags and parameters\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/compact.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> compact {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'math mode' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'math mode' function in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_mode.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math mode {flags}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Configuration in Rust\nDESCRIPTION: This code snippet demonstrates how to implement a plugin that reads configuration from the Nushell environment. It shows the structure of a plugin that can access and use custom configuration data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse nu_plugin::*;\nuse nu_protocol::{Signature, Type, Value};\n\nstruct MotdPlugin;\n\nimpl Plugin for MotdPlugin {\n    fn version(&self) -> String {\n        env!(\"CARGO_PKG_VERSION\").into()\n    }\n\n    fn commands(&self) -> Vec<Box<dyn PluginCommand<Plugin = Self>>> {\n        vec![\n            Box::new(Motd),\n        ]\n    }\n}\n\nstruct Motd;\n\nimpl SimplePluginCommand for Motd {\n    type Plugin = MotdPlugin;\n\n    fn name(&self) -> &str {\n        \"motd\"\n    }\n\n    fn description(&self) -> &str {\n        \"Message of the day\"\n    }\n\n    fn signature(&self) -> Signature {\n        Signature::build(PluginCommand::name(self))\n            .input_output_type(Type::Nothing, Type::String)\n    }\n\n    fn run(\n        &self,\n        _plugin: &MotdPlugin,\n        engine: &EngineInterface,\n        call: &EvaluatedCall,\n        _input: &Value,\n    ) -> Result<Value, LabeledError> {\n        if let Some(config) = engine.get_plugin_config()? {\n            let message = config.get_data_by_key(\"message\")\n                .ok_or_else(\n                    || LabeledError::new(\"Message not present in config\")\n                        .with_label(\"add the `message` key here\", config.span())\n                )?;\n            Ok(Value::string(message.as_str()?, call.head))\n        } else {\n            Err(LabeledError::new(\"Config for `motd` not set in $env.config.plugins\"))\n        }\n    }\n}\n\nfn main() {\n    serve_plugin(&MotdPlugin, MsgPackSerializer)\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Directories with Glob Command in Nushell\nDESCRIPTION: Shows how to use the glob command with the -D flag to ignore directories when matching patterns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/glob.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nglob -D * | path basename | str join ' '\nfoo.nu bar.nu\n# => foo.nu bar.nu baz.nu\n```\n\n----------------------------------------\n\nTITLE: Example: Using All-False with Comparison Results in Nushell\nDESCRIPTION: An example demonstrating how to use 'polars all-false' with the result of a comparison operation, checking if all values are false after comparing with a threshold.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_all-false.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> let s = ([5 6 2 10] | polars into-df);\n    let res = ($s > 9);\n    $res | polars all-false\n╭───┬───────────╮\n│ # │ all_false │\n├───┼───────────┤\n│ 0 │ false     │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Encoding Hello Message in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of a Hello message in JSON format for the Nushell plugin protocol, specifying protocol version and features.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hello\": {\n    \"protocol\": \"nu-plugin\",\n    \"version\": \"0.94.0\",\n    \"features\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting File Contents to Lines in Nushell\nDESCRIPTION: Splits a file into individual lines using the 'lines' command, which creates a table with line numbers and values from each line of the file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nopen people.psv | lines\n```\n\n----------------------------------------\n\nTITLE: Defining 'attr category' Signature in Nushell\nDESCRIPTION: This snippet shows the signature for the 'attr category' attribute in Nushell. It takes a category parameter and is used to categorize custom commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/attr_category.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> attr category {flags} (category)\n```\n\n----------------------------------------\n\nTITLE: Reading Clipboard Content with OSC-52 in Nushell\nDESCRIPTION: Shows how to use the 'term query' command to read clipboard content on terminals supporting OSC-52.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_query.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> term query $'(ansi osc)52;c;?(ansi st)' --prefix $'(ansi osc)52;c;' --terminator (ansi st)\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Polars Series with Mask in Nushell\nDESCRIPTION: Illustrates how to set or replace values in a Polars Series using a boolean mask in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_31\n\nLANGUAGE: nu\nCODE:\n```\n$df_1 | polars get first | polars set new --mask ($df_1.first =~ a)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Indexes of True Values with polars arg-true in Nushell\nDESCRIPTION: Example showing how to use the polars arg-true command to find indexes where values are true in a dataframe. The command converts a boolean list to a dataframe and then returns the indexes of true values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_arg-true.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[false true false] | polars into-df | polars arg-true\n```\n\n----------------------------------------\n\nTITLE: Nuon data format example\nDESCRIPTION: This code snippet shows an example of the 'nuon' data format, which is a superset of JSON and allows for data structures native to Nushell, such as compact tables, file sizes, durations, dates, records, and binary data. It illustrates the flexibility and expressiveness of 'nuon' for representing complex data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n# sample.nuon\n[\n    # The nuon compact table format\n    [[a, nuon, table]; [1, 2, 3], [4, 5, 6]],\n\n    # A filesize\n    100kib,\n\n    # A duration\n    100sec,\n\n    # A date\n    2022-01-11,\n\n    # A boolean\n    true,\n\n    # A record\n    {name: \"Bobby\", age: 99},\n\n    # Binary data\n    0x[11, ff, ee, 1f]\n]\n\n```\n\n----------------------------------------\n\nTITLE: Converting Delimited Strings to Tables\nDESCRIPTION: Shows how to parse common delimited formats (CSV, TSV, SSV) into structured table data using from commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\n\"acronym,long\\nAPL,A Programming Language\" | from csv\n# => ╭───┬─────────┬────────────────────────╮\n# => │ # │ acronym │          long          │\n# => ├───┼─────────┼────────────────────────┤\n# => │ 0 │ APL     │ A Programming Language │\n# => ╰───┴─────────┴────────────────────────╯\n\"name  duration\\nonestop.mid  4:06\" | from ssv\n# => ╭───┬─────────────┬──────────╮\n# => │ # │    name     │ duration │\n# => ├───┼─────────────┼──────────┤\n# => │ 0 │ onestop.mid │ 4:06     │\n# => ╰───┴─────────────┴──────────╯\n\"rank\\tsuit\\nJack\\tSpades\\nAce\\tClubs\" | from tsv\n# => ╭───┬──────┬────────╮\n# => │ # │ rank │  suit  │\n# => ├───┼──────┼────────┤\n# => │ 0 │ Jack │ Spades │\n# => │ 1 │ Ace  │ Clubs  │\n# => ╰───┴──────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Filtering Network Commands Using Vue.js in NuShell Documentation\nDESCRIPTION: Vue.js script that filters documentation pages to show only network-related commands. It selects pages that have a path including '/commands/docs/' and a frontmatter category of 'network', then sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/network.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('network'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complete Plugin Signature Request and Response\nDESCRIPTION: Shows the complete interaction for requesting a plugin's signature, including both the request and the plugin's response with its full command signature.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\n$ ./target/release/nu_plugin_len --stdio\njson{\"Hello\":{\"protocol\":\"nu-plugin\",\"version\":\"0.90.2\",\"features\":[]}}\n{\"Hello\":{\"protocol\":\"nu-plugin\",\"version\":\"0.90.2\",\"features\":[]}}\n{\"Call\":[0,\"Signature\"]}\n{\"CallResponse\":[0, {\"Signature\":[{\"sig\":{\"name\":\"len\",\"description\":\"calculates the length of its input\",\"extra_description\":\"\",\"search_terms\":[],\"required_positional\":[],\"optional_positional\":[],\"rest_positional\":null,\"vectorizes_over_list\":false,\"named\":[{\"long\":\"help\",\"short\":\"h\",\"arg\":null,\"required\":false,\"desc\":\"Display the help message for this command\",\"var_id\":null,\"default_value\":null}],\"input_type\":\"String\",\"output_type\":\"Int\",\"input_output_types\":[],\"allow_variants_without_examples\":false,\"is_filter\":false,\"creates_scope\":false,\"allows_unknown_args\":false,\"category\":\"Default\"},\"examples\":[]}]}]}\n```\n\n----------------------------------------\n\nTITLE: Calculate Average of Durations\nDESCRIPTION: Example demonstrating how to compute the average of time durations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_avg.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [2sec 1min] | math avg\n31sec\n```\n\n----------------------------------------\n\nTITLE: Converting List of Records to Record in nushell\nDESCRIPTION: This snippet demonstrates how to convert a list of records into a single record in nushell. Be sure to use the 'into record' command directly after listing the records. The input is a list of records, and the resulting output is a combined record with keys and values from the initial records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_record.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [{foo: bar} {baz: quux}] | into record\n```\n\n----------------------------------------\n\nTITLE: Retrieving Header Elements Example\nDESCRIPTION: Example showing how to retrieve all header elements from a website using the query web command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_web.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nhttp get https://phoronix.com | query web --query 'header' | flatten\n```\n\n----------------------------------------\n\nTITLE: Example: Basic Query String Parsing in Nushell\nDESCRIPTION: This example demonstrates parsing a simple query string with two key-value pairs into a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/url_split-query.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> \"mode=normal&userid=31415\" | url split-query\n╭───┬────────┬────────╮\n│ # │  key   │ value  │\n├───┼────────┼────────┤\n│ 0 │ mode   │ normal │\n│ 1 │ userid │ 31415  │\n╰───┴────────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Check for Empty String in Nushell and PowerShell\nDESCRIPTION: The `is_empty` command in Nushell checks if a string is null or empty.  In PowerShell, `String.InNullOrEmpty()` performs the equivalent check.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Creating a Custom Index Column in Nushell\nDESCRIPTION: This snippet demonstrates how to replace the default # index column with a custom index value of 1000 for each row in a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\nls | each { insert index { 1000 }} | first 5\n```\n\n----------------------------------------\n\nTITLE: Generating XML with Nushell\nDESCRIPTION: Demonstrates creating XML from Nushell records using the new `to xml` command, showing flexible record structure and content generation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-03-14-nushell_0_77.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n{tag: html content: [\\n  {tag: body content: [\\n    {tag: h1 content: ['Hello from Nushell !']}\\n    {tag: a attributes: {href: 'https://www.nushell.sh/'} content: ['Learn more here']}\\n    {tag: p content: [$\"Current time is (date now)\"]}\\n  ]}\\n  ]} | to xml\n```\n\n----------------------------------------\n\nTITLE: One-line Format Examples\nDESCRIPTION: Shows correct one-line formatting for various Nushell constructs including blocks, lists, and records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/style_guide.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[status]; [UP] [UP]] | all {|el| $el.status == UP }\n[1 2 3 4] | reduce {|elt, acc| $elt + $acc }\n[1 2 3 4] | reduce {|elt acc| $elt + $acc }\n{x: 1, y: 2}\n{x: 1 y: 2}\n[1 2] | zip [3 4]\n[]\n(1 + 2) * 3\n```\n\n----------------------------------------\n\nTITLE: Caching Operations in a Polars LazyFrame in Nushell\nDESCRIPTION: Example of using the 'polars cache' command to cache intermediate results in a dataframe processing pipeline. This creates a dataframe, reverses it, caches the result, and then sorts by column 'a'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cache.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [6 2] [4 2] [2 2]] | polars into-df\n                | polars reverse\n                | polars cache\n                | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Working with Closures in Nushell\nDESCRIPTION: Demonstrates creating and using a closure to filter values greater than 5 from a list\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\nlet compare_closure = {|a| $a > 5 }\nlet original_list = [ 40 -4 0 8 12 16 -16 ]\n$original_list | filter $compare_closure\n# => ╭───┬────╮\n# => │ 0 │ 40 │\n# => │ 1 │  8 │\n# => │ 2 │ 12 │\n# => │ 3 │ 16 │\n# => ╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Showing Last 5 Commands in Nushell\nDESCRIPTION: This example shows how to display the last 5 commands executed using the `history` command in conjunction with the `last` command. It takes the history entries as input and outputs the last 5 entries.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/history.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\n> history | last 5\n\n```\n\n----------------------------------------\n\nTITLE: Handling Unix Timestamps in Nushell\nDESCRIPTION: This snippet demonstrates converting integers to datetime in Nushell. It uses the `into int` and `into datetime` commands to handle Unix timestamps. The conversion assumes input as nanoseconds relative to the Unix epoch. Dependencies include Nushell's built-in shell commands. Outputs epoch dates given the correct range, and errors if input is outside the range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-03-14-nushell_0_77.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n〉\"7fffffffffffffff\" | into int -r 16 | into datetime\nFri, 11 Apr 2262 23:47:16 +0000 (in 239 years)\n〉(\"7fffffffffffffff\" | into int -r 16) * -1 | into datetime\nTue, 21 Sep 1677 00:12:43 +0000 (345 years ago)\n```\n\n----------------------------------------\n\nTITLE: Listing and Killing Background Jobs in Nushell\nDESCRIPTION: Shows how to list active jobs using job list and terminate them with job kill. The job list command returns a table with information about currently executing jobs, while job kill interrupts a job's thread and terminates all child processes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/background_jobs.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet id = job spawn { sleep 1day }\n\njob list\n# => ┏━━━┳━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┓\n# => ┃ # ┃ id ┃  type  ┃      pids      ┃\n# => ┣━━━╋━━━━╋━━━━━━━━╋━━━━━━━━━━━━━━━━┫\n# => ┃ 0 ┃  1 ┃ thread ┃ [list 0 items] ┃\n# => ┗━━━┻━━━━┻━━━━━━━━┻━━━━━━━━━━━━━━━━┛\n\njob kill $id\n\njob list\n# => ╭────────────╮\n# => │ empty list │\n# => ╰────────────╯\n```\n\n----------------------------------------\n\nTITLE: Slicing Last Two Items Using Negative Index\nDESCRIPTION: Example demonstrating how to get the last two items using a negative index syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/slice.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [0,1,2,3,4,5] | slice (-2)..\n╭───┬───╮\n│ 0 │ 4 │\n│ 1 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Sorting While Interleaving Two Number Sequences\nDESCRIPTION: In this example, the 'interleave' function combines two sequences of numbers, with one sequence derived from the input. The combined output is then sorted for consistency, displaying a structured table of results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/interleave.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> seq 1 3 | interleave { seq 4 6 } | sort\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 2 │\n│ 2 │ 3 │\n│ 3 │ 4 │\n│ 4 │ 5 │\n│ 5 │ 6 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Executing SQL against a SQLite database\nDESCRIPTION: This snippet demonstrates how to execute a SQL query against a SQLite database opened using the 'open' command. It retrieves all columns and rows from the 'Bar' table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/query_db.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\"> open foo.db | query db \\\"SELECT * FROM Bar\\\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Rotate 2x3 Table Counter-Clockwise in Nushell\nDESCRIPTION: This example illustrates rotating a 2x3 table counter-clockwise using the `--ccw` flag with the `rotate` command in Nushell. The resulting table is displayed with reordered columns based on the counter-clockwise rotation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rotate.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n\n> [[a b]; [1 2] [3 4] [5 6]] | rotate --ccw\n╭───┬─────────┬─────────┬─────────┬─────────╮\n│ # │ column0 │ column1 │ column2 │ column3 │\n├───┼─────────┼─────────┼─────────┼─────────┤\n│ 0 │ b       │       2 │       4 │       6 │\n│ 1 │ a       │       1 │       3 │       5 │\n╰───┴─────────┴─────────┴─────────┴─────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Adding Bytes at End with Index Offset in Nushell\nDESCRIPTION: Example showing how to add bytes '0x[11 22 33]' to binary data '0x[FF AA BB]' at the end with an index of 1 (which positions from the end).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_add.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n0x[FF AA BB] | bytes add 0x[11 22 33] --end --index 1\n```\n\n----------------------------------------\n\nTITLE: Basic Command Signature for rm in Nushell\nDESCRIPTION: Shows the basic command signature for the rm command with flags parameter notation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rm.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> rm {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Subexpression Usage in Nushell\nDESCRIPTION: This snippet illustrates how to use subexpressions in Nushell to capture the output of a pipeline and assign it to a variable. It filters the output of `ls` to find files larger than 10kb and stores the result in `names_of_big_files`. The `echo` command then prints the content of the variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/variables_and_subexpressions.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nlet names_of_big_files = (ls | where size > 10kb)\necho $names_of_big_files\n# => ───┬────────────┬──────┬──────────┬──────────────\n# =>  # │    name    │ type │   size   │   modified\n# => ───┼────────────┼──────┼──────────┼──────────────\n# =>  0 │ Cargo.lock │ File │ 155.3 KB │ 17 hours ago\n# =>  1 │ README.md  │ File │  15.9 KB │ 17 hours ago\n# => ───┴────────────┴──────┴──────────┴──────────────\n```\n\n----------------------------------------\n\nTITLE: Date Commands Table Template in Vue.js\nDESCRIPTION: HTML template that renders a table displaying the filtered date commands. Each row shows the command name as a link and its usage description with preserved whitespace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/date.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Writing to a File with io\nDESCRIPTION: This code shows how to write to a file using `io.TextIOWrapper.write` in Python. This involves opening a file in write mode, using the `write` method to write the string to the file, and then closing the file. The `io.TextIOWrapper` ensures the correct text encoding is used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"io.TextIOWrapper.write\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Command Implementations\nDESCRIPTION: Comparison of sorting methods and implementations across different programming languages, showing variations in sort functionality\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map_imperative.md#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsorted, list.sort\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nsortedBy, sortedWith, Arrays.sort, Collections.sort\n```\n\nLANGUAGE: Rust\nCODE:\n```\nsort\n```\n\nLANGUAGE: Nushell\nCODE:\n```\nsort-by\n```\n\n----------------------------------------\n\nTITLE: Summing Numbers with sum\nDESCRIPTION: This snippet shows how to calculate the sum of a sequence of numbers using the `sum` function in Python. The `sum` function takes an iterable of numbers as input and returns their sum. It's a convenient way to calculate the total value of a collection of numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\"sum\"\n```\n\n----------------------------------------\n\nTITLE: Listing environment variables in Nu\nDESCRIPTION: Lists the current environment variables using 'echo $nu.env'. This displays all the environment variables and their values in the current session.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_22\n\nLANGUAGE: nu\nCODE:\n```\n\"echo $nu.env\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Custom Values via `PartialCmp`\nDESCRIPTION: This snippet provides an example of how to compare a custom value with another value and get the ordering result. The expected response is an Ordering or Error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [\n    0,\n    {\n      \"CustomValueOp\": [\n        {\n          \"item\": {\n            \"name\": \"version\",\n            \"data\": [0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0]\n          },\n          \"span\": {\n            \"start\": 90,\n            \"end\": 96\n          }\n        },\n        {\n          \"PartialCmp\": {\n            \"Custom\": {\n              \"val\": {\n                \"type\": \"PluginCustomValue\",\n                \"name\": \"version\",\n                \"data\": [0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0]\n              },\n              \"span\": {\n                \"start\": 560,\n                \"end\": 566\n              }\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Filesize to Binary in Nushell\nDESCRIPTION: This snippet demonstrates how to convert the filesize of a specific file in Nushell to a binary primitive. The command retrieves the file size and converts it accordingly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_binary.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> ls | where name == LICENSE | get size | into binary\n\n```\n\n----------------------------------------\n\nTITLE: Base32 Encoding Without Padding\nDESCRIPTION: Example showing how to encode a string (\"hi\") into Base32 format without padding using the --nopad flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base32.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> \"hi\" | encode base32 --nopad\nNBUQ\n```\n\n----------------------------------------\n\nTITLE: Main Plugin Entry Point and Message Handler\nDESCRIPTION: Main routine that handles incoming messages from Nushell, processing requests for plugin configuration and input handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    send_encoder()\n    send_hello()\n    for line in sys.stdin:\n        input = json.loads(line)\n        if \"Hello\" in input:\n            pass\n        elif input == \"Goodbye\":\n            break\n        elif \"Call\" in input:\n            [id, call] = input[\"Call\"]\n            if call == \"Metadata\":\n                send_response(id, {\n                    \"Metadata\": {\n                        \"version\": \"0.1.0\",\n                    }\n                })\n            elif call == \"Signature\":\n                send_response(id, {\"Signature\": [signature()]})\n            elif \"Run\" in call:\n                handle_call(id, call[\"Run\"])\n            else:\n                send_error(id, \"Unknown call passed to plugin\", {\"start\": 0, \"end\": 0})\n        else:\n            sys.stderr.writelines([\"Unknown message passed to plugin\"])\n            sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in Nushell\nDESCRIPTION: Shows how to create and access environment variables using let-env command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nlet-env TRACE = on\necho $nu.env.TRACE   # prints 'on'\n```\n\n----------------------------------------\n\nTITLE: Nushell Overlay Use Command Signature\nDESCRIPTION: The basic command signature for using module definitions as an overlay\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_use.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> overlay use {flags} (name) (as)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nushell Command Formatting\nDESCRIPTION: Shows incorrect spacing in Nushell commands that should be avoided.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/style_guide.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'Hello, Nushell! This is a gradient.' |  ansi gradient --fgstart '0x40c9ff' --fgend '0xe81cff'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Type in Nushell\nDESCRIPTION: Example of a UTF-8 string representation in Nushell. Shows the string value and its span in the source code.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_57\n\nLANGUAGE: nu\nCODE:\n```\n\"Hello, nu!\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"String\": {\n    \"val\": \"Hello, nu!\",\n    \"span\": {\n      \"start\": 8990,\n      \"end\": 9002\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Short-hand Subexpression in Nushell\nDESCRIPTION: This snippet demonstrates the short-hand syntax for accessing columns within a `where` command. It filters the output of `ls` to show only files with a size greater than 10kb, using the short-hand `size > 10kb` instead of the more verbose `$it.size > 10kb`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/variables_and_subexpressions.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nls | where size > 10kb\n```\n\n----------------------------------------\n\nTITLE: Create Directory in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `mkdir` command creates a new directory. In PowerShell, `mkdir` or `md` can be used, and `mkdir` is the standard command in Unix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Configuring Nushell Environment Path\nDESCRIPTION: The purpose of this snippet is to modify the Nushell environment by updating the Path variable. This ensures that external commands like `ln`, `grep`, and `vi`, commonly available in Git Bash, are accessible in Nushell. It requires no external dependencies and should be added to the `config.nu` file using either `append` or `prepend`. This change enables integration of Git Bash commands into Nushell, assuming the correct paths are specified.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_bash.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.Path = ($env.Path | prepend 'C:\\Program Files\\Git\\usr\\bin')\n```\n\n----------------------------------------\n\nTITLE: Filling a String on the Right Side\nDESCRIPTION: This snippet illustrates filling a string on the right side to a given width using a specified character. It employs the 'fill' command with right alignment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/fill.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'nushell' | fill --alignment r --character '─' --width 15\n────────nushell\n```\n\n----------------------------------------\n\nTITLE: Exploring Markdown File Contents with Row Indexes in Nushell\nDESCRIPTION: Illustrates exploring the contents of multiple Markdown files with row indexes displayed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/explore.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> glob *.md | each {|| open } | explore --index\n```\n\n----------------------------------------\n\nTITLE: Out of Bound Error Example in Nushell\nDESCRIPTION: Demonstrates Nushell's 'out of bound' error which occurs when accessing an invalid range in a string. This requires Nugtel shell version supporting the new error handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n\"foo\" | str index-of '' --range 10..11\n```\n\n----------------------------------------\n\nTITLE: Accessibility Configuration in Nushell\nDESCRIPTION: Configuration settings for improving accessibility by disabling decorative elements\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n# in $nu.config-path\n$env.config = {\n  ...\n  table: {\n   ...\n    mode: \"none\"\n   ...\n  }\n  error_style: \"plain\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Space Separated Values with from ssv in Nushell\nDESCRIPTION: Shows how to use the from ssv command to parse space-separated data with alignment options. Uses the --aligned-columns and --minimum-spaces flags to control parsing behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ndf -h | str replace \"Mounted on\" Mounted_On | from ssv --aligned-columns --minimum-spaces 1\n```\n\n----------------------------------------\n\nTITLE: String Prefix and Suffix Comparison Operators\nDESCRIPTION: Shows how to use the starts-with and ends-with operators to check if a string begins or ends with a specific substring.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_20\n\nLANGUAGE: nushell\nCODE:\n```\n'JavaScript' starts-with 'Java'\n# => true\n'OCaml' ends-with 'Caml'\n# => true\n```\n\n----------------------------------------\n\nTITLE: Converting Multiple Columns in a Table to Lowercase in Nushell\nDESCRIPTION: Example showing how to convert both 'ColA' and 'ColB' column values to lowercase in a table using the str downcase command with multiple column name parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_downcase.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [[ColA ColB]; [Test ABC]] | str downcase ColA ColB\n╭───┬──────┬──────╮\n│ # │ ColA │ ColB │\n├───┼──────┼──────┤\n│ 0 │ test │ abc  │\n╰───┴──────┴──────╯\n\n```\n\n----------------------------------------\n\nTITLE: Filtering File Types with Nushell glob\nDESCRIPTION: Example showing how to search only for folders (excluding files and symlinks) that begin with an uppercase ASCII letter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/glob.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n> glob \"[A-Z]*\" --no-file --no-symlink\n\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with Nushell\nDESCRIPTION: This snippet demonstrates the `ls` command in Nushell, which returns a structured table of directory contents instead of plain text. The output includes file names, sizes, and other metadata, enabling interactive data manipulation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"ls\"\n```\n\n----------------------------------------\n\nTITLE: Chunking Range Values by Predicate in Nushell\nDESCRIPTION: This example demonstrates how to use 'chunk-by' with a range of numbers, grouping them based on the result of an integer division operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/chunk-by.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> (0..8) | chunk-by { |it| $it // 3 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options and Switches in Nushell Commands\nDESCRIPTION: The snippet introduces boolean options and switches in custom commands. A boolean option requires a value to be passed, while a switch can be toggled on or off without additional values. It highlights the difference in implementation and usage of both. There are no external dependencies, and these are simply custom command definitions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_3\n\nLANGUAGE: Nushell\nCODE:\n```\ndef foo [--option: bool] { if $option { print \"yeah\" } }\n\nfoo --option        # will give an error\nfoo --option false  # won't print anything\nfoo --option true   # will print \"yeah\"\n```\n\nLANGUAGE: Nushell\nCODE:\n```\ndef bar [--switch] { if $switch { print \"yeah\" } }\n\nbar           # won't print anything\nbar --switch  # will print \"yeah\"\n```\n\n----------------------------------------\n\nTITLE: Using Rest Parameters for Variable Argument Lists\nDESCRIPTION: Shows how to define a command that accepts any number of arguments using the rest parameter syntax (...).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [...name: string] {\n  print \"hello all:\"\n  for $n in $name {\n    echo $n\n  }\n}\n\ngreet earth mars jupiter venus\n```\n\n----------------------------------------\n\nTITLE: Enumerating and Finding Elements in Nushell\nDESCRIPTION: Example showing how to enumerate a list and find specific elements with their indexes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3] | enumerate | each {|e| if $e.item == 2 { $\"found 2 at ($e.index)!\"} }\n```\n\n----------------------------------------\n\nTITLE: Displaying Nushell Weekly Update in Markdown\nDESCRIPTION: This Markdown snippet outlines recent contributions to Nushell, its documentation, WebAssembly support, and community scripts. It includes links to GitHub issues for each update.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-05-21-twin0091.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# This week in Nushell #91\n\n## Nushell\n\n- fdncred added [nothing converted to string should return nothing and not fail](https://api.github.com/repos/nushell/nushell/issues/3459), [add addition characters that can be hard to work with in nushell](https://api.github.com/repos/nushell/nushell/issues/3457), [updated round to support i64](https://api.github.com/repos/nushell/nushell/issues/3451), [updated to the latest rustyline](https://api.github.com/repos/nushell/nushell/issues/3439), and [don't let externals break ansi escapes](https://api.github.com/repos/nushell/nushell/issues/3438), and [re-enable ansi support when externals break it](https://api.github.com/repos/nushell/nushell/issues/3429)\n- jonathandturner did [a bit more cleanup of block params](https://api.github.com/repos/nushell/nushell/issues/3455), [split unit into duration and filesize](https://api.github.com/repos/nushell/nushell/issues/3453), [changed to paren interpolation](https://api.github.com/repos/nushell/nushell/issues/3452), [improved block params](https://api.github.com/repos/nushell/nushell/issues/3450), [added explicit block params](https://api.github.com/repos/nushell/nushell/issues/3444), and did a fix to [treat u64 like i64 for now](https://api.github.com/repos/nushell/nushell/issues/3442)\n- kubouch [removed rest_args() from evaluated CommandArgs](https://api.github.com/repos/nushell/nushell/issues/3449), and [fixed path join argument type and a typo](https://api.github.com/repos/nushell/nushell/issues/3441)\n- elferherrera added the ability to [load parquet and json files](https://api.github.com/repos/nushell/nushell/issues/3437), moved [commands to engine p](https://api.github.com/repos/nushell/nushell/issues/3426), and [added new dataframe commands](https://api.github.com/repos/nushell/nushell/issues/3425)\n- schrieveslaach [added Support for Partial Completions](https://api.github.com/repos/nushell/nushell/issues/3432)\n- alexshadley [added negative indexing for range](https://api.github.com/repos/nushell/nushell/issues/3427)\n\n## Documentation\n\n- eduardocanellas [translated home to pt-BR](https://api.github.com/repos/nushell/nushell.github.io/issues/129)\n- tupini07 [fixed typo](https://api.github.com/repos/nushell/nushell.github.io/issues/128)\n\n## Wasm\n\n- moonrise-tk fixed [build or rustc 1.52.1](https://api.github.com/repos/nushell/demo/issues/68)\n\n## Nu_Scripts\n\n- efx [renamed git script for consistency](https://api.github.com/repos/nushell/nu_scripts/issues/55), and added a [gentle git gone script](https://api.github.com/repos/nushell/nu_scripts/issues/54)\n- agateau [added a script to list git branches and their age](https://api.github.com/repos/nushell/nu_scripts/issues/51)\n```\n\n----------------------------------------\n\nTITLE: Generating Plugin Call for Metadata [JSON]\nDESCRIPTION: Represents a `Call` message in JSON format to request metadata from a Nu plugin. The message consists of a two-element array: an ID and the call type, `Metadata`. No additional arguments are necessary. The plugin should respond with a metadata object or an error if it cannot fulfill the request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [0, \"Metadata\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Metadata Example in Nushell\nDESCRIPTION: Example showing how to get metadata for a variable after assigning it a value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/metadata.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> let a = 42; metadata $a\n```\n\n----------------------------------------\n\nTITLE: To Text No Newline Flag\nDESCRIPTION: These examples illustrate the use of the `--no-newline` flag with the `to text` command. The first pair of examples shows how the flag suppresses the trailing newline character when converting a single-element list to text. The second pair demonstrates the same effect when converting a multi-element list, where newlines are inserted between elements but the final newline is omitted with the flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n\"[a] | to text    # \\\"a\\n\\\"\\n[a] | to text -n # \\\"a\\\"\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\n\"[a b] | to text    # \\\"a\\nb\\n\\\"\\n[a b] | to text -n # \\\"a\\nb\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Change Text Color to Green\nDESCRIPTION: Example showing how to change text color to green using ANSI codes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ansi green\n\n```\n\n----------------------------------------\n\nTITLE: Executing Nushell Website Builder Script\nDESCRIPTION: A simple website builder script added to the Nu_Scripts repository. This script likely contains functionality for generating or managing website content using Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-18-twin0134.md#2025-04-19_snippet_0\n\nLANGUAGE: Nushell\nCODE:\n```\njt added a [simple website builder script](https://github.com/nushell/nu_scripts/blob/main/fun/website_builder.nu)\n```\n\n----------------------------------------\n\nTITLE: List Integer Bitwise AND Operation\nDESCRIPTION: Demonstrates bitwise AND operation on a list of integers with a single value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_and.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [4 3 2] | bits and 2\n```\n\n----------------------------------------\n\nTITLE: Defining Color Configurations in Nushell\nDESCRIPTION: This Nushell code snippet demonstrates how to dynamically define color configurations for various data types including booleans, integers, and file sizes based on their values. It utilizes closures to set color schemes and showcase default settings for different conditions, enhancing visualization and readability. These configurations are specified within a hash map and applied to shell outputs to facilitate data inspection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.color_config.filesize = {|x| if $x == 0b { 'dark_gray' } else if $x < 1mb { 'cyan' } else { 'blue' } }\n$env.config.color_config.bool = {|x| if $x { 'green' } else { 'light_red' } }\n{a:true,b:false,c:0mb,d:0.5mb,e:10mib}\n```\n\n----------------------------------------\n\nTITLE: Job Subcommands Overview in Nushell\nDESCRIPTION: List of available subcommands for managing background jobs, including kill, list, spawn, and unfreeze operations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/job.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| name                   | description                           | type     |\n| ---------------------- | ------------------------------------- | -------- |\n| job kill              | Kill a background job                 | built-in |\n| job list              | List background jobs                  | built-in |\n| job spawn             | Spawn a background job and get its ID | built-in |\n| job unfreeze          | Unfreeze a frozen process job         | built-in |\n```\n\n----------------------------------------\n\nTITLE: Applying Bitwise OR with Smaller Input Data in Nushell\nDESCRIPTION: Shows how the 'bits or' command handles input binary data that is smaller than the operand, using little-endian byte encoding in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_or.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[ff] | bits or 0x[12 34 56] --endian little\nLength: 3 (0x3) bytes | printable whitespace ascii_other non_ascii\n00000000:   ff 34 56                                             ×4V\n```\n\n----------------------------------------\n\nTITLE: Empty Rest Match Example\nDESCRIPTION: This code demonstrates a breaking change where an empty rest match now results in an empty list instead of `null`. The `match` command is used to illustrate the difference in behavior before and after the change.  The variable `$rest` is matched against an empty list; previously, it would have been `null`, but now it is an empty list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n\"# Before\nmatch [] {\n    [..$rest] => ($rest == null) # true\n}\n\n# After\nmatch [] {\n    [..$rest] => ($rest == []) # true\n}\"\n```\n\n----------------------------------------\n\nTITLE: Listing Nushell Scripts Updates in Markdown\nDESCRIPTION: Markdown list of recent updates and contributions to the Nu_Scripts repository, including script additions and modifications.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-13-twin0103.md#2025-04-19_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## Nu_Scripts\n\n- Yethal [updated filesize.nu](https://github.com/nushell/nu_scripts/pull/88), and [Create filesize.nu](https://github.com/nushell/nu_scripts/pull/87)\n```\n\n----------------------------------------\n\nTITLE: Extract Hour from DateTime Example\nDESCRIPTION: Example showing how to extract hours from datetime values in a dataframe using polars get-hour. Creates a dataframe with two identical datetime values and extracts the hour component.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-hour.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\nlet df = ([$dt $dt] | polars into-df);\n$df | polars get-hour\n```\n\n----------------------------------------\n\nTITLE: Testing Type-based Pattern Matching in Nushell\nDESCRIPTION: Shows assertions testing the str append function with both string and list inputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/pattern_matching.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nuse std/assert\nassert equal (\"foo\" | str append \"/\") \"foo/\"\nassert equal ([\"foo\", \"bar\", \"baz\"] | str append \"/\") [\"foo/\", \"bar/\", \"baz/\"]\n```\n\n----------------------------------------\n\nTITLE: Mixing integer and string multiplication\nDESCRIPTION: This example show a mixing integer and string multiplication in Nushell. The reduce function accumulate a string using multiplication.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-09-19-nushell_0_85_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n[3, \"bob\", 4] | reduce --fold 1 {|x, y| $x * $y}\nbobbobbobbobbobbobbobbobbobbobbobbob\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terminal Dimensions in Nushell\nDESCRIPTION: Demonstrates how to use the 'term size' command to get the columns and rows of the terminal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_size.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> term size\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'config reset' Command in Nushell\nDESCRIPTION: An example demonstrating how to use the 'config reset' command in Nushell to reset configuration files to their default values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_reset.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> config reset\n```\n\n----------------------------------------\n\nTITLE: Plugin Main Function in Rust\nDESCRIPTION: The main function of a Nushell plugin which serves the plugin using JsonSerializer. This is the entry point for the plugin process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    serve_plugin(&LenPlugin, JsonSerializer)\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Hyperbolic Sine Example\nDESCRIPTION: Example showing how to calculate the hyperbolic sine of 1 using the math sinh command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sinh.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | math sinh\n1.1752011936438014\n```\n\n----------------------------------------\n\nTITLE: Split List with After Flag\nDESCRIPTION: Example showing how to split a list after occurrences of 0 using the --split flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_list.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 0 3 4 5 0 6 0 0 7] | split list --split after 0\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable in Module\nDESCRIPTION: Shows how to define and export an environment variable within a module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/module.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> module foo { export-env { $env.FOO = \"BAZ\" } }; use foo; $env.FOO\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'to html' Command to Convert Table to HTML\nDESCRIPTION: Demonstrates basic usage of the 'to html' command to convert a simple table to an HTML string. The output includes HTML structure with a white background and black text.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_html.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [1 2]] | to html\n<html><style>body { background-color:white;color:black; }</style><body><table><thead><tr><th>foo</th><th>bar</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table></body></html>\n```\n\n----------------------------------------\n\nTITLE: Scoped Overlay Usage in Nushell\nDESCRIPTION: Demonstrates how overlays in Nushell are scoped and automatically removed when the block they're in completes execution. Shows using an overlay within a do-block.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n(zero)> do { overlay use spam; foo }\nfoo\n\n(zero)> overlay list\n───┬──────\n 0 │ zero\n───┴──────\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables from a Module\nDESCRIPTION: Example of importing a module with an environment variable and using both the variable and an exported command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nuse greetings.nu\n\n# => $env.\"greetings MYNAME\"\n# => Arthur, King of the Britons\n\ngreetings hello $env.\"greetings MYNAME\"\n# => hello Arthur, King of the Britons!\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins via Cargo\nDESCRIPTION: Command to install optional Nushell plugins using Cargo with the nu_plugin prefix\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-04-nushell_0_92_1.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Stream Description with Collection - Nushell\nDESCRIPTION: Example demonstrating how to describe a stream of data by collecting it first.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/describe.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | each {|i| echo $i} | describe\n```\n\n----------------------------------------\n\nTITLE: Extracting Day from Datetime Values in a Polars Dataframe\nDESCRIPTION: Demonstrates how to use the 'polars get-day' command to extract the day component from datetime values in a dataframe. The example creates datetime objects, converts them to a dataframe, and then extracts the day component.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-day.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> let dt = ('2020-08-04T16:39:18+00:00' | into datetime --timezone 'UTC');\n    let df = ([$dt $dt] | polars into-df);\n    $df | polars get-day\n```\n\n----------------------------------------\n\nTITLE: Version Check Example Usage - Nushell\nDESCRIPTION: Example demonstrating how to check if the current Nushell installation is running the latest version.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/version_check.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> version check\n```\n\n----------------------------------------\n\nTITLE: Extracting Existing Config Options\nDESCRIPTION: This code snippet generates a formatted output of existing configuration options in Nushell, making it easier for users to transition to the new structured format introduced in the documentation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n$env.config | do { { ls: { use_ls_colors: $in.use_ls_colors clickable_links: $in.show_clickable_links_in_ls } rm: { always_trash: $in.rm_always_trash } cd: { abbreviations: $in.cd_with_abbreviations } table: { mode: $in.table_mode index_mode: $in.table_index_mode trim: $in.table_trim } history: { max_size: $in.max_history_size sync_on_enter: $in.sync_history_on_enter file_format: $in.history_file_format } completions: { case_sensitive: $in.case_sensitive_completions quick: $in.quick_completions partial: $in.partial_completions algorithm:$in.completion_algorithm external: { enable: $in.enable_external_completion max_results: $in.max_external_completion_results completer:$in.external_completer } } } } | to nuon | str substring 1..-1\n```\n\n----------------------------------------\n\nTITLE: Opening Spotify Link with `start` Command in Nushell\nDESCRIPTION: This code snippet demonstrates how the `start` command in Nushell can be used to open non-HTTP URIs. Specifically, it shows how to open a Spotify track using a `spotify:` link. The `start` command will call the system's default URI handler to open the link, which in this case will start the Spotify application and play the specified track.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nstart spotify:track:4PTG3Z6ehGkBFwjybzWkR8?si=f9b4cdfc1aa14831\n```\n\n----------------------------------------\n\nTITLE: Creating a sample CSV file for dataframe examples\nDESCRIPTION: Creates a sample CSV file with various data types (integers, floats, strings) for use in dataframe examples. This provides controlled test data for demonstrating dataframe operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n(\"int_1,int_2,float_1,float_2,first,second,third,word\n1,11,0.1,1.0,a,b,c,first\n2,12,0.2,1.0,a,b,c,second\n3,13,0.3,2.0,a,b,c,third\n4,14,0.4,3.0,b,a,c,second\n0,15,0.5,4.0,b,a,a,third\n6,16,0.6,5.0,b,a,a,second\n7,17,0.7,6.0,b,c,a,third\n8,18,0.8,7.0,c,c,b,eight\n9,19,0.9,8.0,c,c,b,ninth\n0,10,0.0,9.0,c,c,b,ninth\"\n| save --raw --force test_small.csv)\n```\n\n----------------------------------------\n\nTITLE: Fixing Rest Args Handling in Nushell's Do Command\nDESCRIPTION: This snippet addresses a bug in handling rest arguments in the `do` command in Nushell. The issue was that non-rest arguments were counted incorrectly. The fix allows for correct parsing of required, optional, and rest arguments. The input includes the command with arguments, and the expected output is the correct distribution of these arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-30-nushell_0_94_1.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"do { |a, b, ...c| print $a $b $c } 1 2 3 4 5 6 7 8\"\n```\n\n----------------------------------------\n\nTITLE: Basic CPU Information Example\nDESCRIPTION: Demonstrates the basic usage of the sys cpu command to display system CPU information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_cpu.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> sys cpu\n\n```\n\n----------------------------------------\n\nTITLE: String Duration Conversion in Nushell\nDESCRIPTION: Adds `--convert` parameter to `into duration` command for converting string durations to named durations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n'7min' | into duration --convert sec\n```\n\n----------------------------------------\n\nTITLE: Polars fill-null Command Signature in Nushell\nDESCRIPTION: The command signature for the polars fill-null command, showing it requires a fill parameter which is the expression used to fill null values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_fill-null.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars fill-null {flags} (fill)\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `rm` to Python's `os.remove`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `rm` command in Python using the `os.remove` function.  This function removes a file from the file system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n\"os.remove\"\n```\n\n----------------------------------------\n\nTITLE: Variable Aliasing and Mutation in Nushell Blocks\nDESCRIPTION: This example shows how variable aliasing still occurs within blocks. When a new mutable variable with the same name is defined inside a block, it shadows the outer variable instead of modifying it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/block.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 9\nif true { mut x = 8; $x += 100; echo $x }\n# => 108\necho $x\n# => 9\n```\n\n----------------------------------------\n\nTITLE: Two-Byte Left Shift Operation\nDESCRIPTION: Shows left shifting a number with 2-byte word size by 7 bits\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_shl.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n2 | bits shl 7 --number-bytes 2\n```\n\n----------------------------------------\n\nTITLE: Coloring Shape Values in Nushell\nDESCRIPTION: This snippet illustrates setting customized colors for different 'shape' values in Nushell, indicating the syntax coloring. It showcases configuring foreground, background, and attributes for shapes like 'shape_garbage', 'shape_bool', and 'shape_int', enabling enhanced syntactic differentiation for improved readability and aesthetic.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    color_config: {\n        shape_garbage: { fg: \"#FFFFFF\" bg: \"#FF0000\" attr: b}\n        shape_bool: green\n        shape_int: { fg: \"#0000ff\" attr: b}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for the Presence of an Environment Variable\nDESCRIPTION: This snippet checks for the existence of a specific environment variable using the 'in' operator, allowing for conditional logic based on whether the variable is set.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nif \"FOO\" in $env {\n    echo $env.FOO\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Non-null Values in a Dataframe Column with Polars in Nushell\nDESCRIPTION: Example showing how to count non-null values in a column by creating a dataframe with null values, selecting a column, applying count, and collecting the results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_count.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a]; [\"foo\"] [\"bar\"] [null]] | polars into-df\n                    | polars select (polars col a | polars count)\n                    | polars collect\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Usage with Nu du Command\nDESCRIPTION: Example of using the new 'du' command in Nushell to display disk usage information for directories in a structured table format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-01-28-nushell-0_9_0.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n❯ du\n───┬───────────────┬─────────┬────────────────\n # │ name          │ size    │ contents\n───┼───────────────┼─────────┼────────────────\n 0 │ .git          │  4.7 MB │ [table 6 rows]\n 1 │ .jekyll-cache │ 49.0 KB │ [table 1 rows]\n 2 │ _includes     │   881 B │\n 3 │ _layouts      │  4.3 KB │\n 4 │ _posts        │ 82.4 KB │\n 5 │ _sass         │ 21.5 KB │\n 6 │ _site         │  5.3 MB │ [table 4 rows]\n 7 │ assets        │  2.4 MB │ [table 1 rows]\n 8 │ images        │  2.4 MB │\n───┴───────────────┴─────────┴────────────────\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Size in Nushell\nDESCRIPTION: Demonstrates using the where command to filter ls output and display only files larger than 1KB, showing Nushell's ability to filter structured data based on conditions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nls | where size > 1kb\n# => ───┬──────────────┬──────┬────────┬────────────\n# =>  # │ name         │ type │ size   │ modified\n# => ───┼──────────────┼──────┼────────┼────────────\n# =>  0 │ Gemfile      │ File │ 1.1 KB │ 3 days ago\n# =>  1 │ Gemfile.lock │ File │ 6.9 KB │ 3 days ago\n# =>  2 │ LICENSE      │ File │ 1.1 KB │ 3 days ago\n# =>  3 │ SUMMARY.md   │ File │ 3.7 KB │ 3 days ago\n# => ───┴──────────────┴──────┴────────┴────────────\n```\n\n----------------------------------------\n\nTITLE: Viewing Metadata with the Tags Command in Nushell\nDESCRIPTION: This example demonstrates how to use the 'tags' command to view metadata associated with data loaded from a file. The output shows tracking information including the source file path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nopen package.json | tags\n───┬─────────────────┬────────────────────────────────────────────────────────────────────────────\n # │      span       │                                    anchor\n───┼─────────────────┼────────────────────────────────────────────────────────────────────────────\n 0 │ [row end start] │ /home/sophia/Source/servo/tests/wpt/web-platform-tests/webrtc/tools/packag\n   │                 │ e.json\n───┴─────────────────┴────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Setting Core Size Limit in Nushell\nDESCRIPTION: Example showing how to set the core size limit to 102400 using the ulimit command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ulimit.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> ulimit --core-size 102400\n```\n\n----------------------------------------\n\nTITLE: Deprecated with-env Syntax\nDESCRIPTION: Illustrates the deprecated syntax for passing environment variables to the `with-env` command.  The old syntax using list-like or single-row tables is no longer recommended. It highlights the preferred record form for setting environment variables within `with-env`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n# deprecated\nwith-env [X Y W Z] { $env.X }\n# also deprecated\nwith-env [[X Y]; [W Z]] { $env.X }\n```\n\n----------------------------------------\n\nTITLE: Getting Every Second Row in Nushell\nDESCRIPTION: Example showing how to select every second row from a list of numbers using the 'every' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/every.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 4 5] | every 2\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 3 │\n│ 2 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Column Selection with Explode Expression\nDESCRIPTION: Example demonstrating how to select a specific column and explode its values using the polars col and explode commands in combination.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_explode.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[id name hobbies]; [1 Mercy [Cycling Knitting]] [2 Bob [Skiing Football]]] | polars into-df | polars select (polars col hobbies | polars explode)\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Status in Nushell\nDESCRIPTION: Commands to check plugin running status after executing a plugin command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\ngstat\nplugin list | where name == gstat | select name is_running\n```\n\n----------------------------------------\n\nTITLE: Using Each to Return Values from Lists in Nushell\nDESCRIPTION: Shows how to properly return values from an input list by using the each command instead of for, which correctly transforms each item and returns the result.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\ndef exponents-of-three [] {\n  [ 0 1 2 3 4 5 ] | each {|x|\n    3 ** $x\n  }\n}\n\nexponents-of-three\n\n# => ╭───┬─────╮\n# => │ 0 │   1 │\n# => │ 1 │   3 │\n# => │ 2 │   9 │\n# => │ 3 │  27 │\n# => │ 4 │  81 │\n# => │ 5 │ 243 │\n# => ╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Comparing Dataframe Commands in Nushell Before and After Input Overloading\nDESCRIPTION: Demonstrates the simplified syntax for dataframe operations in Nushell 0.64 due to input overloading, removing the need for 'dfr' prefix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-06-14-nushell_0_64.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n# Before:\n[[a b]; [1 2] [3 4]] | dfr to-df | dfr drop a\n\n# After:\n[[a b]; [1 2] [3 4]] | to-df | drop a\n```\n\n----------------------------------------\n\nTITLE: Skipping Negative Elements in a List using 'skip while' in Nushell\nDESCRIPTION: Demonstrates how to use 'skip while' to skip elements in a list while they are negative, returning the remaining elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_while.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[-2 0 2 -1] | skip while {|x| $x < 0 }\n```\n\n----------------------------------------\n\nTITLE: Sorting String List\nDESCRIPTION: Example of sorting a list of strings alphabetically.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [betty amy sarah] | sort\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Literal Syntax in Nushell\nDESCRIPTION: Examples of various integer literal syntaxes in Nushell, including decimal, hexadecimal, octal, and binary representations. This snippet showcases the flexibility of integer representation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/int.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n-100\n0\n50\n+50\n0xff\n0o234\n0b10101\n```\n\n----------------------------------------\n\nTITLE: Converting String to Integer in Dataframe\nDESCRIPTION: Example showing how to convert a string column 'b' to integer type using polars integer command with a sample dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_integer.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1, '2']] | polars into-df | polars select (polars col b | polars integer) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Last Command with List Example\nDESCRIPTION: Example showing how to get the last 2 items from a list, returning a formatted table output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/last.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1,2,3] | last 2\n╭───┬───╮\n│ 0 │ 2 │\n│ 1 │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugin Commands Table with Vue.js Directives\nDESCRIPTION: This HTML template renders a table of plugin commands using Vue.js directives. It iterates through the filtered commands array to display command names as links and their usage descriptions. The table provides a structured view of all available plugin commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/plugin.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Converting Record Display Format in Nushell\nDESCRIPTION: Demonstrates converting a record to NUON format for horizontal display instead of the default vertical layout.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_records.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n{\n    name: \"Sam\"\n    rank: 10\n  } | to nuon\n```\n\n----------------------------------------\n\nTITLE: Last Command Single Item Example\nDESCRIPTION: Example demonstrating how to get the last single item from a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/last.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1,2,3] | last\n3\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: This command is used for installing specific Nushell plugins. Users can replace <plugin name> with the actual plugin they wish to install, enabling them to extend Nushell's functionalities with additional features from the community.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-05-16-nushell_0_80.md#2025-04-19_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Range-based For Loop\nDESCRIPTION: Example showing how to iterate over a numeric range using the range syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/for.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> for $x in 1..3 { print $x }\n```\n\n----------------------------------------\n\nTITLE: Trimming Strings with strip\nDESCRIPTION: This snippet shows how to trim whitespace from the beginning and end of a string using the `strip`, `rstrip`, and `lstrip` methods in Python. The `strip` method removes whitespace from both ends, `rstrip` removes whitespace from the right end, and `lstrip` removes whitespace from the left end. These methods are useful for cleaning up text data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n\"strip, rstrip, lstrip\"\n```\n\n----------------------------------------\n\nTITLE: Math Operations Example\nDESCRIPTION: Basic mathematical operations across different languages\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/nushell_map_imperative.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n= 1 + 2\\nmath avg [1 2 3]\n```\n\nLANGUAGE: python\nCODE:\n```\n1 + 2\\nstatistics.mean([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Nu Shell Zip Command Signature\nDESCRIPTION: The basic syntax for the zip command showing required parameters and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/zip.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> zip {flags} (other)\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Displaying Nushell Random Commands\nDESCRIPTION: An HTML table structure that uses Vue.js directives to iterate through the filtered command list and display each command's title as a link and its usage description. The table has two columns for command names and their descriptions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/random.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Converting Directory Listing to Text\nDESCRIPTION: Example showing how to convert directory listing output to text format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_text.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | to text\n\n```\n\n----------------------------------------\n\nTITLE: Using column paths with format command in Nushell\nDESCRIPTION: This example demonstrates the enhanced 'format' command, which now supports using column paths to access nested data in tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-10-nushell_0_11_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nopen Cargo.toml | format \"The edition is {package.edition}\"\n```\n\n----------------------------------------\n\nTITLE: Filtering and Displaying Hash Commands with Vue.js\nDESCRIPTION: A Vue.js script that filters the pages to find hash-related commands from Nushell documentation. It computes a list of commands by filtering pages that contain '/commands/docs/' in their path and have 'hash' in their categories, then sorts them alphabetically.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/hash.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('hash'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using 'uniq' Command in Nushell\nDESCRIPTION: This snippet shows how to use the new 'uniq' command in Nushell to remove duplicate rows from a CSV file, demonstrating its functionality on tabular data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-01-07-nushell-0_8_0.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> open test.csv\n───┬────────────┬───────────┬────────────┬──────\n # │ first_name │ last_name │ rusty_at   │ type\n───┼────────────┼───────────┼────────────┼──────\n 0 │ Andrés     │ Robalino  │ 10/11/2013 │ A\n 1 │ Andrés     │ Robalino  │ 10/11/2013 │ A\n 2 │ Sophia     │ Turner    │ 10/12/2013 │ B\n 3 │ Yehuda     │ Katz      │ 10/11/2013 │ A\n───┴────────────┴───────────┴────────────┴──────\n```\n\nLANGUAGE: shell\nCODE:\n```\n> open test.csv | uniq\n───┬────────────┬───────────┬────────────┬──────\n # │ first_name │ last_name │ rusty_at   │ type\n───┼────────────┼───────────┼────────────┼──────\n 0 │ Andrés     │ Robalino  │ 10/11/2013 │ A\n 1 │ Sophia     │ Turner    │ 10/12/2013 │ B\n 2 │ Yehuda     │ Katz      │ 10/11/2013 │ A\n───┴────────────┴───────────┴────────────┴──────\n```\n\n----------------------------------------\n\nTITLE: Transposition Ignoring Titles\nDESCRIPTION: Example showing table transposition while ignoring original column titles and specifying a new column name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/transpose.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[c1 c2]; [1 2]] | transpose --ignore-titles val\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Version Reporting\nDESCRIPTION: This Rust function implementation demonstrates how plugins can report their versions in Nushell. The function uses the CARGO_PKG_VERSION environment variable to provide the version number.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn version(&self) -> String {\n    env!(\"CARGO_PKG_VERSION\").into()\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Elements While Negative in Nushell\nDESCRIPTION: Demonstrates using 'take while' to select elements from a list as long as they are negative.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_while.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [-1 -2 9 1] | take while {|x| $x < 0 }\n╭───┬────╮\n│ 0 │ -1 │\n│ 1 │ -2 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: Creating File Link in Nushell\nDESCRIPTION: Example of creating a clickable link to a local file with custom display text using the ansi link command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_link.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'file:///file.txt' | ansi link --text 'Open Me!'\n```\n\n----------------------------------------\n\nTITLE: Grouping Data by Multiple Criteria in Nushell\nDESCRIPTION: This snippet demonstrates how to use the 'group-by' command to organize data based on multiple criteria, namely 'color' and 'category'. The output is structured as nested records showing the grouped results, providing an easy way to analyze relationships within the data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nlet data = [\n    [category color name];\n    [fruit red apple]\n    [fruit red strawberry]\n    [vegetable red tomato]\n    [fruit orange orange]\n    [vegetable orange carrot]\n    [vegetable orange pumpkin]\n]\n\n$data | group-by color category\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Variables Menu in Nushell\nDESCRIPTION: This snippet demonstrates how to create a custom menu in Nushell that displays all variables created during a session. It uses a list layout and only searches for values entered after menu activation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_15\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n  ...\n\n  menus = [\n    ...\n    {\n      name: vars_menu\n      only_buffer_difference: true\n      marker: \"# \"\n      type: {\n          layout: list\n          page_size: 10\n      }\n      style: {\n          text: green\n          selected_text: green_reverse\n          description_text: yellow\n      }\n      source: { |buffer, position|\n          scope variables\n          | where name =~ $buffer\n          | sort-by name\n          | each { |row| {value: $row.name description: $row.type} }\n      }\n    }\n    ...\n  ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Counting and Sorting Commit Data in Nushell\nDESCRIPTION: Extends previous commands to count the number of commits per author, sort them, and display the results in descending order. Uses upsert with length to count commits and sort-by with reverse to order the results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_21\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 365day)) | group-by name | transpose | upsert column1 {|c| $c.column1 | length} | sort-by column1 | reverse\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Types with 'all' Command in Nushell\nDESCRIPTION: Shows how to use the 'all' command to check if every item in a list is a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/all.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [foo bar 2 baz] | all {|| ($in | describe) == 'string' }\n```\n\n----------------------------------------\n\nTITLE: Filtering Nushell Commands in Vue.js\nDESCRIPTION: This Vue.js script filters pages to display Nushell commands categorized as filters. It processes page data to extract commands from specific paths and with the 'filters' category, then sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/filters.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('filters'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Range Command in Nushell\nDESCRIPTION: Demonstrates the new range functionality in Nushell for selecting specific rows from a table output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-18-nushell-0_7_0.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls | range 3..5\n```\n\n----------------------------------------\n\nTITLE: Basic to xml Command Signature in Nushell\nDESCRIPTION: The command signature for the 'to xml' command in Nushell, showing the basic syntax with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_xml.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> to xml {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting Mixed Case String to Lowercase in Nushell\nDESCRIPTION: Example showing how to convert a mixed case string 'TESTa' to lowercase using the str downcase command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_downcase.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'TESTa' | str downcase\ntesta\n```\n\n----------------------------------------\n\nTITLE: Using config use-colors Command in Nushell\nDESCRIPTION: Command signature for retrieving color output configuration. Takes no input and returns a boolean value indicating whether colors should be used. This command properly handles the 'auto' setting and relevant environment variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_use-colors.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> config use-colors {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Type-checked Command in Nushell\nDESCRIPTION: Example demonstrating Nushell's runtime pipeline input type checking feature, where a command that accepts only integer input will throw an error when receiving a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndef cool-int-print []: int -> nothing {\n  print $\"my cool int is ($in)\"\n}\n\n1 | cool-int-print\n# => my cool int is 1\n\n\"evil string\" | cool-int-print\n# => Error: nu::parser::input_type_mismatch\n# =>\n# =>   × Command does not support string input.\n# =>    ╭─[entry #12:1:17]\n# =>  1 │ \"evil string\" | cool-int-print\n# =>    ·                 ───────┬──────\n# =>    ·                        ╰── command doesn't support string input\n# =>    ╰────\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in Nushell\nDESCRIPTION: Demonstrates creating a simple list of names that gets displayed as a table\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\n[Sam Fred George]\n# => ╭───┬────────╮\n# => │ 0 │ Sam    │\n# => │ 1 │ Fred   │\n# => │ 2 │ George │\n# => ╰───┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Hyphenated String to PascalCase in Nushell\nDESCRIPTION: Example showing how to convert a hyphenated multi-word string to PascalCase using the str pascal-case command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_pascal-case.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'this-is-the-first-case' | str pascal-case\nThisIsTheFirstCase\n```\n\n----------------------------------------\n\nTITLE: Integer Division in Nushell\nDESCRIPTION: Demonstrates integer division and type checking using the 'describe' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n10 / 2\n# => 5\n5 | describe\n# => int\n```\n\n----------------------------------------\n\nTITLE: Add Member in Nushell and PowerShell\nDESCRIPTION: The `insert` command in Nushell is equivalent to `Add-Member` in PowerShell for adding members to an object.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Using Flag Abbreviations in Custom Commands\nDESCRIPTION: Shows how to define a shorthand version of a flag for more convenient command usage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [\n  name: string\n  --age (-a): int\n] {\n  echo $name $age\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Nushell Plugin in an Active Session\nDESCRIPTION: Command to load a newly installed plugin into an already running Nushell session without restarting the shell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n> plugin use len # the name of the plugin (without `nu_plugin_`)\n```\n\n----------------------------------------\n\nTITLE: Reversing a Table in Nushell\nDESCRIPTION: Example demonstrating how to reverse a table containing records with 'a' field values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reverse.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> [{a: 1} {a: 2}] | reverse\n╭───┬───╮\n│ # │ a │\n├───┼───┤\n│ 0 │ 2 │\n│ 1 │ 1 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Hooks with String Code\nDESCRIPTION: This example combines conditional hooks with string-based code definitions. It shows how to define a hook that defines or hides a command (`foo`) based on the current directory. The `before` and `after` variables are used in the condition to determine whether to define or hide the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks {\n    env_change: {\n        PWD: [\n            {\n                condition: {|_, after| $after == /some/path/to/directory }\n                code: 'def foo [] { print \\\"foo\\\" }'\n            }\n            {\n                condition: {|before, _| $before == /some/path/to/directory }\n                code: 'hide foo'\n            }\n        ]\n    }\n})\"\n```\n\n----------------------------------------\n\nTITLE: URL Build Query with List Values\nDESCRIPTION: This example illustrates how to use the `url build-query` command with list values in the parameter record. It demonstrates how the command transforms a record with a list as a value into a URL query string with repeated keys for each element in the list. This is a new capability added to the `url build-query` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n\"{ a: [1 2], b: 3 } | url build-query\n# a=1&a=2&b=3\"\n```\n\n----------------------------------------\n\nTITLE: Preserving Environment in Hooks\nDESCRIPTION: This example demonstrates how environment variables defined within a hook block are preserved after the hook executes. This behavior is similar to using `def --env` and allows hooks to modify the environment for subsequent commands. The `SPAM` environment variable is defined in the `pre_prompt` hook and is then accessible outside of the hook.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks {\n    pre_prompt: { $env.SPAM = \\\"eggs\\\" }\n})\n\n$env.SPAM\n# => eggs\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Built-in Variables in Nushell\nDESCRIPTION: Commands to display environment variables, path, and configuration in Nushell. Shows syntax for both pre-0.7.2 and post-0.7.2 versions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho $nu:env\necho $nu:path\necho $nu:config\n```\n\nLANGUAGE: shell\nCODE:\n```\necho $nu.env\necho $nu.path\necho $nu.config\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Environment Commands in Vue.js\nDESCRIPTION: This Vue.js component filters pages to find environment-related Nushell commands, sorts them alphabetically, and computes a list for display. It relies on a 'pages' import, likely provided by the site's build process.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/env.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('env'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Viewer Commands in Vue.js\nDESCRIPTION: This Vue.js script filters pages to include only viewer commands, sorts them alphabetically, and prepares them for display in a table. It relies on a 'pages' import, likely provided by the build system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/viewers.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('viewers'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dropping Items from Lists in NuShell\nDESCRIPTION: This NuShell code snippet demonstrates the use of the 'drop' command to remove items from the end of a list. The number of items to remove is specified by the 'rows' parameter. If no argument is provided, it defaults to removing one item. The input and output are both lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3] | drop\n╭───┬───╮\n│ 0 │ 0 │\n│ 1 │ 1 │\n│ 2 │ 2 │\n╰───┴───╯\n\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3] | drop 0\n╭───┬───╮\n│ 0 │ 0 │\n│ 1 │ 1 │\n│ 2 │ 2 │\n│ 3 │ 3 │\n╰───┴───╯\n\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3] | drop 2\n╭───┬───╮\n│ 0 │ 0 │\n│ 1 │ 1 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Database Commands Table with Vue.js and HTML\nDESCRIPTION: This HTML snippet creates a table to display database commands. It uses Vue.js directives to iterate over the filtered commands, creating a row for each with a link to the command's documentation and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/database.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing All Occurrences using Regular Expression in Nushell\nDESCRIPTION: Demonstrates using regex with the --all flag to replace multiple occurrences in a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_replace.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 'abc abc abc' | str replace --all --regex 'b' 'z'\nazc azc azc\n```\n\n----------------------------------------\n\nTITLE: Rotate Table Clockwise and Rename Columns in Nushell\nDESCRIPTION: This example illustrates rotating a table clockwise and simultaneously renaming the columns using the `rotate` command in Nushell. It demonstrates how to customize the column names after rotation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rotate.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\n> [[a b]; [1 2]] | rotate col_a col_b\n╭───┬───────┬───────╮\n│ # │ col_a │ col_b │\n├───┼───────┼───────┤\n│ 0 │     1 │ a     │\n│ 1 │     2 │ b     │\n╰───┴───────┴───────╯\n\n```\n\n----------------------------------------\n\nTITLE: Using Read Command in Nushell\nDESCRIPTION: Example of using the new read command to parse structured text into tables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nopen .editorconfig | read \"{variable} = {value}\"\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with ls Command in Nushell\nDESCRIPTION: Demonstrates basic directory listing and glob pattern matching for file selection in Nushell\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Regex Vergleich in Nushell\nDESCRIPTION: Dieses Code-Snippet zeigt die Verwendung der `=~` und `!~` Operatoren für Regex-Vergleiche in Nushell. Es veranschaulicht, wie man überprüft, ob ein Text in einem anderen enthalten ist oder nicht, und wie man dies in einem `where` Befehl verwendet.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/operators.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n```nu\nfoobarbaz =~ bar # gibt true zurück\nfoobarbaz !~ bar # gibt false zurück\nls | where name =~ ^nu # Gibt alle Dateien zurück, deren Namen mit \"nu\" beginnen.\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithm of 100 with Base 10 in Nushell\nDESCRIPTION: Demonstrates how to use the 'math log' command to calculate the logarithm of 100 with base 10. The expected output is 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_log.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 100 | math log 10\n2\n```\n\n----------------------------------------\n\nTITLE: Converting Float to Rounded Integer String in Nushell\nDESCRIPTION: Shows how to convert a floating-point number to a string rounded to the nearest integer by setting decimals to 0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 1.7 | into string --decimals 0\n2\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Data with get Command in Nushell\nDESCRIPTION: Shows how to use the get command to access the host information from the sys command output, demonstrating Nushell's ability to navigate nested structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\nsys | get host\n# => ──────────┬─────────────────────────────────────────────\n# =>  name     │ Linux\n# =>  release  │ 5.3.0-1019-azure\n# =>  version  │ #20-Ubuntu SMP Fri Mar 27 23:54:23 UTC 2020\n# =>  hostname │ lifeless\n# =>  arch     │ x86_64\n# =>  uptime   │ 8:03:47:32\n# =>  sessions │ [table 2 rows]\n# => ──────────┴─────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Rolling Table Rows Example in Nu Shell\nDESCRIPTION: Demonstrates how to roll up rows in a table using the roll up command. The example shows a table with three rows being rolled up, where the first row moves to the bottom and other rows shift up.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_up.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4] [5 6]] | roll up\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 3 │ 4 │\n│ 1 │ 5 │ 6 │\n│ 2 │ 1 │ 2 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Rendering Filtered Nushell Commands in HTML Table\nDESCRIPTION: This HTML table structure displays the filtered Nushell commands. It uses Vue.js directives to dynamically render rows for each command, showing the command name as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/filters.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering Viewer Commands Table in Vue.js Template\nDESCRIPTION: This HTML template uses Vue.js directives to render a table of viewer commands. It iterates over the filtered and sorted commands, displaying each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/viewers.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: timeit Command Signature in Nushell\nDESCRIPTION: Shows the command signature for the timeit command, which accepts flags and a command parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/timeit.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> timeit {flags} (command)\n```\n\n----------------------------------------\n\nTITLE: Creating Dummy Variables from Series\nDESCRIPTION: Example demonstrating how to create dummy variables from a simple series of numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_dummies.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 2 3 3] | polars into-df | polars dummies\n```\n\n----------------------------------------\n\nTITLE: Rolling Record Columns Left\nDESCRIPTION: Example showing how to roll columns of a record to the left, shifting the position of key-value pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_left.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> {a:1 b:2 c:3} | roll left\n╭───┬───╮\n│ b │ 2 │\n│ c │ 3 │\n│ a │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Grouping Digits in into String Command\nDESCRIPTION: The `into string` command can now format integers with the `--group-digits` flag, which uses the system locale digit separator to group digits together.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Periodic Command Execution in Nushell\nDESCRIPTION: Provides an alternative approach for running a command at regular intervals using a loop and sleep command, which is different from the file-watching functionality of 'watch'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/watch.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> loop { command; sleep duration }\n```\n\n----------------------------------------\n\nTITLE: Saving to YAML files with to yml\nDESCRIPTION: Data can now be saved in YAML format using either `to yaml` or `to yml` commands. This flexibility improves the usability of file outputs in various contexts.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [\"1\" \"2\"]] | to yml\n- foo: '1'\n  bar: '2'\n```\n\nLANGUAGE: nu\nCODE:\n```\n> [[foo bar]; [\"1\" \"2\"]] | save test.yml\n```\n\n----------------------------------------\n\nTITLE: Formatting Output with to nuon Command\nDESCRIPTION: The 'to nuon' command formats output using indentation for better readability, via '--indent' and '--tabs' options. The compact single-line output remains available using the '--raw' flag. The options aid in manipulating the appearance of NUON data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-04-04-nushell_0_78.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3] | to nuon --indent 4\n[\n    1,\n    2,\n    3\n]\n```\n\nLANGUAGE: nu\nCODE:\n```\n> {date: 2000-01-01, data: [1 [2 3] 4.56]} | to nuon --indent 4\n{\n    date: 2000-01-01T00:00:00+00:00,\n    data: [\n        1,\n        [\n            2,\n            3\n        ],\n        4.56\n    ]\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\n> {date: 2000-01-01, data: [1 [2 3] 4.56]} | to nuon --indent 4 --raw\n{date: 2000-01-01T00:00:00+00:00, data: [1, [2, 3], 4.56]}\n```\n\n----------------------------------------\n\nTITLE: Endian-specific Binary AND Operation\nDESCRIPTION: Demonstrates bitwise AND operation with specified big-endian byte ordering on binary data of different lengths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_and.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[c0 ff ee] | bits and 0x[ff] --endian big\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Stack Commands Usage in Nushell\nDESCRIPTION: Examples showing how to use the dirs command to list directories and how cd only changes the active directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/directory_stack.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ncd ~\nuse std/dirs\ndirs\n# => ╭───┬────────┬─────────────────────────────────╮\n# => │ # │ active │              path               │\n# => ├───┼────────┼─────────────────────────────────┤\n# => │ 0 │ true   │ /home/myuser                    │\n# => ╰───┴────────┴─────────────────────────────────╯\n\ncd ~/src/repo/nushell\ndirs\n# => ╭───┬────────┬─────────────────────────────────╮\n# => │ # │ active │              path               │\n# => ├───┼────────┼─────────────────────────────────┤\n# => │ 0 │ true   │ /home/myuser/repo/nushell       │\n# => ╰───┴────────┴─────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Backslash Escape Example\nDESCRIPTION: Shows how backslash escaping works to include commas in the output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'A{B\\,,C}' | str expand\n```\n\n----------------------------------------\n\nTITLE: Leveraging command_not_found Hook in Arch Linux\nDESCRIPTION: Demonstrates using the `command_not_found` hook with the `pkgfile` command to locate package-owned commands on Arch Linux, aiding users in finding required packages with enhanced shell feedback.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/hooks.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    ...other config...\n\n    hooks: {\n        ...other hooks...\n\n        command_not_found: {\n            |cmd_name| (\n                try {\n                    let pkgs = (pkgfile --binaries --verbose $cmd_name)\n                    if ($pkgs | is-empty) {\n                        return null\n                    }\n                    (\n                        $\"(ansi $env.config.color_config.shape_external)($cmd_name)(ansi reset) \" +\n                        $\"may be found in the following packages:\\n($pkgs)\"\n                    )\n                }\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins\nDESCRIPTION: Example of listing all installed plugins.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> plugin list\n```\n\n----------------------------------------\n\nTITLE: Split List with Regex\nDESCRIPTION: Example showing how to split a list using a regular expression pattern '(b|e)' as separator.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/split_list.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [a, b, c, d, a, e, f, g] | split list --regex '(b|e)'\n```\n\n----------------------------------------\n\nTITLE: Stopping All Plugins\nDESCRIPTION: Example showing how to stop all active plugins using a list operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_stop.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin list | each { |p| plugin stop $p.name }\n```\n\n----------------------------------------\n\nTITLE: Listing Weekly Nushell Updates in Markdown\nDESCRIPTION: This markdown snippet lists recent contributions to the Nushell project, including new features, bug fixes, and documentation improvements. It covers updates from various contributors across different aspects of the project.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-06-twin0063.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #63\n\n- fdncred added support for [arbitrary ansi sequences](https://github.com/nushell/nushell/pull/2719), added a bugfix for [pathexts with ';'](https://github.com/nushell/nushell/pull/2723), added a [`selector` plugin for web scraping](https://github.com/nushell/nushell/pull/2725)\n- jonathandturner release [0.22](https://github.com/nushell/nushell/pull/2726), removed [a recursive dependency](https://github.com/nushell/nushell/pull/2727)\n- LhKipp normalized the [naming to Nushell](https://github.com/nushell/nushell/pull/2728)\n- JosephTLyons fixed a [bug with `to md`](https://github.com/nushell/nushell/pull/2729)\n- mhmdanas improved [code block reuse in the book](https://github.com/nushell/book/pull/141)\n```\n\n----------------------------------------\n\nTITLE: Configuring VuePress Homepage for Nushell\nDESCRIPTION: YAML frontmatter configuration that sets up the main landing page for Nushell's website. Defines the hero section, call-to-action button, and three key feature sections highlighting Nushell's capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/tr/README.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhome: true\nheroImage: null\nheroText: Nushell\ntagline: A new type of shell.\nactionText: Get Started →\nactionLink: /tr/book/\nfeatures:\n  - title: Pipelines to control any OS\n    details: Nu works on Linux, macOS, and Windows. Learn it once, then use it anywhere.\n  - title: Everything is data\n    details: Nu pipelines use structured data so you can safely select, filter, and sort the same way every time. Stop parsing strings and start solving problems.\n  - title: Powerful plugins\n    details: It's easy to extend Nu using a powerful plugin system.\n---\n```\n\n----------------------------------------\n\nTITLE: Finding Executables with shutil\nDESCRIPTION: This snippet demonstrates how to find the location of an executable file using `shutil.which` in Python. The `shutil.which` function takes the name of an executable as input and returns the full path to the executable if it's found in the system's PATH. This is useful for locating command-line tools and utilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n\"shutil.which\"\n```\n\n----------------------------------------\n\nTITLE: Installing RedHat/Fedora & Rocky Linux dependencies for Nushell\nDESCRIPTION: This script configures the yum package manager to use the Gemfury repository for Nushell. It then installs Nushell using dnf, after adding the repository configuration file and importing the GPG key.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"echo \\\"[gemfury-nushell]\\nname=Gemfury Nushell Repo\\nbaseurl=https://yum.fury.io/nushell/\\nenabled=1\\ngpgcheck=0\\ngpgkey=https://yum.fury.io/nushell/gpg.key\\\" | sudo tee /etc/yum.repos.d/fury-nushell.repo\nsudo dnf install -y nushell\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Platform Commands Table with Vue.js and HTML\nDESCRIPTION: This HTML snippet, enhanced with Vue.js directives, creates a table to display platform commands. It iterates over the filtered and sorted commands, rendering each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/platform.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Manual Testing of Nushell Plugin with Input in Rust\nDESCRIPTION: Demonstrates how to create manual tests for Nushell plugins, including handling input and evaluating commands using the PluginTest structure from nu-plugin-test-support.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn test_fib_on_input() -> Result<(), ShellError> {\n    use nu_plugin_test_support::PluginTest;\n    use nu_protocol::{IntoPipelineData, Span};\n\n    // this would be identical to `20 | fib`, but anything can be passed,\n    // including a stream\n    let result = PluginTest::new(\"fib\", FibPlugin.into())?\n        .eval_with(\"fib\", Value::test_int(20).into_pipeline_data())?\n        .into_value(Span::test_data());\n\n    assert_eq!(Value::test_int(6765), result);\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Setting Environment Variables with Shortcut in Nushell\nDESCRIPTION: This snippet shows a shorthand notation for temporarily setting environment variables similar to Bash. The syntax `FOO=BAR echo $nu.env.FOO` temporarily sets the `FOO` environment variable to `BAR` before executing the `echo` command, which then outputs the variable's value within that context.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/environment.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n# => FOO=BAR echo $nu.env.FOO\n# => BAR\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Database Commands with Vue.js\nDESCRIPTION: This Vue.js script filters pages to include only database-related commands, then sorts them alphabetically by title. It's used to populate the command list for the table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/database.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('database'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Skipping Rows in Nushell Tables\nDESCRIPTION: Using the 'skip' command to omit the first 2 rows from a filtered result set, allowing for precise data selection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nls | sort-by size | first 5 | skip 2\n# => ---+---------+------+----------+--------+------------+------------\n# =>  # | name    | type | readonly | size   | accessed   | modified\n# => ---+---------+------+----------+--------+------------+------------\n# =>  0 | edit.rs | File |          | 2.7 KB | 2 days ago | 2 days ago\n# =>  1 | sum.rs  | File |          | 3.0 KB | 2 days ago | 2 days ago\n# =>  2 | tree.rs | File |          | 3.0 KB | 2 days ago | 2 days ago\n# => ---+---------+------+----------+--------+------------+------------\n```\n\n----------------------------------------\n\nTITLE: Getting Command Help in Nushell\nDESCRIPTION: Demonstrates using the help command to get detailed information about Nushell commands, showing the example of config command with its subcommands and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nhelp config\n# => Configuration management.\n# => \n# => Usage:\n# =>   > config <subcommand> {flags}\n# => \n# => Subcommands:\n# =>   config get - Gets a value from the config\n# =>   config set - Sets a value in the config\n# =>   config set_into - Sets a value in the config\n# =>   config clear - clear the config\n# =>   config load - Loads the config from the path given\n# =>   config remove - Removes a value from the config\n# =>   config path - return the path to the config file\n# => \n# => Flags:\n# =>   -h, --help: Display this help message\n```\n\n----------------------------------------\n\nTITLE: Loading Shell Aliases from Standard Library\nDESCRIPTION: Code snippet showing how to load the std/dirs shells-aliases module to maintain compatibility with the previously auto-loaded shell navigation aliases that are now deprecated. This prepares for the 0.100.0 release where these won't be loaded automatically.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\nuse std/dirs shells-aliases *\n```\n\n----------------------------------------\n\nTITLE: Removing pub from fn eval_element_with_input in eval.rs\nDESCRIPTION: This snippet represents a change made to the `eval.rs` file within the Nushell project. The modification involves removing the `pub` keyword from the function definition `eval_element_with_input`. This change likely restricts the visibility of this function, making it no longer accessible from outside its module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-06-twin0215.md#2025-04-19_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\neval.rs to remove pub from fn eval_element_with_input\n```\n\n----------------------------------------\n\nTITLE: Rendering Nushell Commands Table in HTML with Vue.js\nDESCRIPTION: This HTML template uses Vue.js directives to render a table of Nushell commands. It iterates over the 'commands' computed property to display each command's name as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/command_reference.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n  <tr v-for=\"command in commands\">\n   <td><a :href=\"command.path\"><code>{{ command.title }}</code></a></td>\n   <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Filtering Date Commands with Vue.js\nDESCRIPTION: A Vue.js component that computes a filtered list of date-related commands from the pages data. It filters pages that are in the commands/docs path and have the 'date' category, then sorts them alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/date.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('date'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Elements in a List\nDESCRIPTION: This snippet illustrates how to skip a certain number of elements from the beginning of a list using slicing in Python. The `list[x:]` expression creates a new list that contains all elements of the original list starting from index `x`. This is a concise way to extract a sublist from a larger list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\"list[x:]\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Values to Indices with 'all' Command in Nushell\nDESCRIPTION: Illustrates using the 'all' command to check if all values in a list are equal to twice their index.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/all.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [0 2 4 6] | enumerate | all {|i| $i.item == $i.index * 2 }\n```\n\n----------------------------------------\n\nTITLE: Inserting into Nested Path in Nushell\nDESCRIPTION: Shows insertion into a nested path, creating new values as needed. The command inserts 'value' into a specified nested position within a list of records. It employs a nested list structure and demonstrates the flexibility of the 'insert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/insert.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> [{} {a: [{}]}] | insert a.0.b \"value\"\n╭───┬───────────────╮\n│ # │       a       │\n├───┼───────────────┤\n│ 0 │ ╭───┬───────╮ │\n│   │ │ # │   b   │ │\n│   │ ├───┼───────┤ │\n│   │ │ 0 │ value │ │\n│   │ ╰───┴───────╯ │\n│ 1 │ ╭───┬───────╮ │\n│   │ │ # │   b   │ │\n│   │ ├───┼───────┤ │\n│   │ │ 0 │ value │ │\n│   │ ╰───┴───────╯ │\n╰───┴───────────────╯\n```\n\n----------------------------------------\n\nTITLE: Encoding Bool Value in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of encoding a boolean value in JSON format for the Nushell plugin protocol, including span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Bool\": {\n    \"val\": true,\n    \"span\": {\n      \"start\": 4040,\n      \"end\": 4044\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping First Three Rows with Names\nDESCRIPTION: Example showing how to drop the first, second, and third rows from a list containing mixed data types.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [sam,sarah,2,3,4,5] | drop nth 0 1 2\n╭───┬───╮\n│ 0 │ 3 │\n│ 1 │ 4 │\n│ 2 │ 5 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Table of Hash Commands in HTML\nDESCRIPTION: HTML table structure that displays hash commands dynamically using Vue.js directives. The table iterates through the filtered commands and displays each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/hash.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Parsing Cargo.toml File\nDESCRIPTION: This shell snippet likely reads the contents of a `Cargo.toml` file and uses `from toml` to parse the TOML format into structured data that Nu can understand. This allows the user to interact with the Cargo.toml data as if it were a table, accessing specific fields and values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/loading_data.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnu -c 'open Cargo.lock | from toml'\n```\n\n----------------------------------------\n\nTITLE: Viewing System Information with Row Rotation\nDESCRIPTION: Demonstrates the new row rotation feature that automatically rotates rows with many columns for better display, shown using the sys command output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-31-nushell_0_12_0.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n❯ sys\n─────────┬─────────────────────────────────────────\n host    │ [row 7 columns]\n cpu     │ [row cores current ghz max ghz min ghz]\n disks   │ [table 9 rows]\n mem     │ [row free swap free swap total total]\n temp    │ [table 8 rows]\n net     │ [table 4 rows]\n battery │ [table 1 rows]\n─────────┴─────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Executing 'keybindings default' Command in Nushell\nDESCRIPTION: This example demonstrates how to use the 'keybindings default' command in Nushell to get a list of default keybindings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_default.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> keybindings default\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Commands\nDESCRIPTION: An HTML table structure with Vue.js directives that displays the filtered commands. Uses v-for to iterate through commands and creates links to command documentation pages with their descriptions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/misc.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Checking Row Status with 'all' Command in Nushell\nDESCRIPTION: Demonstrates using the 'all' command to check if each row's status in a table is the string 'UP'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/all.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[status]; [UP] [UP]] | all {|el| $el.status == UP }\n```\n\n----------------------------------------\n\nTITLE: Rotate Table Counter-Clockwise in Nushell\nDESCRIPTION: This example shows how to rotate a table counter-clockwise using the `--ccw` flag with the `rotate` command in Nushell. The resulting table's columns are reordered to represent the counter-clockwise rotation of the original table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rotate.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n\n> [[a b]; [1 2]] | rotate --ccw\n╭───┬─────────┬─────────╮\n│ # │ column0 │ column1 │\n├───┼─────────┼─────────┤\n│ 0 │ b       │       2 │\n│ 1 │ a       │       1 │\n╰───┴─────────┴─────────╯\n\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Dataframe Commands\nDESCRIPTION: HTML table structure with Vue directives to display the filtered dataframe commands. Uses v-for to iterate through commands and displays command titles as links with their usage descriptions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/dataframe.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Polars Dummies Command Signature\nDESCRIPTION: Command signature showing the basic syntax and available flags for the polars dummies command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_dummies.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars dummies {flags}\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting for Found Externals in Nushell REPL\nDESCRIPTION: This configuration snippet enables syntax highlighting for external commands found in the Nushell REPL by setting custom colors for various command types. It requires configuring `highlight_resolved_externals` to `true` in `config.nu`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n  shape_internalcall: cyan_bold               # internal commands that are found will be this color\n  shape_external: darkorange                  # external \"commands\" that do not exist, will be this color\n  shape_external_resolved: light_yellow_bold  # external commands that are found with `which`, will be this color\n```\n\n----------------------------------------\n\nTITLE: Upgrading to new plugin registry format in Nushell\nDESCRIPTION: This code snippet demonstrates how to work with the new `msgpackz` format for the plugin registry file in Nushell. The previous format used `register` commands, which are now deprecated. The new format allows for more efficient loading and handling of plugin metadata.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin use gstat\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Platform Commands with Vue.js\nDESCRIPTION: This Vue.js script filters pages to find platform-related command documentation, then sorts them alphabetically by title. It's used to populate a dynamic table of commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/platform.md#2025-04-19_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('platform'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: NuShell Multiline Pipeline: Date Parsing\nDESCRIPTION: This NuShell multiline pipeline parses a date string \"01/22/2021\" into its month, day, and year components and then extracts the year.  The `parse` command uses the format string '{month}/{day}/{year}'. The pipeline is enclosed in parentheses to allow for multi-line formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/pipeline.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n(\n    \"01/22/2021\" |\n    parse \"{month}/{day}/{year}\" |\n    get year\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Week Start Day in Nushell Calendar\nDESCRIPTION: Example showing how to customize the first day of the week in the calendar output using the --week-start flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cal.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> cal --week-start mo\n\n```\n\n----------------------------------------\n\nTITLE: Single Foreground Start Color Gradient in Nushell\nDESCRIPTION: Example showing gradient with only start color specified, end color defaults to black.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_gradient.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff'\n```\n\n----------------------------------------\n\nTITLE: Handling Current Directory in Nushell Plugins\nDESCRIPTION: Illustrates how to properly handle the current directory in Nushell plugins. This is important for plugins that work with filesystem paths to ensure correct handling of relative paths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nuse std::path::Path;\nuse nu_protocol::Spanned;\n\nlet relative_path: Spanned<String> = call.req(0)?;\nlet absolute_path = Path::new(&engine.get_current_dir()?).join(&provided_path.item);\n\n// For example:\nif absolute_path.exists() {\n    return Err(\n        LabeledError::new(format!(\"{} does not exist\", absolute_path.display()))\n            .with_label(\"file not found\", relative_path.span)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Keys from a Dictionary\nDESCRIPTION: This snippet demonstrates how to select specific keys from a dictionary using a dictionary comprehension in Python.  The `k:dict[k] for k in keylist` expression creates a new dictionary containing only the keys present in `keylist`. This is a concise way to filter a dictionary based on a list of keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\"{k:dict[k] for k in keylist}\"\n```\n\n----------------------------------------\n\nTITLE: Listing Directories in Nu\nDESCRIPTION: Lists the directories in the current directory. Uses the 'ls' command combined with the 'where' command to filter the output based on the 'type' column, selecting only entries where the type is 'Dir'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\"ls | where type == Dir\"\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Hash from String in Nushell (Hex Output)\nDESCRIPTION: Example of creating an MD5 hash from a string with default hexadecimal output. This demonstrates the basic usage of the command with alphabetic input.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_md5.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'abcdefghijklmnopqrstuvwxyz' | hash md5\nc3fcd3d76192e4007dfb496cca67e13b\n```\n\n----------------------------------------\n\nTITLE: Basic String Expansion Command Signature\nDESCRIPTION: The basic command signature for str expand with optional path flag for handling backslashes in paths.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str expand {flags} \n```\n\n----------------------------------------\n\nTITLE: Table Transposition with Custom Column Names\nDESCRIPTION: Example demonstrating table transposition with user-specified column names 'key' and 'val'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/transpose.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[c1 c2]; [1 2]] | transpose key val\n```\n\n----------------------------------------\n\nTITLE: Sorting directory contents by size (reverse) in Nushell\nDESCRIPTION: This snippet shows how to sort the output of the `ls` command by size in reverse order using the `sort-by` command. It highlights Nushell's ability to pipe data between commands for sophisticated data manipulation without needing command-line arguments for `ls` itself.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\tls | sort-by size -r\n\n```\n\n----------------------------------------\n\nTITLE: Listing Visible Files in Subdirectory\nDESCRIPTION: Example of using the 'ls' command to list visible files in a specific subdirectory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> ls subdir\n```\n\n----------------------------------------\n\nTITLE: Combine Columns Range 0 to 1 - Nushell\nDESCRIPTION: Example showing how to combine specific columns using a range from 0 to 1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/detect_columns.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> $'c1 c2 c3 c4 c5(char nl)a b c d e' | detect columns --combine-columns 0..1\n```\n\n----------------------------------------\n\nTITLE: Activating an Overlay in Nushell\nDESCRIPTION: Demonstrates how to use the 'overlay use' command to create and activate an overlay from the spam module. Shows the commands and environment variables that become available after activating the overlay.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\noverlay use spam\n\nfoo\n# => foo\n\nbar\n# => bar\n\n$env.BAZ\n# => baz\n\noverlay list\n# => ───┬──────\n# =>  0 │ zero\n# =>  1 │ spam\n# => ───┴──────\n```\n\n----------------------------------------\n\nTITLE: Computing Square Roots of List Elements\nDESCRIPTION: Example demonstrating how to compute square roots of multiple numbers in a list using the math sqrt command. Returns a table with float values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_sqrt.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [9 16] | math sqrt\n╭───┬──────╮\n│ 0 │ 3.00 │\n│ 1 │ 4.00 │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Prepending to a deque\nDESCRIPTION: This example demonstrates how to prepend an element to a deque (double-ended queue) using `appendleft` in Python. Deques are useful when you need efficient insertion and deletion at both ends of a sequence.  This provides O(1) time complexity for prepend operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"deque.appendleft\"\n```\n\n----------------------------------------\n\nTITLE: Describing String Type - Nushell\nDESCRIPTION: Example showing how to describe a simple string value type.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/describe.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 'hello' | describe\nstring\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command with Multi-line Type Annotations in Nushell\nDESCRIPTION: Example of a custom command with input/output type annotations that extend across multiple lines, demonstrating the new parsing capabilities in Nushell 0.93.0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"into bool\" []: [\n  int -> bool\n  string -> bool\n] {\n  match $in {\n    0 => false\n    1 => true\n    \"false\" => false\n    \"true\" => true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to Filesize\nDESCRIPTION: Shows how to convert a simple string value to a filesize format. The string '2' is converted to '2 B' (2 bytes).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_filesize.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'2' | into filesize\n```\n\n----------------------------------------\n\nTITLE: Getting Current Working Directory with os\nDESCRIPTION: This snippet demonstrates how to retrieve the current working directory using `os.getcwd` in Python. This function returns a string representing the absolute path of the current working directory. It's a common operation when you need to know the location of your program's execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"os.getcwd\"\n```\n\n----------------------------------------\n\nTITLE: Hiding an Overlay in Nushell\nDESCRIPTION: This snippet illustrates how to deactivate an overlay using the 'overlay hide' command, effectively removing its definitions from the current scope and demonstrating the error produced when trying to use a command from the hidden overlay.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n(spam)> overlay hide spam\n\n(zero)> foo\nError: Can't run executable...\n\n(zero)> overlay list\n───┬──────\n 0 │ zero\n───┴──────\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Elements with set\nDESCRIPTION: This snippet demonstrates how to find the unique elements in a sequence using the `set` data structure in Python.  Converting a sequence to a `set` automatically removes duplicate elements, leaving only the unique values.  This is an efficient way to determine the distinct values in a collection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n\"set\"\n```\n\n----------------------------------------\n\nTITLE: Listing Nushell Plugins in Shell\nDESCRIPTION: This snippet demonstrates how to list and sort Nushell plugins using the 'ls' and 'sort-by' commands in the Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-01-07-nushell-0_8_0.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ ls nu_plugin_* | sort-by name | get name\n────┬──────────────────────\n #  │ <value>\n────┼──────────────────────\n  0 │ nu_plugin_average\n  1 │ nu_plugin_binaryview\n  2 │ nu_plugin_fetch\n  3 │ nu_plugin_inc\n  4 │ nu_plugin_match\n  5 │ nu_plugin_post\n  6 │ nu_plugin_ps\n  7 │ nu_plugin_str\n  8 │ nu_plugin_sum\n  9 │ nu_plugin_sys\n 10 │ nu_plugin_textview\n 11 │ nu_plugin_tree\n────┴──────────────────────\n```\n\n----------------------------------------\n\nTITLE: Accessing constants when importing entire module\nDESCRIPTION: This example shows how to access constants when importing an entire module using record access. It imports `std/math` and accesses `PI` constant using `$math.PI`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n# Importing entire module - Record access\nuse std/math\n$math.PI\n# => 3.141592653589793\n\n$math\n# => ╭───────┬──────╮\n# => │ GAMMA │ 0.58 │\n# => │ E     │ 2.72 │\n# => │ PI    │ 3.14 │\n# => │ TAU   │ 6.28 │\n# => │ PHI   │ 1.62 │\n# => ╰───────┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Nushell Commands in Vue.js\nDESCRIPTION: This Vue.js component filters pages containing Nushell command documentation and sorts them alphabetically. It computes a 'commands' property that can be used in the template to render a table of commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/command_reference.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.indexOf('/commands/docs/') >= 0)\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prepending List to String\nDESCRIPTION: Example demonstrating prepending a list containing a single string to another string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/prepend.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> \"a\" | prepend [\"b\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell Prompt and Indicator Settings\nDESCRIPTION: This snippet demonstrates setting up and customizing the Nushell prompt using environment variables such as `PROMPT_COMMAND` and `PROMPT_INDICATOR`. It details how to involve a dynamic date and present working directory display in the prompt, along with configuring visual indicators for inserting and normal modes or changing symbols based on user preference.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n$env.PROMPT_COMMAND = { $(\"(date now | format date '\\'%m/%d/%Y %I:%M:%S%.3f'\\'): (pwd | path basename)\") }\n$env.PROMPT_INDICATOR = \"> \"\n```\n\nLANGUAGE: nu\nCODE:\n```\nconfig {\n    render_right_prompt_on_last_line = true\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Transposing Grouped Commit Data in Nushell\nDESCRIPTION: Shows how to transpose the grouped commit data to get a more readable view, with author names as rows and their commits as columns. This transformation helps in visualizing commit distribution across authors.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 365day)) | group-by name | transpose\n```\n\n----------------------------------------\n\nTITLE: Roll Down Example with Table Data in Nushell\nDESCRIPTION: Example showing how to roll down rows in a table using the roll down command. The example creates a table with three rows and demonstrates how the last row moves to the top position.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_down.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [3 4] [5 6]] | roll down\n╭───┬───┬───╮\n│ # │ a │ b │\n├───┼───┼───┤\n│ 0 │ 5 │ 6 │\n│ 1 │ 1 │ 2 │\n│ 2 │ 3 │ 4 │\n╰───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Using the 'values' Command for Record Manipulation in Nushell\nDESCRIPTION: Shows how to use the new 'values' command to interact with records programmatically, converting them to lists that can be easily filtered and iterated over.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-10-nushell_0_74.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n>  {a: \"Happy\", b: \"new\", c: \"year\"} | values\n╭───┬───────╮\n│ 0 │ Happy │\n│ 1 │ new   │\n│ 2 │ year  │\n╰───┴───────╯\n```\n\nLANGUAGE: nu\nCODE:\n```\n>  [[a b]; [4 7] [5 8] [6 9]] | values\n╭───┬───────────╮\n│ 0 │ ╭───┬───╮ │\n│   │ │ 0 │ 4 │ │\n│   │ │ 1 │ 5 │ │\n│   │ │ 2 │ 6 │ │\n│   │ ╰───┴───╯ │\n│ 1 │ ╭───┬───╮ │\n│   │ │ 0 │ 7 │ │\n│   │ │ 1 │ 8 │ │\n│   │ │ 2 │ 9 │ │\n│   │ ╰───┴───╯ │\n╰───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for Command Filtering\nDESCRIPTION: Vue component script that filters and sorts command pages from the temp pages data. Specifically filters for pages in the commands/docs directory that have the 'expression' category.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/expression.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import pages from '@temp/pages'\n  export default {\n    computed: {\n      commands() {\n        return pages\n          .filter(p => p.path.includes('/commands/docs/'))\n          .filter(p => p.frontmatter.categories.includes('expression'))\n          .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Describe Command Signature - Nushell\nDESCRIPTION: The basic command signature showing describe with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/describe.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> describe {flags} \n```\n\n----------------------------------------\n\nTITLE: Running a Custom Command in Nushell\nDESCRIPTION: Shows how to call the previously defined 'greet' command with a string argument, demonstrating that custom commands are used just like built-in commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ngreet \"World\"\n# => Hello, World!\n```\n\n----------------------------------------\n\nTITLE: Using External Echo Command with Nushell Data\nDESCRIPTION: This snippet shows how to pass data from Nushell to an external command (`echo`). It uses the `^` symbol to indicate that the external `echo` command should be used, and passes the value retrieved from `sys | get host.username` to it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"sys | get host.username | ^echo\"\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Commands Display\nDESCRIPTION: Vue template that renders a table displaying command names as links and their usage descriptions. Uses v-for directive to iterate through filtered commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/bytes.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Test Support with Cargo\nDESCRIPTION: This code demonstrates how to add the `nu-plugin-test-support` crate as a development dependency for testing plugins in Nushell. It includes a sample test function that verifies command examples within a plugin.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n\"[dev-dependencies]\\nnu-plugin-test-support = \\\"0.92.0\\\"\"\n```\n\nLANGUAGE: rust\nCODE:\n```\n\"#[test]\\nfn test_examples() -> Result<(), nu_protocol::ShellError> {\\n    use nu_plugin_test_support::PluginTest;\\n    PluginTest::new(\\\"my_plugin\\\", MyPlugin.into())?.test_command_examples(&MyCommand)\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Updating environment variables permanently in Nu\nDESCRIPTION: Updates environment variables permanently using `echo $nu.env | insert var value | config set_into env`. This command sequence first inserts the new variable and its value into the environment table, and then saves the updated table into the Nu configuration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_23\n\nLANGUAGE: nu\nCODE:\n```\n\"echo $nu.env | insert var value | config set_into env\"\n```\n\n----------------------------------------\n\nTITLE: Processing ValueMap Engine Call Response in JSON\nDESCRIPTION: Example of a successful result for engine calls that produce plain maps, such as the GetEnvVars engine call. The response contains a map of string keys to Value objects.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCallResponse\": [\n    0,\n    {\n      \"ValueMap\": {\n        \"FOO\": {\n          \"String\": {\n            \"val\": \"bar\",\n            \"span\": {\n              \"start\": 2020,\n              \"end\": 2024\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configurando Menu Personalizado para Variáveis no Nushell\nDESCRIPTION: Criação de um menu personalizado 'vars_menu' que exibe todas as variáveis criadas durante a sessão do Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/line_editor.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    ...\n\n    menus = [\n      ...\n      {\n        name: vars_menu\n        only_buffer_difference: true\n        marker: \"# \"\n        type: {\n            layout: list\n            page_size: 10\n        }\n        style: {\n            text: green\n            selected_text: green_reverse\n            description_text: yellow\n        }\n        source: { |buffer, position|\n            scope variables\n            | where name =~ $buffer\n            | sort-by name\n            | each { |elt| {value: $elt.name description: $elt.type} }\n        }\n      }\n      ...\n    ]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Filtering Directory Contents by Size\nDESCRIPTION: This snippet demonstrates filtering the output of the `ls` command to show only files larger than 1 kilobyte using the `where` command. The `where` command accepts a condition that evaluates to true or false for each row in the table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"ls | where size > 1kb\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Signatures in Nushell\nDESCRIPTION: This snippet shows various uses of type signatures in Nushell, including variable declarations, parameter declarations in custom commands and closures, and input/return type declarations for custom commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/type_signatures.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n# Variable declaration\nlet x: int = 9\n\n# Parameter declaration in custom commands\ndef my-command [x: int, y: string] { }\n\n# Parameter declaration in closures\ndo {|nums : list<int>| $nums | describe} [ 1 2 3 ]\n\n# Input and Return type declaration on a custom command\ndef my-filter []: nothing -> list { }\n\n# Multiple Input/Return type signatures on a custom command\ndef my-filter []: [\n  nothing -> list\n  range -> list\n] { }\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Configuration with Hooks\nDESCRIPTION: This snippet illustrates how to update the existing Nushell configuration by adding new hooks using the `upsert` command. This approach allows you to modify the configuration without completely overwriting it, making it easier to manage and maintain.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks {\n    pre_prompt: ...\n    pre_execution: ...\n    env_change: {\n        PWD: ...\n    }\n})\"\n```\n\n----------------------------------------\n\nTITLE: Converting a Nushell table to CSV with custom separator\nDESCRIPTION: Shows how to use the --separator flag to customize the delimiter character in the CSV output, using semicolon instead of comma.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_csv.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n[[foo bar]; [1 2]] | to csv --separator ';'\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script for Filtering Conversion Commands\nDESCRIPTION: A Vue computed property that filters pages to show only conversion-related commands. It filters based on path and categories, then sorts alphabetically by title.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/conversions.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('conversions'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nushell Plugin Template\nDESCRIPTION: This snippet outlines the steps to create a new Nushell plugin using the official template via the `cargo-generate` command. It includes interactive prompts for naming and setting up the plugin project.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"> cargo generate --force --git https://github.com/nushell/nu_plugin_template\\n🤷   What will this plugin be named?: foo\\nCreating a new plugin named \\\"foo\\\"\\nYour plugin crate will be named \\\"nu_plugin_foo\\\".\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Implicit Return Custom Command in Nushell\nDESCRIPTION: Shows how Nushell implicitly returns the last value in a custom command without needing explicit return statements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ndef latest-file [] {\n    ls | sort-by modified | last\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Update in Python\nDESCRIPTION: Python implementation of upsert operation for dictionary key-value pairs\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndict[\"key\"] = val\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Sorting in Nushell\nDESCRIPTION: Shows how to perform case-insensitive sorting on a mixed list of strings and numbers using the -i flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\nlet data = [\n    Nushell,\n    foobar,\n    10,\n    nushell,\n    FoOBaR,\n    9\n]\n$data | sort -i\n```\n\n----------------------------------------\n\nTITLE: Copy Without Attributes\nDESCRIPTION: Example of copying while erasing all attributes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> cp --preserve [] myfile newfile\n```\n\n----------------------------------------\n\nTITLE: Replacing Missing Column Values in Nushell\nDESCRIPTION: Demonstrates how to use the 'default' command to replace missing values in a specific column of a list of records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/default.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a:1 b:2} {b:1}] | default 'N/A' a\n```\n\n----------------------------------------\n\nTITLE: Basic Sort Command Signature\nDESCRIPTION: The basic signature of the Nushell sort command with flag options.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> sort {flags} \n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `merge` to Python's `dict.append`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `merge` command using Python's `dict.append`. This shows how to merge dictionaries in Python, analogous to how `merge` works in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"dict.append\"\n```\n\n----------------------------------------\n\nTITLE: Applying Logical Negation to Number List in Nushell\nDESCRIPTION: Example of using 'bits not' command to apply logical negation to a list of numbers. This demonstrates the basic usage of the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_not.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [4 3 2] | bits not\n╭───┬─────╮\n│ 0 │ 251 │\n│ 1 │ 252 │\n│ 2 │ 253 │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Advanced Formatting of External Command Output in Nushell\nDESCRIPTION: Demonstrates a more sophisticated processing of 'ls -la' output with skipping the header line and naming columns appropriately for better data representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n^ls -la | lines | skip 1 | split-column \" \" perms files group user size month day time name\n```\n\n----------------------------------------\n\nTITLE: Examining Metadata of a Nushell Value\nDESCRIPTION: This snippet demonstrates how to use the 'metadata' command to inspect the metadata attached to a value returned by 'open' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/metadata.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nmetadata (open Cargo.toml)\n# => ╭──────┬───────────────────╮\n# => │ span │ {record 2 fields} │\n# => ╰──────┴───────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Splitting Multiple Paths into Components in Nushell\nDESCRIPTION: This example shows how to split multiple paths in a list into their component parts using the 'path split' command. The output is a nested list structure with each path's components.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_split.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [ /home/viking/spam.txt /home/viking/eggs.txt ] | path split\n╭───┬──────────────────╮\n│ 0 │ ╭───┬──────────╮ │\n│   │ │ 0 │ /        │ │\n│   │ │ 1 │ home     │ │\n│   │ │ 2 │ viking   │ │\n│   │ │ 3 │ spam.txt │ │\n│   │ ╰───┴──────────╯ │\n│ 1 │ ╭───┬──────────╮ │\n│   │ │ 0 │ /        │ │\n│   │ │ 1 │ home     │ │\n│   │ │ 2 │ viking   │ │\n│   │ │ 3 │ eggs.txt │ │\n│   │ ╰───┴──────────╯ │\n╰───┴──────────────────╯\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing in Nushell\nDESCRIPTION: Demonstrates explicit JSON parsing in Nushell using the from json command to convert JSON string into Nushell data structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n'{\"title\": \"jq vs Nushell\", \"publication_date\": \"2023-11-20\"}'\n| from json\n```\n\n----------------------------------------\n\nTITLE: Opening a text file\nDESCRIPTION: Opens a text file using the `open` command. If the file is large, Nu provides a scrollable view. Nu highlights syntax for common file formats.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nopen README.md\n```\n\n----------------------------------------\n\nTITLE: CellPath with Optional Access in Nushell\nDESCRIPTION: Example of a cell path with optional access in Nushell. The path accesses the 'foo' record, then optionally the 0th index, and finally the 'bar' field. Optional members won't cause errors if they can't be accessed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_66\n\nLANGUAGE: nu\nCODE:\n```\nfoo.0?.bar\n# [foo {value: 0, optional: true} bar] | into cell-path\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CellPath\": {\n    \"val\": {\n      \"members\": [\n        {\n          \"String\": {\n            \"val\": \"foo\",\n            \"span\": {\n              \"start\": 659835,\n              \"end\": 659838\n            },\n            \"optional\": false\n          }\n        },\n        {\n          \"Int\": {\n            \"val\": 0,\n            \"span\": {\n              \"start\": 659847,\n              \"end\": 659848\n            },\n            \"optional\": true\n          }\n        },\n        {\n          \"String\": {\n            \"val\": \"bar\",\n            \"span\": {\n              \"start\": 659866,\n              \"end\": 659869\n            },\n            \"optional\": false\n          }\n        }\n      ]\n    },\n    \"span\": {\n      \"start\": 659873,\n      \"end\": 659887\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Duration to Seconds in Nushell\nDESCRIPTION: This snippet demonstrates converting microseconds to seconds as a string format output using the 'format duration' command in Nushell. It shows the command input of 1000000 microseconds and specifies the desired output as seconds.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_duration.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 1000000µs | format duration sec\n1 sec\n```\n\n----------------------------------------\n\nTITLE: Variable Path Access in Nushell\nDESCRIPTION: This example shows how to access a specific column in a table stored in a variable. The variable `my_value` is assigned a table with a `name` column. The code then accesses and prints the value of the `name` column using the path syntax `$my_value.name`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/variables_and_subexpressions.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet my_value = [[name]; [testuser]]\n```\n\nLANGUAGE: nu\nCODE:\n```\necho $my_value.name\n# => testuser\n```\n\n----------------------------------------\n\nTITLE: Creating Ranges with Custom Stride in Nushell\nDESCRIPTION: Demonstrates creating a range with a custom stride. In Nushell, the stride is calculated based on the difference between the first and second values, producing odd numbers from 1 to 9.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 1..3..10\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 3 │\n│ 2 │ 5 │\n│ 3 │ 7 │\n│ 4 │ 9 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Requesting Signature from Nu Plugin [JSON]\nDESCRIPTION: Details how to structure a JSON `Call` message to ask a Nu plugin for its command signatures. This specific call doesn't require additional arguments and the expected response should provide the command signature details or an error if unavailable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [0, \"Signature\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Column Values to Lowercase in Nushell Polars Dataframe\nDESCRIPTION: Demonstrates how to convert string values in a column of a Nushell Polars dataframe to lowercase. This example creates a dataframe from a table with an 'a' column, converts the values to lowercase, and then collects the results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_lowercase.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a]; [Abc]] | polars into-df | polars select (polars col a | polars lowercase) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Slicing Strings in a Dataframe Column using Polars in Nushell\nDESCRIPTION: This example demonstrates how to use the 'polars str-slice' command to create slices from strings in a specified column of a dataframe. It slices each string from index 1 with a length of 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-slice.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[[a]; [abcded] [abc321] [abc123]] | polars into-df | polars select (polars col a | polars str-slice 1 --length 2) | polars collect\n```\n\n----------------------------------------\n\nTITLE: Command Reference Table Template\nDESCRIPTION: HTML template that renders a table of commands using Vue directives. Each row displays a command name as a link and its usage description with preserved whitespace.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/command_reference.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Beschreibung</th>\n  </tr>\n  <tr v-for=\"command in commands\">\n   <td><a :href=\"command.path\"><code>{{ command.title }}</code></a></td>\n   <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Fetching Nushell Book Repository Contributors with Nushell Commands\nDESCRIPTION: This snippet shows how to use Nushell to retrieve and display contributors to the Nushell book repository, demonstrating Nushell's capability to work with API data and tabular output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-31-happy-nu-year-2020.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfetch https://api.github.com/repos/nushell/book/stats/contributors | get author | sort-by login | get login\n```\n\n----------------------------------------\n\nTITLE: Demonstrating str contains negation in Nushell\nDESCRIPTION: Shows alternative ways to negate string containment checks after deprecation of the --not flag in str contains command. Demonstrates using both parentheses and piping with $in variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-28-nushell_0_94_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n# using parentheses\nnot (\"foobar\" | str contains foo)\n\n# using a pipe with the `$in` variable\n\"foobar\" | str contains foo | not $in\n```\n\n----------------------------------------\n\nTITLE: Configurando o Menu de Histórico no Nushell\nDESCRIPTION: Configuração do menu de histórico no Nushell, definindo layout, tamanho da página, marcador e estilos de texto.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/line_editor.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    ...\n\n    menus = [\n      ...\n      {\n        name: history_menu\n        only_buffer_difference: true # Search is done on the text written after activating the menu\n        marker: \"? \"                 # Indicator that appears with the menu is active\n        type: {\n            layout: list             # Type of menu\n            page_size: 10            # Number of entries that will presented when activating the menu\n        }\n        style: {\n            text: green                   # Text style\n            selected_text: green_reverse  # Text style for selected option\n            description_text: yellow      # Text style for description\n        }\n      }\n      ...\n    ]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Starship Feature\nDESCRIPTION: Command to install Nushell with Starship prompt feature enabled using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> cargo install nu --features starship-prompt\n```\n\n----------------------------------------\n\nTITLE: Nushell Code Improvements and Bug Fixes\nDESCRIPTION: Multiple code improvements and bug fixes including Value type optimizations, operator updates, math functions, and error handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-12-09-twin0172.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- webbedspace [reduced LOC by replacing several instances of `Value::Int {}`, `Value::Float{}`, `Value::Bool {}`, and `Value::String {}` with `Value::int()`, `Value::float()`, `Value::boolean()` and `Value::string()`]\n- merelymyself [ensured that errore in `else` are forwarded appropriately]\n- sholderbach [added arbitrary base `math log`]\n- kubouch [fixed tab not working in vi editor mode]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rust Enum Encoding in Serde for Nushell Protocol\nDESCRIPTION: Shows how Rust enums are encoded in Serde's default format for the Nushell plugin protocol. This format is used throughout the protocol for variant representation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n\"Variant\"             // Variant\n{ \"Variant\": value }  // Variant(value)\n{ \"Variant\": [a, b] } // Variant(a, b)\n{\n  \"Variant\": {\n    \"one\": 1,\n    \"two\": 2\n  }\n}                     // Variant { one: 1, two: 2 }\n```\n\n----------------------------------------\n\nTITLE: Listing Processes with os\nDESCRIPTION: This code snippet illustrates how to list processes by reading the `/proc` directory using `os.listdir` in Python. This approach is common on Linux-based systems to get a list of process IDs. It requires appropriate permissions to access the `/proc` directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"os.listdir('/proc')\"\n```\n\n----------------------------------------\n\nTITLE: Aggregating Grouped Values with jq\nDESCRIPTION: Shows how to group data by a key and then calculate the sum of a value for each group using jq's group_by, map, and add functions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\necho '[{\"category\": \"A\", \"value\": 10}, {\"category\": \"B\", \"value\": 20}, {\"category\": \"A\", \"value\": 5}]' |\njq -r 'group_by(.category) | map({category: .[0].category, sum: map(.value) | add})'\n```\n\n----------------------------------------\n\nTITLE: Null Source Example\nDESCRIPTION: Example demonstrating that sourcing null is a no-op operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source-env.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> source-env null\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Collecting a Lazy Dataframe in Nushell\nDESCRIPTION: Shows how to create a lazy dataframe using polars into-lazy and collect the results with polars collect. Lazy dataframes defer execution until results are needed, allowing for optimized query planning.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_40\n\nLANGUAGE: nushell\nCODE:\n```\nlet lf_0 = [[a b]; [1 a] [2 b] [3 c] [4 d]] | polars into-lazy\n$lf_0\n```\n\nLANGUAGE: nushell\nCODE:\n```\n$lf_0 | polars collect\n```\n\n----------------------------------------\n\nTITLE: Modifying Stdout Timestamps\nDESCRIPTION: Example showing how to modify timestamps for stdout.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/touch.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n> touch -\n```\n\n----------------------------------------\n\nTITLE: Explicit Autoview Pipeline in Nushell\nDESCRIPTION: Shows the equivalent explicit pipeline with autoview command, demonstrating how Nu automatically handles output display\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/pipeline.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nls | autoview\n```\n\n----------------------------------------\n\nTITLE: Remove File in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `rm` command removes a file or directory. In PowerShell, `Remove-Item`, `del`, `erase`, `rd`, `ri`, `rm`, or `rmdir` can be used.  In Unix shells, `rm` is the standard command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Sort Data in Nushell and PowerShell\nDESCRIPTION: The `sort-by` command (similar to `order by`) sorts data. In PowerShell, `Sort-Object` or `sort` are used. The mapping also includes `OrderBy`, `OrderByDescending`, `ThenBy`, and `ThenByDescending`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Filtering Git Commits by Date in Nushell\nDESCRIPTION: Extends the previous command by adding date filtering to show only commits from the past year. Uses the where command with a date comparison expression to filter results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD | lines | split column \"»¦«\" commit subject name email date | upsert date {|d| $d.date | into datetime} | where ($it.date > ((date now) - 365day))\n```\n\n----------------------------------------\n\nTITLE: Using 'which' Command in Nushell\nDESCRIPTION: This snippet shows the improved 'which' command in Nushell, displaying information about the command including its path and whether it's a built-in command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-01-07-nushell-0_8_0.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> which which\n───────┬──────────────────────────┬─────────\n arg   │ path                     │ builtin\n───────┼──────────────────────────┼─────────\n which │ nushell built-in command │ Yes\n───────┴──────────────────────────┴─────────\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Pivot Mode in Nushell\nDESCRIPTION: Shows how to configure the pivot mode for tables in Nushell. With the auto-pivoting disabled by default, these commands demonstrate how to enable auto-pivoting for large tables or always rotate single rows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-01-nushell_0_19.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n# To only rotate large tables:\nconfig set pivot_mode auto\n\n# To always rotate a single row to be vertical:\nconfig set pivot_mode always\n```\n\n----------------------------------------\n\nTITLE: Setting Table Mode in Nushell Config\nDESCRIPTION: This snippet demonstrates how to configure the table border style in Nushell by setting the `table_mode` option within the `$env.config` block in the `config.nu` file. The `table_mode` setting controls the appearance of table borders in Nushell's output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/coloring_and_theming.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    table_mode: rounded\n}\n```\n\n----------------------------------------\n\nTITLE: File Redirection for External Commands in Nushell\nDESCRIPTION: Shows how to redirect stdout and stderr of an external command to separate files using Nushell syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\ncat unknown.txt out> out.log err> err.log\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Annotated Closure in Nushell\nDESCRIPTION: This snippet shows how to create a closure with type-annotated parameters in Nushell. The closure takes two parameters: 'x' of type 'int' and 'y' of type 'string', and returns a formatted string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/type_signatures.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet cl = {|x: int, y: string| $\"x: ($x), y: ($y)\" }\ndo $cl 88 'hello'\n# => x: 88, y: hello\n```\n\n----------------------------------------\n\nTITLE: Listing current resource limits using ulimit\nDESCRIPTION: This code shows how to use the `ulimit` command in Nushell to list the current resource limits for the current user on Unix-based systems. The `-a` flag specifies that all limits should be displayed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-01-09-nushell_0_89_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n```nushell\nulimit -a\n```\n```\n\n----------------------------------------\n\nTITLE: Querying SQLite Database with Nushell db Commands\nDESCRIPTION: Demonstrates how to open a SQLite database and build a query step-by-step using Nushell's new db commands. The query is built lazily and only executed when the data is needed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-05-03-nushell_0_62.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n  > db open db.sqlite\n    | db from table_a\n    | db select a\n    | db limit 10\n    | db describe\n```\n\n----------------------------------------\n\nTITLE: Numeric Range Padding Support in str expand\nDESCRIPTION: Support for numeric ranges with padded zeros has been added to the `str expand` command, which allows for better control over numerical formats in strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n'{00..10}' | str expand\n```\n\n----------------------------------------\n\nTITLE: Nushell Timeit Comparison (0.91.0)\nDESCRIPTION: This snippet demonstrates the execution time of a simple command using `timeit` in Nushell version 0.91.0. It calculates the average execution time for 1000 iterations of incrementing a version number using the `inc -m` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n\n# 0.91.0\n> 1..1000 | each { timeit { \"2.3.2\" | inc -m } } | math avg\n2ms 498µs 493ns\n\n```\n\n----------------------------------------\n\nTITLE: Matching with Guard Condition in Nushell\nDESCRIPTION: Illustrates the use of a guard condition in the 'match' command for more complex matching scenarios.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/match.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nmatch [1 2 3] {\n        [$x, ..$y] if $x == 1 => { 'good list' },\n        _ => { 'not a very good list' }\n    }\n```\n\n----------------------------------------\n\nTITLE: Fix external command name parsing with backslashes - Markdown\nDESCRIPTION: This snippet illustrates how previous external command paths on Windows incorrectly recognized backslashes as escape sequences. The description provides context regarding the cause of the error and the subsequent fix implemented in the release.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-03-nushell_0_94_2.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nalias curl = c:\\msys64\\clangarm64\\bin\\curl.exe\n               ───────────────┬──────────────\n                              ╰── unrecognized escape after '\\' in string\n```\n\n```\n\n----------------------------------------\n\nTITLE: Running a Nushell script from the host in a Docker container\nDESCRIPTION: This command mounts the current working directory into a Nushell Docker container and then executes a script from that directory.  This allows scripts on the host machine to be run within the container's environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n\"docker run --rm \\\n    -v $(pwd):/work \\\n    ghcr.io/nushell/nushell:latest-alpine \\\n    \\\"/work/script.nu\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Bytes from Start to a Specific Index in Nushell\nDESCRIPTION: This example demonstrates how to extract bytes from the beginning of a binary value up to index 4 (inclusive). The output shows the extracted bytes in hexadecimal format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_at.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 0x[33 44 55 10 01 13 10] | bytes at ..4\nLength: 5 (0x5) bytes | printable whitespace ascii_other non_ascii\n00000000:   33 44 55 10  01                                      3DU••\n\n```\n\n----------------------------------------\n\nTITLE: Flattening Inner Table with All Flag in Nushell\nDESCRIPTION: Shows how to flatten an inner table within a record structure using the --all flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/flatten.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> { a: b, d: [ 1 2 3 4 ], e: [ 4 3 ] } | flatten d --all\n╭───┬───┬───┬───────────╮\n│ # │ a │ d │     e     │\n├───┼───┼───┼───────────┤\n│ 0 │ b │ 1 │ ╭───┬───╮ │\n│   │   │   │ │ 0 │ 4 │ │\n│   │   │   │ │ 1 │ 3 │ │\n│   │   │   │ ╰───┴───╯ │\n│ 1 │ b │ 2 │ ╭───┬───╮ │\n│   │   │   │ │ 0 │ 4 │ │\n│   │   │   │ │ 1 │ 3 │ │\n│   │   │   │ ╰───┴───╯ │\n│ 2 │ b │ 3 │ ╭───┬───╮ │\n│   │   │   │ │ 0 │ 4 │ │\n│   │   │   │ │ 1 │ 3 │ │\n│   │   │   │ ╰───┴───╯ │\n│ 3 │ b │ 4 │ ╭───┬───╮ │\n│   │   │   │ │ 0 │ 4 │ │\n│   │   │   │ │ 1 │ 3 │ │\n│   │   │   │ ╰───┴───╯ │\n╰───┴───┴───┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: Converting Git Log to Lines\nDESCRIPTION: Converting git log output into lines for table formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/parsing_git_log.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\ngit log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines\n```\n\n----------------------------------------\n\nTITLE: Computing a New Value at an Index Using a Closure\nDESCRIPTION: Example demonstrating how to use a closure to compute a new value at index 1 in a list by adding 2 to the current value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/update.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3] | update 1 {|i| $i + 2 }\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 4 │\n│ 2 │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Importing Module Environment Within Commands\nDESCRIPTION: A correct approach to import a module's environment by placing the 'use' statement within each command where it's needed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\n# go.nu\nexport def --env home [] {\n    cd ~\n}\n\nexport def --env modules [] {\n    use my-utils\n    cd $env.NU_MODULES_DIR\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple List to Grid in Nushell\nDESCRIPTION: Example showing how to render a simple list of values to a grid format. The values are displayed horizontally separated by a pipe character.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/grid.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> [1 2 3 a b c] | grid\n1 │ 2 │ 3 │ a │ b │ c\n\n```\n\n----------------------------------------\n\nTITLE: Getting Date Information in Nushell\nDESCRIPTION: Shows how the date command in Nushell returns structured date and time information as a table with year, month, day, hour, minute, second, and timezone fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\ndate\n# => ──────────┬────────\n# =>  year     │ 2020\n# =>  month    │ 5\n# =>  day      │ 5\n# =>  hour     │ 21\n# =>  minute   │ 13\n# =>  second   │ 17\n# =>  timezone │ +02:00\n# => ──────────┴────────\n```\n\n----------------------------------------\n\nTITLE: Nushell Example Usage\nDESCRIPTION: Demonstrates how to use the scope variables command to show all variables in the current scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/scope_variables.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> scope variables\n```\n\n----------------------------------------\n\nTITLE: Working with Statements that Don't Return Values in Nushell\nDESCRIPTION: Shows how using certain statements like 'for' as the final expression in a command will result in a null return value, which might be unexpected behavior.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\ndef exponents-of-three [] {\n  for x in [ 0 1 2 3 4 5 ] {\n    3 ** $x\n  }\n}\nexponents-of-three\n```\n\n----------------------------------------\n\nTITLE: Adding Search Terms to Custom Command in Nushell\nDESCRIPTION: Demonstrates how to use the '@search-terms' attribute to add search terms to a custom command that doubles numbers. The search terms 'multiply' and 'times' are associated with the 'double' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/attr_search-terms.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> # Double numbers\n    @search-terms multiply times\n    def double []: [number -> number] { $in * 2 }\n```\n\n----------------------------------------\n\nTITLE: NuShell Pipeline: Echo and Calculation\nDESCRIPTION: This NuShell pipeline echoes the numbers 1, 2, and 3, then multiplies the second and third elements of the input using the `$in` variable. The `$in` variable accesses the data within the pipeline, treating the input as a collection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/pipeline.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\necho 1 2 3 | $in.1 * $in.2\n# => 6\n```\n\n----------------------------------------\n\nTITLE: Fetching Cookbook Repository Contributors with Nushell Commands\nDESCRIPTION: This example shows how to retrieve and display the list of contributors to the Nushell cookbook repository using Nushell's fetch, get, and sort-by commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-31-happy-nu-year-2020.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfetch https://api.github.com/repos/nushell/cookbook/stats/contributors | get author | sort-by login | get login\n```\n\n----------------------------------------\n\nTITLE: Finding All Patterns from End in Nushell\nDESCRIPTION: Shows how to combine --all and --end flags to locate all instances of a byte pattern in reverse order.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_index-of.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n>  0x[33 44 55 10 01 33 44 33 44] | bytes index-of --all --end 0x[33 44]\n╭───┬───╮\n│ 0 │ 7 │\n│ 1 │ 5 │\n│ 2 │ 0 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Basic Nushell Pipeline Example\nDESCRIPTION: Demonstrates a basic Nushell pipeline with three parts: input (open), filter (inc), and output (save). This example reads a Cargo.toml file, increments the package version, and saves the result to a new file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/pipeline.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nopen \"Cargo.toml\" | inc package.version | save \"Cargo_new.toml\"\n```\n\n----------------------------------------\n\nTITLE: Configurando Teclas de Atalho para Menus no Nushell\nDESCRIPTION: Definição de teclas de atalho personalizadas para ativar os menus de conclusão e histórico no Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/line_editor.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n$env.config = {\n    ...\n\n    keybindings: [\n      {\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: [vi_insert vi_normal]\n        event: {\n          until: [\n            { send: menu name: completion_menu }\n            { send: menupagenext }\n          ]\n        }\n      }\n      {\n        name: history_menu\n        modifier: control\n        keycode: char_y\n        mode: [vi_insert vi_normal]\n        event: {\n          until: [\n            { send: menu name: history_menu }\n            { send: menupagenext }\n          ]\n        }\n      }\n    ]\n\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Fetching Contributor Book Repository Contributors with Nushell Commands\nDESCRIPTION: This snippet uses Nushell to query the GitHub API for contributors to the Nushell contributor book repository, formatting the results as a sorted table of usernames.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-31-happy-nu-year-2020.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfetch https://api.github.com/repos/nushell/contributor-book/stats/contributors | get author | sort-by login | get login\n```\n\n----------------------------------------\n\nTITLE: Custom Error Command Usage Example in Nushell\nDESCRIPTION: Shows how to call the custom command and the resulting error output that will be displayed, with formatting that highlights the problematic argument.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/creating_errors.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nmy-command 100\n# => Error:\n# =>   × this is fishy\n# =>    ╭─[entry #5:1:1]\n# =>  1 │ my-command 100\n# =>    ·            ─┬─\n# =>    ·             ╰── fish right here\n# =>    ╰────\n```\n\n----------------------------------------\n\nTITLE: Mutating Variables in Nushell Blocks with if Statement\nDESCRIPTION: This snippet demonstrates how blocks can access and modify mutable variables defined in the parent scope. The example creates a mutable variable, then increments it inside an if block.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/block.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 1\nif true {\n    $x += 1000\n}\nprint $x\n```\n\n----------------------------------------\n\nTITLE: Annotating Command Parameters with 'any' Type in Nushell\nDESCRIPTION: Shows how to create a command that accepts a parameter of any type. The command takes a value of any type and returns a string representation of its type using the describe command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/any.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ndef takes-anything [v: any] -> string {\n  $v | describe\n}\n\ntakes-anything 42\n# => int\ntakes-anything foo\n# => string\n```\n\n----------------------------------------\n\nTITLE: Removing Files in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `rm` command in Nushell and PowerShell. In PowerShell, `Remove-Item`, `del`, `erase`, `rd`, `ri`, `rm`, and `rmdir` are used to remove files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Remove-Item, del, erase, rd, ri, rm, rmdir\"\n```\n\n----------------------------------------\n\nTITLE: Select First Elements in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `keep` command in Nushell, equivalent to `top` or `limit`, selects the first elements.  In PowerShell, `Select-Object -First` achieves the same, and in Unix, `head` is used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Vue Component Script for Dataframe Commands\nDESCRIPTION: JavaScript Vue component that computes filtered and sorted dataframe commands from the pages collection. Filters for paths containing '/commands/docs/' and dataframe category.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/dataframe.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('dataframe'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Floating-Point Ranges in Nushell\nDESCRIPTION: Demonstrates creating a range with floating-point values. The range includes the start and end values with the specified stride.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n(1.0)..(1.2)..(2.2)\n╭───┬──────╮\n│ 0 │ 1.00 │\n│ 1 │ 1.20 │\n│ 2 │ 1.40 │\n│ 3 │ 1.60 │\n│ 4 │ 1.80 │\n│ 5 │ 2.00 │\n│ 6 │ 2.20 │\n╰───┴──────╯\n```\n\n----------------------------------------\n\nTITLE: Defining Flatten Command Signature in Nushell\nDESCRIPTION: Specifies the command signature for the 'flatten' command, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/flatten.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> flatten {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Nushell each Filter Example\nDESCRIPTION: This snippet demonstrates the use of the `each` filter to modify pipeline input. It iterates over a range of numbers and multiplies each number by 2, modifying `$in` to represent the current iteration's value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n\"1..10 | each {$in * 2}\"\n```\n\n----------------------------------------\n\nTITLE: Skipping Elements with itertools\nDESCRIPTION: This snippet shows how to skip elements in an iterable based on a condition using `itertools.dropwhile` in Python. The `dropwhile` function takes a predicate function and an iterable as input. It returns an iterator that skips elements from the iterable as long as the predicate function returns `True`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"itertools.dropwhile\"\n```\n\n----------------------------------------\n\nTITLE: Importing Assert Module in Nushell\nDESCRIPTION: Shows how to import the standard assertion module in Nushell for testing purposes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/testing.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nuse std/assert\n```\n\n----------------------------------------\n\nTITLE: Finding All Occurrences of Byte Pattern in Nushell\nDESCRIPTION: Illustrates how to locate all instances of a byte pattern using the --all flag, returning a table of all matching indices.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_index-of.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n>  0x[33 44 55 10 01 33 44 33 44] | bytes index-of --all 0x[33 44]\n╭───┬───╮\n│ 0 │ 0 │\n│ 1 │ 5 │\n│ 2 │ 7 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Rename File in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `rename` command renames a file or directory. In PowerShell, `Rename-Item`, `ren`, or `rni` can be used.  In Unix shells, `mv` is commonly used for renaming.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Filtering strings with substring in Nu\nDESCRIPTION: Filters strings that contain a specific substring using the 'where' command and the '=~' operator.  The '$it' variable refers to the current string being processed and the '<substring>' represents the substring to search for.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\n\"where $it =~ <substring>\"\n```\n\n----------------------------------------\n\nTITLE: Suppressing Return Values in Nushell Commands\nDESCRIPTION: Demonstrates how to create a command that doesn't return a value by using the ignore keyword at the end of a pipeline, useful for commands that perform actions rather than produce data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\ndef create-three-files [] {\n  [ file1 file2 file3 ] | each {|filename|\n    touch $filename\n  } | ignore\n}\n```\n\n----------------------------------------\n\nTITLE: Unnesting Lazy DataFrame Example\nDESCRIPTION: Example demonstrating how to unnest a structured column in a lazy DataFrame context with column selection and sorting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unnest.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n[[id person]; [1 {name: \"Bob\", age: 36}] [2 {name: \"Betty\", age: 63}]]\n                    | polars into-df -s {id: i64, person: {name: str, age: u8}}\n                    | polars into-lazy\n                    | polars unnest person\n                    | polars select (polars col id) (polars col name) (polars col age)\n                    | polars collect\n                    | polars sort-by id\n```\n\n----------------------------------------\n\nTITLE: Plugin Pipeline Data Response JSON\nDESCRIPTION: Shows the structure of a PipelineData response from a Nushell plugin, containing the computed result value and span information for error reporting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PipelineData\": {\n    \"Value\": {\n      \"Int\": {\n        \"val\": 5,\n        \"span\": {\n          \"start\": 100953,\n          \"end\": 100957\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing processes with ps in Nushell\nDESCRIPTION: This snippet demonstrates the `ps` command in Nushell, which lists all running processes in a structured table. This provides information about the state and name of each process, including its CPU usage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\tps\n\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Nushell\nDESCRIPTION: This code snippet demonstrates changing directories using the `cd` command and other relative path techniques. It explores basic directory navigation and usage of multi-dot shortcuts to traverse parent directories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/moving_around.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ncd cookbook\n```\n\nLANGUAGE: nu\nCODE:\n```\ncookbook/\n```\n\nLANGUAGE: nu\nCODE:\n```\n# Change to the parent directory\ncd ..\n# or\n..\n# Go up two levels (parent's parent)\ncd ...\n# or\n...\n# Go up three levels (parent of parent's parent)\ncd ....\n# Etc.\n```\n\nLANGUAGE: nu\nCODE:\n```\ncd ../sibling\n```\n\n----------------------------------------\n\nTITLE: Generating Random Data with Size Values\nDESCRIPTION: Examples of using the random bytes and random chars commands with file size values as arguments. These commands now support specifying the amount of data to generate using file size notation like 'kb'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-10-15-nushell_0_99_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nrandom binary 1kb\nrandom chars --length 1kb\n```\n\n----------------------------------------\n\nTITLE: Listing directory contents with ls in Nushell\nDESCRIPTION: This snippet demonstrates the `ls` command in Nushell, which returns structured table data instead of a simple text block. This structured output allows for more interactive data manipulation, similar to a spreadsheet.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\tls\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to the Registry (Unix/Linux)\nDESCRIPTION: This code snippet shows how to add a plugin to the Nushell plugin registry on Unix/Linux platforms. The `plugin add` command tells Nushell where to find the plugin. The name is the name of the plugin _file_, including its extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n# On Unix/Linux platforms:\nplugin add nu_plugin_polars\n```\n\n----------------------------------------\n\nTITLE: Using the Len Plugin in Nushell\nDESCRIPTION: Example of using the len plugin to calculate the length of a string, and viewing the plugin help. Shows how the plugin integrates into the Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nnu\n\"hello\" | len\n# => 5\nhelp len\n# => calculates the length of its input\n# => \n# => Usage:\n# =>   > len\n# => \n# => Flags:\n# =>   -h, --help - Display the help message for this command\n# => \n# => Signatures:\n# =>   <string> | len -> <int>\n```\n\n----------------------------------------\n\nTITLE: Serializing Rust Operator Enum in JavaScript\nDESCRIPTION: Shows how Nushell's Operator enum variants are serialized using serde's default enum representation. Includes examples of mathematical, bitwise, and comparison operators.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"Math\": \"Append\" }           // ++   Math(Append)\n{ \"Bits\": \"BitOr\" }            // |    Bits(BitOr)\n{ \"Comparison\": \"RegexMatch\" } // =~   Comparison(RegexMatch)\n```\n\n----------------------------------------\n\nTITLE: Finding files recursively in Nu\nDESCRIPTION: Finds recursively all files that match a given pattern. It utilizes the globbing pattern '**/*.rs' which means to look for all files ending with '.rs' in the current directory and all its subdirectories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n\"ls **/*.rs\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Abbreviation in Nushell\nDESCRIPTION: This snippet shows how to set up an alias in Nushell that expands to a full command when a specific key combination is pressed. The alias 'gwch' expands to a detailed Git command when 'ctrl+space' is used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-15-top-nushell-hacks.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nalias gwch = git whatchanged -p --abbrev-commit --pretty=medium\n```\n\n----------------------------------------\n\nTITLE: Doubling Elements Before 3 in List Using 'each while' in Nushell\nDESCRIPTION: Demonstrates using 'each while' to double each element in a list until encountering 3, producing a new list with the results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each_while.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [1 2 3 2 1] | each while {|e| if $e < 3 { $e * 2 } }\n╭───┬───╮\n│ 0 │ 2 │\n│ 1 │ 4 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Using command output as argument in Nu\nDESCRIPTION: Uses the output of one command as an argument for another command.  The example provided gets the path of the 'git' executable using 'which git' and then passes it to the 'stat' command.  Access the path using '.path'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_18\n\nLANGUAGE: nu\nCODE:\n```\n\"stat (which git).path\"\n```\n\n----------------------------------------\n\nTITLE: Adding New Columns to Tables in Nushell\nDESCRIPTION: Using the 'add' command to append a new column 'next_edition' with value '2021' to an existing table, while keeping the original data unchanged.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml | add next_edition 2021\n# => ---------+--------------\n# =>  edition | next_edition\n# => ---------+--------------\n# =>  2018    | 2021\n# => ---------+--------------\n```\n\n----------------------------------------\n\nTITLE: Using the headers Command to Convert First Row to Column Headers\nDESCRIPTION: Shows how the new headers command automatically promotes the first row of tabular data to column headers, simplifying data manipulation workflows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-31-nushell_0_12_0.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n❯ open tests/fixtures/formats/sample_data.ods | get SalesOrders\n────┬────────────┬─────────┬──────────┬─────────┬─────────┬───────────┬───────────\n #  │  Column0   │ Column1 │ Column2  │ Column3 │ Column4 │  Column5  │  Column6\n────┼────────────┼─────────┼──────────┼─────────┼─────────┼───────────┼───────────\n  0 │ OrderDate  │ Region  │ Rep      │ Item    │ Units   │ Unit Cost │ Total\n  1 │ 2018-01-06 │ East    │ Jones    │ Pencil  │ 95.0000 │    1.9900 │  189.0500\n\n❯ open tests/fixtures/formats/sample_data.ods | get SalesOrders | headers\n────┬────────────┬─────────┬──────────┬─────────┬─────────┬───────────┬───────────\n #  │ OrderDate  │ Region  │   Rep    │  Item   │  Units  │ Unit Cost │   Total\n────┼────────────┼─────────┼──────────┼─────────┼─────────┼───────────┼───────────\n  0 │ 2018-01-06 │ East    │ Jones    │ Pencil  │ 95.0000 │    1.9900 │  189.0500\n  1 │ 2018-01-23 │ Central │ Kivell   │ Binder  │ 50.0000 │   19.9900 │  999.4999\n```\n\n----------------------------------------\n\nTITLE: Defining the Signature for 'gstat' Command in Nushell\nDESCRIPTION: This code snippet defines the command signature for the 'gstat' command, which is used to get the Git status of a repository. It shows the command format with optional flags and a path parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/gstat.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> gstat {flags} (path)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scratchpad for Custom Definitions in Nushell\nDESCRIPTION: Shows how to create a separate overlay for custom definitions by first creating an empty module and then using it as an overlay. This keeps custom definitions separate from existing overlays.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n(zero)> overlay use spam\n\n(spam)> module scratchpad { }\n\n(spam)> overlay use scratchpad\n\n(scratchpad)> def eggs [] { \"eggs\" }\n```\n\n----------------------------------------\n\nTITLE: Open File in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `open` command opens a file. In PowerShell, `Get-Content`, `gc`, `cat`, and `type` are used. In Unix shells, `cat` is the standard command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Inverting Boolean Mask with Polars Not in Nushell\nDESCRIPTION: This example demonstrates how to invert a boolean mask in a dataframe using the `polars not` command. It converts an array of boolean values to a dataframe and then inverts each boolean value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_not.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[true false true] | polars into-df | polars not\n```\n\n----------------------------------------\n\nTITLE: Defining the 'any' Command Signature in Nushell\nDESCRIPTION: The signature of the 'any' command showing its syntax with flags and a predicate parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/any.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> any {flags} (predicate)\n```\n\n----------------------------------------\n\nTITLE: Passing Nushell Data to External Commands\nDESCRIPTION: Shows how to pass data from Nushell to external commands using variable substitution. This example lists files and passes each filename to the external 'echo' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\nls | get name | echo $it\n```\n\n----------------------------------------\n\nTITLE: Custom Keybinding - Nushell\nDESCRIPTION: Demonstrates how to assign a custom keybinding to the insertnewline event in Nushell. This allows users to define their own keyboard shortcut for inserting newlines while editing commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n```nu\nevent: { edit: insertnewline }\n```\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `match` to Python\nDESCRIPTION: This maps the Nushell `match` command to its possible equivalent in Python. No direct equivalent is available and is used in the documentation for reference.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"match\"\n```\n\n----------------------------------------\n\nTITLE: Example: Calculate Hyperbolic Cosine\nDESCRIPTION: Demonstrates calculating the hyperbolic cosine of 1 using the math cosh command, which returns a float value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_cosh.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | math cosh\n1.5430806348152435\n```\n\n----------------------------------------\n\nTITLE: AST Error Pipeline Example\nDESCRIPTION: Demonstrates AST output for a pipeline containing a syntax error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> ast 'for x in 1..10 { echo $x '\n```\n\n----------------------------------------\n\nTITLE: Splitting columns with a specific delimiter\nDESCRIPTION: Opens a file, splits it into lines, and splits each line into columns using a specified delimiter ( \" | \"). This corrects spacing issues during parsing and ensures clean data separation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nopen gente.txt | lines | split column \" | \"\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin in Nushell\nDESCRIPTION: Command to register a new plugin executable in the Nushell plugin registry. This allows the plugin to be discovered and used within the Nushell environment.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugin add <path_to_plugin_executable>\n```\n\nLANGUAGE: shell\nCODE:\n```\nplugin use <plugin_name>\n```\n\n----------------------------------------\n\nTITLE: Basic uniq Command Signature in Nushell\nDESCRIPTION: Shows the basic signature for the 'uniq' command, which returns distinct values from input data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/uniq.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> uniq {flags} \n```\n\n----------------------------------------\n\nTITLE: Using Substring Command in Nushell\nDESCRIPTION: Example of using the str command with substring functionality to process file names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nls | get name\nls | get name | str --substring \"0,3\"\n```\n\n----------------------------------------\n\nTITLE: Importing entire module as command with subcommands\nDESCRIPTION: This example shows how to import the `std/log` module without specifying the definitions. This imports the `log` submodule with all of its subcommands into the current scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nuse std/log\nlog info \"Hello, std/log Module\"\n```\n\n----------------------------------------\n\nTITLE: Find Without ANSI Highlighting\nDESCRIPTION: Example showing how to search without ANSI sequence highlighting in results.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n> [[foo bar]; [abc 123] [def 456]] | find --no-highlight 123\n╭───┬─────┬─────╮\n│ # │ foo │ bar │\n├───┼─────┼─────┤\n│ 0 │ abc │ 123 │\n╰───┴─────┴─────╯\n```\n\n----------------------------------------\n\nTITLE: HTML Table for Displaying NuShell Network Commands\nDESCRIPTION: HTML table structure that displays network commands and their descriptions. It iterates through the filtered commands using Vue's v-for directive, creating a row for each command with a link to its documentation page and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/network.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to the Registry (Windows)\nDESCRIPTION: This code snippet shows how to add a plugin to the Nushell plugin registry on Windows. The `plugin add` command tells Nushell where to find the plugin. The name is the name of the plugin _file_, including its extension.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n# Or on Windows\nplugin add nu_plugin_polars.exe\n```\n\n----------------------------------------\n\nTITLE: Rust Plugin Version Implementation\nDESCRIPTION: Provides a Rust function example implementing the required 'fn version()' method for the 'Plugin' trait. It retrieves the package version from environment variables, returning it as a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-06-25-nushell_0_95_0.md#2025-04-19_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn version(&self) -> String {\n    env!(\"CARGO_PKG_VERSION\").into()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Nushell Module with Export Commands\nDESCRIPTION: Example of defining a simple 'greetings' module with two exported commands: 'hello' and 'hi'. Each command accepts a parameter and returns a formatted string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nmodule greetings {\n     export def hello [name: string] {\n         $\"hello ($name)!\"\n     }\n\n     export def hi [where: string] {\n         $\"hi ($where)!\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Move File in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `mv` command moves a file or directory.  In PowerShell, `Move-Item`, `mv`, `move`, or `mi` can be used.  In Unix shells, `mv` is the standard command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Creating Basic Inclusive Ranges in Nushell\nDESCRIPTION: Demonstrates creating a basic inclusive range from 1 to 5. The range produces a table with values from the start to end point, inclusive by default.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> 1..5\n╭───┬────╮\n│ 0 │  1 │\n│ 1 │  2 │\n│ 2 │  3 │\n│ 3 │  4 │\n│ 4 │  5 │\n╰───┴────╯\n```\n\n----------------------------------------\n\nTITLE: ListStream Header Variant Example in JSON\nDESCRIPTION: Example of a ListStream header variant that starts a list stream in the Nushell protocol. It contains the stream identifier and span information for source code reference.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ListStream\": {\n    \"id\": 2,\n    \"span\": {\n      \"start\": 33911,\n      \"end\": 33942\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Module with Local Helper Functions\nDESCRIPTION: Example of a module with both exported and non-exported helper commands. The non-exported helper can only be used within the module scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n# greetings.nu\n\nexport def hello [name: string] {\n    greetings-helper \"hello\" \"world\"\n}\n\nexport def hi [where: string] {\n    greetings-helper \"hi\" \"there\"\n}\n\ndef greetings-helper [greeting: string, subject: string] {\n    $\"($greeting) ($subject)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `reduce` to Python's `functools.reduce`\nDESCRIPTION: Illustrates how to use `functools.reduce` in Python to perform a reduction operation, which corresponds to the `reduce` command in Nushell. The reduce function applies a function cumulatively to the items of a sequence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n\"functools.reduce\"\n```\n\n----------------------------------------\n\nTITLE: Set Editing Mode - Nushell\nDESCRIPTION: Shows how to set the editing mode to 'vi' in Nushell's configuration. This changes the command line editing behavior to use Vi-style keybindings and commands. The configuration is stored in the `$env.config.edit_mode` variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/line_editor.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n```nu\n$env.config.edit_mode = 'vi'\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying raw contents of a file in Nu\nDESCRIPTION: Displays the contents of the given file using the 'open' command with the '--raw' flag. This ensures that the file is read as a raw string without any interpretation or parsing of structured data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n\"open --raw <path>\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Spread Arguments in Nushell Command\nDESCRIPTION: Shows how to use multiple spread operators in a single command call, combining lists and individual arguments with both literal lists and subexpressions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nfoo \"bar\" \"baz\" 1 ...[2 3] 4 5 ...(6..9 | take 2) last\n# => [false, bar, baz, [1, 2, 3, 4, 5, 6, 7, last]]\n```\n\n----------------------------------------\n\nTITLE: Nushell File Processing Script Reference\nDESCRIPTION: Reference to a Nushell script used for creating the This Week in Nu newsletter, demonstrating Nushell's capabilities as a full scripting language similar to Python or Ruby.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-23-two-years-of-nushell.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nhttps://github.com/nushell/nu_scripts/blob/main/make_release/this_week_in_nu_release.nu\n```\n\n----------------------------------------\n\nTITLE: Formatting Output in PowerShell\nDESCRIPTION: Demonstrates how to format output in PowerShell using `Format-Table`, `ft`, `Format-List`, and `fl`. These commands are used for displaying data in table or list format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_36\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Format-Table, ft, Format-List, fl\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping Range into Table with Column Name in Nushell\nDESCRIPTION: Shows how to use the 'wrap' command to convert a range of numbers into a table with a 'num' column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/wrap.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 4..6 | wrap num\n╭───┬─────╮\n│ # │ num │\n├───┼─────┤\n│ 0 │   4 │\n│ 1 │   5 │\n│ 2 │   6 │\n╰───┴─────╯\n```\n\n----------------------------------------\n\nTITLE: Using the 'overlay new' Command in Nushell\nDESCRIPTION: Demonstrates the use of 'overlay new' command (introduced in version 0.64) as a more concise way to create a new empty overlay for storing custom definitions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n(zero)> overlay use spam\n\n(spam)> overlay new scratchpad\n\n(scratchpad)> def eggs [] { \"eggs\" }\n```\n\n----------------------------------------\n\nTITLE: File-Relative Path Usage in Nushell Scripts\nDESCRIPTION: Example showing how to use relative paths in Nushell scripts for source, use, and overlay commands. Paths are relative to the script file location.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-08-16-nushell-0_67.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n# script.nu\n\nuse foo.nu *  # foo.nu is assumed to be relative to script.nu\n```\n\n----------------------------------------\n\nTITLE: Converting Record of Lists to Dataframe with as-columns Flag\nDESCRIPTION: Example demonstrating how to convert a record containing lists into a dataframe by treating each list as column values using the --as-columns flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n{a: [1 3], b: [2 4]} | polars into-df --as-columns\n```\n\n----------------------------------------\n\nTITLE: Make HTTP POST Request in Nushell, PowerShell\nDESCRIPTION: The `post` command is related to making HTTP POST requests using `HttpClient`, `WebClient`, or `HttpWebRequest/Response`. In PowerShell, `Invoke-WebRequest` is used for POST requests.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Using 'update' command with lists in Nushell\nDESCRIPTION: Example of using the 'update' command with lists in Nushell. This demonstrates how to update an element at a specific index in a list using a block function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\n[0, 2] | update 0 {|i| $i + 1 }  # will give [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Upserting into Nested Path in Nushell\nDESCRIPTION: This snippet illustrates how to upsert into a nested path, creating new values as needed, using the 'upsert' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/upsert.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n[{} {a: [{}]}] | upsert a.0.b \"value\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `mkdir` to Rust's `fs::create_dir`\nDESCRIPTION: This maps the Nushell `mkdir` command to its equivalent in Rust using the `fs::create_dir` function.  It illustrates how to create directories in Rust, similar to the functionality of `mkdir` in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_32\n\nLANGUAGE: Rust\nCODE:\n```\n\"fs::create_dir\"\n```\n\n----------------------------------------\n\nTITLE: Filtering with filter\nDESCRIPTION: This snippet indicates the use of the `filter` function in Python. `filter` applies a function to each item in an iterable and yields only the items for which the function returns `True`. It's a concise way to create a new iterable containing only the elements that meet a specific condition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n\"filter\"\n```\n\n----------------------------------------\n\nTITLE: Renaming/Moving Files with shutil\nDESCRIPTION: This snippet shows how to rename or move files using `shutil.move` in Python. The function takes the source and destination paths as arguments.  It's a convenient way to manage files and directories within your Python scripts.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"shutil.move\"\n```\n\n----------------------------------------\n\nTITLE: Nushell Pipeline Input with $in\nDESCRIPTION: This snippet shows how to use the `$in` variable to access the pipeline input and perform calculations.  It collects the input stream and multiplies the elements at indices 1 and 2.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n\"[1 2 3] | $in.1 * $in.2\n# => 6\"\n```\n\n----------------------------------------\n\nTITLE: Copying directory recursively in Nu\nDESCRIPTION: Copies a directory to a new location recursively using the 'cp' command with the '-r' flag. This copies the directory and all its contents, including subdirectories and files, to the specified destination.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n\"cp -r <source> <dest>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Directory Environment Variables in Nushell\nDESCRIPTION: Sets up directories allowed to control their own environments using the 'nu_env_dirs' config setting. This enables per-directory environment variables in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-09-nushell_0_15_0.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> config --set [nu_env_dirs [\"/home/sam\", \"/home/sam/github\", \"/home/sam/github/test\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Startup Banner Styles\nDESCRIPTION: New environment settings allow users to customize the appearance of the startup banner, including foreground color and highlight settings, enhancing the visual aesthetic of Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Exporting Constants from Modules in Nushell\nDESCRIPTION: Demonstrates how to define and export constants within modules, allowing importing and accessing module-level constants with flexible usage patterns.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-08-22-nushell_0_84_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam {\n    export const X = 'x'\n    export module eggs {\n        export const Y = 'y'\n        export const viking = 'eats'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Print Working Directory in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `pwd` command prints the current working directory. In PowerShell, `Get-Location` or `pwd` are used, while `pwd` is the standard command in Unix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Using Output from Custom Commands in Pipelines\nDESCRIPTION: Demonstrates using the output from a custom command in a pipeline, showing how command outputs can be processed by other commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nmy-ls | get name\n# => ╭───┬───────────────────────╮\n# => │ 0 │ myscript.nu           │\n# => │ 1 │ myscript2.nu          │\n# => │ 2 │ welcome_to_nushell.md │\n# => ╰───┴───────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: List Directory Contents in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `ls` command lists directory contents. In PowerShell, `Get-ChildItem`, `dir`, and `ls` are used, while `ls` is standard in Unix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Getting Current History Length in Nushell\nDESCRIPTION: This example demonstrates how to use the `history` command with the `length` command to determine the number of entries in the current command history. It takes no input and outputs the number of history entries as an integer.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/history.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\n> history | length\n\n```\n\n----------------------------------------\n\nTITLE: Opening a file as structured data in Nu\nDESCRIPTION: Reads a file as structured data using the 'open' command. This allows Nu to automatically parse and interpret the file content based on its format (e.g., JSON, CSV, TOML).\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n\"open <path>\"\n```\n\n----------------------------------------\n\nTITLE: Changing Directory and Sourcing Environment Script\nDESCRIPTION: Demonstrates how to change the current directory and source a file in separate REPL entries in Nushell. This ensures the environment is updated before sourcing a file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/how_nushell_code_gets_run.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> cd spam\n> source-env foo.nu\n# Yay, works!\n```\n\n----------------------------------------\n\nTITLE: Entering Foreground in Nushell Engine (JSON)\nDESCRIPTION: Example of an EnterForeground engine call to move the plugin to the foreground group for direct terminal access. The call includes context and id for the request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 0,\n    \"id\": 0,\n    \"call\": \"EnterForeground\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Environment Configuration in Nushell\nDESCRIPTION: Command to view the internal default environment configuration that's loaded before the user's env.nu file in Nushell 0.101+.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-04-configuration_preview.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconfig env --default | nu-highlight | less -R\n```\n\n----------------------------------------\n\nTITLE: AST Command Signature Definition\nDESCRIPTION: Defines the basic command signature for the ast command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> ast {flags} (pipeline)\n```\n\n----------------------------------------\n\nTITLE: Disabling Garbage Collection for Nushell Plugins in Rust\nDESCRIPTION: Shows how to disable and re-enable garbage collection for Nushell plugins using the EngineInterface in Rust. This is useful for plugins that need to stay running for background processing or maintaining shared resources.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nengine.set_gc_disabled(true); // Turn off garbage collection\nengine.set_gc_disabled(false); // Turn it back on\n```\n\n----------------------------------------\n\nTITLE: Working with Recorded Definitions in Nushell Overlays\nDESCRIPTION: Demonstrates how definitions recorded in overlays become unavailable when the overlay is hidden, and are restored when the overlay is reactivated, showing the persistence of overlay content.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n(spam)> overlay hide spam\n\n(zero)> eggs\nError: Can't run executable...\n\n(zero)> overlay use spam\n\n(spam)> eggs\neggs\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple URLs in Nushell\nDESCRIPTION: Processes multiple URLs from a JSON file and fetches data from each endpoint using Nushell's http get command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/http.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nopen urls.json | get urls | each { |u| http get $u }\n```\n\n----------------------------------------\n\nTITLE: HTTP POST with Binary File Upload\nDESCRIPTION: Uploads a binary file (`file.mp3`) to the specified URL, https://www.example.com, using the multipart/form-data content type. The `open -r` command reads the binary file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/http_post.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> http post --content-type multipart/form-data https://www.example.com { file: (open -r file.mp3) }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Output with Closures in Nushell\nDESCRIPTION: Shows how to use closures to dynamically compute colors for data values in Nushell's color configuration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-12-20-nushell-0.73.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nfilesize: {|e|\n\tif $e == 0b { 'dark_gray'\n\t} else if $e < 1mb { 'cyan_bold'\n\t} else { 'blue_bold' }\n}\n```\n\nLANGUAGE: nu\nCODE:\n```\nbool: { if $in { 'light_cyan' } else { 'light_gray' } }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Help Messages for Commands in Nushell\nDESCRIPTION: Demonstrates how to define custom help messages for commands using comments, which are then displayed when using the 'help' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-10-nushell_0_74.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n# Some Command\n#\n# More description goes here\ndef some-command [] { 'foo' }\n\nhelp some-command  # displays the comments in the help message\n```\n\n----------------------------------------\n\nTITLE: Fetching data from a URL\nDESCRIPTION: Fetches data from a URL using the `http get` command. The command retrieves the content from the specified URL and parses it (if possible) into a Nushell table or value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/cargando_datos.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nhttp get http://www.andresrobalino.com/feed.xml\n```\n\n----------------------------------------\n\nTITLE: Example: Defining Signature for 'echo' Command in Nushell\nDESCRIPTION: This example shows how to use the 'extern' command to define a signature for the external 'echo' command. It specifies that the command takes a single parameter 'text' of type string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/extern.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nextern echo [text: string]\n```\n\n----------------------------------------\n\nTITLE: Polars Explode Command Signature\nDESCRIPTION: The basic signature for the polars explode command, showing the command structure and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_explode.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars explode {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Structured Output in Nushell\nDESCRIPTION: Demonstrates how Nushell's ls command returns structured tabular data instead of plain text, showing files with their types, sizes, and modification times.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls\n# => ────┬────────────────────┬──────┬────────┬────────────\n# =>  #  │ name               │ type │ size   │ modified\n# => ────┼────────────────────┼──────┼────────┼────────────\n# =>   0 │ 404.html           │ File │  429 B │ 3 days ago\n# =>   1 │ CONTRIBUTING.md    │ File │  955 B │ 8 mins ago\n# =>   2 │ Gemfile            │ File │ 1.1 KB │ 3 days ago\n# =>   3 │ Gemfile.lock       │ File │ 6.9 KB │ 3 days ago\n# =>   4 │ LICENSE            │ File │ 1.1 KB │ 3 days ago\n# =>   5 │ README.md          │ File │  213 B │ 3 days ago\n# => ...\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering the Nushell Plugin\nDESCRIPTION: Commands to build, install, and register the plugin with Nushell. This makes the plugin available for use in Nushell sessions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\n> cargo install --path . --locked\n# nushell only (run with `nu -c` if not in nushell)\n> plugin add ~/.cargo/bin/nu_plugin_len # add .exe on Windows\n```\n\n----------------------------------------\n\nTITLE: Programmatic Construction of Cell-Path in Nushell\nDESCRIPTION: Shows how to construct a cell-path programmatically using the 'into cell-path' command in Nushell, demonstrating a practical example with weather data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/cellpath.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nlet grr = 2 # using IATA codes for variable names\nlet cp: cell-path = ([3, temps, $grr] | into cell-path)\n$data | get $cp\n# returns just temps for GRR\n```\n\n----------------------------------------\n\nTITLE: Incorrect One-line Format Examples\nDESCRIPTION: Demonstrates common formatting mistakes in one-line Nushell code that should be avoided.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/style_guide.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n[[status]; [UP] [UP]] | all { |el| $el.status == UP }\n[1 2 3 4] | reduce {|elt , acc| $elt + $acc }\n{ x: 1, y: 2}\n[1 2] | zip  [3 4]\n[ ]\n(1 + 2 ) * 3\n```\n\n----------------------------------------\n\nTITLE: Successful Mutable Variable Modification in For Loop\nDESCRIPTION: Shows how a 'for' loop can successfully modify a mutable variable because it uses blocks rather than closures. This is an advantage of loop statements over expression commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nmut result = []\nfor $it in [1 2 3] { $result = ($result | append ($it + 1)) }\n$result\n# => ╭───┬───╮\n# => │ 0 │ 2 │\n# => │ 1 │ 3 │\n# => │ 2 │ 4 │\n# => ╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Creating a Command That Processes Pipeline Input\nDESCRIPTION: Shows how to define a command that transforms the input it receives from a pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_16\n\nLANGUAGE: nu\nCODE:\n```\ndef double [] {\n  each { |elt| 2 * $elt }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Lowercase Hex Data\nDESCRIPTION: Shows that the decode command also accepts lowercase hexadecimal input, producing the same binary output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_hex.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"09fd\" | decode hex\nLength: 2 (0x2) bytes | printable whitespace ascii_other non_ascii\n00000000:   09 fd                                                _×\n\n```\n\n----------------------------------------\n\nTITLE: Combining Required and Rest Parameters\nDESCRIPTION: Demonstrates how to define a command with both required positional parameters and a rest parameter for additional arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [vip: string, ...name: string] {\n  print $\"hello to our VIP ($vip)\"\n  print \"and hello to everybody else:\"\n  for $n in $name {\n    echo $n\n  }\n}\n\n#     $vip          $name\n#     ---- ------------------------\ngreet moon earth mars jupiter venus\n```\n\n----------------------------------------\n\nTITLE: Renaming Overlays in Nushell\nDESCRIPTION: This snippet describes how to rename an overlay using the 'as' keyword, allowing for more descriptive names. It shows how to create a new overlay with a different name while preserving its functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/overlays.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n(zero)> module spam { export def foo [] { \"foo\" } }\n\n(zero)> overlay use spam as eggs\n\n(eggs)> foo\nfoo\n\n(eggs)> overlay hide eggs\n\n(zero)>\n```\n\n----------------------------------------\n\nTITLE: Using the 'stor' command family in Nushell\nDESCRIPTION: The 'stor' command provides access to an in-memory SQLite database. It offers several subcommands for creating, manipulating, and exporting database tables within a single Nushell instance.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-12-12-nushell_0_88_0.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\nUsage:\n  > stor\n\nSubcommands:\n  stor create - Create a table in the in-memory sqlite database\n  stor delete - Delete a table or specified rows in the in-memory sqlite database\n  stor export - Export the in-memory sqlite database to a sqlite database file\n  stor import - Import a sqlite database file into the in-memory sqlite database\n  stor insert - Insert information into a specified table in the in-memory sqlite database\n  stor open - Opens the in-memory sqlite database\n  stor reset - Reset the in-memory database by dropping all tables\n  stor update - Update information in a specified table in the in-memory sqlite database\n\nFlags:\n  -h, --help - Display the help message for this command\n\nInput/output types:\n  ╭─#─┬──input──┬─output─╮\n  │ 0 │ nothing │ string │\n  ╰───┴─────────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Parsing Git Commit Log with Nushell\nDESCRIPTION: Extracts and formats Git commit log information into a structured table, showing commit hash, committer, description, and merge date\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/git.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ngit log --pretty=%h»¦«%aN»¦«%s»¦«%aD | lines | split column \"»¦«\" sha1 committer desc merged_at | first 10\n```\n\n----------------------------------------\n\nTITLE: Signature of str downcase Command in Nushell\nDESCRIPTION: The command signature shows that 'str downcase' accepts flags and rest parameters, which are cell paths for converting strings in data structures.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_downcase.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str downcase {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Using Range Operations in Nushell\nDESCRIPTION: Demonstrates creating a numeric range from 1 to 5 that generates a table with sequential values\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n1..5\n# => ╭───┬───╮\n# => │ 0 │ 1 │\n# => │ 1 │ 2 │\n# => │ 2 │ 3 │\n# => │ 3 │ 4 │\n# => │ 4 │ 5 │\n# => ╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Hiding Imported Module Commands in Nushell\nDESCRIPTION: Example demonstrating how to hide commands imported from a module using the 'hide' command with wildcard import.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nuse greetings.nu *\n\n# => $env.MYNAME\n# => Arthur, King of the Britons\n\n# => hello \"world\"\n# => hello world!\n\nhide MYNAME\n\n$env.MYNAME  # error! environment variable not found!\n\nhide hello\n\nhello \"world\" # error! command not found!\n```\n\n----------------------------------------\n\nTITLE: Copying a file in Nu\nDESCRIPTION: Copies a file to a new location using the 'cp' command. The command requires two parameters: the source path of the file to copy and the destination path where the file should be copied.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n\"cp <source> <dest>\"\n```\n\n----------------------------------------\n\nTITLE: New Syntax for Setting Environment Variables in Nushell\nDESCRIPTION: Demonstrates the new syntax for setting environment variables in Nushell, which replaces the removed 'let-env' command. This new syntax uses the $env variable directly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/let-env.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n$env.FOO = ...\n```\n\n----------------------------------------\n\nTITLE: Rendering a Table with Icons and Colors in Nushell Grid\nDESCRIPTION: Shows how to render a table with the 'name' column using icons and colors, which is useful for directory listings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/grid.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> [[name patch]; [Cargo.toml false] [README.md true] [SECURITY.md false]] | grid --icons --color\n\n```\n\n----------------------------------------\n\nTITLE: Using 'try' to Catch Errors in Nushell\nDESCRIPTION: This example shows how to use 'try' to catch errors and continue execution. It demonstrates catching a custom error and a built-in division by zero error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\ntry { error make { msg: 'Some error info' }}; print 'Resuming'\n```\n\nLANGUAGE: nushell\nCODE:\n```\ntry { 1 / 0 }; print 'Resuming'\n```\n\n----------------------------------------\n\nTITLE: Using Flags After Spread Arguments in Nushell\nDESCRIPTION: Demonstrates that flags can be placed after spread arguments in a command call, just like with regular rest arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/operators.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\nfoo \"bar\" \"baz\" 1 ...[2 3] --flag 4\n# => [true, bar, baz, [1, 2, 3, 4]]\n```\n\n----------------------------------------\n\nTITLE: Using Do Command with Environment Modification in Nushell\nDESCRIPTION: Example of the do command with the new --env flag that allows changes to the outer environment, enabling directory changes to persist outside the do block.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-10-17-nushell_0_86.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\ndo --env { cd some/where }\n```\n\n----------------------------------------\n\nTITLE: Saving string to a file in Nu\nDESCRIPTION: Saves a string into a file using the 'save' command with the '--raw' flag. This ensures that the string is written to the file without any additional formatting or encoding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\"| save --raw <path>\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Nushell Commands\nDESCRIPTION: This snippet demonstrates how to get help information for internal Nushell commands using the `help` command. This is useful for discovering available commands and their usage.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/README.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"help\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Starship Prompt in TOML\nDESCRIPTION: Example configuration for Starship prompt in TOML format. It disables the newline, sets a custom git branch symbol, and disables git status.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nadd_newline = false\n\n[git_branch]\nsymbol = \"📙 \"\n\n[git_status]\ndisabled = true\n```\n\n----------------------------------------\n\nTITLE: Reading File Content in PowerShell\nDESCRIPTION: Demonstrates how to read file content in PowerShell using `Get-Content`, `gc`, `cat`, and `type`. These are equivalent to the `open` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-Content, gc, cat, type\"\n```\n\n----------------------------------------\n\nTITLE: While Loop in Nushell\nDESCRIPTION: Shows a while loop that executes a block of code until the given condition becomes false. This example increments a counter until it reaches 10.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/control_flow.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\nmut x = 0; while $x < 10 { $x = $x + 1 }; $x\n# => 10\n```\n\n----------------------------------------\n\nTITLE: Git Branch Completion Function in Nushell\nDESCRIPTION: Custom completion functions for git branches and remotes that provide auto-completion suggestions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"nu-complete git branches\" [] {\n  ^git branch | lines | each { |line| $line | str find-replace '\\* ' '' | str trim }\n}\n\ndef \"nu-complete git remotes\" [] {\n  ^git remote | lines | each { |line| $line | str trim }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Duplicate Values in Array\nDESCRIPTION: Example showing how to create a mask indicating duplicated values in a simple numeric array by converting it to a dataframe and applying is-duplicated.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-duplicated.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [5 6 6 6 8 8 8] | polars into-df | polars is-duplicated\n```\n\n----------------------------------------\n\nTITLE: Nushell String Matching with `!~`\nDESCRIPTION: Demonstrates string matching in Nushell using the `!~` operator. It checks if a string does not contain another string, and requires math mode via the `=` prefix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/math.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n= \"foobar\" !~ \"baz\"\n# => true\n```\n\n----------------------------------------\n\nTITLE: Updating Interprocess Dependency - Rust\nDESCRIPTION: This snippet reflects the update of the `interprocess` crate to version 2.0.1 within the Nushell project. This likely involves modifying the `Cargo.toml` file to specify the new version. Updating dependencies is crucial for leveraging the latest features, performance improvements, and security patches.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsholderbach [updated `interprocess` to 2.0.1](https://github.com/nushell/nushell/pull/12769)\n```\n\n----------------------------------------\n\nTITLE: Confirming Plugin Addition in Nushell\nDESCRIPTION: This code snippet shows how to confirm that a plugin has been successfully added to the Nushell plugin registry. The `plug list` command displays a list of all registered plugins.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/plugins.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nplug list # Confirm it was added to the registry\n```\n\n----------------------------------------\n\nTITLE: Getting Processes in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `ps` command in Nushell and PowerShell. In PowerShell, `Get-Process`, `ps`, and `gps` are used to get processes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-Process, ps, gps\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Arcsine of 1 in Degrees using Nushell\nDESCRIPTION: Shows how to use the 'math arcsin' command with the '--degrees' flag to calculate the arcsine of 1 in Nushell, returning the result in degrees.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arcsin.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 1 | math arcsin --degrees\n90\n```\n\n----------------------------------------\n\nTITLE: Stopping Polars plugin to clean up cache\nDESCRIPTION: Demonstrates how to stop the Polars plugin to clean up the cache of dataframes used during benchmarking. This is useful for freeing up memory and ensuring clean benchmark comparisons.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nplugin stop polars\n```\n\n----------------------------------------\n\nTITLE: Handling GetEnvVar Engine Call in JSON\nDESCRIPTION: Example of a GetEnvVar engine call to retrieve a specific environment variable from the caller's scope. It includes the variable name as a parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 7,\n    \"id\": 41,\n    \"call\": {\n      \"GetEnvVar\": \"PATH\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Source-env Command in Nushell\nDESCRIPTION: Shows how to use the new 'source-env' command to import environment variables from a module file into the current scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> source-env spam.nu\n\n> $env.FOO\nfoo\n\n> $env.BAR\nbar\n```\n\n----------------------------------------\n\nTITLE: Configuring External Completions with Carapace\nDESCRIPTION: Enables configuration of external completers like Carapace in Nushell configuration, allowing extended completion capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n# config.nu\nlet carapace_completer = {|spans|\n    carapace $spans.0 nushell $spans | from json\n}\n\nlet-env config = {\n    external_completer: $carapace_completer\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Plugin Interface Method - Checking IO Mode\nDESCRIPTION: Rust method to determine whether a plugin is running in stdio or local-socket mode, which affects how stdin and stdout can be used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nEngineInterface::is_using_stdio()\n```\n\n----------------------------------------\n\nTITLE: Configuring Starship Prompt in Nushell\nDESCRIPTION: Shows how to set up the Starship prompt in Nushell after the change to make Starship external. This command updates the Nu configuration to use Starship for the prompt.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-01-nushell_0_19.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nconfig set prompt `echo $(starship prompt)`\n```\n\n----------------------------------------\n\nTITLE: Enumerated List Sum with Initial Value\nDESCRIPTION: Sums list values plus their indexes using enumerate and --fold flag with initial value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[ 8 7 6 ] | enumerate | reduce --fold 0 {|it, acc| $acc + $it.item + $it.index }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating null JSON conversion in Nushell\nDESCRIPTION: Shows how null is handled in JSON conversion operations. When converting null to JSON it displays 'null', but when parsing the JSON string 'null', it produces no output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/nothing.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nnull | to json\n\"null\" | from json\n# => no output\n```\n\n----------------------------------------\n\nTITLE: Filesize Unit Formatting Improvements\nDESCRIPTION: When setting a specific filesize unit via `$env.config.filesize.unit`, sizes will now be formatted according to locale settings, providing consistency in displayed data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Stripping ANSI Escape Sequences from String in Nushell\nDESCRIPTION: Demonstrates how to use the 'ansi strip' command to remove ANSI escape sequences from a string containing color and cursor control sequences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_strip.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> $'(ansi green)(ansi cursor_on)hello' | ansi strip\nhello\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell 0.4.0 using Cargo in Rust\nDESCRIPTION: Commands to install Nushell 0.4.0 using Cargo, Rust's package manager. It provides options for basic installation and installation with all features.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-10-15-nushell-0_4_0.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo +beta install nu\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo +beta install nu --all-features\n```\n\n----------------------------------------\n\nTITLE: Opening and Viewing TOML Files in Nushell\nDESCRIPTION: Using the 'open' command to view the contents of a TOML configuration file, displaying its structure as a table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/trabalhando_com_tabelas.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nopen rustfmt.toml\n# => ---------\n# =>  edition\n# => ---------\n# =>  2018\n# => ---------\n```\n\n----------------------------------------\n\nTITLE: String Joining for Custom Command Output\nDESCRIPTION: Shows how to use 'str join' to concatenate the output of an echo command into a single string rather than separate values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [name] {\n  echo \"hello \" $name | str join\n}\n\ngreet nushell\n```\n\n----------------------------------------\n\nTITLE: Mutating Inner Values of Mutable Data Structures in Nushell\nDESCRIPTION: Demonstrates how to mutate inner values of mutable data structures using the '=' operator in Nushell 0.73.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-12-20-nushell-0.73.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n〉 mut a = { b: 1 }\n〉 $a.b = 2\n〉 $a.c = 3\n〉 $a | to nuon\n{b: 2, c: 3}\n```\n\n----------------------------------------\n\nTITLE: List Concatenation with ++ Operator in Nushell\nDESCRIPTION: Demonstrates using the new ++ operator to concatenate two lists in Nushell 0.71. The operator combines elements from both lists into a new list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-08-nushell-0.71.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n[1, 2] ++ [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Explicit Nushell Command with Autoview\nDESCRIPTION: Demonstrates explicitly using the autoview command in a Nushell pipeline. This is equivalent to the simple ls command, as Nushell automatically adds autoview to pipelines without an output command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/pipeline.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nls | autoview\n```\n\n----------------------------------------\n\nTITLE: Nushell $in Scope in each block\nDESCRIPTION: Illustrates that $in is the same throughout the scope of an `each` block when used in the first position of any pipeline inside that scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n[ a b c ] | each {\n  print $in\n  print $in\n  $in\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Nushell Data to External Commands\nDESCRIPTION: Shows how to pass data from Nushell to external commands using the ^ prefix and $it variable, which refers to the current value in the pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nsys | get host.sessions | ^echo $it\n# => sophia\n```\n\n----------------------------------------\n\nTITLE: Math Operations in Nushell\nDESCRIPTION: Shows various examples of using math operations in Nushell including basic arithmetic and membership testing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-21-nushell_0_13_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n= 3 + 4\nls | get size | = $it + 1mb\n= a in: [a b c]\n= d in: [a b c]\nls | where name > 'f' && size > 1kb\n= (1 + 2) * (3 + 4)\n```\n\n----------------------------------------\n\nTITLE: Setting environment variable for current session in Nu\nDESCRIPTION: Sets an environment variable for the current session using `$env.FOO = BAR`. This change only affects the current session and is not persisted across sessions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_25\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.FOO = BAR\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins via Cargo in Rust\nDESCRIPTION: Command to install Nushell plugins using Cargo. The placeholder '<plugin name>' should be replaced with the actual plugin name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-10-05-nushell_0_38.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Keybinding Options in Nushell\nDESCRIPTION: This example demonstrates how to use the 'keybindings list' command without any flags to get a list of all available keybinding options in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_list.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> keybindings list\n```\n\n----------------------------------------\n\nTITLE: Listing Directories Themselves\nDESCRIPTION: Example of using the 'ls' command with the -D flag to list given paths and show directories themselves.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ls.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n> ['/path/to/directory' '/path/to/file'] | each {|| ls -D $in } | flatten\n```\n\n----------------------------------------\n\nTITLE: Handling GetCurrentDir Engine Call in JSON\nDESCRIPTION: Example of a GetCurrentDir engine call to retrieve the current directory path in the caller's scope. It returns an absolute path as a string Value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EngineCall\": {\n    \"context\": 7,\n    \"id\": 40,\n    \"call\": \"GetCurrentDir\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Objects in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `sum` command in Nushell and PowerShell. In PowerShell, `Measure-Object` and `measure` are used to calculate the sum.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_34\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Measure-Object, measure\"\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Where Clause Syntax\nDESCRIPTION: Illustrates the syntax changes for where clauses between versions 0.12.0 and 0.13.0.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-21-nushell_0_13_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nls | where { $it.size > 10kb }\nls | where { = $it.size > 10kb }\nls | where size > 10kb\nls | where $it.size > 10kb\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `pwd` to Rust's `env::current_dir`\nDESCRIPTION: Demonstrates the equivalent of Nushell's `pwd` command in Rust using the `env::current_dir` function.  This function returns the current working directory.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_36\n\nLANGUAGE: Rust\nCODE:\n```\n\"env::current_dir\"\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Commands Display\nDESCRIPTION: HTML table structure with Vue.js directives that displays filtered commands and their descriptions. Uses v-for to iterate through commands and creates links to individual command documentation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/bits.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Grid Command Signature in Nushell\nDESCRIPTION: The basic signature for the `grid` command in Nushell, showing how it's invoked with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/grid.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> grid {flags} \n```\n\n----------------------------------------\n\nTITLE: Flattening a Simple Table in Nushell\nDESCRIPTION: Demonstrates how to flatten a nested list into a single-column table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/flatten.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[N, u, s, h, e, l, l]] | flatten\n╭───┬───╮\n│ 0 │ N │\n│ 1 │ u │\n│ 2 │ s │\n│ 3 │ h │\n│ 4 │ e │\n│ 5 │ l │\n│ 6 │ l │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Converting List of Tables to Dataframe in Nushell\nDESCRIPTION: Example showing how to convert a list of tables into a dataframe with automatic column numbering.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n[[1 2 a] [3 4 b] [5 6 c]] | polars into-df\n```\n\n----------------------------------------\n\nTITLE: Defining External Commands in Nushell Modules\nDESCRIPTION: Shows the new syntax for defining external commands and custom completions in Nushell modules using the 'main' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-31-nushell_0_75.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n# cargo.nu\n\nexport extern main [--version, --color: string@cargo-color-complete]\n\nexport extern check [--quiet]\n\ndef cargo-color-complete [] {\n    [ auto, always, never ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unfreezing Specific Jobs by ID in Nushell\nDESCRIPTION: Demonstrates how to unfreeze a specific background job by providing its ID to the job unfreeze command, allowing control over multiple suspended jobs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/background_jobs.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nvim\n# => Job 1 is frozen\n\nlong_running_process\n# => Job 2 is frozen\n\njob unfreeze 1\n# we're back in vim\n```\n\n----------------------------------------\n\nTITLE: Listing Processes with ps Command in Nushell\nDESCRIPTION: Shows how Nushell's ps command returns a structured table of running processes with information about their status, CPU and memory usage, rather than plain text output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nps\n# => ─────┬───────┬──────────────────┬─────────┬─────────┬──────────┬─────────\n# =>  #   │ pid   │ name             │ status  │ cpu     │ mem      │ virtual\n# => ─────┼───────┼──────────────────┼─────────┼─────────┼──────────┼─────────\n# =>    0 │ 33155 │ nu_plugin_core_p │ Running │  3.8496 │   1.8 MB │  4.4 GB\n# =>    1 │ 32841 │ mdworker_shared  │ Running │  0.0000 │  19.3 MB │  4.4 GB\n# =>    2 │ 32829 │ CoreServicesUIAg │ Running │  0.0000 │  16.1 MB │  4.5 GB\n# =>    3 │ 32828 │ mdworker_shared  │ Running │  0.0000 │  23.0 MB │  4.4 GB\n```\n\n----------------------------------------\n\nTITLE: Cargo.toml Configuration for Nushell Plugin\nDESCRIPTION: The package configuration file with necessary dependencies for building a Nushell plugin. It includes the nu-plugin and nu-protocol packages required for plugin development.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"nu_plugin_len\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nnu-plugin = \"0.92.0\" # These version numbers may differ\nnu-protocol = \"0.92.0\"\n```\n\n----------------------------------------\n\nTITLE: Executing Date Now Command in Nushell\nDESCRIPTION: The 'date now' command retrieves the current date and time. It takes no arguments and returns a datetime value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_now.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ndate now {flags}\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Prompt with Directory, Git Branch, and Timestamp\nDESCRIPTION: Complex example creating a multi-line prompt that displays the current directory in green, git branch in blue, and the current date and time in cyan.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-30-nushell_0_16_0.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconfig --set [prompt 'echo [ $(ansi green) $(pwd) $(ansi reset) $(do -i {git rev-parse --abbrev-ref HEAD } | trim | echo [ \"(\" $(ansi blue) $it $(ansi reset) \")\" ] | str join) $(char newline) $(ansi cyan) $(date --format \"%d/%m/%Y %H:%M:%S\").formatted $(ansi reset) \"> \" ]']\n```\n\n----------------------------------------\n\nTITLE: Initializing Command with Optional Parentheses in Nushell\nDESCRIPTION: Adds support for defining command signatures using parentheses, providing more language familiarity and syntax flexibility.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-09-06-nushell-0_68.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndef foo (x: int) { $x + 100 }\n```\n\n----------------------------------------\n\nTITLE: Skipping Elements Until Positive Value in Nushell\nDESCRIPTION: Demonstrates using 'skip until' to skip elements in a list until a positive number is encountered.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_until.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[-2 0 2 -1] | skip until {|x| $x > 0 }\n```\n\n----------------------------------------\n\nTITLE: Formatting File Sizes with Different Units - Nushell\nDESCRIPTION: This snippet demonstrates how file sizes can be formatted using metric and binary units in Nushell. It includes examples for defining a unit as kB, KiB, metric, or binary, along with their expected outputs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n# unit = kB\n1kB  # => 1 kB\n1KiB # => 1.024 kB\n\n# unit = KiB\n1kB  # => 0.9765625 KiB\n1KiB # => 1 KiB\n\n# unit = metric\n1000B     # => 1 kB\n1024B     # => 1.024 kB\n10_000MB  # => 10 GB\n10_240MiB # => 10.73741824 GB\n\n# unit = binary\n1000B     # => 1000 B\n1024B     # => 1 KiB\n10_000MB  # => 9.313225746154785 GiB\n10_240MiB # => 10 GiB\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom Command in Nushell\nDESCRIPTION: This snippet shows how to define a simple custom command named 'greet' that takes a name parameter and outputs a greeting to that name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [name] {\n  echo \"hello\" $name\n}\n```\n\n----------------------------------------\n\nTITLE: Hash Command Signature in Nushell\nDESCRIPTION: The command signature for the 'hash' command in Nushell, showing its basic usage pattern. This is a parent command that requires using one of its subcommands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> hash {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting Float to Boolean - Nushell\nDESCRIPTION: This snippet demonstrates converting a floating-point number (0.3) into a boolean value, with the command returning true for any non-zero float.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> 0.3 | into bool\ntrue\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in Nushell Commands\nDESCRIPTION: Demonstrates how to mark a parameter as optional by adding a question mark after its name, allowing it to be omitted when calling the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [name?: string] {\n  echo \"hello\" $name | str join\n}\n\ngreet\n```\n\n----------------------------------------\n\nTITLE: Getting Computer Information in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `sys` command in Nushell and PowerShell. In PowerShell, `Get-ComputerInfo` is used to retrieve system information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_35\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-ComputerInfo\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Line Record in Nushell\nDESCRIPTION: Illustrates how to create a record using line breaks to separate key-value pairs. The record contains 'name' and 'rank' fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/record.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> {\n      name: \"Sam\"\n      rank: 10\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Command Parameters\nDESCRIPTION: Shows how to specify the expected type for a parameter in a custom command definition, which enables type checking when the command is called.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [name: string] {\n  echo \"hello \" $name | str join\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Evaluation with Source Command\nDESCRIPTION: Demonstrates the use of a constant in the `source` command for parsing in Nushell, explaining the step-by-step parsing and evaluation process of a defined constant.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/how_nushell_code_gets_run.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nconst my_path = \"~/nushell-files\"\nsource $\"($my_path)/common.nu\"\n```\n\n----------------------------------------\n\nTITLE: Merging Three Tables Using Chunks in Nushell\nDESCRIPTION: Demonstrates how to merge three tables of different sizes using chunks and flatten commands multiple times.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/tables.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n$first_table\n| chunks ($second_table | length)\n| each { merge $second_table }\n| flatten\n| chunks ($third_table | length)\n| each { merge $third_table }\n| flatten\n```\n\n----------------------------------------\n\nTITLE: Using New 'filter' Command in Nushell\nDESCRIPTION: Demonstrates the usage of the new 'filter' command introduced in Nushell 0.73, which replaces the '-b' flag of 'where' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-12-20-nushell-0.73.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[{a: 1} {a: 2}] | filter {|x| $x.a > 1}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive File Sorting\nDESCRIPTION: Example demonstrating case-insensitive sorting of files by name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort-by.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> ls | sort-by name --ignore-case\n```\n\n----------------------------------------\n\nTITLE: Rotating List of Integers Left\nDESCRIPTION: Example of rotating a list of numbers [5 3 2] left by 2 bits, showing table output format\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_rol.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [5 3 2] | bits rol 2\n╭───┬────╮\n│ 0 │ 20 │\n│ 1 │ 12 │\n│ 2 │  8 │\n╰───┴────╯\n\n```\n\n----------------------------------------\n\nTITLE: Running Nushell Plugin in stdio Mode\nDESCRIPTION: Demonstrates how to run a Nushell plugin in stdio mode, which enables direct communication with the plugin through standard input/output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n$ ./target/release/nu_plugin_len --stdio\njson\n```\n\n----------------------------------------\n\nTITLE: Table Data Selection and Extraction\nDESCRIPTION: Introduces `select` and `get` commands for manipulating table data, demonstrating column and row selection techniques.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\nls | select name\nls | select 1\nls | get name\nls | get 1\nls | get size.1\n```\n\n----------------------------------------\n\nTITLE: Nushell String Matching with `=~`\nDESCRIPTION: Demonstrates string matching in Nushell using the `=~` operator. It checks if a string contains another string, and requires math mode via the `=` prefix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/math.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n= \"foobar\" =~ \"foo\"\n# => true\n```\n\n----------------------------------------\n\nTITLE: Echo Numbers List Example\nDESCRIPTION: Example showing how to echo a list of numbers in Nushell, which creates a table output equivalent to [1 2 3].\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/echo.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> echo 1 2 3\n╭───┬───╮\n│ 0 │ 1 │\n│ 1 │ 2 │\n│ 2 │ 3 │\n╰───┴───╯\n\n```\n\n----------------------------------------\n\nTITLE: Using describe Command in Nushell\nDESCRIPTION: Demonstrates the usage of the describe command to inspect the type of a list value. The describe command takes any input and returns its type signature.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/related_commands.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n[foo bar baz] | describe\n# => list<string>\n```\n\n----------------------------------------\n\nTITLE: Displaying Text File Content in PowerShell\nDESCRIPTION: Demonstrates how to display text file content in PowerShell using `Get-Content` and `cat`. This is equivalent to the `textview` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_37\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-Content, cat\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Command Parameters\nDESCRIPTION: Demonstrates how to define a parameter with a default value, making it optional when calling the command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [name = \"nushell\"] {\n  echo \"hello \" $name | str join\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins with Cargo\nDESCRIPTION: Command for installing Nushell plugins using Cargo, where <plugin name> should be replaced with the specific plugin name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-05-11-nushell_0_31.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Removal of into bits Command\nDESCRIPTION: The `into bits` command has been removed, as it was deprecated. Users should transition to using the `format bits` command instead.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Indexing and Element Access in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `nth` command in Nushell and PowerShell. In PowerShell, `[x]` and `ElementAt` are used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"[x], indexing operator, ElementAt\"\n```\n\n----------------------------------------\n\nTITLE: Selecting the Last Elements in Nushell and PowerShell\nDESCRIPTION: This snippet shows how to select the last elements of a list/array in Nushell and PowerShell.  In PowerShell, `Select-Object -Last` is used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Select-Object -Last\"\n```\n\n----------------------------------------\n\nTITLE: Finding Index of a String in Nushell\nDESCRIPTION: Returns the starting index of a substring '.rb' within 'my_library.rb'. The result is 10, which is the position where '.rb' begins.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_index-of.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n'my_library.rb' | str index-of '.rb'\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Paths with ls Command in Nushell\nDESCRIPTION: Demonstrates how to use the ls command with multiple directories, either by spreading a list or specifying multiple directories directly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\nls ...[directory1 directory2]\n```\n\nLANGUAGE: nushell\nCODE:\n```\nls directory1 directory2\n```\n\n----------------------------------------\n\nTITLE: Listing Reedline Events and Edit Commands in Nushell\nDESCRIPTION: This example shows how to use the 'keybindings list' command to get a list of reedline events and edit commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_list.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> keybindings list -e -d\n```\n\n----------------------------------------\n\nTITLE: Nushell Module Definition\nDESCRIPTION: Illustrates two ways of creating modules: using the `module` keyword and creating modules from separate files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\nmodule greetings {\n  export def greet [] {\n    print \"hello!\"\n  }\n}\n\nuse greetings greet\ngreet\n```\n\nLANGUAGE: nu\nCODE:\n```\n# greetings.nu\nexport def greet [] {\n  print \"hello!\"\n}\n\n# main.nu\nuse greetings.nu greet\ngreet\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Color Configuration in Nushell\nDESCRIPTION: A simple command to display the current color configuration in Nushell by accessing the $env.config.color_config environment variable and sorting the results for better readability.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coloring_and_theming.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.color_config | sort\n```\n\n----------------------------------------\n\nTITLE: Renaming Columns with rename Command\nDESCRIPTION: Shows how to rename columns in a table using the rename command, changing the default column names from a directory listing to custom names\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/working_with_tables.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nls | rename filename filetype filesize date\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Parameters with Spaces in Nushell\nDESCRIPTION: Shows how to define a command with multiple parameters separated by spaces, one common way to format parameter lists.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\n# Spaces\ndef greet [name1 name2] {\n  $\"Hello, ($name1) and ($name2)!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting In-memory Database Example in Nu Shell\nDESCRIPTION: Example showing how to reset the in-memory sqlite database using the 'stor reset' command. This command drops all tables in the database.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_reset.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> stor reset\n\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Extra Features\nDESCRIPTION: Command to install Nushell with additional optional features. This provides a more complete installation with all available functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-12-15-nushell_0_24.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Comparing Strings in Nushell\nDESCRIPTION: Illustrates various string comparison operations in Nushell, including equality, inequality, and lexicographic ordering.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/string.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n\"apple\" == \"apple\"\n\"apple\" != \"banana\"\n\"apple\" < \"banana\"\n\"banana\" > \"apple\"\n\"apple\" <= \"apple\"\n\"banana\" >= \"apple\"\n```\n\n----------------------------------------\n\nTITLE: Importing Module Environment in Export-Env Block\nDESCRIPTION: Another correct approach to import a module's environment by using an 'export-env' block in the importing module.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/creating_modules.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\nuse my-utils\nexport-env {\n    use my-utils []\n}\n\nexport def --env home [] {\n    cd ~\n}\n\nexport def --env modules [] {\n    cd $env.NU_MODULES_DIR\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from a virtual directory\nDESCRIPTION: This example shows how to import a module from a virtual directory.  Here we're using a `std` directory which is a virtual file system.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/modules/using_modules.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nuse std/assert\nassert equal 'string1' \"string1\"\n```\n\n----------------------------------------\n\nTITLE: Converting Snake_Case String to camelCase in Nushell\nDESCRIPTION: Example showing how to convert a snake_case string 'this_is_the_second_case' to camelCase format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_camel-case.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n>  'this_is_the_second_case' | str camel-case\nthisIsTheSecondCase\n```\n\n----------------------------------------\n\nTITLE: Old It-Expansion Syntax in Nushell\nDESCRIPTION: Shows the previous it-expansion syntax that has been removed in version 0.22.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-03-nushell_0_22.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nls | echo $it.name\n```\n\n----------------------------------------\n\nTITLE: Small Input Binary AND Operation\nDESCRIPTION: Shows bitwise AND operation with little-endian byte ordering where input is smaller than the operand.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_and.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[ff] | bits and 0x[12 34 56] --endian little\n```\n\n----------------------------------------\n\nTITLE: Concatenating Tables in Nushell\nDESCRIPTION: This snippet shows how to create two tables and concatenate them using the append command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nlet first = [[a b]; [1 2]]\nlet second = [[a b]; [3 4]]\n$first | append $second\n```\n\n----------------------------------------\n\nTITLE: Listing Markdown Files using Glob Pattern\nDESCRIPTION: Shows how to use glob patterns to filter and list specific file types with wildcard matching\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nls *.md\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Commands for installing Nushell using Rust's cargo package manager. Includes options for basic installation and installation with extra features.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-12-07-nushell_0_41.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Using Default Start Value in Nushell Ranges\nDESCRIPTION: Demonstrates that omitting the start value in a range defaults to 0, shown by comparing an explicit and implicit range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/basic_types/range.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> (..5) == (0..5)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Listing all available commands in Nu\nDESCRIPTION: Lists all available commands in Nu using the 'help commands' command. This provides a comprehensive overview of all the commands that can be used in the Nu shell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_15\n\nLANGUAGE: nu\nCODE:\n```\n\"help commands\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Subcommand in Nushell\nDESCRIPTION: Demonstrates how to define a subcommand for an existing command (in this case 'str') by using a quoted command name with a space.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\ndef \"str mycommand\" [] {\n  echo hello\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bytes at Specific Index in Nushell\nDESCRIPTION: Example showing how to add bytes '0x[AA BB]' to binary data '0x[1F FF AA AA]' at index position 1.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_add.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n0x[1F FF AA AA] | bytes add 0x[AA BB] --index 1\n```\n\n----------------------------------------\n\nTITLE: Simple Nushell Command with Implicit Autoview\nDESCRIPTION: Shows a basic Nushell command that implicitly uses the autoview command to display results. The ls command acts as an input that generates data to be displayed.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/pipeline.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Handling Goodbye Message in JSON\nDESCRIPTION: Example of a Goodbye message indicating that no further plugin calls are expected and the plugin should exit after processing in-progress calls.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"Goodbye\"\n```\n\n----------------------------------------\n\nTITLE: Combining Type Annotations with Default Values\nDESCRIPTION: Shows how to specify both a type requirement and a default value for a command parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\ndef congratulate [age: int = 18] {\n  echo \"Happy birthday! Wow you are \" $age \" years old now!\" | str join\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell via Cargo\nDESCRIPTION: Command to install Nushell using Rust's package manager Cargo, with options for standard and dataframe installations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-04-nushell_0_92_1.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=dataframe\n```\n\n----------------------------------------\n\nTITLE: Command Signature in Nushell\nDESCRIPTION: The command signature shows the syntax for the 'into sqlite' command, which takes optional flags and a required file-name parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_sqlite.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> into sqlite {flags} (file-name)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Command that Processes Pipeline Input\nDESCRIPTION: Defines a 'double' command that processes each item in the input pipeline, showing how custom commands can transform pipeline data.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\ndef double [] {\n  each { |num| 2 * $num }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the New 'enumerate' Command in Nushell\nDESCRIPTION: Shows how to use the new 'enumerate' command to add an index and item record for each item in the input stream.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-31-nushell_0_75.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nls | enumerate | get 14\n```\n\n----------------------------------------\n\nTITLE: Combined Stdout and Stderr Redirection in Nushell\nDESCRIPTION: Demonstrates how to redirect both stdout and stderr of an external command to a single file in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\ncat unknown.txt out+err> log.log\n```\n\n----------------------------------------\n\nTITLE: Flexible Flag Positioning\nDESCRIPTION: Shows the new flexibility in flag positioning when using Nu commands, allowing flags to be placed before or after arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-02-18-nushell-0_10_0.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n> ls *.sh --full\n\n> ls --full *.sh\n```\n\n----------------------------------------\n\nTITLE: Rust Type References in Nu Shell Documentation\nDESCRIPTION: References to key Rust types used in Nu shell's command system implementation, including PipelineData for inter-command communication and Command/Signature traits for command definition.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/commands.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nPipelineData\n```\n\nLANGUAGE: rust\nCODE:\n```\nCommand\n```\n\nLANGUAGE: rust\nCODE:\n```\nSignature\n```\n\n----------------------------------------\n\nTITLE: Using a Nushell Module with Prefixed Commands\nDESCRIPTION: Example of importing a module with the 'use' command and accessing its exported commands with the module name as prefix.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nuse greetings\n\n# => greetings hello \"world\"\n# => hello world!\n\ngreetings hi \"there\"\n# => hi there!\n```\n\n----------------------------------------\n\nTITLE: Renaming columns in Nushell\nDESCRIPTION: This example demonstrates the usage of the new 'rename' command to change column names in the output of 'help commands'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-10-nushell_0_11_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands | rename action description\n```\n\n----------------------------------------\n\nTITLE: Changing and Creating Directories in NuShell\nDESCRIPTION: This snippet demonstrates commands in NuShell for changing directories, both to specified and home directories, as well as creating new directories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_bash.md#2025-04-19_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n`cd <directory>`                                              | Change to the given directory\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`cd`                                                          | Change to the home directory\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`mkdir <path>`                                                | Creates the given path\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`mkdir <path>`                                                | Creates the given path, creating parents as necessary\n```\n\n----------------------------------------\n\nTITLE: Escape Sequence Usage in Double-Quoted Strings\nDESCRIPTION: Demonstrates the use of ANSI escape sequences within double-quoted strings to add color formatting to text output in the terminal.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/strings_and_text.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n\"\\e[31mHello\\e[35m Nushell\\e[0m\"\n```\n\n----------------------------------------\n\nTITLE: Forcing Index Column Display in Nushell Tables\nDESCRIPTION: Example demonstrating how to explicitly force the display of the index column by setting the '-i' parameter to true.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/table.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n> [[a b]; [1 2] [2 [4 4]]] | table -i true\n```\n\n----------------------------------------\n\nTITLE: Group-By Variance Aggregation\nDESCRIPTION: Example demonstrating how to perform variance aggregation with group-by operations.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_var.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [one 2] [one 2] [two 1] [two 1]]\n                    | polars into-df\n                    | polars group-by a\n                    | polars agg (polars col b | polars var)\n                    | polars collect\n                    | polars sort-by a\n```\n\n----------------------------------------\n\nTITLE: Implementing Carapace Completer in Nushell\nDESCRIPTION: Basic implementation of a Carapace-based command completer that converts JSON output into Nushell completions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/external_completers.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet carapace_completer = {|spans|\n    carapace $spans.0 nushell ...$spans | from json\n}\n```\n\n----------------------------------------\n\nTITLE: Short Names for Colors and Styles\nDESCRIPTION: Example showing the use of abbreviated color and style names.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> $'(ansi rb)Hello(ansi reset) (ansi gd)Nu(ansi reset) (ansi pi)World(ansi reset)'\nHello Nu World\n```\n\n----------------------------------------\n\nTITLE: Creating a Per-Directory Environment File in Nushell\nDESCRIPTION: Shows the contents of a '.nu-env' file used to set directory-specific environment variables in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-09-nushell_0_15_0.md#2025-04-19_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n> open .nu-env\n[env]\nvar = \"value\"\nanothervar = \"anothervalue\"\n```\n\n----------------------------------------\n\nTITLE: Square Number Calculation using For Loop\nDESCRIPTION: Example demonstrating how to iterate over a list of numbers and print their squares.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/for.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> for x in [1 2 3] { print ($x * $x) }\n```\n\n----------------------------------------\n\nTITLE: Read All Lines From File in PowerShell\nDESCRIPTION: The `lines` command reads all lines from a file. In PowerShell, `File.ReadAllLines()` performs this action.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Matching Three-Byte Pattern in Nushell\nDESCRIPTION: Example showing how to check if a binary sequence starts with a three-byte pattern 0x[1F FF AA].\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_starts-with.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[1F FF AA AA] | bytes starts-with 0x[1F FF AA]\n```\n\n----------------------------------------\n\nTITLE: Defining the Signature for 'into string' Command in Nushell\nDESCRIPTION: Shows the command signature for the 'into string' conversion command in Nushell, indicating it accepts flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_string.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> into string {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Using the $in Variable in Custom Commands\nDESCRIPTION: Demonstrates storing pipeline input in the $in variable for use in more complex command logic.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\ndef nullify [...cols] {\n  let start = $in\n  $cols | reduce --fold $start { |col, df|\n    $df | upsert $col null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expressions for Redirection Paths in Nushell\nDESCRIPTION: Demonstrates how to use expressions to generate file paths for redirections in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/stdout_stderr_exit_codes.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\nuse std\ncat unknown.txt o+e> (std null-device)\n```\n\n----------------------------------------\n\nTITLE: Defining nu-highlight Command Signature in Nushell\nDESCRIPTION: Specifies the signature for the nu-highlight command, which takes optional flags and does not require any mandatory arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/nu-highlight.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> nu-highlight {flags} \n```\n\n----------------------------------------\n\nTITLE: Source File Definition Example\nDESCRIPTION: Shows content of an external definitions file that can be sourced into the current context.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n# definitions.nu\ndef add [x, y] {\n    = x + y\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Table to Dataframe in Nushell\nDESCRIPTION: Example showing how to convert a table with two columns into a dataframe using the polars into-df command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_into-df.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n[[a b];[1 2] [3 4]] | polars into-df\n```\n\n----------------------------------------\n\nTITLE: String Manipulation and Trim Operations Across Languages\nDESCRIPTION: Comparison of string trimming and manipulation methods in various programming languages, showing different approaches to removing whitespace\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map_imperative.md#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nstrip, rstrip, lstrip\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntrim, trimStart, trimEnd\n```\n\nLANGUAGE: Rust\nCODE:\n```\nregex trim\n```\n\nLANGUAGE: Nushell\nCODE:\n```\ntrim, trim*{start,end}, strip*{suffix,prefix}\n```\n\n----------------------------------------\n\nTITLE: Displaying a dataframe in Nushell\nDESCRIPTION: Shows how to display the contents of a dataframe by sending the dataframe variable to the stream. This allows viewing the actual data in a tabular format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/dataframes.md#2025-04-19_snippet_10\n\nLANGUAGE: nu\nCODE:\n```\n$df_1\n```\n\n----------------------------------------\n\nTITLE: Encoding Float Value in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of encoding a float value in JSON format for the Nushell plugin protocol, including span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Float\": {\n    \"val\": 36.4,\n    \"span\": {\n      \"start\": 8040,\n      \"end\": 8044\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Signature for 'use' in Nushell\nDESCRIPTION: Specifies the syntax for using the 'use' command in Nushell, including flags, module parameter, and rest arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/use.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nuse {flags} (module) ...rest\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'math max' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'math max' function in Nushell, which takes optional flags as arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_max.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math max {flags}\n```\n\n----------------------------------------\n\nTITLE: Custom NDJSON Parser\nDESCRIPTION: Creates a custom parser for opening newline-delimited JSON files using the open command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/open.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndef \"from ndjson\" [] { from json -o }; open myfile.ndjson\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'term size' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'term size' command, which takes no arguments and returns terminal dimensions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term_size.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> term size {flags} \n```\n\n----------------------------------------\n\nTITLE: Nushell Plugin Add Command Signature\nDESCRIPTION: The signature for the 'plugin add' command in Nushell, showing the basic syntax including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/plugin_add.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> plugin add {flags} (filename)\n```\n\n----------------------------------------\n\nTITLE: Defining Command Signature in Nushell\nDESCRIPTION: Shows the basic command signature format for export def command including flags, command name, parameters and code block.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_def.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> export def {flags} (def_name) (params) (block)\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `print` to Python's `print`\nDESCRIPTION: Demonstrates the direct equivalent of Nushell's `print` command in Python using the `print` function. This function outputs the specified arguments to the standard output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n\"print\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Signature for polars get-day Command in Nushell\nDESCRIPTION: Shows the command signature format for the 'polars get-day' command, which takes flags but no positional arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-day.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars get-day {flags} \n```\n\n----------------------------------------\n\nTITLE: Polars Command Signature\nDESCRIPTION: The basic syntax for the polars get-week command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-week.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars get-week {flags} \n```\n\n----------------------------------------\n\nTITLE: Setting Hard Virtual Memory Size Limit in Nushell\nDESCRIPTION: Example showing how to set the hard virtual memory size limit to 10240 using the ulimit command with -v and -H flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ulimit.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> ulimit -v -H 10240\n```\n\n----------------------------------------\n\nTITLE: Showing Help for All Aliases in Nushell\nDESCRIPTION: The 'help aliases' command provides help information for all defined aliases in Nushell. This command does not require any parameters and outputs a table listing all aliases.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_aliases.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> help aliases\n\n```\n\n----------------------------------------\n\nTITLE: Removing an Overlay in Nushell\nDESCRIPTION: Shows how to remove an overlay using the 'overlay hide' command with the overlay name as an argument. Demonstrates that commands from the removed overlay are no longer available.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/overlays.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n(spam)> overlay hide spam\n\n(zero)> foo\nError: Can't run executable...\n\n(zero)> overlay list\n───┬──────\n 0 │ zero\n───┴──────\n```\n\n----------------------------------------\n\nTITLE: Adding Bytes to Binary Data in Nushell\nDESCRIPTION: Example demonstrating how to add bytes '0x[AA]' to an existing binary value '0x[1F FF AA AA]'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_add.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n0x[1F FF AA AA] | bytes add 0x[AA]\n```\n\n----------------------------------------\n\nTITLE: Using stor open Command in Nushell\nDESCRIPTION: Example of using the 'stor open' command in Nushell to open an in-memory SQLite database. The command requires no parameters and returns a database connection.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_open.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> stor open\n\n\n```\n\n----------------------------------------\n\nTITLE: JSON Output in Nushell\nDESCRIPTION: Shows how to convert Nushell data back to JSON format using the to json command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n'[{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}]'\n| from json\n| to json\n```\n\n----------------------------------------\n\nTITLE: Modulo Operation with Durations in Nushell\nDESCRIPTION: Showcases the `mod` operator working with durations in Nushell. Previous implementations only supported `int` and `float`, but now durations can be operands, which are numbers with units.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-11-14-nushell_0_87_0.md#2025-04-19_snippet_10\n\nLANGUAGE: nushell\nCODE:\n```\n> (2min + 31sec) mod 20sec\n```\n\n----------------------------------------\n\nTITLE: Streaming with Infinite Input in Nushell\nDESCRIPTION: Demonstrates how Nushell commands can process streaming data, even with infinite input sources, by connecting the double command to an infinite range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\n1.. | each {||} | double\n```\n\n----------------------------------------\n\nTITLE: Standard Unix Timestamp Conversion in Nushell\nDESCRIPTION: This snippet illustrates how to convert a standard (seconds) Unix timestamp to a UTC datetime.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_datetime.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> 1614434140 | into datetime -f '%s'\nSat, 27 Feb 2021 13:55:40 +0000 (4 years ago)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for Length Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'length' command in Nushell. It shows that the command takes optional flags but no required arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/length.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> length {flags} \n```\n\n----------------------------------------\n\nTITLE: Using Headers Command Signature in Nushell\nDESCRIPTION: The signature for the 'headers' command in Nushell, which is used to convert the first row of a table into column headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/headers.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> headers {flags} \n```\n\n----------------------------------------\n\nTITLE: Encoding Error Data Message in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of a Data message containing an error in JSON format for the Nushell plugin protocol.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Data\": [\n    0,\n    {\n      \"Raw\": {\n        \"Err\": {\n          \"IOError\": {\n            \"msg\": \"disconnected\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Stored Condition with 'skip while' in Nushell\nDESCRIPTION: Shows how to use a pre-defined condition with 'skip while' to skip negative elements in a list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_while.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet cond = {|x| $x < 0 }; [-2 0 2 -1] | skip while $cond\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Export Use Command in Nushell\nDESCRIPTION: Shows an example of re-exporting a command from another module using the 'export use' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_use.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nmodule spam { export def foo [] { \"foo\" } }\n    module eggs { export use spam foo }\n    use eggs foo\n    foo\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on Windows using winget\nDESCRIPTION: Command to install Nushell on Windows systems using the winget package manager. After installation, Nushell can be launched by typing 'nu'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install nushell\n```\n\n----------------------------------------\n\nTITLE: Moving Columns in Table with move Command\nDESCRIPTION: Demonstrates how to reposition a column in a table using the move command, specifically moving the 'name' column after the 'size' column in a directory listing\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/working_with_tables.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nls | move name --after size\n```\n\n----------------------------------------\n\nTITLE: Splitting String into Characters in Nushell\nDESCRIPTION: Shows how to use the new 'split chars' command to split a string into individual characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> echo \"hello\" | split chars\n```\n\n----------------------------------------\n\nTITLE: Listing Top Five Largest Files in Nu\nDESCRIPTION: Example Nushell command to list the top five largest files in a directory, demonstrating syntax highlighting in documentation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n# List the top five largest files\nls | where type == file | sort-by -r size | first 5\n```\n\n----------------------------------------\n\nTITLE: Selecting Single Column from Table\nDESCRIPTION: Demonstrates selecting a single column 'a' from a table containing records.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/select.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [{a: a b: b}] | select a\n╭───┬───╮\n│ # │ a │\n├───┼───┤\n│ 0 │ a │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Block Representation in Nushell\nDESCRIPTION: JSON representation of a block of Nushell code with no captured variables. Contains a block ID and span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Block\": {\n    \"val\": 44500,\n    \"span\": {\n      \"start\": 59400,\n      \"end\": 59480\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Directory Navigation in Nushell\nDESCRIPTION: Example showing that the cd command is often optional in Nushell, as simply entering a path to a directory will change to it.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cd.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n> /home\n\n```\n\n----------------------------------------\n\nTITLE: Changelog Table Format in Markdown\nDESCRIPTION: Markdown table structure showing pull request contributions with author, title and link columns\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| author | title | link |\n| ------ | ----- | ---- |\n```\n\n----------------------------------------\n\nTITLE: Grouping Data by Origin in Nushell\nDESCRIPTION: Example of using the group-by command to organize data from a CSV file by origin.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-26-nushell-0_6_0.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> open tests/fixtures/formats/caco3_plastics.csv | group-by origin\n```\n\n----------------------------------------\n\nTITLE: Definition of str length Command Signature in Nushell\nDESCRIPTION: The command signature shows the syntax for the 'str length' command, including its flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_length.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> str length {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from Strings\nDESCRIPTION: Demonstrates the str trim command which removes whitespace from both sides of a string by default.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md#2025-04-19_snippet_12\n\nLANGUAGE: nushell\nCODE:\n```\n'       My   string   ' | str trim\n# => My   string\n```\n\n----------------------------------------\n\nTITLE: Path Joining in Nushell\nDESCRIPTION: Examples of using the new 'path join' command to combine path components following platform-specific conventions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-03-09-nushell_0_28.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\necho 'C:\\Users\\viking' | path join spam.txt\n```\n\nLANGUAGE: nushell\nCODE:\n```\necho '/home/viking' | path join spam.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Into Glob Command Signature in Nushell\nDESCRIPTION: The signature block for the 'into glob' command, showing its basic syntax and parameter structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_glob.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> into glob {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Hiding Nushell Custom Commands\nDESCRIPTION: Example demonstrating how to hide a custom command to restore previous definitions or remove it from scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\ndef foo [] { \"foo\" }\n\n# => foo\n# => foo\n\nhide foo\n\nfoo  # error! command not found!\n```\n\n----------------------------------------\n\nTITLE: bytes add Command Signature in Nushell\nDESCRIPTION: Defines the command signature for 'bytes add' in Nushell, showing the required parameters and available flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bytes_add.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> bytes add {flags} (data) ...rest\n```\n\n----------------------------------------\n\nTITLE: Rendering Format Commands Table with Vue.js\nDESCRIPTION: HTML template that creates a table to display format commands. Uses Vue's v-for directive to iterate through the filtered commands list, displaying each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/formats.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Following String Path on Custom Value via `FollowPathString`\nDESCRIPTION: This snippet illustrates how to follow a string path on a custom value, typically used with structured data. The operation's response can also be PipelineData or Error.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [\n    0,\n    {\n      \"CustomValueOp\": [\n        {\n          \"item\": {\n            \"name\": \"version\",\n            \"data\": [0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0]\n          },\n          \"span\": {\n            \"start\": 90,\n            \"end\": 96\n          }\n        },\n        {\n          \"FollowPathString\": {\n            \"item\": \"field\",\n            \"span\": {\n              \"start\": 320,\n              \"end\": 326\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Polars String Join Command Signature\nDESCRIPTION: The command signature showing the basic syntax for the polars str-join command with optional flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_str-join.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars str-join {flags} (other)\n```\n\n----------------------------------------\n\nTITLE: Disabling Standard Library in Nushell\nDESCRIPTION: Commands demonstrating how to disable standard library and measure startup time differences.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/standard_library.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\nnu --no-std-lib -n -c \"$nu.startup-time\"\n# => 1ms 125µs 10ns\n\nnu -n -c \"$nu.startup-time\"\n# => 4ms 889µs 576ns\n```\n\n----------------------------------------\n\nTITLE: Using the Len Plugin in Nushell\nDESCRIPTION: This Nushell command demonstrates how to use the Len plugin to count the number of items in a sequence.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_12\n\nLANGUAGE: nu\nCODE:\n```\n$ seq 1 10000 | len\n10000\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag Switches in Custom Commands\nDESCRIPTION: Demonstrates how to use a flag as a boolean switch to toggle functionality in a command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\ndef greet [\n  name: string\n  --age (-a): int\n  --twice\n] {\n  if $twice {\n    echo $name $name $age $age\n  } else {\n    echo $name $age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of Removed Date Format Command in Nushell\nDESCRIPTION: Shows the command signature for the removed 'date format' command. It accepts flags and a format string parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/date_format.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> date format {flags} (format string)\n```\n\n----------------------------------------\n\nTITLE: Encoding Binary Data in Base32\nDESCRIPTION: Example showing how to encode binary data (0x[01 02 10]) into Base32 format with padding.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_base32.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 0x[01 02 10] | encode base32\nAEBBA===\n```\n\n----------------------------------------\n\nTITLE: Prefixed Overlay Management in Nushell\nDESCRIPTION: Example of using prefixed overlays to namespace module commands and aliases in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-08-16-nushell-0_67.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> module spam {\n    export def foo [] { \"foo\" }\n}\n\n> overlay add --prefix spam\n\n> spam foo\nfoo\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes in Nu\nDESCRIPTION: Commands to commit changes and push them to the remote repository using Git in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ngit commit -m \"Commit Message\"\ngit push --set-upstream origin my_changes\n```\n\n----------------------------------------\n\nTITLE: Polars Get Command Signature in Nushell\nDESCRIPTION: The basic command signature for the polars get operation, showing the command structure and flag placement.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars get {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Simple Listing Command in Nushell\nDESCRIPTION: Demonstrates the implicit autoview functionality of the ls command, which automatically displays results without an explicit output command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/pipeline.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Using Autoview with Semicolon Separator\nDESCRIPTION: Demonstrates how to view command output when using the semicolon separator by using autoview.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-21-nushell_0_13_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nls | autoview ; echo \"done\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Environment Variables in Nushell\nDESCRIPTION: Example showing how to hide an environment variable using the 'hide' command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n$env.FOO = \"FOO\"\n\n# => $env.FOO\n# => FOO\n\nhide FOO\n\n$env.FOO  # error! environment variable not found!\n```\n\n----------------------------------------\n\nTITLE: Aggregation in C#\nDESCRIPTION: Demonstrates how to perform aggregations in C# using `Aggregate`. This can be used in place of `reduce_by` command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n\"Aggregate\"\n```\n\n----------------------------------------\n\nTITLE: Calculating String Length in Nushell\nDESCRIPTION: Shows how to use the new 'str length' command to get the length of a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> echo \"hello world\" | str length\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Text without Newline\nDESCRIPTION: Example demonstrating text conversion without adding a trailing newline using the --no-newline flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_text.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> [1] | to text --no-newline\n1\n```\n\n----------------------------------------\n\nTITLE: Viewing Path Structure in Nushell\nDESCRIPTION: Example output showing the structured format of PATH variable in Nushell with table formatting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho $nu:path\n```\n\nLANGUAGE: shell\nCODE:\n```\necho $nu.path\n```\n\n----------------------------------------\n\nTITLE: Creating a Command That Processes Pipeline Output\nDESCRIPTION: Demonstrates how to define a command that outputs data that can be piped to other commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_15\n\nLANGUAGE: nu\nCODE:\n```\ndef my-ls [] { ls }\n```\n\n----------------------------------------\n\nTITLE: Polars Profile Command Signature in Nushell\nDESCRIPTION: The command signature for the 'polars profile' command which can be used to profile a lazy dataframe operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_profile.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars profile {flags} \n```\n\n----------------------------------------\n\nTITLE: See the current path in Nu\nDESCRIPTION: Displays the current path using `echo $nu.path`. The `$nu.path` variable holds the list of directories in the current path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_19\n\nLANGUAGE: nu\nCODE:\n```\n\"echo $nu.path\"\n```\n\n----------------------------------------\n\nTITLE: Tutorial Search Example in Nushell\nDESCRIPTION: Example demonstrating how to search through tutorials using the --find flag with an input string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tutor.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> tutor --find \"$in\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Command Signature for 'from url' in Nushell\nDESCRIPTION: Shows the command signature for the 'from url' command that parses URL-encoded strings as records in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_url.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> from url {flags} \n```\n\n----------------------------------------\n\nTITLE: Matching Value in Range using Nushell\nDESCRIPTION: Demonstrates how to use the 'match' command to check if a value is within a specified range.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/match.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nmatch 3 { 1..10 => 'yes!' }\n```\n\n----------------------------------------\n\nTITLE: Defining watch Command Signature in Nushell\nDESCRIPTION: Specifies the syntax for using the 'watch' command in Nushell, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/watch.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> watch {flags} (path) (closure)\n```\n\n----------------------------------------\n\nTITLE: Path dirname Command Signature\nDESCRIPTION: The basic signature for the path dirname command showing its syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_dirname.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> path dirname {flags} \n```\n\n----------------------------------------\n\nTITLE: Defining Nushell Version Command Signature\nDESCRIPTION: This code snippet shows the signature of the 'version' command in Nushell. It indicates that the command can be called with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/version.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> version {flags}\n```\n\n----------------------------------------\n\nTITLE: Deep Directory Glob Matching in Nushell\nDESCRIPTION: Demonstrates advanced glob pattern matching across multiple directory levels using double asterisk\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls **/*.md\n```\n\n----------------------------------------\n\nTITLE: Basic to json Command Signature\nDESCRIPTION: Shows the basic command signature for the 'to json' command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_json.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> to json {flags} \n```\n\n----------------------------------------\n\nTITLE: Setting Soft Stack Size Limit in Nushell\nDESCRIPTION: Example showing how to set the soft stack size limit to 10240 using the ulimit command with -s and -S flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ulimit.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n> ulimit -s -S 10240\n```\n\n----------------------------------------\n\nTITLE: Reduce Function for Finding Maximum\nDESCRIPTION: Uses reduce to find the longest string in a list\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/thinking_in_nushell.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n[one, two, three, four, five, six] | reduce {|curr, max|\n    if ($curr | str length) > ($max | str length) {\n        $curr\n    } else {\n        $max\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Evaluation with `get` Command in Nushell\nDESCRIPTION: This code snippet demonstrates the use of the `get` command in Nushell during constant evaluation. The `get` command is used to access an element of an array at parse time, allowing for the definition of constants based on array values. The example shows how to define a constant `foo` that is equal to the element at index 2 of the array `[1 2 3]`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nconst foo = [1 2 3] | get 2\n$foo\n# => 3\n```\n\n----------------------------------------\n\nTITLE: Hiding File-Based Overlay\nDESCRIPTION: Example demonstrating how to hide an overlay that was created from a file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_hide.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'export alias f = \"foo\"' | save spam.nu\n    overlay use spam.nu\n    overlay hide spam\n\n```\n\n----------------------------------------\n\nTITLE: Checking if elements from a series are contained in another series using polars\nDESCRIPTION: This example shows how to check if elements from a dataframe are contained in another dataframe, returning a boolean series indicating which elements are present in both.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_is-in.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet other = ([1 3 6] | polars into-df);\n            [5 6 6 6 8 8 8] | polars into-df | polars is-in $other\n```\n\n----------------------------------------\n\nTITLE: Using stor delete Command Signature in Nushell\nDESCRIPTION: The signature for the 'stor delete' command, which shows the basic syntax for using this command to delete tables or rows from the in-memory SQLite database.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_delete.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> stor delete {flags} \n```\n\n----------------------------------------\n\nTITLE: Match Statement Pattern for Keyboard Input in Nushell\nDESCRIPTION: Implementation using match statements with a predefined list of keycodes and modifiers for better code maintenance. Uses mutable variables to store key state.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/input_listen_keys.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\ndef run_some_code [] {\n  print \"I'm running the code and returning 42\"\n  42\n}\n\nlet keys = {\n  a:      [ 'a' [] ]\n  x:      [ 'x' [] ]\n  ctrl-c: [ 'c' ['keymodifiers(control)'] ]\n}\nmut key = {keycode: '', modifiers: ['']}\nprint '(a) Run some code (x) Exit'\n\nloop {\n  $key = (input listen --types [key])\n  match [$key.code $key.modifiers] {\n    $keymatch if $keymatch == $keys.a => {break}\n    $keymatch if $keymatch == $keys.x  => {print 'User exited'; break}\n    $keymatch if $keymatch == $keys.ctrl-c => {print 'Terminated with Ctrl-C'; break}\n    _ => {\n      print \"That key wasn't recognized\"\n      print 'Press (a) to run some code or (x) to Exit'\n      continue\n    }\n  }\n}\n\nmatch [$key.code $key.modifiers] {\n  $k if $k == $keys.a => {run_some_code}\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Closed Range Parameter in Nushell\nDESCRIPTION: Searches for '3' in the string '123456' but only between indexes 1 and 4, using a closed range (1..4). Returns 2, which is the position of '3'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_index-of.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n'123456' | str index-of '3' --range 1..4\n```\n\n----------------------------------------\n\nTITLE: Polars Drop Command Signature in Nushell\nDESCRIPTION: The signature for the 'polars drop' command which takes flags and a rest parameter containing column names to be dropped from a dataframe.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_drop.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars drop {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Reversing String Characters in Nushell\nDESCRIPTION: Demonstrates the use of the new 'str reverse' command to reverse the characters in a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> echo \"hello world\" | str reverse\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine of Pi\nDESCRIPTION: Example showing how to calculate the cosine of π (pi) and round to 4 decimal places.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_cos.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 3.141592 | math cos | math round --precision 4\n```\n\n----------------------------------------\n\nTITLE: Closure Pipe Character Error Example\nDESCRIPTION: This code demonstrates a breaking change where leading, unmatched pipe characters in closures are no longer allowed. The first example shows a correct closure definition. The second example shows an incorrect definition that will now throw an error, due to the parser no longer allowing unmatched leading pipe characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-11-12-nushell_0_100_0.md#2025-04-19_snippet_8\n\nLANGUAGE: nushell\nCODE:\n```\n\"{ |a| $a } # ok\n{ |a $a }  # now errors\"\n```\n\n----------------------------------------\n\nTITLE: Basic Nushell Script Structure\nDESCRIPTION: Example of a simple Nushell script that defines and calls a custom greeting function\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/scripts.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n# myscript.nu\ndef greet [name] {\n  [\"hello\" $name]\n}\n\ngreet \"world\"\n```\n\n----------------------------------------\n\nTITLE: Configuring History Settings\nDESCRIPTION: Example of setting multiple related configuration values by overwriting a nested configuration record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\n$env.config.history = {\n  file_format: sqlite\n  max_size: 1_000_000\n  sync_on_enter: true\n  isolation: true\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting stdout to a file in Nushell\nDESCRIPTION: This example shows how to redirect stdout to a file while piping stderr to another command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/pipelines.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nnu demo.nu e> file.txt | str upcase\n```\n\n----------------------------------------\n\nTITLE: Displaying System Information\nDESCRIPTION: The 'uname' command returns a record containing system information and utilizes the uutils library.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\nuname\n```\n\n----------------------------------------\n\nTITLE: Path Flag Usage\nDESCRIPTION: Demonstrates the --path flag for handling Windows-style paths with backslashes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\n> 'C:\\{Users,Windows}' | str expand --path\n```\n\n----------------------------------------\n\nTITLE: File Operations in NuShell\nDESCRIPTION: Various file operation commands in NuShell including moving, copying, and removing files or directories.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/coming_from_bash.md#2025-04-19_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n`mv <source> <dest>`                                          | Move file to new location\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`cp <source> <dest>`                                          | Copy file to new location\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`rm <path>`                                                   | Remove the given file\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`rm -r <path>`                                                | Recursively removes the given path\n```\n\n----------------------------------------\n\nTITLE: File Size Operations in Nushell\nDESCRIPTION: Demonstrates file size calculations and comparisons in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/types_of_data.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n0.5kB\n# => 500 B\n1GiB / 1B\n# => 1073741824\n(1GiB / 1B) == 2 ** 30\n# => true\n```\n\n----------------------------------------\n\nTITLE: Double Backslash Usage\nDESCRIPTION: Shows how to include literal backslashes in the output using double backslashes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> 'A{B\\\\,C}' | str expand\n```\n\n----------------------------------------\n\nTITLE: Adding Example Usage with `attr example` in Nushell\nDESCRIPTION: This snippet demonstrates how to add example usages to a custom command's help text using the `@example` attribute. This is done using the `attr example` command. The examples will be visible when using `help double` or `double --help`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"@example \\\"double an int\\\"  { 5 | double }   --result 10\n@example \\\"double a float\\\" { 0.5 | double } --result 1.0\ndef double []: [number -> number] {\n  $in * 2\n}\n# The examples above will be shown in `help double` or `double --help`.\"\n```\n\n----------------------------------------\n\nTITLE: Running External Command 'echo' in Nushell\nDESCRIPTION: Demonstrates how to use the 'run-external' command to execute the 'echo' command with arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/run-external.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> run-external \"echo\" \"-n\" \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Matching with Catch-All in Nushell\nDESCRIPTION: Illustrates the use of a catch-all case in the 'match' command for unmatched values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/match.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\nmatch 3 { 1 => { 'yes!' }, _ => { 'no!' } }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Source Loading Limitation\nDESCRIPTION: Illustrates Nushell's compilation model and why dynamic source loading is not possible\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/thinking_in_nushell.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\necho \"def abc [] { 1 + 2 }\" | save output.nu\nsource \"output.nu\"\nabc\n```\n\n----------------------------------------\n\nTITLE: Each Command Signature in Nushell\nDESCRIPTION: The basic command signature showing how to use the 'each' command with flags and closure parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/each.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> each {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Without Default Features\nDESCRIPTION: Command to install Nushell without the default plugin set using Cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-12-18-nushell-0_7_0.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu --no-default-features\n```\n\n----------------------------------------\n\nTITLE: Encoding End Message in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of an End message in JSON format for the Nushell plugin protocol, indicating the end of a stream.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"End\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Interrupt Status in Rust for Nushell Plugin\nDESCRIPTION: Example of checking the interrupt status using the signals() method in a Nushell plugin.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_44\n\nLANGUAGE: rust\nCODE:\n```\nif engine.signals().interrupted() {\n    println!(\"Operation was interrupted.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing with Look Behind Pattern\nDESCRIPTION: Shows parsing using fancy-regex look behind pattern syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/parse.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> \" @another(foo bar)   \" | parse --regex '\\s*(?<=[() ])(@\\w+)(\\([^)]*\\))?\\s*'\n```\n\n----------------------------------------\n\nTITLE: Multiline Subexpression in Nushell\nDESCRIPTION: Shows how subexpressions can now span multiple lines in Nushell 0.34.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-07-13-nushell_0_34.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n(echo foo\n| str length)\n```\n\n----------------------------------------\n\nTITLE: Generating Every Fifth Day in January 2020\nDESCRIPTION: This example demonstrates how to use the 'seq date' command to print every fifth day between January 1st and January 31st, 2020.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/seq_date.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> seq date --begin-date '2020-01-01' --end-date '2020-01-31' --increment 5day\n```\n\n----------------------------------------\n\nTITLE: Nushell each Filter with Explicit Variable\nDESCRIPTION: This snippet provides an alternative to using `$in` in the `each` filter. It explicitly defines a variable `value` to represent the current iteration's value, achieving the same result as using `$in` directly.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/pipelines.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n\"1..10 | each {|value| $value * 2}\"\n```\n\n----------------------------------------\n\nTITLE: Force Killing Process in Nushell\nDESCRIPTION: Example demonstrating how to forcefully terminate a process using a specific PID.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/kill.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> kill --force 12345\n```\n\n----------------------------------------\n\nTITLE: Bash Environment Plugin Usage for SSH Agent\nDESCRIPTION: Alternative method using the bash-env plugin to load SSH agent environment variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/ssh_agent.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n^ssh-agent | bash-env | load-env\n```\n\n----------------------------------------\n\nTITLE: Getting Script Directory Path in Nushell\nDESCRIPTION: Shows how to get the directory path of the current script file using path commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/special_variables.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\npath self | path dirname\n```\n\n----------------------------------------\n\nTITLE: Demonstrating No-op Behavior of 'source' with Null in Nushell\nDESCRIPTION: Illustrates that sourcing 'null' results in a no-op operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/source.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> source null\n```\n\n----------------------------------------\n\nTITLE: Roll Down Command Signature in Nushell\nDESCRIPTION: The basic command signature for the roll down operation in Nushell, showing the command structure and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/roll_down.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> roll down {flags} \n```\n\n----------------------------------------\n\nTITLE: Python Interpreter Path Definition\nDESCRIPTION: Shebang line specifying the Python interpreter path for Unix-based systems.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/local/bin/python3\n```\n\n----------------------------------------\n\nTITLE: Help System Output in Nushell\nDESCRIPTION: Example of the improved help system output showing parameter and flag descriptions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-05-nushell-0_5_0.md#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhelp rm\n```\n\n----------------------------------------\n\nTITLE: Command Composition in Bash vs Nushell\nDESCRIPTION: Compares command composition syntax between Bash and Nushell using make and run examples.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-04-21-nushell_0_13_0.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake && ./run/my/app\n```\n\nLANGUAGE: nushell\nCODE:\n```\nmake; ./run/my/app\n```\n\n----------------------------------------\n\nTITLE: Running Nushell with Minimal Configuration\nDESCRIPTION: Executes a command with only the standard library, bypassing all configuration files.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_26\n\nLANGUAGE: nushell\nCODE:\n```\nnu -n -l -c \"ls\"\n```\n\n----------------------------------------\n\nTITLE: AST Pipeline Example\nDESCRIPTION: Shows how to print the AST for a pipeline combining ls and where commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> ast 'ls | where name =~ README'\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Cargo\nDESCRIPTION: Command to install the basic Nushell shell using Rust's cargo package manager.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-10-26-nushell_0_39.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: File Output Handling in Nushell\nDESCRIPTION: Shows the difference between traditional shell output and Nushell's save command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/thinking_in_nushell.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\necho \"hello\" | save output.txt\n```\n\nLANGUAGE: nu\nCODE:\n```\necho \"hello\" > output.txt\n```\n\n----------------------------------------\n\nTITLE: Record (Key-Value Pair) Creation in Nushell\nDESCRIPTION: Creating and displaying key-value pairs using Nushell record notation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/types_of_data.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\necho {name: sam, rank: 10}\n```\n\n----------------------------------------\n\nTITLE: Command Signature Definition in Nushell\nDESCRIPTION: Shows the basic syntax and signature for the export const command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/export_const.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> export const {flags} (const_name) (initial_value)\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Command in Nushell\nDESCRIPTION: Demonstrates how to call the previously defined 'greet' custom command with a string argument.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/custom_commands.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ngreet \"world\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell from crates.io with cargo\nDESCRIPTION: This command installs the latest version of Nushell from crates.io using the cargo package manager. It assumes that Rust and cargo are already installed on the system. Users can also install optional dataframe functionality with an additional flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-06-06-nushell_0_81.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"cargo install nu\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n\"cargo install nu --features=dataframe\"\n```\n\n----------------------------------------\n\nTITLE: to tsv Command Signature in Nushell\nDESCRIPTION: The signature of the 'to tsv' command showing its syntax and usage format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_tsv.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> to tsv {flags} \n```\n\n----------------------------------------\n\nTITLE: Cloning Nushell GitHub Repository\nDESCRIPTION: Downloading the latest Nushell source code directly from the GitHub repository\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nushell/nushell.git\n```\n\n----------------------------------------\n\nTITLE: Casting Column in Grouped Expression\nDESCRIPTION: Illustrates casting a column type within a grouped aggregation expression\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cast.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [1 4]] | polars into-df | polars group-by a | polars agg [ (polars col b | polars cast u8 | polars min | polars as \"b_min\") ] | polars schema\n```\n\n----------------------------------------\n\nTITLE: Showing Help for a Single Extern - Nushell\nDESCRIPTION: This command retrieves help information for a specific extern in Nushell. The parameter provided is the name of the extern for which assistance is requested, and it outputs relevant details about that extern.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_externs.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> help externs smth\n\n```\n\n----------------------------------------\n\nTITLE: Record Sorting by Value\nDESCRIPTION: Example of sorting a record by its values using the values flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sort.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n> {b: 4, a: 3, c:1} | sort -v\n```\n\n----------------------------------------\n\nTITLE: Searching for Externs - Nushell\nDESCRIPTION: This command allows users to search for a specific string within the names and descriptions of externs. The '--find' flag is used to specify the search term, and the command provides a filtered table based on the input string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_externs.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> help externs --find smth\n\n```\n\n----------------------------------------\n\nTITLE: Executing 'whoami' Command in Nushell\nDESCRIPTION: Demonstrates how to use the 'whoami' command to retrieve the current username in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/whoami.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> whoami\n```\n\n----------------------------------------\n\nTITLE: Create First Expression from Column\nDESCRIPTION: Example showing how to create a first expression from a column using polars first command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_first.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> polars col a | polars first\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'skip' Command in Nushell\nDESCRIPTION: Specifies the command signature for the 'skip' command, including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> skip {flags} (n)\n```\n\n----------------------------------------\n\nTITLE: Reverse Array in Nushell and PowerShell\nDESCRIPTION: The `reverse` command reverses the order of elements in an array.  In PowerShell, `[Array]::Reverse($var)` reverses the array `$var`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\n\"[Array]::Reverse($var)\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Tabular Data in Nushell's SQLite Database\nDESCRIPTION: Example of inserting multiple rows using a table literal with column headers into the in-memory SQLite database.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_insert.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> [[bool1 int1 float1]; [true 5 1.1], [false 8 3.14]] | stor insert --table-name nudb\n```\n\n----------------------------------------\n\nTITLE: Group Operation Example in Nushell\nDESCRIPTION: Demonstrates the each group command that processes three rows at a time and sums their ages\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-09-22-nushell_0_20.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n... | each group 3 { get age | math sum }\n───┬─────\n 0 │ 110\n 1 │ 109\n───┴─────\n```\n\n----------------------------------------\n\nTITLE: Converting Hyphenated String to camelCase in Nushell\nDESCRIPTION: Example showing how to convert a hyphenated string 'this-is-the-first-case' to camelCase format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_camel-case.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'this-is-the-first-case' | str camel-case\nthisIsTheFirstCase\n```\n\n----------------------------------------\n\nTITLE: String Escape Characters Demo\nDESCRIPTION: Demonstration of string escape character behavior in double-quoted vs single-quoted strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-03-22-nushell_0_60.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> \"hello\\nworld\"\nhello\nworld\n> 'hello\\nworld'\nhello\\nworld\n```\n\n----------------------------------------\n\nTITLE: Format Bits Command Signature - Nushell\nDESCRIPTION: The basic command signature for the format bits command showing the syntax and required parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_bits.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> format bits {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Navigating Nested Cell Paths\nDESCRIPTION: Demonstrates accessing deeply nested data using cell path navigation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands | where command == \"each\" | get params.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Environment Configuration\nDESCRIPTION: Command to display the default environment configuration file content with syntax highlighting\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\nnu config env --default | nu-highlight | less -R\n```\n\n----------------------------------------\n\nTITLE: Profile Config Evaluation Example\nDESCRIPTION: Basic example showing how to profile configuration file evaluation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug_profile.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> debug profile { source $nu.config-path }\n```\n\n----------------------------------------\n\nTITLE: CSV Expansion Example\nDESCRIPTION: Shows expansion of comma-separated values within braces into a string list.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> \"{apple,banana,cherry}\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command Information\nDESCRIPTION: Demonstrates using help commands to get detailed information about Nushell commands\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nhelp commands | where command == \"each\"\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Expression from Column\nDESCRIPTION: Shows how to create a unique expression from a specific column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_unique.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> col a | unique\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IntRange with Excluded Upper Bound in Nushell\nDESCRIPTION: Example of an integer range with an exclusive upper bound. The range starts at 7, has a step of 1, and excludes 10 as the end value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_54\n\nLANGUAGE: nu\nCODE:\n```\n7..<10\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Range\": {\n    \"val\": {\n      \"IntRange\": {\n        \"start\": 7,\n        \"step\": 1,\n        \"end\": { \"Excluded\": 10 }\n      }\n    },\n    \"span\": {\n      \"start\": 1380,\n      \"end\": 1386\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nushell Encode Hex Command Signature\nDESCRIPTION: Shows the basic command signature for the encode hex operation in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/encode_hex.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> encode hex {flags} \n```\n\n----------------------------------------\n\nTITLE: Building Nushell from Source\nDESCRIPTION: Compiling Nushell from source code in the default debug mode\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd nushell && cargo build && cargo run\n```\n\n----------------------------------------\n\nTITLE: Alternative to It-Expansion Using Get Command\nDESCRIPTION: Shows an alternative approach to it-expansion using the get command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-03-nushell_0_22.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nls | get name\n```\n\n----------------------------------------\n\nTITLE: Shell Command Examples in Nu\nDESCRIPTION: Example commands showing Nu shell syntax for positional and named arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/commands.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstart x y\n```\n\nLANGUAGE: shell\nCODE:\n```\nstart a1 a2 a3 ... a99 a100\n```\n\nLANGUAGE: shell\nCODE:\n```\nansi gradient --fgstart '0x40c9ff'\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Command template for installing additional Nushell plugins using cargo.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-12-07-nushell_0_41.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Input Processing and Length Calculation\nDESCRIPTION: Core functionality for processing input strings and calculating their length, including error handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ndef handle_call(id, call_info):\n    try:\n        input = call_info[\"input\"][\"Value\"][\"String\"]\n        output = {\n            \"PipelineData\": {\n                \"Value\": {\n                    \"Int\": {\n                        \"val\": len(input[\"val\"]),\n                        \"span\": input[\"span\"]\n                    }\n                }\n            }\n        }\n        send_response(id, output)\n    except:\n        send_error(\n            id,\n            \"Could not process input\",\n            call_info[\"call\"][\"head\"][\"span\"]\n        )\n```\n\n----------------------------------------\n\nTITLE: Nushell View Blocks Command Signature\nDESCRIPTION: The command signature showing how to use the view blocks command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_blocks.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> view blocks {flags} \n```\n\n----------------------------------------\n\nTITLE: Dictionary Creation in Python\nDESCRIPTION: Python implementation of wrap command using dictionary literal syntax\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n{ \"key\" : val }\n```\n\n----------------------------------------\n\nTITLE: Starting Tutorial Example in Nushell\nDESCRIPTION: Example showing how to begin the Nushell tutorial using the tutor command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/tutor.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> tutor begin\n\n```\n\n----------------------------------------\n\nTITLE: Basic String Statistics Command Signature\nDESCRIPTION: The basic command signature for the str stats command showing syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_stats.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> str stats {flags} \n```\n\n----------------------------------------\n\nTITLE: Record Sorting by Value in Nushell\nDESCRIPTION: Demonstrates sorting a record by its values using the -v flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n{x: 123, a: hello! foo: bar} | sort -v\n```\n\n----------------------------------------\n\nTITLE: Math Cosine Command Signature\nDESCRIPTION: Basic command signature for the math cos function in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_cos.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> math cos {flags} \n```\n\n----------------------------------------\n\nTITLE: Filtering Operations in Python\nDESCRIPTION: Python implementation of where command using filter function\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfilter\n```\n\n----------------------------------------\n\nTITLE: Command Signature Definition in Nushell\nDESCRIPTION: Defines the basic command signature for the polars flatten operation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_flatten.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> polars flatten {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Update Copy\nDESCRIPTION: Example of copying only if source is newer than target.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n> cp -u myfile newfile\n```\n\n----------------------------------------\n\nTITLE: Basic Nushell Config Command Signature\nDESCRIPTION: The basic command signature for configuring Nushell environment settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/config_env.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> config env {flags} \n```\n\n----------------------------------------\n\nTITLE: Environment Modification Closure\nDESCRIPTION: Example of running a closure while preserving environment changes.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/do.md#2025-04-19_snippet_9\n\nLANGUAGE: nushell\nCODE:\n```\n> do --env { $env.foo = 'bar' }; $env.foo\n```\n\n----------------------------------------\n\nTITLE: Multi-Table Declaration in Nushell\nDESCRIPTION: Defines an additional table for multi-table merging demonstration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/tables.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet third_table = [[e f]; [7 8]]\n```\n\n----------------------------------------\n\nTITLE: Unix I/O References\nDESCRIPTION: References to standard Unix I/O mechanisms used for external command communication.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/commands.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstdin\n```\n\nLANGUAGE: shell\nCODE:\n```\nstdout\n```\n\n----------------------------------------\n\nTITLE: Basic Process Listing in Nushell\nDESCRIPTION: Lists all system processes without any filtering or sorting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ps.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> ps\n```\n\n----------------------------------------\n\nTITLE: Reduce Command Signature in Nushell\nDESCRIPTION: The basic command signature for the reduce operation in Nushell, showing the required closure parameter and optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/reduce.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> reduce {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fish Shell Completer in Nushell\nDESCRIPTION: Fish shell-based completer that handles command completions with TSV parsing and path escaping support.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/external_completers.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nlet fish_completer = {|spans|\n    fish --command $'complete \"--do-complete=($spans | str join \" \")\"'\n    | from tsv --flexible --noheaders --no-infer\n    | rename value description\n    | update value {\n        if ($in | path exists) {$'\"($in | str replace \"\\\"\" \"\\\\\\\"\")\"'} else {$in}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a pipeline of commands in Nu\nDESCRIPTION: Runs a pipeline of commands using `nu -c <commands>`. This allows you to execute multiple commands in a sequence, where the output of one command is piped as input to the next. Requires Nu version 0.9.1 or later.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_29\n\nLANGUAGE: nu\nCODE:\n```\n\"nu -c <commands>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dummy Variables from DataFrame\nDESCRIPTION: Example showing how to create dummy variables from a dataframe with two columns 'a' and 'b'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_dummies.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> [[a b]; [1 2] [3 4]] | polars into-df | polars dummies\n```\n\n----------------------------------------\n\nTITLE: Sleep Command Signature - Nushell\nDESCRIPTION: The basic signature of the sleep command showing its syntax and parameter structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sleep.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> sleep {flags} (duration) ...rest\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'sys' Command in Nushell\nDESCRIPTION: This snippet shows the command signature for the 'sys' command in Nushell. It indicates that the command takes optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> sys {flags} \n```\n\n----------------------------------------\n\nTITLE: Replacing `register` with `plugin add` and `plugin use` in Nushell\nDESCRIPTION: This code snippet illustrates the new commands for plugin management that replace the deprecated `register` command. The `plugin add` command registers the plugin and updates the plugin registry file, while `plugin use` loads the plugin commands into the current session's scope.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> plugin add ~/.cargo/bin/nu_plugin_gstat\n\n# Load it into scope:\n> plugin use gstat\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Empty Input in last Command\nDESCRIPTION: Shows how to handle the error that `last` command throws when the input is empty. Wrapping the `last` command in a `try` block suppresses the error and returns null instead.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\n[] | try { last }\n```\n\n----------------------------------------\n\nTITLE: Find and Highlight Text in String\nDESCRIPTION: Example demonstrating case-insensitive text search in a string.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> 'Cargo.toml' | find cargo\nCargo.toml\n```\n\n----------------------------------------\n\nTITLE: Polars Length Command Signature\nDESCRIPTION: The basic command signature for the polars len operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_len.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars len {flags}\n```\n\n----------------------------------------\n\nTITLE: Changelog Commands in Nushell\nDESCRIPTION: Example commands and flags showcasing new Nushell functionality including shorthand flags, external command execution, and script running capabilities.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-02-14-twin0025.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nls -f\nls --full\ncalc\nmv\n-c\n--features=stable\n```\n\n----------------------------------------\n\nTITLE: Term Command Basic Signature\nDESCRIPTION: Basic signature for the term command showing the command structure with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/term.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> term {flags} \n```\n\n----------------------------------------\n\nTITLE: AST JSON Output Example\nDESCRIPTION: Shows how to get JSON formatted AST output in a Nushell table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ast.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> ast 'for x in 1..10 { echo $x ' --json | get block | from json\n```\n\n----------------------------------------\n\nTITLE: Version Information in Python\nDESCRIPTION: Python implementation to get version information\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nsys.version, sys.version_info\n```\n\n----------------------------------------\n\nTITLE: Copy Multiple Files\nDESCRIPTION: Example of copying multiple files using wildcards.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/cp.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> cp *.txt dir_a\n```\n\n----------------------------------------\n\nTITLE: Try Command Signature in Nu Shell\nDESCRIPTION: Defines the command signature showing the basic syntax for the try command with optional flags, try block and catch closure parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/try.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\ntry {flags} (try_block) (catch_closure)\n```\n\n----------------------------------------\n\nTITLE: Overriding Indentation with Raw Output in Nushell\nDESCRIPTION: Demonstrates how the --raw flag overrides any set indentation options for compact output.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_nuon.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[1 2 3] | to nuon --indent 2 --raw\n```\n\n----------------------------------------\n\nTITLE: Assigning Expression Results to Mutable Variables in Nushell\nDESCRIPTION: Illustrates how to set a mutable variable to the result of an arithmetic expression.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/mut.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nmut x = 10 + 100\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespaces Around Field Values - Nushell\nDESCRIPTION: This snippet illustrates how to remove whitespaces around field values using the --trim fields option with the 'from csv' command in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_csv.md#2025-04-19_snippet_7\n\nLANGUAGE: nu\nCODE:\n```\n> open data.txt | from csv --trim fields\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `rename` to Python's dictionary key reassignment\nDESCRIPTION: Explains how to rename a key in a Python dictionary by reassigning the value to a new key and then deleting the old key. This achieves the same result as the `rename` command in Nushell for dictionary keys.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n\"dict[\\\"key2\\\"] = dict.pop(\\\"key\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Nushell String Escape Help\nDESCRIPTION: Command to show help documentation for string escape sequences in Nushell. Provides information about how to escape special characters in strings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/help_escapes.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nhelp escapes\n```\n\n----------------------------------------\n\nTITLE: Detect Columns Without Headers - Nushell\nDESCRIPTION: Example demonstrating column detection without headers using the --no-headers flag.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/detect_columns.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n> 'a b c' | detect columns  --no-headers\n```\n\n----------------------------------------\n\nTITLE: Ignoring Command Output in Nushell\nDESCRIPTION: The 'ignore' command in Nushell is used to disregard the output of the previous command in a pipeline. It accepts any input and outputs nothing, effectively suppressing any output from the preceding command. This is useful in scenarios where the output is not needed or should be discarded.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ignore.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> echo done | ignore\n\n```\n\n----------------------------------------\n\nTITLE: Unsetting environment variable in Nu\nDESCRIPTION: Unsets an environment variable for the current session using `$env.FOO = $nothing`.  This removes the variable from the environment for the current session.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/coming_from_bash.md#2025-04-19_snippet_26\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.FOO = $nothing\"\n```\n\n----------------------------------------\n\nTITLE: Using Subcommands with from csv in Nushell\nDESCRIPTION: Shows how to use the new subcommand syntax in Nushell 0.14.0, specifically demonstrating the 'from csv' subcommand with the '--headerless' flag to parse a CSV file without headers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-05-12-nushell_0_14_0.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> open myfile.txt | from csv --headerless\n```\n\n----------------------------------------\n\nTITLE: Debug Profile Command Signature\nDESCRIPTION: The basic syntax for using the debug profile command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/debug_profile.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> debug profile {flags} (closure)\n```\n\n----------------------------------------\n\nTITLE: Automatic Expansion of $it Variable in Nushell\nDESCRIPTION: This example shows how Nushell automatically expands expressions containing $it into 'each' blocks. The simple expression is internally transformed into a more explicit iteration structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-23-year_of_nushell.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nls | each { echo $it.name }\n```\n\n----------------------------------------\n\nTITLE: Polars Append Command Signature\nDESCRIPTION: Command signature showing the basic syntax for the polars append operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_append.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars append {flags} (other)\n```\n\n----------------------------------------\n\nTITLE: Skipping Elements in PowerShell\nDESCRIPTION: This snippet shows the equivalent of the `skip` command in Nushell and PowerShell. In PowerShell, `Select-Object -Skip` is used to skip elements.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Select-Object -Skip\"\n```\n\n----------------------------------------\n\nTITLE: Null-Rejecting Sort in Nushell\nDESCRIPTION: Implements a strict sorting function that explicitly rejects null values with custom error handling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/sorting.md#2025-04-19_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\nlet baddata = [8 3.2 null 58 2]\nlet strict = {|a, b|\n    match [$a, $b] {\n        [null, _] => (error make {msg: \"Attempt to sort null\"}),\n        [_, null] => (error make {msg: \"Attempt to sort null\"}),\n        _ => ($a < $b)\n    }\n}\n$baddata | sort-by -c $strict\n```\n\n----------------------------------------\n\nTITLE: Column Selection and Flattening in Nushell\nDESCRIPTION: Shows how to select and flatten a specific column using polars column operations\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_flatten.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n[[id name hobbies]; [1 Mercy [Cycling Knitting]] [2 Bob [Skiing Football]]] | polars into-df | polars select (polars col hobbies | polars flatten)\n```\n\n----------------------------------------\n\nTITLE: Listing Running Processes\nDESCRIPTION: Shows the ps command for displaying system processes with their status and CPU usage\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nps\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Constant in Nushell\nDESCRIPTION: Demonstrates creating a parse-time constant with a composite value. The example creates a constant 'x' with a record containing two key-value pairs.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/const.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nconst x = { a: 10, b: 20 }\n```\n\n----------------------------------------\n\nTITLE: Vue Component for Filtering Misc Commands\nDESCRIPTION: A Vue.js component that filters pages containing command documentation and specifically selects those categorized as 'misc'. The component sorts commands alphabetically by title and provides computed properties for the template.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/misc.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    commands() {\n      return pages\n        .filter(p => p.path.includes('/commands/docs/'))\n        .filter(p => p.frontmatter.categories.includes('misc'))\n        .sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoxide Directory Completer in Nushell\nDESCRIPTION: Zoxide-based completer for directory navigation, excluding current working directory from suggestions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/external_completers.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nlet zoxide_completer = {|spans|\n    $spans | skip 1 | zoxide query -l ...$in | lines | where {|x| $x != $env.PWD}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting True to Boolean - Nushell\nDESCRIPTION: This snippet shows how to convert a boolean value (true) into its boolean representation using the 'into bool' command, which essentially returns the same value.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_bool.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> true | into bool\ntrue\n```\n\n----------------------------------------\n\nTITLE: Nushell Weekly Updates List\nDESCRIPTION: Markdown list of changes and contributions to Nushell including new random decimal command, string substring fix, clippy warning fixes, version release, and documentation updates.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-27-twin0066.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #66\n\n- smaydew added [`random decimal`](https://github.com/nushell/nushell/pull/2762)\n- andrasio [fixed a `str substring` indexing issue](https://github.com/nushell/nushell/pull/2764)\n- jonathandturner [fixed clippy warnings](https://github.com/nushell/nushell/pull/2760), [released 0.23](https://github.com/nushell/nushell/pull/2766), and has also been [working on the Nunu prototype](https://github.com/jonathandturner/nunu/commits/main) for future Nushell functionality\n- efx [fixed a book typo](https://github.com/nushell/nushell.github.io/pull/69)\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'keybindings default' Command in Nushell\nDESCRIPTION: This snippet shows the command signature for the 'keybindings default' command in Nushell. It indicates that the command takes optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_default.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> keybindings default {flags} \n```\n\n----------------------------------------\n\nTITLE: Prepend Command Signature\nDESCRIPTION: The basic signature for the prepend command showing required parameters and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/prepend.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> prepend {flags} (row)\n```\n\n----------------------------------------\n\nTITLE: Polars Pivot Command Signature\nDESCRIPTION: The basic command signature for the polars pivot operation showing the command structure and flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_pivot.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars pivot {flags}\n```\n\n----------------------------------------\n\nTITLE: Sorting Data in PowerShell\nDESCRIPTION: Demonstrates how to sort data in PowerShell using `Sort-Object` and `sort`. These commands allow for sorting of objects based on properties or custom criteria.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/nushell_map.md#2025-04-19_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Sort-Object, sort\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Duration Value in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of encoding a duration value in JSON format for the Nushell plugin protocol, representing nanoseconds with span information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Duration\": {\n    \"val\": 8375604528,\n    \"span\": {\n      \"start\": 181462,\n      \"end\": 181465\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Value Selection in jq\nDESCRIPTION: Demonstrates accessing object properties in jq using dot notation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\necho '{\"name\": \"Alice\", \"age\": 30}' | jq -r '.name'\n```\n\n----------------------------------------\n\nTITLE: Mapping Nushell `split row` to Python's `str.split{,lines}`, `re.split`\nDESCRIPTION: Illustrates how to split a string into rows in Python using `str.split`, `str.splitlines`, or `re.split`, equivalent to the `split row` command in Nushell.  These functions provide different ways to split strings based on delimiters or regular expressions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/nushell_map_imperative.md#2025-04-19_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n\"str.split{,lines}\", \"re.split\"\n```\n\n----------------------------------------\n\nTITLE: New Syntax Replacing It-Expansion in Nushell\nDESCRIPTION: Demonstrates the new explicit each block syntax that replaces it-expansion.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-11-03-nushell_0_22.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nls | each { echo $it.name }\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'continue' Command in Nushell\nDESCRIPTION: This snippet shows the command signature for the 'continue' command in Nushell. It indicates that the command takes optional flags but no required arguments.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/continue.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> continue {flags} \n```\n\n----------------------------------------\n\nTITLE: Plugin Run Request JSON\nDESCRIPTION: Illustrates the structure of a Run request to a Nushell plugin, including command name, call information, and input value details required for execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Run\": {\n    \"name\": \"len\",\n    \"call\": {\n      \"head\": {\n        \"start\": 100953,\n        \"end\": 100957\n      },\n      \"positional\": [],\n      \"named\": []\n    },\n    \"input\": {\n      \"Value\": {\n        \"String\": {\n          \"val\": \"hello\",\n          \"span\": {\n            \"start\": 100953,\n            \"end\": 100957\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Shadowing in Nushell\nDESCRIPTION: Demonstrates how immutable variables can be 'updated' through shadowing\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/thinking_in_nushell.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\nlet x = $x + 1\n```\n\n----------------------------------------\n\nTITLE: Parsing Known Externals in Nushell\nDESCRIPTION: This snippet demonstrates the parsing behavior for declared external commands in Nushell. Dependencies include Nushell environment configured to use externals. It shows the expected behavior of arguments such as removing quotes in certain cases.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-07-23-nushell_0_96_0.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nextern echo []\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> echo --foo=\"bar\"\n--foo=bar\n> ^echo --foo=\"bar\"\n--foo=bar\n```\n\n----------------------------------------\n\nTITLE: Touching a File with open\nDESCRIPTION: This snippet demonstrates how to create an empty file or update the timestamp of an existing file using `open(path, 'a').close()` in Python.  Opening a file in append mode ('a') and immediately closing it creates an empty file if it doesn't exist or updates the modification timestamp if it does. This is a common idiom for \"touching\" files in Python.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\"open(path, 'a').close()\"\n```\n\n----------------------------------------\n\nTITLE: Defining the 'skip while' Command Signature in Nushell\nDESCRIPTION: Specifies the syntax for using the 'skip while' command in Nushell, including flags and the predicate parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/skip_while.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> skip while {flags} (predicate)\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Hash of String in Nushell (Hex Output)\nDESCRIPTION: Example showing how to generate a SHA256 hash of a string with hexadecimal output in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/hash_sha256.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'abcdefghijklmnopqrstuvwxyz' | hash sha256\n71c480df93d6ae2f1efad1447c66c9525e316218cf51fc8d9ed832f2daf18b73\n```\n\n----------------------------------------\n\nTITLE: Signature Definition for 'get' Command in Nushell\nDESCRIPTION: The command signature for 'get' showing its syntax including flags and parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/get.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> get {flags} (cell_path) ...rest\n```\n\n----------------------------------------\n\nTITLE: Convert EML to Record in Nushell\nDESCRIPTION: This example demonstrates how to convert EML structured data into a Nushell record using the `from eml` command. It takes an EML formatted string as input and outputs a record containing the Subject, From, To, and Body fields. The From and To fields are further structured into Name and Address sub-fields.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_eml.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\">'From: test@email.com\nSubject: Welcome\nTo: someone@somewhere.com\n\nTest' | from eml\n╭─────────┬─────────────────────────────────────╮\n│ Subject │ Welcome                             │\n│         │ ╭─────────┬────────────────╮        │\n│ From    │ │ Name    │                │        │\n│         │ │ Address │ test@email.com │        │\n│         │ ╰─────────┴────────────────╯        │\n│         │ ╭─────────┬───────────────────────╮ │\n│ To      │ │ Name    │                       │ │\n│         │ │ Address │ someone@somewhere.com │ │\n│         │ ╰─────────┴───────────────────────╯ │\n│ Body    │ Test                                │\n╰─────────┴─────────────────────────────────────╯\"\n```\n\n----------------------------------------\n\nTITLE: Defining Signature for 'take while' Command in Nushell\nDESCRIPTION: Specifies the signature for the 'take while' command, including the required predicate parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/take_while.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> take while {flags} (predicate)\n```\n\n----------------------------------------\n\nTITLE: Early Return from Nushell Commands\nDESCRIPTION: Shows how to use the return statement to exit early from a command when a condition is met, providing a way to handle special cases in command execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/custom_commands.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\ndef process-list [] {\n  let input_length = length\n  if $input_length > 10_000 {\n    print \"Input list is too long\"\n    return null\n  }\n\n  $in | each {|i|\n    # Process the list\n    $i * 4.25\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Usage in Nushell\nDESCRIPTION: This snippet shows examples of string literals in Nushell. Strings are represented using double quotes and support Unicode characters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/pt-BR/book/tipos_de_dados.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"Fred\"\n\"myname.txt\"\n\"Lynchburg, VA\"\n```\n\n----------------------------------------\n\nTITLE: Restoring Tilde Expansion in Nushell\nDESCRIPTION: This snippet demonstrates the restoration of tilde expansion in external command names in Nushell version 0.94.1. The changes were necessary as this feature was inadvertently removed in the previous version. The expected input is a path using tilde notation, and the output should correctly resolve the path. Quoted strings and expressions are not expanded and require using the `path expand` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-30-nushell_0_94_1.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n\"~/bin/foo\\n^~/bin/bar\\nrun-external ~/bin/baz\"\n```\n\nLANGUAGE: nushell\nCODE:\n```\n\"^(\\\"~/bin/foo\\\" | path expand)\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Plugin Signature\nDESCRIPTION: Demonstrates how to request the signature from a Nushell plugin, which contains metadata about the plugin's capabilities and interface.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Call\": [0, \"Signature\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Plugin with Input Data\nDESCRIPTION: Shows how to invoke a Nushell plugin with input data via the stdio interface, demonstrating the complete request and response cycle for command execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_34\n\nLANGUAGE: nu\nCODE:\n```\n$ echo '{\"Hello\":{\"protocol\":\"nu-plugin\",\"version\":\"0.90.2\",\"features\":[]}}{\"Call\":[0,{\"Run\":{\"name\":\"len\",\"call\":{\"head\":{\"start\":100953,\"end\":100957},\"positional\":[],\"named\":[]},\"input\":{\"Value\":{\"String\":{\"val\":\"hello\",\"span\":{\"start\":100953,\"end\":100957}}}}}}]}' | target/release/nu_plugin_len --stdio\njson{\"Hello\":{\"protocol\":\"nu-plugin\",\"version\":\"0.90.2\",\"features\":[]}}\n{\"PipelineData\":{\"Value\":{\"Int\":{\"val\":5,\"span\":{\"start\":100953,\"end\":100957}}}}}\n```\n\n----------------------------------------\n\nTITLE: Loading Nushell Standard Library\nDESCRIPTION: Demonstrates different methods of importing the Nushell standard library modules and commands\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-04-25-nushell_0_79.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nuse std   # will load the whole library under the `std` namespace\n```\n\nLANGUAGE: nushell\nCODE:\n```\nuse std * #   -    -   -    -      -    without the `std` prefix\n```\n\nLANGUAGE: nushell\nCODE:\n```\nuse std 'dirs show'\n```\n\n----------------------------------------\n\nTITLE: Select Last Elements in Nushell, PowerShell, and Unix Shells\nDESCRIPTION: The `last` command in Nushell (represented as `Last` or `LastOrDefault`) retrieves the last elements.  PowerShell uses `Select-Object -Last`, and Unix uses `tail`.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_nushell.md#2025-04-19_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Chained Polars When Conditions\nDESCRIPTION: Creates multiple chained when conditions, returning 4 when 'a' > 2 and 6 when 'a' < 0\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_when.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\npolars when ((polars col a) > 2) 4 | polars when ((polars col a) < 0) 6\n```\n\n----------------------------------------\n\nTITLE: Defining run-external Command Signature in Nushell\nDESCRIPTION: Specifies the command signature for the 'run-external' command, including flags and rest parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/run-external.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> run-external {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Converting a Record to TSV Format in Nushell\nDESCRIPTION: Shows how to convert a Nushell record (key-value pairs) into TSV format. The record keys become column headers, and values become data rows.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/to_tsv.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n> {a: 1 b: 2} | to tsv\nab\n12\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Arccosine of 1\nDESCRIPTION: Example showing how to calculate the arccosine of 1, which returns 0 radians.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/math_arccos.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 1 | math arccos\n0\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Extra Features\nDESCRIPTION: Command to install Nushell with additional features enabled using Rust's cargo package manager.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-10-26-nushell_0_39.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: System Commands Table Template\nDESCRIPTION: HTML table template that displays filtered system commands with their descriptions. Uses Vue.js directives for dynamic rendering of command links and usage information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/system.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using Parse-Time Constants in Nushell\nDESCRIPTION: Shows how to use the new 'const' keyword to define parse-time constants, which can be used in contexts requiring values known at parse-time, such as sourcing files or loading overlays.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2023-01-10-nushell_0_74.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\n# Source a file from a constant\n> 'print hello!' | save --raw say_hello.nu\n> const fname = 'say_hello.nu'\n> source $fname\nhello!\n```\n\nLANGUAGE: nu\nCODE:\n```\n# Load an overlay from a constant name:\n> module spam {\n\texport def foo [] { 'foo' }\n}\n> const name = 'spam'\n> const new_name = 'eggs'\n> overlay use $name as $new_name\n> overlay list | last\neggs\n> foo\nfoo\n```\n\n----------------------------------------\n\nTITLE: stor reset Command Signature in Nu Shell\nDESCRIPTION: The signature of the 'stor reset' command showing its syntax. This command doesn't require any arguments but allows flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_reset.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> stor reset {flags} \n```\n\n----------------------------------------\n\nTITLE: Basic True Condition Example in Nushell\nDESCRIPTION: A simple if/else example that evaluates a true condition, printing 'yes' when the condition is true and 'no' when false. This demonstrates the basic syntax of if/else in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/flow_control/if-else.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nif true {\n  print yes\n} else {\n  print no\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Brace Expression\nDESCRIPTION: Shows how nested brace expressions are expanded.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_expand.md#2025-04-19_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n> \"A{B{1,3},C{2,5}}D\" | str expand\n```\n\n----------------------------------------\n\nTITLE: Enabling Starship Prompt Integration in Nushell\nDESCRIPTION: Command to enable the optional Starship prompt integration in Nushell via configuration setting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-30-nushell_0_16_0.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconfig --set [use_starship $true]\n```\n\n----------------------------------------\n\nTITLE: Polars Get-Month Command Signature\nDESCRIPTION: Command signature showing the basic syntax for the polars get-month command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_get-month.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars get-month {flags} \n```\n\n----------------------------------------\n\nTITLE: Examining Span Information in Nushell Metadata\nDESCRIPTION: This snippet shows how to access the 'span' field within metadata to see the start and end positions of a value in the command line, which is used for error reporting.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/metadata.md#2025-04-19_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\nmetadata (open Cargo.toml) | get span\n# => ╭───────┬────────╮\n# => │ start │ 212970 │\n# => │ end   │ 212987 │\n# => ╰───────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Find Command Basic Signature\nDESCRIPTION: Basic command signature showing the syntax for the find command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/find.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> find {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: Using term query Command in Nushell\nDESCRIPTION: The term query command allows sending a query to the terminal emulator and reading the reply. It can be used to get cursor position, terminal background color, or read clipboard content.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n# Get cursor position\nterm query (ansi cursor_position) --prefix (ansi csi) --terminator 'R'\n\n# Get terminal background color.\nterm query $'(ansi osc)10;?(ansi st)' --prefix $'(ansi osc)10;' --terminator (ansi st)\n\n# Read clipboard content on terminals supporting OSC-52.\nterm query $'(ansi osc)52;c;?(ansi st)' --prefix $'(ansi osc)52;c;' --terminator (ansi st)\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in Nushell\nDESCRIPTION: Demonstrates the use of the new 'str from' command to format numbers with specific decimal places and digit grouping.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-07-21-nushell_0_17_0.md#2025-04-19_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n> echo 1.456123 | str from --decimals 2\n```\n\nLANGUAGE: nushell\nCODE:\n```\n> echo 1234567 | str from --group-digits\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Sum Command Signature\nDESCRIPTION: The basic command signature for the polars sum operation.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_sum.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars sum {flags}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell Banner Display\nDESCRIPTION: Configuration code to disable the welcome banner in Nushell using the config.nu file by setting the show_banner property to false.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-08-16-nushell-0_67.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\nlet-env config {\n    show_banner: false\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Template for Displaying Commands\nDESCRIPTION: A table structure that iterates over the filtered commands using v-for directive to display command titles as links and their usage descriptions. Includes proper formatting for command descriptions with pre-wrap styling.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/filesystem.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Opening and Viewing Non-native File Format in Nushell\nDESCRIPTION: Demonstrates opening a pipe-separated value (PSV) file in Nushell. This shows the raw output when opening a file format that Nushell doesn't natively parse.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-08-23-introducing-nushell.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\nopen people.psv\n```\n\n----------------------------------------\n\nTITLE: Piping Integer Values into DateTime Format in Nushell\nDESCRIPTION: This code snippet demonstrates how to pipe an integer into the 'into datetime' command with a specific format string. The input integer is interpreted based on the format specified, allowing for flexible date conversions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-08-20-nushell_0_97_1.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n1724112000 | into datetime -f '%s'\n# => Tue, 20 Aug 2024 00:00:00 +0000 (now)\n```\n\n----------------------------------------\n\nTITLE: Converting Filesize to Bits String - Nushell\nDESCRIPTION: Example of converting a filesize value to a binary string representation padded to 8 places with zeros.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/format_bits.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n> 1b | format bits\n00000001\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Prompt Position in Nushell\nDESCRIPTION: Configuration snippet showing how to enable rendering the right prompt on the last line of user input by modifying the config.nu file settings.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-08-nushell-0.71.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nlet-env config {\n  render_right_prompt_on_last_line : true\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Nushell Path Exists Command Signature\nDESCRIPTION: Command signature showing basic syntax for the path exists command with optional flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/path_exists.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> path exists {flags} \n```\n\n----------------------------------------\n\nTITLE: Detailed Help Information for HTTP GET Command\nDESCRIPTION: Demonstrates getting detailed help information for the 'http get' command, including usage, flags, parameters, and examples.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/help.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\nhelp http get\n# => Fetch the contents from a URL.\n# => \n# => Performs HTTP GET operation.\n# => \n# => Search terms: network, fetch, pull, request, download, curl, wget\n# => \n# => Usage:\n# =>   > http get {flags} <URL>\n# => \n# => Flags:\n# =>   -h, --help - Display the help message for this command\n# =>   -u, --user <Any> - the username when authenticating\n# =>   -p, --password <Any> - the password when authenticating\n# =>   -t, --timeout <Int> - timeout period in seconds\n# =>   -H, --headers <Any> - custom headers you want to add\n# =>   -r, --raw - fetch contents as text rather than a table\n# => \n# => Signatures:\n# =>   <nothing> | http get <string> -> <any>\n# => \n# => Parameters:\n# =>   URL <string>: the URL to fetch the contents from\n# => \n# => Examples:\n# =>   http get content from example.com\n# =>   > http get https://www.example.com\n# => \n# =>   http get content from example.com, with username and password\n# =>   > http get -u myuser -p mypass https://www.example.com\n# => \n# =>   http get content from example.com, with custom header\n# =>   > http get -H [my-header-key my-header-value] https://www.example.com\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Using Cargo\nDESCRIPTION: Command to install Nushell using Rust's package manager Cargo. The basic installation includes core functionality.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-01-18-nushell_0_43.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install nu\n```\n\n----------------------------------------\n\nTITLE: Invalid Command Signature Parsing in Nushell\nDESCRIPTION: This code snippet showcases examples of invalid command signatures in Nushell that now result in parse errors. The changes enforce stricter parsing of custom command arguments, like missing types or default values, preventing runtime failures by catching errors during parsing.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\n# expected parameter or flag\ndef foo [ bar: int: ] {}\n\n# expected type\ndef foo [ bar: =  ] {}\ndef foo [ bar: ] {}\n\n# expected default value\ndef foo [ bar = ] {}\n```\n\n----------------------------------------\n\nTITLE: Nushell Overlay Command Signature\nDESCRIPTION: Command signature showing the syntax for creating a new overlay with optional flags and required name parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_new.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> overlay new {flags} (name)\n```\n\n----------------------------------------\n\nTITLE: Getting Command Help\nDESCRIPTION: Shows how to retrieve help information for Nushell commands\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/fr/book/quick_tour.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelp\n```\n\n----------------------------------------\n\nTITLE: Multi-line Format Examples\nDESCRIPTION: Shows correct multi-line formatting for complex Nushell constructs and long commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/style_guide.md#2025-04-19_snippet_4\n\nLANGUAGE: nu\nCODE:\n```\n[[status]; [UP] [UP]] | all {|el|\n    $el.status == UP\n}\n\n[1 2 3 4] | reduce {|elt, acc|\n    $elt + $acc\n}\n\n{x: 1, y: 2}\n\n[\n  {name: \"Teresa\", age: 24},\n  {name: \"Thomas\", age: 26}\n]\n\nlet selectedProfile = (for it in ($credentials | transpose name credentials) {\n    echo $it.name\n})\n```\n\n----------------------------------------\n\nTITLE: Shorthand Flag Usage\nDESCRIPTION: Demonstrates the new shorthand flag syntax for Nu commands, showing both the old and new way of using the full flag option.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-02-18-nushell-0_10_0.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n> ls --full\n\n> ls -f\n```\n\n----------------------------------------\n\nTITLE: Converting XML plist to Nushell Table\nDESCRIPTION: Example of converting an XML plist document containing a dictionary with a single key-value pair into a Nushell table structure.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_plist.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n        <key>a</key>\n        <integer>3</integer>\n</dict>\n</plist>' | from plist\n╭───┬───╮\n│ a │ 3 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Rendering Deprecated Commands Table in HTML with Vue.js Directives\nDESCRIPTION: This HTML snippet creates a table to display deprecated commands. It uses Vue.js directives to iterate over the computed 'commands' list, rendering each command's title as a link and its usage description. The table is styled with pre-wrapped white space for the description column.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/deprecated.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Executing sys mem Command in Nushell\nDESCRIPTION: This snippet demonstrates the signature and usage of the 'sys mem' command in Nushell. The command is used to view information about the system memory and requires no additional parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/sys_mem.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> sys mem {flags} \n```\n\n----------------------------------------\n\nTITLE: Shuffle Command Signature\nDESCRIPTION: The basic signature for the Nushell shuffle command that takes optional flags as parameters.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/shuffle.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> shuffle {flags} \n```\n\n----------------------------------------\n\nTITLE: Converting Simple TOML String to Record in Nushell\nDESCRIPTION: Demonstrates how to convert a simple TOML-formatted string with a single key-value pair into a Nushell record. The example shows how 'a = 1' gets transformed into a structured record.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/from_toml.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> 'a = 1' | from toml\n╭───┬───╮\n│ a │ 1 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Pipeline-Based Record Updates in Nushell SQLite Database\nDESCRIPTION: Example demonstrating how to update the in-memory SQLite database by piping a record to the 'stor update' command, which simplifies the syntax when working with data already in a pipeline.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_update.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n> {str1: nushell datetime1: 2020-04-17} | stor update --table-name nudb\n```\n\n----------------------------------------\n\nTITLE: Convert list into cell path in NuShell\nDESCRIPTION: This snippet demonstrates converting a list of values into a cell path using `into cell-path` in NuShell. The input is a list `[5 c 7 h]`, and the output combines those values into a cell path.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/into_cell-path.md#2025-04-19_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n\n> [5 c 7 h] | into cell-path\n$.5.c.7.h\n\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table of Nushell Contributors\nDESCRIPTION: This code snippet creates a Markdown table listing contributors to the Nushell project. It includes columns for the author's GitHub username, the title of their contribution, and a link to the corresponding pull request.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-02-04-nushell_0_102_0.md#2025-04-19_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n| author                                         | title                                                                                 | link                                                    |\n| ---------------------------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------- |\n| [@0x4D5352](https://github.com/0x4D5352)       | Improve example formatting in README.md                                               | [#14695](https://github.com/nushell/nushell/pull/14695) |\n| [@NiceGuyIT](https://github.com/NiceGuyIT)     | Reference the correct command: insert -> delete                                       | [#14696](https://github.com/nushell/nushell/pull/14696) |\n| [@blindFS](https://github.com/blindFS)         | feat(lsp): use lsp-textdocument to handle utf16 position                              | [#14742](https://github.com/nushell/nushell/pull/14742) |\n```\n\n----------------------------------------\n\nTITLE: Running Nushell Binary\nDESCRIPTION: Basic command to execute the Nushell binary after installation\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnu\n```\n\n----------------------------------------\n\nTITLE: ANSI Gradient Command Signature in Nushell\nDESCRIPTION: The basic command signature for the ansi gradient command showing the syntax with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/ansi_gradient.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> ansi gradient {flags} ...rest\n```\n\n----------------------------------------\n\nTITLE: View Command Basic Signature\nDESCRIPTION: Shows the basic command signature for the view command with flags parameter.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> view {flags} \n```\n\n----------------------------------------\n\nTITLE: Getting System Information with sys Command in Nushell\nDESCRIPTION: Demonstrates the sys command which provides detailed system information in a structured table format, including host, CPU, disks, memory, network, and battery information.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/introduction.md#2025-04-19_snippet_6\n\nLANGUAGE: nu\nCODE:\n```\nsys\n# => ─────────┬─────────────────────────────────────────\n# =>  host    │ [row 7 columns]\n# =>  cpu     │ [row cores current ghz max ghz min ghz]\n# =>  disks   │ [table 2 rows]\n# =>  mem     │ [row free swap free swap total total]\n# =>  net     │ [table 11 rows]\n# =>  battery │ [table 1 rows]\n# => ─────────┴─────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Plugin Protocol Initialization Functions\nDESCRIPTION: Functions for initializing the plugin protocol, including encoder setup and hello message sending.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ndef send_encoder():\n    sys.stdout.write(chr(4))\n    for ch in \"json\":\n        sys.stdout.write(chr(ord(ch)))\n    sys.stdout.flush()\n\n\ndef send_hello():\n    hello = {\n        \"Hello\": {\n            \"protocol\": \"nu-plugin\",\n            \"version\": \"0.90.2\",\n            \"features\": []\n        }\n    }\n    sys.stdout.writelines([json.dumps(hello)])\n    sys.stdout.flush()\n```\n\n----------------------------------------\n\nTITLE: Basic Polars Cast Command Signature\nDESCRIPTION: Shows the basic command signature for casting column data types in Polars\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/polars_cast.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> polars cast {flags} (dtype) (column)\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell Plugins\nDESCRIPTION: Generic command pattern for installing Nushell plugins using Cargo\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-02-08-nushell_0_44.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Setting Column Names with Headers Command in Nushell\nDESCRIPTION: Example of using the 'headers' command to set column names for a table created by splitting a string. The first row 'a b c' becomes the column headers for the data in the second row '1 2 3'.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/headers.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> \"a b c|1 2 3\" | split row \"|\" | split column \" \" | headers\n╭───┬───┬───┬───╮\n│ # │ a │ b │ c │\n├───┼───┼───┼───┤\n│ 0 │ 1 │ 2 │ 3 │\n╰───┴───┴───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Encoding Ack Message in JSON for Nushell Plugin Protocol\nDESCRIPTION: Example of an Ack message in JSON format for the Nushell plugin protocol, used for flow control.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugin_protocol_reference.md#2025-04-19_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Ack\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Removal of fmt Command\nDESCRIPTION: The `fmt` command has been removed following deprecation, with users directed to utilize the `format number` command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Signature format for the 'stor create' command in Nushell\nDESCRIPTION: The signature syntax for the 'stor create' command showing the basic usage pattern with flags.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/stor_create.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> stor create {flags} \n```\n\n----------------------------------------\n\nTITLE: Cloning Nushell Documentation Repository in Nu\nDESCRIPTION: Command to clone the Nushell documentation repository locally using Git in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\ngit clone git@github.com:nushell/nushell.github.io.git nu-docs\n```\n\n----------------------------------------\n\nTITLE: PWD Fix for Root Paths - Rust\nDESCRIPTION: This snippet describes a fix where the `PWD` environment variable was not correctly pointing to root paths. This likely involved correcting the path resolution logic. Fixing such issues is crucial for ensuring accurate navigation and file system operations within Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-05-twin0245.md#2025-04-19_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nYizhePKU [fixed PWD not pointing to root paths](https://github.com/nushell/nushell/pull/12761)\n```\n\n----------------------------------------\n\nTITLE: Forward References in Nushell Commands\nDESCRIPTION: Shows how custom commands can be used before their definition due to command definitions being processed before script execution.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-01-05-nushell_0_25.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\nadd 1 5\n\ndef add [x, y] {\n    = $x + $y\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Hello Message to Plugin\nDESCRIPTION: Shows the Hello message format used to initiate communication with a Nushell plugin, including protocol information and version compatibility details.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/contributor-book/plugins.md#2025-04-19_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hello\": {\n    \"protocol\": \"nu-plugin\",\n    \"version\": \"0.90.2\",\n    \"features\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overlay List Command Signature\nDESCRIPTION: The basic command signature for listing overlays in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/overlay_list.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> overlay list {flags} \n```\n\n----------------------------------------\n\nTITLE: Dropping Last Three Rows\nDESCRIPTION: Example showing how to drop the last three rows using range syntax.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/drop_nth.md#2025-04-19_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\n> [0,1,2,3,4,5] | drop nth 3..\n╭───┬───╮\n│ 0 │ 0 │\n│ 1 │ 1 │\n│ 2 │ 2 │\n╰───┴───╯\n```\n\n----------------------------------------\n\nTITLE: Multiline Table Creation in Nushell\nDESCRIPTION: Demonstrates the new multiline syntax for creating tables in Nushell 0.34.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-07-13-nushell_0_34.md#2025-04-19_snippet_3\n\nLANGUAGE: nushell\nCODE:\n```\n[\n  [name, value];\n  [foo, 2]\n  [bar, 7]\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Type Assignment Limitation in Nushell\nDESCRIPTION: This example shows how attempting to assign an error value to a variable causes immediate termination, making the variable inaccessible. It demonstrates that error values cannot be persisted in variables even when type annotations are used.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/lang-guide/chapters/types/other_types/error.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n> let e: error = (error make --unspanned { msg: \"This is an error\" })\nError:   × This is an error\n\n> $e\nError: nu::shell::variable_not_found\n\n× Variable not found\n   ╭─[entry #19:1:1]\n1 │ $e\n   · ─┬\n   ·  ╰── variable not found\n   ╰────\n```\n\n----------------------------------------\n\nTITLE: Removing Files with rm Command\nDESCRIPTION: Shows how to delete files or directories using Nushell's rm command\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/moving_around.md#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrm file_or_directory\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell with Extra Features\nDESCRIPTION: Installation command for Nushell with additional features enabled\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-02-08-nushell_0_44.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=extra\n```\n\n----------------------------------------\n\nTITLE: Removal of range Command\nDESCRIPTION: The `range` command has been completely removed from Nushell following its deprecation. Users are advised to use the `slice` command as a replacement.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2025-03-18-nushell_0_103_0.md#2025-04-19_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Adding Index to a Specific Row in Nushell\nDESCRIPTION: This snippet demonstrates adding an index value to only one specific row in a table, which creates a heterogeneous list rather than a uniform table.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/working_with_tables.md#2025-04-19_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\nls | upsert 3.index { \"---->\" } | first 5\n```\n\n----------------------------------------\n\nTITLE: Getting the Size of an Object with len\nDESCRIPTION: This snippet demonstrates how to get the size (length) of an object using the `len` function in Python.  The `len` function can be used with various data structures, including strings, lists, and tuples, to determine the number of elements they contain. It's a fundamental operation for working with sequences and collections.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/es/book/mapa_imperativo_nushell.md#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n\"len\"\n```\n\n----------------------------------------\n\nTITLE: Applying Bitwise OR to Two Numbers in Nushell\nDESCRIPTION: Demonstrates how to use the 'bits or' command to perform a bitwise OR operation on two integers in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/bits_or.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n> 2 | bits or 6\n6\n```\n\n----------------------------------------\n\nTITLE: Listing All Nushell Commands\nDESCRIPTION: Shows how to display a list of all available commands in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/help.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nhelp commands\n```\n\n----------------------------------------\n\nTITLE: Calculating Averages with jq\nDESCRIPTION: Shows how to extract values from a field in a JSON array and calculate their average using jq's map, add, and length functions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\necho '[{\"score\": 90}, {\"score\": 85}, {\"score\": 95}]' |\njq -r 'map(.score) | add / length'\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Changes in Nu\nDESCRIPTION: Command to create a new Git branch for making changes to the documentation using Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\ngit checkout -b my_changes\n```\n\n----------------------------------------\n\nTITLE: Using Argument Invocation in Nushell\nDESCRIPTION: Demonstrates how to run a pipeline inside another command as an argument and use the results in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-06-09-nushell_0_15_0.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> echo $(ls | where size > 10kb | count)\n3\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin from Nushell\nDESCRIPTION: The `plugin rm` command removes a specified plugin from the plugin registry file. The default registry is `$nu.plugin-path`, but an alternative can be specified with `--plugin-config`. Parameters include the plugin name and optional registry configuration. This removes the plugin from the registry, but commands remain until the next shell startup.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nplugin rm gstat\n```\n\nLANGUAGE: nushell\nCODE:\n```\nplugin rm --plugin-config ~/polars.msgpackz polars\n```\n\n----------------------------------------\n\nTITLE: Listing Key Modifiers in Nushell\nDESCRIPTION: This example demonstrates how to use the 'keybindings list' command to get a list of key modifiers in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/keybindings_list.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> keybindings list --modifiers\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell on Linux using Nix profile\nDESCRIPTION: Command to install Nushell on Linux systems using the Nix package manager via profile install command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix profile install nixpkgs#nushell\n```\n\n----------------------------------------\n\nTITLE: Using New Math Commands in Nushell\nDESCRIPTION: Demonstrates the usage of new math commands introduced in Nushell 0.73, including trigonometric functions and logarithms.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-12-20-nushell-0.73.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n〉math pi | math cos\n-1\n〉math e | math ln\n1\n〉[16 8 4 2] | math log 2\n[4 3 2 1]\n```\n\n----------------------------------------\n\nTITLE: Menu Configuration for Abbreviation in Nushell\nDESCRIPTION: This JavaScript snippet configures a menu in Nushell that displays available aliases based on the user's current input, making abbreviation expansion more efficient.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-05-15-top-nushell-hacks.md#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n    {\n      name: abbr_menu\n      only_buffer_difference: false\n      marker: \"👀 \"\n      type: {\n        layout: columnar\n        columns: 1\n        col_width: 20\n        col_padding: 2\n      }\n      style: {\n        text: green\n        selected_text: green_reverse\n        description_text: yellow\n      }\n      source: { |buffer, position|\n        scope aliases\n        | where name == $buffer\n        | each { |elt| {value: $elt.expansion }}\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Nushell Timeit Comparison (0.92.0)\nDESCRIPTION: This snippet demonstrates the execution time of a simple command using `timeit` in Nushell version 0.92.0. It calculates the average execution time for 1000 iterations of incrementing a version number using the `inc -m` command, showcasing performance improvements due to persistent plugins.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n\n# 0.92.0 (8x faster!)\n> 1..1000 | each { timeit { \"2.3.2\" | inc -m } } | math avg\n308µs 577ns\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to Nushell\nDESCRIPTION: The `plugin add` command adds a plugin to the plugin registry file. By default, it uses the `$nu.plugin-path`, but a different registry file can be specified using the `--plugin-config` flag. Parameters include the path to the plugin and optional registry configuration. Input is the plugin path and output is an updated registry file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-30-nushell_0_93_0.md#2025-04-19_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\nplugin add ~/.cargo/bin/nu_plugin_gstat\n```\n\nLANGUAGE: nushell\nCODE:\n```\nplugin add --plugin-config ~/polars.msgpackz ~/.cargo/bin/nu_plugin_polars\n```\n\nLANGUAGE: nushell\nCODE:\n```\nglob ~/.cargo/bin/nu_plugin_* | each { |file| plugin add $file }\n```\n\n----------------------------------------\n\nTITLE: Git Log Visualization Using Nushell Chart Command\nDESCRIPTION: Command pipeline that extracts git log data, processes it to get author contributions over time, and visualizes it as a line chart. The command splits git log entries into columns and filters for a specific author's contributions.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-10-13-nushell_0_21.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log \"--pretty=format:%h<nu>%aN<nu>%s<nu>%aD\" | lines | split column \"<nu>\" sha1 author desc merged_at | where author == \"Andrés N. Robalino\" | update merged_at { get merged_at | str to-datetime } | reverse | chart line merged_at -f \"%b-%Y\"\n```\n\n----------------------------------------\n\nTITLE: Using Constants for Dynamic Source Paths in Nushell\nDESCRIPTION: This snippet demonstrates the correct way to use a dynamic path with source by using a constant, which is resolved during parsing, rather than a variable.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/thinking_in_nu.md#2025-04-19_snippet_8\n\nLANGUAGE: nu\nCODE:\n```\nconst my_path = \"~/nushell-files\"\nsource $\"($my_path)/common.nu\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nushell using Cargo in Rust\nDESCRIPTION: Commands to install Nushell and its plugins using Cargo, the Rust package manager. It includes options for installing with additional features.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-08-11-nushell_0_18.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu --features=stable\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Setting Permanent Environment Variables\nDESCRIPTION: This snippet illustrates how to set environment variables that persist across sessions by configuring them in the Nu configuration file.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/environment.md#2025-04-19_snippet_9\n\nLANGUAGE: nu\nCODE:\n```\n# In config.nu\n$env.FOO = 'BAR'\n```\n\n----------------------------------------\n\nTITLE: Generating .oh-my-posh.nu File and Initializing Oh My Posh Prompt in Nushell\nDESCRIPTION: This code snippet generates the .oh-my-posh.nu file using a specified theme and initializes the oh-my-posh prompt by sourcing the generated file in the Nushell configuration.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/3rdpartyprompts.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n# Generate the .oh-my-posh.nu file\noh-my-posh init nu --config ~/.poshthemes/M365Princess.omp.json\n\n# Initialize oh-my-posh.nu at shell startup by adding this line in your config.nu file\nsource ~/.oh-my-posh.nu\n```\n\n----------------------------------------\n\nTITLE: Overlay Module Definition in Nushell\nDESCRIPTION: Example of creating a module with environment variable export for use with overlays.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-11-29-nushell-0.72.md#2025-04-19_snippet_6\n\nLANGUAGE: nushell\nCODE:\n```\nmodule prompt {\n    export-env {\n        let-env PROMPT_COMMAND = (date now | into string)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hooks as Strings\nDESCRIPTION: This example demonstrates how to define a hook using a string instead of a block. When a hook is defined as a string, the string is executed as if it were entered into the REPL.  This allows defining commands and aliases and makes use of before and after environment variables.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/de/book/hooks.md#2025-04-19_snippet_5\n\nLANGUAGE: nu\nCODE:\n```\n\"$env.config = ($env.config | upsert hooks {\n    pre_prompt: '$env.SPAM = \\\"eggs\\\"'\n})\n\n$env.SPAM\neggs\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Content for Nushell Weekly Update\nDESCRIPTION: This markdown snippet outlines the recent updates and contributions to the Nushell project, including new features, improvements, and documentation efforts.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2019-11-01-twin0010.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #10\n\nLots of new commands this week, some updates in how we handle paths and column paths, better debugging capabilities, improved command help, more work towards getting Nu ready to be a login shell, and more documentation.\n\n- We're currently running a [short survey about Nu](https://t.co/nujSjnI0dr?amp=1). Even if you aren't a Nu user, we'd love to hear from you!\n- wycats added better tracing for debugging the parser ([#892](https://github.com/nushell/nushell/pull/892))\n- notryanb updated `fetch` to be able to load URLs from strings and $it ([#886](https://github.com/nushell/nushell/pull/886))\n- jonathandturner added updates to always save history ([#881](https://github.com/nushell/nushell/pull/881)); added parameter descriptions to command help ([#882](https://github.com/nushell/nushell/pull/882)); added new builtin variables `$nu:config`, `$nu:env`, and `$nu:path`([#883](https://github.com/nushell/nushell/pull/883), [#884](https://github.com/nushell/nushell/pull/884)); added support for reading the PATH from config ([#885](https://github.com/nushell/nushell/pull/885)), added a new `read` command for easier text handling ([#889](https://github.com/nushell/nushell/pull/889)), and added `prepend` and `append` for adding rows to tables ([#890](https://github.com/nushell/nushell/pull/890))\n- andrasio added more support for working with ~ in paths across platforms ([#879](https://github.com/nushell/nushell/pull/879)) as well as added initial support for row numbers in column paths ([#892](https://github.com/nushell/nushell/pull/892), [#898](https://github.com/nushell/nushell/pull/898))\n- andrasio also worked on better separation between the parser and other subsystems ([#874](https://github.com/nushell/nushell/pull/874))\n- oknozor and loksonarius added more documentation for commands ([#871](https://github.com/nushell/nushell/pull/871), [#873](https://github.com/nushell/nushell/pull/873), [#899](https://github.com/nushell/nushell/pull/899))\n```\n\n----------------------------------------\n\nTITLE: Markdown Pull Request Table\nDESCRIPTION: Table listing pull requests with contributor information, changes made, and links to the PRs on GitHub.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-12-24-nushell_0_101_0.md#2025-04-19_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n|[@ratherforky](https://github.com/ratherforky)|Fix silent failure of parsing input output types|[#14510](https://github.com/nushell/nushell/pull/14510)|\n|[@rfaulhaber](https://github.com/rfaulhaber)|Add mac and IP address entries to `sys net`|[#14389](https://github.com/nushell/nushell/pull/14389)|\n|[@rikukiix](https://github.com/rikukiix)|Update SHLVL (only when interactive) on startup|[#14404](https://github.com/nushell/nushell/pull/14404)|\n|[@schrieveslaach](https://github.com/schrieveslaach)|Bump Calamine|[#14403](https://github.com/nushell/nushell/pull/14403)|\n```\n\n----------------------------------------\n\nTITLE: Merging Environment Variables into Nushell Configuration\nDESCRIPTION: Merged the 'env' command into the '$nu' configuration in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-13-twin0029.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- jonathandturner released 0.11.0 (#1474), and merged `env` into `$nu` (#1463)\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query on SQLite Database in Nushell\nDESCRIPTION: Shows how to open a SQLite database and execute a raw SQL query using Nushell's db commands.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2022-05-03-nushell_0_62.md#2025-04-19_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\n  > db open db.sqlite | db query \"SELECT a FROM table_a LIMIT 10\"\n```\n\n----------------------------------------\n\nTITLE: Command Documentation Table Template in Vue.js\nDESCRIPTION: An HTML table template that displays command documentation. Uses Vue directives to iterate through commands and display their titles and usage information. Includes base path handling for links.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/prompt.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Checking if multiple strings end with '.txt' in Nushell\nDESCRIPTION: Example of using 'str ends-with' with a list of strings to check if each ends with '.txt', returning a list of boolean values.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/str_ends-with.md#2025-04-19_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\n['my_library.rb', 'README.txt'] | str ends-with '.txt'\n```\n\n----------------------------------------\n\nTITLE: Displaying Nushell Weekly Update Header in Markdown\nDESCRIPTION: Markdown header for the weekly Nushell project update post, indicating the update number.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-13-twin0103.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# This week in Nushell #103\n```\n\n----------------------------------------\n\nTITLE: Profiling a Closure\nDESCRIPTION: The 'debug profile' command is used to profile closures in Nushell, assisting developers in assessing performance.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2024-04-02-nushell_0_92_0.md#2025-04-19_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\ndebug profile\n```\n\n----------------------------------------\n\nTITLE: Viewing Nushell Memory Blocks Example\nDESCRIPTION: Example showing how to view blocks registered in Nushell's EngineState memory using the view blocks command.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/view_blocks.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> view blocks\n\n```\n\n----------------------------------------\n\nTITLE: Weekly Update List in Markdown\nDESCRIPTION: A structured markdown document listing the weekly changes and contributions to various Nushell-related repositories, including core Nushell, VSCode extension, documentation, and scripts.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-08-07-twin0102.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nushell #102\n\n## Nushell\n\n- jntrnr created [in/not-in for strings](https://github.com/nushell/nushell/pull/3906), [released to 0.35](https://github.com/nushell/nushell/pull/3884)\n- soumil-07 created [use bigdecimal-rs patch](https://github.com/nushell/nushell/pull/3905), and [sourced config from $NU_CONFIG_DIR if it exists](https://github.com/nushell/nushell/pull/3883)\n- fdncred [added officially supported by section](https://github.com/nushell/nushell/pull/3895)\n- elferherrera added [datetime commands](https://github.com/nushell/nushell/pull/3894), and [better representation in nested dataframes](https://github.com/nushell/nushell/pull/3875), and [simplified contains](https://github.com/nushell/nushell/pull/3874)\n- waldyrious created [normalize capitalization in issue templates](https://github.com/nushell/nushell/pull/3891), and [fixed typo: patter → pattern](https://github.com/nushell/nushell/pull/3890)\n- realcundo [implemented PartialEq for ReturnSuccess](https://github.com/nushell/nushell/pull/3888)\n- lily-mara [reimplemented parsers with nu-serde](https://github.com/nushell/nushell/pull/3880), and [added the nu-serde crate](https://github.com/nushell/nushell/pull/3878)\n\n## Extension\n\n- fdncred [updated npm dependencies](https://github.com/nushell/vscode-nushell-lang/pull/37), [updated regex to match new syntax](https://github.com/nushell/vscode-nushell-lang/pull/36), and [updated to 0.4.0, removed intellisense](https://github.com/nushell/vscode-nushell-lang/pull/35)\n\n## Documentation\n\n- hedonihilist [fixed typo](https://github.com/nushell/nushell.github.io/pull/183), and [updated plugin discovery section of the doc](https://github.com/nushell/nushell.github.io/pull/182)\n- bbkane [mentioned using environmental variables with scripts](https://github.com/nushell/nushell.github.io/pull/180), [added concatenating tables subsection](https://github.com/nushell/nushell.github.io/pull/179), added [demo multiline pipelines as subexpressions in docs](https://github.com/nushell/nushell.github.io/pull/178), and [Refer to \"Working with Strings\" in String section](https://github.com/nushell/nushell.github.io/pull/177)\n\n## Nu_Scripts\n\n- lily-mara created [added nu-serde to nu_release.nu](https://github.com/nushell/nu_scripts/pull/86)\n- Yethal [updated scraping.nu](https://github.com/nushell/nu_scripts/pull/85), and [added webscraping example](https://github.com/nushell/nu_scripts/pull/83)\n- filaretov added [Conda and Python venv environment scripts](https://github.com/nushell/nu_scripts/pull/84)\n- skelly37 [createed cdpath-implementation.nu](https://github.com/nushell/nu_scripts/pull/81)\n```\n\n----------------------------------------\n\nTITLE: Choosing Rust Version with Rustup\nDESCRIPTION: Interactive process for selecting and installing the correct Rust version using rustup\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup\n```\n\n----------------------------------------\n\nTITLE: Custom Aggregations with jq\nDESCRIPTION: Shows how to implement a custom aggregation (summing values) using jq's reduce function.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/cookbook/jq_v_nushell.md#2025-04-19_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\necho '[{\"value\": 10}, {\"value\": 20}, {\"value\": 30}]' |\njq -r 'reduce .[] as $item (0; . + $item.value)'\n```\n\n----------------------------------------\n\nTITLE: Installing macOS Dependencies with Homebrew\nDESCRIPTION: Installing OpenSSL and CMake development tools for Nushell on macOS\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/ja/book/installation.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl cmake\n```\n\n----------------------------------------\n\nTITLE: Hiding an Entire Module in Nushell\nDESCRIPTION: Example showing how to hide all exports from a module by using the 'hide' command with the module name.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/zh-CN/book/modules.md#2025-04-19_snippet_11\n\nLANGUAGE: nu\nCODE:\n```\nuse greetings.nu\n\n# => $env.\"greetings MYNAME\"\n# => Arthur, King of the Britons\n\n# => greetings hello \"world\"\n# => hello world!\n\nhide greetings\n\n$env.\"greetings MYNAME\"  # error! environment variable not found!\n\ngreetings hello \"world\" # error! command not found!\n```\n\n----------------------------------------\n\nTITLE: Listing Standard Library Commands in Nushell\nDESCRIPTION: Command to display all available standard library commands with their names, descriptions and extra details in a table format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/standard_library.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\nnu -c \"\n  use std\n  scope commands\n  | where name =~ '^std '\n  | select name description extra_description\n  | wrap 'Standard Library Commands'\n  | table -e\n\"\n```\n\n----------------------------------------\n\nTITLE: Rotate Record Clockwise in Nushell\nDESCRIPTION: This example demonstrates how to rotate a record clockwise in Nushell, transforming it into a table. The rotated table has default column names 'column0' and 'column1', displaying the original values and keys respectively.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/rotate.md#2025-04-19_snippet_0\n\nLANGUAGE: nu\nCODE:\n```\n\n> {a:1, b:2} | rotate\n╭───┬─────────┬─────────╮\n│ # │ column0 │ column1 │\n├───┼─────────┼─────────┤\n│ 0 │       1 │ a       │\n│ 1 │       2 │ b       │\n╰───┴─────────┴─────────╯\n\n```\n\n----------------------------------------\n\nTITLE: Refining 'detect columns' Output in Nushell\nDESCRIPTION: Demonstrates how to refine the output of 'detect columns' by dropping an extra column and converting file sizes to a more readable format.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-11-16-nushell_0_40.md#2025-04-19_snippet_1\n\nLANGUAGE: nu\nCODE:\n```\n> df | detect columns | drop column\n───┬────────────────┬───────────┬───────────┬───────────┬──────┬────────────────\n # │   Filesystem   │ 1K-blocks │   Used    │ Available │ Use% │    Mounted\n───┼────────────────┼───────────┼───────────┼───────────┼──────┼────────────────\n 0 │ udev           │ 8108824   │ 0         │ 8108824   │ 0%   │ /dev\n 1 │ tmpfs          │ 1631284   │ 2068      │ 1629216   │ 1%   │ /run\n 2 │ /dev/nvme1n1p2 │ 490691512 │ 346067188 │ 119628844 │ 75%  │ /\n 3 │ tmpfs          │ 8156408   │ 251332    │ 7905076   │ 4%   │ /dev/shm\n 4 │ tmpfs          │ 5120      │ 4         │ 5116      │ 1%   │ /run/lock\n 5 │ tmpfs          │ 8156408   │ 0         │ 8156408   │ 0%   │ /sys/fs/cgroup\n 6 │ /dev/nvme0n1p1 │ 508932    │ 211684    │ 297248    │ 42%  │ /boot/efi\n 7 │ tmpfs          │ 1631280   │ 128       │ 1631152   │ 1%   │ /run/user/1000\n 8 │ /dev/nvme0n1p2 │ 238810780 │ 136867812 │ 89742316  │ 61%  │ /media/st/Data\n───┴────────────────┴───────────┴───────────┴───────────┴──────┴────────────────\n```\n\nLANGUAGE: nu\nCODE:\n```\n> df | detect columns | drop column | into filesize 1K-blocks Used Available\n───┬────────────────┬───────────┬──────────┬───────────┬──────┬────────────────\n # │   Filesystem   │ 1K-blocks │   Used   │ Available │ Use% │    Mounted\n───┼────────────────┼───────────┼──────────┼───────────┼──────┼────────────────\n 0 │ udev           │    8.1 MB │      0 B │    8.1 MB │ 0%   │ /dev\n 1 │ tmpfs          │    1.6 MB │   2.1 KB │    1.6 MB │ 1%   │ /run\n 2 │ /dev/nvme1n1p2 │  490.7 MB │ 346.1 MB │  119.6 MB │ 75%  │ /\n 3 │ tmpfs          │    8.2 MB │ 251.3 KB │    7.9 MB │ 4%   │ /dev/shm\n 4 │ tmpfs          │    5.1 KB │      4 B │    5.1 KB │ 1%   │ /run/lock\n 5 │ tmpfs          │    8.2 MB │      0 B │    8.2 MB │ 0%   │ /sys/fs/cgroup\n 6 │ /dev/nvme0n1p1 │  508.9 KB │ 211.7 KB │  297.2 KB │ 42%  │ /boot/efi\n 7 │ tmpfs          │    1.6 MB │    128 B │    1.6 MB │ 1%   │ /run/user/1000\n 8 │ /dev/nvme0n1p2 │  238.8 MB │ 136.9 MB │   89.7 MB │ 61%  │ /media/st/Data\n───┴────────────────┴───────────┴──────────┴───────────┴──────┴────────────────\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine Linux dependencies for Nushell\nDESCRIPTION: This script configures the apk package manager to use the Gemfury repository for Nushell on Alpine Linux. It then installs Nushell, after adding the repository and updating the package index.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/installation.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\"echo \\\"https://alpine.fury.io/nushell/\\\" | tee -a /etc/apk/repositories\napk update\napk add --allow-untrusted nushell\"\n```\n\n----------------------------------------\n\nTITLE: Basic Hex Decode Command Signature\nDESCRIPTION: Shows the basic command signature for hex decoding in Nushell.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/docs/decode_hex.md#2025-04-19_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n> decode hex {flags} \n```\n\n----------------------------------------\n\nTITLE: Installing Nushell 0.37 using Cargo\nDESCRIPTION: Commands to install Nushell 0.37 using Cargo, the Rust package manager. It includes options for installing with extra features and individual plugins.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2021-09-14-nushell_0_37.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install nu\ncargo install nu --features=extra\ncargo install nu_plugin_<plugin name>\n```\n\n----------------------------------------\n\nTITLE: Executing a Command with Full Configuration Loading\nDESCRIPTION: Runs a command after loading all configuration files, including user's login file. Does not enter the REPL.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/book/configuration.md#2025-04-19_snippet_24\n\nLANGUAGE: nushell\nCODE:\n```\nnu -l -c \"ls\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Weekly Update in Markdown\nDESCRIPTION: A markdown-formatted list of recent contributions to the Nu project, including feature additions, improvements, and bug fixes. Each line mentions a contributor and their specific contributions with associated pull request numbers.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/blog/2020-03-27-twin0031.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This week in Nu #31\n\n- pulpdrew added support for removing multiple files at once (#1526), added `from-ics` and `from-vcf` (#1504, #1509), improved numerical comparisons (#1508)\n- jonathandturner added automatic rotation of a single row table (#1516, #1524), added `ps --full` (#1507, #1514)\n- vsoch worked on fixing the automatic container updates (#1522)\n- jonstodle fixed `..` and `/` not being valid move targets (#1519)\n- nickgerace added a quickstart section for Docker users (#1515)\n- thegedge improved the logic for `which` (#1510)\n```\n\n----------------------------------------\n\nTITLE: Rendering Removed Commands Table with Vue.js and HTML\nDESCRIPTION: This template creates a table to display the list of removed Nushell commands. It iterates over the computed 'commands' property, rendering each command's title as a link and its usage description.\nSOURCE: https://github.com/nushell/nushell.github.io/blob/main/commands/categories/removed.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Command</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"command in commands\">\n       <td><a :href=\"$withBase(command.path)\">{{ command.title }}</a></td>\n       <td style=\"white-space: pre-wrap;\">{{ command.frontmatter.usage }}</td>\n    </tr>\n  </tbody>\n</table>\n```"
  }
]