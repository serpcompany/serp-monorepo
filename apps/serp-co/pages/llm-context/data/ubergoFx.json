[
  {
    "owner": "uber-go",
    "repo": "fx",
    "content": "TITLE: Visualizing Application Lifecycle with Mermaid Flowchart\nDESCRIPTION: A flowchart diagram illustrating the lifecycle of an Fx application. It shows the initialization phase (Provide → Decorate → Invoke) and execution phase (Start → Wait → Stop), with the connection between them.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph \"Initialization (fx.New)\"\n        Provide --> Decorate --> Invoke\n    end\n    subgraph \"Execution (fx.App.Run)\"\n        Start --> Wait --> Stop\n    end\n    Invoke --> Start\n\n    style Wait stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Installing Fx via Go Modules\nDESCRIPTION: Command to install the Fx dependency injection framework using Go modules. This installs version 1 of the Fx package from Uber's repository.\nSOURCE: https://github.com/uber-go/fx/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.uber.org/fx@v1\n```\n\n----------------------------------------\n\nTITLE: Complete Fx Application with HTTP Server\nDESCRIPTION: Final application setup including both fx.Provide and fx.Invoke to ensure the HTTP server is properly instantiated and started. Shows the complete configuration needed for a working HTTP server in Fx.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/http-server.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/02-http-server/main.go:app\"\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Server Implementation with Lifecycle Hooks\nDESCRIPTION: Full implementation of the HTTP server including lifecycle hooks for start and stop operations. Demonstrates proper server initialization and shutdown handling within the Fx framework.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/http-server.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/02-http-server/main.go:full\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Minimal Fx Application in Go\nDESCRIPTION: Creates a minimal Fx application using fx.New() with no arguments and runs it with App.Run(). This demonstrates the basic structure of an Fx application that doesn't yet have any custom components.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/minimal.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/01-minimal/main.go:main\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Fx Module in Go\nDESCRIPTION: Demonstrates how to define a basic Fx module with a name for logging purposes.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar Module = fx.Module(\"server\", // ...\n```\n\n----------------------------------------\n\nTITLE: Building HTTP Server with Fx Lifecycle\nDESCRIPTION: Function to create a new HTTP server with lifecycle hooks for proper startup and shutdown handling. Uses fx.Lifecycle to manage the server's lifecycle within the Fx application.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/http-server.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/02-http-server/main.go:partial-1\"\n--8<-- \"get-started/02-http-server/main.go:partial-2\"\n```\n\n----------------------------------------\n\nTITLE: Core Fx Package Interface\nDESCRIPTION: Defines the main types and functions in the Fx package including App construction and Option configurations.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/container.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage fx\n\ntype App\n  func New(opts ...Option) *App\n  func (app *App) Run()\n\ntype Option\n  func Provide(constructors ...interface{}) Option\n  func Invoke(funcs ...interface{}) Option\n```\n\n----------------------------------------\n\nTITLE: Value Group Flow Diagram in Mermaid\nDESCRIPTION: Flowchart showing how multiple producers (NewA, NewB, etc.) feed into a value group of type Route, which is then consumed by NewServeMux and NewSiteMap.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/index.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    group{{\"[]Route\"}}\n    NewA & NewB & dots[...] & NewZ --> group\n    group --> server[NewServeMux]\n    group --> NewSiteMap\n\n    style dots fill:none,stroke:none\n```\n\n----------------------------------------\n\nTITLE: Providing HTTP Server to Fx Application\nDESCRIPTION: Code showing how to provide the HTTP server to the Fx application using fx.Provide. Demonstrates dependency injection setup for the server component.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/http-server.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/02-http-server/main.go:provide-server-1\"\n--8<-- \"get-started/02-http-server/main.go:provide-server-2\"\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Server with Invoke Example\nDESCRIPTION: Shows a complete example of providing and starting an HTTP server using both fx.Provide and fx.Invoke.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/container.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfx.New(\n  fx.Provide(newHTTPServer),\n  fx.Invoke(startHTTPServer),\n).Run()\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Parameter Objects in Go\nDESCRIPTION: Demonstrates the basic structure of parameter objects with proper naming conventions for Fx constructors.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ClientParams struct {}\n\ntype Params struct {}\n```\n\n----------------------------------------\n\nTITLE: Adding Components to an Fx Module with Provide\nDESCRIPTION: Shows how to add components to an Fx module using fx.Provide.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar Module = fx.Module(\"server\",\n  fx.Provide(\n    NewHTTPServer,\n    NewGRPCServer,\n  ),\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Annotating a Function with Type Casting for Value Groups\nDESCRIPTION: This code demonstrates how to annotate a function whose return type doesn't exactly match the value group type. The fx.As option is used to cast the struct to an interface.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\napp := fx.New(\n\tfx.Provide(\n\t\tfx.Annotate(\n\t\t\tnewFrameworkWatcher,\n\t\t\tfx.As(new(watch.Interface)), // Cast *cache.ListWatch to watch.Interface\n\t\t\tfx.ResultTags(`group:\"watchers\"`),\n\t\t),\n\t\t// ...\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Route Interface in Go\nDESCRIPTION: Defines a Route type that extends http.Handler, where the handler knows its registration path.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/registration.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Route interface {\n\thttp.Handler\n\tPattern() string\n}\n```\n\n----------------------------------------\n\nTITLE: Using fx.Provide with Constructor\nDESCRIPTION: Demonstrates how to provide values to the container using a constructor function that requires dependencies.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/container.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfx.Provide(\n  func(cfg *Config) *Logger { /* ... */ },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an AsRoute Helper Function for Handler Registration\nDESCRIPTION: Defines a utility function that wraps handler constructors to conform to the Route interface and adds them to a specific value group, simplifying the registration of new handlers.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/many-handlers.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// AsRoute annotates the given constructor to state that\n// it provides a Route type that belongs to the \"routes\" group.\nfunc AsRoute(f any) any {\n\treturn fx.Annotate(\n\t\tf,\n\t\tfx.As(new(Route)),\n\t\tfx.ResultTags(`group:\"routes\"`),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Function that Produces a Result Object in Go\nDESCRIPTION: This snippet demonstrates how to set up a function that creates a result object in the context of Uber's fx framework. It shows the basic structure of a result object and its constructor function.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype result struct {\n\tWatcher watch.Interface\n}\n\nfunc newResult(lc fx.Lifecycle, client kubernetes.Interface) (result, error) {\n\twatcher, err := client.CoreV1().Pods(\"\").Watch(context.Background(), metav1.ListOptions{})\n\tif err != nil {\n\t\treturn result{}, err\n\t}\n\n\tlc.Append(fx.Hook{\n\t\tOnStop: func(ctx context.Context) error {\n\t\t\twatcher.Stop()\n\t\t\treturn nil\n\t\t},\n\t})\n\n\treturn result{\n\t\tWatcher: watcher,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Variadic Arguments for Value Group Consumption in Go\nDESCRIPTION: Shows how to define a function with variadic arguments for consuming a value group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc NewInit(values ...int) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Equivalent fx.Options Ordering in Go\nDESCRIPTION: This snippet shows that the order of fx.Provide operations doesn't matter as dependencies are determined by function parameters and results.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// The following are all equivalent:\nfx.Options(fx.Provide(ParseConfig, NewLogger))\nfx.Options(fx.Provide(NewLogger, ParseConfig))\nfx.Options(fx.Provide(ParseConfig), fx.Provide(NewLogger))\nfx.Options(fx.Provide(NewLogger), fx.Provide(ParseConfig))\n```\n\n----------------------------------------\n\nTITLE: Initializing Parameter Object for Value Group Consumption in Go\nDESCRIPTION: Defines a parameter object and a function that consumes it, preparing for value group consumption in Uber's fx framework.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype paramObject struct {\n    // ...\n}\n\nfunc NewInit(p paramObject) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring ServeMux to Accept a List of Routes in Go\nDESCRIPTION: Modifies the NewServeMux function to accept a dynamic list of Route objects instead of explicit handler references, promoting better scalability as more handlers are added.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/many-handlers.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewServeMux(routes []Route) *http.ServeMux {\n\tmux := http.NewServeMux()\n\tfor _, route := range routes {\n\t\tmux.Handle(route.Pattern(), route.Handler())\n\t}\n\treturn mux\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Echo Handler with Route Group in fx\nDESCRIPTION: Wraps the NewEchoHandler constructor with AsRoute to add it to the 'routes' group, marking it as a Route implementation that will be collected by NewServeMux.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/many-handlers.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfx.Provide(\n\tAsRoute(NewEchoHandler),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Invocations to an Fx Module\nDESCRIPTION: Demonstrates how to add invocations to an Fx module using fx.Invoke for functions that must always run.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar Module = fx.Module(\"server\",\n  fx.Provide(\n    NewHTTPServer,\n    NewGRPCServer,\n  ),\n  fx.Invoke(RunMigrations),\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Providing a Result Object to an fx Application\nDESCRIPTION: This code shows how to provide a result object constructor function to an fx application. The function is registered with fx.Provide to make its results available to the dependency injection system.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp := fx.New(\n\tfx.Provide(\n\t\tnewResult,\n\t\t// ...\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Functions with fx.Annotate\nDESCRIPTION: Demonstrates how to wrap a function with fx.Annotate to modify its behavior in the dependency injection framework.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/sample.go:wrap-1\"\n--8<-- \"annotate/sample.go:wrap-2\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Hello Handler with Route Group in fx\nDESCRIPTION: Wraps the NewHelloHandler constructor with AsRoute to add it to the 'routes' group, demonstrating how multiple handlers can be added to the same group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/many-handlers.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfx.Provide(\n\tAsRoute(NewHelloHandler),\n)\n```\n\n----------------------------------------\n\nTITLE: Providing Annotated Function with Interface Casting\nDESCRIPTION: Final step showing how to annotate the producer with fx.As to cast the struct to an interface when providing it to the container.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/cast.go:provides\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Object Constructor\nDESCRIPTION: Demonstrates full implementation of a constructor that returns a result object with populated fields.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewClient() ClientResult {\n    client := &Client{}\n    config := &Config{}\n    return ClientResult{\n        Client: client,\n        Config: config,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Private Provide in an Fx Module\nDESCRIPTION: Demonstrates how to use fx.Private to keep a constructor's outputs contained within a module.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar Module = fx.Module(\"server\",\n  fx.Provide(\n    NewHTTPServer,\n    NewGRPCServer,\n  ),\n  fx.Invoke(RunMigrations),\n  fx.Decorate(WithServerMiddleware),\n  fx.Private(\n    fx.Provide(parseConfig),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Tagging a Result Object Field for a Value Group in Go\nDESCRIPTION: This snippet shows how to add an exported field to a result struct and tag it with a group name. This allows the field value to be collected into the named value group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype result struct {\n\tWatcher watch.Interface\n\n\t// New exported field tagged with the group name.\n\tPodWatcher watch.Interface `group:\"watchers\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround for Supplying Interfaces using fx.Annotate in Go\nDESCRIPTION: This snippet demonstrates how to use fx.Annotate with fx.As to supply an interface implementation, preserving the intended interface type.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfx.Supply(\n  fx.Annotate(redisClient, fx.As(new(ClientInterface))),\n)\n```\n\n----------------------------------------\n\nTITLE: Using fx.Supply for Pre-built Values\nDESCRIPTION: Shows how to provide pre-built non-interface values to the container using fx.Supply.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/container.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfx.Provide(\n  fx.Supply(&Config{\n    Name: \"my-app\",\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Annotating EchoHandler with fx in Go\nDESCRIPTION: Uses fx.Annotate and fx.As to provide EchoHandler as a Route in the dependency injection container.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/registration.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfx.Provide(\n\tfx.Annotate(\n\t\tNewEchoHandler,\n\t\tfx.As(new(Route)),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Echo Handler in Go\nDESCRIPTION: Creates a basic HTTP handler that echoes back the request body in the response\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/echo-handler.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/03-echo-handler/main.go:echo-handler\"\n```\n\n----------------------------------------\n\nTITLE: Embedding fx.In into Parameter Objects\nDESCRIPTION: Shows how to embed the fx.In interface into parameter objects to mark them for dependency injection.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ClientParams struct {\n    fx.In\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting ServeMux to HTTP Server\nDESCRIPTION: Modifies the HTTP server configuration to use the configured ServeMux router\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/echo-handler.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/03-echo-handler/main.go:connect-mux\"\n```\n\n----------------------------------------\n\nTITLE: Interface Consumer Function\nDESCRIPTION: Refactored consumer function that accepts an interface instead of a concrete type, allowing for better testability and decoupling.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/cast.go:iface-consumer\"\n```\n\n----------------------------------------\n\nTITLE: Adding Exported Fields to Parameter Objects\nDESCRIPTION: Shows how to add exported dependency fields to parameter objects for use in constructors.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype ClientParams struct {\n    fx.In\n\n    Config *Config\n    Logger *zap.Logger\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Route Handlers with Names\nDESCRIPTION: Adding name annotations to route handlers to resolve dependency injection conflicts\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/another-handler.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/06-another-handler/main.go:route-provides\"\n```\n\n----------------------------------------\n\nTITLE: Providing Zap Logger in Go using Fx\nDESCRIPTION: This snippet shows how to provide a Zap logger to an Fx application using zap.NewExample(). For production use, zap.NewProduction() or a custom logger should be used.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/logger.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfx.Provide(\n    zap.NewExample,\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming Parameter Object Fields\nDESCRIPTION: Illustrates how to use the fields from parameter objects within a constructor.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewClient(p ClientParams) *Client {\n    return &Client{\n        config: p.Config,\n        log:    p.Logger,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Interface Supply Limitation in Go\nDESCRIPTION: This code shows why fx.Supply cannot directly accept interfaces due to Go's reflection limitations, as type information is lost at runtime.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar redisClient ClientInterface = &redis.Client{ ... }\n```\n\n----------------------------------------\n\nTITLE: Wrapping Function with fx.Annotate for Value Group Consumption in Go\nDESCRIPTION: Demonstrates how to wrap a function with fx.Annotate to prepare for value group consumption.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\napp := fx.New(\n    fx.Provide(\n        fx.Annotate(\n            NewInit,\n            // ...\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Parameters\nDESCRIPTION: Demonstrates how to add new optional fields to existing parameter objects for backward compatibility.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype ClientParams struct {\n    fx.In\n\n    Config *Config\n    Logger *zap.Logger\n    Metrics *Metrics `optional:\"true\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hello Handler in Go with Fx\nDESCRIPTION: Defines a new HTTP handler structure for processing hello requests\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/another-handler.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/06-another-handler/main.go:hello-init\"\n```\n\n----------------------------------------\n\nTITLE: Decorating Dependencies in an Fx Module\nDESCRIPTION: Shows how to decorate dependencies in an Fx module before consuming them using fx.Decorate.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar Module = fx.Module(\"server\",\n  fx.Provide(\n    NewHTTPServer,\n    NewGRPCServer,\n  ),\n  fx.Invoke(RunMigrations),\n  fx.Decorate(WithServerMiddleware),\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Strict Value Group Dependencies Flow\nDESCRIPTION: Flowchart demonstrating strict value group dependencies where NewFoo produces values A and B, with A feeding into a value group that's consumed by Run.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/index.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph NewFoo\n        A; B\n    end\n    subgraph \"fx.Invoke\"\n        Run\n    end\n    A --> group{{\"[]A\"}} --> Run\n```\n\n----------------------------------------\n\nTITLE: Updating NewHTTPServer Function with Logger in Go\nDESCRIPTION: This code updates the NewHTTPServer function to accept a logger and use it for logging the 'Starting HTTP server' message.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/logger.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc NewHTTPServer(lc fx.Lifecycle, mux *http.ServeMux, log *zap.Logger) *http.Server {\n    srv := &http.Server{Addr: \":8080\", Handler: mux}\n    lc.Append(fx.Hook{\n        OnStart: func(context.Context) error {\n            log.Info(\"Starting HTTP server\", zap.String(\"addr\", srv.Addr))\n            // ...\n        },\n        // ...\n    })\n    return srv\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Boundary Functions in an Fx Module\nDESCRIPTION: Shows how to export functions used by a module via fx.Provide or fx.Invoke for accessibility.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar Module = fx.Module(\"server\",\n  fx.Provide(\n    NewHTTPServer,\n    NewGRPCServer,\n  ),\n  fx.Private(\n    fx.Provide(parseConfig),\n  ),\n)\n\ntype Config struct {\n  // ...\n}\n\nfunc New(p Params) (Result, error) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Soft Value Group Basic Flow\nDESCRIPTION: Flowchart showing soft value group dependencies with a dotted line indicating conditional execution based on consumption elsewhere in the application.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/index.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph NewFoo\n        A; B\n    end\n    subgraph \"fx.Invoke\"\n        Run\n    end\n    A -.-> group{{\"[]A\"}} --> Run\n```\n\n----------------------------------------\n\nTITLE: Creating a Function that Returns a Different Type\nDESCRIPTION: This snippet defines a function that returns a specific watcher implementation. It will be used to demonstrate type casting when feeding into value groups.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc newFrameworkWatcher(lc fx.Lifecycle, client kubernetes.Interface) (*cache.ListWatch, error) {\n\tfw := cache.NewListWatchFromClient(\n\t\tclient.CoreV1().RESTClient(),\n\t\t\"pods\", \"\", fields.Everything(),\n\t)\n\n\t// ... lifecycle management ...\n\n\treturn fw, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Result Object Constructor\nDESCRIPTION: Shows how to modify a constructor to include the newly added field in the result object.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc NewClient() ClientResult {\n    client := &Client{}\n    config := &Config{}\n    logger := zap.NewProduction()\n    return ClientResult{\n        Client: client,\n        Config: config,\n        Logger: logger,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Soft Value Group Complete Flow\nDESCRIPTION: Extended flowchart showing soft value group dependencies with additional components demonstrating indirect consumption triggering execution.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/index.md#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph NewFoo\n        A; B\n    end\n    subgraph \"fx.Invoke\"\n        Run; Start\n    end\n    A -.-> group{{\"[]A\"}} --> Run\n    B --> C --> Start\n```\n\n----------------------------------------\n\nTITLE: Consuming Optional Parameters\nDESCRIPTION: Shows how to properly handle optional parameters in constructors, including handling absent values.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc NewClient(p ClientParams) *Client {\n    c := &Client{\n        config: p.Config,\n        log:    p.Logger,\n    }\n    if p.Metrics != nil {\n        c.metrics = p.Metrics\n    }\n    return c\n}\n```\n\n----------------------------------------\n\nTITLE: Updating EchoHandler Structure and Constructor in Go\nDESCRIPTION: This code updates the EchoHandler structure to include a logger field and modifies the NewEchoHandler constructor to accept and set the logger.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/logger.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype EchoHandler struct {\n    log *zap.Logger\n}\n\nfunc NewEchoHandler(log *zap.Logger) *EchoHandler {\n    return &EchoHandler{\n        log: log,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Value Group in Function with Parameter Object in Go\nDESCRIPTION: Illustrates how to consume the value group slice in a function that takes the parameter object.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc NewInit(p paramObject) {\n    for _, v := range p.Values {\n        // Use v\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fx to Use Zap Logger in Go\nDESCRIPTION: This optional snippet shows how to configure Fx to use the same Zap logger for its own logs, replacing the default [Fx] messages with structured logs.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/logger.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfx.New(\n    fx.WithLogger(func(log *zap.Logger) fxevent.Logger {\n        return &fxevent.ZapLogger{Logger: log}\n    }),\n    // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invocation Order in fx.Invoke for Go\nDESCRIPTION: This code demonstrates that fx.Invoke operations are executed in the order they are specified, after their dependencies have been satisfied.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfx.Invoke(a, b)\n// a() is run before b()\n```\n\n----------------------------------------\n\nTITLE: Providing Named Routes to ServeMux\nDESCRIPTION: Configuring the ServeMux constructor to use named route dependencies\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/another-handler.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/06-another-handler/main.go:mux-provide\"\n```\n\n----------------------------------------\n\nTITLE: Running the Fx Application with Zap Logger\nDESCRIPTION: This snippet shows the output of running the Fx application with the integrated Zap logger, demonstrating structured logging for various application events.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/logger.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"main.NewHTTPServer()\",\"type\":\"*http.Server\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"main.NewServeMux()\",\"type\":\"*http.ServeMux\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"main.NewEchoHandler()\",\"type\":\"*main.EchoHandler\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/zap.NewExample()\",\"type\":\"*zap.Logger\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/fx.New.func1()\",\"type\":\"fx.Lifecycle\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/fx.(*App).shutdowner-fm()\",\"type\":\"fx.Shutdowner\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/fx.(*App).dotGraph-fm()\",\"type\":\"fx.DotGraph\"}\n{\"level\":\"info\",\"msg\":\"initialized custom fxevent.Logger\",\"function\":\"main.main.func1()\"}\n{\"level\":\"info\",\"msg\":\"invoking\",\"function\":\"main.main.func2()\"}\n{\"level\":\"info\",\"msg\":\"OnStart hook executing\",\"callee\":\"main.NewHTTPServer.func1()\",\"caller\":\"main.NewHTTPServer\"}\n{\"level\":\"info\",\"msg\":\"Starting HTTP server\",\"addr\":\":8080\"}\n{\"level\":\"info\",\"msg\":\"OnStart hook executed\",\"callee\":\"main.NewHTTPServer.func1()\",\"caller\":\"main.NewHTTPServer\",\"runtime\":\"6.292µs\"}\n{\"level\":\"info\",\"msg\":\"started\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Annotation in fx Framework\nDESCRIPTION: Example of a simple function before annotation, showing the baseline code that will be enhanced with fx.Annotate.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/sample.go:before\"\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to a Function\nDESCRIPTION: Shows how to add specific annotations to a function, in this case tagging the result with a name.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/sample.go:annotate\"\n```\n\n----------------------------------------\n\nTITLE: Providing Echo Handler to fx Application\nDESCRIPTION: Registers the echo handler with the fx dependency injection container\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/echo-handler.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/03-echo-handler/main.go:provide-handler-1\"\n--8<-- \"get-started/03-echo-handler/main.go:provide-handler-2\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Function that Produces a Value for a Group\nDESCRIPTION: This code defines a simple function that creates a Kubernetes watcher. This function will later be annotated to feed its result into a value group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc newPodWatcher(lc fx.Lifecycle, client kubernetes.Interface) (watch.Interface, error) {\n\twatcher, err := client.CoreV1().Pods(\"\").Watch(context.Background(), metav1.ListOptions{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tlc.Append(fx.Hook{\n\t\tOnStop: func(ctx context.Context) error {\n\t\t\twatcher.Stop()\n\t\t\treturn nil\n\t\t},\n\t})\n\n\treturn watcher, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ServeMux Router\nDESCRIPTION: Configures an HTTP router that maps the /echo endpoint to the echo handler\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/echo-handler.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/03-echo-handler/main.go:serve-mux\"\n```\n\n----------------------------------------\n\nTITLE: Struct Consumer Function\nDESCRIPTION: Example of a function that directly consumes a concrete struct type, creating tight coupling that will be refactored.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/cast_bad.go:struct-consumer\"\n```\n\n----------------------------------------\n\nTITLE: Using Result Objects in Fx Module Functions\nDESCRIPTION: Shows how to use result objects for functions exposed by a module instead of regular return values.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Result struct {\n  fx.Out\n\n  Server *Server\n}\n\nfunc New(p Params) (Result, error) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Providing ServeMux to fx Application\nDESCRIPTION: Registers the ServeMux router with the fx dependency injection container\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/echo-handler.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/03-echo-handler/main.go:provides\"\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Result Object Structs in Go\nDESCRIPTION: Demonstrates the basic structure of defining result object types following fx naming conventions. Shows two empty struct definitions for different constructor scenarios.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ClientResult struct {}\n\ntype Result struct {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Interface Methods\nDESCRIPTION: Implementation of the Route interface methods for the hello handler, including path and handling logic\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/another-handler.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/06-another-handler/main.go:hello-methods-1\"\n--8<-- \"get-started/06-another-handler/main.go:hello-methods-2\"\n```\n\n----------------------------------------\n\nTITLE: Setting up a new Fx project in Go\nDESCRIPTION: These commands create a new directory for the Fx demo project, initialize a Go module, and install the latest version of Fx.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir fxdemo\ncd fxdemo\ngo mod init example.com/fxdemo\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get go.uber.org/fx@latest\n```\n\n----------------------------------------\n\nTITLE: Embedding fx.Out in Result Object\nDESCRIPTION: Shows how to embed the fx.Out type into a result object struct, which is required for fx to recognize it as a result object.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ClientResult struct {\n    fx.Out\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ServeMux with Multiple Routes\nDESCRIPTION: Adding support for multiple named routes in the HTTP server mux\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/another-handler.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/06-another-handler/main.go:mux\"\n```\n\n----------------------------------------\n\nTITLE: Modifying ServeMux to Accept Route in Go\nDESCRIPTION: Updates NewServeMux to accept a Route and use its provided pattern for registration.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/registration.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc NewServeMux(route Route) *http.ServeMux {\n\tmux := http.NewServeMux()\n\tmux.Handle(route.Pattern(), route)\n\treturn mux\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Value Group Field in a Constructor Function\nDESCRIPTION: This code demonstrates how to initialize a tagged field in a result object. The same value is assigned to both the regular field and the field that feeds into the value group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nreturn result{\n\tWatcher: watcher,\n\tPodWatcher: watcher, // This feeds into the \"watchers\" value group.\n}, nil\n```\n\n----------------------------------------\n\nTITLE: Using Result Object as Return Type\nDESCRIPTION: Demonstrates how to use the result object as a return type in a constructor function, showing proper return value syntax.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc NewClient() ClientResult\n```\n\n----------------------------------------\n\nTITLE: Providing a Function to an fx Application\nDESCRIPTION: This snippet shows how to provide a function to an fx application without annotations. The function is registered as a dependency provider.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\napp := fx.New(\n\tfx.Provide(\n\t\tnewPodWatcher,\n\t\t// ...\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Providing Functions to fx Application\nDESCRIPTION: Shows how functions are provided to the fx application before being refactored with annotations for interface casting.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/cast_bad.go:provides\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Function with fx.Annotate for Value Groups\nDESCRIPTION: This code shows the beginning of wrapping a function with fx.Annotate. This is the first step to annotate the function's result for feeding into a value group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\napp := fx.New(\n\tfx.Provide(\n\t\tfx.Annotate(\n\t\t\tnewPodWatcher,\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Server Provision Example\nDESCRIPTION: Demonstrates a basic but incomplete example of providing an HTTP server to the container.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/container.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfx.New(\n  fx.Provide(newHTTPServer), // provides an *http.Server\n).Run()\n```\n\n----------------------------------------\n\nTITLE: Annotating a Function Result for a Value Group\nDESCRIPTION: This snippet completes the annotation process by specifying that the result of the function should be fed into the \"watchers\" value group using fx.ResultTags.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/feed.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\t\t\tfx.ResultTags(`group:\"watchers\"`),\n\t\t),\n\t\t// ...\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Objects in Fx Module Functions\nDESCRIPTION: Demonstrates the use of parameter objects for functions exposed by a module instead of direct dependencies.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/modules.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Params struct {\n  fx.In\n\n  Log *zap.Logger\n  DB  *sql.DB\n}\n\nfunc New(p Params) (Result, error) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Unannotated Function to Fx Application in Go\nDESCRIPTION: Shows how to provide an unannotated function to an Fx application before annotation.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\napp := fx.New(\n    fx.Provide(\n        NewInit,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Providing Route Handler to Fx Container\nDESCRIPTION: Registration of the hello handler as a Route in the Fx dependency container\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/another-handler.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"get-started/06-another-handler/main.go:hello-provide-partial-1\"\n--8<-- \"get-started/06-another-handler/main.go:hello-provide-partial-2\"\n--8<-- \"get-started/06-another-handler/main.go:hello-provide-partial-3\"\n```\n\n----------------------------------------\n\nTITLE: Annotating Function for Value Group Consumption in Go\nDESCRIPTION: Shows how to annotate a function to specify that its slice parameter is a value group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfx.Annotate(\n    NewInit,\n    fx.ParamTags(`group:\"values\"`),\n)\n```\n\n----------------------------------------\n\nTITLE: Interface Declaration for Casting\nDESCRIPTION: Defines an interface that matches the API of the produced struct, enabling looser coupling between components.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/cast.go:interface\"\n```\n\n----------------------------------------\n\nTITLE: Consuming Value Group in Annotated Function in Go\nDESCRIPTION: Illustrates how to consume the value group slice in an annotated function.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc NewInit(values []int) {\n    for _, v := range values {\n        // Use v\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Objects in Constructors\nDESCRIPTION: Demonstrates how to use parameter objects as constructor parameters by value in Fx.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc NewClient(p ClientParams) *Client {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Variadic Function for Value Group Consumption in Go\nDESCRIPTION: Demonstrates how to annotate a function with variadic arguments for value group consumption.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfx.Annotate(\n    NewInit,\n    fx.ParamTags(`group:\"values\"`),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating EchoHandler.ServeHTTP Method with Logger in Go\nDESCRIPTION: This snippet modifies the ServeHTTP method of EchoHandler to use the Zap logger instead of printing to standard error.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/logger.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *EchoHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    if r.Method != \"POST\" {\n        h.log.Warn(\"received non-POST request\", zap.String(\"method\", r.Method))\n        http.Error(w, \"Only POST requests are allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running an Fx Application with Go\nDESCRIPTION: Command to run the minimal Fx application using Go's run command. This executes the application and shows the default Fx initialization logs.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/minimal.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Existing Parameter Object Structure\nDESCRIPTION: Shows the initial structure of a parameter object before adding new fields.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/parameter-objects.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype ClientParams struct {\n    fx.In\n\n    Config *Config\n    Logger *zap.Logger\n}\n```\n\n----------------------------------------\n\nTITLE: Interrupting a Running Fx Application\nDESCRIPTION: Sample output showing how an Fx application responds to an interrupt signal (Ctrl-C). The application gracefully shuts down when interrupted.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/minimal.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[Fx] RUNNING\n^C\n[Fx] INTERRUPT\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Result Object\nDESCRIPTION: Shows how to add exported fields to a result object struct to carry multiple return values.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype ClientResult struct {\n    fx.Out\n\n    Client *Client\n    Config *Config\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating ServeMux Constructor to Accept Route Group in fx\nDESCRIPTION: Uses fx.Annotate to specify that the NewServeMux constructor should receive a slice containing all values from the 'routes' group, enabling dynamic dependency injection.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/many-handlers.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfx.Provide(\n\tfx.Annotate(\n\t\tNewServeMux,\n\t\tfx.ParamTags(`group:\"routes\"`),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Function for Annotated Value Group Consumption in Go\nDESCRIPTION: Defines a function that accepts a slice of values, preparing for annotated value group consumption.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewInit(values []int) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Server with curl\nDESCRIPTION: Shell command to test the running HTTP server by sending a request to localhost:8080.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/http-server.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:8080\n404 page not found\n```\n\n----------------------------------------\n\nTITLE: Adding Tagged Field for Value Group in Parameter Object in Go\nDESCRIPTION: Shows how to add an exported field to the parameter object, tagged with the name of the value group.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype paramObject struct {\n    // ...\n    Values []int `group:\"values\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Interface in EchoHandler\nDESCRIPTION: Modifies EchoHandler to implement the Route interface by adding a Pattern method.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/registration.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *EchoHandler) Pattern() string {\n\treturn \"/echo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Function to Fx Application in Go\nDESCRIPTION: Demonstrates how to provide a function that consumes a parameter object to an Fx application.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/value-groups/consume.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp := fx.New(\n    fx.Provide(\n        NewInit,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Testing the Decoupled Service with cURL\nDESCRIPTION: Demonstrates how to send a POST request to the /echo endpoint of the decoupled service using cURL.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/registration.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST -d 'hello' http://localhost:8080/echo\nhello\n```\n\n----------------------------------------\n\nTITLE: Fx Application Default Output Logs\nDESCRIPTION: Sample output showing the default objects provided to an Fx application. These logs indicate the lifecycle management capabilities that Fx provides by default.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/minimal.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[Fx] PROVIDE    fx.Lifecycle <= go.uber.org/fx.New.func1()\n[Fx] PROVIDE    fx.Shutdowner <= go.uber.org/fx.(*App).shutdowner-fm()\n[Fx] PROVIDE    fx.DotGraph <= go.uber.org/fx.(*App).dotGraph-fm()\n[Fx] RUNNING\n```\n\n----------------------------------------\n\nTITLE: Testing the Fx Application with cURL\nDESCRIPTION: This shell command demonstrates how to test the Fx application by sending a POST request to the /echo endpoint using cURL.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/logger.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST -d 'hello' http://localhost:8080/echo\nhello\n```\n\n----------------------------------------\n\nTITLE: Initial Result Object Definition\nDESCRIPTION: Shows the starting point of an existing result object before extension.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype ClientResult struct {\n    fx.Out\n\n    Client *Client\n    Config *Config\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Module Hierarchy Impact on Invocation Order in Go\nDESCRIPTION: This snippet illustrates how fx.Module hierarchies affect the invocation order, with child module invocations running before parent module invocations.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfx.Options(\n  fx.Invoke(a),\n  fx.Module(\"child\", fx.Invoke(b)),\n),\n// b() is run before a()\n```\n\n----------------------------------------\n\nTITLE: Extended Result Object Definition\nDESCRIPTION: Demonstrates how to extend an existing result object by adding new fields.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/result-objects.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype ClientResult struct {\n    fx.Out\n\n    Client *Client\n    Config *Config\n    Logger *zap.Logger\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Echo Handler with cURL\nDESCRIPTION: Example of sending a POST request to test the echo handler endpoint\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/echo-handler.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST -d 'hello' http://localhost:8080/echo\nhello\n```\n\n----------------------------------------\n\nTITLE: Struct Producer Function\nDESCRIPTION: Example of a constructor function that produces a struct value (HTTP client) that will be cast to an interface.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/annotate.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n--8<-- \"annotate/cast.go:constructor\"\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in Fx\nDESCRIPTION: Git commands to create and switch to a new feature branch\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Running the Decoupled Service\nDESCRIPTION: Shows the output of running the service with the new decoupled registration.\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/get-started/registration.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"main.NewHTTPServer()\",\"type\":\"*http.Server\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"main.NewServeMux()\",\"type\":\"*http.ServeMux\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"fx.Annotate(main.NewEchoHandler(), fx.As([[main.Route]])\",\"type\":\"main.Route\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/zap.NewExample()\",\"type\":\"*zap.Logger\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/fx.New.func1()\",\"type\":\"fx.Lifecycle\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/fx.(*App).shutdowner-fm()\",\"type\":\"fx.Shutdowner\"}\n{\"level\":\"info\",\"msg\":\"provided\",\"constructor\":\"go.uber.org/fx.(*App).dotGraph-fm()\",\"type\":\"fx.DotGraph\"}\n{\"level\":\"info\",\"msg\":\"initialized custom fxevent.Logger\",\"function\":\"main.main.func1()\"}\n{\"level\":\"info\",\"msg\":\"invoking\",\"function\":\"main.main.func2()\"}\n{\"level\":\"info\",\"msg\":\"OnStart hook executing\",\"callee\":\"main.NewHTTPServer.func1()\",\"caller\":\"main.NewHTTPServer\"}\n{\"level\":\"info\",\"msg\":\"Starting HTTP server\",\"addr\":\":8080\"}\n{\"level\":\"info\",\"msg\":\"OnStart hook executed\",\"callee\":\"main.NewHTTPServer.func1()\",\"caller\":\"main.NewHTTPServer\",\"runtime\":\"10.125µs\"}\n{\"level\":\"info\",\"msg\":\"started\"}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Creating PR\nDESCRIPTION: Commands to push changes and create a pull request using Git\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Creating PR with GitHub CLI\nDESCRIPTION: Command to create a pull request using GitHub CLI\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngh pr create\n```\n\n----------------------------------------\n\nTITLE: Running Fx Tests and Lints\nDESCRIPTION: Commands to run tests and linting checks\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\nmake test\n```\n\n----------------------------------------\n\nTITLE: Example Go Code Snippet\nDESCRIPTION: Example of how to mark regions in Go code for documentation\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// --8<-- [start:New]\nfunc New() *http.Server {\n    // ...\n}\n// --8<-- [end:New]\n```\n\n----------------------------------------\n\nTITLE: Installing Fx Dependencies\nDESCRIPTION: Command to download Fx project dependencies using Go modules\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo mod download\n```\n\n----------------------------------------\n\nTITLE: Installing Fx Dependencies\nDESCRIPTION: Command to download Fx project dependencies\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo mod download\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Repository for Fx Development\nDESCRIPTION: Commands to clone and set up the Fx repository for local development using Git\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_github_username/fx.git\ncd fx\ngit remote add upstream https://github.com/uber-go/fx.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Creating PR\nDESCRIPTION: Commands to push changes and create a pull request using Git\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub CLI for Fx Development\nDESCRIPTION: Command to fork and clone the Fx repository using GitHub CLI\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh repo fork --clone uber-go/fx\n```\n\n----------------------------------------\n\nTITLE: Running Fx Tests and Linting\nDESCRIPTION: Commands to run tests and linting checks for the Fx project\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\nmake test\n```\n\n----------------------------------------\n\nTITLE: Creating PR with GitHub CLI\nDESCRIPTION: Command to create a pull request using GitHub CLI\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngh pr create\n```\n\n----------------------------------------\n\nTITLE: Example Go Code Snippet with Region Markers\nDESCRIPTION: Example showing how to mark code regions for documentation snippets\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// --8<-- [start:New]\nfunc New() *http.Server {\n    // ...\n}\n// --8<-- [end:New]\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Development Server\nDESCRIPTION: Command to start the documentation development server\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Development Server\nDESCRIPTION: Command to start the local documentation development server\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Setting up Git Repository for Fx Development\nDESCRIPTION: Commands to fork and clone the Fx repository using Git\nSOURCE: https://github.com/uber-go/fx/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_github_username/fx.git\ncd fx\ngit remote add upstream https://github.com/uber-go/fx.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub CLI for Fx Development\nDESCRIPTION: Command to fork and clone the Fx repository using GitHub CLI\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh repo fork --clone uber-go/fx\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in Fx\nDESCRIPTION: Git commands to create and switch to a new feature branch for development\nSOURCE: https://github.com/uber-go/fx/blob/master/docs/src/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull\ngit checkout -b cool_new_feature\n```"
  }
]