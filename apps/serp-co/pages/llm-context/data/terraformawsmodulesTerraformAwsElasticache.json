[
  {
    "owner": "terraform-aws-modules",
    "repo": "terraform-aws-elasticache",
    "content": "TITLE: Creating Serverless Cache with ElastiCache Terraform Module\nDESCRIPTION: This snippet shows how to create a Redis serverless cache with usage limits for data storage and eCPU. It includes configuration for daily snapshots, KMS encryption, security groups, and user group association.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache\" {\n  source = \"terraform-aws-modules/elasticache/aws//modules/serverless-cache\"\n\n  engine     = \"redis\"\n  cache_name = \"example-serverless-cache\"\n\n  cache_usage_limits = {\n    data_storage = {\n      maximum = 2\n    }\n    ecpu_per_second = {\n      maximum = 1000\n    }\n  }\n\n  daily_snapshot_time  = \"22:00\"\n  description          = \"example-serverless-cache serverless cluster\"\n  kms_key_id           = aws_kms_key.this.arn\n  major_engine_version = \"7\"\n  security_group_ids   = [module.sg.security_group_id]\n\n  snapshot_retention_limit = 7\n  subnet_ids               = module.vpc.private_subnets\n\n  user_group_id = module.cache_user_group.group_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ElastiCache Serverless Cache with Terraform\nDESCRIPTION: This code snippet demonstrates how to create an AWS ElastiCache serverless Redis cache with usage limits, snapshot configuration, and security settings. It configures cache usage limits for data storage and ECPU, sets a daily snapshot time, includes encryption via KMS, and assigns security groups and subnet placement.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/modules/serverless-cache/README.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache_serverless_cache\" {\n  source = \"terraform-aws-modules/elasticache/aws//modules/serverless-cache\"\n\n  engine     = \"redis\"\n  cache_name = \"example-serverless-cache\"\n\n  cache_usage_limits = {\n    data_storage = {\n      maximum = 2\n    }\n    ecpu_per_second = {\n      maximum = 1000\n    }\n  }\n\n  daily_snapshot_time  = \"22:00\"\n  description          = \"example-serverless-cache serverless cluster\"\n  kms_key_id           = aws_kms_key.this.arn\n  major_engine_version = \"7\"\n\n  security_group_ids = [module.sg.security_group_id]\n\n  snapshot_retention_limit = 7\n  subnet_ids               = module.vpc.private_subnets\n\n  user_group_id = module.cache_user_group.group_id\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Redis Replication Group with ElastiCache Terraform Module\nDESCRIPTION: This example demonstrates creating a Redis replication group with transit encryption and authentication enabled. It includes configuration for maintenance windows, security groups, subnet groups, and parameter groups.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache\" {\n  source = \"terraform-aws-modules/elasticache/aws\"\n\n  replication_group_id = \"example-redis-replication-group\"\n\n  engine_version = \"7.1\"\n  node_type      = \"cache.t4g.small\"\n\n  transit_encryption_enabled = true\n  auth_token                 = \"PickSomethingMoreSecure123!\"\n  maintenance_window         = \"sun:05:00-sun:09:00\"\n  apply_immediately          = true\n\n  # Security group\n  vpc_id = module.vpc.vpc_id\n  security_group_rules = {\n    ingress_vpc = {\n      # Default type is `ingress`\n      # Default port is based on the default engine port\n      description = \"VPC traffic\"\n      cidr_ipv4   = module.vpc.vpc_cidr_block\n    }\n  }\n\n  # Subnet Group\n  subnet_ids = module.vpc.private_subnets\n\n  # Parameter Group\n  create_parameter_group = true\n  parameter_group_family = \"redis7\"\n  parameters = [\n    {\n      name  = \"latency-tracking\"\n      value = \"yes\"\n    }\n  ]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Redis Cluster Mode with ElastiCache Terraform Module\nDESCRIPTION: This snippet demonstrates configuring Redis in cluster mode with 2 node groups, 3 replicas per node group, and automatic failover enabled. It includes multi-AZ configuration and custom parameter group settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache\" {\n  source = \"terraform-aws-modules/elasticache/aws\"\n\n  replication_group_id = \"example-redis-cluster\"\n\n  # Cluster mode\n  cluster_mode_enabled       = true\n  num_node_groups            = 2\n  replicas_per_node_group    = 3\n  automatic_failover_enabled = true\n  multi_az_enabled           = true\n\n  maintenance_window = \"sun:05:00-sun:09:00\"\n  apply_immediately  = true\n\n  # Security group\n  vpc_id = module.vpc.vpc_id\n  security_group_rules = {\n    ingress_vpc = {\n      # Default type is `ingress`\n      # Default port is based on the default engine port\n      description = \"VPC traffic\"\n      cidr_ipv4   = module.vpc.vpc_cidr_block\n    }\n  }\n\n  # Subnet Group\n  subnet_ids = module.vpc.private_subnets\n\n  # Parameter Group\n  create_parameter_group = true\n  parameter_group_family = \"redis7\"\n  parameters = [\n    {\n      name  = \"latency-tracking\"\n      value = \"yes\"\n    }\n  ]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with ElastiCache Terraform Module\nDESCRIPTION: This snippet shows how to create a Redis cluster with engine version 7.1 using a t4g.small node type. It includes VPC security group configuration, custom parameter groups, and tag definitions.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache\" {\n  source = \"terraform-aws-modules/elasticache/aws\"\n\n  cluster_id               = \"example-redis\"\n  create_cluster           = true\n  create_replication_group = false\n\n  engine_version = \"7.1\"\n  node_type      = \"cache.t4g.small\"\n\n  maintenance_window = \"sun:05:00-sun:09:00\"\n  apply_immediately  = true\n\n  # Security group\n  vpc_id = module.vpc.vpc_id\n  security_group_rules = {\n    ingress_vpc = {\n      # Default type is `ingress`\n      # Default port is based on the default engine port\n      description = \"VPC traffic\"\n      cidr_ipv4   = module.vpc.vpc_cidr_block\n    }\n  }\n\n  # Subnet Group\n  subnet_ids = module.vpc.private_subnets\n\n  # Parameter Group\n  create_parameter_group = true\n  parameter_group_family = \"redis7\"\n  parameters = [\n    {\n      name  = \"latency-tracking\"\n      value = \"yes\"\n    }\n  ]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Global Replication Group with ElastiCache Terraform Module\nDESCRIPTION: This example shows how to set up a Redis global replication group with primary and secondary deployments across AWS regions. It includes settings for engine version, node type, security groups, and parameter groups.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache_primary\" {\n  source = \"terraform-aws-modules/elasticache/aws\"\n\n  replication_group_id                    = \"example-redis-global-replication-group\"\n  create_primary_global_replication_group = true\n\n  engine_version = \"7.1\"\n  node_type      = \"cache.r7g.large\"\n\n  # Security group\n  vpc_id = module.vpc.vpc_id\n  security_group_rules = {\n    ingress_vpc = {\n      # Default type is `ingress`\n      # Default port is based on the default engine port\n      description = \"VPC traffic\"\n      cidr_ipv4   = module.vpc.vpc_cidr_block\n    }\n  }\n\n  # Subnet Group\n  subnet_ids = module.vpc.private_subnets\n\n  # Parameter Group\n  create_parameter_group = true\n  parameter_group_family = \"redis7\"\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n\nmodule \"elasticache_secondary\" {\n  source = \"terraform-aws-modules/elasticache/aws\"\n\n  providers = {\n    aws = aws.other_region\n  }\n\n  replication_group_id        = \"example-redis-global-replication-group\"\n  global_replication_group_id = module.elasticache_primary.global_replication_group_id\n\n  # Security group\n  vpc_id = module.vpc.vpc_id\n  security_group_rules = {\n    ingress_vpc = {\n      # Default type is `ingress`\n      # Default port is based on the default engine port\n      description = \"VPC traffic\"\n      cidr_ipv4   = module.vpc.vpc_cidr_block\n    }\n  }\n\n  # Subnet Group\n  subnet_ids = module.vpc.private_subnets\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Valkey Replication Group with ElastiCache Terraform Module\nDESCRIPTION: This example demonstrates creating a Valkey replication group with engine version 7.2. It includes transit encryption, authentication, and configuration for security groups, subnet groups, and parameter groups with custom parameters.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache\" {\n  source = \"terraform-aws-modules/elasticache/aws\"\n\n  replication_group_id = local.name\n\n  engine         = \"valkey\"\n  engine_version = \"7.2\"\n  node_type      = \"cache.t4g.small\"\n\n  transit_encryption_enabled = true\n  auth_token                 = \"PickSomethingMoreSecure123!\"\n  maintenance_window         = \"sun:05:00-sun:09:00\"\n  apply_immediately          = true\n\n  # Security Group\n  vpc_id = module.vpc.vpc_id\n  security_group_rules = {\n    ingress_vpc = {\n      # Default type is `ingress`\n      # Default port is based on the default engine port\n      description = \"VPC traffic\"\n      cidr_ipv4   = module.vpc.vpc_cidr_block\n    }\n  }\n\n  # Subnet Group\n  subnet_group_name        = local.name\n  subnet_group_description = \"Valkey replication group subnet group\"\n  subnet_ids               = module.vpc.private_subnets\n\n  # Parameter Group\n  create_parameter_group      = true\n  parameter_group_name        = local.name\n  parameter_group_family      = \"valkey7\"\n  parameter_group_description = \"Valkey replication group parameter group\"\n  parameters = [\n    {\n      name  = \"latency-tracking\"\n      value = \"yes\"\n    }\n  ]\n\n  tags = local.tags\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Cluster with ElastiCache Terraform Module\nDESCRIPTION: This snippet demonstrates how to create a Memcached cluster with two nodes in cross-AZ configuration. It includes configuration for security groups, subnet groups, and parameter groups with custom parameters.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"elasticache\" {\n  source = \"terraform-aws-modules/elasticache/aws\"\n\n  cluster_id               = \"example-memcached\"\n  create_cluster           = true\n  create_replication_group = false\n\n  engine          = \"memcached\"\n  engine_version  = \"1.6.17\"\n  node_type       = \"cache.t4g.small\"\n  num_cache_nodes = 2\n  az_mode         = \"cross-az\"\n\n  maintenance_window = \"sun:05:00-sun:09:00\"\n  apply_immediately  = true\n\n  # Security group\n  vpc_id = module.vpc.vpc_id\n  security_group_rules = {\n    ingress_vpc = {\n      # Default type is `ingress`\n      # Default port is based on the default engine port\n      description = \"VPC traffic\"\n      cidr_ipv4   = module.vpc.vpc_cidr_block\n    }\n  }\n\n  # Subnet Group\n  subnet_ids = module.vpc.private_subnets\n\n  # Parameter Group\n  create_parameter_group = true\n  parameter_group_family = \"memcached1.6\"\n  parameters = [\n    {\n      name  = \"idle_timeout\"\n      value = 60\n    }\n  ]\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ElastiCache User Group with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ElastiCache user group module to create a user group with default and custom users. It includes configuration for different authentication modes and access strings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/modules/user-group/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nmodule \"elasticache_user_group\" {\n  source = \"terraform-aws-modules/elasticache/aws//modules/user-group\"\n\n  user_group_id = \"example\"\n\n  default_user = {\n    user_id   = \"defaultExample\"\n    passwords = [\"password123456789\"]\n  }\n\n  users = {\n    moe = {\n      access_string = \"on ~* +@all\"\n      passwords     = [\"password123456789\"]\n    }\n\n    larry = {\n      access_string = \"on ~* +@all\"\n\n      authentication_mode = {\n        type = \"iam\"\n      }\n    }\n\n    curly = {\n      access_string = \"on ~* +@all\"\n\n      authentication_mode = {\n        type      = \"password\"\n        passwords = [\"password123456789\", \"password987654321\"]\n      }\n    }\n  }\n\n  tags = {\n    Terraform   = \"true\"\n    Environment = \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ElastiCache Input Variables in Terraform\nDESCRIPTION: This code block defines input variables for configuring AWS ElastiCache resources. It includes parameters for cluster configuration, security settings, network options, and performance tuning. These variables can be used in Terraform configurations to customize ElastiCache deployments.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"parameter_group_name\" {\n  description = \"The name of the parameter group. If `create_parameter_group` is `true`, this is the name assigned to the parameter group created. Otherwise, this is the name of an existing parameter group\"\n  type        = string\n  default     = null\n}\n\nvariable \"parameters\" {\n  description = \"List of ElastiCache parameters to apply\"\n  type        = list(map(string))\n  default     = []\n}\n\nvariable \"port\" {\n  description = \"The port number on which each of the cache nodes will accept connections. For Memcached the default is `11211`, and for Redis the default port is `6379`\"\n  type        = number\n  default     = null\n}\n\n# ... (additional variables omitted for brevity)\n\nvariable \"vpc_id\" {\n  description = \"Identifier of the VPC where the security group will be created\"\n  type        = string\n  default     = null\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Commands for AWS ElastiCache Redis Global Replication Group Example\nDESCRIPTION: Commands needed to initialize, preview, apply, and clean up the Terraform configuration for creating Redis global replication groups across AWS regions. These commands manage the infrastructure deployment process.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/examples/redis-global-replication-group/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Example for AWS ElastiCache Redis Configuration\nDESCRIPTION: Basic commands for initializing, planning, and applying the Terraform configuration to create ElastiCache resources in AWS. These commands should be run in sequence to deploy the infrastructure defined in the example.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/examples/redis-replication-group-with-cluster-replica/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Commands for ElastiCache Deployment\nDESCRIPTION: Basic Terraform commands to initialize, plan, and apply the ElastiCache configuration. These commands will deploy the Redis cluster to AWS. Remember to run terraform destroy when resources are no longer needed to avoid incurring costs.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/examples/redis-cluster-mode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Running Terraform ElastiCache Example Commands\nDESCRIPTION: Demonstrates the standard Terraform workflow commands to initialize, plan, and apply the ElastiCache example configuration. After use, resources should be destroyed to avoid ongoing charges.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/examples/redis-replication-group/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Commands for ElastiCache Deployment\nDESCRIPTION: Basic Terraform workflow commands to initialize, plan, and apply the ElastiCache configuration. These commands should be run in sequence to deploy the infrastructure.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/examples/redis-cluster/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Commands for ElastiCache Deployment\nDESCRIPTION: Basic Terraform commands to initialize, plan, and apply the ElastiCache configuration. These commands will create the necessary AWS resources as defined in the Terraform configuration files.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/examples/valkey-replication-group/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Commands for ElastiCache Deployment\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration for deploying ElastiCache resources. It's important to note that these commands may create resources that incur costs on your AWS bill.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/examples/memcached-cluster/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Default Log Delivery Configuration in Terraform for Redis/Valkey\nDESCRIPTION: Default configuration for log delivery in Redis OSS or Valkey, setting up slow logs to be delivered to CloudWatch Logs in JSON format.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n<pre>{<br/>  \"slow-log\": {<br/>    \"destination_type\": \"cloudwatch-logs\",<br/>    \"log_format\": \"json\"<br/>  }<br/>}</pre>\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the resources created by the AWS ElastiCache Terraform module. It includes the resource name and type, with links to the official Terraform documentation for each resource.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-elasticache/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type |\n|------|------|\n| [aws_cloudwatch_log_group.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_group) | resource |\n| [aws_elasticache_cluster.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_cluster) | resource |\n| [aws_elasticache_global_replication_group.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_global_replication_group) | resource |\n| [aws_elasticache_parameter_group.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_parameter_group) | resource |\n| [aws_elasticache_replication_group.global](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_replication_group) | resource |\n| [aws_elasticache_replication_group.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_replication_group) | resource |\n| [aws_elasticache_subnet_group.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_subnet_group) | resource |\n| [aws_security_group.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group) | resource |\n| [aws_vpc_security_group_egress_rule.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_security_group_egress_rule) | resource |\n| [aws_vpc_security_group_ingress_rule.this](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_security_group_ingress_rule) | resource |\n| [random_id.this](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/id) | resource |\n```"
  }
]