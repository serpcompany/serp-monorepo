[
  {
    "owner": "ant-design",
    "repo": "ant-design",
    "content": "TITLE: Basic Button Color and Variant Usage - React/TypeScript\nDESCRIPTION: Examples showing how to use type and color/variant properties in Button component. Demonstrates equivalent configurations between type and color/variant combinations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button type=\"primary\">click</Button>\n\n// Equivalent to:\n<Button color=\"primary\" variant=\"solid\">\n  click\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Static Consumption of Design Tokens in Ant Design\nDESCRIPTION: This example demonstrates how to statically consume Design Tokens outside of the React lifecycle using the getDesignToken function. It shows how to get global tokens and how to use them with custom configurations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ThemeConfig } from 'antd';\nimport { theme } from 'antd';\nimport { createRoot } from 'react-dom/client';\n\nconst { getDesignToken, useToken } = theme;\n\nconst config: ThemeConfig = {\n  token: {\n    colorPrimary: '#1890ff',\n  },\n};\n\n// By static function\nconst globalToken = getDesignToken(config);\n\n// By hook\nconst App = () => {\n  const { token } = useToken();\n  return null;\n};\n\n// Example for rendering\ncreateRoot(document.getElementById('#app')).render(\n  <ConfigProvider theme={config}>\n    <App />\n  </ConfigProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Global Locale Settings with ConfigProvider (JSX)\nDESCRIPTION: This React snippet demonstrates how to configure the global locale for an Ant Design application. It imports the `ConfigProvider` component and a specific locale object (`fr_FR` for French) and then wraps the root `App` component with `ConfigProvider`, passing the imported locale object to the `locale` prop. This ensures all applicable Ant Design components within the `App` render using French text and formatting.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/i18n.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigProvider } from 'antd';\nimport frFR from 'antd/locale/fr_FR';\n\nreturn (\n  <ConfigProvider locale={frFR}>\n    <App />\n  </ConfigProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Compact Mode for Form Components using Space.Compact in React\nDESCRIPTION: This code snippet demonstrates how to use Space.Compact from Ant Design to create a compact layout for form components. It showcases various form elements like Input, Select, and Button arranged in a tightly connected manner with merged borders.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react';\nimport { Button, Input, Select, Space } from 'antd';\n\nconst { Search } = Input;\n\nconst App: React.FC = () => (\n  <>\n    <Space.Compact block>\n      <Input style={{ width: '20%' }} defaultValue=\"0571\" />\n      <Input style={{ width: '30%' }} defaultValue=\"26888888\" />\n    </Space.Compact>\n    <br />\n    <Space.Compact block>\n      <Input style={{ width: 'calc(100% - 200px)' }} defaultValue=\"https://ant.design\" />\n      <Button type=\"primary\">Submit</Button>\n    </Space.Compact>\n    <br />\n    <Space.Compact block>\n      <Search addonBefore=\"https://\" placeholder=\"input search text\" allowClear />\n    </Space.Compact>\n    <br />\n    <Space.Compact block>\n      <Select defaultValue=\"Zhejiang\">\n        <Select.Option value=\"Zhejiang\">Zhejiang</Select.Option>\n        <Select.Option value=\"Jiangsu\">Jiangsu</Select.Option>\n      </Select>\n      <Input style={{ width: '50%' }} defaultValue=\"Xihu District, Hangzhou\" />\n    </Space.Compact>\n    <br />\n    <Space.Compact block>\n      <Input style={{ width: '50%' }} defaultValue=\"default value\" />\n      <Input.TextArea style={{ width: '50%' }} defaultValue=\"default value\" />\n    </Space.Compact>\n    <br />\n    <Space.Compact block>\n      <Input style={{ width: '30%' }} defaultValue=\"input content\" />\n      <Input.TextArea style={{ width: '70%' }} defaultValue=\"textarea content\" />\n    </Space.Compact>\n    <br />\n    <Space.Compact block>\n      <Search addonBefore=\"https://\" placeholder=\"input search text\" allowClear />\n      <Button type=\"primary\">Submit</Button>\n    </Space.Compact>\n  </>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using MessageVariables in Form Items with JSX\nDESCRIPTION: Examples of using messageVariables prop to customize validation messages in Form.Item, including escaping ${} syntax.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Form>\n  <Form.Item\n    messageVariables={{ another: 'good' }}\n    label=\"user\"\n    rules={[{ required: true, message: '${another} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n  <Form.Item\n    messageVariables={{ label: 'good' }}\n    label={<span>user</span>}\n    rules={[{ required: true, message: '${label} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Copyable Typography in React with Ant Design\nDESCRIPTION: This code snippet demonstrates how to use the copyable feature of Ant Design's Typography component. It showcases various configurations including default behavior, custom copy text, customized icon, and customized tooltips.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/demo/copyable.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Typography } from 'antd';\n\nconst { Paragraph, Text } = Typography;\n\nexport default () => (\n  <>\n    <Paragraph copyable>This is a copyable text.</Paragraph>\n    <Paragraph copyable={{ text: 'Hello, Ant Design!' }}>Replace copy text.</Paragraph>\n    <Paragraph\n      copyable={{\n        icon: [\n          <SmileOutlined key=\"copy-icon\" />,\n          <SmileFilled key=\"copied-icon\" />,\n        ],\n        tooltips: ['click here', 'you clicked!!'],\n      }}\n    >\n      Custom Copy icon and tooltips text.\n    </Paragraph>\n    <Paragraph copyable={{ tooltips: false }}>Hide Copy tooltips.</Paragraph>\n    <Text copyable>Copyable Text</Text>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Forcing Form.Item Re-render on Any Form Change using shouldUpdate (JSX)\nDESCRIPTION: This snippet demonstrates using the `shouldUpdate` prop set to `true` on a `Form.Item`. This configuration forces the `Form.Item` to re-render whenever any value within the parent Form changes. The child component must be returned by a function for `shouldUpdate` to work correctly. This example displays the current form values in a <pre> tag.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Item shouldUpdate>\n  {() => {\n    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;\n  }}\n</Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Modal Instance Management with Ant Design in React\nDESCRIPTION: This code demonstrates how to create, update, and destroy Modal instances programmatically using Ant Design. It showcases two different ways to manage modals: one using the Modal.info() method with manual updates via the returned instance, and another using React's useState hook for controlling modal visibility.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/manual.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Modal } from 'antd';\nimport { useState } from 'react';\n\nconst App: React.FC = () => {\n  const [modal, contextHolder] = Modal.useModal();\n\n  const countDown = () => {\n    let secondsToGo = 5;\n\n    const instance = modal.success({\n      title: 'This is a notification message',\n      content: `This modal will be destroyed after ${secondsToGo} second.`,\n    });\n\n    const timer = setInterval(() => {\n      secondsToGo -= 1;\n      instance.update({\n        content: `This modal will be destroyed after ${secondsToGo} second.`,\n      });\n    }, 1000);\n\n    setTimeout(() => {\n      clearInterval(timer);\n      instance.destroy();\n    }, secondsToGo * 1000);\n  };\n\n  const [modal2Open, setModal2Open] = useState(false);\n\n  return (\n    <>\n      <Button onClick={countDown}>Open modal to close in 5s</Button>\n      <Button type=\"primary\" onClick={() => setModal2Open(true)}>\n        Open Modal with 1s delay destroy\n      </Button>\n      <Modal\n        title=\"Modal with 1s delay destroy\"\n        open={modal2Open}\n        onOk={() => setModal2Open(false)}\n        onCancel={() => setModal2Open(false)}\n        afterClose={() => console.log('Modal 2 afterClose')}\n        destroyOnClose\n      >\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n      </Modal>\n      {contextHolder}\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Ant Design Table with DataSource and Columns in React (JSX)\nDESCRIPTION: This snippet demonstrates how to set up an Ant Design Table component in React by defining a dataSource array and a columns array. The dataSource holds objects representing each row of data, while the columns array defines how each property of the data will be rendered, including title and keys. No additional dependencies are required aside from Ant Design and React; the Table will render rows for each provided item and columns as specified. Useful for quickly displaying tabular data with custom column definitions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst dataSource = [\n  {\n    key: '1',\n    name: 'Mike',\n    age: 32,\n    address: '10 Downing Street',\n  },\n  {\n    key: '2',\n    name: 'John',\n    age: 42,\n    address: '10 Downing Street',\n  },\n];\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n];\n\n<Table dataSource={dataSource} columns={columns} />;\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Structure in JSX\nDESCRIPTION: Demonstrates the basic structure of a Layout component with Header, Sider, Content, and Footer elements. This snippet shows how to nest Layout components to create complex page structures.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Layout>\n  <Header>header</Header>\n  <Layout>\n    <Sider>left sidebar</Sider>\n    <Content>main content</Content>\n    <Sider>right sidebar</Sider>\n  </Layout>\n  <Footer>footer</Footer>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icons in React (JSX)\nDESCRIPTION: Illustrates how to apply custom styles like font size and color to an Ant Design SVG icon using the `style` prop. The `MessageOutlined` icon is used as an example.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MessageOutlined } from '@ant-design/icons';\n\n<MessageOutlined style={{ fontSize: '16px', color: '#08c' }} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Trees with Asynchronously Loaded Data in JSX\nDESCRIPTION: This code snippet demonstrates the recommended approach for rendering trees when loading data asynchronously. It uses conditional rendering to show a loading state when data is not yet available.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  this.state.treeData.length ? (\n    <Tree>\n      {this.state.treeData.map((data) => (\n        <TreeNode />\n      ))}\n    </Tree>\n  ) : (\n    'loading tree'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form.useWatch Hook with External API Integration\nDESCRIPTION: Example demonstrating Form.useWatch hook to watch field values and integrate with external APIs using useSWR, automatically updating options when the watched field changes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const [form] = Form.useForm();\n  const userName = Form.useWatch('username', form);\n\n  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);\n\n  return (\n    <Form form={form}>\n      <Form.Item name=\"username\">\n        <AutoComplete options={options} />\n      </Form.Item>\n    </Form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Props in TypeScript\nDESCRIPTION: Comprehensive TypeScript interface definition for TreeSelect component props, including options for customization, selection behavior, styling, and event handling.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |\n| autoClearSearchValue | 当多选模式下值被选择，自动清空搜索框 | boolean | true |  |\n| defaultOpen | 是否默认展开下拉菜单 | boolean | - |  |\n| defaultValue | 指定默认选中的条目 | string \\| string\\[] | - |  |\n| disabled | 是否禁用 | boolean | false |  |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean \\| number | true | 5.5.0 |\n| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode, props) => ReactNode | - |  |\n| dropdownStyle | 下拉菜单的样式 | object | - |  |\n| fieldNames | 自定义节点 label、value、children 的字段 | object | { label: `label`, value: `value`, children: `children` } | 4.17.0 |\n```\n\n----------------------------------------\n\nTITLE: Consuming Design Tokens in Ant Design React\nDESCRIPTION: This snippet shows how to consume Design Tokens in a React component using the useToken hook provided by Ant Design. It applies token values to style a custom div element.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, theme } from 'antd';\n\nconst { useToken } = theme;\n\nconst App: React.FC = () => {\n  const { token } = useToken();\n\n  return (\n    <div\n      style={{\n        backgroundColor: token.colorPrimaryBg,\n        padding: token.padding,\n        borderRadius: token.borderRadius,\n        color: token.colorPrimaryText,\n        fontSize: token.fontSize,\n      }}\n    >\n      Consume Design Token\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Variables with ConfigProvider in React 18\nDESCRIPTION: Demonstrates how to enable CSS variable mode globally in a React 18 application using the ConfigProvider component from Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider theme={{ cssVar: true }}>\n  <App />\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Ant Design DatePicker Component in React\nDESCRIPTION: Demonstrates a basic React functional component (`App`) that imports the `DatePicker` component from the `antd` library and renders it. This snippet assumes React and `antd` are already installed and configured in the project environment.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from 'antd';\n\nconst App = () => {\n  return <DatePicker />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Modals in Ant Design React\nDESCRIPTION: This code snippet demonstrates how to create nested modal dialogs using Ant Design components in a React application. It shows the setup of state management for multiple modals and the structure of nested Modal components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/nested.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Modal } from 'antd';\n\nconst App: React.FC = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isNestedModalOpen, setIsNestedModalOpen] = useState(false);\n\n  const showModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleOk = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalOpen(false);\n  };\n\n  const showNestedModal = () => {\n    setIsNestedModalOpen(true);\n  };\n\n  const handleNestedOk = () => {\n    setIsNestedModalOpen(false);\n  };\n\n  const handleNestedCancel = () => {\n    setIsNestedModalOpen(false);\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={showModal}>\n        Open Modal\n      </Button>\n      <Modal title=\"Modal\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n        <Button onClick={showNestedModal}>Open Nested Modal</Button>\n        <Modal\n          title=\"Nested Modal\"\n          open={isNestedModalOpen}\n          onOk={handleNestedOk}\n          onCancel={handleNestedCancel}\n        >\n          This is a nested modal.\n        </Modal>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Search in Ant Design Select Component using filterOption\nDESCRIPTION: This snippet demonstrates how to use the filterOption prop in Ant Design's Select component to customize the search functionality. It allows for more control over how options are filtered based on the input search value.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/search-filter-option.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from 'antd';\nimport React from 'react';\n\nconst { Option } = Select;\n\nconst handleChange = (value) => {\n  console.log(`selected ${value}`);\n};\n\nconst App = () => (\n  <Select\n    showSearch\n    style={{ width: 200 }}\n    placeholder=\"Search to Select\"\n    optionFilterProp=\"children\"\n    onChange={handleChange}\n    filterOption={(input, option) =>\n      (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\n    }\n    options={[\n      {\n        value: 'jack',\n        label: 'Jack',\n      },\n      {\n        value: 'lucy',\n        label: 'Lucy',\n      },\n      {\n        value: 'tom',\n        label: 'Tom',\n      },\n    ]}\n  />\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Dropdown Closure Behavior with dropdownRender in Ant Design (TypeScript/TSX)\nDESCRIPTION: This TypeScript/TSX snippet shows how to use the Select component's dropdownRender prop to render custom dropdown content and prevent the dropdown from closing when interacting with elements inside it. By handling the onMouseDown event and calling e.preventDefault() and e.stopPropagation(), focus is preserved and closing is disabled. Requires React and Ant Design to be installed, and all event logic must occur within the custom dropdown node. No input or output values are required; this directly modifies dropdown interactivity.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\\n<Select\\n  dropdownRender={() => (\\n    <div\\n      onMouseDown={(e) => {\\n        e.preventDefault();\\n        e.stopPropagation();\\n      }}\\n    >\\n      Some Content\\n    </div>\\n  )}\\n/>\\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Ant Design Component Usage in React\nDESCRIPTION: Demonstrates basic usage of Ant Design components including Button, Space, and DatePicker with version display.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button, Space, DatePicker, version } from 'antd';\n\nconst App = () => (\n  <div style={{ padding: '0 24px' }}>\n    <h1>antd version: {version}</h1>\n    <Space>\n      <DatePicker />\n      <Button type=\"primary\">Primary Button</Button>\n    </Space>\n  </div>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Promise Handling in JSX\nDESCRIPTION: Example demonstrating how to use validateFields method which returns a Promise, showing both success and error handling patterns with the returned data structure.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nvalidateFields()\n  .then((values) => {\n    /*\n  values:\n    {\n      username: 'username',\n      password: 'password',\n    }\n  */\n  })\n  .catch((errorInfo) => {\n    /*\n    errorInfo:\n      {\n        values: {\n          username: 'username',\n          password: 'password',\n        },\n        errorFields: [\n          { name: ['password'], errors: ['Please input your Password!'] },\n        ],\n        outOfDate: false,\n      }\n    */\n  });\n```\n\n----------------------------------------\n\nTITLE: Customizing Tour Placement with Ant Design in TypeScript/React\nDESCRIPTION: This code snippet ('./demo/placement.tsx') illustrates how to configure the placement of the Ant Design Tour popup relative to its targeted element. It depends on React and Ant Design. The code demo focuses on the placement property, showing all supported alignment positions. Input steps provide various 'placement', and the output displays Tour popups at different positions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/placement.tsx\\\">Placement</code>\n```\n\n----------------------------------------\n\nTITLE: Handling Form Validation Results with validateFields (JSX)\nDESCRIPTION: This snippet shows how to use the `validateFields` method of the Form instance, which returns a Promise. It demonstrates handling both successful validation (resolving with form `values`) and validation failure (rejecting with an `errorInfo` object containing values, error fields, and an outOfDate flag).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nvalidateFields()\n  .then((values) => {\n    /*\n  values:\n    {\n      username: 'username',\n      password: 'password',\n    }\n  */\n  })\n  .catch((errorInfo) => {\n    /*\n    errorInfo:\n      {\n        values: {\n          username: 'username',\n          password: 'password',\n        },\n        errorFields: [\n          { name: ['password'], errors: ['Please input your Password!'] },\n        ],\n        outOfDate: false,\n      }\n    */\n  });\n```\n\n----------------------------------------\n\nTITLE: Refactoring Ant Design Form.Item for Multiple Elements using Diff\nDESCRIPTION: This diff illustrates how to modify an Ant Design `Form.Item` to accommodate additional elements, such as descriptive text, alongside the primary input control. The original structure with the input as a direct child is replaced by nesting a `Form.Item` with the `noStyle` prop around the `Input` to handle data binding, while the outer `Form.Item` manages the label and overall layout, now including a `<span>`. This pattern is necessary because `Form.Item` only binds to its direct child.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/complex-form-control.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <Form.Item label=\"Field\" name=\"field\">\n-   <Input />\n- </Form.Item>\n+ <Form.Item label=\"Field\">\n+   <Form.Item name=\"field\" noStyle><Input /></Form.Item> // that will bind input\n+   <span>description</span>\n+ </Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Defining Ant Design Table Columns with Exported Types in TSX\nDESCRIPTION: This snippet demonstrates the standard way to define columns for an Ant Design Table component using the exported `TableColumnsType`. It imports React, the Table component, and its associated type from 'antd', defines a `columns` array conforming to `TableColumnsType`, and renders the Table component with these columns.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport React from 'react';\nimport { Table, type TableColumnsType } from 'antd';\n\nconst columns: TableColumnsType = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n];\n\nexport default () => <Table columns={columns} />;\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Ant Design Button Component in React\nDESCRIPTION: Example of how to import and use the Ant Design Button component in a React application. This snippet modifies the src/App.tsx file to include the Button component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'antd';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <Button type=\"primary\">Button</Button>\n  </div>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Day.js with TimePicker in React (JSX)\nDESCRIPTION: This snippet demonstrates the integration of the Day.js library (with its customParseFormat plugin) into a React component that renders Ant Design's TimePicker. Dependencies include the 'dayjs' package, the 'customParseFormat' plugin, and the Ant Design TimePicker component. Key parameters are the 'defaultValue', set here to a specific time using Day.js formatting. The input expects a Day.js object and uses the 'HH:mm:ss' format; output is a TimePicker initialized with the given default value.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/time-picker/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport dayjs from 'dayjs';\\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\\n\\ndayjs.extend(customParseFormat)\\n\\n<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;\n```\n\n----------------------------------------\n\nTITLE: Nested Themes in Ant Design React\nDESCRIPTION: This example demonstrates how to create nested themes in Ant Design using multiple ConfigProvider components. It shows how child themes can inherit and override parent theme properties.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ConfigProvider, Space } from 'antd';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      token: {\n        colorPrimary: '#1677ff',\n      },\n    }}\n  >\n    <Space>\n      <Button type=\"primary\">Theme 1</Button>\n      <ConfigProvider\n        theme={{\n          token: {\n            colorPrimary: '#00b96b',\n          },\n        }}\n      >\n        <Button type=\"primary\">Theme 2</Button>\n      </ConfigProvider>\n    </Space>\n  </ConfigProvider>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Colorful Badges with Count in React and Ant Design\nDESCRIPTION: This code snippet demonstrates how to create badges with various colors and numerical counts using Ant Design's Badge component in a React application. It showcases different color presets and custom color usage along with count display.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/colorful-with-count-debug.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Badge, Divider, Space } from 'antd';\n\nconst App: React.FC = () => (\n  <>\n    <Space>\n      <Badge color=\"pink\" text=\"pink\" count={5} />\n      <Badge color=\"red\" text=\"red\" count={5} />\n      <Badge color=\"yellow\" text=\"yellow\" count={5} />\n      <Badge color=\"orange\" text=\"orange\" count={5} />\n      <Badge color=\"cyan\" text=\"cyan\" count={5} />\n      <Badge color=\"green\" text=\"green\" count={5} />\n      <Badge color=\"blue\" text=\"blue\" count={5} />\n      <Badge color=\"purple\" text=\"purple\" count={5} />\n      <Badge color=\"geekblue\" text=\"geekblue\" count={5} />\n      <Badge color=\"magenta\" text=\"magenta\" count={5} />\n      <Badge color=\"volcano\" text=\"volcano\" count={5} />\n      <Badge color=\"gold\" text=\"gold\" count={5} />\n      <Badge color=\"lime\" text=\"lime\" count={5} />\n    </Space>\n    <Divider />\n    <Space>\n      <Badge color=\"#f50\" text=\"#f50\" count={5} />\n      <Badge color=\"#2db7f5\" text=\"#2db7f5\" count={5} />\n      <Badge color=\"#87d068\" text=\"#87d068\" count={5} />\n      <Badge color=\"#108ee9\" text=\"#108ee9\" count={5} />\n    </Space>\n  </>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Positioning Modal Dialogs in Ant Design\nDESCRIPTION: This snippet demonstrates two methods for positioning modal dialogs in Ant Design: using the 'centered' prop for automatic centering, and using custom styles like 'style.top' for precise positioning.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/position.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n使用 `centered` 或类似 `style.top` 的样式来设置对话框位置。\n\n## en-US\n\nYou can use `centered`,`style.top` or other styles to set position of modal dialog.\n```\n\n----------------------------------------\n\nTITLE: Defining Date Format Types for DatePicker - TypeScript\nDESCRIPTION: This TypeScript snippet declares the `FormatType` type for Ant Design's DatePicker, supporting various ways to define date formats including strings, functions returning strings, arrays of such, or an options object. It depends on the `Dayjs` type imported from the `dayjs` library and is used for the `format` property of DatePicker/Pickers. Inputs include generic strings, formatter functions, or advanced options; outputs are formatted date strings. Requires TypeScript and the `dayjs` package.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Dayjs } from 'dayjs';\\n\\ntype Generic = string;\\ntype GenericFn = (value: Dayjs) => string;\\n\\nexport type FormatType =\\n  | Generic\\n  | GenericFn\\n  | Array<Generic | GenericFn>\\n  | {\\n      format: string;\\n      type?: 'mask';\\n    };\n```\n\n----------------------------------------\n\nTITLE: Importing and Using an Ant Design Button in React (TSX)\nDESCRIPTION: Demonstrates how to import the `Button` component from the `antd` library and render it within a React functional component (`Main`). This example shows a basic primary button after installing antd via npm/yarn/pnpm/bun.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'antd';\n\nexport function Main() {\n  return (\n    <div>\n      <Button type=\"primary\">Button</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ant Design Collapse using items prop and Panel components in TSX\nDESCRIPTION: This snippet demonstrates two methods for creating an Ant Design Collapse component. The first (recommended for version >= 5.6.0) uses the `items` prop, which takes an array of objects defining each panel's `key`, `label`, and `children`. The second method (deprecated in >= 5.6.0) uses nested `Collapse.Panel` components, defining `header` and `key` props directly on the `Panel`. Both examples initialize the collapse with the first panel active using `defaultActiveKey={['1']}`. It requires the `Collapse` component and potentially `CollapseProps` type from Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/collapse/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// works when >= 5.6.0, recommended ✅\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nconst items: CollapseProps['items'] = [\n  {\n    key: '1',\n    label: 'This is panel header 1',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '2',\n    label: 'This is panel header 2',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '3',\n    label: 'This is panel header 3',\n    children: <p>{text}</p>,\n  },\n];\n\n<Collapse items={items} defaultActiveKey={['1']} />;\n\n// works when <5.6.0 , deprecated when >=5.6.0  🙅🏻‍♀️\n\n<Collapse defaultActiveKey={['1']} onChange={onChange}>\n  <Panel header=\"This is panel header 1\" key=\"1\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 2\" key=\"2\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 3\" key=\"3\">\n    <p>{text}</p>\n  </Panel>\n</Collapse>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Ant Design Table with TypeScript\nDESCRIPTION: A complete example of using the Ant Design Table component with TypeScript. The code demonstrates how to define column types, data interfaces, and use both the standard and JSX-style Table implementations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Table } from 'antd';\nimport type { TableColumnsType } from 'antd';\n\ninterface User {\n  key: number;\n  name: string;\n}\n\nconst columns: TableColumnsType<User> = [\n  {\n    key: 'name',\n    title: 'Name',\n    dataIndex: 'name',\n  },\n];\n\nconst data: User[] = [\n  {\n    key: 0,\n    name: 'Jack',\n  },\n];\n\nconst Demo: React.FC = () => (\n  <>\n    <Table<User> columns={columns} dataSource={data} />\n    {/* JSX style usage */}\n    <Table<User> dataSource={data}>\n      <Table.Column<User> key=\"name\" title=\"Name\" dataIndex=\"name\" />\n    </Table>\n  </>\n);\n\nexport default Demo;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Switching in Ant Design React\nDESCRIPTION: This snippet shows how to implement dynamic theme switching in Ant Design. It uses a ColorPicker to allow users to change the primary color of the theme in real-time.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ConfigProvider, Space, Input, ColorPicker, Divider } from 'antd';\nimport React from 'react';\n\nconst App: React.FC = () => {\n  const [primary, setPrimary] = React.useState('#1677ff');\n\n  return (\n    <>\n      <ColorPicker showText value={primary} onChange={(color) => setPrimary(color.toHexString())} />\n      <Divider />\n      <ConfigProvider\n        theme={{\n          token: {\n            colorPrimary: primary,\n          },\n        }}\n      >\n        <Space>\n          <Input placeholder=\"Please Input\" />\n          <Button type=\"primary\">Submit</Button>\n        </Space>\n      </ConfigProvider>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Icons in Ant Design Components (JSX)\nDESCRIPTION: This example shows how to use custom React nodes as icons in Ant Design components. It demonstrates the flexibility of icon customization in the library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/demo/custom-icon.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SmileOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n\nReactDOM.render(\n  <Button icon={<SmileOutlined />}>Custom Icon</Button>,\n  mountNode,\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Design Tokens with ConfigProvider in React\nDESCRIPTION: This snippet demonstrates how to customize the Ant Design theme by modifying Design Tokens using the ConfigProvider component. It shows how to change the primary color and border radius globally.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ConfigProvider, Space } from 'antd';\nimport React from 'react';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      token: {\n        // Seed Token\n        colorPrimary: '#00b96b',\n        borderRadius: 2,\n\n        // Alias Token\n        colorBgContainer: '#f6ffed',\n      },\n    }}\n  >\n    <Space>\n      <Button type=\"primary\">Primary</Button>\n      <Button>Default</Button>\n    </Space>\n  </ConfigProvider>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Moved Ant Design Components in v5\nDESCRIPTION: Explains that the `PageHeader` and `Comment` components are no longer part of the core `antd` package in v5. This diff shows how to update the import statements in a React component to use `@ant-design/pro-components` for `PageHeader` and `@ant-design/compatible` for `Comment`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { PageHeader, Comment } from 'antd';\n+ import { Comment } from '@ant-design/compatible';\n+ import { PageHeader } from '@ant-design/pro-components';\n\n  const App: React.FC = () => (\n    <>\n      <PageHeader />\n      <Comment />\n    </>\n  );\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Expand/Collapse Icons in Ant Design Tree Component\nDESCRIPTION: This example shows how to use the switcherIcon prop to customize the expand/collapse icons of a Tree component. It implements a functional component that renders a Tree with custom icons based on the node's expanded state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/demo/switcher-icon.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CarryOutOutlined, FormOutlined } from '@ant-design/icons';\nimport { Tree } from 'antd';\n\nconst treeData = [\n  {\n    title: 'parent 1',\n    key: '0-0',\n    icon: <CarryOutOutlined />,\n    children: [\n      {\n        title: 'parent 1-0',\n        key: '0-0-0',\n        icon: <CarryOutOutlined />,\n        children: [\n          { title: 'leaf', key: '0-0-0-0', icon: <CarryOutOutlined /> },\n          {\n            title: (\n              <>\n                <div>multiple line title</div>\n                <div>multiple line title</div>\n              </>\n            ),\n            key: '0-0-0-1',\n            icon: <CarryOutOutlined />,\n          },\n        ],\n      },\n      {\n        title: 'parent 1-1',\n        key: '0-0-1',\n        icon: <CarryOutOutlined />,\n        children: [{ title: 'leaf', key: '0-0-1-0', icon: <CarryOutOutlined /> }],\n      },\n      {\n        title: 'parent 1-2',\n        key: '0-0-2',\n        icon: <CarryOutOutlined />,\n        children: [\n          { title: 'leaf', key: '0-0-2-0', icon: <CarryOutOutlined /> },\n          {\n            title: 'leaf',\n            key: '0-0-2-1',\n            icon: <CarryOutOutlined />,\n            switcherIcon: <FormOutlined />,\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App: React.FC = () => (\n  <Tree\n    showIcon\n    defaultExpandAll\n    defaultSelectedKeys={['0-0-0']}\n    switcherIcon={({ expanded }) => (expanded ? <CarryOutOutlined /> : <FormOutlined />)}\n    treeData={treeData}\n  />\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Form.useFormInstance Hook in React Components\nDESCRIPTION: Example showing how to use Form.useFormInstance hook to access the parent form instance within child components without passing it as props.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst Sub = () => {\n  const form = Form.useFormInstance();\n\n  return <Button onClick={() => form.setFieldsValue({})} />;\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form}>\n      <Sub />\n    </Form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Tag Component in Ant Design (React, TSX)\nDESCRIPTION: This snippet renders a basic Tag component using Ant Design in a React (TSX) environment. It requires importing the Tag component from the Ant Design library. The basic usage demonstrates simply displaying a tag with default styling. No props are required, and the Tag will display its child text as content. No dependencies beyond Ant Design are required.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/basic.tsx\\\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Prefix for Aliased Ant Design v5 to Avoid Style Conflicts in React (TSX)\nDESCRIPTION: Shows how to wrap the application part using Ant Design v5 (imported via alias as `antd-v5`) with its specific `ConfigProvider5`. Setting the `prefixCls` prop (e.g., to \"ant5\") prevents CSS style conflicts between v4 and v5 components rendering on the same page.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider as ConfigProvider5 } from 'antd-v5';\n\nexport default () => (\n  <ConfigProvider5 prefixCls=\"ant5\">\n    <MyApp />\n  </ConfigProvider5>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project using Bun\nDESCRIPTION: Uses `bun create` to run the `next-app` initializer, creating a new Next.js project named 'antd-demo'. This is the equivalent command for users utilizing the Bun runtime and package manager.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bun create next-app antd-demo\n```\n\n----------------------------------------\n\nTITLE: Using defaultFileList in Upload Component (React/JSX)\nDESCRIPTION: This code snippet shows how to use the defaultFileList prop with the Upload component from Ant Design to display files that have already been uploaded when a page initializes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/demo/defaultFileList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n使用 `defaultFileList` 设置已上传的内容。\n\n## en-US\n\nUse `defaultFileList` for uploaded files when page init.\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapped Input Component\nDESCRIPTION: Shows how to create a wrapped Input component that can be used with Form.Item. This is useful when you need to add additional markup around a form control while still maintaining form functionality.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyInput = (props) => (\n  <div>\n    <h3>I am a wrapped Input</h3>\n    <Input {...props} />\n  </div>\n);\n\n<Form.Item name=\"input\">\n  <MyInput />\n</Form.Item>;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Antd Theme (TS)\nDESCRIPTION: Creates a TypeScript file (`theme/themeConfig.ts`) to define a custom theme configuration object for Ant Design. This example sets a custom `fontSize` and `colorPrimary` within the theme's token. This configuration can then be passed to Ant Design's `ConfigProvider`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\n// theme/themeConfig.ts\nimport type { ThemeConfig } from 'antd';\n\nconst theme: ThemeConfig = {\n  token: {\n    fontSize: 16,\n    colorPrimary: '#52c41a',\n  },\n};\n\nexport default theme;\n```\n\n----------------------------------------\n\nTITLE: Style Insertion with useInsertionEffect Refcounting | TypeScript/React (Pseudocode)\nDESCRIPTION: Pseudocode showing useInsertionEffect for style reference-counting: increments on insertion, decrements/removes styles on cleanup. Intended to solve timing issues present in render-phase or useMemo-based insertion under Suspense or StrictMode. No actual style code, purely shows hook lifecycle and reference counting.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n// pseudocode. Not used in real world\\nuseInsertionEffect(() => {\\n  if (!counter[hash]) {\\n    // Insert only when current style not inserted\\n  }\\n  counter[hash] += 1;\\n\\n  return () => {\\n    counter[hash] -= 1;\\n\\n    if (!counter[hash]) {\\n      // Remove if set to clear on destroy\\n    }\\n  };\\n}, [hash]);\n```\n\n----------------------------------------\n\nTITLE: Basic CI/CD Workflow Configuration with GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration for a React project that handles linting, building, testing and deployment to GitHub Pages. Includes setup for pnpm package manager and artifact uploads.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\npermissions:\n  contents: write\n\njobs:\n  CI:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup bun\n        uses: oven-sh/setup-bun@v2\n        with:\n          node-version: 16\n\n      - name: Install pnpm\n        uses: pnpm/action-setup@v2\n        with:\n          version: 7.0.0\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: lint\n        run: pnpm run lint\n\n      - name: Build\n        run: pnpm run build\n\n      - name: Upload build artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: ./dist\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        if: github.ref == 'refs/heads/master'\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```\n\n----------------------------------------\n\nTITLE: Implementing disabledDate in Ant Design DatePicker for a Specific Date Range\nDESCRIPTION: This TSX function `disabledDate` implements date range restriction for an Ant Design DatePicker. When the panel type is 'date', it disables dates strictly before '2024-01-01' or strictly after '2024-01-02' using Day.js's `isBefore` and `isAfter` methods with 'day' precision. For other panel types (like month or year), it checks if the panel unit contains '2024-01-01' using `isSame` with the corresponding `info.type` precision; if not, the panel unit (e.g., the whole month) is disabled.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst disabledDate = (date, info) => {\n  if (info.type === 'date') {\n    return date.isBefore('2024-01-01', 'day') || date.isAfter('2024-01-02', 'day');\n  }\n  return !date.isSame('2024-01-01', info.type);\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Category Search Dropdown in Ant Design\nDESCRIPTION: CSS styles that customize the appearance of an Ant Design dropdown menu for category-based search. Includes styling for group titles, borders, padding, text alignment, and scroll height limits.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/demo/certain-category.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.certain-category-search-dropdown .ant-select-dropdown-menu-item-group-title {\n  color: #666;\n  font-weight: bold;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item-group {\n  border-bottom: 1px solid #f6f6f6;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item {\n  padding-inline-start: 16px;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu-item.show-all {\n  text-align: center;\n  cursor: default;\n}\n\n.certain-category-search-dropdown .ant-select-dropdown-menu {\n  max-height: 300px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Antd Button Component in Next.js Page (TSX)\nDESCRIPTION: Demonstrates importing the `Button` component from the `antd` library and rendering it within a basic React functional component (`Home`). This example shows how to use an antd component in a Next.js page (like `src/app/page.tsx` or a component within the `pages` directory).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'antd';\n\nconst Home = () => (\n  <div className=\"App\">\n    <Button type=\"primary\">Button</Button>\n  </div>\n);\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Progress Bar in React with Ant Design\nDESCRIPTION: This code snippet demonstrates how to create a dynamic progress bar using Ant Design's Progress component in a React application. It utilizes the useState hook to manage the progress state and useEffect to simulate progress changes over time.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/dynamic.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nconst App: React.FC = () => {\n  const [percent, setPercent] = useState<number>(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setPercent((prevPercent) => {\n        const newPercent = prevPercent + 1;\n        if (newPercent >= 100) {\n          clearInterval(timer);\n        }\n        return newPercent;\n      });\n    }, 100);\n    return () => clearInterval(timer);\n  }, []);\n\n  return <Progress percent={percent} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Upload onChange Callback in Ant Design Upload (React JSX)\nDESCRIPTION: This snippet defines the structure of the object returned by the Upload component's onChange callback. It demonstrates access to current file details, the file list, and the event payload, enabling detailed state tracking for the upload process. No external dependencies are required; all types are provided by Ant Design's Upload component integration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: React JSX\nCODE:\n```\n{\\n  file: { /* ... */ },\\n  fileList: [ /* ... */ ],\\n  event: { /* ... */ },\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form.Provider for Form Linkage in JSX\nDESCRIPTION: Example showing how to use Form.Provider to establish linkage between multiple forms, with an onFormFinish handler to trigger actions when a specific form is submitted.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Provider\n  onFormFinish={(name) => {\n    if (name === 'form1') {\n      // Do something...\n    }\n  }}\n>\n  <Form name=\"form1\">...</Form>\n  <Form name=\"form2\">...</Form>\n</Form.Provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Tokens with Ant Design ConfigProvider in TypeScript\nDESCRIPTION: This snippet demonstrates how to globally and per-component configure Component Tokens in Ant Design 5.x using the theme property of the ConfigProvider component within a React (TypeScript) application. It shows how to set custom primary colors for Radio and Checkbox components, facilitating token-based customization. Dependencies include React, antd, and TypeScript. The main parameters controlled are the colorPrimary fields within the Radio and Checkbox token entries. The App component, when rendered, will have Radio and Checkbox components styled according to these tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Checkbox, ConfigProvider, Radio } from 'antd';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      components: {\n        Radio: {\n          colorPrimary: '#00b96b',\n        },\n        Checkbox: {\n          colorPrimary: '#ff4d4f',\n        },\n      },\n    }}\n  >\n    <Radio>Radio</Radio>\n    <Checkbox>Checkbox</Checkbox>\n  </ConfigProvider>\n);\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Generating and Caching Per-Request CSS Files with Hashing in TypeScript\nDESCRIPTION: Implements the 'Part Static Extract Style' approach for finer-grained control. After extracting styles (`styleText`) for a specific server request (using `extractStyle` as shown earlier), it generates an MD5 hash of the style content using Node.js `crypto`. This hash forms part of a unique CSS filename. The code checks if a file with this name exists using Node.js `fs`; if not, it writes the `styleText` to the file. This creates cacheable, on-demand CSS files specific to page content or user themes. Requires Node.js `crypto` and `fs` modules.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createHash } from 'crypto';\n\n// Get Style content like above\nconst styleText = extractStyle(cache);\n\nconst hash = createHash('md5').update(styleText).digest('hex');\nconst cssFileName = `css-${hash.substring(0, 8)}.css`;\n\nif (!fs.existsSync(cssFileName)) {\n  fs.writeFileSync(cssFileName, styleText);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Row and Header Row Event Handlers in Ant Design Table (JSX)\nDESCRIPTION: This snippet illustrates how to attach event handlers to rows and header rows in an Ant Design Table using the onRow and onHeaderRow props in React. Through the onRow callback, developers can provide custom event handlers for actions such as clicking, double clicking, right-click/context menu, mouse enter, and mouse leave for table rows. Similarly, onHeaderRow allows adding events to header rows (e.g., click). Requires Ant Design Table and React. Parameters include 'record' and 'rowIndex' for rows, 'columns' and 'index' for header rows. This allows granular interaction support in table UIs.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n  onRow={(record, rowIndex) => {\n    return {\n      onClick: (event) => {}, // click row\n      onDoubleClick: (event) => {}, // double click row\n      onContextMenu: (event) => {}, // right button click row\n      onMouseEnter: (event) => {}, // mouse enter row\n      onMouseLeave: (event) => {}, // mouse leave row\n    };\n  }}\n  onHeaderRow={(columns, index) => {\n    return {\n      onClick: () => {}, // click header row\n    };\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rewriting Next.js Document for Style Extraction (Pages Router)\nDESCRIPTION: Modifies the `pages/_document.tsx` file to implement server-side rendering style extraction for Ant Design in a Next.js Pages Router project. It uses `createCache`, `extractStyle`, and `StyleProvider` from `@ant-design/cssinjs` to collect styles during server rendering and inject them into the initial HTML response via `getInitialProps`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\nimport Document, { Head, Html, Main, NextScript } from 'next/document';\nimport type { DocumentContext } from 'next/document';\n\nconst MyDocument = () => (\n  <Html lang=\"en\">\n    <Head />\n    <body>\n      <Main />\n      <NextScript />\n    </body>\n  </Html>\n);\n\nMyDocument.getInitialProps = async (ctx: DocumentContext) => {\n  const cache = createCache();\n  const originalRenderPage = ctx.renderPage;\n  ctx.renderPage = () =>\n    originalRenderPage({\n      enhanceApp: (App) => (props) => (\n        <StyleProvider cache={cache}>\n          <App {...props} />\n        </StyleProvider>\n      ),\n    });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  const style = extractStyle(cache, true);\n  return {\n    ...initialProps,\n    styles: (\n      <>\n        {initialProps.styles}\n        <style dangerouslySetInnerHTML={{ __html: style }} />\n      </>\n    ),\n  };\n};\n\nexport default MyDocument;\n```\n\n----------------------------------------\n\nTITLE: Extracting Inline Styles for Ant Design SSR in React/TSX\nDESCRIPTION: Demonstrates how to capture Ant Design styles generated during server-side rendering using `@ant-design/cssinjs` and embed them directly into the HTML output. It involves creating a cache, wrapping the application with `StyleProvider`, rendering the app to a string using `renderToString`, and extracting the CSS text from the cache with `extractStyle`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\nimport type Entity from '@ant-design/cssinjs/es/Cache';\nimport { renderToString } from 'react-dom/server';\n\nconst App = () => {\n  // SSR Render\n  const cache = React.useMemo<Entity>(() => createCache(), []);\n  const html = renderToString(\n    <StyleProvider cache={cache}>\n      <MyApp />\n    </StyleProvider>,\n  );\n\n  // Grab style from cache\n  const styleText = extractStyle(cache);\n\n  // Mix with style\n  return `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        ${styleText}\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n      </body>\n    </html>\n  `;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Icon in Tag Component in Ant Design (React, TSX)\nDESCRIPTION: This snippet illustrates how to add icons inside a Tag component in React using Ant Design. It requires importing Ant Design icons and passing them via the 'icon' prop. Icons help visually distinguish tags with additional context or semantics.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/icon.tsx\\\">Icon</code>\n```\n\n----------------------------------------\n\nTITLE: Initializing Popup Container with Custom getContainer - React TypeScript\nDESCRIPTION: This snippet illustrates a typical pattern for creating pop-up containers in React using a ref to an element, and invoking a getContainer function during the component's mounting phase. The useEffect hook simulates calling getContainer when the referenced DOM node is available. This demonstrates the foundational method by which floating UI components ascertain their mounting DOM node. Dependencies include React, and key parameters include eleRef for the element reference. The expected behavior is that getContainer returns an HTML element under which the popup will be rendered.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fake Code. Just for Demo\\nconst PopupWrapper = () => {\\n  const eleRef = React.useRef<HTMLDivElement>(null);\\n\\n  React.useEffect(() => {\\n    // It's much complex with timing in real world. You can view the source for more detail:\\n    // https://github.com/react-component/portal/blob/master/src/Portal.tsx\\n    const container: HTMLElement = getContainer(eleRef.current);\\n\\n    // ...\\n  }, []);\\n\\n  return (\\n    <div ref={eleRef}>\\n      {...}\\n    </div>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing disabledTime in Ant Design DatePicker for a Specific Date-Time Range\nDESCRIPTION: This TSX function `disabledTime` works with the `disabledDate` for a specific date-time range (`2024-01-01 09:00:00` to `2024-01-02 17:00:00`) in an Ant Design DatePicker. It takes the current date (`date`) being considered for time selection. If the date is '2024-01-01', it disables hours before 9 AM. If the date is '2024-01-02', it disables hours after 5 PM (17:00). For any dates between these (already permitted by `disabledDate`), it returns an empty object, enabling all times. It relies on Day.js for date comparisons.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst disabledTime = (date) => {\n  if (date.isSame('2024-01-01', 'day')) {\n    return {\n      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour < 9),\n    };\n  }\n\n  if (date.isSame('2024-01-02', 'day')) {\n    return {\n      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour > 17),\n    };\n  }\n\n  // Only need to consider the start and end time\n  // the range itself has been disabled by `disabledDate`\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Font Icons from Iconfont.cn (JSX)\nDESCRIPTION: Shows how to use the 'createFromIconfontCN' utility from '@ant-design/icons' to create a custom icon component (MyIcon) that renders icons from an iconfont.cn project using a provided script URL. An instance of the custom icon is then rendered using the 'type' prop corresponding to the icon name in the iconfont project.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createFromIconfontCN } from '@ant-design/icons';\nimport ReactDOM from 'react-dom/client';\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // generate in iconfont.cn\n});\n\nReactDOM.createRoot(mountNode).render(<MyIcon type=\"icon-example\" />);\n```\n\n----------------------------------------\n\nTITLE: Async Modal Confirmation with Promise in React\nDESCRIPTION: Shows how to use modal.confirm as a Promise, allowing for await operations. The function returns true for 'onOk' and false for 'onCancel'.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Return `true` when click `onOk` and `false` when click `onCancel`\nconst confirmed = await modal.confirm({ ... });\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Option Rendering with optionRender in Ant Design\nDESCRIPTION: This code snippet demonstrates how to use the optionRender prop to customize the rendering of dropdown options in Ant Design components. It allows for greater flexibility in styling and structuring the options displayed in dropdowns.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/option-render.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Select, Space } from 'antd';\n\nconst { Option } = Select;\n\nconst handleChange = (value) => {\n  console.log(`selected ${value}`);\n};\n\nconst App = () => (\n  <Select\n    style={{ width: 120 }}\n    onChange={handleChange}\n    optionRender={(option) => (\n      <Space>\n        <span role=\"img\" aria-label={option.data.label}>\n          {option.data.emoji}\n        </span>\n        {option.data.desc}\n      </Space>\n    )}\n    options={[\n      {\n        value: 'happy',\n        label: 'Happy',\n        desc: 'happy',\n        emoji: '😄',\n      },\n      {\n        value: 'sad',\n        label: 'Sad',\n        desc: 'sad',\n        emoji: '😢',\n      },\n    ]}\n  />\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Banner in Ant Design React\nDESCRIPTION: This code snippet shows how to create an Alert component that displays as a banner at the top of a page. By default, it includes an icon and has a 'warning' type.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/banner.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert message=\"Warning text\" banner />\n```\n\n----------------------------------------\n\nTITLE: Using Config Context via ConfigProvider.useConfig (JavaScript/JSX)\nDESCRIPTION: This snippet illustrates how to use ConfigProvider.useConfig to access the current configuration for componentDisabled and componentSize from a parent provider. For use in projects with Ant Design 5.2.0 and up. The dependencies are Ant Design and React. Returns configuration values as properties; the inputs are the current context, and outputs are config settings for implementation in components or hooks.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nconst {\\n  componentDisabled, // 5.3.0+\\n  componentSize, // 5.3.0+\\n} = ConfigProvider.useConfig();\\n\n```\n\n----------------------------------------\n\nTITLE: Using Standard Ant Design Icons (JSX)\nDESCRIPTION: Demonstrates importing and rendering different themed icons (Outlined, Filled, TwoTone) from the '@ant-design/icons' package in a React component. It also shows how to set a custom primary color for a two-tone icon using the 'twoToneColor' prop.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons';\n\n<StarOutlined />\n<StarFilled />\n<StarTwoTone twoToneColor=\"#eb2f96\" />\n```\n\n----------------------------------------\n\nTITLE: Context Provider Setup for Modal in React\nDESCRIPTION: Illustrates how to set up context providers with Modal.useModal(). The contextHolder placement determines which contexts are accessible to the modal.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst [modal, contextHolder] = Modal.useModal();\n\n// then call modal.confirm instead of Modal.confirm\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder is in Context1, which means modal will get context of Context1 */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder is out of Context2, which means modal will not get context of Context2 */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with ConfigProvider in Ant Design (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to use the ConfigProvider component to set global configuration for child React components, such as changing layout direction (e.g., RTL). Dependencies include React and 'antd'. The key parameter is the 'direction' prop; inputs are application components, and the output is a React component tree with the applied config. This example must reside inside a TypeScript React (.tsx) file and supposes that an <App /> component exists in scope.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\\nimport { ConfigProvider } from 'antd';\\n\\n// ...\\nconst Demo: React.FC = () => (\\n  <ConfigProvider direction=\\\"rtl\\\">\\n    <App />\\n  </ConfigProvider>\\n);\\n\\nexport default Demo;\\n\n```\n\n----------------------------------------\n\nTITLE: Using Preset Theme Algorithms in Ant Design React\nDESCRIPTION: This example shows how to use preset theme algorithms in Ant Design, such as the dark algorithm. It demonstrates switching between different algorithms and combining multiple algorithms.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ConfigProvider, Input, Space, theme } from 'antd';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      // 1. Use dark algorithm\n      algorithm: theme.darkAlgorithm,\n\n      // 2. Combine dark algorithm and compact algorithm\n      // algorithm: [theme.darkAlgorithm, theme.compactAlgorithm],\n    }}\n  >\n    <Space>\n      <Input placeholder=\"Please Input\" />\n      <Button type=\"primary\">Submit</Button>\n    </Space>\n  </ConfigProvider>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with Options in React\nDESCRIPTION: Demonstrates the recommended usage of the Select component with options array. This approach offers better performance and simpler code style.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nreturn <Select options={[{ value: 'sample', label: <span>sample</span> }]} />;\n```\n\n----------------------------------------\n\nTITLE: Using Ant Design Color Palettes in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import and utilize the color palettes from the `@ant-design/colors` package after installation. It specifically imports the `blue` color object, logs the array of blue shades, and accesses the primary blue color (`#1677FF`) via the `primary` property. This allows developers to consistently apply Ant Design's color scheme in their applications.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { blue } from '@ant-design/colors';\n\nconsole.log(blue); // ['#E6F4FF', '#BAE0FF', '#91CAFF', '#69B1FF', '#4096FF', '#1677FF', '#0958D9', '#003EB3', '#002C8C', '#001D66']\nconsole.log(blue.primary); // '#1677FF'\n```\n\n----------------------------------------\n\nTITLE: Handling Async Loading in TreeSelect Search\nDESCRIPTION: Code example showing how to implement custom filtering logic with async loading for TreeSelect when searching. This demonstrates handling of loading states and implementing custom matching logic.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TreeSelect\n  filterTreeNode={(input, treeNode) => {\n    const match = YOUR_LOGIC_HERE;\n\n    if (match && !treeNode.isLeaf && !treeNode.children) {\n      // Do some loading logic\n    }\n\n    return match;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Ant Design BackTop Component with FloatButton in v5\nDESCRIPTION: Shows the migration path for the `BackTop` component, which is deprecated in Ant Design v5. The example replaces the `BackTop` import and usage with the equivalent `FloatButton.BackTop` component within a React functional component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { BackTop } from 'antd';\n+ import { FloatButton } from 'antd';\n\n  const App: React.FC = () => (\n    <div>\n-     <BackTop />\n+     <FloatButton.BackTop />\n    </div>\n  );\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Generating Full Ant Design CSS File using static-style-extract\nDESCRIPTION: Presents a basic TypeScript script (`scripts/genAntdCss.tsx`) that utilizes `@ant-design/static-style-extract` to generate a single CSS file containing all base styles for Ant Design components. The generated CSS is written to a specified output path (e.g., `./public/antd.min.css`) using the Node.js `fs` module.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// scripts/genAntdCss.tsx\nimport fs from 'fs';\nimport { extractStyle } from '@ant-design/static-style-extract';\n\nconst outputPath = './public/antd.min.css';\n\nconst css = extractStyle();\n\nfs.writeFileSync(outputPath, css);\n```\n\n----------------------------------------\n\nTITLE: Implementing Products Page with React Query\nDESCRIPTION: React component for the products page, using react-query for data fetching and mutation, and integrating the ProductList component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport axios from 'axios';\nimport { useMutation, useQuery, useQueryClient } from 'umi';\n\nimport styles from './products.less';\nimport ProductList from '@/components/ProductList';\n\nexport default function Page() {\n  const queryClient = useQueryClient();\n  const productsQuery = useQuery(['products'], {\n    queryFn() {\n      return axios.get('/api/products').then((res) => res.data);\n    },\n  });\n  const productsDeleteMutation = useMutation({\n    mutationFn(id: string) {\n      return axios.delete(`/api/products/${id}`);\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n    },\n  });\n  if (productsQuery.isLoading) return null;\n  return (\n    <div>\n      <h1 className={styles.title}>Page products</h1>\n      <ProductList\n        products={productsQuery.data.data}\n        onDelete={(id) => {\n          productsDeleteMutation.mutate(id);\n        }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ant Design Select Component API for Popup Classname in v5\nDESCRIPTION: Explains that Ant Design v5 standardizes the prop for applying custom CSS classes to component popups using `popupClassName`. This example shows replacing the deprecated `dropdownClassName` prop with `popupClassName` for the `Select` component within a React functional component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  import { Select } from 'antd';\n\n  const App: React.FC = () => (\n    <Select\n-     dropdownClassName=\"my-select-popup\"\n+     popupClassName=\"my-select-popup\"\n    />\n  );\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Themed Ant Design CSS using static-style-extract\nDESCRIPTION: Provides a focused example script using `@ant-design/static-style-extract` and `ConfigProvider` to generate an Ant Design CSS file tailored to a specific custom theme. It demonstrates overriding a theme token (e.g., `colorPrimary` to 'red') within the `ConfigProvider` during the style extraction process.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { extractStyle } from '@ant-design/static-style-extract';\nimport { ConfigProvider } from 'antd';\n\nconst cssText = extractStyle((node) => (\n  <ConfigProvider\n    theme={{\n      token: {\n        colorPrimary: 'red',\n      },\n    }}\n  >\n    {node}\n  </ConfigProvider>\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Space in Ant Design\nDESCRIPTION: This example shows how to use the Space component to create vertical spacing between elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/vertical.tsx\">Vertical Space</code>\n```\n\n----------------------------------------\n\nTITLE: Using Wave Component for Custom Click Effect Animation in Ant Design (TypeScript/React)\nDESCRIPTION: This snippet shows how to apply the standalone Wave component from Ant Design around a button element to enable a click-triggered wave (box-shadow) effect. It is intended for cases where you want custom wave animations on individual elements. Dependencies: the Wave component from Ant Design. The input is a child component; on click, the Wave component wraps the target in an animated effect. Designed for React apps with TypeScript/TSX support.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Sample code.\nconst Button = (\n  <Wave>\n    <button />\n  </Wave>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Component with Descriptive Text in React JSX\nDESCRIPTION: This code snippet shows how to use the Rate component from Ant Design with added descriptive text. It demonstrates setting up tooltips for each star rating and displaying the selected rating description.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/text.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Rate } from 'antd';\n\nconst desc = ['terrible', 'bad', 'normal', 'good', 'wonderful'];\n\nReactDOM.render(\n  <>\n    <Rate tooltips={desc} />\n    <span className=\"ant-rate-text\">{desc[value - 1]}</span>\n  </>,\n  mountNode,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with AntdRegistry (App Router)\nDESCRIPTION: Shows how to modify the root layout file (`app/layout.tsx`) in a Next.js App Router project. It imports and wraps the application's children with `AntdRegistry` from `@ant-design/nextjs-registry` to enable automatic extraction and injection of Ant Design styles during server-side rendering.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { AntdRegistry } from '@ant-design/nextjs-registry';\n\nconst RootLayout = ({ children }: React.PropsWithChildren) => (\n  <html lang=\"en\">\n    <body>\n      <AntdRegistry>{children}</AntdRegistry>\n    </body>\n  </html>\n);\n\nexport default RootLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Color Seed Token in Ant Design Theme (TSX)\nDESCRIPTION: This snippet demonstrates defining a basic theme object in Ant Design by setting the `colorPrimary` property within the `token` object. `colorPrimary` is a Seed Token, meaning it's a foundational value from which other theme colors are derived automatically by Ant Design's internal algorithms.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  token: {\n    colorPrimary: '#1890ff',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Snapshot Testing from Enzyme to React Testing Library - JavaScript\nDESCRIPTION: This snippet contrasts Enzyme's wrapper-based snapshot testing with snapshots using React Testing Library. It switches from wrapping the result of mount and render() to snapshotting the DOM from container.firstChild. The test is written in a Jest test block and requires @testing-library/react. Inputs are JSX elements for rendering, with outputs being DOM structure snapshots.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--  import { mount } from 'enzyme';\\n++  import { render } from '@testing-library/react';\\n\\n    describe('xxx', () => {\\n      it('yyy', () => {\\n--      const wrapper = mount(<Demo />);\\n++      const { container } = render(<Demo />);\\n--      expect(wrapper.render()).toMatchSnapshot();\\n++      expect(container.firstChild).toMatchSnapshot();\\n      });\\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Icons for Segmented Items in Ant Design React\nDESCRIPTION: This code snippet demonstrates how to set icons for Segmented Items using the Ant Design React library. It showcases the usage of the Segmented component with custom icons for each option.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/demo/with-icon.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AppstoreOutlined, BarsOutlined } from '@ant-design/icons';\nimport { Segmented, Space } from 'antd';\n\nconst App: React.FC = () => (\n  <Space direction=\"vertical\">\n    <Segmented\n      options={[\n        {\n          label: 'List',\n          value: 'List',\n          icon: <BarsOutlined />,\n        },\n        {\n          label: 'Kanban',\n          value: 'Kanban',\n          icon: <AppstoreOutlined />,\n        },\n      ]}\n    />\n    <Segmented\n      options={[\n        {\n          label: 'List',\n          value: 'List',\n          icon: <BarsOutlined />,\n        },\n        {\n          label: 'Kanban',\n          value: 'Kanban',\n          icon: <AppstoreOutlined />,\n        },\n      ]}\n      defaultValue=\"Kanban\"\n    />\n  </Space>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Ant Design Icons (JSX)\nDESCRIPTION: Shows how to apply custom styles, such as 'fontSize' and 'color', directly to an imported Ant Design icon component using the 'style' prop.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MessageOutlined } from '@ant-design/icons';\n\n<MessageOutlined style={{ fontSize: '16px', color: '#08c' }} />;\n```\n\n----------------------------------------\n\nTITLE: Extracting Static Styles using `@ant-design/static-style-extract` in TSX\nDESCRIPTION: Demonstrates using the `@ant-design/static-style-extract` package to simplify the static extraction of Ant Design component styles for SSR. This helper package internally renders common components, extracts their styles, and returns the combined CSS, which can then be saved to a file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { extractStyle } from '@ant-design/static-style-extract';\nimport fs from 'fs';\n\n// `extractStyle` containers all the antd component\n// excludes popup like component which is no need in ssr: Modal, message, notification, etc.\nconst css = extractStyle();\n\nfs.writeFile(...);\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Sort Order within Ant Design Sorter Function (JavaScript)\nDESCRIPTION: Illustrates the extended signature for a column's `sorter` function in Ant Design. When a `sortOrder` or `defaultSortOrder` is active (set to 'ascend' or 'descend'), the function can accept a third parameter (`sortOrder`) which holds the value representing the current sorting direction.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(a, b, sortOrder) { ... }\n```\n\n----------------------------------------\n\nTITLE: Extracting Props Type with GetProps Utility - TypeScript\nDESCRIPTION: Illustrates how to extract the props type of a sub-component (such as Checkbox.Group) using Ant Design's GetProps utility type. This snippet uses TypeScript's typeof operator in conjunction with GetProps to determine the prop types. Dependencies include Ant Design's Checkbox and GetProps. Input is a component reference, and output is its props type. This is purely for compile-time type checking.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Checkbox, GetProps } from 'antd';\n\ntype CheckboxGroupType = GetProps<typeof Checkbox.Group>;\n```\n\n----------------------------------------\n\nTITLE: Defining Common Properties in Ant Design Components\nDESCRIPTION: Markdown table defining common properties available across Ant Design components. Currently documents the rootClassName property which allows adding a custom className to the root element of components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/common-props.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property      | Description                   | Type   | Default |\n| ------------- | ----------------------------- | ------ | ------- |\n| rootClassName | ClassName on the root element | string | -       |\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack less-loader for Ant Design v5 Theme Variables\nDESCRIPTION: Demonstrates how to configure Webpack's `less-loader` to inject Ant Design theme variables when Less is still used in a project migrating to v5. It uses helper functions from `antd` and `@ant-design/compatible` to convert v5 design tokens into legacy Less variables (`v5Vars`) and passes them to `less-loader` via the `modifyVars` option. An example for v4 variables (`v4Vars`) is also shown.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { theme } = require('antd/lib');\nconst { convertLegacyToken, defaultTheme } = require('@ant-design/compatible/lib');\n\nconst { defaultAlgorithm, defaultSeed } = theme;\n\nconst mapV5Token = defaultAlgorithm(defaultSeed);\nconst v5Vars = convertLegacyToken(mapV5Token);\nconst mapV4Token = theme.getDesignToken(defaultTheme);\nconst v4Vars = convertLegacyToken(mapV4Token);\n\n// Webpack Config\nmodule.exports = {\n  // ... other config\n  loader: 'less-loader',\n  options: {\n    lessOptions: {\n      modifyVars: v5Vars, // or v4Vars\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Ref Type with GetRef and Using forwardRef - React (TSX)\nDESCRIPTION: Exemplifies how to use Ant Design's GetRef utility in conjunction with React's forwardRef to extract the ref type from both a library component and a custom component. This snippet imports GetRef and Select from antd, uses TypeScript to extract the ref type, and shows usage with a custom div element via forwardRef. Inputs are component references; outputs are either library (BaseSelectRef) or intrinsic ref type (HTMLDivElement). Dependencies are React and Ant Design; implementation is for typing assistance only.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { forwardRef } from 'react';\nimport type { GetRef, Select } from 'antd';\n\ntype SelectRefType = GetRef<typeof Select>; // BaseSelectRef\n\nconst Div = forwardRef<HTMLDivElement>((_, ref) => <div ref={ref} />);\ntype DomRefType = GetRef<typeof Div>; // HTMLDivElement\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentsConfig Structure in Markdown\nDESCRIPTION: This snippet defines the structure of ComponentsConfig in a markdown table format. It explains the properties, their types, and default values for configuring Ant Design components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| `Component` (可以是任意 antd 组件名，如 `Button`) | 用于修改 Component Token 以及覆盖该组件消费的 Alias Token | `ComponentToken & AliasToken & { algorithm: boolean \\| (token: SeedToken) => MapToken` \\| `((token: SeedToken) => MapToken)[]}` | - |\n```\n\n----------------------------------------\n\nTITLE: Using Ant Design components in React\nDESCRIPTION: This code snippet shows a basic example of how to use Ant Design components (Button and DatePicker) in a React application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, DatePicker } from 'antd';\n\nexport default () => (\n  <>\n    <Button type=\"primary\">PRESS ME</Button>\n    <DatePicker placeholder=\"select date\" />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy with ConfigProvider (TypeScript/TSX)\nDESCRIPTION: This example configures the 'csp' prop of ConfigProvider for scenarios where the Content Security Policy is enforced. 'csp' accepts an object with 'nonce', controlling the CSP nonce for dynamic styles. Inputs are the 'csp' prop and nested children, such as <Button> components. The dependencies are React and Ant Design; outputs are child components rendered in a secure context.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<ConfigProvider csp={{ nonce: 'YourNonceCode' }}>\\n  <Button>My Button</Button>\\n</ConfigProvider>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Space Size\nDESCRIPTION: Demonstration of setting different sizes for the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/size.tsx\">间距大小</code>\n```\n\n----------------------------------------\n\nTITLE: Binding Checkbox or Switch in Form.Item\nDESCRIPTION: Demonstrates how to bind a Switch or Checkbox component in a Form.Item using the valuePropName prop. This is necessary because these components use 'checked' instead of 'value' for their state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Switch />\n</Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Using Modal.useModal() with Context in React\nDESCRIPTION: Demonstrates how to use Modal.useModal() hook to create a modal with context. The contextHolder is inserted into the component tree to ensure proper context inheritance.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [modal, contextHolder] = Modal.useModal();\n\nReact.useEffect(() => {\n  modal.confirm({\n    // ...\n  });\n}, []);\n\nreturn <div>{contextHolder}</div>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree with Async Loading in React JSX\nDESCRIPTION: Example demonstrating how to render a Tree component with asynchronously loaded data. This pattern is recommended when loading tree nodes dynamically to avoid performance issues.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  this.state.treeData.length ? (\n    <Tree>\n      {this.state.treeData.map((data) => (\n        <TreeNode />\n      ))}\n    </Tree>\n  ) : (\n    'loading tree'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Wave Effect with ConfigProvider in Ant Design (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to configure the global click wave effect for all child components in an Ant Design application by supplying a custom 'showEffect' function to the 'wave' property of the ConfigProvider. The 'showEffect' callback is invoked with the target DOM node, component type, and theme token, which enables context-aware custom animation. Prerequisites: ConfigProvider from Ant Design v5 or later. Inputs include the React child tree and a custom effect function; output is the themed component tree with custom wave effects.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<ConfigProvider wave={{ showEffect }}>\n  <Button />\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Extracting Static Styles for Hybrid Themes in TSX\nDESCRIPTION: Shows how to use `@ant-design/static-style-extract` to generate a single CSS file containing styles for multiple Ant Design themes (hybrid themes). It involves passing a function to `extractStyle` that wraps the component set (`node`) with `ConfigProvider` for each required theme.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// `node` is the components set we prepared\nconst css = extractStyle((node) => (\n  <>\n    <ConfigProvider theme={theme1}>{node}</ConfigProvider>\n    <ConfigProvider theme={theme2}>{node}</ConfigProvider>\n    <ConfigProvider theme={theme3}>{node}</ConfigProvider>\n  </>\n));\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing Static Style Extraction by Rendering All Components in TypeScript\nDESCRIPTION: Outlines the conceptual basis for static style extraction. This approach involves rendering all necessary Ant Design components (Button, Switch, Input, etc.) within a `StyleProvider` context during a build or server setup phase. This populates the cache with styles for all components, allowing `extractStyle` to retrieve the complete CSS, which can then be saved to a static file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst cache = createCache();\n\n// HTML Content\nrenderToString(\n  <StyleProvider cache={cache}>\n    <Button />\n    <Switch />\n    <Input />\n    {/* Rest antd components */}\n  </StyleProvider>,\n);\n\n// Style Content\nconst styleText = extractStyle(cache);\n```\n\n----------------------------------------\n\nTITLE: Observing React Child Node Differences Between Versions with TSX\nDESCRIPTION: This TSX code defines a simple React functional component. It uses `useRef` to get a reference to the div element and `useEffect` to log its `childNodes` after the component mounts. The purpose is to experimentally compare the `childNodes` list generated by React 17 versus React 18, demonstrating that React 18 omits empty text nodes that React 17 includes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useRef, version } from 'react';\n\nconst App: React.FC = () => {\n  const holderRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    console.log(holderRef.current?.childNodes);\n  }, []);\n  return (\n    <div ref={holderRef}>\n      <p>{version}</p>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Dialog Width in Ant Design\nDESCRIPTION: This snippet provides instructions in both Chinese and English on how to use the 'width' property to customize the width of modal dialogs in Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/width.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n使用 `width` 来设置模态对话框的宽度。\n\n## en-US\n\nUse `width` to set the width of the modal dialog.\n```\n\n----------------------------------------\n\nTITLE: Customizing Component-Specific Tokens in Ant Design React\nDESCRIPTION: This snippet illustrates how to customize component-specific tokens in Ant Design. It shows how to enable the algorithm for Button and Input components and override their primary colors independently.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider, Button, Space, Input, Divider } from 'antd';\n\nconst App: React.FC = () => (\n  <>\n    <ConfigProvider\n      theme={{\n        components: {\n          Button: {\n            colorPrimary: '#00b96b',\n            algorithm: true, // Enable algorithm\n          },\n          Input: {\n            colorPrimary: '#eb2f96',\n            algorithm: true, // Enable algorithm\n          }\n        },\n      }}\n    >\n      <Space>\n        <div style={{ fontSize: 14 }}>Enable algorithm: </div>\n        <Input placeholder=\"Please Input\" />\n        <Button type=\"primary\">Submit</Button>\n      </Space>\n    </ConfigProvider>\n    <Divider />\n    <ConfigProvider\n      theme={{\n        components: {\n          Button: {\n            colorPrimary: '#00b96b',\n          },\n          Input: {\n            colorPrimary: '#eb2f96',\n          }\n        },\n      }}\n    >\n      <Space>\n        <div style={{ fontSize: 14 }}>Disable algorithm: </div>\n        <Input placeholder=\"Please Input\" />\n        <Button type=\"primary\">Submit</Button>\n      </Space>\n    </ConfigProvider>\n  </>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Card Usage in JSX\nDESCRIPTION: Demonstrates the basic implementation of a Card component with a title and content.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/card/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card title=\"Card title\">Card content</Card>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Style Conflicts with ConfigProvider prefixCls for Ant Design v5 (TypeScript)\nDESCRIPTION: This React TypeScript snippet demonstrates configuring the prefixCls property in Ant Design v5's ConfigProvider to isolate its CSS classes. By setting prefixCls=\\\"ant5\\\", it prevents style conflicts between v4 and v5 components rendered on the same page. Dependencies include React and antd-v5, and the main input is the custom prefixCls value. The output is namespaced class names for v5 components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider as ConfigProvider5 } from 'antd-v5';\n\nexport default () => (\n  <ConfigProvider5 prefixCls=\"ant5\">\n    <MyApp />\n  </ConfigProvider5>\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Inter-Form Communication with Form.Provider (JSX)\nDESCRIPTION: This snippet demonstrates using `Form.Provider` to enable communication between multiple Form components. It captures the `onFormFinish` event, allowing actions to be performed when a specific named form (e.g., 'form1') within the provider's scope is submitted.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Provider\n  onFormFinish={(name) => {\n    if (name === 'form1') {\n      // Do something...\n    }\n  }}\n>\n  <Form name=\"form1\">...</Form>\n  <Form name=\"form2\">...</Form>\n</Form.Provider>\n```\n\n----------------------------------------\n\nTITLE: Getting Single Prop Type using GetProp\nDESCRIPTION: Demonstrates how to extract a specific prop type from an Ant Design component using the GetProp utility. This utility includes NonNullable handling and can work with both direct component references and prop interfaces.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Select } from 'antd';\nimport type { GetProp, SelectProps } from 'antd';\n\n// Both of these can work\ntype SelectOptionType1 = GetProp<SelectProps, 'options'>[number];\ntype SelectOptionType2 = GetProp<typeof Select, 'options'>[number];\n```\n\n----------------------------------------\n\nTITLE: Using Form.Item.useStatus Hook for Custom Form Controls\nDESCRIPTION: Example showing how to access validation status and error messages of a Form.Item within a custom form control using Form.Item.useStatus hook.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomInput = ({ value, onChange }) => {\n  const { status, errors } = Form.Item.useStatus();\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      className={`custom-input-${status}`}\n      placeholder={(errors.length && errors[0]) || ''}\n    />\n  );\n};\n\nexport default () => (\n  <Form>\n    <Form.Item name=\"username\">\n      <CustomInput />\n    </Form.Item>\n  </Form>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Moment-based DatePicker with generatePicker in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom DatePicker component in TypeScript using Ant Design's `DatePicker.generatePicker` utility. It utilizes `momentGenerateConfig` from `rc-picker` to configure the picker for use with the Moment.js library, specifying `Moment` as the date type.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DatePicker } from 'antd';\nimport type { Moment } from 'moment';\nimport momentGenerateConfig from 'rc-picker/lib/generate/moment';\n\nconst MyDatePicker = DatePicker.generatePicker<Moment>(momentGenerateConfig);\n\nexport default MyDatePicker;\n```\n\n----------------------------------------\n\nTITLE: Disabling Tab Closing in Ant Design Tabs (JSX)\nDESCRIPTION: This JSX prop usage demonstrates how to disable the closing functionality for a Tab pane within the Ant Design Tabs component, specifically when using the card style. Setting the `closable` prop to `false` prevents the user from closing that tab. This requires the Ant Design library and React.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/demo/editable-card.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclosable={false}\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker with Locale Support in React (JSX)\nDESCRIPTION: This snippet demonstrates how to configure Ant Design's DatePicker component to use a non-default locale (zh_CN). It imports the required locale settings from 'antd/locale/zh_CN' and sets up date formatting and localization with 'dayjs', including setting dayjs locale and importing the proper dayjs locale file. The DatePicker is wrapped with ConfigProvider to apply the locale globally. Key parameters include 'locale' in ConfigProvider and 'defaultValue' for DatePicker, which is initialized with a 'dayjs' instance. Output is a localized date picker; ensure that dependencies 'antd', 'dayjs', and their locale modules are installed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n// Make sure you import the relevant dayjs file as well, otherwise the locale won't change for all texts (e.g. range picker months)\nimport locale from 'antd/locale/zh_CN';\nimport dayjs from 'dayjs';\n\nimport 'dayjs/locale/zh-cn';\n\ndayjs.locale('zh-cn');\n\n<ConfigProvider locale={locale}>\n  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />\n</ConfigProvider>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Fields with Form.List (TSX)\nDESCRIPTION: This snippet shows the basic usage of `Form.List` to manage an array of form fields dynamically. It uses a render prop function that receives the current `fields` array and allows mapping over it to render a `Form.Item` and an `Input` for each field entry. The `{...field}` spread includes necessary props like `key`, `name`, and `fieldKey` for each item.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Form.List>\n  {(fields) =>\n    fields.map((field) => (\n      <Form.Item {...field}>\n        <Input />\n      </Form.Item>\n    ))\n  }\n</Form.List>\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using the Aggregate Form Item Component (TSX)\nDESCRIPTION: Provides the complete implementation of the `Aggregate` component, which wraps `Form.Item` to handle multiple `names`. It uses `getValueProps` to aggregate values for the child component, `getValueFromEvent` to split and set values back into the FormStore, and applies `transform` to rules for correct validation. The example demonstrates its usage with both `Cascader` and `DatePicker.RangePicker` within an Ant Design Form, simplifying the handling of combined fields like address or date ranges. Dependencies include `react`, `antd`, and `dayjs`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * defaultShowCode: true\n */\nimport React from 'react';\nimport type { FormItemProps } from 'antd';\nimport { Button, Cascader, DatePicker, Form as OriginForm } from 'antd';\nimport dayjs from 'dayjs';\n\ninterface AggregateProps<V = any> extends FormItemProps<V> {\n  names?: FormItemProps<V>['name'][];\n}\n\nconst Aggregate = (props: AggregateProps) => {\n  const form = OriginForm.useFormInstance();\n\n  const { names = [], rules = [], ...rest } = props;\n  const [firstName, ...resetNames] = names;\n\n  return (\n    <>\n      <OriginForm.Item\n        name={firstName}\n        // Convert the values of names into an array passed to children\n        getValueProps={() => {\n          const value = names.map((name) => form.getFieldValue(name));\n          if (value.every((v) => v === undefined)) {\n            return undefined;\n          }\n          return { value };\n        }}\n        getValueFromEvent={(values) => {\n          // Set the form store values for names\n          const fieldData = names.map((name, index) => ({ name, value: values?.[index] }));\n          form.setFields(fieldData);\n          return values?.[0];\n        }}\n        rules={rules.map((rule) => {\n          if (typeof rule === 'object' && rule) {\n            return {\n              ...rule,\n              transform: () => {\n                // Set the values of the names fields for the rule value\n                const values = names.map((name) => form.getFieldValue(name));\n                return values;\n              },\n            };\n          }\n          return rule;\n        })}\n        {...rest}\n      />\n      {/*  Bind other fields so they can getFieldValue to get values and setFields to set values */}\n      {resetNames.map((name) => (\n        <OriginForm.Item key={name?.toString()} name={name} noStyle />\n      ))}\n    </>\n  );\n};\n\nconst data = {\n  province: 'Beijing',\n  city: 'Haidian',\n  startTime: dayjs(),\n  endTime: dayjs().add(1, 'month'),\n};\n\nconst options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [{ value: 'hangzhou', label: 'Hangzhou' }],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [{ value: 'nanjing', label: 'Nanjing' }],\n  },\n];\n\nconst Form = Object.assign(OriginForm, { Aggregate });\n\nexport default () => (\n  <Form initialValues={data} onFinish={(value) => console.log(value)}>\n    <Form.Aggregate label=\"Address\" names={['province', 'city']} rules={[{ required: true }]}>\n      <Cascader options={options} placeholder=\"Please select\" />\n    </Form.Aggregate>\n\n    <Form.Item label=\"Address (use Default)\" name=\"defaultAddress\">\n      <Cascader options={options} placeholder=\"Please select\" />\n    </Form.Item>\n\n    {/* Similarly, it also applies <DatePicker.RangePicker /> */}\n    <Form.Aggregate label=\"Date\" names={['startTime', 'endTime']}>\n      <DatePicker.RangePicker />\n    </Form.Aggregate>\n\n    <Form.Item>\n      <Button htmlType=\"submit\" type=\"primary\">\n        Submit\n      </Button>\n    </Form.Item>\n  </Form>\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Ant Design Typography.Link with React Router in TSX\nDESCRIPTION: Demonstrates how to use Ant Design's `Typography.Link` component as the rendering component for `react-router-dom`'s `Link`. This allows leveraging React Router's navigation capabilities while maintaining Ant Design's link styling and features. The example shows passing `Typography.Link` to the `component` prop of `Link`. A note clarifies potential differences in execution logic compared to the standard `Link`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/\" component={Typography.Link} />\n```\n\n----------------------------------------\n\nTITLE: Optimized Context with useMemo\nDESCRIPTION: Shows how to optimize context value creation using useMemo to prevent unnecessary child re-renders.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst context = React.useMemo(() => ({ prop1, prop2 }), [prop1, prop2]);\n\nreturn (\n  <MyContext.Provider value={context}>\n    <Child />\n  </MyContext.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Column Offset Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file showing how to use the 'offset' prop on the Col component to shift columns to the right within an Ant Design grid layout. The actual code implementing this example resides in the './demo/offset.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/offset.tsx\">Column offset</code>\n```\n\n----------------------------------------\n\nTITLE: Using Notification Hooks with React Context\nDESCRIPTION: This example demonstrates how to use the useNotification hook to access context information like ConfigProvider settings. It creates an API instance and contextHolder node to connect with parent contexts.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [api, contextHolder] = notification.useNotification();\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder is inside Context1 which means api will get value of Context1 */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Form.List Component in TSX\nDESCRIPTION: Example of using Form.List to manage an array of form fields, demonstrating the render function with fields and operations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Form.List>\n  {(fields) => (\n    <div>\n      {fields.map((field) => (\n        <Form.Item {...field}>\n          <Input />\n        </Form.Item>\n      ))}\n    </div>\n  )}\n</Form.List>\n```\n\n----------------------------------------\n\nTITLE: Globally Setting Two-Tone Icon Color in React (JSX)\nDESCRIPTION: Demonstrates how to globally set and retrieve the primary color for all two-tone icons using the `setTwoToneColor` and `getTwoToneColor` functions provided by `@ant-design/icons`. This avoids setting the color individually on each icon.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\n\nsetTwoToneColor('#eb2f96');\ngetTwoToneColor(); // #eb2f96\n```\n\n----------------------------------------\n\nTITLE: Deriving Property Type with GetProp Utility - TypeScript\nDESCRIPTION: Shows how to use Ant Design's GetProp utility type to extract the type of a specific property (like 'options') from either component props or a component itself. The example demonstrates two ways to derive the property type for a Select component's options, both using GetProp and array indexing. Dependencies are Ant Design's GetProp, Select, and SelectProps. Outputs the type of a single option; inputs are either the full props type or the component reference.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetProp, Select, SelectProps } from 'antd';\n\n// Both of this can work\ntype SelectOptionType1 = GetProp<SelectProps, 'options'>[number];\ntype SelectOptionType2 = GetProp<typeof Select, 'options'>[number];\n```\n\n----------------------------------------\n\nTITLE: Theme Switching CSS Variables\nDESCRIPTION: CSS implementation for theme switching using light and dark mode classes as selectors\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/css-var-plan.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Using custom classes as selectors */\n.light .css-hash {\n  --color-text: rgba(0, 0, 0, 0.85);\n}\n\n.dark .css-hash {\n  --color-text: rgba(255, 255, 255, 0.88);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for Ant Design Typography in Next.js\nDESCRIPTION: This code demonstrates how to create a wrapper component for Ant Design Typography to avoid issues with Next.js App Router.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport React from 'react';\nimport { Typography as OriginTypography } from 'antd';\nimport type { LinkProps } from 'antd/es/typography/Link';\nimport type { ParagraphProps } from 'antd/es/typography/Paragraph';\nimport type { TextProps } from 'antd/es/typography/Text';\nimport type { TitleProps } from 'antd/es/typography/Title';\n\nconst Title = React.forwardRef<HTMLElement, TitleProps & React.RefAttributes<HTMLElement>>(\n  (props, ref) => <OriginTypography.Title ref={ref} {...props} />,\n);\n\nconst Paragraph = React.forwardRef<HTMLElement, ParagraphProps & React.RefAttributes<HTMLElement>>(\n  (props, ref) => <OriginTypography.Paragraph ref={ref} {...props} />,\n);\n\nconst Link = React.forwardRef<HTMLElement, LinkProps & React.RefAttributes<HTMLElement>>(\n  (props, ref) => <OriginTypography.Link ref={ref} {...props} />,\n);\n\nconst Text = React.forwardRef<HTMLElement, TextProps & React.RefAttributes<HTMLElement>>(\n  (props, ref) => <OriginTypography.Text ref={ref} {...props} />,\n);\n\nexport { Title, Link, Text, Paragraph };\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal with Loading State in React using Ant Design\nDESCRIPTION: This example demonstrates how to use the Modal component with loading state functionality. It uses the 'confirmLoading' prop to show a loading indicator on the confirm button while an asynchronous operation is in progress.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/loading.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Modal } from 'antd';\n\nconst App: React.FC = () => {\n  const [open, setOpen] = useState(false);\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const [modalText, setModalText] = useState('Content of the modal');\n\n  const showModal = () => {\n    setOpen(true);\n  };\n\n  const handleOk = () => {\n    setModalText('The modal will be closed after two seconds');\n    setConfirmLoading(true);\n    setTimeout(() => {\n      setOpen(false);\n      setConfirmLoading(false);\n    }, 2000);\n  };\n\n  const handleCancel = () => {\n    console.log('Clicked cancel button');\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={showModal}>\n        Open Modal with async logic\n      </Button>\n      <Modal\n        title=\"Title\"\n        open={open}\n        onOk={handleOk}\n        confirmLoading={confirmLoading}\n        onCancel={handleCancel}\n      >\n        <p>{modalText}</p>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Arrow in Ant Design (JSX)\nDESCRIPTION: This snippet shows how to set the `arrow` property on a Tooltip component to make the arrow point at the center of the target element. The `pointAtCenter` option is set to true within the arrow object.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/arrow-point-at-center.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\narrow={{ pointAtCenter: true }}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Ant Design Icons in React (JSX)\nDESCRIPTION: Shows how to import and use different themed icons (Outlined, Filled, TwoTone) from the `@ant-design/icons` package in a React component. It also demonstrates setting the primary color for a two-tone icon using the `twoToneColor` prop.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons';\n\n<StarOutlined />\n<StarFilled />\n<StarTwoTone twoToneColor=\"#eb2f96\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design v5 using npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install and save Ant Design version 5.x as a project dependency. It updates the `antd` package entry in `package.json` and downloads the necessary library files.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save antd@5.x\n```\n\n----------------------------------------\n\nTITLE: Extracting Ant Design Select Option Type with GetProp\nDESCRIPTION: This snippet illustrates how to use the `GetProp` utility type to extract the type of a specific prop's elements, specifically the options for a Select component. It shows that `GetProp` can accept either the component's props type (`SelectProps`) or the component type itself (`typeof Select`) as the first argument. The `[number]` index is used to get the type of a single option from the array type returned by `GetProp`. `GetProp` handles nullability internally.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport type { GetProp, Select, SelectProps } from 'antd';\n\n// Both of this can work\ntype SelectOptionType1 = GetProp<SelectProps, 'options'>[number];\ntype SelectOptionType2 = GetProp<typeof Select, 'options'>[number];\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Button Click Wave Effect via ConfigProvider (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to disable the default click wave animation effect for Ant Design buttons. It wraps the `Button` component within a `ConfigProvider` and sets the `wave.disabled` property to `true`. This configuration applies to the enclosed button and potentially other descendant components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigProvider wave={{ disabled: true }}>\n  <Button>click</Button>\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file showing how to create responsive layouts using breakpoint-specific props (xs, sm, md, lg, xl, xxl) on Col components in the Ant Design grid system. The actual code implementing this example resides in the './demo/responsive.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/responsive.tsx\">Responsive</code>\n```\n\n----------------------------------------\n\nTITLE: Customizing Ant Design Theme with ConfigProvider\nDESCRIPTION: Example of how to customize the Ant Design theme using ConfigProvider. This snippet shows how to change the primary color of the theme.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\n\nconst App: React.FC = () => (\n  <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>\n    <MyApp />\n  </ConfigProvider>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Hook-based Message Implementation\nDESCRIPTION: Shows the new hooks-based approach for displaying messages, which properly handles context and configuration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const info = () => {\n    messageApi.info('Hello, Ant Design!');\n  };\n\n  return (\n    <>\n      {/* Different insert holder position will get different context */}\n      {contextHolder}\n      <Button type=\"primary\" onClick={info}>\n        Display normal message\n      </Button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Moment-based Calendar with generateCalendar in TypeScript\nDESCRIPTION: This snippet illustrates creating a custom Calendar component in TypeScript using Ant Design's `Calendar.generateCalendar` utility. Similar to the DatePicker example, it uses `momentGenerateConfig` to ensure the Calendar component works with the Moment.js library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Calendar } from 'antd';\nimport type { Moment } from 'moment';\nimport momentGenerateConfig from 'rc-picker/es/generate/moment';\n\nconst MyCalendar = Calendar.generateCalendar<Moment>(momentGenerateConfig);\n\nexport default MyCalendar;\n```\n\n----------------------------------------\n\nTITLE: Proper Code Formatting Example in React TSX\nDESCRIPTION: Example showing properly formatted React/TypeScript code with correct spacing and structure\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Menu } from 'antd';\n\nconst Demo: React.FC = () => {\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n\n  const toggle = () => setCollapsed(!collapsed);\n\n  return <Menu>...</Menu>;\n};\n\nexport default Demo;\n```\n\n----------------------------------------\n\nTITLE: Forcing Tooltip Content Refresh on Close - React JSX - JavaScript\nDESCRIPTION: Shows how to force Ant Design Tooltip to update its content immediately when closed, avoiding cached output, by setting the 'fresh' property. Used to solve scenarios where updated tooltip content should be immediately reflected even if tooltip is hidden. Requires React and Ant Design Tooltip. Inputs are a user object and boolean open state; outputs a Tooltip that does not cache content when closed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip open={user} title={user?.name} fresh />\n```\n\n----------------------------------------\n\nTITLE: Creating date-fns-based DatePicker with generatePicker in TypeScript\nDESCRIPTION: This snippet shows how to create a custom DatePicker component compatible with the `date-fns` library. It uses Ant Design's `DatePicker.generatePicker` along with `dateFnsGenerateConfig` from `rc-picker`, specifying the native `Date` object as the date type.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DatePicker } from 'antd';\nimport dateFnsGenerateConfig from 'rc-picker/lib/generate/dateFns';\n\nconst MyDatePicker = DatePicker.generatePicker<Date>(dateFnsGenerateConfig);\n\nexport default MyDatePicker;\n```\n\n----------------------------------------\n\nTITLE: Alert Component API Properties\nDESCRIPTION: Table describing the API properties available for the Alert component, including action, afterClose, banner, closable, description, icon, message, showIcon, type, and onClose properties.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| action | The action of Alert | ReactNode | - | 4.9.0 |\n| afterClose | Called when close animation is finished | () => void | - |  |\n| banner | Whether to show as banner | boolean | false |  |\n| closable | The config of closable, >=5.15.0: support `aria-*` | boolean \\| ({ closeIcon?: React.ReactNode } & React.AriaAttributes) | `false` |  |\n| description | Additional content of Alert | ReactNode | - |  |\n| icon | Custom icon, effective when `showIcon` is true | ReactNode | - |  |\n| message | Content of Alert | ReactNode | - |  |\n| showIcon | Whether to show icon | boolean | false, in `banner` mode default is true |  |\n| type | Type of Alert styles, options: `success`, `info`, `warning`, `error` | string | `info`, in `banner` mode default is `warning` |  |\n| onClose | Callback when Alert is closed | (e: MouseEvent) => void | - |  |\n```\n\n----------------------------------------\n\nTITLE: Styling Icon Wrapper for Slider in CSS\nDESCRIPTION: This CSS snippet defines styles for positioning icons beside a slider. It sets up a wrapper with padding and positions icons absolutely on either end. The styles also include color changes for active state and ensure proper alignment for right-to-left languages.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/icon-slider.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-wrapper {\n  position: relative;\n  padding: 0 30px;\n}\n\n.icon-wrapper .anticon {\n  position: absolute;\n  top: -2px;\n  width: 16px;\n  height: 16px;\n  color: rgba(0, 0, 0, 0.25);\n  font-size: 16px;\n  line-height: 1;\n}\n\n.icon-wrapper .icon-wrapper-active {\n  color: rgba(0, 0, 0, 0.45);\n}\n\n.icon-wrapper .anticon:first-child {\n  inset-inline-start: 0;\n}\n\n.icon-wrapper .anticon:last-child {\n  inset-inline-end: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component ClassNames via ConfigProvider (TSX)\nDESCRIPTION: This snippet demonstrates how to use Ant Design's ConfigProvider to apply custom CSS class names to specific components (Button, Checkbox, Divider) globally within its scope. This allows for targeted styling beyond the limitations of Design Tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider\n  button={{ className: 'my-button' }}\n  checkbox={{ className: 'my-checkbox' }}\n  divider={{ className: 'my-divider' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Menu Group Item in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a group item in the Menu component using TypeScript. It specifies the type as 'group' and includes properties for the label and children items.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupItem = {\n  type: 'group', // Must have\n  label: 'My Group',\n  children: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Resizable Columns for Ant Design Table with react-resizable (CSS)\nDESCRIPTION: This CSS snippet provides styles for integrating column resizing functionality using react-resizable in Ant Design tables. It targets the primary resizable column container and the resizing handle to ensure proper positioning (using relative and absolute positioning), cursor display (col-resize), and interaction layering (z-index 1). Dependencies include the Ant Design table component and installation of react-resizable. The main parameters are the CSS selectors for the table demo and handle elements. The expected effect is visually styled, interactable resize handles on columns. This CSS should be included alongside the JavaScript logic that applies react-resizable to table columns.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/resizable-column.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#table-demo-resizable-column .react-resizable {\n  position: relative;\n  background-clip: padding-box;\n}\n\n#table-demo-resizable-column .react-resizable-handle {\n  position: absolute;\n  inset-inline-end: -5px;\n  bottom: 0;\n  z-index: 1;\n  width: 10px;\n  height: 100%;\n  cursor: col-resize;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing disabledTime in Ant Design DatePicker for Working Hours (9-5)\nDESCRIPTION: This TSX function `disabledTime` is intended for the `disabledTime` prop of an Ant Design DatePicker, complementing the weekend disabling from `disabledDate`. It returns an object specifying disabled hours. The `disabledHours` function generates an array of numbers from 0 to 23 and filters it to keep only hours outside the 9 AM (inclusive) to 5 PM (exclusive) range, effectively disabling time selection outside standard working hours.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst disabledTime = () => ({\n  disabledHours: () => {\n    return Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour < 9 || hour > 17);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Presenting Flex Layout Basic Usage - Ant Design - TypeScript/TSX\nDESCRIPTION: This snippet references the \"basic.tsx\" file containing a sample demonstrating the basic usage of the Flex component in Ant Design. It likely showcases default alignment and arrangement for elements inside a Flex container. It depends on React, Ant Design v5.10.0+ Flex component, and TSX syntax. Inputs typically include Flex properties via props; outputs are rendered component layouts. Limitations depend on those of the Flex and its documented API.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/basic.tsx\\\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Defining Ant Design Descriptions Items (TSX)\nDESCRIPTION: Illustrates two methods for populating the Ant Design `Descriptions` component. The first method (recommended for v5.8.0+) uses the `items` prop with an array of objects, each defining a `key`, `label`, and `children`. The second (deprecated for v5.8.0+) method uses nested `<Descriptions.Item>` components directly within the `<Descriptions>` tag. Both examples render a 'User Info' description list. Requires React and Ant Design library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/descriptions/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// works when >= 5.8.0, recommended ✅\n\nconst items: DescriptionsProps['items'] = [\n  {\n    key: '1',\n    label: 'UserName',\n    children: <p>Zhou Maomao</p>,\n  },\n  {\n    key: '2',\n    label: 'Telephone',\n    children: <p>1810000000</p>,\n  },\n  {\n    key: '3',\n    label: 'Live',\n    children: <p>Hangzhou, Zhejiang</p>,\n  },\n  {\n    key: '4',\n    label: 'Remark',\n    children: <p>empty</p>,\n  },\n  {\n    key: '5',\n    label: 'Address',\n    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,\n  },\n];\n\n<Descriptions title=\"User Info\" items={items} />;\n\n// works when <5.8.0 , deprecated when >=5.8.0 🙅🏻‍♀️\n\n<Descriptions title=\"User Info\">\n  <Descriptions.Item label=\"UserName\">Zhou Maomao</Descriptions.Item>\n  <Descriptions.Item label=\"Telephone\">1810000000</Descriptions.Item>\n  <Descriptions.Item label=\"Live\">Hangzhou, Zhejiang</Descriptions.Item>\n  <Descriptions.Item label=\"Remark\">empty</Descriptions.Item>\n  <Descriptions.Item label=\"Address\">\n    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n  </Descriptions.Item>\n</Descriptions>;\n```\n\n----------------------------------------\n\nTITLE: Configuring ConfigProvider for Message/Modal/Notification in TypeScript\nDESCRIPTION: Example of using the new ConfigProvider.config method to set up holderRender for message, modal, and notification static methods.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nConfigProvider.config({\n  holderRender: (children) => (\n    <ConfigProvider prefixCls=\"custom\">{children}</ConfigProvider>\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Sort Directions Cycle in Ant Design Table (JavaScript)\nDESCRIPTION: Provides an example value for the `sortDirections` property to customize the sorting cycle. This specific configuration cycles through ascending, descending, and back to ascending order, effectively preventing the column from returning to its default unsorted state upon subsequent clicks.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n['ascend', 'descend', 'ascend']\n```\n\n----------------------------------------\n\nTITLE: Globally Configuring Form Validation Messages via ConfigProvider (JSX)\nDESCRIPTION: This JSX snippet illustrates how to set custom validation message templates globally for all Ant Design Form components using `ConfigProvider`. A `validateMessages` object containing the custom templates is passed to the `form` prop of the `ConfigProvider` (specifically `form={{ validateMessages }}`). Any `Form` component rendered within this provider's scope will inherit these custom validation messages, providing a consistent validation feedback experience across the application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst validateMessages = {\n  required: \"'${name}' is Required!\",\n  // ...\n};\n\n<ConfigProvider form={{ validateMessages }}>\n  <Form />\n</ConfigProvider>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Validation Messages in Ant Design Form (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to provide custom validation error message templates to an Ant Design `Form` component directly. It defines a `validateMessages` object where keys represent validation rule types (like 'required') and values are template strings using placeholders like `${name}`. This object is then passed to the `Form` component using the `validateMessages` prop to override the default messages.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst validateMessages = {\n  required: \"'${name}' is required!\",\n  // ...\n};\n\n<Form validateMessages={validateMessages} />;\n```\n\n----------------------------------------\n\nTITLE: Context Loss with Static Methods in React\nDESCRIPTION: Demonstrates how static methods fail to access React context values, instead defaulting to initial values regardless of Provider settings.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst Context = React.createContext('default');\n\nconst MyContent = () => React.useContext(Context);\n\nconst Wrapper = () => {\n  React.useEffect(() => {\n    // Static function is out of context.\n    // We can only get `default` instead of `Hello World`.\n    message.success(<MyContent />);\n  }, []);\n\n  return null;\n};\n\nconst Demo = () => (\n  <Context.Provider value=\"Hello World\">\n    <Wrapper />\n  </Context.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Collecting Styles for SSR using TSX\nDESCRIPTION: Shows the standard approach for collecting CSS-in-JS styles during server-side rendering using `@ant-design/cssinjs`. The application is wrapped in `StyleProvider` with a `cache`, rendered to string, and then styles are extracted from the cache. This avoids inline duplication but requires manual handling.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\nimport { renderToString } from 'react-dom/server';\n\nconst cache = createCache();\n\n// HTML Content\nconst html = renderToString(\n  <StyleProvider cache={cache}>\n    <MyApp />\n  </StyleProvider>,\n);\n\n// Style Content\nconst styleText = extractStyle(cache);\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Status Example (TSX)\nDESCRIPTION: References `./demo/status.tsx`, demonstrating how to set validation statuses (`error`, `warning`) on the Ant Design InputNumber component using the `status` prop in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/status.tsx\">Status</code>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Ant Design Empty Component in JSX\nDESCRIPTION: This snippet demonstrates the basic implementation of the Ant Design `Empty` component in a React application using JSX. It shows how to render the component and optionally include child elements, like a `Button`, to provide user actions within the empty state placeholder. Requires React and the Ant Design library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/empty/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Empty>\n  <Button>Create</Button>\n</Empty>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Redundant Inline Style Injection in HTML\nDESCRIPTION: Illustrates a major drawback of simple inline style injection where the same component styles (e.g., for Button) are repeated for each instance of the component. This leads to significant HTML bloat, especially when many components are used, making the approach impractical for larger applications.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World 1</button>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World 2</button>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World 3</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Upload File Object Structure in Ant Design Upload (React JSX)\nDESCRIPTION: This snippet shows the shape of the 'file' object passed to the onChange callback, detailing properties such as uid, name, status, response, linkProps, and xhr. This clarifies the available file metadata and upload-state for making logic decisions in event handlers. No dependencies are needed, but values correspond to those managed by Ant Design's internal Upload logic and browser file APIs.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: React JSX\nCODE:\n```\n{\\n   uid: 'uid',      // unique identifier, negative is recommended, to prevent interference with internally generated id\\n   name: 'xx.png',   // file name\\n   status: 'done' | 'uploading' | 'error' | 'removed', // Intercepted file by beforeUpload doesn't have a status field.\\n   response: '{\"status\": \"success\"}', // response from server\\n   linkProps: '{\"download\": \"image\"}', // additional HTML props of file link\\n   xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Map Token in Ant Design Theme (TSX)\nDESCRIPTION: This snippet shows how to directly override a specific Map Token, `colorPrimaryBg`, within the `token` object of the Ant Design theme configuration. Map Tokens are derived from Seed Tokens but can be individually customized for finer-grained theme control. This example sets a specific background color associated with the primary color.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  token: {\n    colorPrimaryBg: '#e6f7ff',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Alert ErrorBoundary API Properties\nDESCRIPTION: Table describing the API properties available for the Alert.ErrorBoundary component, including description and message properties.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property    | Description                      | Type      | Default           | Version |\n| ----------- | -------------------------------- | --------- | ----------------- | ------- |\n| description | Custom error description to show | ReactNode | {{ error stack }} |         |\n| message     | Custom error message to show     | ReactNode | {{ error }}       |         |\n```\n\n----------------------------------------\n\nTITLE: Decoupling Dependencies: ConfigProvider Using Proxy Context in TSX\nDESCRIPTION: This snippet presents the solution to the Tree Shaking problem. Instead of directly using `FormProvider` from `rc-field-form`, the `ConfigProvider` now uses a dedicated proxy context (`ValidateMessageContext`) to pass down the merged validation messages. This removes the direct dependency on `FormProvider` within `ConfigProvider`, allowing `rc-field-form` to be tree-shaken if not used elsewhere.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Sample only. Not real world code.\nimport { ValidateMessageContext } from '../form/context.ts';\n\nconst ConfigProvider = ({ validateMessages, children }) => {\n  const mergedValidateMessages = ...\n\n  return (\n    // Just use the proxy context\n    <ValidateMessageContext value={mergedValidateMessages}>\n      <SomeOtherProvider>{children}</SomeOtherProvider>\n    </ValidateMessageContext>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating contextHolder with Modal.useModal in Ant Design\nDESCRIPTION: This snippet demonstrates how to use Modal.useModal to create a contextHolder that can read context in Ant Design. It emphasizes that only hooks methods support Promise await operations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nModal.useModal()\n```\n\n----------------------------------------\n\nTITLE: Grid Gutter Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file illustrating how to use the 'gutter' prop on the Row component to add spacing between columns in an Ant Design grid. The actual code implementing this example resides in the './demo/gutter.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/gutter.tsx\">Grid Gutter</code>\n```\n\n----------------------------------------\n\nTITLE: Watching Unregistered Form Fields with Form.useWatch and preserve Option (TSX)\nDESCRIPTION: This snippet demonstrates using `Form.useWatch` with the `preserve: true` option. This allows the hook to watch and retrieve the value of a field ('age') even if it's not associated with a registered `Form.Item`. The value is logged to the console, and it updates when `setFieldValue` is called.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const [form] = Form.useForm();\n\n  const age = Form.useWatch('age', { form, preserve: true });\n  console.log(age);\n\n  return (\n    <div>\n      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>\n      <Form form={form}>\n        <Form.Item name=\"name\">\n          <Input />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Ant Design React 19 Compatibility Package\nDESCRIPTION: This code snippet shows how to import the compatibility package for Ant Design v5 to work with React 19. It should be added at the entry point of the application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@ant-design/v5-patch-for-react-19';\n```\n\n----------------------------------------\n\nTITLE: Disabling Motion in Ant Design React Components\nDESCRIPTION: This example demonstrates how to disable motion effects in Ant Design components by setting the 'motion' token to false. It compares the behavior of components with and without motion enabled.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox, Col, ConfigProvider, Flex, Radio, Row, Switch } from 'antd';\n\nconst App: React.FC = () => {\n  const [checked, setChecked] = React.useState<boolean>(false);\n  const timerRef = React.useRef<ReturnType<typeof setInterval>>();\n  React.useEffect(() => {\n    timerRef.current = setInterval(() => {\n      setChecked((prev) => !prev);\n    }, 500);\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  const nodes = (\n    <Flex gap=\"small\">\n      <Checkbox checked={checked}>Checkbox</Checkbox>\n      <Radio checked={checked}>Radio</Radio>\n      <Switch checked={checked} />\n    </Flex>\n  );\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>{nodes}</Col>\n      <Col span={24}>\n        <ConfigProvider theme={{ token: { motion: false } }}>{nodes}</ConfigProvider>\n      </Col>\n    </Row>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Notification Settings in JavaScript\nDESCRIPTION: This code shows how to configure global default options for all notification components using the notification.config method. It sets placement, position, duration, and enables RTL mode.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnotification.config({\n  placement: 'bottomRight',\n  bottom: 50,\n  duration: 3,\n  rtl: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Prefix/Suffix Example (TSX)\nDESCRIPTION: References `./demo/presuffix.tsx`, showing how to add prefix and suffix icons or text to the Ant Design InputNumber component using the `prefix` and `suffix` props in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/presuffix.tsx\">Prefix / Suffix</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb Component in React\nDESCRIPTION: Examples showing different ways to implement the Breadcrumb component, including the recommended approach for version 5.3.0 and above, and deprecated methods for earlier versions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// works when >=5.3.0, recommended ✅\nreturn <Breadcrumb items={[{ title: 'sample' }]} />;\n\n// works when <5.3.0, deprecated when >=5.3.0 🙅🏻‍♀️\nreturn (\n  <Breadcrumb>\n    <Breadcrumb.Item>sample</Breadcrumb.Item>\n  </Breadcrumb>\n);\n\n// or\n\nreturn <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;\n```\n\n----------------------------------------\n\nTITLE: Destroying All Modal Dialogs on Router Change\nDESCRIPTION: Example demonstrating how to destroy all confirmation modal dialogs when the router changes. This is useful to automatically clean up modal dialogs without keeping references to each one.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  Modal.destroyAll();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React 19 Compatibility Package for Ant Design\nDESCRIPTION: This snippet shows how to import the compatibility package for Ant Design v5 to work with React 19. It should be included at the entry point of the application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@ant-design/v5-patch-for-react-19';\n```\n\n----------------------------------------\n\nTITLE: Using Custom SVG Icons as Components in React (JSX)\nDESCRIPTION: Demonstrates how to import a custom SVG file as a React component (after configuring Webpack with @svgr/webpack or Vite with vite-plugin-svgr) and use it with the Ant Design `Icon` component via the `component` prop.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Icon from '@ant-design/icons';\nimport MessageSvg from 'path/to/message.svg'; // 你的 '*.svg' 文件路径\n\n// import MessageSvg from 'path/to/message.svg?react'; // 使用vite 你的 '*.svg?react' 文件路径.\nimport ReactDOM from 'react-dom/client';\n\n// in create-react-app:\n// import { ReactComponent as MessageSvg } from 'path/to/message.svg';\n\nReactDOM.createRoot(mountNode).render(<Icon component={MessageSvg} />);\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Instance in Child Components using Form.useFormInstance Hook (TSX)\nDESCRIPTION: This snippet demonstrates the `Form.useFormInstance` hook, which allows child components nested within a `<Form>` to access the parent Form's instance without needing it to be passed down as a prop. The `Sub` component uses this hook to get the `form` instance and call its `setFieldsValue` method.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst Sub = () => {\n  const form = Form.useFormInstance();\n\n  return <Button onClick={() => form.setFieldsValue({})} />;\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form}>\n      <Sub />\n    </Form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Wave Effect - React/TypeScript\nDESCRIPTION: Shows how to disable the click wave effect for buttons using ConfigProvider configuration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigProvider wave={{ disabled: true }}>\n  <Button>click</Button>\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Color via Alias Token in Ant Design Theme (TSX)\nDESCRIPTION: This snippet illustrates customizing the color of link elements by setting the `colorLink` Alias Token within the `token` object of the Ant Design theme. Alias Tokens are used to control the style of specific UI elements or component states, often acting as aliases for Map Tokens but allowing targeted overrides.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  token: {\n    colorLink: '#1890ff',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Providing Default getContainer for Pop-ups - React TypeScript\nDESCRIPTION: This snippet defines a default getContainer function that creates a new div, appends it to document.body, and returns the div. It then showcases passing getContainer as a prop to a PopupWrapper component. This pattern helps standardize where pop-ups are rendered and ensures that containers are attached to the DOM before use. React must be available, and the PopupWrapper component must accept a getContainer prop. Parameters involve customizing getContainer for various rendering scenarios.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fake Code. Just for Demo\\nconst defaultGetContainer = () => {\\n  const div = document.createElement('div');\\n  document.body.appendChild(div);\\n  return div;\\n};\\n\\nconst SomeComponent = ({ getContainer = defaultGetContainer }) => (\\n  <PopupWrapper getContainer={getContainer} />\\n);\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Ant Design Component APIs for Controlled Visibility in v5\nDESCRIPTION: Shows the API changes in Ant Design v5 for controlling the visibility of popup-like components within a React functional component. It demonstrates replacing `visible` with `open` for `Modal`, conditionally rendering `Tag` instead of using its `visible` prop, replacing `filterDropdownVisible` with `filterDropdownOpen` in `Table` columns, and consolidating `tooltipVisible` into the `tooltip.open` property for `Slider`. Requires React and useState.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  import { Modal, Tag, Table, Slider } from 'antd';\n\n  const App: React.FC = () => {\n    const [visible, setVisible] = useState(true);\n\n    return (\n      <>\n-       <Modal visible={visible}>content</Modal>\n+       <Modal open={visible}>content</Modal>\n\n-       <Tag visible={visible}>tag</Tag>\n+       {visible && <Tag>tag</Tag>}\n\n        <Table\n          data={[]}\n          columns={[\n            {\n              title: 'Name',\n              dataIndex: 'name',\n-             filterDropdownVisible: visible,\n+             filterDropdownOpen: visible,\n            }\n          ]}\n        />\n\n-       <Slider tooltipVisible={visible} />\n+       <Slider tooltip={{ open: visible }} />\n      </>\n    );\n  }\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Form Field Values with Form.useWatch Hook (TSX)\nDESCRIPTION: This snippet shows how to use the `Form.useWatch` hook to subscribe to changes in a specific form field ('username') and retrieve its current value. This value can then be used directly within the component for reactive updates, such as triggering a data fetch (`useSWR`) based on the username.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const [form] = Form.useForm();\n  const userName = Form.useWatch('username', form);\n\n  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);\n\n  return (\n    <Form form={form}>\n      <Form.Item name=\"username\">\n        <AutoComplete options={options} />\n      </Form.Item>\n    </Form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the EllipsisConfig Interface in TypeScript for Ant Design Typography\nDESCRIPTION: Defines the TypeScript interface `EllipsisConfig` used to configure the `ellipsis` prop for Ant Design's Typography components (`Typography.Text`, `Typography.Title`, `Typography.Paragraph`). It outlines the available options like `rows`, `expandable`, `suffix`, `symbol`, `tooltip`, `defaultExpanded`, `expanded`, `onExpand`, and `onEllipsis` for controlling text truncation behavior. Includes comments indicating when certain fields (`collapsible`, `symbol` function, `defaultExpanded`, `expanded`, `onExpand` info) were added.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EllipsisConfig {\n  rows: number;\n  /** `collapsible` added in `5.16.0` */\n  expandable: boolean | 'collapsible';\n  suffix: string;\n  /** render function added in `5.16.0` */\n  symbol: ReactNode | ((expanded: boolean) => ReactNode);\n  tooltip: ReactNode | TooltipProps;\n  /** added in `5.16.0` */\n  defaultExpanded: boolean;\n  /** added in `5.16.0` */\n  expanded: boolean;\n  /** `info` added in `5.16.0` */\n  onExpand: (event: MouseEvent, info: { expanded: boolean }) => void;\n  onEllipsis: (ellipsis: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Responsive Grid Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file providing a more complex example of responsive design techniques using the Ant Design grid system's breakpoint props. The actual code implementing this example resides in the './demo/responsive-more.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/responsive-more.tsx\">More responsive</code>\n```\n\n----------------------------------------\n\nTITLE: Integrating HappyProvider from Ant Design Happy Work Theme in TypeScript/React\nDESCRIPTION: This snippet demonstrates how to wrap your React application (or individual components) with the HappyProvider component from the @ant-design/happy-work-theme package. The provider applies the happy work theme to all nested Ant Design components, altering their appearance and interaction according to the theme's design. Required dependency: @ant-design/happy-work-theme. Expected input is your component tree as children; output is the themed application. Ensure you have installed the dependency and are using React with TypeScript/TSX.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { HappyProvider } from '@ant-design/happy-work-theme';\n\nexport default () => (\n  <HappyProvider>\n    <Button />\n  </HappyProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Dark and Compact Algorithms to Ant Design Theme (TSX)\nDESCRIPTION: This snippet demonstrates how to apply multiple pre-defined theme algorithms, specifically `darkAlgorithm` and `compactAlgorithm`, to an Ant Design theme. Algorithms transform Seed Tokens into Map Tokens according to specific rules (e.g., dark mode, compact spacing). Requires importing `theme` from `antd` to access the algorithms.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { theme } from 'antd';\n\nconst { darkAlgorithm, compactAlgorithm } = theme;\n\nconst theme = {\n  algorithm: [darkAlgorithm, compactAlgorithm],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic App Component Usage in React\nDESCRIPTION: Demonstrates the basic implementation of App component with message, notification and modal functionality through useApp hook.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { App } from 'antd';\n\nconst MyPage: React.FC = () => {\n  const { message, notification, modal } = App.useApp();\n  message.success('Good!');\n  notification.info({ message: 'Good' });\n  modal.warning({ title: 'Good' });\n  // ....\n  // other message, notification, modal static function\n  return <div>Hello word</div>;\n};\n\nconst MyApp: React.FC = () => (\n  <App>\n    <MyPage />\n  </App>\n);\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Handling Async Logic with filterTreeNode in TreeSelect Component\nDESCRIPTION: Example showing how to implement custom async loading logic in a TreeSelect component using the filterTreeNode prop instead of loadData when searching. This approach prevents network blocking during user input.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TreeSelect\n  filterTreeNode={(input, treeNode) => {\n    const match = YOUR_LOGIC_HERE;\n\n    if (match && !treeNode.isLeaf && !treeNode.children) {\n      // Do some loading logic\n    }\n\n    return match;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Managing getContainer State and Cleanup in React 18 StrictMode - React TypeScript\nDESCRIPTION: This snippet shows how to manage the popup container element using React state and useEffect to ensure nodes are created and cleaned up properly in React 18 StrictMode or when getContainer changes. If getContainer is provided, it's called and the result is set as state; otherwise, a div is appended to body, set in state, and removed on cleanup. This approach is necessary for supporting dynamic getContainer switching and proper memory/resource management. Dependencies include React, and input is the optional getContainer function. Outputs are the side effects on the DOM and the managed container reference.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fake Code. Just for Demo\\nconst SomeComponent = ({ getContainer }) => {\\n  const [myContainer, setMyContainer] = React.useState<HTMLElement | null>(null);\\n\\n  React.useEffect(() => {\\n    if (getContainer) {\\n      setMyContainer(getContainer());\\n      return;\\n    }\\n\\n    const div = document.createElement('div');\\n    document.body.appendChild(div);\\n    setMyContainer(div);\\n\\n    return () => {\\n      document.body.removeChild(div);\\n    };\\n  }, [getContainer]);\\n\\n  return <PopupWrapper getContainer={() => myContainer} />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sort Directions for Ant Design Table Columns (JavaScript)\nDESCRIPTION: Sets the available sorting directions for table columns using the `sortDirections` property, typically an array containing 'ascend' and 'descend'. This example allows toggling between ascending and descending order. Setting this on the Table props applies it to all columns.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsortDirections: ['ascend', 'descend']\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Anchor in React\nDESCRIPTION: Demo import for a horizontal anchor component example, displayed in an iframe with a height of 200px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/horizontal.tsx\" iframe=\"200\">Horizontal Anchor</code>\n```\n\n----------------------------------------\n\nTITLE: Using Message with React Context in TypeScript\nDESCRIPTION: Demonstrates how to access context values in Message components by using the useMessage hook to get api instance and contextHolder node.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst [api, contextHolder] = message.useMessage();\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder is inside Context1 which means api will get value of Context1 */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-modal Ant Design Tour in TypeScript/React\nDESCRIPTION: This code snippet ('./demo/non-modal.tsx') demonstrates the use of the Ant Design Tour component without a modal overlay, allowing background interaction during the user guide. It requires React and Ant Design as dependencies. The demo shows how disabling or customizing mask and interaction props alters the Tour's behavior, enabling a more flexible user experience. Outputs a non-blocking Tour overlay.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/non-modal.tsx\\\">Non-modal</code>\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Layout for Ant Design List Component\nDESCRIPTION: This snippet shows how to configure the List component to display items in a grid layout. The 'grid' property is used to enable the grid, and the 'column' attribute determines the number of columns in the grid.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/grid.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n可以通过设置 `List` 的 `grid` 属性来实现栅格列表，`column` 可设置期望显示的列数。\n\n## en-US\n\nCreate a grid layout by setting the `grid` property of List.\n```\n\n----------------------------------------\n\nTITLE: useBreakpoint Hook Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file demonstrating the usage of the 'useBreakpoint' hook provided by Ant Design to conditionally render or apply styles based on the current screen breakpoint. The actual code implementing this example resides in the './demo/useBreakpoint.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/useBreakpoint.tsx\">useBreakpoint Hook</code>\n```\n\n----------------------------------------\n\nTITLE: Generating Themed Ant Design CSS File using static-style-extract\nDESCRIPTION: Demonstrates an enhanced script using `@ant-design/static-style-extract` and Ant Design's `ConfigProvider` to generate a CSS file that includes styles for multiple custom themes or theme variations. It wraps the extraction process with `ConfigProvider` instances configured with different theme tokens (e.g., `colorBgBase`, `colorPrimary`) and writes the combined CSS to the output path.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'fs';\nimport React from 'react';\nimport { extractStyle } from '@ant-design/static-style-extract';\nimport { ConfigProvider } from 'antd';\n\nconst outputPath = './public/antd.min.css';\n\nconst testGreenColor = '#008000';\nconst testRedColor = '#ff0000';\n\nconst css = extractStyle((node) => (\n  <>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorBgBase: testGreenColor,\n        },\n      }}\n    >\n      {node}\n    </ConfigProvider>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: testGreenColor,\n        },\n      }}\n    >\n      <ConfigProvider\n        theme={{\n          token: {\n            colorBgBase: testRedColor,\n          },\n        }}\n      >\n        {node}\n      </ConfigProvider>\n    </ConfigProvider>\n  </>\n));\n\nfs.writeFileSync(outputPath, css);\n```\n\n----------------------------------------\n\nTITLE: Integrating Switch with Form.Item in Ant Design (React, TSX)\nDESCRIPTION: This snippet demonstrates how to properly bind Ant Design's Switch component to a form field within Form.Item by setting the valuePropName prop to 'checked'. This ensures that the Switch's checked state is synchronized with form values, as Form.Item binds by default to a 'value' prop. Dependencies include React, antd's Form and Switch components, and TypeScript support for .tsx files. The input is a form field definition, and the output is a functional switch toggle integrated with form state. Constraints: This setup is necessary because Switch's controlling prop is 'checked', not 'value'.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/switch/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx | pure\\n<Form.Item name=\\\"fieldA\\\" valuePropName=\\\"checked\\\">\\n  <Switch />\\n</Form.Item>\\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Form.Item Validation Status with Form.Item.useStatus Hook (TSX)\nDESCRIPTION: This snippet illustrates the `Form.Item.useStatus` hook, used within a custom input component (`CustomInput`) wrapped by `Form.Item`. It retrieves the validation `status` ('error', 'warning', 'success', 'validating') and `errors`/`warnings` arrays of the parent `Form.Item`, allowing the custom input to react visually (e.g., applying CSS classes, showing error messages) based on the validation state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomInput = ({ value, onChange }) => {\n  const { status, errors } = Form.Item.useStatus();\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      className={`custom-input-${status}`}\n      placeholder={(errors.length && errors[0]) || ''}\n    />\n  );\n};\n\nexport default () => (\n  <Form>\n    <Form.Item name=\"username\">\n      <CustomInput />\n    </Form.Item>\n  </Form>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for Ant Design DatePicker disabledTime Prop\nDESCRIPTION: This TypeScript code defines the type alias `DisabledTime`. It represents a function that accepts the currently selected date (`now` as a Dayjs object) and returns an object. This object can contain optional functions (`disabledHours`, `disabledMinutes`, `disabledSeconds`, `disabledMilliseconds`) which return arrays of numbers representing the time units to be disabled. These functions receive the preceding selected time units as arguments, allowing for context-aware time disabling in the Ant Design DatePicker.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype DisabledTime = (now: Dayjs) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n  disabledMilliseconds?: (\n    selectedHour: number,\n    selectedMinute: number,\n    selectedSecond: number,\n  ) => number[];\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Anchor Highlight in React\nDESCRIPTION: Demo import for an example showing how to customize the highlight behavior of an anchor component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/customizeHighlight.tsx\">Customize the anchor highlight</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Typography Components with Ant Design in JSX\nDESCRIPTION: This code demonstrates how to create editable Typography components in Ant Design. The example shows various configuration options including editing triggers, custom text areas, and different kinds of editable components (Text, Title, Paragraph).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/typography/demo/editable.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CheckOutlined, HighlightOutlined, SmileFilled, SmileOutlined } from '@ant-design/icons';\nimport { Radio, Typography } from 'antd';\nimport React, { useState } from 'react';\nconst { Paragraph, Text, Title } = Typography;\nconst App = () => {\n  const [editableStr, setEditableStr] = useState('This is an editable text.');\n  const [editableStrWithSuffix, setEditableStrWithSuffix] = useState('This is a loooooooooooooooooooooooooooooooong editable text with suffix.');\n  const [editableStrWithSuffixStartPart, setEditableStrWithSuffixStartPart] = useState(\n    'This is a loooooooooooooooooooooooooooooooong editable text with suffix.',\n  );\n  const [customIconStr, setCustomIconStr] = useState('Custom Edit icon and replace tooltip text.');\n  const [clickTriggerStr, setClickTriggerStr] = useState(\n    'Text or icon as trigger - click to start editing.',\n  );\n  const [chooseTrigger, setChooseTrigger] = useState('icon');\n  const [customEnterIconStr, setCustomEnterIconStr] = useState(\n    'Editable text with a custom enter icon in edit field.',\n  );\n  const [noEnterIconStr, setNoEnterIconStr] = useState(\n    'Editable text with no enter icon in edit field.',\n  );\n  const [hideTooltipStr, setHideTooltipStr] = useState('Hide Edit tooltip.');\n  const [lengthLimitedStr, setLengthLimitedStr] = useState(\n    'This is an editable text with limited length.',\n  );\n  const radioToState = (input) => {\n    switch (input) {\n      case 'text':\n        return ['text'];\n      case 'both':\n        return ['icon', 'text'];\n      case 'icon':\n      default:\n        return ['icon'];\n    }\n  };\n  const stateToRadio = (state) => {\n    if (state.includes('text')) {\n      return state.includes('icon') ? 'both' : 'text';\n    }\n    return 'icon';\n  };\n  return (\n    <>\n      <Paragraph\n        editable={{\n          onChange: setEditableStr,\n        }}\n      >\n        {editableStr}\n      </Paragraph>\n      <Paragraph\n        copyable\n        editable={{\n          onChange: setEditableStrWithSuffix,\n        }}\n        ellipsis={{\n          suffix: '--William Shakespeare',\n        }}\n      >\n        {editableStrWithSuffix}\n      </Paragraph>\n      <Paragraph\n        copyable\n        editable={{\n          onChange: setEditableStrWithSuffixStartPart,\n          text: editableStrWithSuffixStartPart,\n        }}\n        ellipsis={{\n          suffix: '-- William Shakespeare',\n          symbol: 'more',\n        }}\n      >\n        {editableStrWithSuffixStartPart.length >  100\n          ? `${editableStrWithSuffixStartPart.slice(0, 100)}...`\n          : editableStrWithSuffixStartPart}\n      </Paragraph>\n      <Paragraph\n        editable={{\n          icon: <HighlightOutlined />,\n          tooltip: 'click to edit text',\n          onChange: setCustomIconStr,\n        }}\n      >\n        {customIconStr}\n      </Paragraph>\n      <Paragraph\n        editable={{\n          tooltip: 'click to edit text',\n          onChange: setClickTriggerStr,\n          triggerType: radioToState(chooseTrigger),\n        }}\n      >\n        {clickTriggerStr}\n      </Paragraph>\n      <Radio.Group\n        onChange={(e) => setChooseTrigger(e.target.value)}\n        value={stateToRadio(radioToState(chooseTrigger))}\n      >\n        <Radio value=\"icon\">icon</Radio>\n        <Radio value=\"text\">text</Radio>\n        <Radio value=\"both\">both</Radio>\n      </Radio.Group>\n      <Paragraph>\n        <ul>\n          <li>\n            <Text\n              editable={{\n                onChange: setCustomEnterIconStr,\n                enterIcon: <SmileFilled style={{ color: '#1677ff' }} />,\n              }}\n            >\n              {customEnterIconStr}\n            </Text>\n          </li>\n          <li>\n            <Text\n              editable={{\n                onChange: setNoEnterIconStr,\n                enterIcon: null,\n              }}\n            >\n              {noEnterIconStr}\n            </Text>\n          </li>\n        </ul>\n      </Paragraph>\n      <Paragraph\n        editable={{\n          tooltip: false,\n          onChange: setHideTooltipStr,\n        }}\n      >\n        {hideTooltipStr}\n      </Paragraph>\n      <Title\n        level={1}\n        editable={{\n          onChange: setLengthLimitedStr,\n          maxLength: 50,\n          autoSize: {\n            maxRows: 5,\n            minRows: 3,\n          },\n        }}\n      >\n        {lengthLimitedStr}\n      </Title>\n    </>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Group Display with Ant Design in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a group of avatars using Ant Design components. It includes examples of different avatar styles, sizes, and tooltips.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/demo/group.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Avatar, Divider, Tooltip } from 'antd';\nimport React from 'react';\n\nconst App: React.FC = () => (\n  <>\n    <Avatar.Group>\n      <Avatar src=\"https://xsgames.co/randomusers/avatar.php?g=pixel\" />\n      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>\n      <Tooltip title=\"Ant User\" placement=\"top\">\n        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\n      </Tooltip>\n      <Avatar style={{ backgroundColor: '#1677ff' }}>A</Avatar>\n    </Avatar.Group>\n    <Divider />\n    <Avatar.Group maxCount={2} maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>\n      <Avatar src=\"https://xsgames.co/randomusers/avatar.php?g=pixel\" />\n      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>\n      <Tooltip title=\"Ant User\" placement=\"top\">\n        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\n      </Tooltip>\n      <Avatar style={{ backgroundColor: '#1677ff' }}>A</Avatar>\n    </Avatar.Group>\n    <Divider />\n    <Avatar.Group\n      maxCount={2}\n      size=\"large\"\n      maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}\n    >\n      <Avatar src=\"https://xsgames.co/randomusers/avatar.php?g=pixel\" />\n      <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>\n      <Tooltip title=\"Ant User\" placement=\"top\">\n        <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\n      </Tooltip>\n      <Avatar style={{ backgroundColor: '#1677ff' }}>A</Avatar>\n    </Avatar.Group>\n  </>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icons from Iconfont.cn in React (JSX)\nDESCRIPTION: Shows how to use the `createFromIconfontCN` utility from `@ant-design/icons` to create a custom Icon component that renders icons from a specified iconfont.cn project script URL. This allows using personalized icon sets managed on iconfont.cn.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createFromIconfontCN } from '@ant-design/icons';\nimport ReactDOM from 'react-dom/client';\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // 在 iconfont.cn 上生成\n});\n\nReactDOM.createRoot(mountNode).render(<MyIcon type=\"icon-example\" />);\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Close Button in Ant Design (React, TSX)\nDESCRIPTION: This snippet demonstrates how to provide a custom close icon or close action for Ant Design's Tag component in React. It uses the 'closeIcon' prop and may adjust visibility or behavior of the close button. Required dependencies are Ant Design's Tag and optionally custom icon components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/customize.tsx\\\" debug>Customize close</code>\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Flex Features - Ant Design - TypeScript/TSX\nDESCRIPTION: This snippet references \"combination.tsx\", which likely combines various Flex features such as alignment, gap, and wrapping to exhibit more advanced or real-world use cases. The demo shows how multiple Flex properties can be coordinated for complex layouts. React and Flex component are required. Inputs are combinations of documented flex-related props; output is a composed UI example.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/combination.tsx\\\">combination</code>\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Token for Tag in Ant Design (React, TSX)\nDESCRIPTION: This snippet demonstrates how to customize the component's design token for Tag in Ant Design. It requires familiarity with the Ant Design token system and may involve adjusting styles or theme variables for Tag. Useful for adapting the Tag appearance to specific design requirements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/component-token.tsx\\\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Loading Indicator with Ant Design in React\nDESCRIPTION: This code snippet demonstrates how to create a custom loading indicator using Ant Design's Spin component in a React application. It uses the Space component for layout and implements a custom indicator with an animated loading icon.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/custom-indicator.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spin, Space } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nconst App: React.FC = () => (\n  <Space size=\"middle\">\n    <Spin indicator={antIcon} />\n  </Space>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Aligning Elements with Space Component\nDESCRIPTION: This example illustrates how to align child elements within the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/align.tsx\">Align</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring @layer Support\nDESCRIPTION: Example of enabling @layer support in Ant Design using StyleProvider and ConfigProvider components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleProvider } from '@ant-design/cssinjs';\nimport { ConfigProvider } from 'antd';\n\nexport default () => (\n  <StyleProvider layer>\n    <ConfigProvider>\n      <MyApp />\n    </ConfigProvider>\n  </StyleProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Block Button Property Demo in Ant Design\nDESCRIPTION: Demonstrates how to use the block property on Button components to make them fill their parent container width. The block property is particularly useful for responsive designs and mobile interfaces where full-width buttons are common.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/demo/block.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button block>Block Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Using getValueProps for Aggregate Field Transformation (TSX)\nDESCRIPTION: Illustrates the conceptual use of `getValueProps` within a `Form.Item`. This function retrieves values for multiple specified `names` from the form instance (`form.getFieldValue(name)`) and combines them into a single array to be passed as the `value` prop to the child input component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ngetValueProps={() => ({ value: names.map((name) => form.getFieldValue(name)) })}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Re-rendering Form.Item using shouldUpdate Function (JSX)\nDESCRIPTION: This snippet shows how to use a function with the `shouldUpdate` prop on `Form.Item`. The function receives the previous and current form values (`prevValues`, `curValues`) and returns `true` if the item should re-render, or `false` otherwise. This allows for fine-grained control over updates, useful for conditionally rendering fields based on other field values, as shown here where an 'other' input appears based on the 'additional' field.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>\n  {() => {\n    return (\n      <Form.Item name=\"other\">\n        <Input />\n      </Form.Item>\n    );\n  }}\n</Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Select List Item and Container Height in Ant Design (TypeScript/TSX)\nDESCRIPTION: This TypeScript/TSX example shows how to tweak the internal listItemHeight and listHeight props to ensure the Select component's virtual scroll works correctly with custom rendered Option heights. This should only be used if the default 24px item height is not appropriate for your custom options and you need a different height (here 10px per item and a 250px list container). Dependencies are React and Ant Design; use only when customizing option heights, to avoid inconsistent scroll or rendering behavior.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\\n<Select listItemHeight={10} listHeight={250} />\\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing href in History with Anchor in React\nDESCRIPTION: Demo import for an example demonstrating the replace functionality for href in browser history, displayed in an iframe with a height of 200px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/replace.tsx\" iframe=\"200\">Replace href in history</code>\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Inside Form.Item - JSX/TSX\nDESCRIPTION: This JSX/TSX snippet demonstrates integrating a controlled Ant Design Checkbox within a Form.Item, using valuePropName to map the form field to Checkbox's checked property. For React and Ant Design projects, this ensures proper form data binding to Checkbox state during validation and submission. Requires Ant Design's Form and Checkbox components and assumes a form context. The 'name' defines the form field, and valuePropName specifies to use 'checked' instead of the default 'value' prop; no explicit outputs except correct form integration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/checkbox/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Checkbox />\n</Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component Examples in React\nDESCRIPTION: This code snippet demonstrates how to import and use various examples of the Skeleton component in a React application. It includes basic usage, complex combinations, active animations, and different element types.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/skeleton/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/complex.tsx\">Complex combination</code>\n<code src=\"./demo/active.tsx\">Active Animation</code>\n<code src=\"./demo/element.tsx\">Button/Avatar/Input/Image/Node</code>\n<code src=\"./demo/children.tsx\">Contains sub component</code>\n<code src=\"./demo/list.tsx\">List</code>\n<code src=\"./demo/componentToken.tsx\" debug>Custom component token</code>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with ShouldUpdate Function in JSX\nDESCRIPTION: Demonstrates using shouldUpdate as a function to conditionally render additional fields based on form value changes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>\n  {() => {\n    return (\n      <Form.Item name=\"other\">\n        <Input />\n      </Form.Item>\n    );\n  }}\n</Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Customizing dayjs Locale and Week Start Day - JavaScript\nDESCRIPTION: This JavaScript snippet, shown in the FAQ, demonstrates how to update the locale configuration in the `dayjs` library to set a custom start day of the week. It imports and extends dayjs with the `updateLocale` plugin, configures the 'zh-cn' locale, and sets `weekStart` to 0 (Sunday). Dependencies: the `dayjs` library, the `updateLocale` plugin, and a relevant locale package. The snippet is used for integrating Ant Design DatePicker with a custom week start day or locale.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/date-picker/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport dayjs from 'dayjs';\\n\\nimport 'dayjs/locale/zh-cn';\\n\\nimport updateLocale from 'dayjs/plugin/updateLocale';\\n\\ndayjs.extend(updateLocale);\\ndayjs.updateLocale('zh-cn', {\\n  weekStart: 0,\\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Hashed CSS Files for Part Static Extraction in TSX\nDESCRIPTION: Implements the 'Part Static Extract Style' approach where styles collected during SSR are hashed and saved to a file. It uses Node.js `crypto` to generate an MD5 hash of the extracted CSS (`styleText`) and `fs` to write the CSS to a uniquely named file (`css-<hash>.css`) if it doesn't already exist, enabling browser caching.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createHash } from 'crypto';\n\n// Get Style content like above\nconst styleText = extractStyle(cache);\n\nconst hash = createHash('md5').update(styleText).digest('hex');\nconst cssFileName = `css-${hash.substring(0, 8)}.css`;\n\nif (!fs.existsSync(cssFileName)) {\n  fs.writeFileSync(cssFileName, styleText);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Indicator for Ant Design Tour in TypeScript/React\nDESCRIPTION: This snippet ('./demo/indicator.tsx') demonstrates how to render a custom indicator (step markers or progress indicators) within the Ant Design Tour component. It relies on React and Ant Design. The code customizes the indicator via a callback function, using 'indicatorsRender', to control its display based on the current and total steps. The output is a Tour component with a tailored indicator.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/indicator.tsx\\\">Custom indicator</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Custom SVG Icons (JavaScript)\nDESCRIPTION: Provides a Webpack configuration snippet using `babel-loader` and `@svgr/webpack` to process SVG files. This setup allows importing SVG files directly as React components, enabling their use with the Ant Design `Icon` component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  // ... other config\n  test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n  use: [\n    {\n      loader: 'babel-loader',\n    },\n    {\n      loader: '@svgr/webpack',\n      options: {\n        babel: false,\n        icon: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Search Results in Tree Component with CSS\nDESCRIPTION: Applies a highlighted orange color (#f50) to search results within a tree component. This CSS class is used to visually distinguish matched search terms in a searchable tree implementation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/demo/search.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.site-tree-search-value {\n  color: #f50;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Ant Design v4 and v5 Components Together in React (TypeScript)\nDESCRIPTION: This React TypeScript snippet shows how to import and use Button components from both antd (v4) and antd-v5 in one codebase. By aliasing imports, developers can render legacy and modern UI components side by side. The dependencies are React, antd, and antd-v5. Inputs are the respective imported Button components; the output is JSX with both button instances.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { Button as Button4 } from 'antd'; // v4\nimport { Button as Button5 } from 'antd-v5'; // v5\n\nexport default () => (\n  <>\n    <Button4 />\n    <Button5 />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Ant Design Colors in JavaScript\nDESCRIPTION: This code demonstrates how to import and use the blue color palette from the @ant-design/colors package. It logs the entire blue palette array and the primary blue color.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { blue } from '@ant-design/colors';\n\nconsole.log(blue); // ['#E6F4FF', '#BAE0FF', '#91CAFF', '#69B1FF', '#4096FF', '#1677FF', '#0958D9', '#003EB3', '#002C8C', '#001D66']\nconsole.log(blue.primary); // '#1677FF'\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Menu Collapse in Flex Layout with JSX\nDESCRIPTION: This example demonstrates how to make the Menu component respond to collapse in a Flex layout. It uses inline styles to set flex properties and minimum width for proper rendering.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ flex }}>\n  <div style={{ ... }}>Some Content</div>\n  <Menu style={{ minWidth: 0, flex: \"auto\" }} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extracting Component Ref Types with GetRef in TSX\nDESCRIPTION: This snippet demonstrates the `GetRef` utility type for easily obtaining the ref type of components. It shows how to get the specific ref type for an antd `Select` component (`BaseSelectRef`) and also for a standard HTML element (`HTMLDivElement`) wrapped in `React.forwardRef`. This utility abstracts away the need to know the exact underlying ref type provided by the component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport React, { forwardRef } from 'react';\nimport type { GetRef, Select } from 'antd';\n\ntype SelectRefType = GetRef<typeof Select>; // BaseSelectRef\n\nconst Div = forwardRef<HTMLDivElement>((_, ref) => <div ref={ref} />);\ntype DomRefType = GetRef<typeof Div>; // HTMLDivElement\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating Rendering from Enzyme to React Testing Library - JavaScript\nDESCRIPTION: This code snippet demonstrates the transition from Enzyme's mount API to React Testing Library's render function for rendering components in tests. The updated approach expects the use of container objects for querying DOM elements. Prerequisites include @testing-library/react, and the code assumes the presence of React components and a testing environment like Jest. The primary parameters are the rendered components, with outputs that grant access to the DOM structure for assertions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--  import { mount } from 'enzyme';\\n++  import { render } from '@testing-library/react';\\n\\n--  const wrapper = mount(\\n++  const { container } = render(\\n      <ConfigProvider getPopupContainer={getPopupContainer}>\\n        <Slider />\\n      </ConfigProvider>,\\n    );\n```\n\n----------------------------------------\n\nTITLE: AutoComplete API Properties Table\nDESCRIPTION: Table defining the available properties for the AutoComplete component, including types, defaults, and version information.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Show clear button | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support Object type |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| backfill | If backfill selected item the input when using keyboard | boolean | false |  |\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import from Babel Configuration (JSON/JavaScript)\nDESCRIPTION: Illustrates removing the `babel-plugin-import` configuration for `antd` from a Babel config file (e.g., `.babelrc`), as it's no longer necessary with Ant Design v5's CSS-in-JS approach which handles automatic tree-shaking.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n\"plugins\": [\n- [\"import\", { \"libraryName\": \"antd\", \"libraryDirectory\": \"lib\"}, \"antd\"],\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Splitter Examples in Markdown\nDESCRIPTION: These code snippets import various examples of the Splitter component, demonstrating different features and use cases.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/splitter/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/size.tsx\">Basic</code>\n<code src=\"./demo/control.tsx\">Control mode</code>\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n<code src=\"./demo/collapsible.tsx\">Collapsible</code>\n<code src=\"./demo/multiple.tsx\">Multiple panels</code>\n<code src=\"./demo/group.tsx\">Complex combination</code>\n<code src=\"./demo/nested-in-tabs.tsx\" debug>Nested in tabs</code>\n<code src=\"./demo/lazy.tsx\" version=\"5.23.0\">Lazy</code>\n<code src=\"./demo/debug.tsx\" debug>Debug</code>\n```\n\n----------------------------------------\n\nTITLE: Defining DisabledTime Type for Custom Disabled Time Logic (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the 'DisabledTime' function type, which configures the times that cannot be selected in the TimePicker component. It accepts a Dayjs object and returns an object of callback functions to disable specific hours, minutes, seconds, or milliseconds. No dependencies are required other than TypeScript and Day.js typings. The function allows fine-grained control over disabled values based on the currently selected time, and the 'disabledMilliseconds' property requires Ant Design version 5.14.0 or higher.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/time-picker/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype DisabledTime = (now: Dayjs) => {\\n  disabledHours?: () => number[];\\n  disabledMinutes?: (selectedHour: number) => number[];\\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\\n  disabledMilliseconds?: (\\n    selectedHour: number,\\n    selectedMinute: number,\\n    selectedSecond: number,\\n  ) => number[];\\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Recommended and Deprecated Timeline Usage in Ant Design (React/JSX)\nDESCRIPTION: This JSX snippet demonstrates two ways to use the Ant Design Timeline component. The recommended approach (for versions >= 5.2.0) uses the `items` prop with an array of objects for better performance and simpler code. The older method (for versions < 5.2.0, deprecated in >= 5.2.0) involves nesting `Timeline.Item` components directly as children. Requires React and the Ant Design library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/timeline/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// works when >=5.2.0, recommended ✅\nconst items = [{ children: 'sample', label: 'sample' }];\nreturn <Timeline items={items} />;\n\n// works when <5.2.0, deprecated when >=5.2.0 🙅🏻‍♀️\nreturn (\n  <Timeline onChange={onChange}>\n    <Timeline.Item>Sample</Timeline.Item>\n  </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TransformType Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `TransformType` used to describe the transformation state (position, rotation, scale, flip) of an image within the Ant Design Image preview.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  x: number;\n  y: number;\n  rotate: number;\n  scale: number;\n  flipX: boolean;\n  flipY: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar Events and Month Notes with CSS\nDESCRIPTION: Provides CSS rules to style event lists and month notes, typically within a custom Ant Design Calendar. It resets list styles for `.events`, styles `ant-badge-status` elements within events for proper text display and overflow handling, and sets font sizes and alignment for `.notes-month` elements used for displaying month-specific content.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/demo/notice-calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.events {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n.events .ant-badge-status {\n  width: 100%;\n  overflow: hidden;\n  font-size: 12px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.notes-month {\n  font-size: 28px;\n  text-align: center;\n}\n.notes-month section {\n  font-size: 28px;\n}\n```\n\n----------------------------------------\n\nTITLE: Compact Layout with Space.Compact\nDESCRIPTION: Demonstration of using Space.Compact for a compact layout combination.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/compact.tsx\">紧凑布局组合</code>\n```\n\n----------------------------------------\n\nTITLE: Using Custom SVG Icons as Components (JSX)\nDESCRIPTION: Demonstrates how to use a custom SVG icon within Ant Design. It involves importing the SVG file as a React component (leveraging build tool configurations like Webpack/SVGR or Vite/SVGR) and passing it to the Ant Design 'Icon' component via the 'component' prop.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Icon from '@ant-design/icons';\nimport MessageSvg from 'path/to/message.svg'; // path to your '*.svg' file.\n\n// import MessageSvg from 'path/to/message.svg?react'; // use vite path to your '*.svg?react' file.\nimport ReactDOM from 'react-dom/client';\n\n// in create-react-app:\n// import { ReactComponent as MessageSvg } from 'path/to/message.svg';\n\nReactDOM.createRoot(mountNode).render(<Icon component={MessageSvg} />);\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Color Package via npm\nDESCRIPTION: This command installs the `@ant-design/colors` package using the Node Package Manager (npm). This package provides JavaScript variables for the Ant Design color palettes, allowing developers to easily use the defined colors in their projects. Requires Node.js and npm (or a compatible package manager) to be installed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @ant-design/colors\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Badge Component in React\nDESCRIPTION: Example demonstrations of Badge component usage including basic implementation, standalone usage, overflow count handling, dot display, dynamic changes, clickable badges, offset positioning, size variations, status indicators, colorful badges, and ribbon styles.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/no-wrapper.tsx\">Standalone</code>\n<code src=\"./demo/overflow.tsx\">Overflow Count</code>\n<code src=\"./demo/dot.tsx\">Red badge</code>\n<code src=\"./demo/change.tsx\">Dynamic</code>\n<code src=\"./demo/link.tsx\">Clickable</code>\n<code src=\"./demo/offset.tsx\">Offset</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/colorful.tsx\">Colorful Badge</code>\n<code src=\"./demo/ribbon.tsx\">Ribbon</code>\n<code src=\"./demo/ribbon-debug.tsx\" debug>Ribbon Debug</code>\n<code src=\"./demo/mix.tsx\" debug>Mixed usage</code>\n<code src=\"./demo/title.tsx\" debug>Title</code>\n<code src=\"./demo/colorful-with-count-debug.tsx\" debug>Colorful Badge support count Debug</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with Modal Hooks in JavaScript\nDESCRIPTION: Modal hooks now support async/await syntax for easier promise handling.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Modal.confirm({ ... });\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Example in JSX\nDESCRIPTION: A simple example showing how to use the Pagination component with onChange callback and total items count.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Pagination onChange={onChange} total={50} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Messages with messageVariables in Form.Item (JSX)\nDESCRIPTION: This snippet demonstrates using the `messageVariables` prop on `Form.Item` to customize placeholder variables within validation rule messages. It shows two examples: one replacing a custom variable `${another}` and another replacing the default `${label}` variable with a custom value 'good'. This allows for more dynamic and context-specific validation feedback.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Form>\n  <Form.Item\n    messageVariables={{ another: 'good' }}\n    label=\"user\"\n    rules={[{ required: true, message: '${another} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n  <Form.Item\n    messageVariables={{ label: 'good' }}\n    label={<span>user</span>}\n    rules={[{ required: true, message: '${label} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Replacing Moment.js Locale Setup with Day.js for Ant Design v5\nDESCRIPTION: Shows the code changes required to switch from Moment.js locale handling to Day.js locale handling, aligning with Ant Design v5's default date library (Day.js). It involves changing the import statement for the library (`dayjs` instead of `moment`), importing the corresponding Day.js locale data (e.g., `dayjs/locale/zh-cn`), and updating the locale initialization call (`dayjs.locale('zh-cn')`).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-   import moment from 'moment';\n+   import dayjs from 'dayjs';\n-   import 'moment/locale/zh-cn';\n+   import 'dayjs/locale/zh-cn';\n\n-   moment.locale('zh-cn');\n+   dayjs.locale('zh-cn');\n```\n\n----------------------------------------\n\nTITLE: Using the Cascader Component with Options and onChange (JSX)\nDESCRIPTION: This snippet demonstrates the core usage of the Cascader React component by providing it with the required 'options' property and an 'onChange' event handler. The 'options' array should be structured following the component's expected hierarchy, potentially using the Option interface. Dependencies include React and Ant Design components. The Cascader accepts additional props as documented, and the primary output is the rendered selector UI with cascading options.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/cascader/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cascader options={options} onChange={onChange} />\n```\n\n----------------------------------------\n\nTITLE: QRCode Status Type Definition\nDESCRIPTION: TypeScript type definition for the StatusRenderInfo interface used in QRCode component for custom status rendering.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/qr-code/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype StatusRenderInfo = {\n  status: QRStatus;\n  locale: Locale['QRCode'];\n  onRefresh?: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress Bar with Auto-Updating Option in Markdown\nDESCRIPTION: This snippet demonstrates how to set up a progress bar with both fixed and auto-updating progress options. When 'percent=\"auto\"' is set, it creates an indeterminate progress bar that continuously updates.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/percent.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n展示进度，当设置 `percent=\"auto\"` 时会预估一个永远不会停止的进度条。\n\n## en-US\n\nShow the progress. When `percent=\"auto\"` is set, an indeterminate progress will be displayed.\n```\n\n----------------------------------------\n\nTITLE: Applying Ant Design v4 Theme using Compatibility Package in React (JSX)\nDESCRIPTION: Example demonstrating how to use the `ConfigProvider` from `antd` along with theme objects (`defaultTheme`, `darkTheme`) imported from `@ant-design/compatible`. This allows applying the visual styles of Ant Design v4 to v5 components for a consistent look during migration. Requires `@ant-design/compatible` dependency.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst sandpackConfig = {\n  dependencies: {\n    '@ant-design/compatible': 'v5-compatible-v4',\n  },\n};\n\nimport {\n  defaultTheme,   // 默认主题\n  darkTheme,      // 暗色主题\n} from '@ant-design/compatible';\nimport { ConfigProvider, Button, Radio, Space } from 'antd';\n\nexport default () => (\n  <ConfigProvider theme={defaultTheme}>\n    <Space direction=\"vertical\">\n      <Button type=\"primary\">Button</Button>\n      <Radio.Group>\n        <Radio value={1}>A</Radio>\n        <Radio value={2}>B</Radio>\n        <Radio value={3}>C</Radio>\n        <Radio value={4}>D</Radio>\n      </Radio.Group>\n    </Space>\n  </ConfigProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Hack Example\nDESCRIPTION: Shows how Ant Design previously handled global configurations like locale through a hacky global variable approach, highlighting why this solution is not robust.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Sample. Not real world code.\nlet globalLocale = null;\n\nconst ConfigProvider = (props) => {\n  if (props.locale) {\n    globalLocale = props.locale;\n  }\n\n  // ...\n};\n\nModal.confirm = (props) => {\n  // ...\n\n  ReactDOM.render(\n    <ConfigProvider locale={globalLocale}>\n      <Modal {...modalProps} />\n    </ConfigProvider>,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Modal Error with ConfigProvider in JavaScript\nDESCRIPTION: This code snippet demonstrates how to fix a 'triggerNode is undefined' error when setting getPopupContainer globally for Modal components. It modifies the getPopupContainer prop to handle cases where the node is undefined.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n <ConfigProvider\n-  getPopupContainer={triggerNode => triggerNode.parentNode}\n+  getPopupContainer={node => {\n+    if (node) {\n+      return node.parentNode;\n+    }\n+    return document.body;\n+  }}\n >\n   <App />\n </ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Animating Tag Appearance in Ant Design (React, TSX)\nDESCRIPTION: This snippet demonstrates adding animation to Tag component presentation in a React application using Ant Design. It showcases animated transitions during tag entry, exit, or when properties change. This enhances user experience in dynamic interfaces. Relies on Tag and potentially animation libraries or built-in CSS transitions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/animation.tsx\\\">Animate</code>\n```\n\n----------------------------------------\n\nTITLE: Defining the Cascader Option Interface (TypeScript)\nDESCRIPTION: This TypeScript interface specifies the acceptable structure for individual option objects within the Cascader component's 'options' prop. Each Option must have a 'value' which can be a string or number, and may include a display 'label', a 'disabled' flag, nested 'children', and an 'isLeaf' boolean to force parent/leaf node behavior during lazy loading. Use this structure to ensure typed data passed to the Cascader, and note that React and Ant Design's typings should be available when implementing advanced field customization.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/cascader/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Option {\n  value: string | number;\n  label?: React.ReactNode;\n  disabled?: boolean;\n  children?: Option[];\n  // Determines if this is a leaf node(effective when `loadData` is specified).\n  // `false` will force trade TreeNode as a parent node.\n  // Show expand icon even if the current node has no children.\n  isLeaf?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Integration with Browser History\nDESCRIPTION: Example demonstrating how to integrate Breadcrumb with browser history using React Router, including custom item rendering and path handling.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router';\n\nconst items = [\n  {\n    path: '/index',\n    title: 'home',\n  },\n  {\n    path: '/first',\n    title: 'first',\n    children: [\n      {\n        path: '/general',\n        title: 'General',\n      },\n      {\n        path: '/layout',\n        title: 'Layout',\n      },\n      {\n        path: '/navigation',\n        title: 'Navigation',\n      },\n    ],\n  },\n  {\n    path: '/second',\n    title: 'second',\n  },\n];\n\nfunction itemRender(currentRoute, params, items, paths) {\n  const isLast = currentRoute?.path === items[items.length - 1]?.path;\n\n  return isLast ? (\n    <span>{currentRoute.title}</span>\n  ) : (\n    <Link to={`/${paths.join(\"/\")}`}>{currentRoute.title}</Link>\n  );\n}\n\nreturn <Breadcrumb itemRender={itemRender} items={items} />;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Add & Remove Tags in Ant Design (React, TSX)\nDESCRIPTION: This snippet demonstrates how to dynamically add or remove Tag components within a React application using Ant Design. It relies on handling state and the onClose event. Dependencies include React state management and Ant Design Tag. Useful for interactive UIs where users can modify categories/tags at runtime.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/control.tsx\\\">Add & Remove Dynamically</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for SVG Icon Components (JavaScript)\nDESCRIPTION: Provides a Webpack configuration snippet demonstrating how to use 'babel-loader' and '@svgr/webpack' to process SVG files. This setup allows importing SVG files directly as React components, with options specified to disable SVGR's Babel processing and enable icon mode.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  // ... other config\n  test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n  use: [\n    {\n      loader: 'babel-loader',\n    },\n    {\n      loader: '@svgr/webpack',\n      options: {\n        babel: false,\n        icon: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design CSS-in-JS Utility using Yarn\nDESCRIPTION: Adds the `@ant-design/cssinjs` package using Yarn. This dependency is required for implementing server-side rendering style extraction for Ant Design in Next.js Pages Router projects.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @ant-design/cssinjs\n```\n\n----------------------------------------\n\nTITLE: Describing Input Variants in Ant Design (Markdown)\nDESCRIPTION: This snippet outlines the three available variants for input components in Ant Design: outlined, filled, and borderless. It provides both Chinese and English descriptions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/demo/variant.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n可选 `outlined` `filled` `borderless` 三种形态。\n\n## en-US\n\nThere are `outlined` `filled` and `borderless`, totally three variants to choose from.\n```\n\n----------------------------------------\n\nTITLE: App Component Usage with Hooks\nDESCRIPTION: Demonstrates the new App component approach in v5 that simplifies message API usage while maintaining proper context.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const { message } = App.useApp();\n\n  React.useEffect(() => {\n    message.success('Hello World');\n  }, []);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Colorful Badges with CSS in Ant Design\nDESCRIPTION: This CSS snippet provides custom styling for the colorful badges used in the Ant Design Badge component. It sets the border-radius to create circular badges and adjusts the positioning of the count indicator.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/colorful-with-count-debug.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.ant-badge-color-pink {\n  background: pink;\n  color: #fff;\n}\n\n.ant-badge .ant-badge-count {\n  border-radius: 10px;\n  top: -4px;\n  right: -8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Global Settings in JavaScript\nDESCRIPTION: Example of how to configure global settings for the Message component, including customizing display duration, maximum count, and enabling RTL mode.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.config({\n  top: 100,\n  duration: 2,\n  maxCount: 3,\n  rtl: true,\n  prefixCls: 'my-message',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Divider in React/TSX\nDESCRIPTION: References a demo file (`./demo/horizontal.tsx`) showcasing the implementation of a default horizontal divider using the Ant Design `Divider` component in a React/TypeScript application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/horizontal.tsx\">Horizontal</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Consistent Refs with useImperativeHandle and Proxy in React/Ant Design\nDESCRIPTION: Demonstrates using the `useImperativeHandle` React hook combined with a JavaScript `Proxy` to expose a customized ref from a component. This pattern allows adding methods (like `focus`, `blur`) or intercepting property access while maintaining compatibility with accessing the underlying DOM node (`divRef.current`), addressing `ref` inconsistencies in composite components like Table.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nuseImperativeHandle(\n  ref,\n  () =>\n    new Proxy(divRef.current, {\n      get(target, key) {\n        // ...\n      },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Types in Ant Design\nDESCRIPTION: Shows the four available alert types in Ant Design: success, info, warning, and error. These types can be specified when implementing the Alert component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/style.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n共有四种样式 `success`、`info`、`warning`、`error`。\n\n## en-US\n\nThere are 4 types of Alert: `success`, `info`, `warning`, `error`.\n```\n\n----------------------------------------\n\nTITLE: Setting Global Modal/Message/Notification Config with ConfigProvider.config (TypeScript/TSX)\nDESCRIPTION: This example demonstrates static global configuration for Modal, Message, or Notification components through ConfigProvider.config in Ant Design 5.13.0+. Not usable with hooks. It uses a holderRender function to wrap children with a custom ConfigProvider supplying prefixCls, iconPrefixCls, and theme props. Inputs are configuration objects; the output is a custom configuration context for static AntD components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nConfigProvider.config({\\n  // 5.13.0+\\n  holderRender: (children) => (\\n    <ConfigProvider\\n      prefixCls=\\\"ant\\\"\\n      iconPrefixCls=\\\"anticon\\\"\\n      theme={{ token: { colorPrimary: 'red' } }}\\n    >\\n      {children}\\n    </ConfigProvider>\\n  ),\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Variables with ConfigProvider in React 17 or 16\nDESCRIPTION: Shows how to enable CSS variable mode in React 17 or 16 applications, requiring a manual key setting for theme isolation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider theme={{ cssVar: { key: 'app' } }}>\n  <App />\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Without Blinking Using State - React JSX - JavaScript\nDESCRIPTION: Demonstrates how to render an Ant Design Tooltip in React such that it does not flicker or blink when its content changes, by binding the open state to the user variable. The title is conditionally set to a user's name. This pattern helps ensure stable UI when user data is loading or becomes undefined. Dependencies include React and Ant Design Tooltip. Input expects a user object; output is a Tooltip that gracefully updates its display.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// `title` will not blink when `user` is empty\\n<Tooltip open={user} title={user?.name} />\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of Transfer List with Render Props in Ant Design (JSX)\nDESCRIPTION: Demonstrates how to use the Transfer component with a render prop (`children`) to provide custom rendering of the transfer list. This approach allows developers to inject their own component for rendering list items using props provided by Transfer. Dependencies include Ant Design's Transfer component and React. The example expects `props` to contain Transfer's configuration, and `YourComponent` should handle the listProps for correct behavior. Inputs: Transfer props; Outputs: Rendered custom list. Ensure children render function receives and applies all provided props.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Transfer {...props}>{(listProps) => <YourComponent {...listProps} />}</Transfer>\n```\n\n----------------------------------------\n\nTITLE: Adding Brightness Overlay to Hue Panel in CSS\nDESCRIPTION: This snippet expands the color panel's CSS by introducing a vertical black-to-transparent linear gradient as a brightness overlay over the base hue color. It has no dependencies, modifies the background-image property, and leverages the stacking of CSS gradients. Key parameters are gradient angles and color stops. The output is a color panel where the user can vary brightness vertically.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbackground-color: rgb(0, 106, 255);\nbackground-image: linear-gradient(0deg, rgb(0, 0, 0), transparent);\n```\n\n----------------------------------------\n\nTITLE: Fallback Suffix with Conditional Rendering - JSX\nDESCRIPTION: This JSX snippet demonstrates a best-practice workaround for maintaining input focus in Ant Design's Input component when dynamically changing prefix, suffix, or showCount props. It uses a conditional to provide a fallback empty <span /> element when a suffix is not set, preventing React from recreating the input DOM node and thus preserving focus. The code assumes 'condition' is a runtime boolean and 'Icon' is a predefined icon component, and should be used when dynamic elements could otherwise disrupt DOM stability.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst suffix = condition ? <Icon type=\"smile\" /> : <span />;\n\n<Input suffix={suffix} />;\n```\n\n----------------------------------------\n\nTITLE: Manually Extracting CSS-in-JS Styles with @ant-design/cssinjs in TypeScript\nDESCRIPTION: Demonstrates the standard CSS-in-JS pattern for SSR style extraction. It uses `createCache` from `@ant-design/cssinjs` to initialize a style cache. The React application (`MyApp`) is wrapped with `StyleProvider`, passing the cache. `renderToString` from `react-dom/server` renders the app, populating the cache. Finally, `extractStyle` retrieves the collected CSS text from the cache. This allows inserting the styles into the HTML head but doesn't provide browser caching.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\nimport { renderToString } from 'react-dom/server';\n\nconst cache = createCache();\n\n// HTML Content\nconst html = renderToString(\n  <StyleProvider cache={cache}>\n    <MyApp />\n  </StyleProvider>,\n);\n\n// Style Content\nconst styleText = extractStyle(cache);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme in Next.js App (Pages Router)\nDESCRIPTION: Modifies the `pages/_app.tsx` file to apply a custom Ant Design theme globally. It imports the previously defined `themeConfig` and wraps the root `Component` with `antd`'s `ConfigProvider`, passing the custom theme configuration to it. This ensures all antd components in the application use the specified theme.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\nimport type { AppProps } from 'next/app';\n\nimport theme from './theme/themeConfig';\n\nconst App = ({ Component, pageProps }: AppProps) => (\n  <ConfigProvider theme={theme}>\n    <Component {...pageProps} />\n  </ConfigProvider>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing disabledDate in Ant Design DatePicker to Disable Weekends\nDESCRIPTION: This TSX function `disabledDate` is designed for the `disabledDate` prop of an Ant Design DatePicker. It takes the current date (`date`) and panel information (`info`) as arguments. If the current panel view is 'date' (`info.type === 'date'`), it checks if the day is Sunday (`date.day() === 0`) or Saturday (`date.day() === 6`) using Day.js methods and returns `true` to disable weekends. For other panel types (month, year, etc.), it returns `false`, allowing selection.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/picker.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst disabledDate = (date, info) => {\n  if (info.type === 'date') {\n    return date.day() === 0 || date.day() === 6;\n  }\n  return false;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating and Closing Modal Dialog with Reference\nDESCRIPTION: Example showing how to update and close a modal dialog using the reference returned by Modal.method(). Demonstrates updating title and content, and finally destroying the modal.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst modal = Modal.info();\n\nmodal.update({\n  title: 'Updated title',\n  content: 'Updated content',\n});\n\n// on 4.8.0 or above, you can pass a function to update modal\nmodal.update((prevConfig) => ({\n  ...prevConfig,\n  title: `${prevConfig.title} (New)`,\n}));\n\nmodal.destroy();\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file demonstrating the basic usage of the Ant Design Row and Col components to create a simple grid layout. The actual code implementing this example resides in the './demo/basic.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic Grid</code>\n```\n\n----------------------------------------\n\nTITLE: Referencing Basic InputNumber Example (TSX)\nDESCRIPTION: This tag references an external file (`./demo/basic.tsx`) that contains a basic usage example of the Ant Design InputNumber component in a React/TypeScript application. It demonstrates the fundamental implementation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Item with ShouldUpdate in JSX\nDESCRIPTION: Example of using shouldUpdate prop in Form.Item to dynamically render content based on form updates. The child component is returned in a function to ensure correct behavior.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Form.Item shouldUpdate>\n  {() => {\n    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;\n  }}\n</Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Embedding Grid Properties in Responsive Breakpoint Props - Ant Design - Markdown\nDESCRIPTION: This snippet demonstrates the equivalent shorthand and object syntax for specifying responsive props in Ant Design\\'s grid system. By using xs={6}, the span property is set directly, while xs={{ span: 6 }} provides an object-based approach for passing multiple grid properties. No dependencies are required beyond Ant Design. Both forms are used to configure grid columns responsively, with object syntax allowing additional options like pull, push, offset, and order.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/responsive-more.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`xs={6}` is equivalent to `xs={{span: 6}}`.\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Variant Examples (TSX)\nDESCRIPTION: References `./demo/variant.tsx`, showcasing different visual variants (`outlined`, `borderless`, `filled`, `underlined`) of the Ant Design InputNumber component (introduced in v5.13.0) using React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n```\n\n----------------------------------------\n\nTITLE: Documentation Table for Shared Tooltip APIs - Markdown\nDESCRIPTION: This Markdown snippet provides a structured table documenting the shared properties for Tooltip, Popconfirm, and Popover within Ant Design. It systematically itemizes each property with its description, expected type(s), default value, and availability version, following Ant Design's documentation conventions. Intended for developer reference, the table covers parameter purposes, version history, and migration notes including deprecated attributes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/shared/sharedProps.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | This value will be merged into placement's config, please refer to the settings [dom-align](https://github.com/yiminghe/dom-align) | object | - |  |\n| arrow | Change arrow's visible state and change whether the arrow is pointed at the center of target. | boolean \\| { pointAtCenter: boolean } | true | 5.2.0 |\n| autoAdjustOverflow | Whether to adjust popup placement automatically when popup is off screen | boolean | true |  |\n| color | The background color | string | - | 4.3.0 |\n| defaultOpen | Whether the floating tooltip card is open by default | boolean | false | 4.23.0 |\n| destroyTooltipOnHide | Whether destroy tooltip when hidden | boolean | false |  |\n| fresh | Tooltip will cache content when it is closed by default. Setting this property will always keep updating | boolean | false | 5.10.0 |\n| getPopupContainer | The DOM container of the tip, the default behavior is to create a `div` element in `body` | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |\n| mouseEnterDelay | Delay in seconds, before tooltip is shown on mouse enter | number | 0.1 |  |\n| mouseLeaveDelay | Delay in seconds, before tooltip is hidden on mouse leave | number | 0.1 |  |\n| ~~overlayClassName~~ | Class name of the tooltip card, please use `classNames={{ root: '' }}` instead | string | - |  |\n| ~~overlayStyle~~ | Style of the tooltip card, please use `styles={{ root: {} }}` | React.CSSProperties | - |  |\n| ~~overlayInnerStyle~~ | Style of the tooltip inner content, please use `styles={{ body: {} }}` | React.CSSProperties | - |  |\n| placement | The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` |  |\n| trigger | Tooltip trigger mode. Could be multiple by passing an array | `hover` \\| `focus` \\| `click` \\| `contextMenu` \\| Array&lt;string> | `hover` |  |\n| open | Whether the floating tooltip card is open or not. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open)) | boolean | false | 4.23.0 |\n| zIndex | Config `z-index` of Tooltip | number | - |  |\n| onOpenChange | Callback executed when visibility of the tooltip card is changed | (open: boolean) => void | - | 4.23.0 |\n```\n\n----------------------------------------\n\nTITLE: Listening for Anchor Link Changes in React\nDESCRIPTION: Demo import for an example showing how to listen for anchor link changes using the onChange handler.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/onChange.tsx\">Listening for anchor link change</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing useRenderTimes Hook in TypeScript\nDESCRIPTION: A custom React hook that tracks component render times and changed props during development. Uses useDebugValue for React Dev Tools visualization.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nfunction useRenderTimes<T>(props: T) {\n  // Render times\n  const timesRef = React.useRef(0);\n  timesRef.current += 1;\n\n  // Cache for prev props\n  const cacheProps = React.useRef(props);\n  const changedPropKeys = getDiff(props, cacheProps.current); // Some compare logic\n\n  React.useDebugValue(timesRef.current);\n  React.useDebugValue(changedPropKeys);\n\n  cacheProps.current = props;\n}\n\nexport default process.env.NODE_ENV !== 'production' ? useRenderTimes : () => {};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ProLayout Component with Umi in TypeScript (React)\nDESCRIPTION: This snippet provides a TypeScript React component for 'src/layouts/index.tsx', implementing a custom application layout using Ant Design's ProLayout. It utilizes Umi's useAppData and useLocation hooks to supply menu configuration and highlighting logic. The menuItemRender customizes navigation by enabling <Link> routing for menu items. Dependencies required are '@ant-design/pro-components' and 'umi'. The component receives its route definitions from Umi and renders child pages through <Outlet />. Inputs include route data and location; the output is a rendered layout with navigation and content switching. Intended for use as the application's root layout.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ProLayout } from '@ant-design/pro-components';\nimport { Link, Outlet, useAppData, useLocation } from 'umi';\n\nexport default function Layout() {\n  const { clientRoutes } = useAppData();\n  const location = useLocation();\n  return (\n    <ProLayout\n      route={clientRoutes[0]}\n      location={location}\n      title=\"Umi x Ant Design\"\n      menuItemRender={(menuItemProps, defaultDom) => {\n        if (menuItemProps.isUrl || menuItemProps.children) {\n          return defaultDom;\n        }\n        if (menuItemProps.path && location.pathname !== menuItemProps.path) {\n          return (\n            <Link to={menuItemProps.path} target={menuItemProps.target}>\n              {defaultDom}\n            </Link>\n          );\n        }\n        return defaultDom;\n      }}\n    >\n      <Outlet />\n    </ProLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Date Components in TypeScript\nDESCRIPTION: This index file (`src/components/index.tsx`) exports the previously created custom Calendar, DatePicker, and TimePicker components, making them easily importable from a single module.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport { default as Calendar } from './Calendar';\nexport { default as DatePicker } from './DatePicker';\nexport { default as TimePicker } from './TimePicker';\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Icons via Form.Item `hasFeedback` Prop (Ant Design/React)\nDESCRIPTION: This snippet shows how to pass custom feedback icons directly to an Ant Design `Form.Item` component using the `hasFeedback` prop. The prop takes an object containing an `icons` key, where the value represents the custom icon definitions. For this to take effect, the `Form.Item` must also have the `hasFeedback` attribute present.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/custom-feedback-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nhasFeedback={{ icons: ... }}\n```\n\n----------------------------------------\n\nTITLE: Handling Diverse Child Elements in Space\nDESCRIPTION: This example demonstrates how the Space component handles various types of child elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/debug.tsx\" debug>Diverse Child</code>\n```\n\n----------------------------------------\n\nTITLE: Integrating Ant Design Button Component in React App\nDESCRIPTION: Example of how to import and use an Ant Design Button component in a React application. This code modifies the src/App.js file to include the antd Button.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'antd';\n\nconst App = () => (\n  <div className=\"App\">\n    <Button type=\"primary\">Button</Button>\n  </div>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Loading Indicators with Async Dismissal in Ant Design\nDESCRIPTION: This code demonstrates how to display a global loading indicator that automatically dismisses itself after a set time. It uses Ant Design's message component to create loading notifications with different content types.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/demo/loading.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, message } from 'antd';\n\nconst App: React.FC = () => {\n  const success = () => {\n    const hide = message.loading('Action in progress..', 0);\n    // Dismiss manually and asynchronously\n    setTimeout(hide, 2500);\n  };\n\n  return (\n    <Button onClick={success}>Display a loading indicator</Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Reproducing Modal ContextHolder Placement Bug - Ant Design Modal (TypeScript/React)\nDESCRIPTION: This code demonstrates how placing `contextHolder` inside or outside an Ant Design Modal affects modal confirmation popup behavior. It uses React functional components and Ant Design imports, where the key operation is triggering `modal.confirm` and observing placement differences depending on the DOM context. Required dependencies: `antd` library, React. Inputs: user's click. Outputs: Modal confirmation dialog. The limitation is the effect of contextHolder's placement on popup positioning.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport { Button, Modal } from 'antd';\\n\\nexport default () => {\\n  const [modal, contextHolder] = Modal.useModal();\\n\\n  return (\\n    <div>\\n      <Modal open>\\n        <Button\\n          onClick={() => {\\n            modal.confirm({ title: 'Hello World' });\\n          }}\\n        >\\n          Confirm\\n        </Button>\\n\\n        {/* 🚨 BUG when put here */}\\n        {contextHolder}\\n      </Modal>\\n\\n      {/* ✅ Work as expect when put here */}\\n      {/* {contextHolder} */}\\n    </div>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Semantic DOM Demo with Optional Simplification Toggle in Ant Design React Markdown\nDESCRIPTION: This code snippet includes a special embedded code demo representing the semantic structure of the Slider component. The 'simplify' attribute, when present, toggles a simplified or focused version of the semantic demo. Dependencies include the semantic demo file and Markdown that interprets such custom tags. Inputs include file path and attributes; output renders a visual or interactive demo explaining the Slider's DOM semantics, constrained to the simplified view if 'simplify' is true.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/_semantic.tsx\" simplify=\"true\"></code>\n```\n\n----------------------------------------\n\nTITLE: Flex Alignment Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file showing how to use the 'align' prop on the Row component for vertical alignment of columns within an Ant Design grid layout. The actual code implementing this example resides in the './demo/flex-align.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/flex-align.tsx\">Alignment</code>\n```\n\n----------------------------------------\n\nTITLE: Code Demo References in Markdown\nDESCRIPTION: Markdown code block references to various demo examples of the Anchor component, including basic usage, horizontal layout, static positioning, and custom events.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\" iframe=\"200\">基本</code>\n<code src=\"./demo/horizontal.tsx\" iframe=\"200\">横向 Anchor</code>\n<code src=\"./demo/static.tsx\">静态位置</code>\n<code src=\"./demo/onClick.tsx\">自定义 onClick 事件</code>\n<code src=\"./demo/customizeHighlight.tsx\">自定义锚点高亮</code>\n<code src=\"./demo/targetOffset.tsx\" iframe=\"200\">设置锚点滚动偏移量</code>\n<code src=\"./demo/onChange.tsx\">监听锚点链接改变</code>\n<code src=\"./demo/replace.tsx\" iframe=\"200\">替换历史中的 href</code>\n<code src=\"./demo/legacy-anchor.tsx\" debug>废弃的 JSX 示例</code>\n<code src=\"./demo/component-token.tsx\" iframe=\"800\" debug>组件 Token</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Less Variable Compatibility in Ant Design v5 Migration (JavaScript)\nDESCRIPTION: JavaScript code snippet demonstrating how to configure `less-loader` in Webpack. It uses `@ant-design/compatible` to convert v5 design tokens back to legacy less variables (`v5Vars` or optionally `v4Vars`) and inject them using `modifyVars`, aiding projects that relied heavily on Ant Design's v4 less variables.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst { theme } = require('antd/lib');\nconst { convertLegacyToken, defaultTheme } = require('@ant-design/compatible/lib');\n\nconst { defaultAlgorithm, defaultSeed } = theme;\n\nconst mapV5Token = defaultAlgorithm(defaultSeed);\nconst v5Vars = convertLegacyToken(mapV5Token);\nconst mapV4Token = theme.getDesignToken(defaultTheme);\nconst v4Vars = convertLegacyToken(mapV4Token);\n\n// Webpack Config\nmodule.exports = {\n  // ... other config\n  loader: 'less-loader',\n  options: {\n    lessOptions: {\n      modifyVars: v5Vars, // or v4Vars\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Custom Component Usage for Visual Cues (TSX)\nDESCRIPTION: This snippet repeats the usage of the `MyStr` component with `value=\"Hello World\"` and `maxLen={5}`. In this context, it serves as an example where, instead of truncating the value, a developer might add visual cues like a Tooltip to indicate the value exceeds the intended display length, adhering to the \"To be what you see\" principle.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Same demo we've seen before\n<MyStr value=\"Hello World\" maxLen={5}>\n```\n\n----------------------------------------\n\nTITLE: Adding Saturation Overlay to Hue Panel in CSS\nDESCRIPTION: This CSS snippet further layers the color panel with a horizontal white-to-transparent gradient for saturation, in addition to the vertical brightness overlay. Utilizing two linear-gradients in background-image enables simultaneous brightness and saturation control. The input parameter is the angle and color stops for each gradient. The outcome is an interactive color panel reflecting both brightness and saturation changes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbackground-color: rgb(0, 106, 255);\nbackground-image: linear-gradient(0deg, rgb(0, 0, 0), transparent),\n  linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0));\n```\n\n----------------------------------------\n\nTITLE: Customizing Luxon Configuration for Ant Design DatePicker\nDESCRIPTION: This snippet illustrates how to customize the behavior of the Luxon-based DatePicker. It involves spreading the default `luxonGenerateConfig` and overriding specific functions, such as `getWeekFirstDay`, to tailor the date handling logic according to specific requirements, while still using Luxon as the underlying library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DatePicker } from 'antd';\nimport type { DateTime } from 'luxon';\nimport luxonGenerateConfig from 'rc-picker/lib/generate/luxon';\n\nconst customLuxonConfig = {\n  ...luxonGenerateConfig,\n  getWeekFirstDay(locale) {\n    // Your custom implementation goes here\n  },\n};\n\nconst MyDatePicker = DatePicker.generatePicker<DateTime>(customLuxonConfig);\n\nexport default MyDatePicker;\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface - TypeScript\nDESCRIPTION: This code defines the Option interface, which represents the structure of selectable choices within a Checkbox Group in Ant Design. Implementers must ensure the presence of a string label and value, with an optional boolean disabled flag. It is crucial for strongly typing props, customizing option rendering, and enabling type-safe handling of group checkbox data. This interface has no dependencies but is used as a prop type in Checkbox Groups; inputs are static objects adhering to this structure.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/checkbox/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Option {\n  label: string;\n  value: string;\n  disabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Size Examples (TSX)\nDESCRIPTION: This tag references an external file (`./demo/size.tsx`) showcasing different sizes (`large`, `middle`, `small`) available for the Ant Design InputNumber component using React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/size.tsx\">Sizes</code>\n```\n\n----------------------------------------\n\nTITLE: Merging Custom and Inherited ClassNames (TSX)\nDESCRIPTION: This TSX snippet enhances the previous `GeekProvider` example by correctly handling scenarios where a `className` might already be configured for the Button component in an ancestor `ConfigProvider`. It retrieves the existing `button?.className` from the context, uses the `classnames` utility to merge it with the dynamically generated class (`styles.btn`), and applies the combined string to the Button component, ensuring both inherited and custom styles can coexist.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\nimport classNames from 'classnames';\n\nconst GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {\n  const { button, getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);\n  const btnPrefixCls = getPrefixCls('btn');\n  const { styles } = useButtonStyle(btnPrefixCls);\n  return (\n    <ConfigProvider button={{ className: classNames(button?.className, styles.btn) }}>\n      {props.children}\n    </ConfigProvider>\n  );\n};\n\nexport default GeekProvider;\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Preview Mask with CSS in Ant Design\nDESCRIPTION: This snippet customizes the appearance of the preview mask in Ant Design components by setting a larger font size and full opacity for the mask element, and further increases the font size specifically for Ant Design icons within the mask. No external dependencies are needed aside from a working Ant Design setup. The main selectors are \".customize-mask\" for the mask wrapper and \".customize-mask .anticon\" for embedded icons; the code should be applied in a stylesheet loaded alongside your Ant Design-based application. No runtime parameters are required, and the styles globally affect all elements matching these selectors.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/demo/preview-mask.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.customize-mask {\n  font-size: 20px;\n  opacity: 1;\n}\n.customize-mask .anticon {\n  font-size: 32px;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Static Styles for Multiple Themes with @ant-design/static-style-extract in TypeScript\nDESCRIPTION: Demonstrates extending the static style extraction to support multiple themes simultaneously. A custom rendering function is passed to `extractStyle`. This function receives the prepared set of components (`node`) and wraps it multiple times with `ConfigProvider`, applying a different theme (`theme1`, `theme2`, `theme3`) each time. This ensures that styles specific to each theme are included in the final extracted CSS output.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// `node` is the components set we prepared\nconst css = extractStyle((node) => (\n  <>\n    <ConfigProvider theme={theme1}>{node}</ConfigProvider>\n    <ConfigProvider theme={theme2}>{node}</ConfigProvider>\n    <ConfigProvider theme={theme3}>{node}</ConfigProvider>\n  </>\n));\n```\n\n----------------------------------------\n\nTITLE: Rendering List Grid with Fragment and Wrapped Items in React\nDESCRIPTION: This code snippet showcases the List component with grid prop, demonstrating its behavior with Fragment and custom-wrapped List.Item components. It tests the grid layout in various edge cases.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/grid-test.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { List } from 'antd';\nimport React, { Fragment } from 'react';\n\nconst data = [\n  { title: 'Title 1' },\n  { title: 'Title 2' },\n  { title: 'Title 3' },\n  { title: 'Title 4' },\n  { title: 'Title 5' },\n  { title: 'Title 6' },\n];\n\nconst ListItem = ({ children }) => <List.Item>{children}</List.Item>;\n\nconst Demo = () => (\n  <List\n    grid={{\n      gutter: 16,\n      column: 4,\n    }}\n    dataSource={data}\n    renderItem={(item) => (\n      <>\n        <List.Item>\n          <div>{item.title}</div>\n        </List.Item>\n        <Fragment>\n          <List.Item>\n            <div>{item.title}</div>\n          </List.Item>\n        </Fragment>\n        <ListItem>\n          <div>{item.title}</div>\n        </ListItem>\n      </>\n    )}\n  />\n);\n\nexport default Demo;\n```\n\n----------------------------------------\n\nTITLE: Separator Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the Breadcrumb separator type, showing the required properties and their types.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst item = {\n  type: 'separator', // Must have\n  separator: '/',\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Splitter Component Demos in Markdown\nDESCRIPTION: These code snippets import various demo components for the Splitter, showcasing different functionalities such as basic usage, controlled mode, vertical layout, collapsible panels, and multiple panels.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/splitter/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/size.tsx\">基本用法</code>\n<code src=\"./demo/control.tsx\">受控模式</code>\n<code src=\"./demo/vertical.tsx\">垂直方向</code>\n<code src=\"./demo/collapsible.tsx\">可折叠</code>\n<code src=\"./demo/multiple.tsx\">多面板</code>\n<code src=\"./demo/group.tsx\">复杂组合</code>\n<code src=\"./demo/nested-in-tabs.tsx\" debug>标签页中嵌套</code>\n<code src=\"./demo/lazy.tsx\" version=\"5.23.0\">延迟渲染模式</code>\n<code src=\"./demo/debug.tsx\" debug>调试</code>\n```\n\n----------------------------------------\n\nTITLE: Documenting maxCount Prop Usage in Select Component (Markdown)\nDESCRIPTION: Explains how to use the `maxCount` prop in Ant Design's Select component to limit the maximum number of selectable items. When the limit is exceeded, remaining options become disabled.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/maxCount.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n你可以通过设置 `maxCount` 约束最多可选中的数量，当超出限制时会变成禁止选中状态。\n\n## en-US\n\nYou can set the `maxCount` prop to control the max number of items can be selected. When the limit is exceeded, the options will become disabled.\n```\n\n----------------------------------------\n\nTITLE: Defining Image Preview Transform State in TypeScript\nDESCRIPTION: TypeScript interface `TransformType` defines the structure for representing the transformation state of a previewed image, including its position (x, y), rotation, scale, and flip status (flipX, flipY). This state is used in callbacks like `onTransform` and `toolbarRender`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  x: number;\n  y: number;\n  rotate: number;\n  scale: number;\n  flipX: boolean;\n  flipY: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Banner in Ant Design React\nDESCRIPTION: This example demonstrates how to customize the Alert banner by setting a different type and removing the default icon.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/banner.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert message=\"Very long warning text warning text text text text text text text\" banner closable />\n```\n\n----------------------------------------\n\nTITLE: Rendering Successful Result Component in Ant Design (JSX/TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Result component from Ant Design to display a successful outcome. It includes examples in both Chinese and English, showcasing the component's internationalization capabilities.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/demo/success.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Result } from 'antd';\n\nconst SuccessResult = () => (\n  <Result\n    status=\"success\"\n    title=\"操作成功\"\n    subTitle=\"Your operation has been completed successfully.\"\n  />\n);\n\nexport default SuccessResult;\n```\n\n----------------------------------------\n\nTITLE: Updating Component APIs for Controlled Visibility in React (JSX)\nDESCRIPTION: Demonstrates migrating various Ant Design components (Modal, Tag, Table, Slider) from `visible`-based props (like `visible`, `filterDropdownVisible`, `tooltipVisible`) to the unified `open` prop or nested `tooltip.open` for controlling visibility in v5. For Tag, visibility control is removed, requiring conditional rendering instead.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  import { Modal, Tag, Table, Slider } from 'antd';\n\n  const App: React.FC = () => {\n    const [visible, setVisible] = useState(true);\n\n    return (\n      <>\n-       <Modal visible={visible}>content</Modal>\n+       <Modal open={visible}>content</Modal>\n\n-       <Tag visible={visible}>tag</Tag>\n+       {visible && <Tag>tag</Tag>}\n\n        <Table\n          data={[]}\n          columns={[\n            {\n              title: 'Name',\n              dataIndex: 'name',\n-             filterDropdownVisible: visible,\n+             filterDropdownOpen: visible,\n            }\n          ]}\n        />\n\n-       <Slider tooltipVisible={visible} />\n+       <Slider tooltip={{ open: visible }} />\n      </>\n    );\n  }\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Closure Issue with React.memo\nDESCRIPTION: Demonstrates a scenario where React.memo fails to prevent re-renders due to closure usage in render props.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nconst MyComponent = React.memo(({ valueRender }: { valueRender: () => React.ReactElement }) =>\n  valueRender(),\n);\n\nconst App = () => {\n  const countRef = React.useRef(0);\n  const [, forceUpdate] = React.useState({});\n\n  React.useEffect(() => {\n    countRef.current += 1;\n    forceUpdate({});\n  }, []);\n\n  // In real world, class component often meet this by `this.state`\n  const valueRender = React.useCallback(() => countRef.current, []);\n\n  return <MyComponent valueRender={valueRender} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Formatter Example (TSX)\nDESCRIPTION: References `./demo/formatter.tsx`, showing how to format the displayed value in the Ant Design InputNumber component using the `formatter` prop in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/formatter.tsx\">Formatter</code>\n```\n\n----------------------------------------\n\nTITLE: Generating Mixed Theme Ant Design CSS using static-style-extract\nDESCRIPTION: Demonstrates generating a CSS file that supports mixed themes using `@ant-design/static-style-extract`. It involves wrapping the extraction node with nested `ConfigProvider` components, each defining parts of the different themes (e.g., setting `colorBgBase` and `colorPrimary` differently) required in the application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { extractStyle } from '@ant-design/static-style-extract';\nimport { ConfigProvider } from 'antd';\n\nconst cssText = extractStyle((node) => (\n  <>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorBgBase: 'green ',\n        },\n      }}\n    >\n      {node}\n    </ConfigProvider>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: 'blue',\n        },\n      }}\n    >\n      <ConfigProvider\n        theme={{\n          token: {\n            colorBgBase: 'red ',\n          },\n        }}\n      >\n        {node}\n      </ConfigProvider>\n    </ConfigProvider>\n  </>\n));\n```\n\n----------------------------------------\n\nTITLE: Specifying rowKey for Unique Item Identification in Ant Design Transfer (JSX)\nDESCRIPTION: Shows how to explicitly provide a key extraction function via the rowKey prop in the Transfer component when provided data items lack a key property. This ensures each item is uniquely identified according to React's list rendering requirements. Depends on Ant Design's Transfer component and requires the data items to have a unique 'uid' property. Input: function taking a record and returning the uid; Output: Transfer renders with uniquely keyed items. Failure to provide unique keys will raise warnings or cause improper rendering.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// eg. your primary key is `uid`\nreturn <Transfer rowKey={(record) => record.uid} />;\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Drawer (Markdown)\nDESCRIPTION: This table details the mapping of Less variables to Component Tokens for the Ant Design Drawer component. It highlights the use of global tokens for background color, padding, font size, and line height, noting unit differences for footer padding.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@drawer-bg` | `colorBgElevated` | GlobalToken |\n| `@drawer-header-padding` | `padding`、`paddingLG` | GlobalToken, used as `${padding}px ${paddingLG}px` |\n| `@drawer-title-font-size` | `fontSizeLG` | GlobalToken |\n| `@drawer-title-line-height` | `lineHeightLG` | GlobalToken |\n| `@drawer-body-padding` | `paddingLG` | GlobalToken |\n| `@drawer-footer-padding-vertical` | `footerPaddingBlock` | `footerPaddingBlock`  is a number without units, `@drawer-footer-padding-vertical` with units |\n| `@drawer-footer-padding-horizontal` | `footerPaddingInline` | `footerPaddingInline`  is a number without units, `@drawer-footer-padding-horizontal` with units |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Nested Field Values using getFieldsValue (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `getFieldsValue` method of a Form instance to retrieve values for specific, potentially nested, fields. It shows the syntax for requesting a single nested path (`[['user', 'age']]`) and multiple nested paths (`[['user', 'age'], ['preset', 'account']]`).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// 单个路径\nform.getFieldsValue([['user', 'age']]);\n\n// 多个路径\nform.getFieldsValue([\n  ['user', 'age'],\n  ['preset', 'account'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Controlling QR Code Status in Ant Design\nDESCRIPTION: The 'status' prop can be used to control the state of a QR code component. It accepts four values: 'active', 'expired', 'loading', and 'scanned'. This allows for dynamic updating of the QR code's appearance based on its current state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/qr-code/demo/status.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n可以通过 `status` 的值控制二维码的状态，提供了 `active`、`expired`、`loading`、`scanned` 四个值。\n\n## en-US\n\nThe status can be controlled by the value `status`, four values ​​of `active`, `expired`, `loading`, `scanned` are provided.\n```\n\n----------------------------------------\n\nTITLE: Nested Theme Configuration in React\nDESCRIPTION: Example of nested theme configuration using ConfigProvider to set different color themes for buttons\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/css-var-plan.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider theme={{ token: { colorPrimary: 'blue' } }}>\n  <Button>Button 1</Button>\n  <ConfigProvider theme={{ token: { colorPrimary: 'green' } }}>\n    <Button>Button 2</Button>\n  </ConfigProvider>\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Displaying Checkable Tag Component in Ant Design (React, TSX)\nDESCRIPTION: This snippet shows how to use the CheckableTag component to render selectable tags in React using Ant Design. It is dependent on Ant Design's Tag.CheckableTag component. The main props include 'checked' and 'onChange' facilitating interactive toggling. This implementation allows users to select or deselect tagging options.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/checkable.tsx\\\">Checkable</code>\n```\n\n----------------------------------------\n\nTITLE: Providing Fallback Text for Image Watermark in Ant Design (TypeScript JSX)\nDESCRIPTION: This snippet demonstrates configuring an Ant Design `Watermark` component with both an `image` URL and fallback text `content`. If the specified image fails to load, the text \"Ant Design\" is displayed as the watermark, ensuring a watermark is always present even with image loading issues. This requires React and the Ant Design library (version 5.2.3+ for this specific fallback behavior).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/watermark/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript jsx\nCODE:\n```\n<Watermark\n  height={30}\n  width={130}\n  content=\"Ant Design\"\n  image=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*lkAoRbywo0oAAAAAAAAAAAAADrJ8AQ/original\"\n>\n  <div style={{ height: 500 }} />\n</Watermark>\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Component Examples - Ant Design React - TypeScript\nDESCRIPTION: This collection of code snippet references links to TypeScript demo files for various configurations and usages of the Ant Design Tabs component. Each code file (such as basic.tsx, disabled.tsx, icon.tsx, editable-card.tsx, etc.) demonstrates a particular feature or customization scenario, such as normal usage, disabling tabs, centering, tabs with icons, card-style tabs, editable tabs, animated transitions, nesting, custom tab bars, and more. These code snippets require React and Ant Design as dependencies and focus on different props and interactive capabilities of the Tabs component. Inputs and outputs vary according to the specific example, covering the visual and functional aspects of tabs in modern web interfaces.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/basic.tsx\\\">Basic</code>\n<code src=\\\"./demo/disabled.tsx\\\">Disabled</code>\n<code src=\\\"./demo/centered.tsx\\\">Centered</code>\n<code src=\\\"./demo/icon.tsx\\\">Icon</code>\n<code src=\\\"./demo/custom-indicator.tsx\\\">Indicator</code>\n<code src=\\\"./demo/slide.tsx\\\">Slide</code>\n<code src=\\\"./demo/extra.tsx\\\">Extra content</code>\n<code src=\\\"./demo/size.tsx\\\">Size</code>\n<code src=\\\"./demo/position.tsx\\\">Position</code>\n<code src=\\\"./demo/card.tsx\\\">Card type tab</code>\n<code src=\\\"./demo/editable-card.tsx\\\">Add & close tab</code>\n<code src=\\\"./demo/card-top.tsx\\\" compact background=\\\"grey\\\" debug>Container of card type Tab</code>\n<code src=\\\"./demo/custom-add-trigger.tsx\\\">Customized trigger of new tab</code>\n<code src=\\\"./demo/custom-tab-bar.tsx\\\">Customized bar of tab</code>\n<code src=\\\"./demo/custom-tab-bar-node.tsx\\\">Draggable Tabs</code>\n<code src=\\\"./demo/animated.tsx\\\" debug>Animated</code>\n<code src=\\\"./demo/nest.tsx\\\" debug>Nest</code>\n<code src=\\\"./demo/component-token.tsx\\\" debug>component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of Ant Design Tour Component in TypeScript/React\nDESCRIPTION: This code snippet ('./demo/basic.tsx') provides a basic demonstration of using the Ant Design Tour component in a React application with TypeScript. It shows how to initialize and render a step-by-step guide for users. Developers must have React and Ant Design installed. Key parameters include the steps, open state, and configuration for displaying the guide. The demo is intended as a starting example; it outputs an interactive Tour popup and does not cover advanced customization.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/basic.tsx\\\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using package managers\nDESCRIPTION: These code snippets demonstrate how to install Ant Design using different package managers: npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install antd\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add antd\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add antd\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add antd\n```\n\n----------------------------------------\n\nTITLE: Calendar Week Number Configuration - Ant Design\nDESCRIPTION: Shows how to enable week number display in a fullscreen calendar by setting the showWeek prop to true. This configuration adds an additional column showing the week number for each row in the calendar.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/demo/week.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n通过将 `showWeek` 属性设置为 `true`，在全屏日历中显示周数。\n\n## en-US\n\nShow week number in fullscreen calendar by setting `showWeek` prop to `true`.\n```\n\n----------------------------------------\n\nTITLE: Result Component Demo Imports\nDESCRIPTION: Demo code references for different Result component scenarios including success, info, warning, and error states.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/success.tsx\">Success</code>\n<code src=\"./demo/info.tsx\">Info</code>\n<code src=\"./demo/warning.tsx\">Warning</code>\n<code src=\"./demo/403.tsx\">403</code>\n<code src=\"./demo/404.tsx\">404</code>\n<code src=\"./demo/500.tsx\">500</code>\n<code src=\"./demo/error.tsx\">Error</code>\n<code src=\"./demo/customIcon.tsx\">Custom icon</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme to Disable Motion in Ant Design\nDESCRIPTION: This snippet demonstrates how to disable motion effects globally in Ant Design components by configuring the theme token.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigProvider } from 'antd';\n\n<ConfigProvider theme={{ token: { motion: false } }}>\n  <App />\n</ConfigProvider>;\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Empty (Markdown)\nDESCRIPTION: This table maps the Less variable related to font size for the Ant Design Empty component to its corresponding global Component Token.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@empty-font-size` | `fontSize` | GlobalToken |\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Hover with Click Example in React\nDESCRIPTION: Imports an example demonstrating a Popover that combines hover and click interactions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/hover-with-click.tsx\">Hover with click popover</code>\n```\n\n----------------------------------------\n\nTITLE: Setting Draggable Range Track in Ant Design (Chinese)\nDESCRIPTION: This snippet demonstrates how to configure a draggable range track in Ant Design components using Chinese language. It specifies that the `range.draggableTrack` property can be set to make the entire range scale draggable.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/draggableTrack.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n可以设置 `range.draggableTrack`，使得范围刻度整体可拖拽。\n```\n\n----------------------------------------\n\nTITLE: Defining List Component API in Markdown\nDESCRIPTION: This snippet defines the API for the List component, including properties like bordered, dataSource, footer, grid, header, itemLayout, loading, loadMore, locale, pagination, renderItem, rowKey, size, and split.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | Toggles rendering of the border around the list | boolean | false |  |\n| dataSource | DataSource array for list | any\\[] | - |  |\n| footer | List footer renderer | ReactNode | - |  |\n| grid | The grid type of list. You can set grid to something like {gutter: 16, column: 4} | [object](#list-grid-props) | - |  |\n| header | List header renderer | ReactNode | - |  |\n| itemLayout | The layout of list | `horizontal` \\| `vertical` | `horizontal` |  |\n| loading | Shows a loading indicator while the contents of the list are being fetched | boolean \\| [SpinProps](/components/spin/#api) ([more](https://github.com/ant-design/ant-design/issues/8659)) | false |  |\n| loadMore | Shows a load more content | ReactNode | - |  |\n| locale | The i18n text including empty text | object | {emptyText: `No Data`} |  |\n| pagination | Pagination [config](/components/pagination/), hide it by setting it to false | boolean \\| object | false |  |\n| renderItem | Customize list item when using `dataSource` | (item: T, index: number) => ReactNode | - |  |\n| rowKey | Item's unique value, could be an Item's key which holds a unique value of type `React.Key` or function that receives Item and returns a `React.Key` | `keyof` T \\| (item: T) => `React.Key` | `\"key\"` |  |\n| size | Size of list | `default` \\| `large` \\| `small` | `default` |  |\n| split | Toggles rendering of the split under the list item | boolean | true |  |\n```\n\n----------------------------------------\n\nTITLE: Responsive Flex Grid Example using Ant Design in React/TypeScript (v5.14.0+)\nDESCRIPTION: This snippet represents a link to an external file demonstrating creating responsive layouts that also utilize flexbox alignment and justification properties within the Ant Design grid system, applicable from version 5.14.0. The actual code implementing this example resides in the './demo/responsive-flex.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/responsive-flex.tsx\" version=\"5.14.0\">Flex Responsive</code>\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Height with Reference Span in TypeScript React\nDESCRIPTION: Implementation of text height measurement using a reference span element for calculating line height.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  {text}\n  {measuring && <span ref={measureRef}>&nbsp;</span>}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Modal Hook Position Bug\nDESCRIPTION: Example showing how contextHolder placement affects Modal.confirm popup positioning when placed inside vs outside the Modal component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button, Modal } from 'antd';\n\nexport default () => {\n  const [modal, contextHolder] = Modal.useModal();\n\n  return (\n    <div>\n      <Modal open>\n        <Button\n          onClick={() => {\n            modal.confirm({ title: 'Hello World' });\n          }}\n        >\n          Confirm\n        </Button>\n\n        {/* 🚨 BUG when put here */}\n        {contextHolder}\n      </Modal>\n\n      {/* ✅ Work as expect when put here */}\n      {/* {contextHolder} */}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import Configuration for Ant Design in Babel Config\nDESCRIPTION: Demonstrates how to update Babel configuration (e.g., in `.babelrc` or `babel.config.js`) for Ant Design v5 by removing the `babel-plugin-import` entry specifically configured for the `antd` library. This plugin is obsolete in v5 because CSS-in-JS handles on-demand style importing.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n\"plugins\": [\n- [\"import\", { \"libraryName\": \"antd\", \"libraryDirectory\": \"lib\"}, \"antd\"],\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtual Table in React\nDESCRIPTION: Basic usage of virtual scrolling in Ant Design Table component with scroll configuration for both horizontal and vertical directions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Table virtual scroll={{ x: 2000, y: 500 }} {...otherProps} />\n```\n\n----------------------------------------\n\nTITLE: Defining ImgInfo Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `ImgInfo` used within the Ant Design Image component's preview rendering functions (`imageRender`, `toolbarRender`). It provides basic information about the image being previewed, including its URL, alt text, width, and height.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  url: string;\n  alt: string;\n  width: string | number;\n  height: string | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using getValueFromEvent for Aggregate Field Update (TSX)\nDESCRIPTION: Illustrates the conceptual use of `getValueFromEvent` within a `Form.Item`. This function receives the aggregated value array (`values`) from the child component's change event. It then uses `form.setFields` to update the corresponding individual fields in the FormStore based on the `names` array. It returns the first value (`values[0]`) as the value for the primary `name` associated with the `Form.Item`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ngetValueFromEvent={(values) => {\n    form.setFields(names.map((name, index) => ({ name, value: values[index] })));\n    return values[0];\n}}\n```\n\n----------------------------------------\n\nTITLE: Anchor Props API Table in Markdown\nDESCRIPTION: Markdown table describing the API props for the Anchor component, including parameters like affix, bounds, getContainer, and other configuration options.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| affix | 固定模式 | boolean \\| Omit<AffixProps, 'offsetTop' \\| 'target' \\| 'children'> | true | object: 5.19.0 |\n| bounds | 锚点区域边界 | number | 5 |  |\n| getContainer | 指定滚动的容器 | () => HTMLElement | () => window |  |\n| getCurrentAnchor | 自定义高亮的锚点 | (activeLink: string) => string | - |  |\n| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number |  |  |\n| showInkInFixed | `affix={false}` 时是否显示小方块 | boolean | false |  |\n| targetOffset | 锚点滚动偏移量，默认与 offsetTop 相同，[例子](#anchor-demo-targetoffset) | number | - |  |\n| onChange | 监听锚点链接改变 | (currentActiveLink: string) => void | - |  |\n| onClick | `click` 事件的 handler | (e: MouseEvent, link: object) => void | - |  |\n| items | 数据化配置选项内容，支持通过 children 嵌套 | { key, href, title, target, children }\\[] [具体见](#anchoritem) | - | 5.1.0 |\n| direction | 设置导航方向 | `vertical` \\| `horizontal` | `vertical` | 5.2.0 |\n| replace | 替换浏览器历史记录中项目的 href 而不是推送它 | boolean | false | 5.7.0 |\n```\n\n----------------------------------------\n\nTITLE: Disabling Hash in CSS Variable Mode\nDESCRIPTION: Demonstrates how to disable the hash feature when using CSS variables, which can further reduce style size if only one antd version is used.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/css-variables.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider theme={{ cssVar: true, hashed: false }}>\n  <App />\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Mask Styles to Ant Design Tour in TypeScript/React\nDESCRIPTION: The './demo/mask.tsx' code snippet presents how to apply custom mask styles to the highlighted region of the Ant Design Tour. Dependencies include React and Ant Design. By adjusting mask and style props, this demo showcases changing the color and appearance of the overlay mask. Key inputs include mask style and color, and the output is a visually distinct Tour effect. No advanced logic is present.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/mask.tsx\\\">Custom mask style</code>\n```\n\n----------------------------------------\n\nTITLE: Updating BackTop Component Usage with FloatButton in React (JSX)\nDESCRIPTION: Illustrates replacing the deprecated `BackTop` component with the new `FloatButton.BackTop` component introduced in Ant Design v5.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { BackTop } from 'antd';\n+ import { FloatButton } from 'antd';\n\n  const App: React.FC = () => (\n    <>\n-     <BackTop />\n+     <FloatButton.BackTop />\n    </>\n  );\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Badge Component with Combined Properties in React\nDESCRIPTION: This code snippet shows various examples of the Badge component using combinations of count, status, color, and dot properties. It demonstrates different styling options and badge configurations in a grid layout.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/mix.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Space, Divider } from 'antd';\n\nconst App: React.FC = () => (\n  <>\n    <Space>\n      <Badge count={5} status=\"success\" />\n      <Badge count={5} status=\"warning\" />\n      <Badge count={5} status=\"error\" />\n      <Badge count={5} color=\"#faad14\" />\n      <Badge count={5} color=\"#52c41a\" />\n      <Badge count={5} color=\"#eb2f96\" />\n      <Badge count={5} color=\"#f50\" />\n    </Space>\n\n    <Divider />\n\n    <Space>\n      <Badge dot status=\"success\" />\n      <Badge dot status=\"warning\" />\n      <Badge dot status=\"error\" />\n      <Badge dot color=\"#faad14\" />\n      <Badge dot color=\"#52c41a\" />\n      <Badge dot color=\"#eb2f96\" />\n      <Badge dot color=\"#f50\" />\n    </Space>\n\n    <Divider />\n\n    <Space>\n      <Badge dot status=\"success\">\n        Success\n      </Badge>\n      <Badge dot status=\"warning\">\n        Warning\n      </Badge>\n      <Badge dot status=\"error\">\n        Error\n      </Badge>\n      <Badge dot color=\"#faad14\">\n        #faad14\n      </Badge>\n      <Badge dot color=\"#52c41a\">\n        #52c41a\n      </Badge>\n      <Badge dot color=\"#eb2f96\">\n        #eb2f96\n      </Badge>\n      <Badge dot color=\"#f50\">\n        #f50\n      </Badge>\n    </Space>\n\n    <Divider />\n\n    <Space>\n      <Badge count={5} status=\"success\">\n        Success\n      </Badge>\n      <Badge count={5} status=\"warning\">\n        Warning\n      </Badge>\n      <Badge count={5} status=\"error\">\n        Error\n      </Badge>\n      <Badge count={5} color=\"#faad14\">\n        #faad14\n      </Badge>\n      <Badge count={5} color=\"#52c41a\">\n        #52c41a\n      </Badge>\n      <Badge count={5} color=\"#eb2f96\">\n        #eb2f96\n      </Badge>\n      <Badge count={5} color=\"#f50\">\n        #f50\n      </Badge>\n    </Space>\n  </>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Page Jump in Ant Design Pagination Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to create a pagination component with a quick jump feature using Ant Design in React. It allows users to enter a page number and quickly navigate to that page.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/demo/jump.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Pagination } from 'antd';\n\nconst App = () => (\n  <Pagination\n    total={85}\n    showSizeChanger\n    showQuickJumper\n    showTotal={(total) => `Total ${total} items`}\n  />\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Referencing Usage Demos with Source Codes in Ant Design React Markdown\nDESCRIPTION: These snippets demonstrate how to include external TypeScript/React demo files in the documentation, associating each code example with a visible demo and a label. Dependencies include the Ant Design Slider component and a Markdown environment that supports code snippet references. Each snippet links to a demo that illustrates a specific behavior or feature, providing readers with practical implementation samples without directly embedding the source; inputs are the demo file paths, and outputs are rendered code blocks or interactive demos.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/input-number.tsx\">Slider with InputNumber</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/icon-slider.tsx\">Slider with icon</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/tip-formatter.tsx\">Customize tooltip</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/event.tsx\">Event</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/mark.tsx\">Graduated slider</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/show-tooltip.tsx\">Control visible of ToolTip</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/reverse.tsx\">Reverse</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/draggableTrack.tsx\">Draggable track</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/multiple.tsx\">Multiple handles</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/editable.tsx\" version=\"5.20.0\">Dynamic edit nodes</code>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Icons Package (Multiple Managers)\nDESCRIPTION: Demonstrates how to install the `@ant-design/icons` package using different package managers (npm, yarn, pnpm, bun). This package is required to use Ant Design icons in a project.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ant-design/icons@5.x --save\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ant-design/icons@5.x\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @ant-design/icons@5.x --save\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @ant-design/icons@5.x\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group Components in TSX\nDESCRIPTION: Demonstrates recommended and not recommended approaches for implementing Radio Group components. Shows the preferred method using options array versus direct Radio children.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// When use Radio.Group, recommended ✅\nreturn (\n  <Radio.Group\n    value={value}\n    options={[\n      { value: 1, label: \"A\" },\n      { value: 2, label: \"B\"},\n      { value: 3, label: \"C\" },\n    ]}\n  />\n);\n\n// No recommended 🙅🏻‍♀️\nreturn (\n  <Radio.Group value={value}>\n    <Radio value={1}>A</Radio>\n    <Radio value={2}>B</Radio>\n    <Radio value={3}>C</Radio>\n  </Radio.Group>\n);\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Component Methods\nDESCRIPTION: Available methods for programmatically controlling the AutoComplete component focus state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n```\n\n----------------------------------------\n\nTITLE: Implementing px2rem Transformation\nDESCRIPTION: Configuration for px to rem unit conversion using px2remTransformer with customizable root value.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { px2remTransformer, StyleProvider } from '@ant-design/cssinjs';\n\nconst px2rem = px2remTransformer({\n  rootValue: 32, // 32px = 1rem; @default 16\n});\n\nexport default () => (\n  <StyleProvider transformers={[px2rem]}>\n    <MyApp />\n  </StyleProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Link Props API Table in Markdown\nDESCRIPTION: Markdown table describing the API props for the Link component, which is a legacy way to configure Anchor links before the items prop was introduced.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数   | 说明                           | 类型      | 默认值 | 版本 |\n| ------ | ------------------------------ | --------- | ------ | ---- |\n| href   | 锚点链接                       | string    | -      |      |\n| target | 该属性指定在何处显示链接的资源 | string    | -      |      |\n| title  | 文字内容                       | ReactNode | -      |      |\n```\n\n----------------------------------------\n\nTITLE: Initializing Pagination Component in JSX\nDESCRIPTION: Basic usage of the Pagination component with onChange event handler and total prop. This snippet demonstrates how to set up a simple pagination control.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Pagination onChange={onChange} total={50} />\n```\n\n----------------------------------------\n\nTITLE: Result Component API Definition in TypeScript\nDESCRIPTION: API specification for the Result component showing available properties and their types.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResultProps {\n  extra?: ReactNode;\n  icon?: ReactNode;\n  status?: 'success' | 'error' | 'info' | 'warning' | '404' | '403' | '500';\n  subTitle?: ReactNode;\n  title?: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic prefixCls with CSS-in-JS (TSX)\nDESCRIPTION: This TSX snippet demonstrates creating a custom provider (`GeekProvider`) that uses CSS-in-JS (`antd-style`) to apply styles while correctly handling potentially dynamic `prefixCls` values from Ant Design's `ConfigProvider.ConfigContext`. It retrieves the current prefix for the button component (`btnPrefixCls`), incorporates it into the generated CSS, and applies the resulting class name to the Button component via a nested `ConfigProvider`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// This is an example of using `antd-style`, you can use any CSS-in-JS library.\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\nimport { createStyles } from 'antd-style';\n\nconst useButtonStyle = createStyles(({ css }, prefixCls: string) => {\n  return {\n    btn: css`\n      background: red;\n      .${prefixCls}-icon {\n        color: green;\n      }\n    `,\n  };\n});\n\nconst GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {\n  const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);\n  const btnPrefixCls = getPrefixCls('btn');\n  const { styles } = useButtonStyle(btnPrefixCls);\n  return <ConfigProvider button={{ className: styles.btn }}>{props.children}</ConfigProvider>;\n};\n\nexport default GeekProvider;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Row Span Example in React\nDESCRIPTION: Example demonstrating dynamic row span configuration using onCell prop with state management.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Demo = () => {\n  const [spanCount, setSpanCount] = useState(3);\n\n  const columns = [{\n    dataIndex: 'group',\n    onCell: (_, index) => ({\n      rowSpan: index % spanCount === 0 ? spanCount : 0,\n    }),\n  }];\n\n  React.useEffect(() => {\n    setSpanCount(5);\n  }, []);\n\n  return <Table columns={columns} {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Ant Design CSS in Next.js _app.tsx\nDESCRIPTION: Shows how to import the pre-generated Ant Design CSS file (e.g., `../public/antd.min.css`) into the main application component (`_app.tsx`) of a Next.js project as part of the 'Whole Export' strategy. It also includes wrapping the application with `@ant-design/cssinjs`'s `StyleProvider`, potentially for handling dynamic styles added client-side, setting `hashPriority` to `high`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleProvider } from '@ant-design/cssinjs';\nimport type { AppProps } from 'next/app';\n\nimport '../public/antd.min.css'; // add this line\nimport '../styles/globals.css';\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <StyleProvider hashPriority=\"high\">\n      <Component {...pageProps} />\n    </StyleProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Rating Characters in Ant Design React\nDESCRIPTION: This code snippet demonstrates how to replace the default star icon in Ant Design's Rating component with various alternative characters, including letters, numbers, icons, and Chinese characters.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/character.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rate } from 'antd';\nimport { HeartOutlined } from '@ant-design/icons';\n\nReactDOM.render(\n  <>\n    <Rate character={<HeartOutlined />} allowHalf />\n    <br />\n    <Rate character=\"A\" allowHalf style={{ fontSize: 36 }} />\n    <br />\n    <Rate character=\"好\" allowHalf />\n  </>,\n  mountNode,\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Transform Origin Using Mouse Position - rc-dialog (TypeScript pseudocode)\nDESCRIPTION: This pseudocode snippet illustrates how rc-dialog calculates the CSS transformation origin for dialog animations using mouse position and the dialog DOM element's offset. The `offset` function (external) determines the dialog element's offset within the page. Dependencies: rc-dialog, knowledge of React and DOM APIs. Inputs: mousePosition, dialogElement. Outputs: a string representing the transformOrigin to be used for animation styles. Required that dialogElement is present in DOM for correct calculation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\\nconst elementOffset = offset(dialogElement);\\nconst transformOrigin = `${mousePosition.x - elementOffset.left}px ${\\n  mousePosition.y - elementOffset.top\\n}px`;\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Generic Type Definition\nDESCRIPTION: Type optimization for Breadcrumb params supporting generic types for better type inference\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BreadcrumbParams<T> {\n  params: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Ant Design Rows with Custom Background - CSS\nDESCRIPTION: This CSS snippet sets a subtle background color for all elements with class 'ant-row' that are descendants of the #grid-demo-flex-order container. The style creates a light gray background using an RGBA value, helping visually distinguish grid rows. No external dependencies are required—this can be placed in any stylesheet loaded after Ant Design's base styles. Ensure selectors are scoped appropriately to avoid affecting unrelated elements. The snippet does not alter order directly but demonstrates preparation for further order-based layout changes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/flex-order.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#grid-demo-flex-order [class~='ant-row'] {\n  background: rgba(128, 128, 128, 0.08);\n}\n```\n\n----------------------------------------\n\nTITLE: Well-Formatted React Component Example\nDESCRIPTION: Example showing properly formatted React/TypeScript code with correct imports, typing, and component structure.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Menu } from 'antd';\n\nconst Demo: React.FC = () => {\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n\n  const toggle = () => setCollapsed(!collapsed);\n\n  return <Menu>...</Menu>;\n};\n\nexport default Demo;\n```\n\n----------------------------------------\n\nTITLE: Styling Space Alignment Container and Blocks in CSS\nDESCRIPTION: This CSS snippet defines styles for a flexible container and aligned blocks. It creates a layout for demonstrating different alignment options, with a container that wraps its content and individual blocks with mock content.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/align.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.space-align-container {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n}\n.space-align-block {\n  flex: none;\n  margin: 8px 4px;\n  padding: 4px;\n  border: 1px solid #40a9ff;\n}\n.space-align-block .mock-block {\n  display: inline-block;\n  padding: 32px 8px 16px;\n  background: rgba(150, 150, 150, 0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Affix with Absolute Positioning in React\nDESCRIPTION: Demonstrates how to use the Affix component with absolute positioning. This is an exception to the rule that children of Affix should not have absolute positioning.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/affix/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button-Style Radio Group in React with Ant Design\nDESCRIPTION: This code snippet shows how to create a radio button group with button styling using Ant Design's Radio component in a React application. It demonstrates different sizes and disabled states for the radio buttons.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/demo/radiobutton.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Radio } from 'antd';\n\nconst App: React.FC = () => (\n  <>\n    <Radio.Group defaultValue=\"a\" buttonStyle=\"solid\">\n      <Radio.Button value=\"a\">Hangzhou</Radio.Button>\n      <Radio.Button value=\"b\">Shanghai</Radio.Button>\n      <Radio.Button value=\"c\">Beijing</Radio.Button>\n      <Radio.Button value=\"d\">Chengdu</Radio.Button>\n    </Radio.Group>\n    <Radio.Group defaultValue=\"a\" style={{ marginTop: 16 }}>\n      <Radio.Button value=\"a\">Hangzhou</Radio.Button>\n      <Radio.Button value=\"b\">Shanghai</Radio.Button>\n      <Radio.Button value=\"c\">Beijing</Radio.Button>\n      <Radio.Button value=\"d\">Chengdu</Radio.Button>\n    </Radio.Group>\n    <Radio.Group disabled defaultValue=\"a\" style={{ marginTop: 16 }}>\n      <Radio.Button value=\"a\">Hangzhou</Radio.Button>\n      <Radio.Button value=\"b\">Shanghai</Radio.Button>\n      <Radio.Button value=\"c\">Beijing</Radio.Button>\n      <Radio.Button value=\"d\">Chengdu</Radio.Button>\n    </Radio.Group>\n    <Radio.Group defaultValue=\"a\" buttonStyle=\"solid\" style={{ marginTop: 16 }}>\n      <Radio.Button value=\"a\">Hangzhou</Radio.Button>\n      <Radio.Button value=\"b\" disabled>\n        Shanghai\n      </Radio.Button>\n      <Radio.Button value=\"c\">Beijing</Radio.Button>\n      <Radio.Button value=\"d\">Chengdu</Radio.Button>\n    </Radio.Group>\n    <Radio.Group size=\"large\" defaultValue=\"a\" style={{ marginTop: 16 }}>\n      <Radio.Button value=\"a\">Hangzhou</Radio.Button>\n      <Radio.Button value=\"b\">Shanghai</Radio.Button>\n      <Radio.Button value=\"c\">Beijing</Radio.Button>\n      <Radio.Button value=\"d\">Chengdu</Radio.Button>\n    </Radio.Group>\n    <Radio.Group size=\"small\" defaultValue=\"a\" style={{ marginTop: 16 }}>\n      <Radio.Button value=\"a\">Hangzhou</Radio.Button>\n      <Radio.Button value=\"b\">Shanghai</Radio.Button>\n      <Radio.Button value=\"c\">Beijing</Radio.Button>\n      <Radio.Button value=\"d\">Chengdu</Radio.Button>\n    </Radio.Group>\n  </>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Out-of-Range Behavior Example (TSX)\nDESCRIPTION: References `./demo/out-of-range.tsx`, demonstrating the behavior of the Ant Design InputNumber component when values potentially go outside the defined `min` and `max` range in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/out-of-range.tsx\">Out of range</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gap Between Flex Items - Ant Design - TypeScript/TSX\nDESCRIPTION: This references the \"gap.tsx\" file, demonstrating how the Ant Design Flex component handles custom gaps/spaces between items using the \"gap\" prop. The example likely highlights supported gap values and their visual impact. Prerequisites include React and Flex component usage. It accepts gap as a prop (small/middle/large/string/number) and visually affects space between children.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/gap.tsx\\\">gap</code>\n```\n\n----------------------------------------\n\nTITLE: Defining the ShowEffect Callback Type for Custom Wave Effect in Ant Design (TypeScript)\nDESCRIPTION: Defines the TypeScript type signature for the showEffect function used by ConfigProvider's wave property, specifying how Ant Design communicates the target DOM node, the component identifier, and the current global theme token. Dependencies: access to appropriate type definitions, including HTMLElement and GlobalToken. Inputs include the clicked target element and info metadata; the function handles the effect as needed. No outputs are enforced; implementation is developer-defined.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/happy-work.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ShowEffect = (target: HTMLElement, info: { component: string; token: GlobalToken }) => void;\n```\n\n----------------------------------------\n\nTITLE: CSS Logical Properties Transformation\nDESCRIPTION: Implementation of StyleProvider with legacyLogicalPropertiesTransformer to handle CSS logical properties compatibility.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { legacyLogicalPropertiesTransformer, StyleProvider } from '@ant-design/cssinjs';\n\n// `transformers` provides a way to transform CSS properties\nexport default () => (\n  <StyleProvider transformers={[legacyLogicalPropertiesTransformer]}>\n    <MyApp />\n  </StyleProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Optimized Record Flattening Implementation\nDESCRIPTION: Improved version of the flattening function that avoids unnecessary array allocations and reduces garbage collection overhead.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction flatten<T extends { children?: T[] }>(data: T[] = [], list: T[] = []) {\n  for (let i = 0; i < data.length; i += 1) {\n    const record = data[i];\n    list.push(record);\n    flatten(record.children, list);\n  }\n\n  return list;\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Property Configuration\nDESCRIPTION: Example of ConfigProvider semantic props configuration for components\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nConfigProvider support={{ classNames, styles }}\n```\n\n----------------------------------------\n\nTITLE: Referencing Controlled FloatButton Group Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/controlled.tsx') demonstrating how to control the open state of an Ant Design FloatButton.Group component using the 'open' prop. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/controlled.tsx\" iframe=\"360\">Controlled mode</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Safari Folder Upload Accept Property in JSX\nDESCRIPTION: Workaround for Safari folder upload selection issue by setting an accept property with an impossible file extension match pattern.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\naccept: `.${'n'.repeat(100)}`;\n```\n\n----------------------------------------\n\nTITLE: Applying Max Value Constraint to Ant Design InputNumber (Diff)\nDESCRIPTION: This diff snippet shows how to add a maximum value constraint to the Ant Design `InputNumber` component within the previously defined form. The `max={99}` prop is added to limit the acceptable number input, relevant to a scenario where product prices cannot exceed $99.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--  <InputNumber />\n++  <InputNumber max={99} />\n```\n\n----------------------------------------\n\nTITLE: Importing Space Component in TypeScript\nDESCRIPTION: Basic usage example of the Space component, imported from the Ant Design library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/base.tsx\">基本用法</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Design Table Row Keys\nDESCRIPTION: Demonstrates how to specify primary keys for Table rows using the rowKey prop. This is necessary when the default key property is not available in the data source.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// primary key is uid\nreturn <Table rowKey=\"uid\" />;\n// or\nreturn <Table rowKey={(record) => record.uid} />;\n```\n\n----------------------------------------\n\nTITLE: Nesting Space Compact Components\nDESCRIPTION: This code snippet shows how to nest Space Compact components for more complex layouts.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/compact-nested.tsx\" debug>Nested Space Compact</code>\n```\n\n----------------------------------------\n\nTITLE: Calculating Hue and Alpha from Slider Offset in TypeScript\nDESCRIPTION: This TypeScript snippet determines the hue (in degrees, 0-360) and alpha (opacity, 0-1) based on slider pointer positions. It expects that containerRef and targetRef point to the slider and handle respectively, and 'offset.x' is the pointer's X-axis offset. 'hue' maps linear offset to degrees while 'alpha' normalizes the offset to a 0-1 range. This translation is central to updating the displayed color's tone and transparency in response to user interaction.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n...\nconst { width, height } = containerRef.current.getBoundingClientRect();\nconst { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();\nconst centerOffsetX = targetWidth / 2;\nconst centerOffsetY = targetHeight / 2;\n// Hue\nconst hue = ((offset.x + centerOffsetX) / width) * 360;\n// Opacity\nconst alpha = (offset.x + centerOffsetX) / width;\n```\n\n----------------------------------------\n\nTITLE: Defining a Primary Button using Type (JSX)\nDESCRIPTION: This JSX snippet demonstrates creating an Ant Design primary button using the `type=\"primary\"` prop. This is presented as a shorthand syntax for a standard filled primary button.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button type=\"primary\">click</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Icons via Form `feedbackIcons` Prop (Ant Design/React)\nDESCRIPTION: This snippet demonstrates setting custom feedback icons globally for an Ant Design `Form` component using the `feedbackIcons` prop. The `icons` variable passed to this prop should contain the custom icon definitions. These icons will be applied to child `Form.Item` components that have the `hasFeedback` attribute.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/custom-feedback-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Form feedbackIcons={icons}>\n```\n\n----------------------------------------\n\nTITLE: Defining Preview Toolbar Customization Info in TypeScript\nDESCRIPTION: TypeScript interface `ToolbarRenderInfoType` specifies the data passed to the `toolbarRender` function for customizing the image preview toolbar. It includes predefined icon nodes, action callbacks (like zoom, rotate, flip, reset, close), the current transform state, image index/total, and image details (`ImgInfo`).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  icons: {\n    flipYIcon: React.ReactNode;\n    flipXIcon: React.ReactNode;\n    rotateLeftIcon: React.ReactNode;\n    rotateRightIcon: React.ReactNode;\n    zoomOutIcon: React.ReactNode;\n    zoomInIcon: React.ReactNode;\n  };\n  actions: {\n    onActive?: (index: number) => void; // 5.21.0 之后支持\n    onFlipY: () => void;\n    onFlipX: () => void;\n    onRotateLeft: () => void;\n    onRotateRight: () => void;\n    onZoomOut: () => void;\n    onZoomIn: () => void;\n    onReset: () => void; // 5.17.3 之后支持\n    onClose: () => void;\n  };\n  transform: TransformType,\n  current: number;\n  total: number;\n  image: ImgInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Cache Path Extraction\nDESCRIPTION: JavaScript code demonstrating how to extract the cache path information on the client side using getComputedStyle.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Just example. Not real world code\nconst measure = document.createElement('div');\nmeasure.className = 'cssinjs-cache-path';\ndocument.body.appendChild(measure);\n\n// Now let's parse the `content`\nconst { content } = getComputedStyle(measure);\n```\n\n----------------------------------------\n\nTITLE: Semantic Versioning Reference Link\nDESCRIPTION: Shows the semantic versioning specification that Ant Design follows for version numbering\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`antd` follows [Semantic Versioning 2.0.0](http://semver.org/).\n```\n\n----------------------------------------\n\nTITLE: Defining Column Sorter Function in Ant Design Table (JavaScript)\nDESCRIPTION: Specifies a function for the `sorter` property in an Ant Design table column definition to enable local data sorting. The function receives two row data objects (`rowA`, `rowB`) as arguments for comparison and should return a negative, zero, or positive value.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/head.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsorter: function(rowA, rowB) { ... }\n```\n\n----------------------------------------\n\nTITLE: Initializing Mentions Component in React/JSX\nDESCRIPTION: Demonstrates the recommended usage of the Mentions component with options prop, and the deprecated usage with Mentions.Option child components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// works when >=5.1.0, recommended ✅\nconst options = [{ value: 'sample', label: 'sample' }];\nreturn <Mentions options={options} />;\n\n// works when <5.1.0, deprecated when >=5.1.0 🙅🏻‍♀️\nreturn (\n  <Mentions onChange={onChange}>\n    <Mentions.Option value=\"sample\">Sample</Mentions.Option>\n  </Mentions>\n);\n```\n\n----------------------------------------\n\nTITLE: Converting DOM Interaction and Assertions from Enzyme to Testing Library - JavaScript\nDESCRIPTION: The snippet illustrates how to replace Enzyme's component instance/manipulation and assertion APIs with native DOM operations and fireEvent in React Testing Library. It swaps out methods like find and props for querySelector and evaluates element presence to match assertions. Input parameters include DOM selectors and component containers, and the output is assertion results for component visibility or state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n    expect(ref.current.getPopupDomNode()).toBe(null);\\n--  popover.find('span').simulate('click');\\n--  expect(popover.find('Trigger PopupInner').props().visible).toBeTruthy();\\n\\n++  expect(container.querySelector('.ant-popover-inner-content')).toBeFalsy();\\n++  fireEvent.click(popover.container.querySelector('span'));\\n++  expect(container.querySelector('.ant-popover-inner-content')).toBeTruthy();\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for Relocated PageHeader and Comment Components in React (JSX)\nDESCRIPTION: Shows how to update import statements for `PageHeader` and `Comment` components, which were moved from the core `antd` package to `@ant-design/pro-components` and `@ant-design/compatible` respectively in v5.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import { PageHeader, Comment } from 'antd';\n+ import { Comment } from '@ant-design/compatible';\n+ import { PageHeader } from '@ant-design/pro-components';\n  // 如果是蚂蚁内网用户建议从 @alipay/tech-ui 引入\n  // import { PageHeader } from '@alipay/tech-ui';\n\n  const App: React.FC = () => (\n    <>\n      <PageHeader />\n      <Comment />\n    </>\n  );\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Borderless Tag in Ant Design (React, TSX)\nDESCRIPTION: This snippet shows how to use the Tag component without borders, enhancing visual subtlety. It demonstrates setting the 'bordered' prop to false in Ant Design's Tag component. Useful for low-key labeling or Apple-style tags.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/borderless.tsx\\\">borderless</code>\n```\n\n----------------------------------------\n\nTITLE: Borderless Tag Layout Demo in Ant Design (React, TSX)\nDESCRIPTION: This snippet extends the borderless Tag usage by incorporating it within various layouts for more advanced UI arrangement. It requires Ant Design's Tag with 'bordered' prop turned off, and demonstrates its interaction or arrangement with other components or layouts.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/borderlessLayout.tsx\\\" debug>borderless in layout</code>\n```\n\n----------------------------------------\n\nTITLE: Creating a Category Form Component with Refine and Ant Design\nDESCRIPTION: Example of a React component using Refine's hooks and Ant Design components to create a form for adding a new category. It demonstrates the integration of Refine's form handling with Ant Design's Form and Input components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-refine.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Create, useForm } from '@refinedev/antd';\nimport { Form, Input } from 'antd';\n\nexport const CategoryCreate = () => {\n  const { formProps, saveButtonProps } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout=\"vertical\">\n        <Form.Item label={'Title'} name={['title']} rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Description Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/description.tsx') demonstrating how to add a description to the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/description.tsx\" iframe=\"360\">Description</code>\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Cascader (Markdown)\nDESCRIPTION: This table lists Less variables previously used for styling the Ant Design Cascader component and maps them to their corresponding Component Tokens in the newer theming system. It also notes deprecated variables and those related to global tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@cascader-bg` | - | Deprecated |\n| `@cascader-item-selected-bg` | `optionSelectedBg` | - |\n| `@cascader-menu-bg` | - | Deprecated |\n| `@cascader-menu-border-color-split` | `colorSplit` | Global Token |\n| `@cascader-dropdown-vertical-padding` | `optionPadding` | - |\n| `@cascader-dropdown-edge-child-vertical-padding` | `menuPadding` | - |\n| `@cascader-dropdown-font-size` | - | Deprecated |\n| `@cascader-dropdown-line-height` | `lineHeight` | Global Token |\n```\n\n----------------------------------------\n\nTITLE: Updating Select Component API for Popup ClassName in React (JSX)\nDESCRIPTION: Shows the migration from the deprecated `dropdownClassName` prop to the new `popupClassName` prop for specifying custom CSS classes on the Select component's popup dropdown in Ant Design v5.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  import { Select } from 'antd';\n\n  const App: React.FC = () => (\n    <Select\n-     dropdownClassName=\"my-select-popup\"\n+     popupClassName=\"my-select-popup\"\n    />\n  );\n\n  export default App;\n```\n\n----------------------------------------\n\nTITLE: Tracing useLayoutEffect vs useInsertionEffect Timing in React | TypeScript/React\nDESCRIPTION: Demonstrates the priority order of useInsertionEffect and useLayoutEffect in React 18 with console logs. Shows that useInsertionEffect is called before useLayoutEffect regardless of the order written in code. No external dependencies; logs to console only. Inputs/outputs are side-effects in the console for timing validation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nuseLayoutEffect(() => {\\n  console.log('layout effect');\\n}, []);\\n\\nuseInsertionEffect(() => {\\n  console.log('insertion effect');\\n}, []);\\n\\n// Console:\\n// - insertion effect\\n// - layout effect\n```\n\n----------------------------------------\n\nTITLE: Documenting Ant Design 5.0.1 Release\nDESCRIPTION: Markdown content detailing the changes and fixes in Ant Design version 5.0.1, including improvements to Empty, Form, Dropdown, Menu, and other components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_29\n\nLANGUAGE: Markdown\nCODE:\n```\n## 5.0.1\n\n`2022-11-22`\n\n- 💄 Optimize Empty svg color in dark theme. [#38785](https://github.com/ant-design/ant-design/pull/38785)\n- 💄 Fix Form, Input, Select, Tree part style convert to CSS-in-JS missing. [#38742](https://github.com/ant-design/ant-design/pull/38742)\n- 💄 Fix Dropdown animation flick in Firefox. [#38729](https://github.com/ant-design/ant-design/pull/38729)\n- Menu\n  - 🐞 Fix Menu SubMenu margin style. [#38714](https://github.com/ant-design/ant-design/pull/38714) [@JarvisArt](https://github.com/JarvisArt)\n  - 🐞 Fix Menu height in dark theme. [#38741](https://github.com/ant-design/ant-design/pull/38741) [@LuciNyan](https://github.com/LuciNyan)\n  - 🐞 Fix Menu SubMenu flicking when expanding. [#38748](https://github.com/ant-design/ant-design/pull/38748) [@JarvisArt](https://github.com/JarvisArt)\n- 🐞 Fix that Table expanded icons are not aligned. [#38823](https://github.com/ant-design/ant-design/pull/38823) [@turdiyev](https://github.com/turdiyev)\n- 🐞 Fix FloatButton.BackTop missing animation. [#38770](https://github.com/ant-design/ant-design/pull/38770) [@li-jia-nan](https://github.com/li-jia-nan)\n- 🛠 Remove `Moment.js` dependency. [#38762](https://github.com/ant-design/ant-design/pull/38762)\n- 🛠 Fix `CompoundedComponent` ts error. [#38666](https://github.com/ant-design/ant-design/pull/38666) [@wangcch](https://github.com/wangcch)\n- 🛠 Rollback `lib` in package. [#38832](https://github.com/ant-design/ant-design/pull/38832) [@chunsch](https://github.com/chunsch)\n```\n\n----------------------------------------\n\nTITLE: Adding Status to Mentions Component in Ant Design\nDESCRIPTION: This snippet shows how to use the 'status' prop to add either an 'error' or 'warning' state to the Mentions component in Ant Design. The status can be used to indicate validation states or other contextual information.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/status.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n使用 `status` 为 Mentions 添加状态。可选 `error` 或者 `warning`。\n\n## en-US\n\nAdd status to Mentions with `status`, which could be `error` or `warning`。\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Collapse (Markdown)\nDESCRIPTION: This table lists Less variables previously used for styling the Ant Design Collapse component and maps them to their corresponding Component Tokens in the newer theming system. It notes deprecated variables.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@collapse-header-padding` | `headerPadding` | - |\n| `@collapse-header-padding-extra` | - | Depreacated |\n| `@collapse-header-bg` | `headerBg` | - |\n| `@collapse-content-padding` | `contentPadding` | - |\n| `@collapse-content-bg` | `contentBg` | - |\n| `@collapse-header-arrow-left` | - | Deprecated |\n```\n\n----------------------------------------\n\nTITLE: Setting Tabs Indicator Alignment in JavaScript\nDESCRIPTION: Demonstration of using the new indicator.align property to set the alignment of the Tabs indicator bar.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Tabs indicator={{ align: 'start' }} />\n```\n\n----------------------------------------\n\nTITLE: Defining Image Preview Transform Actions in TypeScript\nDESCRIPTION: TypeScript type alias `TransformAction` enumerates the possible user or system actions (like zooming, rotating, closing, dragging) that can trigger a change in the image preview's transformation state. It's used in the `onTransform` callback to identify the action performed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransformAction =\n  | 'flipY'\n  | 'flipX'\n  | 'rotateLeft'\n  | 'rotateRight'\n  | 'zoomIn'\n  | 'zoomOut'\n  | 'close'\n  | 'prev'\n  | 'next'\n  | 'wheel'\n  | 'doubleClick'\n  | 'move'\n  | 'dragRebound'\n  | 'reset';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Custom SVG Icons (JavaScript)\nDESCRIPTION: Provides a Vite configuration snippet using the `vite-plugin-svgr` plugin. This setup enables importing SVG files as React components (using `?react` suffix if needed depending on config), facilitating their use within the Ant Design `Icon` component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.zh-CN.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nexport default defineConfig(() => ({\n  // ... other config\n  plugins: [svgr({ svgrOptions: { icon: true } })],\n}));\n```\n\n----------------------------------------\n\nTITLE: Switching to Ant Design v4 Theme with @ant-design/compatible in JavaScript\nDESCRIPTION: This React snippet demonstrates how to restore the Ant Design v4 theming style in a v5 project using the @ant-design/compatible package. It imports default and dark themes from @ant-design/compatible and applies the defaultTheme using ConfigProvider. Dependencies include @ant-design/compatible, antd, and React. It renders a primary button and a vertical radio group leveraging the legacy theme styles. Inputs are the imported components and outputs are the themed UI elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sandpackConfig = {\n  dependencies: {\n    '@ant-design/compatible': 'v5-compatible-v4',\n  },\n};\n\nimport {\n  defaultTheme,   // Default theme\n  darkTheme,      // Dark theme\n} from '@ant-design/compatible';\nimport { ConfigProvider, Button, Radio, Space } from 'antd';\n\nexport default () => (\n  <ConfigProvider theme={defaultTheme}>\n    <Space direction=\"vertical\">\n      <Button type=\"primary\">Button</Button>\n      <Radio.Group>\n        <Radio value={1}>A</Radio>\n        <Radio value={2}>B</Radio>\n        <Radio value={3}>C</Radio>\n        <Radio value={4}>D</Radio>\n      </Radio.Group>\n    </Space>\n  </ConfigProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Simulated Events from Enzyme to React Testing Library - JavaScript\nDESCRIPTION: This snippet shows how to replace Enzyme's simulate method for event handling with React Testing Library's fireEvent. The example adapts a simulated click on a slider handle element to use fireEvent.click, querying the DOM for the target. Dependencies include @testing-library/react, and the test expects compatible React component markup. Inputs are DOM selectors for the target element, and output is the triggered event for further assertions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n++  import { fireEvent } from '@testing-library/react';\\n\\n--  wrapper.find('.ant-handle').simulate('click');\\n++  fireEvent.click(container.querySelector('.ant-handle'));\n```\n\n----------------------------------------\n\nTITLE: Updating Button ref type in TypeScript\nDESCRIPTION: Optimizes the TypeScript type definition for Button ref.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Button `ref` type optimization\n```\n\n----------------------------------------\n\nTITLE: Styling a Wrapper for Ghost Buttons (CSS)\nDESCRIPTION: This CSS snippet defines styles for an element with the class `site-button-ghost-wrapper`. It applies padding and a specific background color, likely used within the documentation page itself to showcase ghost buttons effectively against a contrasting background.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.site-button-ghost-wrapper {\n  padding: 16px;\n  background: rgb(190, 200, 200);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles using ClassNames (Less)\nDESCRIPTION: This Less snippet shows how to define styles for a custom class name (`.my-button`) that was previously applied to an Ant Design Button component using ConfigProvider. It targets the button with the custom class and sets its background color.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: less\nCODE:\n```\n.my-button {\n  background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Animation Principles using Ant Design Components in React (JSX)\nDESCRIPTION: This React component illustrates three core animation principles (Natural, Performant, Concise) by mapping descriptive objects into Ant Design's Row and Col layout components. It demonstrates rendering structured content with images and text, using arrays and .map(). Dependencies include React, Ant Design's Row and Col components, and relevant CSS classes (e.g., 'principle'). Input consists of a 'text' array containing principle objects; output is a grid-styled visual summary of animation guidelines. The component is typically used in documentation sites or design guideline pages to exemplify interactive UI best practices.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/motion.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * inline: true\n */\n\nimport { Col, Row } from 'antd';\n\nconst text = [\n  {\n    title: 'Natural',\n    img: 'https://gw.alipayobjects.com/zos/rmsportal/LyTPSGknLUlxiVdwMWyu.gif',\n    content:\n      'The animation should based on law of nature. This assures the animation is smooth by its nature and intuitive to its users.',\n  },\n  {\n    title: 'Performant',\n    img: 'https://gw.alipayobjects.com/zos/rmsportal/SQOZVQVIossbXpzDmihu.gif',\n    content:\n      'The animation should have a transition time as minimal as possible so that it serves its purpose in the most effective way.',\n  },\n  {\n    title: 'Concise',\n    img: 'https://gw.alipayobjects.com/zos/rmsportal/OkIXkscKxywYLSrilPIf.gif',\n    content:\n      'The animation should be meaningful and justified. An over fancy animation will frustrate its users, and therefore should always be avoided.',\n  },\n];\n\nfunction Principle() {\n  const childrenToRender = text.map((item) => (\n    <Col key={item.title} sm={24} md={8}>\n      <div className=\"principle\">\n        <div>\n          <img src={item.img} width=\"80%\" />\n        </div>\n        <h4>{item.title}</h4>\n        <p>{item.content}</p>\n      </div>\n    </Col>\n  ));\n  return (\n    <div className=\"motion-principle-wrapper\">\n      <Row gutter={{ md: 32, sm: 0 }} className=\"principle-wrapper\">\n        {childrenToRender}\n      </Row>\n    </div>\n  );\n}\n\nexport default Principle;\n```\n\n----------------------------------------\n\nTITLE: Defining a Primary Button using Color and Variant (JSX)\nDESCRIPTION: This JSX snippet shows the equivalent way to create an Ant Design primary button using the `color=\"primary\"` and `variant=\"solid\"` props. The documentation explains that this provides more explicit control and is functionally identical to using `type=\"primary\"`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/button/index.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button color=\"primary\" variant=\"solid\">\n  click\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Tag in Ant Design (React, TSX)\nDESCRIPTION: This snippet demonstrates how to use Tag to represent different statuses (such as processing, success, warning, error) by color and/or icon. Requires Ant Design's Tag component and passing appropriate props for visual status cues. Useful for dashboards and status displays.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/status.tsx\\\">Status Tag</code>\n```\n\n----------------------------------------\n\nTITLE: Customizing Styles for Ant Design Divider in React/TSX\nDESCRIPTION: References a demo file (`./demo/customize-style.tsx`) demonstrating how to apply custom CSS styles using the `style` or `className` props on the Ant Design `Divider` component in React/TypeScript. Marked as 'debug'.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/customize-style.tsx\" debug>Style Customization</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductList Component in React\nDESCRIPTION: React component for displaying a list of products using Ant Design Table and Popconfirm components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button, Popconfirm, Table } from 'antd';\nimport type { TableProps } from 'antd';\n\ninterface DataType {\n  id: string;\n  name: string;\n}\n\nconst ProductList: React.FC<{ products: DataType[]; onDelete: (id: string) => void }> = ({\n  onDelete,\n  products,\n}) => {\n  const columns: TableProps<DataType>['columns'] = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n    },\n    {\n      title: 'Actions',\n      render(text, record) {\n        return (\n          <Popconfirm title=\"Delete?\" onConfirm={() => onDelete(record.id)}>\n            <Button>Delete</Button>\n          </Popconfirm>\n        );\n      },\n    },\n  ];\n  return <Table rowKey=\"id\" dataSource={products} columns={columns} />;\n};\n\nexport default ProductList;\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Type in TypeScript\nDESCRIPTION: Defines the Rule type as either a RuleConfig object or a function that returns a RuleConfig object. This allows for both static and dynamic rule configurations in form validation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ntype Rule = RuleConfig | ((form: FormInstance) => RuleConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Spin Indicator in TypeScript\nDESCRIPTION: This code snippet shows how to set a default spin indicator globally using the static method Spin.setDefaultIndicator. It allows customization of the default spinning element across the application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSpin.setDefaultIndicator(indicator: ReactNode)\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Ellipsis Implementation in TypeScript/React\nDESCRIPTION: Basic CSS implementation of text ellipsis using webkit-line-clamp property to limit text to specific number of lines.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  style={{\n    display: '-webkit-box',\n    overflow: 'hidden',\n    WebkitBoxOrient: 'vertical',\n    webkitLineClamp: 3,\n  }}\n>\n  {text}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Aligning Elements with Space Component\nDESCRIPTION: Example showing how to align elements using the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/align.tsx\">对齐</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wave Effect in ConfigProvider\nDESCRIPTION: ConfigProvider now supports customizing the wave ripple effect through the 'wave' property.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ConfigProvider wave={{ ... }}>\n  {/* ... */}\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependencies for Umi Project\nDESCRIPTION: Commands to install additional packages including Ant Design, Axios, and Pro Components for the Umi project.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i @umijs/plugins -D\n$ pnpm i antd axios @ant-design/pro-components -S\n```\n\n----------------------------------------\n\nTITLE: Manual Handling of Aggregate Fields in Ant Design Form (TSX)\nDESCRIPTION: Demonstrates the standard approach to handling aggregate fields (like province and city) in an Ant Design Form using `Cascader`. It requires manual data transformation within `initialValues` to combine fields for the component and within `onFinish` to split the component's value back into separate fields before submission.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Form } from 'antd';\n\nconst data = { province: 'Beijing', city: 'Haidian' };\nconst options = [\n  { value: 'zhejiang', label: 'Zhejiang', children: [{ value: 'hangzhou', label: 'Hangzhou' }] },\n  { value: 'jiangsu', label: 'Jiangsu', children: [{ value: 'nanjing', label: 'Nanjing' }] },\n];\nconst createUser = (values) => console.log(values);\n\nconst Demo = () => (\n  <Form\n    initialValues={{ province: [data.province, data.city] }}\n    onFinish={(values) => {\n      const { province, ...rest } = values;\n      createUser({ province: province[0], city: province[1], ...rest });\n    }}\n  >\n    <Form.Item label=\"Address\" name=\"province\">\n      <Cascader options={options} placeholder=\"Please select\" />\n    </Form.Item>\n  </Form>\n);\nexport default Demo;\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Style Override Debug Example (TSX)\nDESCRIPTION: References a debug-specific example file (`./demo/debug-token.tsx`) demonstrating how to override component styles, likely using design tokens, for the Ant Design InputNumber component in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/debug-token.tsx\" debug>Override Component Style</code>\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal Animation Origin with mousePosition in Ant Design (English)\nDESCRIPTION: This snippet explains in English how to pass the mousePosition prop to control the animation origin position of a modal dialog in Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/custom-mouse-position.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\npass `mousePosition` to control modal's animation origin position\n```\n\n----------------------------------------\n\nTITLE: Using Generic Type for Checkbox.Group Options in TypeScript\nDESCRIPTION: Demonstration of configuring generic type for options.value in Checkbox.Group component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Option {\n  label: string;\n  value: number;\n}\n\n<Checkbox.Group<Option> options={[\n  { label: 'Option 1', value: 1 },\n  { label: 'Option 2', value: 2 }\n]} />\n```\n\n----------------------------------------\n\nTITLE: Defining CountConfig Interface - TypeScript\nDESCRIPTION: This TypeScript snippet defines the CountConfig interface utilized within the Input component, specifying properties for character counting behaviors, display strategies, and formatting. It illustrates how developers can customize character count logic beyond the HTML maxLength attribute, supporting user-defined counting strategies, warning thresholds, and custom formatting of overflowed values. Key parameters include 'max' (limit), 'strategy' (custom counter), 'show' (display strategy), and 'exceedFormatter' (overflow handler); the snippet expects users to implement custom functions for some properties if special logic is needed, and is relevant only in the context of character-limited inputs.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CountConfig {\n  // Max character count. Different from the native `maxLength`, it will be marked warning but not truncated\n  max?: number;\n  // Custom character count, for example, the standard emoji length is greater than 1, you can customize the counting strategy to change it to 1\n  strategy?: (value: string) => number;\n  // Same as `showCount`\n  show?: boolean | ((args: { value: string; count: number; maxLength?: number }) => ReactNode);\n  // Custom clipping logic when the number of characters exceeds `count.max`, no clipping when not configured\n  exceedFormatter?: (value: string, config: { max: number }) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DayJS Locale\nDESCRIPTION: Shows how to properly configure DayJS localization for date-related Ant Design components\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport dayjs from 'dayjs';\n\nimport 'dayjs/locale/zh-cn';\n\ndayjs.locale('zh-cn');\n```\n\n----------------------------------------\n\nTITLE: Building Bundles Concurrently with Vite in Gulp Task (TypeScript)\nDESCRIPTION: This asynchronous function demonstrates launching multiple Vite builds (one per environment) in parallel using Promise.all within a gulp task context. Dependencies are Vite, Node.js, and the project's custom configuration function getViteConfigForPackage. It takes a callback cb, generates configurations for both development and production, and triggers all builds concurrently. Input is the callback and environment list, and the expected output is multiple built bundles. A key limitation is the potential for race conditions or file write conflicts if outputs overlap.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function buildBundles(cb) {\n  const envs = ['development', 'production'];\n  const configs = envs.map((env) =>\n    getViteConfigForPackage({\n      env,\n      formats: ['es', 'cjs', 'umd'],\n      external: ['react', 'react-dom'],\n    }),\n  );\n\n  await Promise.all(configs.map((config) => vite.build(config)));\n  cb && cb();\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Space Size in Ant Design\nDESCRIPTION: This code demonstrates how to customize the size of spacing between elements using the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/size.tsx\">Space Size</code>\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal Animation Origin with mousePosition in Ant Design (Chinese)\nDESCRIPTION: This snippet explains in Chinese how to use the mousePosition prop to control the animation origin of a modal dialog in Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/custom-mouse-position.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n通过 `mousePosition` 控制弹框动画原点.\n```\n\n----------------------------------------\n\nTITLE: Vertical Compact Layout\nDESCRIPTION: Demonstration of a compact layout in the vertical direction.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/compact-button-vertical.tsx\">垂直方向紧凑布局</code>\n```\n\n----------------------------------------\n\nTITLE: Exporting SpaceContext in TypeScript\nDESCRIPTION: Fixes the issue where SpaceContext was not correctly exported from Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Fixing export of `SpaceContext` from Space component\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack to Use Moment.js with Ant Design v5 Plugin\nDESCRIPTION: Demonstrates the Webpack configuration required to use the `@ant-design/moment-webpack-plugin`. By importing the plugin and adding an instance of it to the `plugins` array in the Webpack configuration file (`webpack-config.js`), the build process will replace Day.js with Moment.js for Ant Design components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack-config.js\nimport AntdMomentWebpackPlugin from '@ant-design/moment-webpack-plugin';\n\nmodule.exports = {\n  // ...\n  plugins: [new AntdMomentWebpackPlugin()],\n};\n```\n\n----------------------------------------\n\nTITLE: Grid Playground Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file offering an interactive playground or demonstration area for experimenting with various features of the Ant Design grid system. The actual code implementing this example resides in the './demo/playground.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/playground.tsx\">Playground</code>\n```\n\n----------------------------------------\n\nTITLE: Styling Editable Table Cells (CSS)\nDESCRIPTION: This CSS snippet defines styles for editable cells in a table. It sets the cell position to relative, styles the value wrapper with padding and a pointer cursor, and adds a border effect on hover to indicate that the cell is editable. These styles are likely intended for use with an Ant Design table component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/edit-cell.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.editable-cell {\n  position: relative;\n}\n\n.editable-cell-value-wrap {\n  padding: 5px 12px;\n  cursor: pointer;\n}\n\n.editable-row:hover .editable-cell-value-wrap {\n  padding: 4px 11px;\n  border: 1px solid #d9d9d9;\n  border-radius: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using innerHTML to Compare Rendered Output in Test Snapshots - TypeScript\nDESCRIPTION: This TypeScript snippet suggests directly comparing the innerHTML of a selected element with a Jest snapshot to account for DOM differences between React versions. It employs querySelector to locate the element with the specified class name. Dependencies include Jest and a DOM-environment testing setup. The input is the result of a render call, and outputs are assertion results when comparing the innerHTML to the expected snapshot.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(container.querySelector('.className').innerHTML).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Badge showZero Property in React\nDESCRIPTION: This example shows how to use the Badge component from Ant Design with zero count values. It demonstrates the default behavior where badges are hidden when count is 0, and how to override this using the showZero property to display badges even with a zero count.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/basic.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, Space, Switch } from 'antd';\nimport { useState } from 'react';\n\nconst App: React.FC = () => {\n  const [show, setShow] = useState(true);\n\n  return (\n    <Space>\n      <Switch\n        checked={show}\n        onChange={() => {\n          setShow(!show);\n        }}\n      />\n      <Badge count={show ? 11 : 0} />\n      <Badge count={show ? 109 : 0} style={{ backgroundColor: '#52c41a' }} />\n      <Badge count={show ? 11 : 0} showZero />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining RangeDisabledTime Type for Time Range Picker (TypeScript)\nDESCRIPTION: This TypeScript code defines the 'RangeDisabledTime' function type, which is used in the Time Range Picker component to disable selectable times for either the start or end fields. The function receives a Dayjs instance and a string indicating which endpoint ('start' or 'end') it applies to, then returns callback functions to disable specific hours, minutes, and seconds. This allows for conditional temporal constraints based on the context of the range being selected. No external dependencies are required except TypeScript and Day.js typings.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/time-picker/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype RangeDisabledTime = (\\n  now: Dayjs,\\n  type = 'start' | 'end',\\n) => {\\n  disabledHours?: () => number[];\\n  disabledMinutes?: (selectedHour: number) => number[];\\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Space Component in React\nDESCRIPTION: This code snippet demonstrates basic usage of the Space component to set spacing between child elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/base.tsx\">Basic Usage</code>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Margins for Ant Design Table Demo Form Items using CSS\nDESCRIPTION: This CSS rule targets Ant Design form items (`.ant-form-item`) specifically within a container having the class `.table-demo-control-bar`. It applies a right margin of 16px (`margin-inline-end`) and a bottom margin of 8px (`margin-bottom`) to control the spacing around these form items, likely used for configuration options in a table demonstration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/dynamic-settings.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.table-demo-control-bar .ant-form-item {\n  margin-inline-end: 16px !important;\n  margin-bottom: 8px !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking StrictMode Hook Execution and Lifecycle | TypeScript/React\nDESCRIPTION: Illustrates console logging from render, useMemo, useEffect, and cleanup phases inside a React component wrapped in StrictMode. Used to observe effect and cleanup call order, especially how Render and Memo can be executed more than once. Outputs timing info to the console for developer inspection; expects no external dependencies.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nconst My = () => {\\n  console.log('render');\\n\\n  useMemo(() => {\\n    console.log('memo');\\n  }, []);\\n\\n  useEffect(() => {\\n    console.log('effect');\\n\\n    return () => {\\n      console.log('effect cleanup');\\n    };\\n  }, []);\\n};\\n\\n<StrictMode>\\n  <My />\\n</StrictMode>;\\n\\n// Console:\\n// - render\\n// - memo\\n// - render\\n// - memo\\n// - effect\\n// - effect cleanup\\n// - effect\n```\n\n----------------------------------------\n\nTITLE: Disabling Label Click Behavior in Form.Item\nDESCRIPTION: Demonstrates how to disable the default behavior where clicking a form label focuses the associated input. This is done by setting htmlFor to null on the Form.Item component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n- <Form.Item name=\"switch\" label=\"Switch\">\n+ <Form.Item name=\"switch\" label=\"Switch\" htmlFor={null}>\n    <Switch />\n  </Form.Item>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Semantic DOM for Popconfirm in TypeScript\nDESCRIPTION: This code snippet shows how to implement semantic DOM structure for the Popconfirm component, which is important for accessibility and proper rendering.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"./demo/_semantic.tsx\" simplify=\"true\"></code>\n```\n\n----------------------------------------\n\nTITLE: Release Version and Date - 5.24.0\nDESCRIPTION: Version number and release date formatting for Ant Design 5.24.0\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.24.0\n\n`2025-02-11`\n```\n\n----------------------------------------\n\nTITLE: Styling Editable Row Validation Feedback in Ant Design Table - CSS\nDESCRIPTION: This CSS snippet customizes the appearance and positioning of validation messages for editable rows in an Ant Design table. It sets the \".ant-form-item-explain\" element to absolute positioning with a reduced font size, ensuring validation feedback appears directly below the input row. No additional dependencies are required beyond standard Ant Design CSS; ensure the class selectors align with your project structure. This style assumes the presence of \".editable-row\" container elements in the table and specifically targets child validation messages.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/table/demo/edit-row.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.editable-row .ant-form-item-explain {\n  position: absolute;\n  top: 100%;\n  font-size: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Component Warnings with React Testing Library & Jest - JavaScript\nDESCRIPTION: This snippet demonstrates a Jest unit test using React Testing Library to ensure that rendering a deprecated component (BackTop) triggers a console error with the expected warning. It spies on console.error, renders the component, asserts the warning, and restores the mock. Dependencies include Jest and @testing-library/react. Inputs are the component to render; outputs are validation of console error invocations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n    describe('BackTop', () => {\\n++    it('should console Error', () => {\\n++        const errSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\\n++        render(<BackTop />);\\n++        expect(errSpy).toHaveBeenCalledWith(\\n++          'Warning: [antd: BackTop] `BackTop` is deprecated. Please use `FloatButton.BackTop` instead.',\\n++        );\\n++      errSpy.mockRestore();\\n++    });\\n    });\n```\n\n----------------------------------------\n\nTITLE: Illustrating Potential prefixCls Issue in Nested Styles (Less)\nDESCRIPTION: This Less snippet highlights a potential issue when styling nested elements within a component that has a custom class applied via ConfigProvider. If Ant Design's global `prefixCls` is changed (e.g., from 'ant-' to 'abc-'), targeting nested elements using the default prefix (like `.ant-btn-icon`) within the custom class scope (`.my-button`) will fail.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/config-provider-style.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: less\nCODE:\n```\n.my-button {\n  // OPS. It's `abc-btn-icon` now.\n  .ant-btn-icon {\n    background: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form.Item with Generic Type in TypeScript\nDESCRIPTION: Form.Item now supports generic typing for the 'name' attribute, allowing for better type checking.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nForm.Item<T extends object = any>\n```\n\n----------------------------------------\n\nTITLE: A/B Toggle Component Lifecycle Tracing under StrictMode | TypeScript/React\nDESCRIPTION: An interactive React app showing two components (A and B) toggled with a button, each logging useMemo, useEffect, and cleanup phases. Designed to illustrate lifecycle ordering in React StrictMode and how style insertion/removal can be affected by reference counting and effect run timing. No external dependencies except React.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\\n\\nconst A = () => {\\n  React.useMemo(() => {\\n    console.log('A render');\\n  }, []);\\n\\n  React.useEffect(() => {\\n    console.log('A mounted');\\n    return () => {\\n      console.log('A unmounted');\\n    };\\n  }, []);\\n\\n  return <div>A</div>;\\n};\\n\\nconst B = () => {\\n  React.useMemo(() => {\\n    console.log('B render');\\n  }, []);\\n\\n  React.useEffect(() => {\\n    console.log('B mounted');\\n    return () => {\\n      console.log('B unmounted');\\n    };\\n  }, []);\\n\\n  return <div>B</div>;\\n};\\n\\nexport default function App() {\\n  const [show, setShow] = React.useState(true);\\n\\n  const toggle = () => {\\n    setShow((prev) => !prev);\\n  };\\n\\n  return (\\n    <div>\\n      <button onClick={toggle}>toggle</button>\\n      <div>{show ? <A /> : <B />}</div>\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Upstream and Pulling Latest Code\nDESCRIPTION: Commands to add the original Ant Design repository as upstream remote and pull the latest master branch.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ant-design\ngit remote add upstream https://github.com/ant-design/ant-design\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: ValidateFields Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for ValidateConfig which is used with validateFields method, including options for validateOnly, recursive validation, and dirty field validation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface ValidateConfig {\n  // New in 5.5.0. Only validate content and not show error message on UI.\n  validateOnly?: boolean;\n  // New in 5.9.0. Recursively validate the provided `nameList` and its sub-paths.\n  recursive?: boolean;\n  // New in 5.11.0. Validate dirty fields (touched + validated).\n  // It's useful to validate fields only when they are touched or validated.\n  dirty?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TreeNode Properties in TreeSelect\nDESCRIPTION: Definition of available props for TreeNode components within the TreeSelect. These properties allow customization of individual tree nodes, including disabling options, setting leaf state, and defining values.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree-select/index.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n| 参数            | 说明                                               | 类型      | 默认值 | 版本 |\n| --------------- | -------------------------------------------------- | --------- | ------ | ---- |\n| checkable       | 当树为 Checkbox 时，设置独立节点是否展示 Checkbox  | boolean   | -      |      |\n| disableCheckbox | 禁掉 Checkbox                                      | boolean   | false  |      |\n| disabled        | 是否禁用                                           | boolean   | false  |      |\n| isLeaf          | 是否是叶子节点                                     | boolean   | false  |      |\n| key             | 此项必须设置（其值在整个树范围内唯一）             | string    | -      |      |\n| selectable      | 是否可选                                           | boolean   | true   |      |\n| title           | 树节点显示的内容                                   | ReactNode | `---`  |      |\n| value           | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | string    | -      |      |\n```\n\n----------------------------------------\n\nTITLE: Defining TransformAction Type Alias in TypeScript\nDESCRIPTION: Defines the TypeScript type alias `TransformAction`, listing the possible actions that can trigger a transformation change in the Ant Design Image preview, such as flipping, rotating, zooming, closing, navigating, or dragging.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransformAction =\n  | 'flipY'\n  | 'flipX'\n  | 'rotateLeft'\n  | 'rotateRight'\n  | 'zoomIn'\n  | 'zoomOut'\n  | 'close'\n  | 'prev'\n  | 'next'\n  | 'wheel'\n  | 'doubleClick'\n  | 'move'\n  | 'dragRebound';\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design v5 Compatibility Packages using npm\nDESCRIPTION: These commands install `@ant-design/compatible` (specifically the v5-compatible-v4 version using a tag) and `@ant-design/pro-components` using npm. These packages provide components like `Comment` and `PageHeader` that were moved from the core `antd` library in v5, allowing for their continued use during migration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @ant-design/compatible@v5-compatible-v4\nnpm install --save @ant-design/pro-components\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Wheel Control Example (TSX)\nDESCRIPTION: References `./demo/change-on-wheel.tsx`, demonstrating how to enable or disable value changes via mouse wheel (`changeOnWheel` prop) for the Ant Design InputNumber component (introduced in v5.14.0) in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/change-on-wheel.tsx\" version=\"5.14.0\">Wheel</code>\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Descriptions (Markdown)\nDESCRIPTION: This table shows the correspondence between Less variables and Component Tokens for styling the Ant Design Descriptions component. It highlights the usage of global tokens for padding values and notes deprecated variables.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@descriptions-bg` | `labelBg` | - |\n| `@descriptions-title-margin-bottom` | `titleMarginBottom` | - |\n| `@descriptions-default-padding` | `padding`、`paddingLG` | GlobalToken, used as `${token.padding}px ${token.paddingLG}px` |\n| `@descriptions-middle-padding` | `paddingSM`、`paddingLG` | GlobalToken, used as `${token.paddingSM}px ${token.paddingLG}px` |\n| `@descriptions-small-padding` | `paddingXS`、`padding` | GlobalToken, used as `${token.paddingXS}px ${token.padding}px` |\n| `@descriptions-item-padding-bottom` | `itemPaddingBottom` | - |\n| `@descriptions-item-trailing-colon` | - | Deprecated for style change |\n| `@descriptions-item-label-colon-margin-right` | `colonMarginRight` | - |\n| `@descriptions-item-label-colon-margin-left` | `colonMarginLeft` | - |\n| `@descriptions-extra-color` | `extraColor` | - |\n```\n\n----------------------------------------\n\nTITLE: Customizing Ant Design Theme using ConfigProvider in React (TSX)\nDESCRIPTION: Illustrates how to customize the Ant Design theme by wrapping components with `ConfigProvider`. This example modifies the primary color (`colorPrimary`) token to '#00b96b', changing the appearance of the enclosed primary button.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ConfigProvider } from 'antd';\n\nexport function Main() {\n  return (\n    <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>\n      <Button type=\"primary\">Button</Button>\n    </ConfigProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Ant Design Button Component in React\nDESCRIPTION: React component example showing how to import and use the Button component from Ant Design. This snippet demonstrates the basic usage of an Ant Design component in a Vite-powered React application.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from 'antd';\n\nconst App = () => (\n  <div className=\"App\">\n    <Button type=\"primary\">Button</Button>\n  </div>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Fade Effect Example\nDESCRIPTION: Reference to an example showing fade transition effects\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/fade.tsx\">Fade in</code>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Overflow Style in Ant Design Watermark (TSX)\nDESCRIPTION: This snippet illustrates how to override the default `overflow: hidden` style applied to the Ant Design `Watermark` component's container since version 5.18.0. By setting the `style` prop to `{ overflow: 'visible' }`, developers can modify the default behavior which was introduced to prevent users from hiding the watermark using browser developer tools. This requires React and the Ant Design library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/watermark/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Watermark style={{ overflow: 'visible' }} />\n```\n\n----------------------------------------\n\nTITLE: Styling Back-to-Top Component in CSS\nDESCRIPTION: This CSS snippet defines the basic styling for a back-to-top component. It sets the color of the component to a semi-transparent dark gray.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/back-top/demo/basic.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.site-back-top-basic {\n  color: rgba(64, 64, 64, 0.6);\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Reference Book Cards\nDESCRIPTION: Similar to the design resources section, this use of the `<ResourceCards>` custom component renders a structured list of reference books. The content within the tags provides the data (icon URL, title, description, link, and a color hint like #C7EBD6) for each book card.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<ResourceCards>\n- About Face 4 #C7EBD6\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*GA-CRIRqKjgAAAAAAAAAAABkARQnAQ\n  - The Interactive Design Guide for Digital Products and System\n  - https://www.wiley.com/en-sg/About+Face%3A+The+Essentials+of+Interaction+Design%2C+4th+Edition-p-9781118766576\n- Designing Web Interfaces #009C94\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*KK2xSJu0M80AAAAAAAAAAABkARQnAQ\n  - Best Practice, Patterns and Principles for Web Interface\n  - http://shop.oreilly.com/product/9780596516253.do\n- Designing Interfaces #9489CF\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*slN2QpTvIs0AAAAAAAAAAABkARQnAQ\n  - Interface Design Guidelines\n  - https://www.amazon.com/Designing-Interfaces-Patterns-Effective-Interaction/dp/1449379702/ref=pd_sbs_14_t_1/131-2623973-6077764?_encoding=UTF8&pd_rd_i=1449379702&pd_rd_r=ebe12a8d-435f-474b-a593-72aadf26c45a&pd_rd_w=18rob&pd_rd_wg=bhRFl&pf_rd_p=5cfcfe89-300f-47d2-b1ad-a4e27203a02a&pf_rd_r=8V8CD0EE336ZZEG15DEN&psc=1&refRID=8V8CD0EE336ZZEG15DEN\n- Non-Designer's Design Book, The, 4th Edition #FAF0CD\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*1HbNSIju7pEAAAAAAAAAAABkARQnAQ\n  - Basic Principles of Good Design\n  - http://www.peachpit.com/store/non-designers-design-book-9780133966152\n- The Design of Everyday Things #F8F3D1\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*4woBSLvOjfMAAAAAAAAAAABkARQnAQ\n  - About the People-oriented Design Philosophy\n  - https://jnd.org/the-design-of-everyday-things-revised-and-expanded-edition/\n- Emotional Design #E8EEB4\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*6ZQJQoKRORsAAAAAAAAAAABkARQnAQ\n  - Explain the Role of Emotional Factors in Design\n  - https://www.amazon.com/Emotional-Design-Love-Everyday-Things/dp/0465051367\n- Web Form Design #C2DAED\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*VhhwRo7axKQAAAAAAAAAAABkARQnAQ\n  - The Essence of Form Design\n  - https://rosenfeldmedia.com/books/web-form-design/\n</ResourceCards>\n```\n\n----------------------------------------\n\nTITLE: Linking Dynamically Generated Hashed CSS File in HTML\nDESCRIPTION: Shows the final step for the 'Part Static Extract Style' method. The dynamically generated, hashed CSS filename (calculated in the previous TypeScript snippet and available as `hashCssFileUrl`) is included in the HTML `<head>` using a standard `<link rel=\"stylesheet\">` tag. This instructs the browser to load the specific CSS file corresponding to the rendered page content (`html`), allowing the browser to cache this file based on its unique hashed name.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"${hashCssFileUrl}\" />\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Comparing Select and TreeSelect API Implementation\nDESCRIPTION: Demonstrates the inconsistency in API naming between Select and TreeSelect components for search functionality.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Select 在 combobox 模式下，搜索框就是输入框，`inputValue` 看起来很合理\n<Select inputValue=\"search\" />\n\n// TreeSelect 的搜索框在弹出层，`searchValue` 也很合理\n<TreeSelect searchValue=\"search\" />\n```\n\n----------------------------------------\n\nTITLE: Split Context Implementation\nDESCRIPTION: Example of splitting a single context into multiple contexts to minimize re-render scope.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyContext1 = React.createContext<{ prop1: string }>();\nconst MyContext2 = React.createContext<{ prop2: string }>();\n\n// Child\nconst { prop1 } = React.useContext(MyContext1);\n\n// Root\n<MyContext1.Provider value={context1}>\n  <MyContext2.Provider value={context2}>\n    <Child />\n  </MyContext2.Provider>\n</MyContext1.Provider>;\n```\n\n----------------------------------------\n\nTITLE: Image Fallback Props Reference in Ant Design\nDESCRIPTION: Demonstrates the fallback mechanism when an image fails to load. The system follows a priority sequence: first checking if src is a ReactElement, then falling back to icon prop, and finally displaying children content.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/demo/fallback.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsrc - ReactElement\\nicon\\nchildren\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple String Display React Component (TSX)\nDESCRIPTION: This snippet defines a basic React functional component named `MyStr` using TypeScript (TSX). It accepts a `value` prop of type string via the `StrProps` interface and renders this value within a `div` element. An example usage `<MyStr value=\"Hello World\" />` demonstrates how to pass the string value.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface StrProps {\n  value: string;\n}\n\nfunction MyStr({ value }: StrProps) {\n  return <div>{value}</div>;\n}\n<MyStr value=\"Hello World\" />;\n```\n\n----------------------------------------\n\nTITLE: Applying Margins and RTL Adjustments to Ant Design Components in CSS\nDESCRIPTION: This CSS snippet defines styles for Ant Design components within a demo context (`.button-demo`). It sets margins for buttons (`.ant-btn`) and button groups (`.ant-btn-group`) using the logical property `margin-inline-end` for better RTL support. It resets specific margins within button groups for consistent spacing. Additionally, it styles a custom `.head-example` element and provides specific margin adjustments for `.ant-badge` in both LTR and RTL (`.ant-badge-rtl`) scenarios using logical properties.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/config-provider/demo/direction.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.button-demo .ant-btn,\n.button-demo .ant-btn-group {\n  margin-inline-end: 8px;\n  margin-bottom: 12px;\n}\n.button-demo .ant-btn-group > .ant-btn,\n.button-demo .ant-btn-group > span > .ant-btn {\n  margin-inline-end: 0;\n  margin-inline-start: 0;\n}\n\n.head-example {\n  display: inline-block;\n  width: 42px;\n  height: 42px;\n  vertical-align: middle;\n  background: #eee;\n  border-radius: 4px;\n}\n\n.ant-badge:not(.ant-badge-not-a-wrapper) {\n  margin-inline-end: 20px;\n}\n\n.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-inline-end: 0;\n  margin-inline-start: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring antd-moment-webpack-plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the `@ant-design/moment-webpack-plugin` in a Webpack configuration file (`webpack-config.js`). Adding this plugin automatically replaces Ant Design's default Day.js dependency with Moment.js during the build process, without requiring changes to the component usage code.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// webpack-config.js\nconst AntdMomentWebpackPlugin = require('@ant-design/moment-webpack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [new AntdMomentWebpackPlugin()],\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Ant Design Checkbox Group Props Type with GetProps\nDESCRIPTION: This snippet demonstrates using the `GetProps` utility type from antd to obtain the complete props type definition for a nested component, `Checkbox.Group`. It imports `Checkbox` and `GetProps`, then defines `CheckboxGroupType` by applying `GetProps` to `typeof Checkbox.Group`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport type { Checkbox, GetProps } from 'antd';\n\ntype CheckboxGroupType = GetProps<typeof Checkbox.Group>;\n```\n```\n\n----------------------------------------\n\nTITLE: Adding pnpm Cache Steps to a GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet demonstrates adding steps to a GitHub Actions workflow to implement pnpm dependency caching. It first ensures the `pnpm-lock.yaml` file exists using `pnpm install --frozen-lockfile --ignore-scripts`. It then retrieves the pnpm store path using `pnpm store path` and stores it in an output variable `STORE_PATH`. Finally, it uses the `actions/cache@v4` action to cache this store path. The cache `key` is composed using the runner's OS, a static string 'pnpm-store-', and the hash of the `pnpm-lock.yaml` file, ensuring the cache is invalidated only when dependencies change. A `restore-key` is also provided for partial cache matches.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n- name: create pnpm-lock.yaml (创建 pnpm-lock.yaml)\n  run: pnpm install --frozen-lockfile --ignore-scripts\n\n- name: Get pnpm store directory (获取 pnpm store 目录)\n  id: pnpm-cache\n  shell: bash\n  run: |\n    echo \"STORE_PATH=$(pnpm store path)\" >> $GITHUB_OUTPUT\n\n- name: Setup pnpm cache (设置 pnpm 缓存)\n  uses: actions/cache@v4\n  with:\n    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}\n    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n    restore-keys: |\n      ${{ runner.os }}-pnpm-store-\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Container Detection and Event Handling\nDESCRIPTION: Function to collect scroll containers and set up scroll event listeners for both target and popup elements to handle dynamic positioning.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tooltip-align.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction collectScroll(ele: HTMLElement) {\n  const scrollList: HTMLElement[] = [];\n  let current = ele?.parentElement;\n\n  while (current) {\n    if (isScrollContainer(current)) {\n      scrollList.push(ele);\n    }\n\n    current = current.parentElement;\n  }\n\n  return scrollList;\n}\n\nconst targetScrollList = collectScroll(targetEle);\nconst popupScrollList = collectScroll(popupEle);\n\n// We merge the list in real world. Here just for sample\n[window, ...targetScrollList, ...popupScrollList].forEach((ele) => {\n  ele.addEventListener(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Inverse Colorful Tag Demo in Ant Design (React, TSX)\nDESCRIPTION: This snippet provides an example of rendering inverse colored tags using Ant Design. It depends on the Tag component from Ant Design and demonstrates setting colors with the inverse option for alternative contrast. It is mainly used in scenarios requiring enhanced visual distinction.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/colorful-inverse.tsx\\\" debug>Inverse Colorful Tag</code>\n```\n\n----------------------------------------\n\nTITLE: Illustrating API Inconsistency in Ant Design Select/TreeSelect\nDESCRIPTION: Demonstrates historical differences in prop names (`inputValue` vs. `searchValue`) used to control the search input value in Ant Design's `Select` (combobox mode) and `TreeSelect` components before v4 unification. This highlights how different implementations led to API divergence.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Select in combobox mode, the search box is the input box, `inputValue` looks reasonable\n<Select inputValue=\"search\" />\n\n// TreeSelect's search box is in the popup layer, `searchValue` is also reasonable\n<TreeSelect searchValue=\"search\" />\n```\n\n----------------------------------------\n\nTITLE: Flex Stretch Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file illustrating how columns can stretch to fill available space using flex properties within the Ant Design grid system. The actual code implementing this example resides in the './demo/flex-stretch.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/flex-stretch.tsx\">Flex Stretch</code>\n```\n\n----------------------------------------\n\nTITLE: Adding a Title to an Ant Design Divider in React/TSX\nDESCRIPTION: References a demo file (`./demo/with-text.tsx`) demonstrating how to embed a title within the Ant Design `Divider` component, typically using the `children` prop, in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/with-text.tsx\">Divider with title</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing unstableSetRender for React 19 Compatibility with Ant Design\nDESCRIPTION: This code demonstrates how to use the unstableSetRender method to make Ant Design v5 compatible with React 19. It's recommended for special scenarios like umd or micro-frontends when the compatibility package can't be used.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { unstableSetRender } from 'antd';\nimport { createRoot } from 'react-dom/client';\n\nunstableSetRender((node, container) => {\n  container._reactRoot ||= createRoot(container);\n  const root = container._reactRoot;\n  root.render(node);\n  return async () => {\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    root.unmount();\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Tag in Ant Design (React, TSX)\nDESCRIPTION: This snippet adds drag-and-drop capabilities to Tag components using Ant Design in React. It integrates drag event handlers or leverages a compatible drag-and-drop library. This enhances interactivity by enabling users to reorder or move tags in the UI.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/draggable.tsx\\\">Draggable Tag</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Two-Tone Color (JSX)\nDESCRIPTION: Demonstrates how to globally set and retrieve the primary color for all two-tone icons using the 'setTwoToneColor' and 'getTwoToneColor' functions imported from '@ant-design/icons'.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\n\nsetTwoToneColor('#eb2f96');\ngetTwoToneColor(); // #eb2f96\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Parallel Ant Design Versions (JSON)\nDESCRIPTION: This snippet shows the necessary package.json configuration for using both Ant Design v4 and v5 concurrently. The antd field stays at 4.x for legacy code, and antd-v5 is explicitly assigned to npm:antd@5, ensuring the proper version resolution. This configuration enables selective imports and versioned usage within the project.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"antd\": \"4.x\",\n  \"antd-v5\": \"npm:antd@5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing On-Demand CSS Extraction in Next.js _document.tsx\nDESCRIPTION: Illustrates how to implement the 'Extract on demand' CSS strategy within a Next.js application's custom `_document.tsx`. It overrides `getInitialProps`, creates a `@ant-design/cssinjs` cache, wraps the `App` component with `StyleProvider` during `renderPage` to capture styles used on the server. After rendering, it calls the custom `doExtraStyle` function (from the previous snippet) with the cache to generate and save the required CSS file, and finally injects a `<link>` tag referencing the generated, hash-named CSS file into the HTML `<Head>`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// _document.tsx\nimport { createCache, StyleProvider } from '@ant-design/cssinjs';\nimport type { DocumentContext } from 'next/document';\nimport Document, { Head, Html, Main, NextScript } from 'next/document';\n\nimport { doExtraStyle } from '../scripts/genAntdCss';\n\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    const cache = createCache();\n    let fileName = '';\n    const originalRenderPage = ctx.renderPage;\n    ctx.renderPage = () =>\n      originalRenderPage({\n        enhanceApp: (App) => (props) => (\n          <StyleProvider cache={cache}>\n            <App {...props} />\n          </StyleProvider>\n        ),\n      });\n\n    const initialProps = await Document.getInitialProps(ctx);\n    // 1.1 extract style which had been used\n    fileName = doExtraStyle({\n      cache,\n    });\n    return {\n      ...initialProps,\n      styles: (\n        <>\n          {initialProps.styles}\n          {/* 1.2 inject css */}\n          {fileName && <link rel=\"stylesheet\" href={`/${fileName}`} />}\n        </>\n      ),\n    };\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Moment-based TimePicker in TypeScript\nDESCRIPTION: This snippet shows how to create a custom TimePicker component in TypeScript. It leverages the previously defined custom `DatePicker` component (`./DatePicker`), passes down the props, and specifically sets the `picker` prop to `\"time\"` to render it as a time picker. It uses `React.forwardRef` to correctly handle refs.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport type { PickerTimeProps } from 'antd/es/date-picker/generatePicker';\nimport type { Moment } from 'moment';\n\nimport DatePicker from './DatePicker';\n\nexport interface TimePickerProps extends Omit<PickerTimeProps<Moment>, 'picker'> {}\n\nconst TimePicker = React.forwardRef<any, TimePickerProps>((props, ref) => (\n  <DatePicker {...props} picker=\"time\" mode={undefined} ref={ref} />\n));\n\nTimePicker.displayName = 'TimePicker';\n\nexport default TimePicker;\n```\n\n----------------------------------------\n\nTITLE: Creating Luxon-based DatePicker with generatePicker in TypeScript\nDESCRIPTION: This snippet demonstrates creating a custom DatePicker component compatible with the Luxon library. It uses `DatePicker.generatePicker` from Ant Design and `luxonGenerateConfig` from `rc-picker`, specifying `DateTime` (from Luxon) as the date type. This enables using Luxon for date handling within Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DatePicker } from 'antd';\nimport type { DateTime } from 'luxon';\nimport luxonGenerateConfig from 'rc-picker/lib/generate/luxon';\n\nconst MyDatePicker = DatePicker.generatePicker<DateTime>(luxonGenerateConfig);\n\nexport default MyDatePicker;\n```\n\n----------------------------------------\n\nTITLE: Hiding Dropdown Arrow in Ant Design (English)\nDESCRIPTION: This snippet explains in English how to use the 'arrow' property to hide the arrow in an Ant Design dropdown component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/arrow.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nHide arrow by `arrow`.\n```\n\n----------------------------------------\n\nTITLE: Polyfilling useInsertionEffect with useLayoutEffect Fallback | TypeScript/React\nDESCRIPTION: Demonstrates use of a polyfilled hook, assigning useInsertionEffect if available, otherwise falling back to useLayoutEffect (for React 17 compatibility). Intended for environments that may lack the newer React hook while maintaining similar semantics. The core logic remains identical to previous example and is used for style insertion/clean-up.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nconst useMergedInsertionEffect = useInsertionEffect || useLayoutEffect;\\n\\nuseMergedInsertionEffect(() => {\\n  // Same as above\\n}, [hash]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Menu Divider Item in TypeScript\nDESCRIPTION: This code shows how to create a divider item in the Menu component using TypeScript. It sets the type to 'divider' and can optionally include a 'dashed' property.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst dividerItem = {\n  type: 'divider', // Must have\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Validation Messages via ConfigProvider in TSX\nDESCRIPTION: This snippet shows how to use the `ConfigProvider` component in Ant Design to globally configure custom validation messages for Form components. The `form` prop accepts an object with a `validateMessages` property.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider form={{ validateMessages }} />\n```\n\n----------------------------------------\n\nTITLE: Updating Layout to Include Products Link\nDESCRIPTION: Diff showing the addition of a navigation link to the products page in the global layout file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n<li>\n  <Link to=\"/docs\">Docs</Link>\n</li>\n+ <li>\n+   <Link to=\"/products\">Products</Link>\n+ </li>\n```\n\n----------------------------------------\n\nTITLE: Styling a Fixed Footer Wrapper in Ant Design Drawer using CSS\nDESCRIPTION: This CSS rule targets an element with the class `site-form-in-drawer-wrapper`. It positions this element absolutely at the bottom right of its container (likely the Drawer), sets its width to 100%, adds padding, aligns text to the right, gives it a white background, and adds a top border. This is typically used to create a fixed footer area within the Drawer for buttons or other actions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/demo/form-in-drawer.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.site-form-in-drawer-wrapper {\\n  position: absolute;\\n  inset-inline-end: 0;\\n  bottom: 0;\\n  width: 100%;\\n  padding: 10px 16px;\\n  text-align: right;\\n  background: #fff;\\n  border-top: 1px solid #e9e9e9;\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Jest Snapshot Serializer for HTML Elements in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to begin adding a custom Jest snapshot serializer using `expect.addSnapshotSerializer`. The `test` function checks if the element passed to the serializer is an instance of `HTMLElement`. If it returns true, Jest will use the custom `print` function (defined elsewhere) for serializing this element, allowing for customized snapshot formatting.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexpect.addSnapshotSerializer({\n  // Determine whether it is a dom element, if yes, go to our own serialization logic\n  // The code has been simplified, more logic is needed for real judgment, you can refer to setupAfterEnv.ts of antd\n  test: (element) => element instanceof HTMLElement,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Ant Design 5.0.2 Release\nDESCRIPTION: Markdown content detailing the changes and fixes in Ant Design version 5.0.2, including improvements to Card, Space.Compact, Menu, and other components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_28\n\nLANGUAGE: Markdown\nCODE:\n```\n## 5.0.2\n\n`2022-11-27`\n\n- 💄 Fix Card radius style broken when customize `bodyStyle` background color. [#38973](https://github.com/ant-design/ant-design/pull/38973) [@Yukiniro](https://github.com/Yukiniro)\n- 💄 Optimize Design Token default algorithm for error color. [#38933](https://github.com/ant-design/ant-design/pull/38933)\n- 💄 Optimize the style issue in RTL mode. [#38829](https://github.com/ant-design/ant-design/pull/38829) [@Wxh16144](https://github.com/Wxh16144)\n- Space.Compact\n  - 💄 Optimize Space.Compact style when wrapping a single child component. [#38896](https://github.com/ant-design/ant-design/pull/38896) [@foryuki](https://github.com/foryuki)\n  - 💄 Fix Space.Compact component style problem when wrapping Modal, Dropdown, Drawer and other components. [#38870](https://github.com/ant-design/ant-design/pull/38870) [@foryuki](https://github.com/foryuki)\n- 🐞 Fix horizontal Menu that has wrong width when is overflow. [#38989](https://github.com/ant-design/ant-design/pull/38989)\n- 🐞 Fix Table that the old filter state still takes effect when the list filter column changes. [#38982](https://github.com/ant-design/ant-design/pull/38982)\n- 🐞 Fix Select and Pagination incorrect text color in dark theme. [#38979](https://github.com/ant-design/ant-design/pull/38979) [@Dunqing](https://github.com/Dunqing)\n- 🐞 Fix that Mentions `options` props not working. [#38968](https://github.com/ant-design/ant-design/pull/38968) [@heiyu4585](https://github.com/heiyu4585)\n- 🐞 Fix that `dist/reset.css` may be dropped in production. [#38956](https://github.com/ant-design/ant-design/pull/38956) [@passerV](https://github.com/passerV)\n- 🐞 Fix Badge that `showZero` can't be used with custom color. [#38967](https://github.com/ant-design/ant-design/pull/38967) [@Wxh16144](https://github.com/Wxh16144)\n- 🐞 Fix Form validation motion flick issue. [#38962](https://github.com/ant-design/ant-design/pull/38962)\n- 🐞 Fix Tabs dropdown motion not work. [#38892](https://github.com/ant-design/ant-design/pull/38892)\n- 🐞 Fix ConfigProvider that `componentDisabled` is not work. [#38886](https://github.com/ant-design/ant-design/pull/38886) [@lidianhao123](https://github.com/lidianhao123)\n- 🐞 Fix Button `block` prop is not working when `shape=\"round\"`. [#38869](https://github.com/ant-design/ant-design/pull/38869) [@jjlstruggle](https://github.com/jjlstruggle)\n- 🐞 Fix Dropdown.Button that `dropdownRender` is not executed. [#38862](https://github.com/ant-design/ant-design/pull/38862) [@imoctopus](https://github.com/imoctopus)\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Group Styles - Ant Design - CSS\nDESCRIPTION: This CSS snippet customizes the appearance of grouped input elements in Ant Design by modifying background colors and border widths for different interactive and RTL scenarios. No dependencies are required aside from Ant Design's DOM structure and class names, which must match the selectors (e.g., .site-input-group-wrapper, .ant-input-rtl). Inputs such as hover or focus on specified elements trigger style adjustments, while outputs are visible changes to border behavior and backgrounds. Note that this CSS assumes that the respective DOM node hierarchy and class names are present in the project's markup.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/demo/group.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.site-input-group-wrapper .site-input-split {\n  background-color: #fff !important;\n}\n\n.site-input-group-wrapper .site-input-right {\n  border-left-width: 0;\n}\n\n.site-input-group-wrapper .site-input-right:hover,\n.site-input-group-wrapper .site-input-right:focus {\n  border-left-width: 1px;\n}\n\n.site-input-group-wrapper .ant-input-rtl.site-input-right {\n  border-right-width: 0;\n}\n\n.site-input-group-wrapper .ant-input-rtl.site-input-right:hover,\n.site-input-group-wrapper .ant-input-rtl.site-input-right:focus {\n  border-right-width: 1px;\n}\n```\n\n----------------------------------------\n\nTITLE: Hooks-based Message API Usage\nDESCRIPTION: Shows the new hooks-based approach for message components in Ant Design v4, which properly maintains context by using contextHolder.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const info = () => {\n    messageApi.info('Hello, Ant Design!');\n  };\n\n  return (\n    <>\n      {/* Different insert holder position will get different context */}\n      {contextHolder}\n      <Button type=\"primary\" onClick={info}>\n        Display normal message\n      </Button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Saturation and Brightness from Pointer Offset in TypeScript\nDESCRIPTION: This TypeScript code calculates the saturation and brightness based on the anchor (pointer) offset and the size of the color panel. It assumes references to DOM containers and targets via containerRef and targetRef, requiring access to their bounding rectangles. 'offset.x' and 'offset.y' are pointer positions; output is normalized saturation (0-1) and brightness (0-1). The calculation accounts for the anchor's center, enabling accurate real-time synching between user input and color selection.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n...\nconst { width, height } = containerRef.current.getBoundingClientRect();\nconst { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();\nconst centerOffsetX = targetWidth / 2;\nconst centerOffsetY = targetHeight / 2;\n// Saturation\nconst saturation = (offset.x + centerOffsetX) / width;\n// Brightness\nconst bright = 1 - (offset.y + centerOffsetY) / height;\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Layout (Markdown)\nDESCRIPTION: This table details the mapping from Less variables to Component Tokens for the Ant Design Layout component and its sub-components (Header, Footer, Sider, Trigger). It covers background colors, heights, padding, and text colors for both default and light themes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@layout-body-background` | `bodyBg` | - |\n| `@layout-header-background` | `headerBg` | - |\n| `@layout-header-height` | `headerHeight` | - |\n| `@layout-header-padding` | `headerPadding` | - |\n| `@layout-header-color` | `headerColor` | - |\n| `@layout-footer-padding` | `footerPadding` | - |\n| `@layout-footer-background` | `footerBg` | - |\n| `@layout-sider-background` | `siderBg` | - |\n| `@layout-trigger-height` | `triggerHeight` | - |\n| `@layout-trigger-background` | `triggerBg` | - |\n| `@layout-trigger-color` | `triggerColor` | - |\n| `@layout-zero-trigger-width` | `zeroTriggerWidth` | - |\n| `@layout-zero-trigger-height` | `zeroTriggerHeight` | - |\n| `@layout-sider-background-light` | `lightSiderBg` | - |\n| `@layout-trigger-background-light` | `lightTriggerBg` | - |\n| `@layout-trigger-color-light` | `lightTriggerColor` | - |\n```\n\n----------------------------------------\n\nTITLE: Text Measurement Implementation in TypeScript/React\nDESCRIPTION: Implementation of text measurement using a span element to calculate line height for ellipsis.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  {text}\n  {measuring && <span ref={measureRef}>&nbsp;</span>}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Flex Order Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file demonstrating controlling the order of columns using the 'order' prop on Col components within a flex-based Ant Design grid layout. The actual code implementing this example resides in the './demo/flex-order.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/flex-order.tsx\">Order</code>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Inline Style Injection in HTML\nDESCRIPTION: Demonstrates the initial inline style approach used in Ant Design v5 alpha for SSR. A `<style>` tag containing component-specific CSS is injected directly before the corresponding HTML element. This method ensures styles are available immediately but can lead to duplication and larger HTML files.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Separator in Ant Design Breadcrumb Component\nDESCRIPTION: Demonstrates how to customize the Breadcrumb component separator by setting the separator property to '>' instead of using the default separator.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/breadcrumb/demo/separator.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n使用 `separator=\">\"` 可以自定义分隔符。\n\n## en-US\n\nThe separator can be customized by setting the separator property: `separator=\">\"`. \n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design v5 as an Aliased Dependency via Package Manager (Bash)\nDESCRIPTION: These shell commands install Ant Design v5 alongside v4 in a project using npm, yarn, or pnpm. The alias antd-v5 references the v5 package while allowing the v4 package to remain as antd, facilitating parallel use without version conflicts. A prerequisite is a JavaScript/React project with package managers set up.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install --save antd-v5@npm:antd@5\n# or\n$ yarn add antd-v5@npm:antd@5\n# or\n$ pnpm add antd-v5@npm:antd@5\n```\n\n----------------------------------------\n\nTITLE: Configuring StyleProvider for :where Selector Support\nDESCRIPTION: Example showing how to configure StyleProvider to handle :where selector compatibility by setting hashPriority to high.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleProvider } from '@ant-design/cssinjs';\n\n// Config `hashPriority` to `high` instead of default `low`\n// Which will remove `:where` wrapper\nexport default () => (\n  <StyleProvider hashPriority=\"high\">\n    <MyApp />\n  </StyleProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Describing Input Variants in Ant Design\nDESCRIPTION: This snippet outlines the three available input variants in Ant Design: outlined, filled, and borderless. It provides both Chinese and English descriptions for internationalization purposes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/filled-debug.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n可选 `outlined` `filled` `borderless` 三种形态。\n\n## en-US\n\nThere are `outlined` `filled` and `borderless`, totally three variants to choose from.\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for SVG Icon Components (JavaScript)\nDESCRIPTION: Provides a Vite configuration snippet showing how to use the 'vite-plugin-svgr' plugin. This allows importing SVG files as React components (typically using a `?react` suffix), configuring SVGR options like `icon: true`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nexport default defineConfig(() => ({\n  // ... other config\n  plugins: [svgr({ svgrOptions: { icon: true } })],\n}));\n```\n\n----------------------------------------\n\nTITLE: Updating Imports to Use Custom Moment Components\nDESCRIPTION: This diff shows the changes needed in a consuming file (e.g., `src/App.tsx`) to switch from using the default Ant Design DatePicker/Calendar and Day.js to the custom Moment.js-based components created earlier. It involves changing the import paths and switching the date formatting library from `dayjs` to `moment`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-custom-date-library.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { DatePicker, Calendar } from 'antd';\n- import format from 'dayjs';\n\n+ import { DatePicker, TimePicker, Calendar } from './components';\n+ import format from 'moment';\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Keyboard Behavior Example (TSX)\nDESCRIPTION: References `./demo/keyboard.tsx`, demonstrating the keyboard interaction behavior (`keyboard` prop) of the Ant Design InputNumber component in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/keyboard.tsx\">Keyboard</code>\n```\n\n----------------------------------------\n\nTITLE: Documenting Popconfirm Basic Usage in Ant Design (Markdown)\nDESCRIPTION: This snippet provides documentation for the basic usage of the Popconfirm component in Ant Design. It explains that the component supports title and description props, with the description prop being supported from version 5.1.0.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/demo/basic.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n最简单的用法，支持确认标题和描述。\n\n> `description` 在 `5.1.0` 版本中支持。\n\n## en-US\n\nThe basic example supports the title and description props of confirmation.\n\n> `description` is supported in version `5.1.0`.\n```\n\n----------------------------------------\n\nTITLE: Styling Demo Elements for Ant Design\nDESCRIPTION: Custom CSS styles for the Ant Design demo, specifically targeting images within elements with the class 'antd-demo-dynamic-option'. It sets the width and height of images to 20px and adds right margin.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/async.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.antd-demo-dynamic-option img {\n  width: 20px;\n  height: 20px;\n  margin-inline-end: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive DatePicker Component Example\nDESCRIPTION: Shows implementation of an interactive DatePicker component with message feedback and state management using hooks.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { DatePicker, message } from 'antd';\nimport { createRoot } from 'react-dom/client';\n\nimport './index.css';\n\nconst App = () => {\n  const [date, setDate] = useState(null);\n  const [messageApi, contextHolder] = message.useMessage();\n  const handleChange = (value) => {\n    messageApi.info(`Selected Date: ${value ? value.format('YYYY-MM-DD') : 'None'}`);\n    setDate(value);\n  };\n  return (\n    <div style={{ width: 400, margin: '100px auto' }}>\n      <DatePicker onChange={handleChange} />\n      <div style={{ marginTop: 16 }}>\n        Selected Date: {date ? date.format('YYYY-MM-DD') : 'None'}\n      </div>\n      {contextHolder}\n    </div>\n  );\n};\n\ncreateRoot(document.getElementById('root')).render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Rendering Colorful Tag Variants in Ant Design (React, TSX)\nDESCRIPTION: This snippet illustrates how to display tags with different background colors using Ant Design in React. The demo requires Ant Design and demonstrates setting the \\\"color\\\" prop on the Tag component to customize its appearance. Useful for categorization by color dimension.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tag/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/colorful.tsx\\\">Colorful Tag</code>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using yarn\nDESCRIPTION: This command adds the Ant Design library as a project dependency using the Yarn package manager.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add antd\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Token for Anchor in React\nDESCRIPTION: Debug demo import for customizing component tokens, displayed in an iframe with a height of 800px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/component-token.tsx\" iframe=\"800\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Documenting Nested Space.Compact Usage in Ant Design\nDESCRIPTION: This markdown snippet provides documentation for nested Space.Compact usage in Ant Design. It includes descriptions in both Chinese (zh-CN) and English (en-US) to explain the concept of compact layout in nested scenarios.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact-nested.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n嵌套使用的紧凑布局。\n\n## en-US\n\nNested `Space.Compact`.\n```\n\n----------------------------------------\n\nTITLE: App Component Usage in v5\nDESCRIPTION: Demonstrates the new App component approach in Ant Design v5 that simplifies context management by providing a centralized location for context holders.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const { message } = App.useApp();\n\n  React.useEffect(() => {\n    message.success('Hello World');\n  }, []);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Highlighted Area of Ant Design Tour in TypeScript/React\nDESCRIPTION: The './demo/gap.tsx' code snippet shows how to customize the gap and highlight style around the target element in the Ant Design Tour component. React and Ant Design are required. By passing 'gap' properties such as 'offset' and 'radius', the code demonstrates altering the position and shape of the highlight. Results in a more refined or branded user experience.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/gap.tsx\\\">Custom highlighted area style</code>\n```\n\n----------------------------------------\n\nTITLE: Comparing Yarn Lock Files for Dependency Changes\nDESCRIPTION: GitHub Actions step that runs on build failure to compare yarn.lock files and identify dependency changes using diff-yarn-lock.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/mock-project-build.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: 🎨 Diff Report\n  if: ${{ failure() }}\n  run: npx diff-yarn-lock --source=~tmpProj/yarn.lock --target=~tmpProj/yarn.lock.failed\n```\n\n----------------------------------------\n\nTITLE: Using Ant Design Icon with Custom Component Prop (JSX)\nDESCRIPTION: Demonstrates using the `<Icon />` component from Ant Design with the `component` prop. This prop accepts a React component (represented here as `{...}`) which should render an `<svg>` element, allowing for the creation of reusable custom icons.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/demo/custom.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon component={...} />\n```\n\n----------------------------------------\n\nTITLE: Ant Design Token Migration Tables\nDESCRIPTION: Markdown tables documenting the mapping between Less variables and Component Tokens for various Ant Design components. Includes deprecation notes and relationships to Global Tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@mentions-dropdown-bg` | `colorBgElevated` | GlobalToken |\n| `@mentions-dropdown-menu-item-hover-bg` | - | Deprecated |\n\n[...additional tables...]\n```\n\n----------------------------------------\n\nTITLE: Documenting Spin Component Usage in English\nDESCRIPTION: This snippet explains in English how embedding content into the Spin component will set it into a loading state, providing guidance for React developers.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/nested.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nEmbedding content into `Spin` will set it into loading state.\n```\n\n----------------------------------------\n\nTITLE: Shadow DOM Integration\nDESCRIPTION: Example of integrating Ant Design within Shadow DOM using StyleProvider with container configuration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/compatible-style.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleProvider } from '@ant-design/cssinjs';\nimport { createRoot } from 'react-dom/client';\n\nconst shadowRoot = someEle.attachShadow({ mode: 'open' });\nconst container = document.createElement('div');\nshadowRoot.appendChild(container);\nconst root = createRoot(container);\n\nroot.render(\n  <StyleProvider container={shadowRoot}>\n    <MyApp />\n  </StyleProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Vertical Spacing with Space Component\nDESCRIPTION: Example of using the Space component to create vertical spacing between elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/vertical.tsx\">垂直间距</code>\n```\n\n----------------------------------------\n\nTITLE: Creating Static Anchor in React\nDESCRIPTION: Demo import for a static anchor component example without iframe wrapping.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/static.tsx\" >Static Anchor</code>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design v5 Alongside v4 using npm/yarn/pnpm Alias (Bash)\nDESCRIPTION: Provides commands for npm, yarn, and pnpm to install Ant Design v5 under an alias (`antd-v5`) while keeping v4 installed as the default `antd`. This enables gradual migration or coexistence of both versions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save antd-v5@npm:antd@5\n# or\n$ yarn add antd-v5@npm:antd@5\n# or\n$ pnpm add antd-v5@npm:antd@5\n```\n\n----------------------------------------\n\nTITLE: HashMap Structure for Style Path and Hash\nDESCRIPTION: Demonstrates the simplified HashMap structure containing only paths and hash values for style lookup.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"bAMbOo|Button\": \"LItTlE\",\n  \"bAMbOo|Spin\": \"liGHt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Detail Page Content with HTML and Markdown\nDESCRIPTION: This snippet demonstrates how to structure content for a detail page design pattern using a combination of HTML and Markdown. It includes sections for design goals, principles, and typical templates.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/detail-page.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ngroup: Design Patterns\ntype: Template Document\norder: 3\ntitle: Detail Page\n---\n\nDetail Pages display the complete data to users. Users can edit the information or do other operations.\n\n## Design Goals\n\nTo increase the information viewing and searching efficiency. To raise the convenience of operation.\n\n## Design Principles\n\n<div class=\"design-inline-cards\">\n  <div>\n    <img src=\"https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*3CfhSZLxsIEAAAAAAAAAAABkARQnAQ\" />\n    <div>\n      <h4>Direct</h4>\n      <p>Try to display the information as flat as possible. Do not hide or fold up the content if not necessary.</p>\n    </div>\n  </div>\n  <div>\n    <img src=\"https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*lN6IRbhv8fIAAAAAAAAAAABkARQnAQ\" />\n    <div>\n      <h4>Clear hierarchy</h4>\n      <p>In order to decrease the information complexity on each page, put information in levels and groups, following the principle of proximity.</p>\n    </div>\n  </div>\n  <div>\n    <img src=\"https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*jXDwQ6NF7dIAAAAAAAAAAABkARQnAQ\" />\n    <div>\n      <h4>Concise</h4>\n      <p>Reduce the use of complex structures, try to use similar layouts and modules to reduce the interference of structural differences to users, and let them focus on information itself.</p>\n    </div>\n  </div>\n</div>\n\n## Typical Templates\n\n### Basic Layouts\n\n<ImagePreview>\n<img class=\"preview-img no-padding\" src=\"https://gw.alipayobjects.com/zos/antfincdn/pCRKNg9k17/1bd63a4b-d1f4-4e07-b22a-d473846ffa4c.png\">\n</ImagePreview>\n\nBasic Detail Pages directly show all the information at the same level of hierarchy. We suggest such method of displaying data.\n```\n\n----------------------------------------\n\nTITLE: Illustrating ConfigProvider's Direct Dependency on rc-field-form's FormProvider in TSX\nDESCRIPTION: This simplified example demonstrates how `ConfigProvider` internally uses `FormProvider` from the `rc-field-form` library to provide the `validateMessages` functionality. This direct dependency causes `rc-field-form` code to be included in the bundle whenever `ConfigProvider` is used, potentially hindering Tree Shaking if Forms are not explicitly used elsewhere.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Sample only. Not real world code.\nimport { FormProvider } from 'rc-field-form';\n\nconst ConfigProvider = ({ validateMessages, children }) => {\n  const mergedValidateMessages = React.useMemo(\n    () => merge(antdDefaultValidateMessages, validateMessages),\n    [validateMessages],\n  );\n\n  return (\n    <FormProvider validateMessages={mergedValidateMessages}>\n      <SomeOtherProvider>{children}</SomeOtherProvider>\n    </FormProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Caching Yarn Lock File in GitHub Actions\nDESCRIPTION: GitHub Actions cache configuration for storing and retrieving yarn.lock files between builds, enabling dependency change detection.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/mock-project-build.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: actions/cache@v4\n  with:\n    path: ~tmpProj/yarn.lock\n    key: primes-${{ runner.os }}-${{ github.run_id }}\n    restore-keys: mock-proj-lock-file\n```\n\n----------------------------------------\n\nTITLE: Describing Pagination Usage in List Component (Markdown)\nDESCRIPTION: This snippet provides explanations in Chinese and English about how to use and set the pagination property for a List component. It's likely part of documentation or a README file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n可通过 `pagination` 属性使用列表分页，并进行设置。\n\n## en-US\n\nList pagination can be used and set through the `pagination` property.\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Semantic DOM Example in React\nDESCRIPTION: Imports a simplified example demonstrating the semantic DOM structure of the Popover component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/_semantic.tsx\" simplify=\"true\"></code>\n```\n\n----------------------------------------\n\nTITLE: Implementing unstableSetRender for React 19 Compatibility\nDESCRIPTION: This code demonstrates how to use the unstableSetRender method to modify the rendering method of ReactDOM, allowing Ant Design v5 to work with React 19. This method is recommended only for special scenarios like umd or micro-applications.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/v5-for-19.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { unstableSetRender } from 'antd';\nimport { createRoot } from 'react-dom/client';\n\nunstableSetRender((node, container) => {\n  container._reactRoot ||= createRoot(container);\n  const root = container._reactRoot;\n  root.render(node);\n  return async () => {\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    root.unmount();\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Ant Design Empty Component Built-in Images\nDESCRIPTION: This CSS code defines styles for the container elements used to display the built-in images (`PRESENTED_IMAGE_SIMPLE` and `PRESENTED_IMAGE_DEFAULT`) associated with the Ant Design `Empty` component. It sets background images, dimensions, and other background properties to ensure the predefined images render correctly.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/empty/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.site-empty-buildIn-img {\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n.site-empty-buildIn-simple {\n  width: 55px;\n  height: 35px;\n  background-image: url(\"https://user-images.githubusercontent.com/507615/54591679-b0ceb580-4a65-11e9-925c-ad15b4eae93d.png\");\n}\n.site-empty-buildIn-default {\n  width: 121px;\n  height: 116px;\n  background-image: url(\"https://user-images.githubusercontent.com/507615/54591670-ac0a0180-4a65-11e9-846c-e55ffce0fe7b.png\");\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Extracting Ant Design Select Option Type with TypeScript\nDESCRIPTION: This snippet shows a traditional TypeScript method for extracting the type of a single option from the `options` prop of an Ant Design Select component. It uses the `NonNullable` utility type and indexed access (`[number]`) on the `options` property of `SelectProps` to derive the `SelectOption` type. This illustrates the complexity the new utility types aim to reduce.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport type { SelectProps } from 'antd';\n\ntype SelectOption<T> = NonNullable<SelectProps<T>['options']>[number];\n```\n```\n\n----------------------------------------\n\nTITLE: Global App Component Integration with Redux\nDESCRIPTION: Shows how to implement App component in a global context with Redux, including entry component setup and usage in sub-pages.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Entry component\nimport { App } from 'antd';\nimport type { MessageInstance } from 'antd/es/message/interface';\nimport type { ModalStaticFunctions } from 'antd/es/modal/confirm';\nimport type { NotificationInstance } from 'antd/es/notification/interface';\n\nlet message: MessageInstance;\nlet notification: NotificationInstance;\nlet modal: Omit<ModalStaticFunctions, 'warn'>;\n\nexport default () => {\n  const staticFunction = App.useApp();\n  message = staticFunction.message;\n  modal = staticFunction.modal;\n  notification = staticFunction.notification;\n  return null;\n};\n\nexport { message, modal, notification };\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// sub page\nimport React from 'react';\nimport { Button, Space } from 'antd';\n\nimport { message } from './store';\n\nexport default () => {\n  const showMessage = () => {\n    message.success('Success!');\n  };\n\n  return (\n    <Space>\n      <Button type=\"primary\" onClick={showMessage}>\n        Open message\n      </Button>\n    </Space>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Upward Suggestion Placement in Ant Design (English)\nDESCRIPTION: This code snippet demonstrates how to change the placement of suggestions to expand upwards in Ant Design, explained in English.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/placement.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nChange the suggestions placement.\n```\n\n----------------------------------------\n\nTITLE: Defining a Structured Ref Interface in TypeScript (Ant Design Mobile Example)\nDESCRIPTION: Defines a TypeScript interface `SampleRef`, used as an example from Ant Design Mobile, which standardizes component refs by providing both the `nativeElement` (DOM element) and common methods like `focus` and `blur`. This illustrates a convention for handling refs in composite components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SampleRef {\n  nativeElement: HTMLElement;\n  focus(): void;\n  blur(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Example Gutter Boxes (CSS)\nDESCRIPTION: This CSS snippet defines styles for elements with the class 'gutter-box'. It applies vertical padding (8px top/bottom, 0px left/right) and a blue background color (#00a0e9), typically used to visually represent columns within an Ant Design grid layout when demonstrating the 'gutter' property.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/gutter.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.gutter-box {\\n  padding: 8px 0;\\n  background: #00a0e9;\\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Dynamic Mode Switching in English\nDESCRIPTION: This markdown snippet explains the purpose of the example in English. It specifies that the demonstration will show how to switch between inline and vertical modes dynamically.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/switch-mode.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nShow the dynamic switching mode (between `inline` and `vertical`).\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Arrow Point at Center Example in React\nDESCRIPTION: Imports a debug example for the Popover component with the arrow pointing at the center.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/arrow-point-at-center.tsx\" debug>Arrow.pointAtCenter</code>\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Integration with App Component\nDESCRIPTION: Shows how to use App component with ConfigProvider for theme configuration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider theme={{ ... }}>\n  <App>\n    ...\n  </App>\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Conceptual Static Style Extraction in TSX\nDESCRIPTION: Illustrates the concept of static style extraction for SSR. All required Ant Design components are rendered within a `StyleProvider` to populate a cache, from which the complete CSS is extracted. This pre-bakes styles but requires rendering all components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst cache = createCache();\n\n// HTML Content\nrenderToString(\n  <StyleProvider cache={cache}>\n    <Button />\n    <Switch />\n    <Input />\n    {/* Rest antd components */}\n  </StyleProvider>,\n);\n\n// Style Content\nconst styleText = extractStyle(cache);\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots (Bash)\nDESCRIPTION: Shows the command `npm run test -u` used to update Jest snapshots. This is necessary when changes to component rendering (like modifying demo text or intended component output) are intentional and cause snapshot tests to fail during CI or local testing.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run the test command to update snapshot\nnpm run test -u\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with a Custom Preview Component (HTML/JSX)\nDESCRIPTION: This snippet embeds an image (`<img>`) showing an \"Example of repetitive wireframe\" within a custom `<ImagePreview>` component. The image source is specified via the `src` attribute, and it includes alternative text (`alt`) and a CSS class (`preview-img`) for styling. The `<ImagePreview>` component likely provides enhanced viewing capabilities like zooming or lightbox functionality within the Ant Design documentation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of repetitive wireframe\" src=\"https://gw.alipayobjects.com/zos/rmsportal/VkUeJYlTTseLCyUGeXZV.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Extending Select Option Type - TypeScript\nDESCRIPTION: Demonstrates how to use TypeScript utility types together with Ant Design's SelectProps to extract a single option's type. This approach uses NonNullable to ensure that the extracted type filters out null and undefined, providing the type for a Select option. Dependencies include Ant Design's SelectProps and understanding of complex TypeScript type manipulations. Input is a generic SelectProps type, and the output is the type of a single option. No runtime effect; only for typing.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SelectProps } from 'antd';\n\ntype SelectOption<T> = NonNullable<SelectProps<T>['options']>[number];\n```\n\n----------------------------------------\n\nTITLE: Illustrating Inline CSS-in-JS Style Injection in HTML\nDESCRIPTION: Shows an early approach where CSS-in-JS styles (using `:where` and generated class names like `css-bAmBOo`) are injected directly into the HTML using `<style>` tags adjacent to the corresponding element during SSR. This method avoids extra requests but lacks caching, can increase HTML size, and may cause issues with `:nth` selectors.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Suspense Routing with Fallback Loader | TypeScript/React\nDESCRIPTION: Shows Suspense with a fallback loader in a React router context. This pattern is used for code splitting and on-demand page loading; during asynchronous routing/loading, Suspense displays the fallback until the page is ready. No dependencies listed but meaningful within a framework such as UmiJS, React-Router.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<BrowserRoutes>\\n  <Routs>\\n    <Suspense fallback={<Loading />} />\\n  </Routs>\\n</BrowserRoutes>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design in Vite React Project\nDESCRIPTION: Commands to install the Ant Design library using npm, yarn, pnpm, or bun package managers.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install antd --save\n$ yarn add antd\n$ pnpm install antd --save\n$ bun add antd\n```\n\n----------------------------------------\n\nTITLE: Optimizing TypeScript definitions for multiple components\nDESCRIPTION: Improves TypeScript definitions for AutoComplete, Select, List, Button, Cascader, ConfigProvider, DatePicker, InputNumber, Slider and Upload components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Optimizing TS definitions for multiple components\n```\n\n----------------------------------------\n\nTITLE: Adding Splits Between Elements in Space\nDESCRIPTION: This example demonstrates how to add split elements between child components in the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/split.tsx\">Split</code>\n```\n\n----------------------------------------\n\nTITLE: Creating an Ant Design Form with Input and InputNumber (TSX)\nDESCRIPTION: This snippet demonstrates setting up a basic form using Ant Design's `Form`, `Form.Item`, `Input`, and `InputNumber` components in a React/TSX environment. It defines fields for 'Name' (using `Input`) and 'Price' (using `InputNumber`) within a product editing context.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <Form.Item label=\"Name\" name=\"name\">\n    <Input />\n  </Form.Item>\n\n  <Form.Item label=\"Price\" name=\"price\">\n    <InputNumber />\n  </Form.Item>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Compact Mode\nDESCRIPTION: This code demonstrates how to use the vertical compact mode in the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/compact-button-vertical.tsx\">Vertical Compact Mode</code>\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image Example of Repetitive Design Elements (HTML/JSX)\nDESCRIPTION: Similar to the previous snippet, this embeds an image illustrating \"Example of repetitive design elements\" using the `<ImagePreview>` component. It uses the same structure, including `src`, `alt`, and `class` attributes for the `<img>` tag, likely rendering within the Ant Design documentation's style.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of repetitive design elements\" src=\"https://gw.alipayobjects.com/zos/rmsportal/HXvcTaEbEWWFaQbiEpLg.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Referencing Basic FloatButton Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/basic.tsx') demonstrating the basic usage of the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/basic.tsx\" iframe=\"360\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Styling the Dynamic Delete Button (CSS)\nDESCRIPTION: Provides CSS rules to style a dynamic delete button element. It sets the button's relative positioning, margins, default color, font size, cursor type, and adds a smooth transition effect. Styles are also defined for the hover state (changing color) and the disabled state (changing cursor and reducing opacity), enhancing user interaction feedback.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/demo/dynamic-form-item.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.dynamic-delete-button {\n  position: relative;\n  top: 4px;\n  margin: 0 8px;\n  color: #999;\n  font-size: 24px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n.dynamic-delete-button:hover {\n  color: #777;\n}\n.dynamic-delete-button[disabled] {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project using NPX\nDESCRIPTION: Uses `npx` (Node Package Execute) to run the `create-next-app` command, scaffolding a new Next.js project named 'antd-demo' in the current directory. This is the standard way to initialize a Next.js project using npm.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-next-app antd-demo\n```\n\n----------------------------------------\n\nTITLE: Auto-wrapping with Space Component\nDESCRIPTION: Demonstration of auto-wrapping behavior in the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/wrap.tsx\">自动换行</code>\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Input (Markdown)\nDESCRIPTION: This table provides a comprehensive mapping from Less variables to Component Tokens for the Ant Design Input component, covering height, padding, colors (text, placeholder, border, background), addon background, hover states, disabled states, and focus outline. It highlights relationships with global tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@input-height-base` | `controlHeight` | Global Token |\n| `@input-height-lg` | `controlHeightLG` | Global Token |\n| `@input-height-sm` | `controlHeightSM` | Global Token |\n| `@input-padding-horizontal` | `paddingInline` | - |\n| `@input-padding-horizontal-base` | `paddingInline` | - |\n| `@input-padding-horizontal-sm` | `paddingInlineSM` | - |\n| `@input-padding-horizontal-lg` | `paddingInlineLG` | - |\n| `@input-padding-vertical-base` | `paddinBlock` | - |\n| `@input-padding-vertical-sm` | `paddingBlockSM` | - |\n| `@input-padding-vertical-lg` | `paddingBlockLG` | - |\n| `@input-placeholder-color` | `colorTextPlaceholder` | Global Token |\n| `@input-color` | `colorText` | Global Token |\n| `@input-icon-color` | - | 已废弃 |\n| `@input-border-color` | `colorBorder` | Global Token |\n| `@input-bg` | `colorBgContainer` | Global Token |\n| `@input-addon-bg` | `addonBg` | - |\n| `@input-hover-border-color` | `hoverBorderColor` | - |\n| `@input-disabled-bg` | `colorBgContainerDisabled` | Global Token |\n| `@input-outline-offset` | `activeShadow` | Control box-shadow when active |\n| `@input-icon-hover-color` | `colorIconHover` | Global Token |\n| `@input-disabled-color` | `colorTextDisabled` | Global Token |\n```\n\n----------------------------------------\n\nTITLE: Styling Profile Description Items in Ant Design Drawer (CSS)\nDESCRIPTION: This CSS snippet defines styles for various elements used to display profile or description details, likely within an Ant Design Drawer component. It targets wrapper elements, paragraphs containing description text, and inline labels, setting properties like margins, colors, font sizes, and line heights to ensure consistent and readable presentation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/drawer/demo/user-profile.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.site-description-item-profile-wrapper {\n  margin-bottom: 7px;\n  color: rgba(0, 0, 0, 0.65);\n  font-size: 14px;\n  line-height: 1.5715;\n}\n\n.ant-drawer-body p.site-description-item-profile-p {\n  display: block;\n  margin-bottom: 16px;\n  color: rgba(0, 0, 0, 0.85);\n  font-size: 16px;\n  line-height: 1.5715;\n}\n\n.site-description-item-profile-p-label {\n  display: inline-block;\n  margin-inline-end: 8px;\n  color: rgba(0, 0, 0, 0.85);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Variants to Ant Design Divider in React/TSX\nDESCRIPTION: References a demo file (`./demo/variant.tsx`) that demonstrates using the `variant` prop (e.g., 'dashed', 'dotted', 'solid') to change the line style of the Ant Design `Divider` in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/variant.tsx\">Variant</code>\n```\n\n----------------------------------------\n\nTITLE: Starting a Refine Project with Ant Design\nDESCRIPTION: Commands for navigating into the newly created project directory and starting the development server. This launches the Refine application with Ant Design components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-refine.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd antd-demo\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Nested Compact Layout\nDESCRIPTION: Debug example showing nested compact layouts.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/compact-nested.tsx\" debug>紧凑布局嵌套</code>\n```\n\n----------------------------------------\n\nTITLE: Calculating Scale Ratios for Popup Elements\nDESCRIPTION: Code demonstrating how to calculate scale ratios for popup elements using getBoundingClientRect and offset dimensions to handle transformed elements correctly.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tooltip-align.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst popupRect = popupEle.getBoundingClientRect();\nconst { offsetWidth, offsetHeight } = popupEle;\n\nconst scaleX = popupRect.width / offsetWidth;\nconst scaleY = popupRect.height / offsetHeight;\n```\n\n----------------------------------------\n\nTITLE: Enabling Flex Container Wrap Behavior - Ant Design - TypeScript/TSX\nDESCRIPTION: This snippet points to \"wrap.tsx\", which demonstrates wrapping behavior in a Flex container, configurable via the \"wrap\" property. It shows how child elements flow across multiple lines when they exceed container width. Dependencies include React and the Flex component. The prop \"wrap\" determines single vs. multiline layout. Output is a multi-line flex layout if necessary.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/wrap.tsx\\\">Wrap</code>\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Checkbox (Markdown)\nDESCRIPTION: This table lists Less variables previously used for styling the Ant Design Checkbox component and maps them to their corresponding Component Tokens in the newer theming system. It includes notes on deprecated variables and relationships with global tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@checkbox-size` | `controlInteractiveSize` | GlobalToken |\n| `@checkbox-color` | `colorPrimary` | - |\n| `@checkbox-check-color` | `colorWhite` | - |\n| `@checkbox-check-bg` | `colorPrimary` | GlobalToken |\n| `@checkbox-border-width` | `lineWidth` | - |\n| `@checkbox-border-radius` | `borderRadiusSM` | - |\n| `@checkbox-group-item-margin-right` | - | Deprecated for style change |\n```\n\n----------------------------------------\n\nTITLE: Generating New Page in Umi\nDESCRIPTION: Command to generate a new page named 'products' using Umi CLI.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx umi g page products\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapping with Space Component\nDESCRIPTION: This code shows how to enable wrapping of child elements within the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/wrap.tsx\">Wrap</code>\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Data for Products API\nDESCRIPTION: TypeScript file defining mock data and API endpoints for products using Umi's mock functionality.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineMock } from 'umi';\n\ntype Product = {\n  id: string;\n  name: string;\n};\n\nlet products: Product[] = [\n  { id: '1', name: 'Umi' },\n  { id: '2', name: 'Ant Design' },\n  { id: '3', name: 'Ant Design Pro' },\n  { id: '4', name: 'Dva' },\n];\n\nexport default defineMock({\n  'GET /api/products': (_, res) => {\n    res.send({\n      status: 'ok',\n      data: products,\n    });\n  },\n  'DELETE /api/products/:id': (req, res) => {\n    products = products.filter((item) => item.id !== req.params.id);\n    res.send({ status: 'ok' });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Rate Component Characters with Render Function in React\nDESCRIPTION: This snippet shows the type definition for a render function that can be used to customize each character in the Rate component. It takes RateProps as an argument and returns a ReactNode, allowing for flexible and dynamic character rendering.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/character-function.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(RateProps) => ReactNode\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Type Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/type.tsx') demonstrating different types (`default`, `primary`) of the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/type.tsx\" iframe=\"360\">Type</code>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dark Mode Color Palettes Using Ant Design React Components - JavaScript (React/JSX)\nDESCRIPTION: This snippet embeds the <ColorPalettes> React component with the dark property set to true, demonstrating Ant Design's dark mode color palettes. The component depends on the Ant Design React library and any styles or props it requires. No direct parameters are passed except the dark mode toggle; it visually renders selectable color palettes suitable for dark themed interfaces. Outputs are interactive UI elements within the documentation interface; use is limited to environments where JSX is supported (e.g., within Ant Design styleguides or Storybook).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/dark.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript (React/JSX)\nCODE:\n```\n<ColorPalettes dark={true}></ColorPalettes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio Options in Ant Design (Chinese)\nDESCRIPTION: This snippet explains in Chinese how to render radio buttons by configuring the 'options' parameter and set the radio type using the 'optionType' parameter in Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/demo/radiogroup-options.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n通过配置 `options` 参数来渲染单选框。也可通过 `optionType` 参数来设置 Radio 类型。\n```\n\n----------------------------------------\n\nTITLE: Adding Separators with Space Component\nDESCRIPTION: Example of using separators between elements in the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/split.tsx\">分隔符</code>\n```\n\n----------------------------------------\n\nTITLE: Getting Component Ref Type using GetRef\nDESCRIPTION: Demonstrates how to extract the ref type from an Ant Design component using the GetRef utility type. This is useful for accessing ref definitions of components that are not directly exposed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Select } from 'antd';\nimport type { GetRef } from 'antd';\n\ntype SelectRefType = GetRef<typeof Select>; // BaseSelectRef\n```\n\n----------------------------------------\n\nTITLE: Defining Smaller Circular Progress Bar in Markdown\nDESCRIPTION: This snippet describes a smaller circular progress bar component in both Chinese and English. It serves as documentation or example description for the component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/circle-mini.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n小一号的圈形进度。\n\n## en-US\n\nA smaller circular progress bar.\n```\n\n----------------------------------------\n\nTITLE: Styling Legacy Ant Design Icons (JSX)\nDESCRIPTION: Illustrates styling an icon using the older generic <Icon> component syntax by passing 'type', 'style', and 'theme' props. This method is contrasted with styling the specific icon component directly.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon type=\"message\" style={{ fontSize: '16px', color: '#08c' }} theme=\"outlined\" />\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Style Insertion Tracking with useMemo/useEffect | TypeScript/React\nDESCRIPTION: Simulates a CSS-in-JS style insertion refcounting hook for React 17 by counting usages in useMemo and cleanup in useEffect. Pseudocode and not for direct use; the counter parameter is a shared object to track references per hash. Key actions: insert style in render phase if not present; cleanup on effect teardown.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// pseudocode. Not used in real world\\nfunction useStyleInsertion(hash: string, counter: Record<string, number>) {\\n  useMemo(() => {\\n    if (!counter[hash]) {\\n      // Insert only when current style not inserted\\n    }\\n\\n    counter[hash] += 1;\\n  }, [hash]);\\n\\n  useEffect(\\n    () => () => {\\n      counter[hash] -= 1;\\n\\n      if (!counter[hash]) {\\n        // Remove if set to clear on destroy\\n      }\\n    },\\n    [hash],\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Vertical Space.Compact for Buttons in Ant Design\nDESCRIPTION: This markdown snippet provides descriptions in Chinese and English for the vertical compact layout feature in Ant Design. It specifies that this layout is currently only supported for Button combinations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact-button-vertical.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n垂直方向的紧凑布局，目前仅支持 Button 组合。\n\n## en-US\n\nVertical Mode for Space.Compact, support Button only.\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Popover Example in React\nDESCRIPTION: Imports a basic example of the Popover component usage.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Group Placement Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/placement.tsx') demonstrating the 'placement' prop for customizing menu animation placement in Ant Design FloatButton.Group (available since v5.21.0). The demo is intended to be displayed in an iframe with a width of 380px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/placement.tsx\" iframe=\"380\" version=\"5.21.0\">placement</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Design Warning Aggregation via ConfigProvider\nDESCRIPTION: Shows how to use the `warning` prop on Ant Design's `ConfigProvider` component with `strict: false` to aggregate multiple deprecation warnings into a single console message, improving clarity and reducing console noise during upgrades.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider warning={{ strict: false }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Behavior in Ant Design\nDESCRIPTION: Shows how to configure warning behavior using ConfigProvider to aggregate deprecation messages.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ConfigProvider warning={{ strict: false }} />\n```\n\n----------------------------------------\n\nTITLE: Removing Ant Design Internal Less Imports in Custom Stylesheets for v5\nDESCRIPTION: Illustrates the necessary change in custom Less files when migrating to Ant Design v5. Since v5 removes internal Less files and variables, direct `@import` statements referencing `antd/es/style/themes/index` or other internal Ant Design Less files must be removed. Theme values should be accessed via CSS-in-JS or the variable injection method.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n// Your less file\n--  @import (reference) '~antd/es/style/themes/index';\nor\n--  @import '~antd/es/style/some-other-less-file-ref';\n```\n\n----------------------------------------\n\nTITLE: Disabling babel-plugin-import in Umi Configuration for Ant Design v5\nDESCRIPTION: Shows how to explicitly disable the automatic `babel-plugin-import` configuration for Ant Design within a Umi project's configuration file (`config/config.ts` or `.umirc.ts`) by setting `antd.import` to `false`. This is necessary when migrating to Ant Design v5.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n// config/config.ts or .umirc\nexport default {\n  antd: {\n-   import: true,\n+   import: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Icons Package (Shell)\nDESCRIPTION: Provides commands to install the '@ant-design/icons' package version 5.x using different package managers (npm, yarn, pnpm, bun). This package is required to use Ant Design icons in a project.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/icon/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @ant-design/icons@5.x --save\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @ant-design/icons@5.x\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @ant-design/icons@5.x --save\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @ant-design/icons@5.x\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Addon Example (TSX)\nDESCRIPTION: References `./demo/addon.tsx`, demonstrating how to add elements before (`addonBefore`) or after (`addonAfter`) the Ant Design InputNumber component in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/addon.tsx\">Pre / Post tab</code>\n```\n\n----------------------------------------\n\nTITLE: Disabling Link Interaction During Dragging with CSS\nDESCRIPTION: This CSS rule targets anchor tags (`<a>`) within an element having the class `is-dragging`. It sets `pointer-events` to `none`, effectively disabling clicks and other pointer interactions on these links while the parent element is being dragged. This prevents unintended navigation or actions when sorting items via drag-and-drop, typically used when integrating libraries like `dnd-kit`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/upload/demo/drag-sorting.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n```css\n.is-dragging a {\n  pointer-events: none;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Internal FloatButton Panel Render Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/render-panel.tsx') demonstrating an internal panel rendering mechanism ('_InternalPanelDoNotUseOrYouWillBeFired') related to the FloatButton component. This is marked as a debug example and intended for internal use only.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Compact Mode\nDESCRIPTION: This example illustrates the compact mode specifically for button components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/compact-buttons.tsx\">Button Compact Mode</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio Options in Ant Design (English)\nDESCRIPTION: This snippet explains in English how to render radio buttons by configuring the 'options' parameter and set the radio type using the 'optionType' parameter in Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/radio/demo/radiogroup-options.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nRender radios by configuring `options`. Radio type can also be set through the `optionType` parameter.\n```\n\n----------------------------------------\n\nTITLE: Displaying Design Tokens for InputNumber Component\nDESCRIPTION: This custom tag renders a table displaying the specific design tokens available for customizing the appearance of the Ant Design `InputNumber` component. It relies on the documentation system's component rendering capabilities.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentTokenTable component=\"InputNumber\"></ComponentTokenTable>\n```\n\n----------------------------------------\n\nTITLE: Importing Rate Component Examples in React\nDESCRIPTION: These code snippets import various examples of the Rate component, demonstrating different features and use cases.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/half.tsx\">Half star</code>\n<code src=\"./demo/text.tsx\">Show copywriting</code>\n<code src=\"./demo/disabled.tsx\">Read only</code>\n<code src=\"./demo/clear.tsx\">Clear star</code>\n<code src=\"./demo/character.tsx\">Other Character</code>\n<code src=\"./demo/character-function.tsx\">Customize character</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Displaying Processing Results in Markdown\nDESCRIPTION: This snippet provides multilingual descriptions for a component that displays processing results. It includes both Chinese (zh-CN) and English (en-US) versions of the description.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/demo/info.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n展示处理结果。\n\n## en-US\n\nShow processing results.\n```\n\n----------------------------------------\n\nTITLE: Linking Hashed CSS File in HTML Template\nDESCRIPTION: Shows the server-side HTML template part of the 'Part Static Extract Style' method. A `<link>` tag is added to the `<head>` section to reference the dynamically generated, hashed CSS file URL (`hashCssFileUrl`). The rendered application HTML (`html`) is injected into the `<body>`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"${hashCssFileUrl}\" />\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Styling Input Addons with CSS in Ant Design\nDESCRIPTION: This CSS snippet defines width styles for select elements used as addons before and after an input field in Ant Design. It sets specific widths to ensure proper alignment and sizing of the addon elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/compact-debug.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.select-before {\n  width: 90px;\n}\n\n.select-after {\n  width: 80px;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dropdown Placement in Ant Design (Markdown)\nDESCRIPTION: This snippet provides instructions in Chinese and English on how to use the 'placement' prop to manually set the position of dropdown popups in Ant Design components. It's a multilingual documentation entry for a feature of Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/placement.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n可以通过 `placement` 手动指定弹出的位置。\n\n## en-US\n\nYou can manually specify the position of the popup via `placement`.\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Placement Example in React\nDESCRIPTION: Imports an example demonstrating various placement options for the Popover component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/placement.tsx\">Placement</code>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Semantic DOM in Space Component\nDESCRIPTION: This example illustrates the use of semantic DOM elements within the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/_semantic.tsx\" simplify=\"true\"></code>\n```\n\n----------------------------------------\n\nTITLE: Example package.json with Ant Design v4 and v5 Alias (JSON)\nDESCRIPTION: Shows how the `dependencies` section of a `package.json` file looks after installing Ant Design v5 using the alias `antd-v5` via `npm install antd-v5@npm:antd@5`. It lists both `antd` (pointing to v4) and `antd-v5` (pointing to v5).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"antd\": \"4.x\",\n  \"antd-v5\": \"npm:antd@5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Focus Method Example (TSX)\nDESCRIPTION: References `./demo/focus.tsx`, demonstrating how to programmatically focus the Ant Design InputNumber component using its `focus()` method (options updated in v5.22.0) in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/focus.tsx\" version=\"5.22.0\">Focus</code>\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Display Duration in Ant Design (Markdown)\nDESCRIPTION: This snippet provides instructions in both Chinese and English on how to change the default message display duration in Ant Design from 3 seconds to 10 seconds. It uses Markdown formatting to present the information.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/message/demo/duration.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n自定义时长 `10s`，默认时长为 `3s`。\n\n## en-US\n\nCustomize message display duration from default `3s` to `10s`.\n```\n\n----------------------------------------\n\nTITLE: Using Plain Text Style with Ant Design Divider in React/TSX\nDESCRIPTION: References a demo file (`./demo/plain.tsx`) showing the use of the `plain` prop for rendering divider text without heading styles in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/plain.tsx\">Text without heading style</code>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Divider in React/TSX\nDESCRIPTION: References a demo file (`./demo/vertical.tsx`) illustrating how to create a vertical divider, likely by setting the `type` prop to `vertical`, using the Ant Design `Divider` component in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n```\n\n----------------------------------------\n\nTITLE: Compact Button Layout\nDESCRIPTION: Example of creating a compact layout specifically for buttons.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/compact-buttons.tsx\">Button 紧凑布局</code>\n```\n\n----------------------------------------\n\nTITLE: Customizing Ant Design Trigger in JSX\nDESCRIPTION: This code snippet shows how to hide the default trigger in Ant Design components by setting the trigger prop to null. This allows for the use of a custom trigger instead of the default one.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/custom-trigger.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\ntrigger={null}\n```\n\n----------------------------------------\n\nTITLE: Comparing Snapshot Output and innerHTML for Empty Elements\nDESCRIPTION: This snippet shows the output generated by the previous TypeScript test case. The Jest snapshot includes an empty line representing the empty text node serialized by `pretty-format`, while the `console.log` output of `innerHTML` does not show this empty node. This highlights the discrepancy investigated.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: snap\nCODE:\n```\n// snapshot\nexports[`debug exports modules correctly 1`] = `\n<div>\n\n  <a />\n</div>\n`;\n\n// console.log\n<a></a>\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Group Menu Mode Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/group-menu.tsx') demonstrating the menu mode configuration of the Ant Design FloatButton.Group component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/group-menu.tsx\" iframe=\"360\">Menu mode</code>\n```\n\n----------------------------------------\n\nTITLE: Describing Popup Positioning in English\nDESCRIPTION: Explains in English that the popup will be shifted if there's not enough space after flipping to ensure it's fully displayed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/debug-flip-shift.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nShift the popup if not enough space after flip.\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Dropdown (Markdown)\nDESCRIPTION: This table shows the relationship between legacy Less variables and Component Tokens for the Ant Design Dropdown component, specifically focusing on selected item colors and disabled submenu backgrounds, referencing global tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Less variables                       | Component Token       | Note        |\n| ------------------------------------ | --------------------- | ----------- |\n| `@dropdown-selected-color`           | `colorPrimary`        | GlobalToken |\n| `@dropdown-menu-submenu-disabled-bg` | `colorBgElevated`     | GlobalToken |\n| `@dropdown-selected-bg`              | `controlItemBgActive` | GlobalToken |\n```\n\n----------------------------------------\n\nTITLE: Release Version and Date - 5.23.4\nDESCRIPTION: Version number and release date formatting for Ant Design 5.23.4\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.23.4\n\n`2025-02-05`\n```\n\n----------------------------------------\n\nTITLE: Updating Umi Configuration for New Route\nDESCRIPTION: Diff showing the addition of a new route for the 'products' page in the Umi configuration file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from \"umi\";\n\nexport default defineConfig({\n  routes: [\n    { path: \"/\", component: \"index\" },\n    { path: \"/docs\", component: \"docs\" },\n+    { path: \"/products\", component: \"products\" },\n  ],\n  npmClient: \"pnpm\",\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Disabled InputNumber Example (TSX)\nDESCRIPTION: References `./demo/disabled.tsx`, showing how to disable the Ant Design InputNumber component using the `disabled` prop in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n```\n\n----------------------------------------\n\nTITLE: Importing Spin Component Examples in TypeScript\nDESCRIPTION: These code snippets demonstrate how to import various examples of the Spin component in TypeScript. Each example showcases different features and use cases of the Spin component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/size.tsx\">Size</code>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/nested.tsx\">Embedded mode</code>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/tip.tsx\">Customized description</code>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/delayAndDebounce.tsx\">Delay</code>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/custom-indicator.tsx\">Custom spinning indicator</code>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/percent.tsx\" version=\"5.18.0\">Progress</code>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/fullscreen.tsx\">Fullscreen</code>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vite Project and Installing Dependencies\nDESCRIPTION: Commands to create a new Vite project named 'antd-demo', navigate into the project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd antd-demo\n$ npm install\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Margins for Extra Tab Actions in CSS\nDESCRIPTION: This CSS code defines styles for a demo button used as an extra action within Ant Design Tabs. It sets a default end margin (right margin in LTR) and adjusts it to a start margin (left margin in LTR) when the layout direction is Right-To-Left (`.ant-row-rtl`). This ensures consistent spacing for extra controls regardless of text direction.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/demo/extra.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.tabs-extra-demo-button {\n  margin-inline-end: 16px;\n}\n\n.ant-row-rtl .tabs-extra-demo-button {\n  margin-inline-end: 0;\n  margin-inline-start: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Font Family Variable in CSS\nDESCRIPTION: This CSS snippet declares a font-family variable listing preferred system and fallback fonts for consistent cross-platform typography in Ant Design. It assumes a LESS or CSS preprocessor environment where variables can be used and referenced throughout the application's stylesheets. The input is not a standalone selector, but a variable definition that should be imported and used elsewhere, ensuring user interfaces default to available system fonts with relevant emoji and language support. Output is the availability of the '@font-family' variable in other styles.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/font.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n  'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n  'Noto Color Emoji';\n```\n\n----------------------------------------\n\nTITLE: Initializing Umi Project with pnpm\nDESCRIPTION: Commands to create a new Umi project using pnpm package manager and select project template options.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir myapp && cd myapp\n$ pnpm create umi\n```\n\n----------------------------------------\n\nTITLE: Disabling Tab Transition for Editable Cards in Ant Design (CSS)\nDESCRIPTION: This CSS snippet sets the transition property to none for Ant Design tab elements when the tabs are in 'editable-card' mode. It specifically targets descendants of .ant-tabs-editable with a .ant-tabs-nav and .ant-tabs-tab structure to remove transition effects, which helps achieve a snappier drag-and-drop interaction when using the dnd-kit library. There are no additional dependencies, but this should be used in conjunction with Ant Design styles and the dnd-kit integration code as described in surrounding documentation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tabs/demo/custom-tab-bar-node.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* set transition to none when type=\\\"editable-card\\\" */\\n.ant-tabs-editable > .ant-tabs-nav .ant-tabs-tab {\\n  transition: none;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Unformatted React Component Example\nDESCRIPTION: Example showing poorly formatted React/TypeScript code with improper indentation and spacing versus well-formatted code.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nrenderBatchButton() {\n\nreturn(\n\n\n\n<Dropdown overlay={this. renderExportMenu(\"2\")}>\n\n\n\n\n\nexport warehouse order\n\n);\n\n}\n\n\nrenderExportMenu(category) {\n\nlet exportFile=({key})=>{\n\nconsole. log(key)\n\n}\n\nlet items=[];\n\nif(this.props.global.template_list){\n\nitems=this.props.global.template_list.map((item)=>{\n\nif(category===item.category){\n\nreturn <Menu.Item key={item.id}>{item.name}</Menu.Item>;\n\n}\n\n});\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unlinking Local Package and Reinstalling (Bash)\nDESCRIPTION: Explains how to remove a local package link (e.g., `rc-field-form`) previously created using `npm link` and reinstall the package from the registry using `npm i`. This is often required after verifying local changes in a dependency and before running tests or committing, as local links can sometimes interfere with the testing environment.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm unlink \"rc-field-form\" --no-save\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Using Compact Mode for Form Components\nDESCRIPTION: This code snippet shows how to use the compact mode of the Space component for form elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/compact.tsx\">Compact Mode for form component</code>\n```\n\n----------------------------------------\n\nTITLE: Flex Typesetting Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file illustrating using flexbox properties ('justify', 'align') on the Row component for horizontal arrangement (typesetting) of columns in an Ant Design grid. The actual code implementing this example resides in the './demo/flex.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/flex.tsx\">Typesetting</code>\n```\n\n----------------------------------------\n\nTITLE: Using 'use client' Directive for Client-Side Rendering in Next.js\nDESCRIPTION: This example shows how to use the 'use client' directive to make a page fully client-rendered in Next.js, avoiding issues with Ant Design components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\n// This is not real world code, just for explain\nexport default () => {\n  return (\n    <div className=\"App\">\n      <Form>\n        <Form.Item>\n          <Button type=\"primary\">Button</Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Global Locale Implementation for Static Methods\nDESCRIPTION: Shows the hack implementation of how Ant Design handled localization with static methods using global variables.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Sample. Not real world code.\nlet globalLocale = null;\n\nconst ConfigProvider = (props) => {\n  if (props.locale) {\n    globalLocale = props.locale;\n  }\n\n  // ...\n};\n\nModal.confirm = (props) => {\n  // ...\n\n  ReactDOM.render(\n    <ConfigProvider locale={globalLocale}>\n      <Modal {...modalProps} />\n    </ConfigProvider>,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Timing Issue: useLayoutEffect for DOM Measurement vs Style Injection | TypeScript/React\nDESCRIPTION: Shows how useLayoutEffect used for measuring DOM size can run before a subsequent useLayoutEffect that injects styles. This can lead to measurement based on stale or absent styles, causing incorrect layout calculations. Used to illustrate ordering caveat when manipulating DOM and styles programmatically.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/suspense.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n// Some logic measure DOM size\\nuseLayoutEffect(() => {\\n  // This is not correct since style is not applied\\n  const { clientHeight } = nodeRef.current;\\n}, []);\\n\\n// Inject style\\nuseLayoutEffect(() => {\\n  // ...\\n}, [hash]);\n```\n\n----------------------------------------\n\nTITLE: Local Visual Regression Testing Command\nDESCRIPTION: Command for running visual regression tests locally before submitting a PR. Provides interactive prompts for selecting specific components to test.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/visual-regression.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:visual-regression:local # Follow the prompts to select components for visual regression testing\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for DatePicker (Markdown)\nDESCRIPTION: This table outlines the mapping from legacy Less variables to new Component Tokens for the Ant Design DatePicker component. It specifies relationships to global tokens and provides context for specific styling properties like cell dimensions and colors.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@picker-bg` | `colorBgContainer` | Global Token |\n| `@picker-basic-cell-hover-color` | `cellHoverBg` | - |\n| `@picker-basic-cell-active-with-range-color` | `cellActiveWithRangeBg` | - |\n| `@picker-basic-cell-hover-with-range-color` | `cellHoverWithRangeBg` | - |\n| `@picker-basic-cell-disabled-bg` | `cellBgDisabled` | - |\n| `@picker-border-color` | `colorSplit` | Global Token |\n| `@picker-date-hover-range-border-color` | `cellRangeBorderColor` | - |\n| `@picker-date-hover-range-color` | `cellHoverWithRangeColor` | - |\n| `@picker-time-panel-column-width` | `timeColumnWidth` | - |\n| `@picker-time-panel-column-height` | `timeColumnHeight` | - |\n| `@picker-time-panel-cell-height` | `timeCellHeight` | - |\n| `@picker-panel-cell-height` | `cellHeight` | - |\n| `@picker-panel-cell-width` | `cellWidth` | - |\n| `@picker-text-height` | `textHeight` | - |\n| `@picker-panel-without-time-cell-height` | `withoutTimeCellHeight` | - |\n```\n\n----------------------------------------\n\nTITLE: Defining the Default Font Family Stack in CSS for Ant Design\nDESCRIPTION: This CSS snippet specifies the recommended `font-family` stack for Ant Design, defined within a CSS preprocessor variable likely. It prioritizes system UI fonts like '-apple-system' and 'BlinkMacSystemFont' for a native look and feel across operating systems, followed by common cross-platform fonts ('Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif) as fallbacks. It also includes specific fonts for rendering emojis consistently across platforms.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/font.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n  'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n  'Noto Color Emoji';\n```\n\n----------------------------------------\n\nTITLE: Adding Status to Select Component in Ant Design (Markdown)\nDESCRIPTION: This snippet shows how to use the 'status' prop to add error or warning states to the Select component in Ant Design. It includes descriptions in both Chinese and English.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/status.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n使用 `status` 为 Select 添加状态，可选 `error` 或者 `warning`。\n\n## en-US\n\nAdd status to Select with `status`, which could be `error` or `warning`.\n```\n\n----------------------------------------\n\nTITLE: Checking Dependency Versions in package.json\nDESCRIPTION: This JSON snippet displays relevant development dependencies from a `package.json` file. It confirms the versions of `pretty-format` (^29.0.0) and `@testing-library/react` (^13.0.0) being used, which was part of the investigation into the source of snapshot inconsistencies.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"pretty-format\": \"^29.0.0\",\n    \"@testing-library/react\": \"^13.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multilingual Description for Horizontal Top Navigation Menu\nDESCRIPTION: This Markdown snippet provides descriptions for a horizontal top navigation menu component in Chinese (zh-CN) and English (en-US). It is typically used in documentation or example files to explain the purpose of the component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/horizontal.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n水平的顶部导航菜单。\n\n## en-US\n\nHorizontal top navigation menu.\n```\n\n----------------------------------------\n\nTITLE: Escaping Template Literals in Validation Messages (JavaScript)\nDESCRIPTION: This snippet illustrates how to prevent the `${}` syntax from being interpreted as a variable placeholder in Ant Design Form validation messages. By prefixing the syntax with double backslashes (`\\\\${}`), the literal string `${label}` is displayed instead of being replaced by the field's label.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ required: true, message: '${label} is convert, \\\\${label} is not convert' }\n\n// good is convert, ${label} is not convert\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Tooltip Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/tooltip.tsx') demonstrating the integration of a tooltip with the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/tooltip.tsx\" iframe=\"360\">FloatButton with tooltip</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack to Use Moment.js via Plugin in Ant Design v5 (JavaScript)\nDESCRIPTION: Shows how to add the `AntdMomentWebpackPlugin` to the Webpack configuration's `plugins` array. This forces Ant Design v5 to use Moment.js instead of its default Day.js.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack-config.js\nimport AntdMomentWebpackPlugin from '@ant-design/moment-webpack-plugin';\n\nmodule.exports = {\n  // ...\n  plugins: [new AntdMomentWebpackPlugin()],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Upward Suggestion Placement in Ant Design (Chinese)\nDESCRIPTION: This code snippet demonstrates how to change the placement of suggestions to expand upwards in Ant Design, explained in Chinese.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/placement.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n向上展开建议。\n```\n\n----------------------------------------\n\nTITLE: Styling Ant Design Numeric Input Tooltip CSS\nDESCRIPTION: CSS rules targeting a custom numeric input component that uses Ant Design's Tooltip. It sets a minimum width and height for the tooltip's inner container (`.ant-tooltip-inner`) to prevent layout issues, especially with empty or short content, or potential arrow overflow. It also defines the font size for a title element (`.numeric-input-title`) within the numeric input.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input/demo/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* to prevent the arrow overflow the popup container,\nor the height is not enough when content is empty */\n.numeric-input .ant-tooltip-inner {\n  min-width: 32px;\n  min-height: 37px;\n}\n\n.numeric-input .numeric-input-title {\n  font-size: 14px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tour Component Disabled Interaction in JavaScript\nDESCRIPTION: Example of using the new disabledInteraction prop on the Tour component to disable interactive behavior of the highlighted area.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Tour steps={steps} disabledInteraction={true} />\n```\n\n----------------------------------------\n\nTITLE: Documenting Custom Segmented Item Rendering in Ant Design\nDESCRIPTION: This markdown snippet provides instructions in both Chinese and English on how to use ReactNode to customize the rendering of individual Segmented Items in Ant Design's Segmented component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/demo/custom.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n使用 ReactNode 自定义渲染每一个 Segmented Item。\n\n## en-US\n\nCustom each Segmented Item by ReactNode.\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Gap Style in Space\nDESCRIPTION: This code shows how to use flex gap styling within the Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/gap-in-line.tsx\" debug>Flex gap style</code>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Alignment Variations - Ant Design - TypeScript/TSX\nDESCRIPTION: This snippet references the \"align.tsx\" file, which provides examples for configuring alignment within the Flex component. It likely demonstrates usage of the \"align\" prop alongside justify-content and align-items concepts. Requires React, Ant Design Flex, and familiarity with CSS Flexbox properties. Main inputs include alignment properties; output is visually-aligned UI elements in the rendered Flex container.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/align.tsx\\\">align</code>\n```\n\n----------------------------------------\n\nTITLE: Importing Popconfirm Component Examples in TypeScript\nDESCRIPTION: These code snippets demonstrate how to import and use various examples of the Popconfirm component, including basic usage, localization, placement, and advanced features.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/locale.tsx\">Locale text</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/shift.tsx\" iframe=\"300\">Auto Shift</code>\n<code src=\"./demo/dynamic-trigger.tsx\">Conditional trigger</code>\n<code src=\"./demo/icon.tsx\">Customize icon</code>\n<code src=\"./demo/async.tsx\">Asynchronously close</code>\n<code src=\"./demo/promise.tsx\">Asynchronously close on Promise</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Ant Design CSS Generation Script\nDESCRIPTION: Provides the `tsconfig.node.json` configuration necessary for `ts-node` to correctly compile and execute the TypeScript script (`scripts/genAntdCss.tsx`) responsible for generating the Ant Design CSS file. It specifies compiler options suitable for a Node.js environment, including module resolution (`NodeNext`) and JSX support.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strictNullChecks\": true,\n    \"module\": \"NodeNext\",\n    \"jsx\": \"react\",\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Next.js Registry using PNPM\nDESCRIPTION: Installs the `@ant-design/nextjs-registry` package using PNPM. This package facilitates style extraction for Ant Design components in Next.js App Router.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install @ant-design/nextjs-registry --save\n```\n\n----------------------------------------\n\nTITLE: Importing Component Token Example\nDESCRIPTION: Reference to a debug example for component token configuration\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Next.js Registry using Yarn\nDESCRIPTION: Adds the `@ant-design/nextjs-registry` package using Yarn. This utility helps manage Ant Design styles specifically for Next.js App Router applications.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @ant-design/nextjs-registry\n```\n\n----------------------------------------\n\nTITLE: rc-portal DOM Node Appending with useLayoutEffect - Portal Mount Logic (TypeScript pseudocode)\nDESCRIPTION: This snippet demonstrates how rc-portal ensures a portal DOM node is appended to the document body when a component mounts using React's useLayoutEffect. The code conditionally queues or directly executes the append operation to guarantee correct mount order. Required dependencies: React, browser DOM. The append function creates and inserts a div into document.body. If queueCreate is set, append is delayed to maintain parent-child ordering.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\\nfunction append() {\\n  // This is not real world code, just for explain\\n  document.body.appendChild(document.createElement('div'));\\n}\\n\\nuseLayoutEffect(() => {\\n  if (queueCreate) {\\n    queueCreate(append);\\n  } else {\\n    append();\\n  }\\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component Demo Files\nDESCRIPTION: Example imports of various Progress component demonstration files showing different implementations and variations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/line.tsx\">Progress bar</code>\n<code src=\"./demo/circle.tsx\">Circular progress bar</code>\n<code src=\"./demo/line-mini.tsx\">Mini size progress bar</code>\n<code src=\"./demo/circle-micro.tsx\">Responsive circular progress bar</code>\n<code src=\"./demo/circle-mini.tsx\">Mini size circular progress bar</code>\n<code src=\"./demo/dynamic.tsx\">Dynamic</code>\n<code src=\"./demo/format.tsx\">Custom text format</code>\n<code src=\"./demo/dashboard.tsx\">Dashboard</code>\n<code src=\"./demo/segment.tsx\">Progress bar with success segment</code>\n<code src=\"./demo/linecap.tsx\">Stroke Linecap</code>\n<code src=\"./demo/gradient-line.tsx\">Custom line gradient</code>\n<code src=\"./demo/steps.tsx\">Progress bar with steps</code>\n<code src=\"./demo/circle-steps.tsx\" version=\"5.16.0\">Circular progress bar with steps</code>\n<code src=\"./demo/size.tsx\">Progress size</code>\n<code src=\"./demo/info-position.tsx\" version=\"5.18.0\">Change progress value position</code>\n```\n\n----------------------------------------\n\nTITLE: Defining ToolbarRenderInfoType Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `ToolbarRenderInfoType` which specifies the structure of the information object passed to the `toolbarRender` function in the Ant Design Image preview. It includes available icons, action handlers, the current transform state, the current image index (in group preview), and image details.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  icons: {\n    flipYIcon: React.ReactNode;\n    flipXIcon: React.ReactNode;\n    rotateLeftIcon: React.ReactNode;\n    rotateRightIcon: React.ReactNode;\n    zoomOutIcon: React.ReactNode;\n    zoomInIcon: React.ReactNode;\n  };\n  actions: {\n    onActive?: (index: number) => void; // support after 5.21.0\n    onFlipY: () => void;\n    onFlipX: () => void;\n    onRotateLeft: () => void;\n    onRotateRight: () => void;\n    onZoomOut: () => void;\n    onZoomIn: () => void;\n    onReset: () => void; // support after 5.17.3\n    onClose: () => void;\n  };\n  transform: TransformType,\n  current: number;\n  image: ImgInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Group Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/group.tsx') demonstrating the usage of the Ant Design FloatButton.Group component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/group.tsx\" iframe=\"360\">FloatButton Group</code>\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Divider (Markdown)\nDESCRIPTION: This table provides the mapping from Less variables to Component Tokens for the Ant Design Divider component. It specifies the relationship to the global `colorSplit` token and other divider-specific styling tokens.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| --- | --- | --- |\n| `@divider-text-padding` | `textPaddingInline` | - |\n| `@divider-orientation-margin` | `orientationMargin` | - |\n| `@divider-color` | `colorSplit` | Global Token |\n| `@divider-vertical-gutter` | `verticalMarginInline` | - |\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Component with an Out-of-Range Value (TSX)\nDESCRIPTION: This snippet demonstrates using the `MyStr` component with a `value` ('Hello World') that exceeds the specified `maxLen` (5). The surrounding text discusses the potential (but often incorrect) intuition to display a truncated value ('Hello').\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MyStr value=\"Hello World\" maxLen={5}>\n```\n\n----------------------------------------\n\nTITLE: Modifying Umi Route Configuration for ProLayout in JavaScript (Diff Format)\nDESCRIPTION: This snippet demonstrates how to enhance Umi's route configuration objects to include a 'name' property for each route. Adding the 'name' field allows ProLayout to render menus based on these routes. Dependencies include a Umi project setup, '@umijs/plugins/dist/react-query', and the pnpm package manager. Key parameters modified are the 'name' fields for each route object. The expected outcome is dynamically generated, named menu items in the application's layout. No additional constraints are imposed, but this should be placed in the Umi configuration file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: Diff\nCODE:\n```\nimport { defineConfig } from \"umi\";\n\nexport default defineConfig({\n  routes: [\n-    { path: \"/\", component: \"index\" },\n+    { path: \"/\", component: \"index\", name: \"home\" },\n-    { path: \"/docs\", component: \"docs\" },\n+    { path: \"/docs\", component: \"docs\", name: \"docs\" },\n-    { path: \"/products\", component: \"products\" },\n+    { path: \"/products\", component: \"products\", name: \"products\" },\n  ],\n  plugins: [\"@umijs/plugins/dist/react-query\"],\n  reactQuery: {},\n  npmClient: \"pnpm\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Next.js Registry using Bun\nDESCRIPTION: Adds the `@ant-design/nextjs-registry` package using Bun. This package is used to handle Ant Design's CSS-in-JS styling within the Next.js App Router environment.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add @ant-design/nextjs-registry\n```\n\n----------------------------------------\n\nTITLE: Initializing Rsbuild Project and Starting Development Server\nDESCRIPTION: Commands to create a new Rsbuild project with React template and start the development server.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-rsbuild.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd demo\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Describing Placement Options in Ant Design (Markdown)\nDESCRIPTION: This snippet provides a brief description of the placement options available in Ant Design components. It includes both Chinese (zh-CN) and English (en-US) versions of the description.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/placement.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n位置有十二个方向。\n\n## en-US\n\nThere are 12 `placement` options available.\n```\n\n----------------------------------------\n\nTITLE: Documenting Debug Component Usage in Markdown\nDESCRIPTION: This snippet provides documentation for a debug-only component in both Chinese and English. It warns developers not to use this component in production environments.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/render-panel.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n调试用组件，请勿直接使用。\n\n## en-US\n\nDebug usage. Do not use in your production.\n```\n\n----------------------------------------\n\nTITLE: SegmentedItemType Interface Definition\nDESCRIPTION: TypeScript interface definition for individual Segmented items, including properties for label, value, icon, disabled state, and additional CSS classes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SegmentedItemType {\n  label?: ReactNode;  // Display text for Segmented item\n  value?: string | number;  // Value for Segmented item\n  icon?: ReactNode;  // Display icon for Segmented item\n  disabled?: boolean;  // Disabled state of segmented item\n  className?: string;  // The additional css class\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Auto Line Wrap Feature in Markdown\nDESCRIPTION: This snippet provides brief descriptions of the auto line wrap feature in both Chinese and English using Markdown syntax. It demonstrates how to structure multilingual documentation for Ant Design components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/demo/wrap.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n自动换行。\n\n## en-US\n\nAuto wrap line.\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Colors Package\nDESCRIPTION: This snippet shows how to install the @ant-design/colors package using npm. This package provides programmatic access to Ant Design's color palettes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/colors.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ant-design/colors\n```\n\n----------------------------------------\n\nTITLE: Getting Component Types in TypeScript\nDESCRIPTION: Demonstrates how to access internal type definitions and props from Ant Design components using utility types\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Checkbox, CheckboxProps, GetProp, GetProps, GetRef, Input } from 'antd';\n\n// Get Props\ntype CheckboxGroupProps = GetProps<typeof Checkbox.Group>;\n\n// Get Prop\ntype CheckboxValue = GetProp<CheckboxProps, 'value'>;\n\n// Get Ref\ntype InputRef = GetRef<typeof Input>;\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design CSS-in-JS Utility using NPM\nDESCRIPTION: Installs the `@ant-design/cssinjs` package using npm. This library is necessary for manual style extraction when using Ant Design with the Next.js Pages Router. Ensure its version matches the one used internally by `antd`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @ant-design/cssinjs --save\n```\n\n----------------------------------------\n\nTITLE: Button Loading Type Definition\nDESCRIPTION: Refined type definition for Button loading prop removing redundant number type\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ButtonProps {\n  loading?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Visual Regression Tests in Ant Design\nDESCRIPTION: Command to run visual regression tests and generate screenshots. Screenshots are saved in the imageSnapshots directory. Supports testing specific components by passing the component path as an argument.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/visual-regression.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:image # Screenshots will be saved in the imageSnapshots directory. For specific component screenshots, use: npm run test:image -- components/button\n```\n\n----------------------------------------\n\nTITLE: Portal DOM Append Implementation\nDESCRIPTION: Implementation of DOM node creation and appending logic in rc-portal.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\nfunction append() {\n  // This is not real world code, just for explain\n  document.body.appendChild(document.createElement('div'));\n}\n\nuseLayoutEffect(() => {\n  if (queueCreate) {\n    queueCreate(append);\n  } else {\n    append();\n  }\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript Code\nDESCRIPTION: Commands to compile TypeScript code to the lib and es directories.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run compile\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn compile\n```\n\n----------------------------------------\n\nTITLE: Styling Load More Demo List in CSS\nDESCRIPTION: This CSS snippet sets a minimum height for a demo list that implements the 'Load More' functionality. It ensures the list has a reasonable initial size before more items are loaded.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/demo/loadmore.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.demo-loadmore-list {\n  min-height: 350px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Umi Configuration for React Query\nDESCRIPTION: Diff showing the addition of react-query plugin to the Umi configuration file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from \"umi\";\n\nexport default defineConfig({\n+  plugins: ['@umijs/plugins/dist/react-query'],\n+  reactQuery: {},\n  routes: [\n    { path: \"/\", component: \"index\" },\n    { path: \"/docs\", component: \"docs\" },\n    { path: \"/products\", component: \"products\" },\n  ],\n  npmClient: 'pnpm',\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Timeline Icon Font Size with CSS\nDESCRIPTION: This CSS rule targets elements with the class `timeline-clock-icon`. It sets the `font-size` property to `16px`, adjusting the size of the custom icon used within a timeline component. This allows for visual customization of timeline item markers.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/timeline/demo/custom.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.timeline-clock-icon {\n  font-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Implementation\nDESCRIPTION: Solution implementation using appendedRef to control queue creation behavior for enabled Modals.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\nconst appendedRef = useRef(false);\n\nconst queueCreate = !appendedRef.current\n  ? (appendFn: VoidFunction) => {\n      // same code\n    }\n  : undefined;\n\nfunction append() {\n  // This is not real world code, just for explain\n  document.body.appendChild(document.createElement('div'));\n  appendedRef.current = true;\n}\n\n// ...\n\nreturn <PortalContext value={queueCreate}>{children}</PortalContext>;\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design CSS-in-JS Utility using PNPM\nDESCRIPTION: Installs the `@ant-design/cssinjs` package using PNPM. It provides the necessary functions (`createCache`, `extractStyle`, `StyleProvider`) for handling Ant Design styles in SSR with Next.js Pages Router.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install @ant-design/cssinjs --save\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Form's setFieldsValue with TypeScript\nDESCRIPTION: This example shows a TypeScript error when setting a form field to null, and explains the relation to the strictNullChecks compiler option.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// This is not real world code, just for explain\nimport { Form } from 'antd';\n\ntype Test = {\n  value: string[] | null;\n};\n\nexport default () => {\n  const [form] = Form.useForm<Test>();\n\n  form.setFieldsValue({\n    value: null, // Error: Type \"null\" cannot be assigned to type \"string[] | undefined\".\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Explaining Progress Value Position Customization in Ant Design (Markdown)\nDESCRIPTION: This snippet provides explanations in both Chinese and English on how to use the 'percentPosition' prop to adjust the position of the progress value in Ant Design progress bars. It mentions that the value can be placed inside, outside, or at the bottom of the progress bar.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/info-position.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n改变进度数值位置，可使用 `percentPosition` 调整，使进度条数值在进度条内部、外部或底部。\n\n## en-US\n\nChange the position of the progress value, you can use `percentPosition` to adjust it so that the progress bar value is inside, outside or at the bottom of the progress bar.\n```\n\n----------------------------------------\n\nTITLE: Customizing onClick Event for Anchor in React\nDESCRIPTION: Demo import for an example showing how to customize the onClick event for an anchor component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/onClick.tsx\">Customize the onClick event</code>\n```\n\n----------------------------------------\n\nTITLE: Disabling babel-plugin-import in Umi Configuration (TypeScript)\nDESCRIPTION: Shows how to disable the automatic `babel-plugin-import` for Ant Design within a UmiJS project configuration (`config/config.ts` or `.umirc.ts`) by setting `antd.import` to `false`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n// config/config.ts or .umirc\nexport default {\n  antd: {\n-   import: true,\n+   import: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Arrow Example in React\nDESCRIPTION: Imports an example showing the Popover component with an arrow.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/arrow.tsx\">Arrow</code>\n```\n\n----------------------------------------\n\nTITLE: Specifying Patch Version Updates in package.json (JSON)\nDESCRIPTION: Demonstrates using the tilde (`~`) in `package.json` to specify dependency versions, allowing automatic updates for patch releases (e.g., 3.9.x) while locking the minor version (3.9). This approach is used in Ant Design to easily incorporate bug fixes from `react-component` libraries without manual version bumps for patches.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"rc-cascader\": \"~3.9.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy-based Reference Handling\nDESCRIPTION: Shows how to use Proxy to intercept and handle component references while maintaining backwards compatibility.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nuseImperativeHandle(\n  ref,\n  () =>\n    new Proxy(divRef.current, {\n      get(target, key) {\n        // ...\n      },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router Error with Ant Design Subcomponents\nDESCRIPTION: This snippet shows an error message that may occur when using Ant Design subcomponents with Next.js App Router.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nError: Cannot access .Option on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Wireframe Example in React\nDESCRIPTION: Imports a debug example showing a wireframe version of the Popover component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS-based Line Ellipsis in TypeScript React\nDESCRIPTION: Basic CSS implementation of text ellipsis using webkit-line-clamp property to limit text to specific number of lines.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  style={{\n    display: '-webkit-box',\n    overflow: 'hidden',\n    WebkitBoxOrient: 'vertical',\n    webkitLineClamp: 3,\n  }}\n>\n  {text}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Documenting Sticky Header Component Usage in Markdown\nDESCRIPTION: Provides a brief description of the sticky header component's purpose in both Chinese and English. It explains that the component is typically used to fix the top navigation, making page switching more convenient.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/fixed.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n一般用于固定顶部导航，方便页面切换。\n\n## en-US\n\nSticky Header is generally used to fix the top navigation to facilitate page switching.\n```\n\n----------------------------------------\n\nTITLE: Debugging Flex Layouts - Ant Design - TypeScript/TSX\nDESCRIPTION: This snippet points to \"debug.tsx\", flagged as a debug example, designed to illustrate or test Flex layout behavior, possibly by showing layout boundaries, live props, or advanced diagnostics. Involves React and Ant Design Flex with special parameters or visualization aids to help developers understand or troubleshoot flexbox issues. Input can include flexible debugging props; output is a visual or inspected layout demonstration.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/flex/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\\\"./demo/debug.tsx\\\" debug>debug</code>\n```\n\n----------------------------------------\n\nTITLE: Merging Remote Changes\nDESCRIPTION: Series of commands to sync with upstream master and rebase local changes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream master\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout fix-branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase master\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin fix-branch\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for List (Markdown)\nDESCRIPTION: This table outlines the mapping from Less variables to Component Tokens for the Ant Design List component. It covers header/footer backgrounds, empty state padding, item padding for different sizes, and meta section margins and font sizes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@list-header-background` | `headerBg` | - |\n| `@list-footer-background` | `footerBg` | - |\n| `@list-empty-text-padding` | `emptyTextPadding` | - |\n| `@list-item-padding` | `itemPadding` | - |\n| `@list-item-padding-sm` | `itemPaddingSM` | - |\n| `@list-item-padding-lg` | `itemPaddingLG` | - |\n| `@list-item-meta-margin-bottom` | `metaMarginBottom` | - |\n| `@list-item-meta-avatar-margin-right` | `avatarMarginRight` | - |\n| `@list-item-meta-title-margin-bottom` | `titleMarginBottom` | - |\n| `@list-customize-card-bg` | - | Deprecated for style change |\n| `@list-item-meta-description-font-size` | `descriptionFontSize` | - |\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting a Farm Project (Bash)\nDESCRIPTION: Commands to navigate into the newly created Farm project directory, install project dependencies using npm, and start the development server. This assumes a project named 'farm-project' has been created using 'npm create farm@latest' (or yarn/pnpm/bun equivalents) and the React template was selected.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-farm.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd farm-project\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Bar Linecap Style - Markdown\nDESCRIPTION: Example showing how to use strokeLinecap property to modify the progress bar endpoints from rounded to butt style\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/linecap.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nstrokeLinecap=\"butt\"\n```\n\n----------------------------------------\n\nTITLE: React Context Loss with Static Methods\nDESCRIPTION: Demonstrates how static methods lose React context when called, causing context values to fallback to defaults instead of receiving provider values.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/why-not-static.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst Context = React.createContext('default');\n\nconst MyContent = () => React.useContext(Context);\n\nconst Wrapper = () => {\n  React.useEffect(() => {\n    // Static function is out of context.\n    // We can only get `default` instead of `Hello World`\n    message.success(<MyContent />);\n  }, []);\n\n  return null;\n};\n\nconst Demo = () => (\n  <Context.Provider value=\"Hello World\">\n    <Wrapper />\n  </Context.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Describing Circular Progress Bar in English\nDESCRIPTION: Markdown description in English explaining a circular progress bar that supports steps and color segments. It specifies the default gap between segments as 2px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/circle-steps.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nA circular progress bar that support steps and color segments, default gap is 2px.\n```\n\n----------------------------------------\n\nTITLE: Embedding Image Preview in Markdown for Text Link/Icon Edit Example\nDESCRIPTION: This snippet shows how to embed an image preview for a text link/icon edit interface. It includes a description of different states and uses HTML-like tags within the Markdown.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of Text link/Icon Edit\" description=\"Status 1: Text link/icon appears near the editable line.；<br>Status 2: Once the mouse clicks 「edit」,the form elements 「Input box」, 「Ok」 and 「Cancel」 appear, and the cursor is positioned in the 「input box」.\n\" src=\"https://gw.alipayobjects.com/zos/rmsportal/qiAYBQKcQnmavxHzkeaK.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS-in-JS Cache Structure in Ant Design\nDESCRIPTION: Example showing the cache structure used in @ant-design/cssinjs to store component styles and their corresponding hash values.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// e.g. Real world path is much more complex\n{\n  \"bAMbOo|Button\": [\"LItTlE\", \":where(.bAMbOo).ant-btn { color: red }\"],\n  \"bAMbOo|Spin\": [\"liGHt\", \":where(.bAMbOo).ant-spin { color: blue }\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Anchor Component in React\nDESCRIPTION: Demo import for a basic anchor component example, which is displayed in an iframe with a height of 200px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/basic.tsx\" iframe=\"200\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Styling Avatar Group with CSS\nDESCRIPTION: This CSS snippet provides custom styling for the avatar group display. It sets a specific width for the demo container and adds right margin to Avatar components within the group.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/demo/group.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.ant-avatar-group .ant-avatar {\n  margin-right: 8px;\n}\n\n.ant-row-rtl .ant-avatar-group .ant-avatar {\n  margin-right: 0;\n  margin-left: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Popover Panel Example in React\nDESCRIPTION: Imports a debug example for an internal Popover panel component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-import Configuration in Umi for Ant Design v5\nDESCRIPTION: Details that `babel-plugin-import` is deprecated in Ant Design v5 due to CSS-in-JS handling on-demand imports. This diff shows how to update the Umi configuration file (`config/config.ts` or `.umirc.ts`) by removing the `import: true` line within the `antd` section.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// config/config.ts\nexport default {\n  antd: {\n-   import: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Calendar Panel Selection in TypeScript\nDESCRIPTION: Example demonstrating how to handle panel selection events with TypeScript in the Calendar component\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar\n  onSelect={(date, { source }) => {\n    if (source === 'date') {\n      console.log('Panel Select:', source);\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for Ant Design\nDESCRIPTION: Configuration settings for running Jest tests with Ant Design components using ts-jest transformer.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/getting-started.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": { \"^.+\\\\.(ts|tsx|js|jsx)?$\": \"ts-jest\" }\n```\n\n----------------------------------------\n\nTITLE: Documenting Debug Component Usage in Ant Design (Markdown)\nDESCRIPTION: This snippet provides multilingual documentation for a debugging component in Ant Design. It warns users in both Chinese and English that the component is for debug purposes only and should not be used in production environments.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/modal/demo/render-panel.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n调试用组件，请勿直接使用。\n\n## en-US\n\nDebug usage. Do not use in your production.\n```\n\n----------------------------------------\n\nTITLE: Importing List Component Examples in TypeScript\nDESCRIPTION: These code snippets import various examples of the List component, including simple list, basic list, load more functionality, vertical layout, pagination, grid layout, responsive grid, infinite scrolling, and virtual list.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/simple.tsx\">Simple list</code>\n<code src=\"./demo/basic.tsx\">Basic list</code>\n<code src=\"./demo/loadmore.tsx\">Load more</code>\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n<code src=\"./demo/pagination.tsx\">Pagination Settings</code>\n<code src=\"./demo/grid.tsx\">Grid</code>\n<code src=\"./demo/grid-test.tsx\" debug>Test Grid</code>\n<code src=\"./demo/responsive.tsx\">Responsive grid list</code>\n<code src=\"./demo/infinite-load.tsx\">Scrolling loaded</code>\n<code src=\"./demo/virtual-list.tsx\">virtual list</code>\n<code src=\"./demo/component-token.tsx\" debug>custom component token</code>\n```\n\n----------------------------------------\n\nTITLE: Referencing High Precision InputNumber Example (TSX)\nDESCRIPTION: References `./demo/digit.tsx`, demonstrating handling high precision decimals with the Ant Design InputNumber component, likely using `stringMode` or `precision` props in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/digit.tsx\">High precision decimals</code>\n```\n\n----------------------------------------\n\nTITLE: Specifying Time Picker Format in Ant Design (Markdown)\nDESCRIPTION: This snippet demonstrates how to use the 'format' prop to customize the text display in Ant Design's Time Picker component. It includes explanations in both Chinese and English.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/format.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n`format` 属性指定格式。\n\n## en-US\n\nYou can set a custom text by setting the `format` prop.\n```\n\n----------------------------------------\n\nTITLE: Tree Component Variable Mapping\nDESCRIPTION: Mapping of Less variables to Component Tokens for the Tree component, including background colors, title height, padding, and directory node styling.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@tree-bg` | `colorBgContainer` | Global Token |\n| `@tree-title-height` | `titleHeight` | - |\n| `@tree-child-padding` | - | Deprecated |\n| `@tree-directory-selected-color` | `directoryNodeSelectedColor` | - |\n| `@tree-directory-selected-bg` | `directoryNodeSelectedBg` | - |\n| `@tree-node-hover-bg` | `nodeHoverBg` | - |\n| `@tree-node-selected-bg` | `nodeSelectedBg` | - |\n```\n\n----------------------------------------\n\nTITLE: Tree Scrolling Method Implementation in TypeScript\nDESCRIPTION: This code snippet shows the signature of the scrollTo method available on the Tree component. It allows programmatic scrolling to specific items in a virtual scrolling tree.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tree/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nscrollTo({ key: string | number; align?: 'top' | 'bottom' | 'auto'; offset?: number })\n```\n\n----------------------------------------\n\nTITLE: Setting Badge Dot Offset Format\nDESCRIPTION: Shows the array format for specifying custom badge dot positioning using left and top offset values from the default position.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/demo/offset.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[left, top]\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Component Demo Links\nDESCRIPTION: Code source references for various AutoComplete component demonstrations and examples.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/auto-complete/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/options.tsx\">Customized</code>\n<code src=\"./demo/custom.tsx\">Customize Input Component</code>\n```\n\n----------------------------------------\n\nTITLE: Embedding Image Preview in Markdown for Drag and Drop Picture/File Example\nDESCRIPTION: This snippet demonstrates how to embed an image preview for a drag and drop picture/file interface. It uses HTML-like tags within the Markdown.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of Drag and Drop picture/file\" src=\"https://gw.alipayobjects.com/zos/rmsportal/wuAOmxmpXkcZlHzTbIvY.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Hiding Dropdown Arrow in Ant Design (Chinese)\nDESCRIPTION: This snippet explains in Chinese how to use the 'arrow' property to hide the arrow in an Ant Design dropdown component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/arrow.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n通过 `arrow` 属性隐藏箭头。\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Auto Shift Example in React\nDESCRIPTION: Imports an example demonstrating the auto-shift feature of the Popover component in an iframe.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/shift.tsx\" iframe=\"300\">Auto Shift</code>\n```\n\n----------------------------------------\n\nTITLE: Diverse Child Elements\nDESCRIPTION: Debug example demonstrating various child elements in Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/debug.tsx\" debug>多样的 Child</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring an Ant Design Table - React (TSX)\nDESCRIPTION: Shows how to define TypeScript-typed columns for an Ant Design Table component using TableColumnsType. This snippet imports the Table from antd, builds a columns array with proper typing, and then renders the Table component with these columns provided. The main dependency is Ant Design, and the key parameter is the columns definition array, which must conform to TableColumnsType. The output is a rendered Table with the specified columns, and the main constraint is TypeScript type compatibility.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/type-util.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Table, type TableColumnsType } from 'antd';\n\nconst columns: TableColumnsType = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n];\n\nexport default () => <Table columns={columns} />;\n```\n\n----------------------------------------\n\nTITLE: Utility Function for On-Demand Ant Design CSS Extraction with Hashing\nDESCRIPTION: Presents a utility function `doExtraStyle` (likely intended for `scripts/genAntdCss.tsx`) designed for the 'Extract on demand' strategy. It takes a CSS-in-JS cache (`@ant-design/cssinjs`), extracts the CSS content using `extractStyle(cache, true)`, generates an MD5 hash based on the content using Node.js `crypto`, and saves the CSS to a uniquely named file (e.g., `antd.min.<hash>.css`) in a specified directory. It returns the relative path to the generated file, suitable for linking in HTML.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// scripts/genAntdCss.tsx\nimport { createHash } from 'crypto';\nimport fs from 'fs';\nimport path from 'path';\nimport { extractStyle } from '@ant-design/cssinjs';\nimport type Entity from '@ant-design/cssinjs/lib/Cache';\n\nexport interface DoExtraStyleOptions {\n  cache: Entity;\n  dir?: string;\n  baseFileName?: string;\n}\n\nexport const doExtraStyle = (opts: DoExtraStyleOptions) => {\n  const { cache, dir = 'antd-output', baseFileName = 'antd.min' } = opts;\n\n  const baseDir = path.resolve(__dirname, '../../static/css');\n\n  const outputCssPath = path.join(baseDir, dir);\n\n  if (!fs.existsSync(outputCssPath)) {\n    fs.mkdirSync(outputCssPath, { recursive: true });\n  }\n\n  const css = extractStyle(cache, true);\n\n  if (!css) {\n    return '';\n  }\n\n  const md5 = createHash('md5');\n  const hash = md5.update(css).digest('hex');\n  const fileName = `${baseFileName}.${hash.substring(0, 8)}.css`;\n  const fullpath = path.join(outputCssPath, fileName);\n\n  const res = `_next/static/css/${dir}/${fileName}`;\n\n  if (fs.existsSync(fullpath)) {\n    return res;\n  }\n\n  fs.writeFileSync(fullpath, css);\n\n  return res;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Record Flattening Logic - Initial Version\nDESCRIPTION: Original implementation of data flattening function for handling tree-structured data, which had performance issues due to array spreading operations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction flatten<T extends { children?: T[] }>(data: T[] = []) {\n  let tmpList: T[] = [];\n\n  for (let i = 0; i < data.length; i += 1) {\n    const record = data[i];\n    tmpList = [...tmpList, record, ...flatten(record.children)];\n  }\n\n  return tmpList;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Locale in JSX\nDESCRIPTION: Example showing how to set up and configure the Calendar component with localization settings using dayjs\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/calendar/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n// import dayjs from 'dayjs';\n// import 'dayjs/locale/zh-cn';\n// dayjs.locale('zh-cn');\n\n<Calendar cellRender={cellRender} onPanelChange={onPanelChange} onSelect={onSelect} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Formatting Example in React TSX\nDESCRIPTION: Example demonstrating poorly formatted React/TypeScript code with inconsistent spacing and structure\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nrenderBatchButton() {\n\nreturn(\n\n\n\n<Dropdown overlay={this.renderExportMenu(\"2\")}>\n\n\n\n\n\n导出出库单\n\n);\n\n}\n\n\nrenderExportMenu(category) {\n\nlet exportFile=({key})=>{\n\nconsole.log(key)\n\n}\n\nlet items=[];\n\nif(this.props.global.template_list){\n\nitems=this.props.global.template_list.map((item)=>{\n\nif(category===item.category){\n\nreturn <Menu.Item key={item.id}>{item.name}</Menu.Item>;\n\n}\n\n});\n\n}\n```\n\n----------------------------------------\n\nTITLE: Pull Request References in Markdown\nDESCRIPTION: GitHub pull request references with issue numbers and contributors\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n[#40134](https://github.com/ant-design/ant-design/pull/40134) [@ds1371dani](https://github.com/ds1371dani)\n[#39372](https://github.com/ant-design/ant-design/pull/39372) [@foryuki](https://github.com/foryuki)\n```\n\n----------------------------------------\n\nTITLE: Text Truncation Logic in TypeScript/React\nDESCRIPTION: Pseudocode demonstrating the logic for text truncation based on height measurement.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode. Not used in real world\n<div ref={walkingMeasureRef}>{text.slice(0, walkingMeasureIndex)}</div>;\n\nif (walkingMeasureRef.current.clientHeight > cssHeight) {\n  // Not meet the requirement\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Carousel Example\nDESCRIPTION: Reference to a basic implementation example of the Carousel component\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Controls/Icon Debug Example (TSX)\nDESCRIPTION: References a debug-specific example file (`./demo/controls.tsx`) demonstrating customization of the increment/decrement controls (using the `controls` prop) for the Ant Design InputNumber component in React/TypeScript.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/controls.tsx\" debug>Icon</code>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Image Information Structure in TypeScript\nDESCRIPTION: TypeScript interface `ImgInfo` defines the structure for holding basic metadata about an image, including its URL, alt text, width, and height. This information is passed to customization callbacks like `toolbarRender` and `imageRender`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/index.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  url: string;\n  alt: string;\n  width: string | number;\n  height: string | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating React 18 StrictMode Nested Containers - HTML\nDESCRIPTION: This HTML snippet demonstrates the resulting DOM structure when using React 18 StrictMode, where multiple mount containers can be created and only one is utilized, while earlier ones remain empty. This visual example aids understanding of how component mounting and effect cleanup produces additional DOM nodes, directly related to the React concurrency model. No dependencies beyond a React-rendered application structure. Inputs and outputs are static; this snippet is for illustrative purposes only.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/getContainer.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\\n  <div id=\\\"root\\\">...</div>\\n\\n  <!-- Empty -->\\n  <div className=\\\"sample-holder\\\"></div>\\n\\n  <!-- Real in use -->\\n  <div className=\\\"sample-holder\\\">\\n    <div className=\\\"ant-component-wrapper\\\">...</div>\\n  </div>\\n</body>\\n\n```\n\n----------------------------------------\n\nTITLE: CSS Cache Path Definition\nDESCRIPTION: LESS code showing how the cache paths are stored in CSS for client-side extraction.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: less\nCODE:\n```\n// Just example. Not real world code\n.cssinjs-cache-path {\n  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Skeleton Component Examples in Markdown\nDESCRIPTION: This snippet defines sections in Chinese and English to demonstrate various skeleton components in Ant Design. It includes buttons, avatars, input fields, images, and custom nodes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/skeleton/demo/element.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n骨架按钮、头像、输入框、图像和自定义节点。\n\n## en-US\n\nSkeleton Button, Avatar, Input, Image and Node.\n```\n\n----------------------------------------\n\nTITLE: Describing Dynamic Mode Switching in Chinese\nDESCRIPTION: This markdown snippet introduces the concept of dynamic mode switching in Chinese. It briefly states that the example will demonstrate how to switch modes dynamically.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/switch-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n展示动态切换模式。\n```\n\n----------------------------------------\n\nTITLE: Importing Dot Duration Example\nDESCRIPTION: Reference to an example showing progress of dots functionality, available from version 5.24.0\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/dot-duration.tsx\" version=\"5.24.0\">Progress of dots</code>\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: Commands to execute the complete test suite for the project.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm test\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Element Offset Calculation Utility\nDESCRIPTION: Utility function to get element's coordinate position using getBoundingClientRect.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\nfunction offset(el: Element) {\n  const { left, top } = el.getBoundingClientRect();\n  return { left, top };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Background Color for Hue in CSS\nDESCRIPTION: This CSS snippet sets the panel's background color to a specific RGB value, representing a color with maximum saturation and brightness. There are no external dependencies. The key parameter is the rgb() value, and the output is a solid background color. This sets the foundation for subsequent overlays to represent the HSV color model.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/color-picker.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-color: rgb(0, 106, 255);\n```\n\n----------------------------------------\n\nTITLE: Showing Inline Style Duplication in HTML\nDESCRIPTION: Highlights the drawback of the basic inline style method in SSR. When multiple instances of the same component (like Button) are rendered, the corresponding `<style>` block is repeated for each instance, unnecessarily increasing the HTML size.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World 1</button>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World 2</button>\n  <style>\n    :where(.css-bAmBOo).ant-btn {\n      // ...\n    }\n  </style>\n  <button className=\"ant-btn css-bAmBOo\">Hello World 3</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Component Basic Example\nDESCRIPTION: Example of customizing Button loading icon using ReactNode\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nButton.loading={{ icon: ReactNode }}\n```\n\n----------------------------------------\n\nTITLE: Queue Creation Implementation\nDESCRIPTION: Implementation of queue management for handling nested portal creation order.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\nconst [queue, setQueue] = useState<VoidFunction[]>([]);\n\nfunction queueCreate(appendFn: VoidFunction) {\n  setQueue((origin) => {\n    const newQueue = [appendFn, ...origin];\n    return newQueue;\n  });\n}\n\nuseLayoutEffect(() => {\n  if (queue.length) {\n    queue.forEach((appendFn) => appendFn());\n    setQueue([]);\n  }\n}, [queue]);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Pretty-Format HTML Serialization Difference\nDESCRIPTION: This snippet shows an example of how `pretty-format` might serialize an HTML structure compared to its original form, specifically highlighting the potential introduction of extra whitespace around text nodes. This difference is relevant when comparing snapshots generated under potentially different formatting conditions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <span>Hello</span>\n  <p>World</p>\n</div>\n↓\n<div>\n  <span> Hello </span>\n  <p>World</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Referencing InputNumber Filled Variant Debug Example (TSX)\nDESCRIPTION: References a debug-specific example file (`./demo/filled-debug.tsx`) related to the 'filled' variant of the Ant Design InputNumber component in React/TypeScript. Intended for internal debugging.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/filled-debug.tsx\" debug>Filled Debug</code>\n```\n\n----------------------------------------\n\nTITLE: Mixed Measurement Implementation for Text Ellipsis\nDESCRIPTION: Combined approach using CSS for height measurement and JavaScript for text truncation to handle mixed line heights accurately.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div ref={measureRef} style={ellipsisStyle}>\n  {text}\n</div>;\n\nconst cssHeight = measureRef.current.clientHeight;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode. Not used in real world\n<div ref={walkingMeasureRef}>{text.slice(0, walkingMeasureIndex)}</div>;\n\nif (walkingMeasureRef.current.clientHeight > cssHeight) {\n  // Not meet the requirement\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Isolation CSS Implementation\nDESCRIPTION: CSS implementation showing how theme styles are isolated using hash classes and CSS variables\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/css-var-plan.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:where(.css-hash1).ant-btn {\n  background-color: var(--color-primary);\n}\n\n:where(.css-hash2).ant-btn {\n  background-color: var(--color-primary);\n}\n\n.css-hash1 {\n  --color-primary: blue;\n}\n\n.css-hash2 {\n  --color-primary: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Ant Design Grid Demo Rows with CSS\nDESCRIPTION: This CSS snippet targets elements with the class 'ant-row' that are descendants of an element with the ID 'grid-demo-flex'. It applies a light, semi-transparent grey background (rgba(128, 128, 128, 0.08)) to these rows, likely used within an Ant Design demonstration to visually distinguish the grid rows.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/flex.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#grid-demo-flex [class~='ant-row'] {\n  background: rgba(128, 128, 128, 0.08);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Markdown Recommendation Tables in CSS\nDESCRIPTION: This CSS snippet styles markdown tables (`.markdown table`). It targets the first cell (`td:first-child`) to set a specific width and font weight, likely for the category column. It also styles anchor tags (`a`) within table cells, adding right margin and a pipe separator (`::after`) between consecutive links, enhancing readability when multiple recommendations are listed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/recommendation.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n.markdown table td:first-child {\n  width: 20%;\n  font-weight: 500;\n}\n.markdown table td > a:not(:last-child) {\n  margin-inline-end: 18px;\n}\n.markdown table td > a:not(:last-child)::after {\n  position: absolute;\n  margin: 0 6px 0 8px;\n  color: #bbb;\n  content: '|';\n  pointer-events: none;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling Ant Design Grid Rows for Alignment Demo (CSS)\nDESCRIPTION: This CSS rule targets Ant Design grid rows (elements containing the class `ant-row`) that are descendants of an element with the ID `grid-demo-flex-align`. It sets a light, semi-transparent gray background (`rgba(128, 128, 128, 0.08)`) for these rows, likely to enhance visibility in a demo showcasing vertical alignment features.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/flex-align.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#grid-demo-flex-align [class~='ant-row'] {\n  background: rgba(128, 128, 128, 0.08);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with ImagePreview Component (HTML/JSX)\nDESCRIPTION: This snippet uses a potentially custom `<ImagePreview>` component, likely part of the documentation system (like Ant Design's own site), to wrap and display a standard HTML `<img>` tag. The purpose is to show an image illustrating dynamic interaction. The `src` attribute specifies the image URL hosted on alipayobjects.com, and the `alt` attribute provides descriptive text. The `<ImagePreview>` component might add functionality like zoom or lightbox features.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/visual.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ImagePreview>\n  <img alt=\"dynamic interaction\" src=\"https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*QXtKSIMgaOUAAAAAAAAAAABkARQnAQ\" />\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Virtual List Extra Render Implementation\nDESCRIPTION: Implementation of extraRender function for handling row spans in virtual scrolling context, managing visible range calculations.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/virtual-table.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst extraRender = ({ start, end }) => {\n  const startRecord = flattenData[start];\n  columns.forEach((col) => {\n    const { rowSpan } = col.onCell(startRecord, start);\n  });\n\n  const endRecord = flattenData[end];\n  columns.forEach((col) => {\n    const { rowSpan } = col.onCell(endRecord, end);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Ant Design 5.0.5 Release\nDESCRIPTION: Markdown content detailing the changes and fixes in Ant Design version 5.0.5, including improvements to Button, Tabs, Divider, Popover, and other components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_25\n\nLANGUAGE: Markdown\nCODE:\n```\n## 5.0.5\n\n`2022-12-08`\n\n- 🐞 Fix button hover style in Space.Compact. [#39157](https://github.com/ant-design/ant-design/pull/39157) [@foryuki](https://github.com/foryuki)\n- 🐞 Fix Tabs active bar missing sometimes in windows Chrome. [#39352](https://github.com/ant-design/ant-design/pull/39352) [@heiyu4585](https://github.com/heiyu4585)\n- 🐞 Fix Divider `horizontal` align issue in flex layout. [#39339](https://github.com/ant-design/ant-design/pull/39339)\n- 🐞 Fix Popover width in rtl mode. [#39311](https://github.com/ant-design/ant-design/pull/39311)\n- 🐞 Fix Popconfirm padding style issue when `wireframe` is `true`. [#39313](https://github.com/ant-design/ant-design/pull/39313)\n- 💄 Fix Select search input with white space style issue. [#39299](https://github.com/ant-design/ant-design/pull/39299)\n- 💄 Fix Tree missing selection style. [#39292](https://github.com/ant-design/ant-design/pull/39292)\n- 🐞 Fix FloatButton content not align when customize size. [#39282](https://github.com/ant-design/ant-design/pull/39282) [@li-jia-nan](https://github.com/li-jia-nan)\n- 🐞 Fix DatePicker.RangePicker cell hover style. [#39266](https://github.com/ant-design/ant-design/pull/39266)\n- 💄 Optimize Button style under Space.Compact. [#39241](https://github.com/ant-design/ant-design/pull/39241) [@foryuki](https://github.com/foryuki)\n- 🌐 Fix `vi_VN` i18n mistake. [#39279](https://github.com/ant-design/ant-design/pull/39279) [@nghiepdev](https://github.com/nghiepdev)\n- 🌐 Fix `he_IL` i18n mistake. [#39280](https://github.com/ant-design/ant-design/pull/39280) [@Ran-Sagy](https://github.com/Ran-Sagy)\n- TypeScript\n  - 🤖 Optimize Anchor `onClick` event definition. [#39305](https://github.com/ant-design/ant-design/pull/39305) [@li-jia-nan](https://github.com/li-jia-nan)\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Badge Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/badge.tsx') demonstrating how to attach a Badge (using the 'badge' prop, available since v5.4.0) to the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/badge.tsx\" iframe=\"360\">badge</code>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Moment.js Webpack Plugin using npm\nDESCRIPTION: This command installs the `@ant-design/moment-webpack-plugin` as a development dependency using npm. This plugin allows projects migrating to Ant Design v5 to continue using Moment.js instead of the default Day.js, by configuring it within their Webpack setup.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @ant-design/moment-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Displaying Multilingual Debug Component Warning in Markdown\nDESCRIPTION: This snippet shows a warning message in both Chinese (zh-CN) and English (en-US) about a debug component that should only be used for debugging purposes and not in production environments.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popconfirm/demo/render-panel.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n调试用组件，请勿直接使用。\n\n## en-US\n\nDebug usage. Do not use in your production.\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project using PNPM\nDESCRIPTION: Uses `pnpm create` to execute the `next-app` initializer, setting up a new Next.js project named 'antd-demo'. This command is the equivalent for users preferring the PNPM package manager.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create next-app antd-demo\n```\n\n----------------------------------------\n\nTITLE: CSS Height Measurement in TypeScript/React\nDESCRIPTION: Code snippet showing how to measure text height using CSS for ellipsis calculation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/line-ellipsis.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div ref={measureRef} style={ellipsisStyle}>\n  {text}\n</div>;\n\nconst cssHeight = measureRef.current.clientHeight;\n```\n\n----------------------------------------\n\nTITLE: Styling Multiple Mini Pagination Components with CSS\nDESCRIPTION: CSS styles to add margin between multiple pagination instances in a demo. It targets all pagination components except the last one within the #pagination-demo-mini container and adds a bottom margin of 24px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/pagination/demo/mini.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#pagination-demo-mini .ant-pagination:not(:last-child) {\n  margin-bottom: 24px;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting DOM Element Offset for Positioning - rc-dialog/util.ts (TypeScript pseudocode)\nDESCRIPTION: This pseudocode provides the utility function from rc-dialog for obtaining the offset (left, top) of a DOM element using getBoundingClientRect. It's used to position elements relative to the viewport. This function requires a DOM Element as input and returns an object containing left and top positions. Dependencies: browser DOM APIs. Limitation: returns accurate data only if the element is attached to the document.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\\nfunction offset(el: Element) {\\n  const { left, top } = el.getBoundingClientRect();\\n  return { left, top };\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Ant Design v4 and v5 Components Simultaneously via Alias in React (TSX)\nDESCRIPTION: Example React component demonstrating how to import components from both the standard `antd` (v4) and the aliased `antd-v5` package simultaneously within the same file, using different import names (e.g., `Button4`, `Button5`).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button as Button4 } from 'antd'; // v4\nimport { Button as Button5 } from 'antd-v5'; // v5\n\nexport default () => (\n  <>\n    <Button4 />\n    <Button5 />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Segmented Component API Declaration\nDESCRIPTION: TypeScript interface definitions for the Segmented component properties including block, defaultValue, disabled, onChange, options, size, vertical, value, shape, and name properties.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SegmentedProps {\n  block?: boolean;  // Option to fit width to its parent's width\n  defaultValue?: string | number;  // Default selected value\n  disabled?: boolean;  // Disable all segments\n  onChange?: (value: string | number) => void;  // Callback function for state changes\n  options?: string[] | number[] | SegmentedItemType[];  // Set children optional\n  size?: 'large' | 'middle' | 'small';  // The size of the Segmented\n  vertical?: boolean;  // Orientation\n  value?: string | number;  // Currently selected value\n  shape?: 'default' | 'round';  // shape of Segmented\n  name?: string;  // The name property of all input[type=\"radio\"] children\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Elements in Ant Design Grid Demo Playground with CSS\nDESCRIPTION: This CSS snippet targets elements within an HTML container identified by `#grid-demo-playground`. It styles Ant Design columns (`.ant-col`) by removing default backgrounds/borders and setting specific styles (height, background, etc.) for their direct child `div` elements. It also styles `pre` elements, commonly used for displaying code examples, within this playground context, including specific styles for code blocks marked with `.demo-code`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/demo/playground.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#grid-demo-playground [class~='ant-col'] {\n  background: transparent;\n  border: 0;\n}\n#grid-demo-playground [class~='ant-col'] > div {\n  height: 120px;\n  font-size: 14px;\n  line-height: 120px;\n  background: #0092ff;\n  border-radius: 4px;\n}\n#grid-demo-playground pre {\n  padding: 8px 16px;\n  font-size: 14px;\n  background: #f9f9f9;\n  border-radius: 6px;\n}\n#grid-demo-playground pre.demo-code {\n  direction: ltr;\n}\n#grid-demo-playground .ant-col {\n  padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using Yarn\nDESCRIPTION: Adds the Ant Design library (`antd`) as a project dependency using the Yarn package manager.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add antd\n```\n\n----------------------------------------\n\nTITLE: Styling Alert Banner with Custom Colors in Ant Design React\nDESCRIPTION: This snippet shows how to apply custom styling to the Alert banner, including setting a specific background color and text color.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/alert/demo/banner.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert message=\"Warning text\" banner style={{ backgroundColor: '#f8a1a1', color: '#fff' }} />\n```\n\n----------------------------------------\n\nTITLE: Specifying Dropdown Placement in Ant Design (Markdown)\nDESCRIPTION: This snippet provides documentation in Chinese and English on how to use the 'placement' prop to manually set the position of dropdown popups in Ant Design. It highlights the flexibility of controlling popup positioning.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/placement-debug.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n可以通过 `placement` 手动指定弹出的位置。\n\n## en-US\n\nYou can manually specify the position of the popup via `placement`.\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project using Yarn\nDESCRIPTION: Uses `yarn create` to run the `next-app` initializer, creating a new Next.js project named 'antd-demo'. This command achieves the same result as the npx equivalent but uses the Yarn package manager.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create next-app antd-demo\n```\n\n----------------------------------------\n\nTITLE: Utilizing Component Tokens with Ant Design Divider in React/TSX\nDESCRIPTION: References a demo file (`./demo/component-token.tsx`) showing advanced customization of the Ant Design `Divider` using Design Tokens in React/TypeScript. Marked as 'debug'.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/divider/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Queuing DOM Creation in Nested Portals - React Portal Queue Context (TypeScript pseudocode)\nDESCRIPTION: This code models queueing the append of DOM nodes for nested portals so that children are appended after parents. It uses React useState to maintain a queue, and useLayoutEffect to process and clear it. The queueCreate function adds a callback to the front of the queue, ensuring children are handled first. Inputs: void callback functions; Outputs: DOM nodes inserted in correct order. Works in nested modal/portal scenarios.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\\nconst [queue, setQueue] = useState<VoidFunction[]>([]);\\n\\nfunction queueCreate(appendFn: VoidFunction) {\\n  setQueue((origin) => {\\n    const newQueue = [appendFn, ...origin];\\n    return newQueue;\\n  });\\n}\\n\\nuseLayoutEffect(() => {\\n  if (queue.length) {\\n    queue.forEach((appendFn) => appendFn());\\n    setQueue([]);\\n  }\\n}, [queue]);\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Next.js Registry using NPM\nDESCRIPTION: Installs the `@ant-design/nextjs-registry` package using npm. This utility is required for extracting and injecting Ant Design's initial styles when using the Next.js App Router.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @ant-design/nextjs-registry --save\n```\n\n----------------------------------------\n\nTITLE: Describing Standard Progress Bar in Chinese and English\nDESCRIPTION: This snippet provides brief descriptions of a standard progress bar in both Chinese (zh-CN) and English (en-US). It's likely used as documentation or comments for associated code examples.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/line.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n标准的进度条。\n\n## en-US\n\nA standard progress bar.\n```\n\n----------------------------------------\n\nTITLE: Describing Circular Progress Bar in Chinese\nDESCRIPTION: Markdown description in Chinese explaining a circular progress bar with step support and color segment display. It mentions the default gap of 2px between segments.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/progress/demo/circle-steps.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n步骤进度圈，支持颜色分段展示，默认间隔为 2px。\n```\n\n----------------------------------------\n\nTITLE: Building Bundles Sequentially with Vite for Race Condition Prevention (TypeScript)\nDESCRIPTION: This for-loop alternately executes each Vite build configuration one after another, instead of concurrently, to avoid output file conflicts. Requires Vite, Node.js, and precomputed configuration objects. The configs array holds all build variants. Each build is awaited before starting the next. Inputs are the configs array of build configurations; outputs are discrete, non-overlapping build artifacts. This approach prevents write collisions but can increase build time.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const config of configs) {\n  await vite.build(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Content Position Calculation\nDESCRIPTION: Pseudocode showing how rc-dialog calculates popup position using mouse coordinates and element offset.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\nconst elementOffset = offset(dialogElement);\nconst transformOrigin = `${mousePosition.x - elementOffset.left}px ${\n  mousePosition.y - elementOffset.top\n}px`;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Repository for Language Contribution (Bash)\nDESCRIPTION: These Bash commands outline the initial Git steps required to contribute a new language pack to the Ant Design project. It involves cloning the user's fork, navigating into the directory, adding the official Ant Design repository as an upstream remote, and creating a new feature branch based on the upstream `feature` branch to isolate the contribution work.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/i18n.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your organization>/ant-design.git\ncd ant-design/\ngit remote add upstream git@github.com:ant-design/ant-design.git\ngit checkout -b <your new branch name> upstream/feature\n```\n\n----------------------------------------\n\nTITLE: Displaying SeedToken Table in Markdown\nDESCRIPTION: This snippet uses a custom component to display the SeedToken table in the documentation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<TokenTable type=\"seed\"></TokenTable>\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Vite React Project\nDESCRIPTION: Commands to navigate into the project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd antd-demo\n$ npm install\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Popover Content in CSS\nDESCRIPTION: This CSS snippet removes the default margin from paragraph elements within the Ant Design popover content. It ensures a more compact and consistent appearance of text inside the popover.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/demo/basic.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.ant-popover-content p {\n  margin: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding the Dark Mode Color Palette Generator Tool in Ant Design - JavaScript (React/JSX)\nDESCRIPTION: This snippet inserts the <ColorPaletteToolDark> React component, supplying an interactive tool for generating and previewing dark mode color palettes. It requires the Ant Design React library and any related color generation utility code. Users can select a primary color and a page background, and the tool generates a dark mode-adapted color set as output. The tool is designed to work within documentation environments supporting JSX components and does not function as standalone code outside such environments.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/dark.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript (React/JSX)\nCODE:\n```\n<ColorPaletteToolDark></ColorPaletteToolDark>\n```\n\n----------------------------------------\n\nTITLE: Navigating and Starting Next.js Dev Server\nDESCRIPTION: Changes the current directory to the newly created 'antd-demo' project folder and then starts the Next.js development server using the `npm run dev` script. This makes the application accessible, typically at http://localhost:3000.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd antd-demo\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using bun\nDESCRIPTION: This command adds the Ant Design library as a project dependency using the Bun package manager.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bun add antd\n```\n\n----------------------------------------\n\nTITLE: Bypassing Queue for Open Modals - Portal DOM Immediate Append (TypeScript pseudocode)\nDESCRIPTION: This snippet modifies the portal behavior to immediately append the container DOM node if the modal is already open, bypassing the queue for active dialogs. It uses useRef to prevent repeated appends, and alters queueCreate's presence based on the appended state. Inputs: is-open flag, callback function. Outputs: directly injected portal DOM node when appropriate. Eliminates positioning bug due to async queue timing. Limitations: for open Modals only.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/modal-hook-order.zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// pseudocode\\nconst appendedRef = useRef(false);\\n\\nconst queueCreate = !appendedRef.current\\n  ? (appendFn: VoidFunction) => {\\n      // same code\\n    }\\n  : undefined;\\n\\nfunction append() {\\n  // This is not real world code, just for explain\\n  document.body.appendChild(document.createElement('div'));\\n  appendedRef.current = true;\\n}\\n\\n// ...\\n\\nreturn <PortalContext value={queueCreate}>{children}</PortalContext>;\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using Bun\nDESCRIPTION: Adds the Ant Design library (`antd`) as a project dependency using the Bun package manager.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add antd\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTML Element Serialization Logic in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates the implementation of the `print` function for a custom Jest snapshot serializer. It first uses `pretty-format` with DOM plugins to get the standard serialization. Then, it processes the resulting string: splitting it into lines, filtering out lines that are empty after trimming, removing trailing whitespace from remaining lines, and joining them back with newlines. This normalization aims to create consistent snapshots despite underlying differences (like empty nodes from React 17 vs 18).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst htmlContent = format(element, {\n  plugins: [plugins.DOMCollection, plugins.DOMElement],\n});\n\nexpect.addSnapshotSerializer({\n  test: '//...',\n  print: (element) => {\n    const filtered = htmlContent\n      .split(/[\\n\\r]+/)\n      .filter((line) => line.trim())\n      .map((line) => line.replace(/\\s+$/, ''))\n      .join('\\n');\n    return filtered;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Autoplay Example\nDESCRIPTION: Reference to an example demonstrating automatic scrolling functionality\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/autoplay.tsx\">Scroll automatically</code>\n```\n\n----------------------------------------\n\nTITLE: Documenting Skeleton Usage in List Components (Markdown)\nDESCRIPTION: This Markdown snippet provides multilingual documentation for using skeleton loading placeholders within list components. It includes both Chinese (zh-CN) and English (en-US) descriptions of the functionality.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/skeleton/demo/list.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n在列表组件中使用加载占位符。\n\n## en-US\n\nUse skeleton in list component.\n```\n\n----------------------------------------\n\nTITLE: Using Form.useWatch with Unregistered Fields\nDESCRIPTION: Example showing how to use Form.useWatch with the preserve option to watch unregistered fields that are not part of the form's rendered fields.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/form/index.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const [form] = Form.useForm();\n\n  const age = Form.useWatch('age', { form, preserve: true });\n  console.log(age);\n\n  return (\n    <div>\n      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>\n      <Form form={form}>\n        <Form.Item name=\"name\">\n          <Input />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Strict Null Checks\nDESCRIPTION: JSON configuration snippet showing the TypeScript compiler option for strict null checks, which can affect how null values are handled in forms.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/faq.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"strictNullChecks\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Switching and Pulling Fix Branch\nDESCRIPTION: Commands to pull latest changes and switch to the fix branch for development.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\ngit checkout fix-branch\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Commands to run the Ant Design website locally for development purposes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Describing Popup Positioning in Chinese\nDESCRIPTION: Explains in Chinese that if there's not enough space after flipping the popup, it will be shifted to ensure full visibility.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/demo/debug-flip-shift.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n翻转后如果不够则偏移以供完全的展示。\n```\n\n----------------------------------------\n\nTITLE: Nested App Component Usage\nDESCRIPTION: Demonstrates nested usage of App components, though not recommended unless necessary.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/app/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<App>\n  <Space>\n    ...\n    <App>...</App>\n  </Space>\n</App>\n```\n\n----------------------------------------\n\nTITLE: Replacing Moment.js Locale Import with Day.js Locale in JavaScript\nDESCRIPTION: Demonstrates how to switch from importing and setting Moment.js locales to using Day.js locales, reflecting Ant Design v5's move from Moment.js to Day.js as the default date library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-   import moment from 'moment';\n+   import dayjs from 'dayjs';\n-   import 'moment/locale/zh-cn';\n+   import 'dayjs/locale/zh-cn';\n\n-   moment.locale('zh-cn');\n+   dayjs.locale('zh-cn');\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using pnpm\nDESCRIPTION: This command installs the Ant Design library as a project dependency using the pnpm package manager and saves it to the `dependencies` section in the `package.json` file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm install antd --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Metadata using Frontmatter (YAML)\nDESCRIPTION: This snippet uses YAML frontmatter to define metadata for the documentation page. It sets the group to \"Design Patterns\", type to \"Principles\", order to 4, and the main title to \"Repetition\". This metadata is likely used by a static site generator or documentation system (like Dumi used in Ant Design) to organize and display the content correctly.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngroup: Design Patterns\ntype: Principles\norder: 4\ntitle: Repetition\n---\n```\n\n----------------------------------------\n\nTITLE: Running React 16 Tests\nDESCRIPTION: Commands to install React 16 dependencies and run component-specific tests.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install-react-16\nnpm run test component/XXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Snapshot Serializers for Enzyme Snapshots - JavaScript\nDESCRIPTION: This code snippet provides the configuration for using enzyme-to-json as a snapshot serializer in Jest, enabling snapshot testing of Enzyme wrapper objects. It must be placed in jest.config.js, and requires enzyme-to-json to be installed. There are no inputs other than the configuration object, and the effect is that Jest will serialize Enzyme wrappers as plain JSON snapshots.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\\nmodule.exports = {\\n  // ...\\n  snapshotSerializers: ['enzyme-to-json/serializer'],\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Offset for Anchor in React\nDESCRIPTION: Demo import for an example showing how to set custom scroll offset for an anchor component, displayed in an iframe with a height of 200px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/targetOffset.tsx\" iframe=\"200\">Set Anchor scroll offset</code>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multilingual Component Description in Markdown\nDESCRIPTION: This snippet provides a simple description of the component's usage in both Chinese (zh-CN) and English (en-US). It uses Markdown headers to separate the language sections.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/segmented/demo/basic.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe most basic usage.\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design v5 via npm (Bash)\nDESCRIPTION: Command to install the latest version of Ant Design v5 using npm and save it as a project dependency.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save antd@5.x\n```\n\n----------------------------------------\n\nTITLE: Installing Refine with Ant Design Preset using Package Managers\nDESCRIPTION: Commands for creating a new Refine project with Ant Design preset using npm, yarn, or pnpm. This initializes a project with predefined Ant Design configurations and example pages.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-refine.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create refine-app@latest -- --preset refine-antd\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create refine-app@latest -- --preset refine-antd\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create refine-app@latest -- --preset refine-antd\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Vite React Project\nDESCRIPTION: Commands to create a new Vite React project named 'antd-demo' using npm, yarn, pnpm, or bun package managers.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-vite.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create vite antd-demo\n$ yarn create vite antd-demo\n$ pnpm create vite antd-demo\n$ bun create vite antd-demo\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Image (Markdown)\nDESCRIPTION: This table outlines the mapping from Less variables to Component Tokens for the Ant Design Image component, including preview operation styles and background/color settings derived from global tokens. It also notes deprecated variables.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@image-size-base` | - | Deprecated for not used |\n| `@image-font-size-base` | - | Deprecated for not used |\n| `@image-bg` | `colorFillTertiary` | GlobalToken |\n| `@image-color` | `colorTextLightSolid` | GlobalToken |\n| `@image-preview-operation-size` | `previewOperationSize` | - |\n| `@image-preview-operation-color` | `previewOperationColor` | - |\n| `@image-preview-operation-disabled-color` | `previewOperationColorDisabled` | - |\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Reinstalling Dependencies (Bash)\nDESCRIPTION: Provides commands to thoroughly clean the project workspace by removing untracked files and directories (`git clean -fdx`) and then reinstalling all dependencies (`npm i`). This ensures the latest allowed patch versions (as defined by `~` in `package.json`) are fetched, bypassing potentially outdated lock files which are ignored in the project.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/contributor-development-maintenance-guide.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clean -fdx\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Styling Graduated Slider Demo in CSS\nDESCRIPTION: CSS styles for a demo of a graduated slider. It sets margins for headings and bottom margin for sliders with marks.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/mark.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#slider-demo-mark h4 {\n  margin: 0 0 16px;\n}\n#slider-demo-mark .ant-slider-with-marks {\n  margin-bottom: 44px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy JSX Anchor in React\nDESCRIPTION: Debug demo import for a deprecated JSX implementation of the anchor component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.en-US.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/legacy-anchor.tsx\" debug>Deprecated JSX demo</code>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using PNPM\nDESCRIPTION: Installs the Ant Design library (`antd`) as a project dependency using the PNPM package manager and saves it to the `package.json` file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install antd --save\n```\n\n----------------------------------------\n\nTITLE: Grid Sort/Order Example using Ant Design in React/TypeScript\nDESCRIPTION: This snippet represents a link to an external file demonstrating using the 'order' prop on Col components to control the visual order of columns within an Ant Design grid, independent of their source order. The actual code implementing this example resides in the './demo/sort.tsx' file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/grid/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/sort.tsx\">Grid sort</code>\n```\n\n----------------------------------------\n\nTITLE: Using ImagePreview Component for Textual Description (HTML/JSX)\nDESCRIPTION: This snippet demonstrates using the custom `<ImagePreview>` component to wrap textual content rather than an image. The text describes various types of elements (lines, wireframes, colors, etc.) that can be repetitive in UI design. This usage might be intended for layout consistency or specific styling provided by the component within the Ant Design documentation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ImagePreview>\nThe repetitive element may be a thick rule(line), a wireframe, color, design elements, particular format, spatial relationships, etc.\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Cloning Ant Design Repository\nDESCRIPTION: Command to clone the forked Ant Design repository to local machine. Requires replacing [yourGithubAccount] with actual GitHub username.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-collaborator.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/[yourGithubAccount]/ant-design.git\n```\n\n----------------------------------------\n\nTITLE: Testing Pretty-Format Behavior with Empty DOM Elements in TypeScript\nDESCRIPTION: This TypeScript code demonstrates a simple test case using Jest. It creates a div, appends an empty string (which creates an empty text node) and an anchor element, then uses `toMatchSnapshot()` to see how `pretty-format` serializes it. It also logs `innerHTML` for comparison, helping to isolate the impact of empty elements on snapshot serialization.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/testing-migrate.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst holder = document.createElement('div');\nholder.append('');\nholder.append(document.createElement('a'));\nexpect(holder).toMatchSnapshot();\nconsole.log(holder.innerHTML);\n```\n\n----------------------------------------\n\nTITLE: Describing Panel Configuration in Ant Design (Markdown)\nDESCRIPTION: This snippet provides descriptions in Chinese and English for a specific panel configuration. It explains that the second panel has a width of 0 and the third panel cannot be resized.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/splitter/demo/debug.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n面板 2 宽度为 0，面板 3 禁止调整大小。\n\n## en-US\n\nPanel 2 width is 0, panel 3 is not resizable.\n```\n\n----------------------------------------\n\nTITLE: Bad Practice Example in Markdown\nDESCRIPTION: A markdown block containing an example of counterproductive feedback about a project's perceived disadvantages.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nAlthough this project is a product of a large company, it has disadvantages compared with competing products in the following aspects, and I personally do not recommend using it.\n```\n\n----------------------------------------\n\nTITLE: Typography Component Variable Mapping\nDESCRIPTION: Mapping of Less variables to Component Tokens for the Typography component, covering font weight and margin settings for titles.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@typography-title-font-weight` | `fontWeightStrong` | Global Token |\n| `@typography-title-margin-top` | `titleMarginTop` | - |\n| `@typography-title-margin-bottom` | `titleMarginBottom` | - |\n```\n\n----------------------------------------\n\nTITLE: Deprecated Select Component Implementation in React\nDESCRIPTION: Shows the deprecated usage of the Select component with child Option elements. This approach is not recommended for versions 5.11.0 and above.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/select/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <Select onChange={onChange}>\n    <Select.Option value=\"sample\">Sample</Select.Option>\n  </Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Position Example\nDESCRIPTION: Reference to an example showing different position configurations for the Carousel\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/position.tsx\">Position</code>\n```\n\n----------------------------------------\n\nTITLE: Displaying AliasToken Table in Markdown\nDESCRIPTION: This snippet uses a custom component to display the AliasToken table in the documentation, noting that it inherits all SeedToken and MapToken properties.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<TokenTable type=\"alias\"></TokenTable>\n```\n\n----------------------------------------\n\nTITLE: Flex Gap Styling\nDESCRIPTION: Debug example showing Flex gap styles in Space component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/gap-in-line.tsx\" debug>Flex gap 样式</code>\n```\n\n----------------------------------------\n\nTITLE: Cloning and setting up Ant Design for development\nDESCRIPTION: These bash commands show how to clone the Ant Design repository, install dependencies, and start the development server.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:ant-design/ant-design.git\n$ cd ant-design\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Integrating Ant Design CSS Generation into Next.js Build Process\nDESCRIPTION: Illustrates how to modify the `scripts` section of a `package.json` file (specifically for a Next.js project) to automatically run the CSS generation script (`scripts/genAntdCss.tsx`) using `ts-node`. The script is executed before starting the development server (`predev`) and before building the production application (`prebuild`), ensuring the CSS file is up-to-date.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"predev\": \"ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx\",\n    \"prebuild\": \"cross-env NODE_ENV=production ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Direct Ant Design Less Imports (Less)\nDESCRIPTION: Shows the removal of direct `@import` statements for Ant Design's internal less files (like theme files) as they are no longer needed or available in v5 due to the switch to CSS-in-JS.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n// Your less file\n--  @import (reference) '~antd/es/style/themes/index';\nor\n--  @import '~antd/es/style/some-other-less-file-ref';\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Scheduled Workflow for Ant Design\nDESCRIPTION: GitHub Actions workflow configuration that runs every 30 minutes to check build stability. Uses workflow_dispatch for manual triggers and scheduled cron jobs.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/mock-project-build.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\n```\n\n----------------------------------------\n\nTITLE: Displaying Ant Design Deprecation Warning\nDESCRIPTION: Example of the standard warning message format displayed in the console when an Ant Design prop is deprecated, indicating the old prop and suggesting the new one. This warning signals historical API debt being addressed.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWarning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.\n```\n\n----------------------------------------\n\nTITLE: Basic Anchor Structure in Markdown\nDESCRIPTION: Markdown structure showing component category, title, subtitle, description, and other metadata for the Anchor component documentation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Components\ntitle: Anchor\nsubtitle: 锚点\ndescription: 用于跳转到页面指定位置。\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ufP1TLS5VvIAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*_9_eTrgvHNQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\ngroup:\n  title: 导航\n  order: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ant Design Whole Style Export Script\nDESCRIPTION: Shows the command to install development dependencies (`ts-node`, `tslib`, `cross-env`) required for running the TypeScript script that generates the full Ant Design CSS file using the 'Whole Export' method. These packages enable running TypeScript files directly in Node.js and managing environment variables.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/server-side-rendering.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ts-node tslib cross-env --save-dev\n```\n\n----------------------------------------\n\nTITLE: Rendering and Debugging Internal Tour Panel in Ant Design using TypeScript/React\nDESCRIPTION: This advanced code snippet ('./demo/render-panel.tsx') is referenced for internal or debug purposes, as indicated by the label '_InternalPanelDoNotUseOrYouWillBeFired'. It displays the internal panel rendering logic of Ant Design Tour. It depends on React and Ant Design. The code may expose panel internals for testing or diagnostic purposes not recommended for production use. Output is a specialized, potentially unstable panel view.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tour/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\\\"./demo/render-panel.tsx\\\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n```\n\n----------------------------------------\n\nTITLE: Debugging Input Prefix/Suffix\nDESCRIPTION: Debug example for Input component with prefix and suffix in compact layout.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.zh-CN.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/compact-debug.tsx\" debug>调试 Input 前置/后置标签</code>\n```\n\n----------------------------------------\n\nTITLE: Documenting Basic Layout Structure in Markdown\nDESCRIPTION: This snippet contains Markdown documentation for a basic 'header-content-footer' layout in Ant Design. It describes the layout structure, navigation placement, content organization, and discusses the advantages and limitations of this layout pattern.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/top.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n最基本的『上-中-下』布局。\n\n一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。\n\n## en-US\n\nThe most basic \"header-content-footer\" layout.\n\nGenerally, the mainnav is placed at the top of the page, and includes the logo, the first level navigation, and the secondary menu (users, settings, notifications) from left to right in it. We always put contents in a fixed size navigation (eg: `1200px`), the layout of the whole page is stable, it's not affected by the viewing area.\n\nTop-bottom structure is conformed with the top-bottom viewing habit, it's a classical navigation pattern of websites. This pattern demonstrates efficiency in the main workarea, while using some vertical space. And because the horizontal space of the navigation is limited, this pattern is not suitable for cases when the first level navigation contains many elements or links.\n```\n\n----------------------------------------\n\nTITLE: Component Import Path\nDESCRIPTION: Project path reference for ant-design library\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n/ant-design/ant-design\n```\n\n----------------------------------------\n\nTITLE: Building a Umi Application for Production (Bash)\nDESCRIPTION: This bash snippet shows how to build a UmiJS application for production deployment using npm scripts. The command triggers Umi's build process, which bundles all assets and outputs them to the 'dist/' directory. Prerequisites include completion of application development, having the Umi CLI installed, and runnable npm scripts. The script outputs compilation status and lists resultant file sizes. The command must be executed in the project root directory.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\ninfo  - Umi v4.0.46\n✔ Webpack\n  Compiled successfully in 5.31s\ninfo  - File sizes after gzip:\n  122.45 kB  dist/umi.js\n  575 B      dist/src__pages__products.async.js\n  312 B      dist/src__pages__index.async.js\n  291 B      dist/layouts__index.async.js\n  100 B      dist/layouts__index.chunk.css\n  55 B       dist/src__pages__products.chunk.css\nevent - Build index.html\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output Example\nDESCRIPTION: Shows the CSS output generated from the cache structure after processing.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/hydrate-cssinjs.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:where(.bAMbOo).ant-btn {\n  color: red;\n}\n:where(.bAMbOo).ant-spin {\n  color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Component Import Examples\nDESCRIPTION: Collection of demo imports showing different Avatar component usage patterns\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/avatar/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/type.tsx\">Type</code>\n<code src=\"./demo/dynamic.tsx\">Autoset Font Size</code>\n<code src=\"./demo/badge.tsx\">With Badge</code>\n<code src=\"./demo/group.tsx\">Avatar.Group</code>\n<code src=\"./demo/toggle-debug.tsx\" debug>Calculate text style when hiding</code>\n<code src=\"./demo/responsive.tsx\">Responsive Size</code>\n<code src=\"./demo/fallback.tsx\" debug>Fallback</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Context Re-render Issue Example\nDESCRIPTION: Demonstrates a common pitfall where unnecessary re-renders occur due to new context object creation on each render.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/render-times.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyContext = React.createContext<{ prop1: string; prop2: string }>();\n\nconst Child = React.memo(() => {\n  const { prop1 } = React.useContext(MyContext);\n  return <>{prop1}</>;\n});\n\nconst Root = ({ prop1, prop2 }) => {\n  const [count, setCount] = React.useState(0);\n\n  // Some logic to trigger rerender\n  React.useEffect(() => {\n    setCount(1);\n  }, []);\n\n  return (\n    <MyContext.Provider value={{ prop1, prop2 }}>\n      <Child />\n    </MyContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Internal InputNumber Panel Debug Example (TSX)\nDESCRIPTION: References an internal, debug-only example file (`./demo/render-panel.tsx`) related to the internal rendering panel of the Ant Design InputNumber component in React/TypeScript. Not intended for public use.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/input-number/index.en-US.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n```\n\n----------------------------------------\n\nTITLE: Documenting Spin Component Usage in Chinese\nDESCRIPTION: This snippet explains in Chinese how to embed content directly into the Spin component to transform an existing container into a loading state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/spin/demo/nested.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n可以直接把内容内嵌到 `Spin` 中，将现有容器变为加载状态。\n```\n\n----------------------------------------\n\nTITLE: Documenting Tree Component Node Manipulation in Markdown\nDESCRIPTION: This snippet provides multilingual documentation for a tree component example. It explains how to add nodes by clicking and remove nodes through dragging or key presses, in both Chinese and English.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/editable.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n点击添加节点，拖出或者按键删除节点。\n\n## en-US\n\nClick to add a node, drag out or press the key to delete the node.\n```\n\n----------------------------------------\n\nTITLE: Semantic DOM Example for Badge Component\nDESCRIPTION: Simplified code demonstration for semantic DOM usage with Badge component, showing how to apply custom class names and styles to different parts of the Badge.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/badge/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<code src=\"./demo/_semantic.tsx\" simplify=\"true\"></code>\n```\n\n----------------------------------------\n\nTITLE: Debugging Input Addon in Compact Mode\nDESCRIPTION: This example is for debugging purposes, focusing on input addons in compact mode.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/space/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/compact-debug.tsx\" debug>Input addon debug</code>\n```\n\n----------------------------------------\n\nTITLE: Describing Layout with Top Navigation and Sidebar in Markdown\nDESCRIPTION: Provides descriptions in Chinese and English for a layout component that includes both top navigation and sidebar. This layout style is commonly used in application websites and is distinguished by not having margins on both sides.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/layout/demo/top-side-2.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。\n\n## en-US\n\nBoth the top navigation and the sidebar, commonly used in application site.\n```\n\n----------------------------------------\n\nTITLE: Contributor Reference Format\nDESCRIPTION: Format used to credit contributors in changelog entries\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n[@Wxh16144](https://github.com/Wxh16144)\n```\n\n----------------------------------------\n\nTITLE: Running Ant Design v5 Codemod using npx/pnpm (Shell)\nDESCRIPTION: Provides commands using `npx` or `pnpm` to execute the `@ant-design/codemod-v5` tool, which automatically refactors code (in the specified `src` directory) to align with Ant Design v5 changes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# 使用 npx 直接运行\nnpx -p @ant-design/codemod-v5 antd5-codemod src\n\n# 或者使用 pnpm 直接运行\npnpm --package=@ant-design/codemod-v5 dlx antd5-codemod src\n```\n\n----------------------------------------\n\nTITLE: Logging Gulp Build Stages and Error Reporting (Log/Shell)\nDESCRIPTION: This multiline log output captures the sequence of build steps and error reporting from the gulp-based CI process in antd-mobile. Dependencies include gulp and various tasks like buildES, buildCJS, buildStyle, among others. The key parameters are task names and their timing, with a specific focus on the 'build2xCSS' stage where a CssSyntaxError occurs. Input is the execution of the gulpfile, while output is a log with success/failure indicators and error redirection. Limitations include its dependency on the specific project structure and the fact that it is illustrative rather than executable code.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n[09:44:16] Using gulpfile ~/work/ant-design-mobile/ant-design-mobile/gulpfile.js\n[09:44:16] Starting 'default'...\n[09:44:16] Starting 'clean'...\n[09:44:17] Finished 'clean' after 286 ms\n[09:44:17] Starting 'buildES'...\n[09:44:26] Finished 'buildES' after 8.77 s\n[09:44:26] Starting 'buildCJS'...\n[09:44:27] Finished 'buildCJS' after 1.72 s\n[09:44:27] Starting 'buildDeclaration'...\n[09:44:27] Starting 'buildStyle'...\n[09:44:28] Finished 'buildStyle' after 682 ms\n[09:44:34] Finished 'buildDeclaration' after 6.5 s\n[09:44:34] Starting 'copyAssets'...\n[09:44:34] Finished 'copyAssets' after 2.37 ms\n[09:44:34] Starting 'copyMetaFiles'...\n[09:44:34] Finished 'copyMetaFiles' after 4.64 ms\n[09:44:34] Starting 'generatePackageJSON'...\n[09:44:34] Finished 'generatePackageJSON' after 2.72 ms\n[09:44:34] Starting 'buildBundles'...\n[09:44:45] Finished 'buildBundles' after 11 s\n[09:44:45] Starting 'init2xFolder'...\n[09:44:46] Finished 'init2xFolder' after 811 ms\n[09:44:46] Starting 'build2xCSS'...\n[09:44:46] 'build2xCSS' errored after 126 ms\n[09:44:46] CssSyntaxError in plugin \"gulp-postcss\"\n```\n\n----------------------------------------\n\nTITLE: Using Native HTML Input with maxLength Attribute (TSX/JSX)\nDESCRIPTION: This snippet shows a standard HTML `<input>` element rendered within a TSX/JSX context. It uses the `value` attribute to set the initial text and the `maxLength` attribute (set to 5) to restrict user input, not to truncate the initially displayed value.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<input value=\"Hello World\" maxLength={5} />\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design Compatibility Packages via npm (Bash)\nDESCRIPTION: Commands to install the `@ant-design/compatible` package (for v4 components like Comment) and `@ant-design/pro-components` (for PageHeader) when migrating to Ant Design v5.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @ant-design/compatible@v5-compatible-v4\nnpm install --save @ant-design/pro-components\n```\n\n----------------------------------------\n\nTITLE: Removing unused Button type definition in TypeScript\nDESCRIPTION: Removes the unused 'ghost' type definition from Button component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Removing unused `type=\"ghost\"` attribute definition from Button\n```\n\n----------------------------------------\n\nTITLE: Embedding Design Resource Cards\nDESCRIPTION: This custom component tag `<ResourceCards>` is used within the Markdown file to render a structured list of design resources. The content within the tags follows a specific format (likely Markdown list items) which the component parses to display resource cards, typically containing an icon, title, description, link, and source.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ResourceCards>\n- Sketch Symbols\n  - https://gw.alipayobjects.com/zos/basement_prod/048ee28f-2c80-4d15-9aa3-4f5ddac50465.svg\n  - Sketch Symbols for Desktop\n  - https://github.com/ant-design/ant-design/releases/download/5.13.3/AntDesign5.0_UI.KIT_202401.sketch\n  - Official\n- Mobile Components\n  - https://gw.alipayobjects.com/zos/basement_prod/c0c3852c-d245-4330-886b-cb02ef49eb6d.svg\n  - Sketch Symbols File for Mobile\n  - https://gw.alipayobjects.com/os/bmw-prod/d6266aef-25b7-4892-b275-ce214121831c.sketch\n  - Official\n- Ant Design Pro\n  - https://gw.alipayobjects.com/zos/basement_prod/5edc7f4d-3302-4710-963b-7b6c77ea8d06.svg\n  - Common Templates and Pages\n  - https://gw.alipayobjects.com/os/bmw-prod/22208f9d-f8c5-4d7c-b87a-fec290e96527.sketch\n  - Official\n- Ant Design Chart\n  - https://gw.alipayobjects.com/zos/basement_prod/a9dc586a-fe0a-4c7d-ab4f-f5ed779b963d.svg\n  - Sketch Symbols for Chart\n  - https://gw.alipayobjects.com/os/bmw-prod/704968a5-2641-484e-9f65-c2735b2c0287.sketch\n  - Official\n- Kitchen\n  - https://gw.alipayobjects.com/zos/basement_prod/d475d063-2754-4442-b9db-5d164e06acc9.svg\n  - A Sketch plugin collection\n  - http://kitchen.alipay.com\n  - Official\n- Ant Design Landing\n  - https://gw.alipayobjects.com/zos/basement_prod/b443f4be-5116-49b7-873f-a7c8502b8f0e.svg\n  - Landing Templates\n  - https://landing.ant.design/docs/download-cn\n  - Official\n- Figma Resources\n  - https://gw.alipayobjects.com/zos/basement_prod/7b9ed3f2-6f05-4ddb-bac3-d55feb71e0ac.svg\n  - Always up-to-date Ant Design Figma resources\n  - https://www.antforfigma.com\n- Figma Open Source Library\n  - https://gw.alipayobjects.com/zos/basement_prod/7b9ed3f2-6f05-4ddb-bac3-d55feb71e0ac.svg\n  - Free open source Figma library with complete accurate to code components\n  - https://www.figma.com/community/file/831698976089873405\n- AntBlocks UI for Figma\n  - https://uploads-ssl.webflow.com/64dc925e7cb893427a5c9cdc/64e4610f7818dcc7501057ad_antblocks-ui-card-img.svg\n  - High-quality, responsive, and customizable React components built on Ant Design\n  - https://www.antblocksui.com/#figma\n- Ruyi Design Assistant\n  - https://github.com/ant-design/ant-design/assets/507615/45201521-37d0-4360-b81e-a1260dedad7a\n  - Figma Plugin,Design using Antd code component library and deliver component code that is friendly to developers\n  - https://www.figma.com/community/plugin/1192146318523533547\n- UI Kit for Adobe XD\n  - https://uploads-ssl.webflow.com/5ecbd337fe499992c9ed75ba/5f2a7a30f3e817085cec5ac9_ant-xd-svg.svg\n  - Library of components for Desktop\n  - https://www.antforxd.com\n- MockingBot\n  - https://cdn.modao.cc/logo_mockingbot.svg\n  - Rich component resources\n  - https://modao.cc/square/ant-design\n- JiShi Design\n  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*dxzdQYWlmjMAAAAAAAAAAAAAARQnAQ\n  - Use fully components and templates on JiShi Design\n  - https://js.design/antd\n- MasterGo\n  - https://mastergo-local-default.oss-cn-beijing.aliyuncs.com/ant-design-mastergo.svg\n  - Use fully components and templates on MasterGo\n  - https://mastergo.com/community/?utm_source=antdesign&utm_medium=link&utm_campaign=resource&cata_name=AntDesign\n- Ant for Plasmic\n  - https://user-images.githubusercontent.com/7129/149994038-76214796-cd6a-4e80-b0a4-117e8edac050.png\n  - Drag/drop live Ant components and manipulate props in this React visual builder\n  - https://www.plasmic.app/ant-design\n</ResourceCards>\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for InputNumber (Markdown)\nDESCRIPTION: This table shows the mapping from Less variables to Component Tokens specifically for the Ant Design InputNumber component, focusing on handler (stepper button) background and border colors in different states (hover, active).\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@input-number-hover-border-color` | `hoverBorderColor` | - |\n| `@input-number-handler-active-bg` | `handleActiveBg` | - |\n| `@input-number-handler-hover-bg` | `handleHoverColor` | Wrong usage in 4.x, which is actually text color |\n| `@input-number-handler-bg` | `handleBg` | - |\n| `@input-number-handler-border-color` | `handleBorderColor` | - |\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton BackTop Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/back-top.tsx') demonstrating the usage of the Ant Design FloatButton.BackTop component for scrolling to the top of the page. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/back-top.tsx\" iframe=\"360\">BackTop</code>\n```\n\n----------------------------------------\n\nTITLE: Importing Semantic DOM Example in TypeScript\nDESCRIPTION: This snippet imports an example of semantic DOM usage for the List component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/_semantic.tsx\" simplify=\"true\"></code>\n```\n\n----------------------------------------\n\nTITLE: Styling Error Icon in Ant Design Demo\nDESCRIPTION: This CSS snippet defines the styling for an error icon in an Ant Design demo result. It sets the color of the icon to red, providing a visual indication of an error state.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/result/demo/error.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.site-result-demo-error-icon {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Number Format\nDESCRIPTION: Semantic version number format used to identify different releases.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.1.1\n```\n\n----------------------------------------\n\nTITLE: Updating Interface to Add Optional Max Length Property (TSX)\nDESCRIPTION: This snippet shows an update to the `StrProps` interface, adding an optional `maxLen` property of type number. This modification allows the `MyStr` component (or others using this interface) to potentially receive a maximum length constraint.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/to-be-what-you-see.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface StrProps {\n  value: string;\n  maxLen?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Build Options for Bundling (Vite/TypeScript)\nDESCRIPTION: This configuration object (likely for Vite in JavaScript/TypeScript) specifies build settings for CSS targets, library formats, rollup output options, external dependencies, and minification strategies. Dependencies include Vite, Rollup, and compatible CSS bundlers. The main parameters are root directory, build mode, external packages (react, react-dom), output directory, and minification toggle based on production. Input is the environment and build formats, output is a bundle placed in './lib/bundle'. Limitations include its project-specific nature and assumption of certain directory structures.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/build-ghost.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    root: process.cwd(),\n    mode: env,\n    logLevel: 'silent',\n    define: { 'process.env.NODE_ENV': `\"${env}\"` },\n    build: {\n      cssTarget: 'chrome61',\n      lib: {\n        formats,\n        ...\n      },\n      rollupOptions: {\n       output: {\n          dir: './lib/bundle',\n          globals: {\n            'react': 'React',\n            'react-dom': 'ReactDOM',\n          },\n        },\n      },\n      minify: isProd ? 'esbuild' : false,\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Ant Design\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Applying Scale Transformations to Offset Calculations\nDESCRIPTION: Snippet showing how to apply calculated scale ratios to position offsets for proper alignment of transformed elements.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tooltip-align.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Some logic for align offset calculation\n// const baseOffsetX = ...\n// const baseOffsetY = ...\n\nconst scaledOffsetX = baseOffsetX / scaleX;\nconst scaledOffsetY = baseOffsetY / scaleY;\n```\n\n----------------------------------------\n\nTITLE: Version Headers\nDESCRIPTION: Version numbers and release dates for older versions\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.6\n\n`2022-12-12`\n\n## 5.0.5\n\n`2022-12-08`\n\n## 5.0.4\n\n`2022-12-05`\n```\n\n----------------------------------------\n\nTITLE: Layout Directive for Resource Cards\nDESCRIPTION: This HTML div element, likely processed by a custom Markdown renderer or site generator, acts as a directive to apply specific styling or layout (using the class 'next-block-use-cards') to the subsequent block, which is expected to be a <ResourceCards> component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"next-block-use-cards\"></div>\n```\n\n----------------------------------------\n\nTITLE: Mapping Less Variables to Component Tokens for Form (Markdown)\nDESCRIPTION: This table details the mapping from Less variables to Component Tokens for the Ant Design Form component, covering label styling, item margins, and deprecated variables related to validation states.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore -->\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@label-required-color` | `labelRequiredMarkColor` | - |\n| `@label-color` | `labelColor` | - |\n| `@form-warning-input-bg` | - | Deprecated |\n| `@form-item-margin-bottom` | `itemMarginBottom` | - |\n| `@form-item-trailing-colon` | - | Deprecated |\n| `@form-vertical-label-padding` | `verticalLabelPadding` | - |\n| `@form-vertical-label-margin` | `verticalLabelMargin` | - |\n| `@form-item-label-font-size` | `labelFontSize` | - |\n| `@form-item-label-height` | `labelHeight` | - |\n| `@form-item-label-colon-margin-right` | `labelColonMarginInlineEnd` | - |\n| `@form-item-label-colon-margin-left` | `labelColonMarginInlineStart` | - |\n| `@form-error-input-bg` | - | Deprecated |\n```\n\n----------------------------------------\n\nTITLE: AnchorItem Props API Table in Markdown\nDESCRIPTION: Markdown table describing the API props for the AnchorItem configuration, including key, href, target, title, and children options.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/index.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| key | 唯一标志 | string \\| number | - |  |\n| href | 锚点链接 | string | - |  |\n| target | 该属性指定在何处显示链接的资源 | string | - |  |\n| title | 文字内容 | ReactNode | - |  |\n| children | 嵌套的 Anchor Link，`注意：水平方向该属性不支持` | [AnchorItem](#anchoritem)\\[] | - |  |\n| replace | 替换浏览器历史记录中的项目 href 而不是推送它 | boolean | false | 5.7.0 |\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using npm\nDESCRIPTION: This command installs the Ant Design library as a project dependency using the Node Package Manager (npm) and saves it to the `dependencies` section in the `package.json` file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/introduce.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install antd --save\n```\n\n----------------------------------------\n\nTITLE: Defining Multilingual Debug Usage Instructions in Markdown\nDESCRIPTION: This snippet demonstrates how to provide debug usage instructions in multiple languages using Markdown headers. It includes both Chinese (zh-CN) and English (en-US) versions.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/menu/demo/extra-style.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n调试使用\n\n## en-US\n\nDebug usage\n```\n\n----------------------------------------\n\nTITLE: Feature Status Emojis in Markdown\nDESCRIPTION: Emoji indicators for different types of changes (new features, fixes, etc)\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n🔥 - Hot/Important changes\n🆕 - New feature\n🐞 - Bug fix\n💄 - Visual/Style updates\n🛠 - Refactor\n🤖 - TypeScript updates\n🌐 - Localization\n```\n\n----------------------------------------\n\nTITLE: Release Version and Date - 5.23.3\nDESCRIPTION: Version number and release date formatting for Ant Design 5.23.3\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.23.3\n\n`2025-01-28`\n```\n\n----------------------------------------\n\nTITLE: Form Rule Configuration Example\nDESCRIPTION: Implementation showing Form field name validation where 0 is a valid name in Form.List\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst formListName = 0; // Valid Form.List name configuration\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Toolbar Wrapper and Icons with CSS\nDESCRIPTION: This CSS code defines styles for a custom toolbar container (`.toolbar-wrapper`) and its icons (`.anticon`). It sets visual properties like background color, padding, border-radius, and text color for the wrapper. It also styles the icons within the toolbar, defining their padding, cursor behavior, and appearance for hover and disabled states, likely using Ant Design's icon class convention.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/image/demo/toolbarRender.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.toolbar-wrapper {\n  padding: 0px 24px;\n  color: #fff;\n  font-size: 20px;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 100px;\n}\n\n.toolbar-wrapper .anticon {\n  padding: 12px;\n  cursor: pointer;\n}\n\n.toolbar-wrapper .anticon[disabled] {\n  cursor: not-allowed;\n  opacity: 0.3;\n}\n\n.toolbar-wrapper .anticon:hover {\n  opacity: 0.3;\n}\n```\n\n----------------------------------------\n\nTITLE: Building UMD Bundle\nDESCRIPTION: Commands to create UMD build of the Ant Design library.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dist\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn dist\n```\n\n----------------------------------------\n\nTITLE: Version Headers in Markdown\nDESCRIPTION: Version numbers and release dates for Ant Design releases 5.2.0 and 5.1.7\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.2.0\n\n`2023-02-08`\n\n## 5.1.7\n\n`2023-01-31`\n```\n\n----------------------------------------\n\nTITLE: Documenting Alert Component Usage in Markdown\nDESCRIPTION: This snippet provides multilingual documentation for the simplest usage of an Alert component. It includes descriptions in both Chinese (zh-CN) and English (en-US) to explain the basic implementation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/rate/demo/basic.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n最简单的用法。\n\n## en-US\n\nThe simplest usage.\n```\n\n----------------------------------------\n\nTITLE: Poor Issue Description Example\nDESCRIPTION: Example demonstrating an overly brief and unhelpful issue description versus a detailed and informative one.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/issue-helper.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStyle compilation error\n```\n\n----------------------------------------\n\nTITLE: Upload Component Variable Mapping\nDESCRIPTION: Mapping of Less variables to Component Tokens for the Upload component, specifying action color settings.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@upload-actions-color` | `actionsColor` | - |\n```\n\n----------------------------------------\n\nTITLE: Updating Locale Test Snapshots with Jest (Bash)\nDESCRIPTION: This Bash command is used during the process of adding a new language pack to Ant Design. It runs the Jest test suite specifically for the locale components (`components/locale`) in snapshot update mode (`-u`), ensuring that the test snapshots reflect the changes introduced by the new locale. This command should be run from the project root after making code changes and installing dependencies.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/i18n.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test -- components/locale -u\n```\n\n----------------------------------------\n\nTITLE: Defining List.Item.Meta API in Markdown\nDESCRIPTION: This snippet defines the API for the List.Item.Meta component, including properties like avatar, description, and title.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Property    | Description                  | Type      | Default | Version |\n| ----------- | ---------------------------- | --------- | ------- | ------- |\n| avatar      | The avatar of list item      | ReactNode | -       |         |\n| description | The description of list item | ReactNode | -       |         |\n| title       | The title of list item       | ReactNode | -       |         |\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design using NPM\nDESCRIPTION: Installs the Ant Design library (`antd`) as a project dependency using the npm package manager and saves it to the `package.json` file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install antd --save\n```\n\n----------------------------------------\n\nTITLE: Embedding Image Preview in Markdown for Click-to-Edit Example\nDESCRIPTION: This snippet demonstrates how to embed an image preview in Markdown, showing different states of a click-to-edit interface. It includes a description of each state and uses HTML-like tags within the Markdown.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of click to edit\" description=\"Status 1: Common browsing mode, do not distinguish between editable  and  non-editable lines；<br>Status 2: On mouse hover, the background is backlit with yellow. A tool tip invites the user to 'Click to edit'；<br>Status 3: Once the user clicks on the title, the form elements 「Input box」, 「OK」 and 「Cancel」 appear, and the cursor is positioned in the 「input box」.\" src=\"https://gw.alipayobjects.com/zos/rmsportal/EXKwsvUkIUNkHBSsOlRi.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Documenting Ant Design 5.0.0 Release\nDESCRIPTION: Markdown content announcing the release of Ant Design 5.0.0 and providing a link to the release notes and migration guide.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_30\n\nLANGUAGE: Markdown\nCODE:\n```\n## 5.0.0\n\n`2022-11-18`\n\n🏆 Ant Design 5.0.0 is released, see our [release note](https://github.com/ant-design/ant-design/issues/38671) for more details.\n\n#### Read it before migration\n\n🌟 If you want to migrate to Ant Design 5.0, please check [V4 to V5](/docs/react/migration-v5).\n```\n\n----------------------------------------\n\nTITLE: Version and Date Header\nDESCRIPTION: The version number and release date for Ant Design 5.9.0\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.9.0\n\n`2023-09-08`\n```\n\n----------------------------------------\n\nTITLE: Documenting Debug Component Usage in Markdown\nDESCRIPTION: This snippet provides documentation for a debug-only component in both Chinese and English. It warns developers not to use this component in production environments.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/notification/demo/render-panel.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n调试用组件，请勿直接使用。\n\n## en-US\n\nDebug usage. Do not use in your production.\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Format\nDESCRIPTION: Format used to reference GitHub issues and pull requests in changelog entries\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#53521](https://github.com/ant-design/ant-design/pull/53521)\n```\n\n----------------------------------------\n\nTITLE: Embedding Resource Articles\nDESCRIPTION: This custom component tag `<ResourceArticles>` is likely used within the Markdown file to fetch and display a curated list of articles related to Ant Design. The component handles the data fetching and rendering logic, presenting the articles in a predefined format.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/resources.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ResourceArticles></ResourceArticles>\n```\n\n----------------------------------------\n\nTITLE: Version Release Date Format\nDESCRIPTION: Date format used in changelog entries to indicate release dates\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n`2023-01-20`\n```\n\n----------------------------------------\n\nTITLE: Embedding Image Preview in Markdown for Drag and Drop List Example\nDESCRIPTION: This snippet shows how to embed an image preview for a drag and drop list interface. It includes a description of different states and uses HTML-like tags within the Markdown.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of Drag and Drop List\" description=\"Status 1: On mouse hover,a removable 「icon」 appears.；<br>Status 2： When hovering over the 「icon」, the pointer changes into a 「hand」, click-and-drag operation can be used；<br>Status 3：Drag  target to the placeable block. When  blue stroke appears, inform  user that object can be placed in the block.\" src=\"https://gw.alipayobjects.com/zos/rmsportal/xZWSNecZhGXaAVluxOAK.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Installing Ant Design CSS-in-JS Utility using Bun\nDESCRIPTION: Adds the `@ant-design/cssinjs` package using Bun. This package is essential for managing Ant Design styles on the server when using the Next.js Pages Router.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-next.en-US.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add @ant-design/cssinjs\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image Example of Repetitive Formats (HTML/JSX)\nDESCRIPTION: This snippet displays an image showing an \"Example of repetitive of formats\" within the `<ImagePreview>` component. It follows the same pattern as the previous image snippets, utilizing `src`, `alt`, and `class` attributes within the custom component structure used in the Ant Design documentation.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/repetition.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of repetitive of formats\" src=\"https://gw.alipayobjects.com/zos/rmsportal/DYDGrgkbdFEbcVRuJcjH.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Controlled Close Example in React\nDESCRIPTION: Imports an example showing how to control the closing of the Popover dialog.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/control.tsx\">Controlling the close of the dialog</code>\n```\n\n----------------------------------------\n\nTITLE: PNPM Cache Configuration for GitHub Actions\nDESCRIPTION: Configuration snippet for implementing pnpm caching in GitHub Actions to optimize dependency installation speed. Creates and uses a cache based on pnpm-lock.yaml file.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create pnpm-lock.yaml\n  run: pnpm install --frozen-lockfile --ignore-scripts\n\n- name: Get pnpm store directory\n  id: pnpm-cache\n  shell: bash\n  run: |\n    echo \"STORE_PATH=$(pnpm store path)\" >> $GITHUB_OUTPUT\n\n- name: Setup pnpm cache\n  uses: actions/cache@v4\n  with:\n    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}\n    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n    restore-keys: |\n      ${{ runner.os }}-pnpm-store-\n```\n\n----------------------------------------\n\nTITLE: Component Reference Interface Definition\nDESCRIPTION: TypeScript interface definition for component references showing standardized structure with native element access.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface SampleRef {\n  nativeElement: HTMLElement;\n  focus(): void;\n  blur(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Proxy Context in Form Component for Validation Messages (TSX)\nDESCRIPTION: This snippet shows how the Ant Design Form component consumes the `ValidateMessageContext` (provided by `ConfigProvider`) to get the validation messages. It then uses the actual `FormProvider` from `rc-field-form` internally, wrapping the base `Form` component. This ensures that the dependency on `rc-field-form` is localized to the Form component itself, rather than being tied to `ConfigProvider`, facilitating better Tree Shaking.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Sample only. Not real world code.\nimport Form, { FormProvider } from 'rc-field-form';\n\nimport { ValidateMessageContext } from './context';\n\nexport default (props) => {\n  const validateMessages = React.useContext(ValidateMessageContext);\n\n  return (\n    <FormProvider validateMessages={validateMessages}>\n      <Form {...props} />\n    </FormProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Previous Version Header\nDESCRIPTION: Version number and release date for Ant Design 5.0.7\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.7\n\n`2022-12-13`\n```\n\n----------------------------------------\n\nTITLE: Documenting Ant Design 5.0.3 Release\nDESCRIPTION: Markdown content detailing the changes and fixes in Ant Design version 5.0.3, including improvements to Spin, Menu, Input.TextArea, and other components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_27\n\nLANGUAGE: Markdown\nCODE:\n```\n## 5.0.3\n\n`2022-11-30`\n\n- 🐞 Fix Spin alignment when using `tip`. [#38923](https://github.com/ant-design/ant-design/pull/38923) [@sribich](https://github.com/sribich)\n- Menu\n  - 🐞 Fix Menu Submenu style when overflowed. [#39093](https://github.com/ant-design/ant-design/pull/39093)\n  - 🐞 Fix Menu.Item hover area when trigger active color change. [#39077](https://github.com/ant-design/ant-design/pull/39077) [@Pulset](https://github.com/Pulset)\n- 🐞 Fix Input.TextArea resize behavior by adding reset style. [aa92f02](https://github.com/ant-design/ant-design/commit/aa92f02)\n- 🐞 Fix Upload default icon color. [#39114](https://github.com/ant-design/ant-design/pull/39114) [@MARKX97](https://github.com/MARKX97)\n- 🐞 Fix `@ant-design/cssinjs` ssr warning in dev mode caused by dynamic hashId. [#39069](https://github.com/ant-design/ant-design/pull/39069)\n- 🐞 Fix FloatButton.Group flicking on closing. [#39061](https://github.com/ant-design/ant-design/pull/39061)\n- 🐞 Fix Card.Meta that width is not 100%. [#39026](https://github.com/ant-design/ant-design/pull/39026) [@justanotheranonymoususer](https://github.com/justanotheranonymoususer)\n```\n\n----------------------------------------\n\nTITLE: Attempting Conditional FormProvider Rendering in ConfigProvider (TSX)\nDESCRIPTION: This snippet illustrates an unsuccessful attempt to optimize bundle size by conditionally rendering `FormProvider` only when `validateMessages` is provided. This approach fails because Tree Shaking is a static analysis process performed at compile time, and it cannot determine the runtime value of `validateMessages`. Therefore, the dependency on `FormProvider` remains regardless of the condition.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/tree-shaking.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Sample only. Not real world code.\nimport { FormProvider } from 'rc-field-form';\n\nconst ConfigProvider = ({ validateMessages, children }) => {\n  let node = children;\n\n  if (validateMessages) {\n    node = <FormProvider validateMessages={merge(...)}>{node}</FormProvider>;\n  }\n\n  return node;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Strict Mode in Form's getFieldsValue Method\nDESCRIPTION: Form's getFieldsValue method now supports a 'strict' option to only return fields bound by Form.Item.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getFieldsValue({ strict: true });\n```\n\n----------------------------------------\n\nTITLE: Defining List.Item API in Markdown\nDESCRIPTION: This snippet defines the API for the List.Item component, including properties like actions, classNames, extra, and styles.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/list/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| actions | The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right | Array&lt;ReactNode> | - |  |\n| classNames | Semantic structure className | [`Record<actions \\| extra, string>`](#semantic-dom) | - | 5.18.0 |\n| extra | The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right | ReactNode | - |  |\n| styles | Semantic DOM style | [`Record<actions \\| extra, CSSProperties>`](#semantic-dom) | - | 5.18.0 |\n```\n\n----------------------------------------\n\nTITLE: Release Date Format\nDESCRIPTION: Date format used in the release notes to indicate when versions were published.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n`2022-12-26`\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Trigger Types Example in React\nDESCRIPTION: Imports an example showing three different ways to trigger the Popover component.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/triggerType.tsx\">Three ways to trigger</code>\n```\n\n----------------------------------------\n\nTITLE: Extracting All Ant Design Styles using @ant-design/static-style-extract in TypeScript\nDESCRIPTION: Shows the practical implementation of static style extraction using the dedicated `@ant-design/static-style-extract` package. The `extractStyle` function from this package internally renders all standard Ant Design components (excluding popups not needed for initial SSR), collects their styles, and returns the combined CSS string. This CSS can then be written to a file using Node.js `fs` module for static serving. Dependencies include `@ant-design/static-style-extract` and Node.js `fs`.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/extract-ssr.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { extractStyle } from '@ant-design/static-style-extract';\nimport fs from 'fs';\n\n// `extractStyle` containers all the antd component\n// excludes popup like component which is no need in ssr: Modal, message, notification, etc.\nconst css = extractStyle();\n\nfs.writeFile(...);\n```\n\n----------------------------------------\n\nTITLE: Issue/PR Reference Format\nDESCRIPTION: Format used to reference GitHub issues and pull requests.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n[#39465](https://github.com/ant-design/ant-design/pull/39465)\n```\n\n----------------------------------------\n\nTITLE: Embedding Image Preview in Markdown for Multi-Field Inline Edit Example\nDESCRIPTION: This snippet demonstrates how to embed an image preview for a multi-field inline edit interface. It includes a description of the edit mode and uses HTML-like tags within the Markdown.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/spec/direct.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ImagePreview>\n<img class=\"preview-img\" alt=\"Example of Multi-Field Inline Edit\" description=\"Edit mode without destroying integrity can enlarge the space in order to put down the 「Input box」 and other form elements. Besides, when switching the edit mode in the Table, it is necessary to ensure that each column does not beat.\" src=\"https://gw.alipayobjects.com/zos/rmsportal/ukbXcTHrgPmTfHmCassD.png\">\n</ImagePreview>\n```\n\n----------------------------------------\n\nTITLE: Defining a GitHub Actions CI/CD Workflow (YAML)\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow triggered by push and pull request events on the master branch. It includes a single job 'CI' running on Ubuntu, which checks out code, sets up Node.js (v16) and pnpm (v7.0.0), installs dependencies, runs linters, builds the project, uploads build artifacts, and deploys the './dist' directory to GitHub Pages (only on master push). It utilizes several standard GitHub Actions like `actions/checkout`, `oven-sh/setup-bun`, `pnpm/action-setup`, `actions/upload-artifact`, and `peaceiris/actions-gh-pages`. Write permissions for contents are required, and the `GITHUB_TOKEN` secret is necessary for deployment.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/github-actions-workflow.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# zh: Event 设置为 master 分支的 pull request 事件和 push 事件\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\npermissions:\n  contents: write\n\njobs:\n  CI:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code (检出代码)\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js (设置 node 版本)\n        uses: oven-sh/setup-bun@v2\n        with:\n          node-version: 16\n\n      - name: Install pnpm (安装 pnpm)\n        uses: pnpm/action-setup@v2\n        with:\n          version: 7.0.0\n\n      - name: Install dependencies (安装依赖)\n        run: pnpm install\n\n      - name: lint (代码检查)\n        run: pnpm run lint\n\n      # en: The template does not contain test cases. If you need to use test cases, you can uncomment it\n      # zh: 初始化模板中不包含测试用例，如需使用测试用例，可取消注释\n      # - name: Test (测试)\n      #   run: pnpm run test\n\n      - name: Build (构建)\n        run: pnpm run build\n\n      - name: Upload build artifacts (上传构建产物)\n        uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: ./dist\n\n      - name: Deploy to GitHub Pages (部署到 GitHub Pages)\n        uses: peaceiris/actions-gh-pages@v3\n        # en: Only deploy when the push event of the master branch is triggered\n        # zh: 仅在触发 master 分支的 push 事件时部署\n        if: github.ref == 'refs/heads/master'\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```\n\n----------------------------------------\n\nTITLE: Cascader Generic Type Definition\nDESCRIPTION: Enhanced type definition for Cascader component with transparent optionType generic passing\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CascaderProps<T> {\n  optionType?: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Moment Webpack Plugin for Ant Design v5 Compatibility (Bash)\nDESCRIPTION: Command to install the `@ant-design/moment-webpack-plugin` as a development dependency. This plugin allows projects to continue using Moment.js instead of Day.js with Ant Design v5 if immediate migration is not feasible.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.zh-CN.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @ant-design/moment-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Release Version and Date - 5.23.1\nDESCRIPTION: Version number and release date formatting for Ant Design 5.23.1\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.23.1\n\n`2025-01-13`\n```\n\n----------------------------------------\n\nTITLE: Using transform in Rules for Aggregate Field Validation (TSX)\nDESCRIPTION: Illustrates the conceptual use of the `transform` function within a `Form.Item`'s `rules`. This function allows validation logic to access the aggregated value. It retrieves the current values of all associated `names` from the form instance (`form.getFieldValue(name)`) and returns them as an array, which is then used by the validation rule.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/form-names.en-US.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nrules={[{\n  transform: () => {\n    const values = names.map((name) => form.getFieldValue(name));\n    return values;\n  },\n}]}\n```\n\n----------------------------------------\n\nTITLE: Documenting Ant Design 5.0.4 Release\nDESCRIPTION: Markdown content detailing the changes and fixes in Ant Design version 5.0.4, including improvements to Modal, Tree, Dropdown, and other components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_26\n\nLANGUAGE: Markdown\nCODE:\n```\n## 5.0.4\n\n`2022-12-05`\n\n- Modal\n  - 🐞 Fix Modal with long content exceed the panel. [#39249](https://github.com/ant-design/ant-design/pull/39249) [@MuxinFeng](https://github.com/MuxinFeng)\n  - 🐞 Fix Modal.info content width when without icon. [#39047](https://github.com/ant-design/ant-design/pull/39047) [@owjs3901](https://github.com/owjs3901)\n- 🐞 Fix Tree config `checkable` and `blockNode` not makes `title` stretch issue. [#39209](https://github.com/ant-design/ant-design/pull/39209) [@Wxh16144](https://github.com/Wxh16144)\n- 🐞 Fix Dropdown sub menu missing motion. [#39235](https://github.com/ant-design/ant-design/pull/39235)\n- 💄 Fix DatePicker.RangePicker time panel padding style. [#39228](https://github.com/ant-design/ant-design/pull/39228)\n- 🐞 Fix Card action button round style. [#39210](https://github.com/ant-design/ant-design/pull/39210) [@MuxinFeng](https://github.com/MuxinFeng)\n- 🐞 Fix Badge wave effect color not follow `color`. [#39182](https://github.com/ant-design/ant-design/pull/39182) [@li-jia-nan](https://github.com/li-jia-nan)\n- 🐞 Fix Radio disabled status check style. [#39165](https://github.com/ant-design/ant-design/pull/39165) [@Wxh16144](https://github.com/Wxh16144)\n- 🐞 Fixed Input.TextArea count style when `resize` is not `none`. [#39121](https://github.com/ant-design/ant-design/pull/39121) [@51wangping](https://github.com/51wangping)\n- 🐞 Fix Transfer clicking the checkbox position cannot be unchecked and onSelectChange is triggered twice. [#39078](https://github.com/ant-design/ant-design/pull/39078) [@edc-hui](https://github.com/edc-hui)\n- 🐞 Fix Steps set `size=\"small\"` with progress not fully display. [#39100](https://github.com/ant-design/ant-design/pull/39100) [@Wxh16144](https://github.com/Wxh16144)\n- 🐞 Fix Form horizontal layout with `xs` responsive config not work. [#39130](https://github.com/ant-design/ant-design/pull/39130)\n- 🐞 Fix message position not correct in RTL. [#39248](https://github.com/ant-design/ant-design/pull/39248) [@Yuiai01](https://github.com/Yuiai01)\n- 🐞 Fix Switch only set with `checkedChildren` or `unCheckedChildren` content not display. [#39262](https://github.com/ant-design/ant-design/pull/39262)\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Component Token Example in React\nDESCRIPTION: Imports a debug example demonstrating the use of component tokens with the Popover.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/popover/index.en-US.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n```\n\n----------------------------------------\n\nTITLE: Version Number Example\nDESCRIPTION: Example of Ant Design version number formatting in changelog entries\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`2025-04-21`\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Warning in Ant Design\nDESCRIPTION: Example of a deprecation warning message shown when using outdated Ant Design props.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/blog/historical-debt.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWarning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.\n```\n\n----------------------------------------\n\nTITLE: Using ComponentOverview JSX Component in Markdown\nDESCRIPTION: This code snippet demonstrates the usage of the ComponentOverview JSX component within a Markdown file. The component is likely responsible for rendering a visual overview of all available Ant Design components on the page.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/overview/index.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentOverview></ComponentOverview>\n```\n\n----------------------------------------\n\nTITLE: React Component Search Input Example\nDESCRIPTION: Example of Input.Search with search type attribute for accessibility\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nInput.Search type=\"search\"\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Format\nDESCRIPTION: Format used to reference GitHub issues and pull requests\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n[#40133](https://github.com/ant-design/ant-design/pull/40133)\n```\n\n----------------------------------------\n\nTITLE: Version and Date Header for 5.8.6\nDESCRIPTION: The version number and release date for Ant Design 5.8.6\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.8.6\n\n`2023-09-02`\n```\n\n----------------------------------------\n\nTITLE: Release Version Header\nDESCRIPTION: Version number and release date for Ant Design 5.1.0\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.1.0\n\n`2022-12-20`\n```\n\n----------------------------------------\n\nTITLE: Documenting Debug Component Usage in Markdown\nDESCRIPTION: This code snippet provides documentation for a debug-only component in both Chinese (zh-CN) and English (en-US). It warns users not to use this component directly in production environments.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/mentions/demo/render-panel.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## zh-CN\n\n调试用组件，请勿直接使用。\n\n## en-US\n\nDebug usage. Do not use in your production.\n```\n\n----------------------------------------\n\nTITLE: Version Release Information\nDESCRIPTION: Version tag and release date information formatted in markdown\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.en-US.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`2024-04-22`\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Badge Debug Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/badge-debug.tsx') for debugging badge dot functionality on the Ant Design FloatButton component. This demo includes the 'debug' attribute and is intended for an iframe width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/badge-debug.tsx\" iframe=\"360\" debug>debug dot</code>\n```\n\n----------------------------------------\n\nTITLE: Displaying MapToken Table in Markdown\nDESCRIPTION: This snippet uses a custom component to display the MapToken table in the documentation, noting that it inherits all SeedToken properties.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/customize-theme.zh-CN.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<TokenTable type=\"map\"></TokenTable>\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Alert Using Ant Design Alert Component - JSX\nDESCRIPTION: This snippet demonstrates how to render an informational banner alert using the Ant Design Alert component in JSX. It communicates to developers that the listed APIs are shared across Tooltip, Popconfirm, and Popover components. This snippet depends on Ant Design's core library and should be used within a React or compatible JSX-rendering environment. The Alert receives properties for message text, alert type, and banner styling; no inputs or outputs beyond the rendered UI element are expected.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/tooltip/shared/sharedProps.en-US.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Antd component=\"Alert\" message=\"The following APIs are shared by Tooltip, Popconfirm, Popover.\" type=\"info\" banner=\"true\"></Antd>\n```\n\n----------------------------------------\n\nTITLE: Bilingual Documentation for Horizontal Anchors\nDESCRIPTION: Documentation in both Chinese and English explaining horizontal anchor alignment functionality in Ant Design.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/anchor/demo/horizontal.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## zh-CN\n\n横向 Anchor。\n\n## en-US\n\nHorizontally aligned anchors\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Design Component Tokens using ConfigProvider (React)\nDESCRIPTION: This React code demonstrates how to customize Ant Design component tokens globally for specific components. It uses the `ConfigProvider` component to wrap parts of the application and applies custom theme settings via the `theme.components` prop. In this example, it sets a custom `colorPrimary` for both `Radio` and `Checkbox` components.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.zh-CN.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox, ConfigProvider, Radio } from 'antd';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      components: {\n        Radio: {\n          colorPrimary: '#00b96b',\n        },\n        Checkbox: {\n          colorPrimary: '#ff4d4f',\n        },\n      },\n    }}\n  >\n    <Radio>Radio</Radio>\n    <Checkbox>Checkbox</Checkbox>\n  </ConfigProvider>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Ant Design Tree Transfer Component's First List in CSS\nDESCRIPTION: This CSS snippet targets the first list element (`.ant-transfer-list:first-child`) within a container having the class `.tree-transfer` (likely an Ant Design Transfer component using a Tree). It overrides the default flex behavior (`flex: none;`) and sets a fixed width of 50% (`width: 50%;`), adjusting the layout to better accommodate a tree structure within the transfer list.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/transfer/demo/tree-transfer.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n.tree-transfer .ant-transfer-list:first-child {\n  flex: none;\n  width: 50%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Ant Design Component Token Mapping Tables\nDESCRIPTION: A series of markdown tables documenting the mapping between Less variables and Component Tokens for different Ant Design components. Each table includes variable names, corresponding tokens, and migration notes.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migrate-less-variables.en-US.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Less variables | Component Token | Note |\n| --- | --- | --- |\n| `@skeleton-block-radius` | `blockRadius` | - |\n| `@skeleton-title-height` | `titleHeight` | - |\n| `@skeleton-color` | `gradientFromColor` | - |\n| `@skeleton-to-color` | `gradientToColor` | - |\n| `@skeleton-paragraph-margin-top` | `paragraphMarginTop` | - |\n| `@skeleton-paragraph-li-height` | `paragraphLiHeight` | - |\n| `@skeleton-paragraph-li-margin-top` | - | Deprecated for style change |\n```\n\n----------------------------------------\n\nTITLE: Running Ant Design v5 Codemod Tool using npx or pnpm\nDESCRIPTION: Provides shell commands to execute the `antd5-codemod` tool on a specified source directory (`src`) using either `npx` or `pnpm`. This tool automates some of the code modifications required when migrating from Ant Design v4 to v5. Requires Node.js and either npx or pnpm.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/migration-v5.en-US.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Run directly through npx\nnpx -p @ant-design/codemod-v5 antd5-codemod src\n\n# Or run directly through pnpm\npnpm --package=@ant-design/codemod-v5 dlx antd5-codemod src\n```\n\n----------------------------------------\n\nTITLE: Referencing FloatButton Shape Demo (TSX)\nDESCRIPTION: HTML-like tag used within Markdown to reference an external TSX file ('./demo/shape.tsx') demonstrating different shapes (`circle`, `square`) of the Ant Design FloatButton component. The demo is intended to be displayed in an iframe with a width of 360px.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/float-button/index.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<code src=\"./demo/shape.tsx\" iframe=\"360\">Shape</code>\n```\n\n----------------------------------------\n\nTITLE: Setting Draggable Range Track in Ant Design (English)\nDESCRIPTION: This snippet provides instructions in English on how to make a range track draggable in Ant Design. It explains that setting the `range.draggableTrack` property enables the draggable functionality for the range track.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/slider/demo/draggableTrack.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## en-US\n\nMake range track draggable by setting `range.draggableTrack`.\n```\n\n----------------------------------------\n\nTITLE: Extracting Component Props using GetProps\nDESCRIPTION: Shows how to get the complete props type definition from an Ant Design component using the GetProps utility type. This example demonstrates getting the props type from Checkbox.Group.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/_util/index.en-US.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Checkbox } from 'antd';\nimport type { GetProps } from 'antd';\n\ntype CheckboxGroupType = GetProps<typeof Checkbox.Group>;\n```\n\n----------------------------------------\n\nTITLE: Importing Arrows Example\nDESCRIPTION: Reference to an example demonstrating switching arrows functionality, available from version 5.17.0\nSOURCE: https://github.com/ant-design/ant-design/blob/master/components/carousel/index.en-US.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"./demo/arrows.tsx\" version=\"5.17.0\">Arrows for switching</code>\n```\n\n----------------------------------------\n\nTITLE: Starting Umi Development Server\nDESCRIPTION: Command to start the Umi development server and view the application in a browser.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/use-with-umi.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Release Version and Date - 5.23.2\nDESCRIPTION: Version number and release date formatting for Ant Design 5.23.2\nSOURCE: https://github.com/ant-design/ant-design/blob/master/CHANGELOG.zh-CN.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.23.2\n\n`2025-01-20`\n```\n\n----------------------------------------\n\nTITLE: Running Code Style Checks\nDESCRIPTION: Commands to execute code linting and style checking.\nSOURCE: https://github.com/ant-design/ant-design/blob/master/docs/react/contributing.en-US.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn lint\n```"
  }
]