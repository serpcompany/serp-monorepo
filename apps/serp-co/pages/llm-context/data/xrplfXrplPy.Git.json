[
  {
    "owner": "xrplf",
    "repo": "xrpl-py.git",
    "content": "TITLE: Sending Payment Transaction on XRP Testnet using Python\nDESCRIPTION: Complete example demonstrating how to send a payment transaction between two test wallets on the XRP Ledger testnet. Shows wallet creation, balance checking, and transaction submission.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom xrpl.account import get_balance\nfrom xrpl.clients import JsonRpcClient\nfrom xrpl.models import Payment, Tx\nfrom xrpl.transaction import submit_and_wait\nfrom xrpl.wallet import generate_faucet_wallet\n\n# Create a client to connect to the test network\nclient = JsonRpcClient(\"https://s.altnet.rippletest.net:51234\")\n\n# Create two wallets to send money between on the test network\nwallet1 = generate_faucet_wallet(client, debug=True)\nwallet2 = generate_faucet_wallet(client, debug=True)\n\n# Both balances should be zero since nothing has been sent yet\nprint(\"Balances of wallets before Payment tx\")\nprint(get_balance(wallet1.address, client))\nprint(get_balance(wallet2.address, client))\n\n# Create a Payment transaction from wallet1 to wallet2\npayment_tx = Payment(\n    account=wallet1.address,\n    amount=\"1000\",\n    destination=wallet2.address,\n)\n\n# Submit the payment to the network and wait to see a response\npayment_response = submit_and_wait(payment_tx, client, wallet1)\nprint(\"Transaction was submitted\")\n\n# Create a \"Tx\" request to look up the transaction on the ledger\ntx_response = client.request(Tx(transaction=payment_response.result[\"hash\"]))\n\n# Check whether the transaction was actually validated on ledger\nprint(\"Validated:\", tx_response.result[\"validated\"])\n\n# Check balances after 1000 drops (.001 XRP) was sent from wallet1 to wallet2\nprint(\"Balances of wallets after Payment tx:\")\nprint(get_balance(wallet1.address, client))\nprint(get_balance(wallet2.address, client))\n```\n\n----------------------------------------\n\nTITLE: Submitting a Payment Transaction on the XRP Ledger using xrpl-py\nDESCRIPTION: This code snippet shows how to submit a payment transaction to the XRP Ledger and verify its validation using the xrpl-py library. It covers creating a wallet, preparing and signing a payment transaction, submitting it, and waiting for validation.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/snippets.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n../../snippets/submit_payment.py\n```\n\n----------------------------------------\n\nTITLE: Creating an Escrow on the XRP Ledger using xrpl-py\nDESCRIPTION: This code example demonstrates how to set up an escrow on the XRP Ledger using the xrpl-py library. It covers the process of creating and submitting an EscrowCreate transaction, including specifying conditions and time-based release.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/snippets.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n../../snippets/send_escrow.py\n```\n\n----------------------------------------\n\nTITLE: Submitting Payment Transaction on XRP Ledger\nDESCRIPTION: Example showing how to prepare, sign and submit a payment transaction using reliable transaction submission best practices.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom xrpl.models.transactions import Payment\nfrom xrpl.transaction import sign, submit_and_wait\nfrom xrpl.ledger import get_latest_validated_ledger_sequence\nfrom xrpl.account import get_next_valid_seq_number\n\ncurrent_validated_ledger = get_latest_validated_ledger_sequence(client)\n\n# prepare the transaction\nmy_tx_payment = Payment(\n    account=test_wallet.address,\n    amount=\"2200000\",\n    destination=\"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\",\n    last_ledger_sequence=current_validated_ledger + 20,\n    sequence=get_next_valid_seq_number(test_wallet.address, client),\n    fee=\"10\",\n)\n# sign the transaction\nmy_tx_payment_signed = sign(my_tx_payment,test_wallet)\n\n# submit the transaction\ntx_response = submit_and_wait(my_tx_payment_signed, client)\n```\n\n----------------------------------------\n\nTITLE: Finding the Best Trading Path on the XRP Ledger using xrpl-py\nDESCRIPTION: This snippet shows how to use the xrpl-py library to find the best path for trading between different currencies on the XRP Ledger. It includes querying available paths and analyzing the results to determine the most efficient trading route.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/snippets.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n../../snippets/paths.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Transactions in xrpl-py\nDESCRIPTION: This example demonstrates using Python's asyncio package with xrpl-py for asynchronous transaction submission. It shows how to prepare, sign, and submit a payment transaction using the library's async methods from the xrpl.asyncio module.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom xrpl.models.transactions import Payment\nfrom xrpl.asyncio.transaction import sign, submit_and_wait\nfrom xrpl.asyncio.ledger import get_latest_validated_ledger_sequence\nfrom xrpl.asyncio.account import get_next_valid_seq_number\nfrom xrpl.asyncio.clients import AsyncJsonRpcClient\n\nasync_client = AsyncJsonRpcClient(JSON_RPC_URL)\n\nasync def submit_sample_transaction():\n    current_validated_ledger = await get_latest_validated_ledger_sequence(async_client)\n\n    # prepare the transaction\n    # the amount is expressed in drops, not XRP\n    # see https://xrpl.org/basic-data-types.html#specifying-currency-amounts\n    my_tx_payment = Payment(\n        account=test_wallet.address,\n        amount=\"2200000\",\n        destination=\"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\",\n        last_ledger_sequence=current_validated_ledger + 20,\n        sequence=await get_next_valid_seq_number(test_wallet.address, async_client),\n        fee=\"10\",\n    )\n    # sign and submit the transaction\n    tx_response = await submit_and_wait(my_tx_payment_signed, async_client, test_wallet)\n\nasyncio.run(submit_sample_transaction())\n```\n\n----------------------------------------\n\nTITLE: Handling Partial Payments on the XRP Ledger using xrpl-py\nDESCRIPTION: This code example demonstrates how to handle partial payments on the XRP Ledger using the xrpl-py library. It covers creating and submitting a partial payment transaction, as well as interpreting the results to understand the actual amount delivered.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/snippets.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n../../snippets/partial_payment.py\n```\n\n----------------------------------------\n\nTITLE: Subscribing to XRPL Ledger Updates with WebSocket Client\nDESCRIPTION: This snippet shows how to subscribe to ledger updates using the WebSocket client in xrpl-py. It demonstrates creating a subscription to the ledger stream and receiving real-time notifications when new ledgers are validated.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom xrpl.clients import WebsocketClient\nurl = \"wss://s.altnet.rippletest.net/\"\nfrom xrpl.models import Subscribe, StreamParameter\nreq = Subscribe(streams=[StreamParameter.LEDGER])\n# NOTE: this code will run forever without a timeout, until the process is killed\nwith WebsocketClient(url) as client:\n    client.send(req)\n    for message in client:\n        print(message)\n# {'result': {'fee_base': 10, 'fee_ref': 10, 'ledger_hash': '7CD50477F23FF158B430772D8E82A961376A7B40E13C695AA849811EDF66C5C0', 'ledger_index': 18183504, 'ledger_time': 676412962, 'reserve_base': 20000000, 'reserve_inc': 5000000, 'validated_ledgers': '17469391-18183504'}, 'status': 'success', 'type': 'response'}\n# {'fee_base': 10, 'fee_ref': 10, 'ledger_hash': 'BAA743DABD168BD434804416C8087B7BDEF7E6D7EAD412B9102281DD83B10D00', 'ledger_index': 18183505, 'ledger_time': 676412970, 'reserve_base': 20000000, 'reserve_inc': 5000000, 'txn_count': 0, 'type': 'ledgerClosed', 'validated_ledgers': '17469391-18183505'}\n# {'fee_base': 10, 'fee_ref': 10, 'ledger_hash': 'D8227DAF8F745AE3F907B251D40B4081E019D013ABC23B68C0B1431DBADA1A46', 'ledger_index': 18183506, 'ledger_time': 676412971, 'reserve_base': 20000000, 'reserve_inc': 5000000, 'txn_count': 0, 'type': 'ledgerClosed', 'validated_ledgers': '17469391-18183506'}\n# {'fee_base': 10, 'fee_ref': 10, 'ledger_hash': 'CFC412B6DDB9A402662832A781C23F0F2E842EAE6CFC539FEEB287318092C0DE', 'ledger_index': 18183507, 'ledger_time': 676412972, 'reserve_base': 20000000, 'reserve_inc': 5000000, 'txn_count': 0, 'type': 'ledgerClosed', 'validated_ledgers': '17469391-18183507'}\n```\n\n----------------------------------------\n\nTITLE: Setting a Regular Key on the XRP Ledger using xrpl-py\nDESCRIPTION: This snippet illustrates the process of setting a regular key for an account on the XRP Ledger using xrpl-py. It includes generating a new key pair, preparing and submitting a SetRegularKey transaction, and verifying the transaction's success.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/snippets.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n../../snippets/set_regular_key.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Transaction with Auto-filled Fields in xrpl-py\nDESCRIPTION: This snippet demonstrates how to create a Payment transaction using xrpl-py's autofill feature, which automatically populates fee, sequence, and last_ledger_sequence fields. It includes signing the transaction and submitting it to the network.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom xrpl.models.transactions import Payment\nfrom xrpl.transaction import submit_and_wait, autofill_and_sign\n# prepare the transaction\n# the amount is expressed in drops, not XRP\n# see https://xrpl.org/basic-data-types.html#specifying-currency-amounts\nmy_tx_payment = Payment(\n    account=test_wallet.address,\n    amount=\"2200000\",\n    destination=\"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\"\n)\n\n# sign the transaction with the autofill method\n# (this will auto-populate the fee, sequence, and last_ledger_sequence)\nmy_tx_payment_signed = autofill_and_sign(my_tx_payment, client, test_wallet)\nprint(my_tx_payment_signed)\n# Payment(\n#     account='rMPUKmzmDWEX1tQhzQ8oGFNfAEhnWNFwz',\n#     transaction_type=<TransactionType.PAYMENT: 'Payment'>,\n#     fee='10',\n#     sequence=16034065,\n#     account_txn_id=None,\n#     flags=0,\n#     last_ledger_sequence=10268600,\n#     memos=None,\n#     signers=None,\n#     source_tag=None,\n#     signing_pub_key='EDD9540FA398915F0BCBD6E65579C03BE5424836CB68B7EB1D6573F2382156B444',\n#     txn_signature='938FB22AE7FE76CF26FD11F8F97668E175DFAABD2977BCA397233117E7E1C4A1E39681091CC4D6DF21403682803AB54CC21DC4FA2F6848811DEE10FFEF74D809',\n#     amount='2200000',\n#     destination='rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe',\n#     destination_tag=None,\n#     invoice_id=None,\n#     paths=None,\n#     send_max=None,\n#     deliver_min=None\n# )\n\n# submit the transaction\ntx_response = submit_and_wait(my_tx_payment_signed, client)\n```\n\n----------------------------------------\n\nTITLE: Managing XRP Ledger Wallets and Keys\nDESCRIPTION: Examples of creating wallets from seeds and using the testnet faucet, plus generating keypairs and addresses.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwallet_from_seed = xrpl.wallet.Wallet.from_seed(seed)\nprint(wallet_from_seed)\n\ntest_wallet = generate_faucet_wallet(client)\ntest_account = test_wallet.address\nprint(\"Classic address:\", test_account)\n```\n\n----------------------------------------\n\nTITLE: Converting Classic Addresses to X-Addresses in XRPL\nDESCRIPTION: This snippet demonstrates using the xrpl.core.addresscodec module to convert between XRPL address formats. It shows how to convert a classic address to an X-address format for the testnet, including destination tag information.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# convert classic address to x-address\nfrom xrpl.core import addresscodec\ntestnet_xaddress = (\n    addresscodec.classic_address_to_xaddress(\n        \"rMPUKmzmDWEX1tQhzQ8oGFNfAEhnWNFwz\",\n        tag=0,\n        is_test_network=True,\n    )\n)\nprint(testnet_xaddress)\n# T7QDemmxnuN7a52A62nx2fxGPWcRahLCf3qaswfrsNW9Lps\n```\n\n----------------------------------------\n\nTITLE: Looking Up a Transaction on the XRP Ledger using xrpl-py\nDESCRIPTION: This snippet demonstrates how to retrieve and display information about a specific transaction on the XRP Ledger using the xrpl-py library. It includes connecting to a testnet client, fetching transaction details, and printing the result.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/snippets.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n../../snippets/get_transaction.py\n```\n\n----------------------------------------\n\nTITLE: Creating JSON-RPC Client for XRP Ledger\nDESCRIPTION: Example of creating a network client to connect to the XRP Ledger using JsonRpcClient.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom xrpl.clients import JsonRpcClient\nJSON_RPC_URL = \"https://s.altnet.rippletest.net:51234\"\nclient = JsonRpcClient(JSON_RPC_URL)\n```\n\n----------------------------------------\n\nTITLE: Generating XRP Ledger Keypairs\nDESCRIPTION: Example of generating seed values and deriving keypairs and addresses for the XRP Ledger.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom xrpl.core import keypairs\nseed = keypairs.generate_seed()\npublic, private = keypairs.derive_keypair(seed)\ntest_account = keypairs.derive_classic_address(public)\nprint(\"Here's the public key:\")\nprint(public)\nprint(\"Here's the private key:\")\nprint(private)\nprint(\"Store this in a secure place!\")\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Fee from XRP Ledger\nDESCRIPTION: Example showing how to retrieve the current load-balanced transaction cost from the XRP Ledger network.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom xrpl.ledger import get_fee\nfee = get_fee(client)\nprint(fee)\n```\n\n----------------------------------------\n\nTITLE: Installing xrpl-py via pip\nDESCRIPTION: Command to install the xrpl-py package using pip. Requires Python 3.8 or later.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install xrpl-py\n```\n\n----------------------------------------\n\nTITLE: Running Rippled Docker Container for Testing\nDESCRIPTION: Docker command to run a standalone rippled node for integration testing\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit -p 5005:5005 -p 6006:6006 --volume $PWD/.ci-config/:/etc/opt/ripple/ --entrypoint bash rippleci/rippled:develop -c 'rippled -a'\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry and Dependencies\nDESCRIPTION: Commands for installing Poetry package manager and project dependencies\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://install.python-poetry.org | python3 -\\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing Pyenv and Setting Python Version\nDESCRIPTION: Commands for installing pyenv and configuring Python 3.11.6 as the global version\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pyenv\\npyenv install 3.11.6\\npyenv global 3.11.6\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting\nDESCRIPTION: Commands for running various types of tests and the code linter using Poetry\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry run poe lint\\npoetry run poe test FILE_PATHS\\npoetry run poe test_unit\\npoetry run poe test_integration\\npoetry run poe test_coverage\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: Commands for generating API documentation using Sphinx\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/\\npoetry run sphinx-apidoc -o source/ ../xrpl\\npoetry run make html\\ncd docs/_build/html/\\nopen index.html\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Git Tags for xrpl-py Release\nDESCRIPTION: These commands demonstrate how to create a signed, annotated Git tag for a release and how to push it to a remote repository. They also show how to list all tags in the repository.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s -a <tag-title> -m \"Optional Message describing the tag\"\ngit tag\ngit push <remote_name, e.g. upstream> tag <tag_title>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pyenv in Zsh Shell\nDESCRIPTION: Commands to add pyenv initialization to Zsh configuration and reload shell\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\\n. ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Documenting Base Transaction Model in Python\nDESCRIPTION: This snippet documents the base Transaction class from the xrpl.models.transactions.transaction module. It includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.transactions.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: xrpl.models.transactions.transaction.Transaction\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Specific Transaction Types in Python\nDESCRIPTION: This snippet documents all classes in the xrpl.models.transactions module, including members, undocumented members, inheritance information, and inherited members for each transaction type.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.transactions.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: xrpl.models.transactions\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Auto-documenting Base Request Class in XRPL Python\nDESCRIPTION: Sphinx documentation directive for the base Request model class from xrpl.models.requests.request module. Includes all members, undocumented members, inheritance information and inherited members.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.requests.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: xrpl.models.requests.request.Request\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Auto-documenting XRPL Request Types\nDESCRIPTION: Sphinx documentation directive for the xrpl.models.requests module, documenting all request type classes. Includes all members, undocumented members, inheritance information and inherited members.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.requests.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: xrpl.models.requests\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for XRPL Keypairs Module\nDESCRIPTION: RestructuredText directive that configures automatic documentation generation for the xrpl.core.keypairs module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.core.keypairs.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: xrpl.core.keypairs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Ledger Methods Documentation for XRPL Python Library\nDESCRIPTION: This code snippet uses Sphinx directives to automatically generate documentation for the xrpl.asyncio.ledger module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.asyncio.ledger.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: xrpl.asyncio.ledger\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx reStructuredText Directive for XRPL Account Methods Documentation\nDESCRIPTION: A Sphinx documentation directive that automatically generates documentation for the xrpl.asyncio.account module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.asyncio.account.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: xrpl.asyncio.account\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Orphaned Page Directive\nDESCRIPTION: Sphinx documentation directive to mark a page as orphaned, meaning it will not be included in the table of contents and warnings about it being unreachable will be suppressed.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.utils.txn_parser.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n```\n\n----------------------------------------\n\nTITLE: Marking Document as Orphan in reStructuredText\nDESCRIPTION: This directive indicates that the current document is an orphan, meaning it should not be included in the table of contents. It's commonly used in documentation systems like Sphinx to exclude certain pages from the main navigation.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.transactions.types.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:orphan:\n```\n\n----------------------------------------\n\nTITLE: Wallet Module Documentation Definition in RST\nDESCRIPTION: ReStructuredText directive that generates documentation for the xrpl.wallet module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.wallet.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: xrpl.wallet\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Directives for XRPL Currency Models Documentation\nDESCRIPTION: This RST code configures documentation generation for the xrpl.models.currencies module, including all its members, undocumented members, inheritance relationships, and inherited members. It also specifically documents the Currency data type.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.currencies.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: xrpl.models.currencies\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :inherited-members:\n\n.. autodata:: Currency\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for XRPL Python Wallet Module\nDESCRIPTION: Sphinx documentation configuration that automatically generates API documentation for the xrpl.asyncio.wallet module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.asyncio.wallet.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: xrpl.asyncio.wallet\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for xrpl.account module documentation\nDESCRIPTION: Sphinx directive that automatically generates documentation for the xrpl.account module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.account.rst#2025-04-21_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. automodule:: xrpl.account\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for XRPL Pseudo-Transaction Models\nDESCRIPTION: A reStructuredText directive that configures Sphinx to automatically generate documentation for the XRPL pseudo-transaction models module. The directive includes options to document all members, undocumented members, show inheritance relationships, and include inherited members.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.transactions.pseudo_transactions.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: xrpl.models.transactions.pseudo_transactions\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Orphan Page Directive in Sphinx RST\nDESCRIPTION: Sphinx documentation directive that marks the current page as an orphan, preventing it from being included in the navigation tree and suppressing warnings about the page not being in a toctree.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/modules.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Include for XRPL Transaction Module\nDESCRIPTION: A reStructuredText directive that generates documentation for the xrpl.transaction module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.transaction.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: xrpl.transaction\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for XRPL Address Codec Module\nDESCRIPTION: Sphinx directive to automatically generate documentation for the xrpl.core.addresscodec module. This configuration includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.core.addresscodec.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: xrpl.core.addresscodec\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting XRPL Python Ledger Methods with Sphinx\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the xrpl.ledger module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.ledger.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: xrpl.ledger\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for XRPL Python Utils Documentation\nDESCRIPTION: Sphinx directive configuration for automatically generating documentation of the xrpl.utils module. The configuration includes showing all members, undocumented members, and inheritance relationships within the module.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.utils.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: xrpl.utils\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for XRPL Amount Models in Python\nDESCRIPTION: This snippet uses Sphinx autodoc directives to automatically generate documentation for the xrpl.models.amounts module. It includes all members, undocumented members, and inherited members. It also specifically documents the Amount data type.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.models.amounts.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: xrpl.models.amounts\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :inherited-members:\n\n.. autodata:: Amount\n```\n\n----------------------------------------\n\nTITLE: Importing XRPL Constants Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the constants module from the XRPL Python library. The module contains global variables used throughout the library.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: xrpl.constants\n```\n\n----------------------------------------\n\nTITLE: Marking RST Page as Orphaned\nDESCRIPTION: This RST directive indicates that the current documentation page should be treated as an orphan, meaning it won't be included in the documentation's table of contents or navigation.\nSOURCE: https://github.com/xrplf/xrpl-py.git/blob/main/docs/source/xrpl.core.binarycodec.types.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n```"
  }
]