[
  {
    "owner": "infisical",
    "repo": "infisical",
    "content": "TITLE: Authenticating with Infisical CLI\nDESCRIPTION: Log in to Infisical using the CLI. For containerized environments, use the -i flag to avoid browser-based login.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login -i\n```\n\n----------------------------------------\n\nTITLE: Logging in to Infisical CLI\nDESCRIPTION: This command authenticates the Infisical CLI with the Infisical platform using email and password.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ infisical login\n```\n\n----------------------------------------\n\nTITLE: Deployment Example with envFrom for Managed Secrets\nDESCRIPTION: Complete example of a Kubernetes deployment that uses envFrom to inject all secrets from a managed secret as environment variables in the container.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        envFrom:\n        - secretRef:\n            name: managed-secret # <- name of managed secret\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on Alpine Linux\nDESCRIPTION: This set of commands installs prerequisites, adds the Infisical repository, and installs the CLI on Alpine Linux.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ apk add --no-cache bash sudo\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' \\\n| bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ apk update && sudo apk add infisical\n```\n\n----------------------------------------\n\nTITLE: Using envFrom to Expose Managed Secrets in Kubernetes\nDESCRIPTION: Configuration snippet showing how to use envFrom to expose all secrets from a managed secret to a container. This method makes all secrets available as environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nenvFrom:\n  - secretRef:\n      name: managed-secret # managed secret name\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables to Files\nDESCRIPTION: Export environment variables from Infisical to .env or YAML files for use in non-local development scenarios.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# export variables to a .env file (with export keyword)\ninfisical export --format=dotenv-export > .env\n\n# export variables to a YAML file\ninfisical export --format=yaml > secrets.yaml\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Universal Auth API\nDESCRIPTION: Makes a POST request to obtain an access token using client ID and secret credentials. Returns a token with expiration time that can be used for subsequent API calls.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/auth/universal-auth/login' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'clientSecret=<client_secret>' \\\n--data-urlencode 'clientId=<client_id>'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"accessToken\": \"...\",\n\"expiresIn\": 7200,\n\"tokenType\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Example InfisicalSecret CRD Resource in YAML\nDESCRIPTION: Defines a sample InfisicalSecret custom resource used to configure secret synchronization from an Infisical instance to a managed Kubernetes secret. Users can specify the authentication method, resynchronization interval, API endpoint, secret mapping template, and metadata propagation. Prerequisites include the Infisical operator installed in the cluster and relevant machine identity or service account references. Required inputs include machine identity information and target Kubernetes secret metadata; output is managed Kubernetes Secret(s) populated with Infisical secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\\nkind: InfisicalSecret\\nmetadata:\\n  name: infisicalsecret-sample\\n  labels:\\n    label-to-be-passed-to-managed-secret: sample-value\\n  annotations:\\n    example.com/annotation-to-be-passed-to-managed-secret: \\\"sample-value\\\"\\nspec:\\n  hostAPI: https://app.infisical.com/api\\n  resyncInterval: 10\\n  authentication:\\n    kubernetesAuth:\\n      identityId: <machine-identity-id>\\n      serviceAccountRef:\\n        name: <service-account-name>\\n        namespace: <service-account-namespace>\\n\\n  managedKubeSecretReferences:\\n    - secretName: managed-secret\\n      secretNamespace: default\\n      creationPolicy: \\\"Orphan\\\"\\n      template:\\n        includeAllSecrets: true\\n        data:\\n          NEW_KEY_NAME: \\\"{{ .KEY.SecretPath }} {{ .KEY.Value }}\\\"\\n          KEY_WITH_BINARY_VALUE: \\\"{{ .KEY.SecretPath }} {{ .KEY.Value }}\\\"\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Flow Diagram using Mermaid\nDESCRIPTION: Sequence diagram illustrating the JWT authentication workflow between Client Application, JWT Issuer, and Infisical, showing the complete authentication flow from JWT request to API access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/jwt-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client as Client Application\n    participant Issuer as JWT Issuer\n    participant Infis as Infisical\n\n    Client->>Issuer: Step 1: Request JWT token\n    Issuer-->>Client: Return signed JWT with claims\n\n    Note over Client,Infis: Step 2: Login Operation\n    Client->>Infis: Send signed JWT to /api/v1/auth/jwt-auth/login\n\n    Note over Infis: Step 3: JWT Validation\n    Infis->>Infis: Validate JWT signature using configured public keys or JWKS\n    Infis->>Infis: Verify required claims (aud, sub, iss)\n\n    Note over Infis: Step 4: Token Generation\n    Infis->>Client: Return short-lived access token\n\n    Note over Client,Infis: Step 5: Access Infisical API with Token\n    Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Universal Auth Token Export\nDESCRIPTION: Example of obtaining and exporting an access token using universal auth credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<client-id> --client-secret=<client-secret> --silent --plain)\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical PKI Issuer Resource (YAML & Bash)\nDESCRIPTION: This YAML file defines the Infisical PKI `Issuer` custom resource. It specifies the Infisical instance URL, either a CA ID (`caId`) or a Certificate Template ID (`certificateTemplateId`) for issuing certificates, and the Universal Authentication details (Client ID and reference to the Kubernetes Secret containing the Client Secret). The `kubectl apply` command creates this resource in the specified namespace. Replace placeholders like `<namespace_you_want_to_issue_certificates_in>`, `<ca_id>`, `<certificate_template_id>`, and `<client_id>`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: infisical-issuer.infisical.com/v1alpha1\nkind: Issuer\nmetadata:\n    name: issuer-infisical\n    namespace: <namespace_you_want_to_issue_certificates_in>\nspec:\n    url: \"https://app.infisical.com\" # the URL of your Infisical instance\n    caId: <ca_id> # the ID of the CA you want to use to issue certificates\n    certificateTemplateId: <certificate_template_id> # the ID of the certificate template you want to use to issue certificates against\n    authentication:\n        universalAuth:\n            clientId: <client_id> # the Client ID from step 1\n            secretRef: # reference to the Secret created in step 4\n                name: \"issuer-infisical-client-secret\"\n                key: \"clientSecret\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f infisical-issuer.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP IAM Authentication in Infisical Kubernetes CRD\nDESCRIPTION: Example showing how to configure GCP IAM authentication in an InfisicalSecret resource. This requires adding your machine identity ID and service account key file path to the authentication.gcpIamAuth fields and specifying the secrets scope with project slug, environment slug, and secrets path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n      gcpIamAuth:\n          identityId: <your-machine-identity-id>\n          serviceAccountKeyFilePath: \"/path/to-service-account-key-file-path.json\"\n\n          # secretsScope is identical to the secrets scope in the universalAuth field in this sample.\n          secretsScope:\n              projectSlug: your-project-slug\n              envSlug: prod\n              secretsPath: \"/path\"\n              recursive: true\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Infisical Secrets\nDESCRIPTION: Command to run a Docker container with environment variables from Infisical using process substitution. This example runs an Alpine container and displays the injected environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-pass-envs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --env-file <(infisical export --format=dotenv) alpine printenv\n```\n\n----------------------------------------\n\nTITLE: Setting or Updating Infisical Secrets\nDESCRIPTION: This command allows you to set or update secrets in your environment. It supports setting multiple secrets at once, loading secret values from files, and specifying the environment, path, and secret type.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets set <key1=value1> <key2=value2> <key3=@/path/to/file>...\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets set STRIPE_API_KEY=sjdgwkeudyjwe DOMAIN=example.com HASH=jebhfbwe SECRET_PEM_KEY=@secret.pem\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets set CERTIFICATE=@/path/to/certificate.pem\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets set email=\"\\@example.com\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets set DOMAIN=example.com --path=\"common/backend\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets set DOMAIN=example.com --type=personal\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets set --file=\"./.env\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Provider in Terraform\nDESCRIPTION: Initial setup to specify the Infisical provider in your Terraform configuration, which is required to interact with Infisical secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/terraform.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    infisical = {\n      source = \"infisical/infisical\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Universal Auth API Login Request Example\nDESCRIPTION: Sample cURL request demonstrating how to authenticate with Infisical's Universal Auth endpoint using Client ID and Client Secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/universal-auth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/auth/universal-auth/login' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'clientId=...' \\\n  --data-urlencode 'clientSecret=...'\n```\n\n----------------------------------------\n\nTITLE: Complete Dockerfile Example with Infisical Integration\nDESCRIPTION: This is a full Dockerfile example showing how to integrate Infisical CLI into an Alpine-based Docker image. It includes steps for installing Infisical, copying application files, and modifying the start command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Select your base image (based on your Linux distribution, e.g., Alpine, Debian, Ubuntu, etc.)\nFROM alpine\n\n# Add the Infisical CLI to your Dockerfile (choose the appropriate block based on your base image)\nRUN apk add --no-cache bash curl && curl -1sLf \\\n    'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' | bash \\\n    && apk add infisical\n\n# Install any additional dependencies or packages your service requires\n# RUN <additional commands for your service>\n\n# Copy your service files to the container\nCOPY . /app\n\n# Set the working directory\nWORKDIR /app\n\n# Modify the start command of your Dockerfile\nCMD [\"infisical\", \"run\", \"--\", \"npm run start\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Authentication in Infisical Kubernetes CRD\nDESCRIPTION: Example showing how to configure AWS IAM authentication in an InfisicalSecret resource. This requires adding your machine identity ID to the authentication.awsIamAuth.identityId field and specifying the secrets scope with project slug, environment slug, and secrets path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n      awsIamAuth:\n          identityId: <your-machine-identity-id>\n\n          # secretsScope is identical to the secrets scope in the universalAuth field in this sample.\n          secretsScope:\n              projectSlug: your-project-slug\n              envSlug: prod\n              secretsPath: \"/path\"\n              recursive: true\n  ...\n```\n\n----------------------------------------\n\nTITLE: Express Application with Infisical Integration\nDESCRIPTION: Complete Express application setup with Infisical SDK integration for secrets management. Demonstrates client initialization, authentication, and secret retrieval.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/node.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst { InfisicalSDK } = require(\"@infisical/sdk\");\n\n\nconst app = express();\n\nconst PORT = 3000;\n\nlet client;\n\nconst setupClient = () => {  \n\n  if (client) {\n    return;\n  }\n\n  const infisicalSdk = new InfisicalSDK({\n      siteUrl: \"your-infisical-instance.com\" // Optional, defaults to https://app.infisical.com\n  });\n\n  await infisicalSdk.auth().universalAuth.login({\n    clientId: \"<machine-identity-client-id>\",\n    clientSecret: \"<machine-identity-client-secret>\"\n  });\n\n  // If authentication was successful, assign the client\n  client = infisicalSdk;\n}\n\n\n\napp.get(\"/\", async (req, res) => {\n    \n\n    const name = await client.secrets().getSecret({\n      environment: \"dev\", // dev, staging, prod, etc.\n      projectId: \"<project-id>\",\n      secretPath: \"/\",\n      secretName: \"NAME\"\n    });\n    \n    res.send(`Hello! My name is: ${name.secretValue}`);\n});\n\napp.listen(PORT, async () => {\n  // initialize http server and Infisical\n    await setupClient();\n    console.log(`Server listening on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Infisical Node.js SDK with Express\nDESCRIPTION: Demonstrates how to use the Infisical Node SDK with an Express application. It initializes the client, retrieves a secret, and uses it in a route handler.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from \"express\";\n\nimport { InfisicalClient } from \"@infisical/sdk\";\n\nconst app = express();\n\nconst PORT = 3000;\n\nconst client = new InfisicalClient({\n    siteUrl: \"https://app.infisical.com\", // Optional, defaults to https://app.infisical.com\n    auth: {\n      universalAuth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        clientSecret: \"YOUR_CLIENT_SECRET\"\n      }\n    }\n});\n\napp.get(\"/\", async (req, res) => {\n  // Access the secret\n  \n    const name = await client.getSecret({\n        environment: \"dev\",\n        projectId: \"PROJECT_ID\",\n        path: \"/\",\n        type: \"shared\",\n        secretName: \"NAME\"\n    });\n\n    res.send(`Hello! My name is: ${name.secretValue}`);\n});\n\napp.listen(PORT, async () => {\n    // initialize client\n\n    console.log(`App listening on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI via npm (Bash)\nDESCRIPTION: Installs the Infisical CLI globally on the user's machine using the Node Package Manager (npm). This command makes the `infisical` executable available in the system path, allowing it to be run from any directory.\nSOURCE: https://github.com/infisical/infisical/blob/main/npm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @infisical/cli\n```\n\n----------------------------------------\n\nTITLE: Creating a cert-manager Certificate Resource (YAML)\nDESCRIPTION: This YAML file defines a cert-manager `Certificate` resource. It requests a certificate with the common name `certificate-by-issuer.example.com` from the `issuer-infisical` created earlier. It specifies the Kubernetes Secret (`certificate-by-issuer`) where the resulting key and certificate will be stored, the desired private key algorithm/size, certificate duration (48h), and renewal period (12h before expiry). Replace `<namespace_you_want_to_issue_certificates_in>`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n    name: certificate-by-issuer\n    namespace: <namespace_you_want_to_issue_certificates_in>\nspec:\n    commonName: certificate-by-issuer.example.com # the common name for the certificate\n    secretName: certificate-by-issuer # the name of the Kubernetes Secret to create and store the certificate and private key in\n    issuerRef:\n        name: issuer-infisical\n        group: infisical-issuer.infisical.com\n        kind: Issuer\n    privateKey: # the algorithm and key size to use\n        algorithm: ECDSA\n        size: 256\n    duration: 48h # the ttl for the certificate\n    renewBefore: 12h # the time before the certificate expiry that the certificate should be automatically renewed\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Infisical Go SDK\nDESCRIPTION: Demonstrates how to initialize the Infisical client, authenticate using Universal Auth, and retrieve a secret. It includes error handling and configuration options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"os\"\n  \"context\"\n  infisical \"github.com/infisical/go-sdk\"\n)\n\nfunc main() {\n\n\tclient := infisical.NewInfisicalClient(context.Background(), infisical.Config{\n\t\tSiteUrl: \"https://app.infisical.com\", // Optional, default is https://app.infisical.com\n    AutoTokenRefresh: true, // Wether or not to let the SDK handle the access token lifecycle. Defaults to true if not specified.\n\t})\n\n\t_, err := client.Auth().UniversalAuthLogin(\"YOUR_CLIENT_ID\", \"YOUR_CLIENT_SECRET\")\n\n\tif err != nil {\n\t\tfmt.Printf(\"Authentication failed: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tapiKeySecret, err := client.Secrets().Retrieve(infisical.RetrieveSecretOptions{\n\t\tSecretKey:   \"API_KEY\",\n\t\tEnvironment: \"dev\",\n\t\tProjectID:   \"YOUR_PROJECT_ID\",\n\t\tSecretPath:  \"/\",\n\t})\n\n\tif err != nil {\n\t\tfmt.Printf(\"Error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"API Key Secret: %v\", apiKeySecret)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands with Infisical\nDESCRIPTION: This snippet demonstrates how to pass secrets into multiple commands at once using the --command flag with the 'infisical run' command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical run --command=\"npm run build && npm run dev; more-commands...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP IAM Authentication for Infisical Java SDK\nDESCRIPTION: This snippet shows how to set up GCP IAM authentication for the Infisical Java SDK. It demonstrates creating client settings, authentication options, and configuring the GCP IAM auth method with a service account key file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  ClientSettings settings = new ClientSettings();\n  AuthenticationOptions authOptions = new AuthenticationOptions();\n  GCPIamAuthMethod authMethod = new GCPIamAuthMethod();\n\n  authMethod.setIdentityID(\"YOUR_MACHINE_IDENTITY_ID\");\n  authMethod.setServiceAccountKeyFilePath(\"./path/to/your/service-account-key.json\");\n\n  authOptions.setGcpIam(authMethod);\n  settings.setAuth(authOptions);\n\n  InfisicalClient client = new InfisicalClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical at Project Root\nDESCRIPTION: Commands to navigate to your project directory and initialize Infisical to prepare for secret fetching. This is required for Infisical to know which secrets to retrieve for your application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/spring-boot-maven.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Deleting Secrets from Infisical\nDESCRIPTION: Shows how to delete a secret using the deleteSecret method. Requires secret name, environment, and project ID as parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst deletedSecret = await client.deleteSecret({\n    secretName: \"API_KEY\",\n    environment: \"dev\",\n    projectId: \"PROJECT_ID\",\n    path: \"/\",\n    type: \"shared\"\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical CLI\nDESCRIPTION: The basic command to log in to Infisical CLI. This command prompts for email and password, generates a token, and stores it in the system Keyring for future CLI interactions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets with Infisical Java SDK\nDESCRIPTION: This snippet demonstrates how to authenticate, create an Infisical client, and retrieve a secret using the Java SDK. It includes setting up authentication options, creating a client, and fetching a secret with specific options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.app;\n\nimport com.infisical.sdk.InfisicalClient;\nimport com.infisical.sdk.schema.*;\n\npublic class Example {\n    public static void main(String[] args) {\n       \n        // Create the authentication settings for the client\n        ClientSettings settings = new ClientSettings();\n        AuthenticationOptions authOptions = new AuthenticationOptions();\n        UniversalAuthMethod authMethod = new UniversalAuthMethod();\n\n        authMethod.setClientID(\"YOUR_IDENTITY_ID\");\n        authMethod.setClientSecret(\"YOUR_CLIENT_SECRET\");\n\n        authOptions.setUniversalAuth(authMethod);\n        settings.setAuth(authOptions);\n\n        // Create a new Infisical Client\n        InfisicalClient client = new InfisicalClient(settings);\n\n        // Create the options for fetching the secret\n        GetSecretOptions options = new GetSecretOptions();\n        options.setSecretName(\"TEST\");\n        options.setEnvironment(\"dev\");\n        options.setProjectID(\"PROJECT_ID\");\n\n        // Fetch the sercret with the provided options\n        GetSecretResponseSecret secret = client.getSecret(options);\n\n        // Print the value\n        System.out.println(secret.getSecretValue());\n\n        // Important to avoid memory leaks!\n        // If you intend to use the client throughout your entire application, you can omit this line.\n        client.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Infisical Token\nDESCRIPTION: Bash command to run a Docker container with the Infisical token passed as an environment variable, allowing the container to authenticate and fetch secrets from Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --env INFISICAL_TOKEN=$INFISICAL_TOKEN [DOCKER-IMAGE]...\n```\n\n----------------------------------------\n\nTITLE: Authentication with Machine Identity (OIDC or Universal Auth)\nDESCRIPTION: Configure the Infisical provider using Machine Identity authentication, which is the recommended secure approach using either OIDC Auth or Universal Auth methods.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/terraform.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"infisical\" {\n  host          = \"https://app.infisical.com\" # Optional for cloud, required for self-hosted\n  auth {\n    universal { # or use oidc authentication method by providing an identity_id\n      client_id     = var.infisical_client_id\n      client_secret = var.infisical_client_secret\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Secrets with Infisical Python SDK\nDESCRIPTION: Demonstrates how to update an existing secret in Infisical using the updateSecret() method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclient.updateSecret(options=UpdateSecretOptions(\n    secret_name=\"API_KEY\",\n    secret_value=\"NEW_VALUE\",\n    environment=\"dev\",\n    project_id=\"PROJECT_ID\"\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with ES6 Syntax\nDESCRIPTION: Demonstrates how to import and configure the Infisical client using ES6 syntax, including setting up authentication and log level.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InfisicalClient, LogLevel } from \"@infisical/sdk\";\n\nconst client = new InfisicalClient({\n    auth: {\n      universalAuth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        clientSecret: \"YOUR_CLIENT_SECRET\"\n      }\n    },\n    logLevel: LogLevel.Error\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret for Universal Authentication via Bash\nDESCRIPTION: Shows how to quickly generate a Kubernetes secret containing Infisical machine identity credentials, needed for universal machine identity authentication. Requires the kubectl CLI, a Kubernetes cluster, and appropriate identity values for 'clientId' and 'clientSecret'. The command takes user-supplied identity credentials as parameters and results in a new Kubernetes secret named 'universal-auth-credentials', which is referenced by the InfisicalSecret resource for authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic universal-auth-credentials --from-literal=clientId=\\\"<your-identity-client-id>\\\" --from-literal=clientSecret=\\\"<your-identity-client-secret>\\\"\n```\n\n----------------------------------------\n\nTITLE: Automatically Reloading Command on Secret Changes\nDESCRIPTION: This snippet shows how to use the --watch flag to automatically reload the command when secrets change in the Infisical project. This feature is intended for development purposes and not recommended for production use.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --watch -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on MacOS using Homebrew\nDESCRIPTION: This command installs the Infisical CLI on MacOS using the Homebrew package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ brew install infisical/get-cli/infisical\n```\n\n----------------------------------------\n\nTITLE: Deleting Infisical Secrets\nDESCRIPTION: This command allows you to delete secrets by their name(s). It supports specifying multiple secrets to delete at once and includes flags for environment and path selection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets delete <keyName1> <keyName2>...\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets delete STRIPE_API_KEY DOMAIN HASH\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets delete <keyName1> <keyName2>... --path=\"/\"\n```\n\n----------------------------------------\n\nTITLE: Installing Secrets Store CSI Driver via Helm (Bash)\nDESCRIPTION: This command installs the Secrets Store CSI driver into the `kube-system` namespace using Helm. It sets crucial parameters: `tokenRequests[0].audience=infisical` (required for Infisical authentication), `enableSecretRotation=true` for automatic secret updates, `rotationPollInterval=2m` to check for updates every 2 minutes, and `syncSecret.enabled=true` to sync secrets to Kubernetes Secret objects as well (optional usage). Requires Helm and prior addition of the driver's repository.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install csi secrets-store-csi-driver/secrets-store-csi-driver \\\n--namespace=kube-system \\\n--set \"tokenRequests[0].audience=infisical\" \\\n--set enableSecretRotation=true \\\n--set rotationPollInterval=2m \\\n--set \"syncSecret.enabled=true\" \\\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Token Reviewer Service Account in YAML\nDESCRIPTION: This YAML defines a Kubernetes ServiceAccount named 'infisical-token-reviewer' in the default namespace. This service account will be used by Infisical to authenticate with the Kubernetes API Server.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: infisical-token-reviewer\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Scanning Git Changes for Secrets using Infisical CLI\nDESCRIPTION: This snippet demonstrates how to use the 'infisical scan git-changes' command to scan for secrets in uncommitted code changes. It also shows how to use the --verbose flag for more detailed output.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/scan-git-changes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan git-changes\n\n# Display the full secret findings\ninfisical scan git-changes --verbose\n```\n\n----------------------------------------\n\nTITLE: Starting Flask Application\nDESCRIPTION: Command to run the Flask application on the local development server.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/python.mdx#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nflask run\n```\n\n----------------------------------------\n\nTITLE: Updating Secret with Infisical C# Client\nDESCRIPTION: Demonstrates updating an existing secret in Infisical using the UpdateSecret method. Requires environment, project ID, secret name, and new value parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new UpdateSecretOptions {\n    Environment = \"dev\",\n    ProjectId = \"PROJECT_ID\",\n\n    SecretName = \"SECRET_TO_UPDATE\",\n    SecretValue = \"NEW VALUE\"\n};\n\nvar updatedSecret = infisical.UpdateSecret(options);\n```\n\n----------------------------------------\n\nTITLE: Getting Secrets with Infisical Python SDK\nDESCRIPTION: Demonstrates how to fetch a secret from Infisical using the getSecret() method. Returns either a shared or personal secret based on availability.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsecret = client.getSecret(options=GetSecretOptions(\n    environment=\"dev\",\n    project_id=\"PROJECT_ID\",\n    secret_name=\"API_KEY\"\n))\nvalue = secret.secret_value # get its value\n```\n\n----------------------------------------\n\nTITLE: Executing Infisical Run Command with Single Application Command\nDESCRIPTION: This snippet demonstrates how to use the 'infisical run' command to inject secrets into a single application command. It shows the basic syntax and provides an example using npm.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run [options] -- [your application start command]\n\n# Example\ninfisical run [options] -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a Flask Project\nDESCRIPTION: Commands to navigate to the project directory and initialize Infisical for a Flask application. This sets up the connection between your Flask app and Infisical for environment variable management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/flask.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Infisical Token Variables for Machine Identity\nDESCRIPTION: Example Docker Compose configuration that sets up environment variables for multiple services using machine identity tokens. Each service is configured with a unique INFISICAL_TOKEN variable that will be populated from the host environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-compose.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example Docker Compose file\nservices:\n  web:\n    build: .\n    image: example-service-1\n    environment:\n      - INFISICAL_TOKEN=${INFISICAL_TOKEN_SERVICE_A}\n\n  api:\n    build: .\n    image: example-service-2\n    environment:\n      - INFISICAL_TOKEN=${INFISICAL_TOKEN_SERVICE_B}\n\n```\n\n----------------------------------------\n\nTITLE: Project Creation API Response Structure\nDESCRIPTION: Sample response from the project creation API showing the created project with configured environments.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/project-templates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"project\": {\n        \"id\": \"<project-id>\",\n        \"environments\": \"[...]\", // configured environments\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI via Homebrew on MacOS\nDESCRIPTION: Commands to install and update Infisical CLI using the Homebrew package manager on MacOS.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install infisical/get-cli/infisical\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew update && brew upgrade infisical\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical CLI in GitLab CI/CD Pipeline\nDESCRIPTION: This YAML configuration demonstrates how to set up a GitLab CI/CD pipeline that installs and uses the Infisical CLI to securely inject secrets into your build process. It defines multiple pipeline stages and shows how to install the CLI and use it to run a build command with access to the secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cicd/gitlab.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: ubuntu\n\nstages:\n  - build\n  - test\n  - deploy\n\nbuild-job:\n  stage: build\n  script:\n    - apt update && apt install -y curl\n    - curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | bash\n    - apt-get update && apt-get install -y infisical\n    - infisical run -- npm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Secrets with Go SDK\nDESCRIPTION: Shows how to create a new secret in Infisical using the Go SDK. Requires project ID, environment, secret key and value parameters, with optional comment field.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nsecret, err := client.Secrets().Create(infisical.CreateSecretOptions{\n  ProjectID:   \"PROJECT_ID\",\n  Environment: \"dev\",\n  SecretKey:     \"NEW_SECRET_KEY\",\n  SecretValue:   \"NEW_SECRET_VALUE\",\n  SecretComment: \"This is a new secret\",\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Certificate Hierarchy in PKI System\nDESCRIPTION: ASCII diagram showing the hierarchical structure of the PKI system within an organization, illustrating the relationship between Root CA, Client CA, and Gateway CA with their respective certificate issuance responsibilities.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/gateways/gateway-security.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRoot CA (Organization Specific)\n├── Client CA\n│   └── Client Certificates (Cloud Components)\n└── Gateway CA\n    └── Gateway Certificates (Gateway Instances)\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Folder Path for Secret Injection\nDESCRIPTION: This snippet demonstrates how to use the --path flag to indicate which project folder secrets will be injected from when using the 'infisical run' command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical run --path=\"/nextjs\" -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI in Alpine Linux Dockerfile\nDESCRIPTION: This snippet shows how to add the Infisical CLI to a Dockerfile using Alpine Linux as the base image. It installs necessary dependencies and the Infisical CLI using apk package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk add --no-cache bash curl && curl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' | bash \\\n&& apk add infisical\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod to Mount Secrets via CSI Volume (YAML)\nDESCRIPTION: This Kubernetes Pod definition demonstrates how to mount secrets managed by a SecretProviderClass into a container. It defines a volume (`secrets-store-inline`) using the `secrets-store.csi.k8s.io` driver and references the `SecretProviderClass` (`my-infisical-app-csi-provider`). The volume is then mounted into the container's filesystem at the specified `mountPath` (`/mnt/secrets-store`). The secrets defined in the SecretProviderClass will appear as files within this directory.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-secrets-store\n  labels:\n    app: nginx\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n      volumeMounts:\n        - name: secrets-store-inline\n          mountPath: \"/mnt/secrets-store\"\n          readOnly: true\n  volumes:\n    - name: secrets-store-inline\n      csi:\n        driver: secrets-store.csi.k8s.io\n        readOnly: true\n        volumeAttributes:\n          secretProviderClass: \"my-infisical-app-csi-provider\"\n```\n\n----------------------------------------\n\nTITLE: Basic Infisical Export Command\nDESCRIPTION: The main command syntax for exporting Infisical secrets\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/export.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical export [options]\n```\n\n----------------------------------------\n\nTITLE: Volume Mount Configuration for Managed Secrets\nDESCRIPTION: Configuration snippet showing how to mount a secrets volume to a specific path in the container's filesystem, making the secret files accessible to the application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - name: secrets-volume-name\n    mountPath: /etc/secrets\n    readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Branch to Environment Mapping\nDESCRIPTION: Example configuration demonstrating how to map GitHub branches to specific Infisical environments. This enables automatic environment selection based on the current Git branch.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/project-config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaceId\": \"63ee5410a45f7a1ed39ba118\",\n  \"gitBranchToEnvironmentMapping\": {\n    \"branchName\": \"dev\",\n    \"anotherBranchName\": \"staging\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deployment Example with Automatic Redeployment Enabled\nDESCRIPTION: Complete example of a Kubernetes deployment with automatic redeployment enabled. When the managed secret changes, the deployment will be automatically rolled out with the updated secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\n  annotations: \n    secrets.infisical.com/auto-reload: \"true\" # <- redeployment annotation\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        envFrom:\n        - secretRef:\n            name: managed-secret\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Go SDK Client\nDESCRIPTION: Shows how to create and configure an Infisical client instance with various options such as site URL, auto token refresh, and custom headers.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := infisical.NewInfisicalClient(context.Background(), infisical.Config{\n\t\tSiteUrl: \"https://app.infisical.com\", // Optional, default is https://api.infisical.com\n\t})\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Kubernetes Secrets with Infisical Operator\nDESCRIPTION: Example of how to configure managed Kubernetes secrets using the Infisical operator. This snippet demonstrates the use of managedKubeSecretReferences to specify the name, namespace, and creation policy for the managed secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nmanagedKubeSecretReferences:\n  - secretName: managed-secret\n    secretNamespace: default\n    creationPolicy: \"Orphan\"\n```\n\n----------------------------------------\n\nTITLE: Applying Infisical Service Account in Bash\nDESCRIPTION: This Bash command applies the YAML configuration to create the Infisical service account in the default namespace of the Kubernetes cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f infisical-service-account.yaml -n default\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Agent with YAML\nDESCRIPTION: Configuration file for Infisical agent that defines authentication method, sink location, and secret template settings. Includes settings for universal auth, file sink type, and template configuration with polling and execution options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ninfisical:\n  address: \"https://app.infisical.com\"\nauth:\n  type: \"universal-auth\"\n  config:\n    client-id: \"./client-id\"\n    client-secret: \"./client-secret\"\n    remove_client_secret_on_read: false\nsinks:\n  - type: \"file\"\n    config:\n      path: \"/some/path/to/store/access-token/file-name\"\ntemplates:\n  - source-path: my-dot-ev-secret-template\n    destination-path: /some/path/.env\n    config:\n      polling-interval: 60s\n      execute:\n        timeout: 30\n        command: ./reload-app.sh\n```\n\n----------------------------------------\n\nTITLE: Deleting Secrets with Go SDK\nDESCRIPTION: Shows how to delete a secret in Infisical using the Go SDK. Requires project ID, environment, and secret key parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nsecret, err := client.Secrets().Delete(infisical.DeleteSecretOptions{\n  ProjectID:   \"PROJECT_ID\",\n  Environment: \"dev\",\n  SecretKey:   \"SECRET_KEY\",\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Infisical Secret Management in Jenkins Pipeline\nDESCRIPTION: Example groovy pipeline script demonstrating how to use the Infisical plugin in a Jenkins pipeline. This script shows how to configure the withInfisical wrapper to fetch specific secrets from different paths in your Infisical project, with options for including imports and marking secrets as optional.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cicd/jenkins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nnode {\n    withInfisical(\n        configuration: [\n            infisicalCredentialId: 'YOUR_CREDENTIAL_ID',\n            infisicalEnvironmentSlug: 'PROJECT_ENV_SLUG', \n            infisicalProjectSlug: 'PROJECT_SLUG', \n            infisicalUrl: 'https://app.infisical.com' // Change this to your Infisical instance URL if you aren't using Infisical Cloud.\n        ], \n        infisicalSecrets: [\n            infisicalSecret(\n                includeImports: true, \n                path: '/', \n                secretValues: [\n                    [infisicalKey: 'DATABASE_URL'],\n                    [infisicalKey: \"API_URL\"],\n                    [infisicalKey: 'THIS_KEY_MIGHT_NOT_EXIST', isRequired: false],\n                ]\n            )\n        ]\n    ) {\n        // Code runs here\n        sh \"printenv\"\n    }     \n}\n```\n\n----------------------------------------\n\nTITLE: Using Infisical Run with Watch Flag\nDESCRIPTION: This snippet demonstrates how to use the --watch flag with the 'infisical run' command. This flag enables automatic restarting of the command when secret changes occur in the Infisical project.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical run --watch -- printenv\n```\n\n----------------------------------------\n\nTITLE: Running a Next.js App with Infisical Injected Variables (Bash)\nDESCRIPTION: This snippet demonstrates how to start a Next.js application using the Infisical CLI to inject environment variables. The `infisical run` command precedes the application's usual start command (e.g., `npm run dev`). Note that client-side variables in Next.js need to be prefixed with `NEXT_PUBLIC_`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on Alpine Linux\nDESCRIPTION: Commands to install Infisical CLI on Alpine Linux, including prerequisites and repository setup.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napk add --no-cache bash sudo\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' \\\n| bash\n```\n\nLANGUAGE: bash\nCODE:\n```\napk update && sudo apk add infisical\n```\n\n----------------------------------------\n\nTITLE: Creating New Secret in Infisical\nDESCRIPTION: Creates a new secret with specified name and value in the given project and environment. Supports path specification and secret type selection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nCreateSecretOptions createOptions = new CreateSecretOptions();\ncreateOptions.setSecretName(\"NEW_SECRET\");\ncreateOptions.setEnvironment(\"dev\");\ncreateOptions.setProjectID(\"PROJECT_ID\");\ncreateOptions.setSecretValue(\"SOME SECRET VALUE\");\ncreateOptions.setPath(\"/\"); // Default\ncreateOptions.setType(\"shared\"); // Default\n\nCreateSecretResponseSecret newSecret = client.createSecret(createOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring InfisicalPushSecret CRD in YAML\nDESCRIPTION: Defines the InfisicalPushSecret CRD configuration for pushing secrets from Kubernetes to Infisical. It includes options for resync interval, update and deletion policies, destination details, and multiple authentication methods.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalPushSecret\nmetadata:\n  name: infisical-push-secret-demo\nspec:\n  resyncInterval: 1m\n  hostAPI: https://app.infisical.com/api\n\n  # Optional, defaults to no replacement.\n  updatePolicy: Replace # If set to replace, existing secrets inside Infisical will be replaced by the value of the PushSecret on sync.\n\n  # Optional, defaults to no deletion.\n  deletionPolicy: Delete # If set to delete, the secret(s) inside Infisical managed by the operator, will be deleted if the InfisicalPushSecret CRD is deleted.\n\n  destination:\n    projectId: <project-id>\n    environmentSlug: <env-slug>\n    secretsPath: <secret-path>\n\n  push:\n    secret:\n      secretName: push-secret-demo # Secret CRD\n      secretNamespace: default\n\n  # Only have one authentication method defined or you are likely to run into authentication issues.\n  # Remove all except one authentication method.\n  authentication:\n    awsIamAuth:\n      identityId: <machine-identity-id>\n    azureAuth:\n      identityId: <machine-identity-id>\n    gcpIamAuth:\n      identityId: <machine-identity-id>\n      serviceAccountKeyFilePath: </path-to-service-account-key-file.json>\n    gcpIdTokenAuth:\n      identityId: <machine-identity-id>\n    kubernetesAuth:\n      identityId: <machine-identity-id>\n      serviceAccountRef:\n        name: <secret-name>\n        namespace: <secret-namespace>\n    universalAuth:\n      credentialsRef:\n        secretName: <secret-name> # universal-auth-credentials\n        secretNamespace: <secret-namespace> # default\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical Client and Retrieving Secrets in Flask (Python)\nDESCRIPTION: This snippet demonstrates how to initialize the Infisical client with universal authentication and use it to retrieve a secret in a Flask application. It sets up a route that responds with a greeting including the secret value.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod\n\napp = Flask(__name__)\n\nclient = InfisicalClient(ClientSettings(\n    auth=AuthenticationOptions(\n      universal_auth=UniversalAuthMethod(\n        client_id=\"CLIENT_ID\",\n        client_secret=\"CLIENT_SECRET\",\n      )\n    )\n))\n\n@app.route(\"/\")\ndef hello_world():\n    # access value\n\n    name = client.getSecret(options=GetSecretOptions(\n       environment=\"dev\",\n       project_id=\"PROJECT_ID\",\n       secret_name=\"NAME\"\n    ))\n\n    return f\"Hello! My name is: {name.secret_value}\"\n```\n\n----------------------------------------\n\nTITLE: Infisical CLI Command Overview\nDESCRIPTION: Core commands for authentication, project initialization, environment variable injection, and credential storage management in Infisical CLI.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/commands.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command | Description                                                          |\n| ------- | -------------------------------------------------------------------- |\n| `login` | Used to authenticate and set the logged in user.                     |\n| `init`  | Used to link a local project to the platform.                        |\n| `run`   | Used to inject envars from the platform into an application process. |\n| `vault` | Used to manage where your login credentials are stored at rest       |\n```\n\n----------------------------------------\n\nTITLE: Deleting a Lease for Dynamic Secret in Infisical\nDESCRIPTION: This command deletes a lease for a dynamic secret. It supports flags for environment selection, project folder specification, and authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/dynamic-secrets.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical dynamic-secrets lease delete <lease-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease delete <lease-id> --path=\"/\" --env=dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease delete <lease-id> --projectId=<project-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease delete <lease-id> --token=<token>\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Token Secret\nDESCRIPTION: YAML configuration to create a long-lived service account JWT token using a Kubernetes secret resource.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: infisical-auth-token\n  annotations:\n    kubernetes.io/service-account.name: \"infisical-auth\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical with a Bun project\nDESCRIPTION: Commands to navigate to your project directory and initialize Infisical for your Bun application. This sets up the necessary configuration to connect your Bun project with Infisical for secrets management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/bun.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Configuring InfisicalDynamicSecret CRD in YAML\nDESCRIPTION: A sample YAML configuration for the InfisicalDynamicSecret CRD that creates a dynamic secret lease in Infisical and syncs it to a Kubernetes cluster. It includes parameters for host API, dynamic secret details, lease policies, TTL, managed secret references, and various authentication methods.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalDynamicSecret\nmetadata:\n  name: infisicaldynamicsecret\nspec:\n  hostAPI: https://app.infisical.com/api # Optional, defaults to https://app.infisical.com/api\n\n  dynamicSecret:\n    secretName: <dynamic-secret-name>\n    projectId: <project-id>\n    secretsPath: <path/to/dynamic-secret> # Root directory is /\n    environmentSlug: <env-slug>\n\n  # Lease revocation policy defines what should happen to leases created by the operator if the CRD is deleted.\n  # If set to \"Revoke\", leases will be revoked when the InfisicalDynamicSecret CRD is deleted.\n  leaseRevocationPolicy: Revoke\n\n  # Lease TTL defines how long the lease should last for the dynamic secret.\n  # This value must be less than 1 day, and if a max TTL is defined on the dynamic secret, it must be below the max TTL.\n  leaseTTL: 1m\n\n  # A reference to the secret that the dynamic secret lease should be stored in.\n  # If the secret doesn't exist, it will automatically be created.\n  managedSecretReference:\n    secretName: <secret-name>\n    secretNamespace: default # Must be the same namespace as the InfisicalDynamicSecret CRD.\n    creationPolicy: Orphan\n\n  # Only have one authentication method defined or you are likely to run into authentication issues.\n  # Remove all except one authentication method.\n  authentication:\n    awsIamAuth:\n      identityId: <machine-identity-id>\n    azureAuth:\n      identityId: <machine-identity-id>\n    gcpIamAuth:\n      identityId: <machine-identity-id>\n      serviceAccountKeyFilePath: </path-to-service-account-key-file.json>\n    gcpIdTokenAuth:\n      identityId: <machine-identity-id>\n    kubernetesAuth:\n      identityId: <machine-identity-id>\n      serviceAccountRef:\n        name: <secret-name>\n        namespace: <secret-namespace>\n    universalAuth:\n      credentialsRef:\n        secretName: <secret-name> # universal-auth-credentials\n        secretNamespace: <secret-namespace> # default\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CSI Provider via Helm (Bash)\nDESCRIPTION: This command installs the Infisical CSI provider using its Helm chart. It assumes the Secrets Store CSI driver is already installed and the Infisical Helm repository has been added and updated. Requires Helm.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install infisical-csi-provider infisical-helm-charts/infisical-csi-provider\n```\n\n----------------------------------------\n\nTITLE: Deployment Example with Volume-Mounted Managed Secrets\nDESCRIPTION: Complete example of a Kubernetes deployment that uses volumes to mount managed secrets as files in the container filesystem, making them accessible at the specified path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.14.2\n          volumeMounts:\n            - name: secrets-volume-name\n              mountPath: /etc/secrets\n              readOnly: true\n          ports:\n            - containerPort: 80\n      volumes:\n        - name: secrets-volume-name\n          secret:\n            secretName: managed-secret # <- managed secrets\n```\n\n----------------------------------------\n\nTITLE: Creating Long-lived Service Account JWT Token in YAML\nDESCRIPTION: This YAML defines a Kubernetes Secret of type 'kubernetes.io/service-account-token' to create a long-lived JWT token for the Infisical token reviewer service account.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: infisical-token-reviewer-token\n  annotations:\n    kubernetes.io/service-account.name: \"infisical-token-reviewer\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Managed Secret Creation\nDESCRIPTION: Command to verify that the managed secret has been successfully created in the specified namespace. Infisical secrets are synced every minute by default.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n# Verify managed secret is created\nkubectl get secrets -n <namespace of managed secret>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Infisical C# SDK\nDESCRIPTION: This snippet demonstrates how to use the Infisical C# SDK to retrieve a secret from a specific project and environment. It includes setting up the client with authentication and fetching a secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Infisical.Sdk;\n\nnamespace Example\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n          ClientSettings settings = new ClientSettings\n          {\n            Auth = new AuthenticationOptions\n            {\n              UniversalAuth = new UniversalAuthMethod\n              {\n                ClientId = \"your-client-id\",\n                ClientSecret = \"your-client-secret\"\n              }\n            }\n          };\n\n\n          var infisicalClient = new InfisicalClient(settings);\n\n            var getSecretOptions = new GetSecretOptions\n            {\n                SecretName = \"TEST\",\n                ProjectId = \"PROJECT_ID\",\n                Environment = \"dev\",\n            };\n            var secret = infisicalClient.GetSecret(getSecretOptions);\n\n\n            Console.WriteLine($\"The value of secret '{secret.SecretKey}', is: {secret.SecretValue}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Token Authentication in Infisical Kubernetes CRD\nDESCRIPTION: Example showing how to configure service token authentication in an InfisicalSecret resource. This requires referencing a Kubernetes secret containing the Infisical service token and specifying the environment slug and secrets path in the secretsScope field.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n    serviceToken:\n      serviceTokenSecretReference:\n        secretName: service-token # <-- name of the Kubernetes secret that stores our service token\n        secretNamespace: option # <-- namespace of the Kubernetes secret that stores our service token\n      secretsScope:\n        envSlug: <env-slug> # \"dev\", \"staging\", \"prod\", etc..\n        secretsPath: <secrets-path> # Root is \"/\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with Kubernetes Auth\nDESCRIPTION: Demonstrates the configuration of the Infisical client using Kubernetes authentication, including optional service account token path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new InfisicalClient({\n  auth: {\n    kubernetes: {\n      identityId: \"YOUR_IDENTITY_ID\",\n      serviceAccountTokenPathEnvName: \"/var/run/secrets/kubernetes.io/serviceaccount/token\" // Optional\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI - Various OS Commands\nDESCRIPTION: Installation commands for Infisical CLI across different operating systems including MacOS, Windows, Alpine, RedHat/CentOS, Debian/Ubuntu, and Arch Linux\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/nextjs-vercel.mdx#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ brew install infisical/get-cli/infisical\n```\n\nLANGUAGE: console\nCODE:\n```\n$ scoop bucket add org https://github.com/Infisical/scoop-infisical.git\n$ scoop install infisical\n```\n\nLANGUAGE: console\nCODE:\n```\n$ apk add --no-cache bash sudo\n$ curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' | bash\n$ apk update && sudo apk add infisical\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Infisical Secrets\nDESCRIPTION: This command allows you to selectively print requested secrets by name. It supports flags for environment selection, plain output, and silent mode for use in scripts or CI/CD pipelines.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets get <secret-name-a> <secret-name-b> ...\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets get DOMAIN\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets get DOMAIN PORT\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets get FOO --plain\n```\n\nLANGUAGE: bash\nCODE:\n```\nAPI_KEY=$(infisical secrets get FOO --plain --silent)\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets get DOMAIN --raw-value\n```\n\n----------------------------------------\n\nTITLE: Export Command Usage Examples\nDESCRIPTION: Various examples of using the export command with different output formats and options\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/export.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical export\n\n# Export variables to a .env file\ninfisical export > .env\n\n# Export variables to a .env file (with export keyword)\ninfisical export --format=dotenv-export > .env\n\n# Export variables to a CSV file\ninfisical export --format=csv > secrets.csv\n\n# Export variables to a JSON file\ninfisical export --format=json > secrets.json\n\n# Export variables to a YAML file\ninfisical export --format=yaml > secrets.yaml\n\n# Render secrets using a custom template file\ninfisical export --template=<path to template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical for a Next.js Project (Bash)\nDESCRIPTION: This snippet shows the commands to initialize Infisical within a Next.js project. First, navigate to the root directory of the project using `cd`, then run `infisical init` to start the setup process. Requires the Infisical CLI to be installed.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Creating Secrets with Infisical Python SDK\nDESCRIPTION: Shows how to create a new secret in Infisical using the createSecret() method, requiring secret name, value, environment, and project ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napi_key = client.createSecret(options=CreateSecretOptions(\n    secret_name=\"API_KEY\",\n    secret_value=\"Some API Key\",\n    environment=\"dev\",\n    project_id=\"PROJECT_ID\"\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Agent YAML for ECS Sidecar\nDESCRIPTION: YAML configuration file for the Infisical Agent that connects to Infisical Cloud using AWS IAM authentication. It saves access tokens to a file and renders secrets from a specified project using a template.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ecs-with-agent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninfisical:\n  address: https://app.infisical.com\n  exit-after-auth: true\nauth:\n  type: aws-iam\nsinks:\n  - type: file\n    config:\n      path: /infisical-agent/access-token\ntemplates:\n  - template-content: |\n      {{- with secret \"202f04d7-e4cb-43d4-a292-e893712d61fc\" \"dev\" \"/\" }}\n      {{- range . }}\n      {{ .Key }}={{ .Value }}\n      {{- end }}\n      {{- end }}\n    destination-path: /infisical-agent/secrets\n```\n\n----------------------------------------\n\nTITLE: Issuing SSH Credentials with Infisical CLI\nDESCRIPTION: This command issues SSH credentials (certificate, public key, and private key) against a certificate template. It supports various flags for customization and can automatically add the credentials to the SSH agent.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/ssh.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical ssh issue-credentials --certificateTemplateId=<certificate-template-id> --principals=<principals> --addToAgent\n```\n\n----------------------------------------\n\nTITLE: Fetching OIDC Token from GitHub Workflow Environment in YAML\nDESCRIPTION: This YAML steps section exemplifies how to collect an OIDC JWT in a GitHub Actions job using cURL and environment variables. It runs a shell script, leveraging the variables 'ACTIONS_ID_TOKEN_REQUEST_URL' and 'ACTIONS_ID_TOKEN_REQUEST_TOKEN' (injected by GitHub), to request a token and then expose it in the environment for downstream workflow steps. Dependencies include cURL and jq on the runner. Inputs are GitHub's automatically provided OIDC variables; the output is the JWT stored in the 'TOKEN' environment variable. This technique enables seamless integration with Infisical or other OIDC-supporting APIs.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/github.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - name: Request OIDC Token\n      run: |\n        echo \"Requesting OIDC token...\"\n        TOKEN=$(curl -s -H \"Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN\" \"$ACTIONS_ID_TOKEN_REQUEST_URL\" | jq -r '.value')\n        echo \"TOKEN=$TOKEN\" >> $GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container with Infisical Using Machine Identity\nDESCRIPTION: Docker CMD instructions to run a service with Infisical CLI using machine identity authentication. Includes examples for both single and multiple commands with project ID specification.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"infisical\", \"run\", \"--projectId\", \"<your-project-id>\", \"--\", \"[your service start command]\"]\n\n# example with single single command\n\nCMD [\"infisical\", \"run\", \"--projectId\", \"<your-project-id>\", \"--\", \"npm\", \"run\", \"start\"]\n\n# example with multiple commands\n\nCMD [\"infisical\", \"run\", \"--projectId\", \"<your-project-id>\", \"--command\", \"npm run start && ...\"]\n```\n\n----------------------------------------\n\nTITLE: Flask Application with Infisical Integration\nDESCRIPTION: Python code demonstrating a Flask application that uses Infisical SDK to fetch and use secrets. Shows initialization of the SDK client, authentication, and secret retrieval.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/python.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom infisical_sdk import InfisicalSDKClient\n\napp = Flask(__name__)\n\nclient = InfisicalSDKClient(host=\"https://app.infisical.com\") # host is optional, defaults to https://app.infisical.com\n\nclient.auth.universal_auth.login(\n  \"<machine-identity-client-id>\",\n  \"<machine-identity-client-secret>\"\n)\n\n@app.route(\"/\")\ndef hello_world():\n    # access value\n     name = client.secrets.get_secret_by_name(\n      secret_name=\"NAME\",\n      project_id=\"<project-id>\",\n      environment_slug=\"dev\",\n      secret_path=\"/\"\n     )\n\n    return f\"Hello! My name is: {name.secretValue}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Pre-Commit Hook for Secret Scanning\nDESCRIPTION: This command installs a git pre-commit hook that automatically scans staged changes for exposed secrets before pushing. It integrates Infisical's scanning capabilities into the development workflow.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/scan-install.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan install --pre-commit-hook\n```\n\n----------------------------------------\n\nTITLE: Viewing Infisical Secrets\nDESCRIPTION: This command prints out all secrets in your Infisical project. It supports various flags for customization and can use environment variables for authentication and performance optimization.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<identity-client-id> --client-secret=<identity-client-secret> --silent --plain)\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=<service-token>\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_DISABLE_UPDATE_CHECK=true\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets --projectId=<project-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets --path=\"/\" --env=dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets --plain --silent\n```\n\n----------------------------------------\n\nTITLE: Visualizing Secret Sync Workflow with Mermaid (mermaid)\nDESCRIPTION: This Mermaid code snippet constructs a visual flowchart representing the Secret Sync process in Infisical. It defines project sources, secrets, App Connections, and third-party services, using custom class definitions to style different node types for clarity. The diagram shows how secrets are sourced from a project, synced through an App Connection, and delivered to a third-party service, making it easier to understand the high-level architecture and data flow. No external dependencies beyond the Mermaid renderer are required; the input is the described system structure and the output is a stylized diagram for documentation or presentations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {'flowchart': {'curve': 'linear'} } }%%\\ngraph LR\\nA[App Connection]\\nB[Secret Sync]\\nC[Secret 1]\\nD[Secret 2]\\nE[Secret 3]\\nF[Third-Party Service]\\nG[Secret 1]\\nH[Secret 2]\\nI[Secret 3]\\nJ[Project Source]\\n\\nB --> A\\nC --> J\\nD --> J\\nE --> J\\nA --> F\\nF --> G\\nF --> H\\nF --> I\\nJ --> B\\n\\nclassDef default fill:#ffffff,stroke:#666,stroke-width:2px,rx:10px,color:black\\nclassDef connection fill:#FFF2B2,stroke:#E6C34A,stroke-width:2px,color:black,rx:15px\\nclassDef secret fill:#E6F4FF,stroke:#0096D6,stroke-width:2px,color:black,rx:15px\\nclassDef sync fill:#F4FFE6,stroke:#96D600,stroke-width:2px,color:black,rx:15px\\nclassDef service fill:#E6E6FF,stroke:#6B4E96,stroke-width:2px,color:black,rx:15px\\nclassDef project fill:#FFE6E6,stroke:#D63F3F,stroke-width:2px,color:black,rx:15px\\n\\nclass A connection\\nclass B sync\\nclass C,D,E,G,H,I secret\\nclass F project\\nclass J service\n```\n\n----------------------------------------\n\nTITLE: Scanning Uncommitted Git Changes\nDESCRIPTION: Commands for scanning uncommitted changes in Git repositories, supporting both unstaged and staged changes detection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan git-changes\n\n# Display the full secret findings\ninfisical scan git-changes --verbose\n```\n\n----------------------------------------\n\nTITLE: Pulling .env File from Infisical using CLI\nDESCRIPTION: This command uses the Infisical CLI to pull environment variables from a specified environment (dev, staging, or prod) into a local .env file. It requires prior setup of an Infisical account and project.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/syncingManually.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx infisical pull dev\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repositories (Bash)\nDESCRIPTION: Updates the local cache of available charts from all configured Helm repositories, including the one added in the previous step. This ensures Helm has the latest information about chart versions before installation. Requires the Helm CLI.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Managing Context for Infisical Go SDK Client\nDESCRIPTION: Shows how to properly manage the context when creating multiple instances of the Infisical client to avoid indefinite token refreshing.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n  ctx, cancel := context.WithCancel(context.Background())\n  defer cancel() // Cancel the context when the client is no longer needed\n\n  client := infisical.NewInfisicalClient(ctx, infisical.Config{\n    AutoTokenRefresh: true,\n  })\n\n  // Use the client\n```\n\n----------------------------------------\n\nTITLE: Universal Auth Client Secret Authentication\nDESCRIPTION: Demonstrates authentication using a universal auth client secret. Required when using the universal-auth method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --client-secret=<client-secret>\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Secrets Operator with Helm\nDESCRIPTION: Commands to add the Infisical repository and install the Secrets Operator using Helm. Includes options for default installation, custom inline values, and using a custom values file.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/secrets-operator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Add the Infisical repository\nhelm repo add infisical 'https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/' && helm repo update\n\n# Install Infisical Secrets Operator (with default values)\nhelm upgrade --install --atomic \\\n  -n infisical-dev --create-namespace \\\n  infisical-secrets-operator infisical/secrets-operator\n\n# Install Infisical Secrets Operator (with custom inline values, replace with your own values)\nhelm upgrade --install --atomic \\\n  -n infisical-dev --create-namespace \\\n  --set controllerManager.replicas=3 \\\n  infisical-secrets-operator infisical/secrets-operator\n\n# Install Infisical Secrets Operator (with custom values file, replace with your own values file)\nhelm upgrade --install --atomic \\\n  -n infisical-dev --create-namespace \\\n  -f custom-values.yaml \\\n  infisical-secrets-operator infisical/secrets-operator\n```\n\n----------------------------------------\n\nTITLE: Setting Infisical Environment Variables for GitLab SSO\nDESCRIPTION: Defines the required and optional environment variables for configuring GitLab SSO in a self-hosted Infisical instance. These variables link Infisical to the created GitLab OAuth application and define instance URLs and authentication secrets. They need to be set before restarting the Infisical instance.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/gitlab.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- `CLIENT_ID_GITLAB_LOGIN`: The **Client ID** of your GitLab application.\\n- `CLIENT_SECRET_GITLAB_LOGIN`: The **Secret** of your GitLab application.\\n- (optional) `URL_GITLAB_LOGIN`: The URL of your self-hosted instance of GitLab where the OAuth application is registered. If no URL is passed in, this will default to `https://gitlab.com`.\\n- `AUTH_SECRET`: A secret key used for signing and verifying JWT. This can be a random 32-byte base64 string generated with `openssl rand -base64 32`.\\n- `SITE_URL`: The URL of your self-hosted instance of Infisical - should be an absolute URL including the protocol (e.g. https://app.infisical.com)\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets with Infisical C# SDK\nDESCRIPTION: This code snippet shows how to use the ListSecrets method to retrieve all secrets within a specific project, environment, and path using the Infisical C# SDK.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new ListSecretsOptions\n{\n    ProjectId = \"PROJECT_ID\",\n    Environment = \"dev\",\n    Path = \"/foo/bar\",\n    AttachToProcessEnv = false,\n};\n\nvar secrets = infisical.ListSecrets(options);\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets with Infisical Node.js SDK\nDESCRIPTION: Shows how to use the listSecrets method to retrieve all secrets within a specific project, environment, and path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst secrets = await client.listSecrets({\n    environment: \"dev\",\n    projectId: \"PROJECT_ID\",\n    path: \"/foo/bar/\",\n    includeImports: false\n});\n```\n\n----------------------------------------\n\nTITLE: Running an application with Infisical-injected environment variables\nDESCRIPTION: This command runs an application with secrets from Infisical injected as environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ infisical run -- <your_application_start_command>\n```\n\n----------------------------------------\n\nTITLE: Signing Existing SSH Public Key with Infisical CLI\nDESCRIPTION: This command signs an existing SSH public key against a certificate template, outputting the corresponding signed SSH certificate. It requires specifying the certificate template ID, public key, and principals.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/ssh.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical ssh sign-key --certificateTemplateId=<certificate-template-id> --publicKey=<public-key> --principals=<principals> --outFilePath=<out-file-path>\n```\n\n----------------------------------------\n\nTITLE: Using CLI with Service Tokens\nDESCRIPTION: Authenticate and interact with Infisical using service tokens for non-local development scenarios.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ninfisical export --token=<service-token>\ninfisical secrets --token=<service-token>\ninfisical run --token=<service-token> -- npm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=<service-token>\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Gateway with Machine Identity Authentication\nDESCRIPTION: Command to run the Gateway directly using machine identity authentication for development or testing purposes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/gateways/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical gateway --token $(infisical login --method=universal-auth --client-id=<> --client-secret=<> --plain)\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Token with Multiple Access Levels\nDESCRIPTION: This command creates a service token with both read and write access levels. It grants these permissions to the 'dev:/global' scope.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninfisical service-token create --scope=dev:/global --access-level=read --access-level=write\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Authentication for Infisical Java SDK\nDESCRIPTION: This snippet demonstrates how to set up AWS IAM authentication for the Infisical Java SDK. It shows the process of creating client settings, authentication options, and configuring the AWS IAM auth method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  ClientSettings settings = new ClientSettings();\n  AuthenticationOptions authOptions = new AuthenticationOptions();\n  AWSIamAuthMethod authMethod = new AWSIamAuthMethod();\n\n  authMethod.setIdentityID(\"YOUR_MACHINE_IDENTITY_ID\");\n\n  authOptions.setAwsIam(authMethod);\n  settings.setAuth(authOptions);\n\n  InfisicalClient client = new InfisicalClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Email Flag Example Usage\nDESCRIPTION: Example showing how to specify the admin email address using the --email flag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical bootstrap --email=admin@example.com\n```\n\n----------------------------------------\n\nTITLE: AWS IAM User Minimum Permission Policy Configuration\nDESCRIPTION: JSON policy document defining the minimum required permissions for the managing IAM user that will create and manage dynamic IAM users. Includes permissions for user creation, policy attachment, access key management, and group operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/aws-iam.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:AttachUserPolicy\",\n        \"iam:CreateAccessKey\",\n        \"iam:CreateUser\",\n        \"iam:DeleteAccessKey\",\n        \"iam:DeleteUser\",\n        \"iam:DeleteUserPolicy\",\n        \"iam:DetachUserPolicy\",\n        \"iam:GetUser\",\n        \"iam:ListAccessKeys\",\n        \"iam:ListAttachedUserPolicies\",\n        \"iam:ListGroupsForUser\",\n        \"iam:ListUserPolicies\",\n        \"iam:PutUserPolicy\",\n        \"iam:AddUserToGroup\",\n        \"iam:RemoveUserFromGroup\"\n      ],\n      \"Resource\": [\"*\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS Credentials for Terraform Deployment\nDESCRIPTION: Bash commands for exporting AWS credentials as environment variables to allow Terraform to authenticate with AWS for resource deployment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ecs-with-agent.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=<your AWS access key ID>\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_SECRET_ACCESS_KEY=<your AWS secret access key>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install Flask web framework and Infisical SDK using pip package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/python.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npip install flask infisicalsdk\n```\n\n----------------------------------------\n\nTITLE: Executing Infisical Run Command with Chained Commands\nDESCRIPTION: This snippet shows how to use the 'infisical run' command with multiple chained commands. It uses the --command flag to specify a string of commands to be executed.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run [options] --command [string command]\n\n# Example\ninfisical run [options] --command \"npm run bootstrap && npm run dev start; other-bash-command\"\n```\n\n----------------------------------------\n\nTITLE: Generating Example Environment File with Infisical CLI\nDESCRIPTION: Command to generate an example .env file from secrets with comments and tags. Supports DEFAULT:<value> syntax in secret comments for default values.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical secrets generate-example-env\n\n## Example\n$ infisical secrets generate-example-env > .example-env\n```\n\n----------------------------------------\n\nTITLE: Generating a Signed JWT for Infisical GCP IAM Auth using Node.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `google-auth-library` in Node.js to generate a signed JWT required for GCP IAM authentication with Infisical. It authenticates with GCP, constructs the JWT payload including the service account email (`sub`) and the target Infisical identity ID (`aud`), and then calls the Google IAM Credentials API (`signJwt` method) to obtain the signed token. The resulting JWT is then used to log in to the Infisical API. Requires the `google-auth-library` package and appropriate GCP permissions (`iam.serviceAccounts.signJwt`).\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/gcp-auth.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GoogleAuth } = require(\"google-auth-library\");\n\nconst auth = new GoogleAuth({\n    scopes: \"https://www.googleapis.com/auth/cloud-platform\",\n});\n\nconst credentials = await auth.getCredentials();\n\nconst identityId = \"<your-infisical-identity-id>\";\n\nconst jwtPayload = {\n    sub: credentials.client_email,\n    aud: identityId,\n};\n\nconst { data } = await client.request({\n    url: `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${credentials.client_email}:signJwt`,\n    method: \"POST\",\n    data: { payload: JSON.stringify(jwtPayload) },\n});\n\nconst jwt = data.signedJwt // send this jwt to Infisical in the next step\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Native Kubernetes in Infisical CLI\nDESCRIPTION: Command to log in using Native Kubernetes method. It requires a machine identity ID and optionally a service account token path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=kubernetes --machine-identity-id=<machine-identity-id> --service-account-token-path=<service-account-token-path>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Secrets with Inline Comments in JavaScript\nDESCRIPTION: Demonstrates how to ignore specific secrets in JavaScript code using the infisical-scan:ignore comment directive. This prevents the secret scanner from flagging intentionally committed test secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-scanning.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction helloWorld() {\n    console.log(\"8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ\"); // infisical-scan:ignore\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Implementation in Node.js\nDESCRIPTION: Example code demonstrating how to authenticate with Infisical using JWT in a Node.js application. Shows the process of sending a JWT token to obtain an access token for API access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/jwt-auth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    // Obtain JWT from your issuer\n    const jwt = \"<your-jwt-token>\";\n\n    const infisicalUrl = \"https://app.infisical.com\"; // or your self-hosted Infisical URL\n    const identityId = \"<your-identity-id>\";\n\n    const { data } = await axios.post(\n        `{infisicalUrl}/api/v1/auth/jwt-auth/login`,\n        {\n            identityId,\n            jwt,\n        }\n    );\n\n    console.log(\"result data: \", data); // access token here\n} catch(err) {\n    console.error(err);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Kubernetes ConfigMaps with Infisical Operator\nDESCRIPTION: Example of how to configure managed Kubernetes ConfigMaps using the Infisical operator. This snippet demonstrates the use of managedKubeConfigMapReferences to specify the name, namespace, and creation policy for the managed ConfigMap.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nmanagedKubeConfigMapReferences:\n  - configMapName: managed-configmap\n    configMapNamespace: default\n    template:\n      includeAllSecrets: true\n      data:\n        # Create new key that doesn't exist in your Infisical project using values of other secrets\n        SITE_URL: \"{{ .SITE_URL.Value }}\"\n        # Override an existing key in Infisical project with a new value using values of other secrets\n        API_URL: \"https://api.{{.SITE_URL.Value}}.{{.REGION.Value}}.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with GCP IAM Authentication (Python)\nDESCRIPTION: This snippet shows how to set up the Infisical client using GCP IAM authentication, which requires a machine identity ID and a path to a GCP service account key file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom infisical_client import ClientSettings, InfisicalClient, AuthenticationOptions, GCPIamAuthMethod\n\n\nclient = InfisicalClient(ClientSettings(\n    auth=AuthenticationOptions(\n        gcp_iam=GCPIamAuthMethod(\n            identity_id=\"MACHINE_IDENTITY_ID\",\n            service_account_key_file_path=\"./path/to/service_account_key.json\"\n        )\n    )\n))\n```\n\n----------------------------------------\n\nTITLE: Basic File and Git History Scanning with Infisical CLI\nDESCRIPTION: Commands for scanning repositories, directories, and files for secrets using Infisical CLI. Supports both basic and verbose output modes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan\n\n# Display the full secret findings\ninfisical scan --verbose\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Infisical C# Client\nDESCRIPTION: Demonstrates symmetric encryption of data using the EncryptSymmetric method. Returns ciphertext, initialization vector, and authentication tag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new EncryptSymmetricOptions\n{\n    Plaintext = \"Infisical is awesome!\",\n    Key = key,\n};\n\nvar encryptedData = infisical.EncryptSymmetric(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with Universal Authentication (Python)\nDESCRIPTION: This snippet shows how to import and configure the Infisical client using universal authentication with a client ID and client secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom infisical_client import ClientSettings, InfisicalClient, AuthenticationOptions, UniversalAuthMethod\n\nclient = InfisicalClient(ClientSettings(\n    auth=AuthenticationOptions(\n      universal_auth=UniversalAuthMethod(\n        client_id=\"CLIENT_ID\",\n        client_secret=\"CLIENT_SECRET\",\n      )\n    )\n))\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical Project Connection in Bash\nDESCRIPTION: Command to link a local project to an Infisical project. This creates an infisical.json file containing the Project ID, enabling local access to project secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/init.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Using Machine Identity Token with Infisical Run\nDESCRIPTION: This snippet demonstrates how to use a machine identity token with the 'infisical run' command by passing it as a flag or setting it as an environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical run --token=\"<universal-auth-access-token>\" --projectId=<project-id> -- npm run start\n```\n\n----------------------------------------\n\nTITLE: Defining InfisicalSecret with Kubernetes Auth in YAML\nDESCRIPTION: This YAML snippet defines an InfisicalSecret custom resource using Kubernetes authentication. It specifies the identity ID, service account details, and secrets scope for fetching secrets from Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n      kubernetesAuth:\n          identityId: <machine-identity-id>\n          autoCreateServiceAccountToken: true # Automatically creates short-lived service account tokens for the service account.\n          serviceAccountTokenAudiences:\n            - <audience> # Optionally specify audience for the service account token. No audience is specified by default.\n          serviceAccountRef:\n            name: infisical-service-account # The service account we just created in the previous step.\n            namespace: <service-account-namespace>\n\n          # secretsScope is identical to the secrets scope in the universalAuth field in this sample.\n          secretsScope:\n              projectSlug: your-project-slug\n              envSlug: prod\n              secretsPath: \"/path\"\n              recursive: true\n  ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets from Infisical\nDESCRIPTION: Demonstrates how to retrieve a secret from Infisical using the getSecret method. The method fetches a shared secret by default and requires project ID, environment, and secret name parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst secret = await client.getSecret({\n    environment: \"dev\",\n    projectId: \"PROJECT_ID\",\n    secretName: \"API_KEY\",\n    path: \"/\",\n    type: \"shared\"\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Infisical Instance via CLI and Extracting Token\nDESCRIPTION: This code snippet shows how to use the Infisical CLI to bootstrap an instance and extract the machine identity token. It uses the 'infisical bootstrap' command with required parameters and pipes the output through jq to extract only the token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/automated-bootstrapping.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical bootstrap --domain=\"http://localhost:8080\" --email=\"admin@example.com\" --password=\"your-secure-password\" --organization=\"your-org-name\" | jq \".identity.credentials.token\"\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Configuration with Infisical Integration\nDESCRIPTION: A Jenkins pipeline script that exposes the Infisical service token as an environment variable and demonstrates various ways to use it with the Infisical CLI, including direct shell commands and Docker container executions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cicd/jenkins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent any\n\n    environment {\n        INFISICAL_TOKEN = credentials('infisical-service-token')\n    }\n\n    stages {\n        stage('Run Infisical') {\n            steps {\n                sh(\"infisical secrets --env=dev --path=/\")\n\n                // doesn't work\n                // sh(\"docker run --rm test-container infisical secrets\")\n\n                // works\n                // sh(\"docker run -e INFISICAL_TOKEN=${INFISICAL_TOKEN} --rm test-container infisical secrets --env=dev --path=/\")\n\n                // doesn't work\n                // sh(\"docker-compose up -d\")\n\n                // works\n                // sh(\"INFISICAL_TOKEN=${INFISICAL_TOKEN} docker-compose up -d\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Secrets in Infisical\nDESCRIPTION: Shows how to create a new secret in Infisical using the createSecret method. Requires project ID, environment, secret name, and secret value as mandatory parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst newApiKey = await client.createSecret({\n    projectId: \"PROJECT_ID\",\n    environment: \"dev\",\n    secretName: \"API_KEY\",\n    secretValue: \"SECRET VALUE\",\n    path: \"/\",\n    type: \"shared\"\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OIDC Auth in Infisical CLI\nDESCRIPTION: Command to log in using OIDC Auth method. It requires a machine identity ID and an OIDC JWT from the identity provider.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=oidc-auth --machine-identity-id=<machine-identity-id> --oidc-jwt=<oidc-jwt>\n```\n\n----------------------------------------\n\nTITLE: Secure Database Credential Management Example\nDESCRIPTION: A complete example showing how to manage database credentials securely using ephemeral resources and inject them into an AWS database instance without exposing sensitive information.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/terraform.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# Fetch database credentials securely\nephemeral \"infisical_secret\" \"db_creds\" {\n  name         = \"DB_CREDENTIALS\"\n  env_slug     = \"prod\"\n  workspace_id = var.infisical_workspace_id\n  folder_path  = \"/database\"\n}\n\n# Use the credentials in your database instance\nresource \"aws_db_instance\" \"example\" {\n  identifier        = \"my-database\"\n  allocated_storage = 20\n  engine            = \"postgres\"\n  engine_version    = \"14.0\"\n  instance_class    = \"db.t3.micro\"\n  \n  # Securely inject credentials from Infisical\n  username = jsondecode(ephemeral.infisical_secret.db_creds.value)[\"username\"]\n  password = jsondecode(ephemeral.infisical_secret.db_creds.value)[\"password\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Infisical KMS Key via Bash API Call\nDESCRIPTION: This snippet provides the curl command for encrypting data using the Infisical KMS API. The request requires the key ID in the endpoint URL and a base64-encoded 'plaintext' parameter in the JSON body. The plaintext to be encrypted must be base64 encoded, the endpoint returns the encrypted result as base64-encoded ciphertext. Proper authentication and input validation are prerequisites for successful use.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/kms/keys/<key-id>/encrypt \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"plaintext\": \"lUFHM5Ggwo6TOfpuN1S==\" // base64 encoded plaintext\n}'\n```\n\n----------------------------------------\n\nTITLE: Visualizing App Connection Architecture with Mermaid\nDESCRIPTION: A mermaid diagram illustrating the relationship between AWS connections and various Infisical projects. The diagram shows how a single AWS connection can be utilized by multiple projects for different purposes like secret syncing and dynamic secret generation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {'flowchart': {'curve': 'linear'} } }%%\ngraph TD\nA[AWS]\nB[AWS Connection]\nC[Project 1 Secret Sync]\nD[Project 2 Secret Sync]\nE[Project 3 Generate Dynamic Secret]\n\nB --> A\nC --> B\nD --> B\nE --> B\n\nclassDef default fill:#ffffff,stroke:#666,stroke-width:2px,rx:10px,color:black\nclassDef aws fill:#FFF2B2,stroke:#E6C34A,stroke-width:2px,color:black,rx:15px\nclassDef project fill:#E6F4FF,stroke:#0096D6,stroke-width:2px,color:black,rx:15px\nclassDef connection fill:#F4FFE6,stroke:#96D600,stroke-width:2px,color:black,rx:15px\n\nclass A aws\nclass B connection\nclass C,D,E project\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI in Alpine Linux Dockerfile\nDESCRIPTION: This Dockerfile command installs the Infisical CLI on an Alpine Linux container by adding bash and curl, then running the Alpine setup script from Cloudsmith.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk add --no-cache bash curl && curl -1sLf \\\n  'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' | bash \\\n  && apk add infisical\n```\n\n----------------------------------------\n\nTITLE: Specifying Project ID for Secret Fetching\nDESCRIPTION: This snippet shows how to specify the project ID to fetch secrets from using the --projectId flag. This is required when using a machine identity for authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical run --projectId=<project-id> -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Auth in Infisical Agent - YAML\nDESCRIPTION: This YAML snippet shows how to configure the Infisical agent to use Universal Auth for authentication. It specifies the use of 'universal-auth' type, with required parameters for file paths to the client ID and client secret, and an optional flag to remove the client secret from disk after reading. The 'client-id' and 'client-secret' fields must reference valid file paths, and 'remove_client_secret_on_read' is a boolean determining secret handling post-read. The expected usage is for environments where credential files are accessible to the agent.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  type: \"universal-auth\"\n  config:\n    client-id: \"./client-id\" # Path to the file containing the client ID\n    client-secret: \"./client\" # Path to the file containing the client secret\n    remove_client_secret_on_read: false # Optional field, instructs the agent to remove the client secret from disk after reading it\n```\n\n----------------------------------------\n\nTITLE: Infisical Startup Shell Script for Docker\nDESCRIPTION: Shell script that obtains an Infisical access token using machine identity and then executes the application with the appropriate environment variables. Used to automate token generation and secret injection in Docker containers.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$INFISICAL_MACHINE_CLIENT_ID --client-secret=$INFISICAL_MACHINE_CLIENT_SECRET --plain --silent)\nexec infisical run --token $INFISICAL_TOKEN --projectId $PROJECT_ID --env $INFISICAL_SECRET_ENV --domain $INFISICAL_API_URL -- <starting script>\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Keys in Infisical using Go SDK\nDESCRIPTION: Creates a new KMS key with specified usage, algorithm, and project settings. Supports different key types for signing/verifying and encryption/decryption operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nnewKey, err := client.Kms().Keys().Create(infisical.KmsCreateKeyOptions{\n\t\tKeyUsage:            \"<sign-verify>|<encrypt-decrypt>\",\n\t\tDescription:         \"<key-description>\",\n\t\tName:                \"<key-name>\",\n\t\tEncryptionAlgorithm: \"<rsa-4096>|<ecc-nist-p256>|<aes-256-gcm>|<aes-128-gcm>\",\n\t\tProjectId:           \"<project-id>\",\n\t})\n```\n\n----------------------------------------\n\nTITLE: Visualizing AWS Auth Workflow with Sequence Diagram\nDESCRIPTION: A sequence diagram showing the authentication flow between Client, Infisical, and AWS STS, including steps for signing GetCallerIdentity query, login operation, query verification, identity validation, and API access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/aws-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as Client\n  participant Infis as Infisical\n  participant AWS as AWS STS\n\n  Note over Client,Client: Step 1: Sign GetCallerIdentityQuery\n\n  Note over Client,Infis: Step 2: Login Operation\n  Client->>Infis: Send signed query details /api/v1/auth/aws-auth/login\n\n  Note over Infis,AWS: Step 3: Query verification\n  Infis->>AWS: Forward signed GetCallerIdentity query\n  AWS-->>Infis: Return IAM user/role details\n\n  Note over Infis: Step 4: Identity Property Validation\n  Infis->>Client: Return short-lived access token\n\n  Note over Client,Infis: Step 5: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical API via AWS STS Signature V4 (Node.js)\nDESCRIPTION: This Node.js code snippet constructs a signed AWS STS request using the AWS SDK, encodes required request components, and sends them to the Infisical authentication endpoint to obtain an access token. Dependencies include the 'aws-sdk', 'axios', and 'buffer' modules. Replace placeholders like <your-identity-id> and <your-aws-region> accordingly; inputs include AWS credentials and region, and outputs are an access token for Infisical. Limitations: credentials must be set, all request parts must be properly Base64-encoded, and error handling should be implemented as shown.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/aws-auth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.headers[\"X-Amz-Date\"] = AWS.util.date.iso8601(new Date()).replace(/[:-]|\\.\\d{3}/g, \"\");\nrequest.body = iamRequestBody;\nrequest.headers[\"Content-Length\"] = Buffer.byteLength(iamRequestBody);\n\nconst signer = new AWS.Signers.V4(request, \"sts\");\nsigner.addAuthorization(AWS.config.credentials, new Date());\n\nconst infisicalUrl = \"https://app.infisical.com\"; // or your self-hosted Infisical URL\nconst identityId = \"<your-identity-id>\";\n\nconst { data } = await axios.post(`${infisicalUrl}/api/v1/auth/aws-auth/login`, {\n    identityId,\n    iamHttpRequestMethod: \"POST\",\n    iamRequestUrl: Buffer.from(iamRequestURL).toString(\"base64\"),\n    iamRequestBody: Buffer.from(iamRequestBody).toString(\"base64\"),\n    iamRequestHeaders: Buffer.from(JSON.stringify(iamRequestHeaders)).toString(\"base64\")\n});\n\nconsole.log(\"result data: \", data); // access token here\n} catch (err) {\n    console.error(err);\n}\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Helm Chart\nDESCRIPTION: This command installs or upgrades the Infisical Helm chart using the specified values file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/kubernetes-helm.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install infisical infisical-helm-charts/infisical-standalone --values /path/to/values.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Parameter Store Sync via Infisical API (Bash)\nDESCRIPTION: This Bash code snippet demonstrates how to create an AWS Parameter Store Sync in Infisical using a POST request to the relevant API endpoint. Dependencies include curl and access to a valid Infisical instance, with authorization implied but not shown. Key parameters include the sync name, projectId, environment, connectionId, path details for both Infisical and AWS, and a syncOptions object defining initial sync behavior. Inputs are provided as a JSON string in the request body, and the output will be a JSON response detailing the created sync resource or an error message. The request must specify the proper Content-Type header, and variable IDs should be replaced with actual resource values.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/aws-parameter-store.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/aws-parameter-store \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-parameter-store-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"region\": \"us-east-1\",\n        \"path\": \"/my-aws/path/\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Infisical-Injected Secrets via Bash Script\nDESCRIPTION: This bash script uses Infisical CLI to launch the Node.js application (`npm start`) with environment variables and secrets injected into the runtime. The prerequisite is having Infisical CLI installed and the application configured for Infisical secret injection. Use this as an entry point for PM2 or any process manager that supports bash scripts. Input: None required when running the script. Output: Starts the app with secrets loaded into the process.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/pm2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- npm start\n```\n\n----------------------------------------\n\nTITLE: GitOps Workflow with OIDC Authentication\nDESCRIPTION: Configure a GitOps workflow using OpenID Connect (OIDC) authentication to eliminate the need for static credentials when accessing secrets through the Infisical provider.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/terraform.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"infisical\" {\n  # Auth credentials automatically injected from the environment\n}\n\n# Fetch deployment credentials\nephemeral \"infisical_secret\" \"deploy_token\" {\n  name         = \"DEPLOY_TOKEN\"\n  env_slug     = \"prod\"\n  workspace_id = var.infisical_workspace_id\n  folder_path  = \"/deployment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Service Token Variables\nDESCRIPTION: Example Docker Compose configuration for using service tokens with Infisical. This setup allows different services to use unique Infisical tokens that are passed in from environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-compose.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example Docker Compose file\nservices:\n  web:\n    build: .\n    image: example-service-1\n    environment:\n      - INFISICAL_TOKEN=${INFISICAL_TOKEN_FOR_WEB}\n\n  api:\n    build: .\n    image: example-service-2\n    environment:\n      - INFISICAL_TOKEN=${INFISICAL_TOKEN_FOR_API}\n```\n\n----------------------------------------\n\nTITLE: Exporting Infisical Service Tokens as Shell Variables\nDESCRIPTION: Bash commands for exporting Infisical service tokens as shell variables. These tokens are then used when running Docker Compose to authenticate each service with Infisical for secret retrieval.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-compose.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#Example\n\n# Token refers to the token we generated in step 2 for this service\nexport INFISICAL_TOKEN_FOR_WEB=<token>\n\n# Token refers to the token we generated in step 2 for this service\nexport INFISICAL_TOKEN_FOR_API=<token>\n\n# Then run your compose file in the same terminal.\ndocker-compose ...\n```\n\n----------------------------------------\n\nTITLE: Obtaining Machine Identity Access Token for Infisical\nDESCRIPTION: Bash command to obtain an access token for Infisical machine identity authentication. Uses universal-auth method with client ID and secret, outputs in plain text format.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<your-client-id> --client-secret=<your-client-secret> --plain --silent)\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Secret via API\nDESCRIPTION: Makes a GET request to retrieve a specific secret by name, using the access token for authentication. Requires workspace ID and environment parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request GET 'http://localhost:8080/api/v3/secrets/raw/FOO?workspaceId=657830d579cfc8415d06ce5b&environment=dev' \\\n    --header 'Authorization: Bearer <access_token>'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secret\": {\n        \"_id\": \"6564234b934d634e1fcd6cdf\",\n        \"version\": 1,\n        \"workspace\": \"6564173e934d634e1fcd6950\",\n        \"type\": \"shared\",\n        \"environment\": \"dev\",\n        \"secretKey\": \"FOO2\",\n        \"secretValue\": \"BAR2\",\n        \"secretComment\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting INFISICAL_TOKEN Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the INFISICAL_TOKEN environment variable using a machine identity or a service token. This token is used to fetch secrets instead of logged-in credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Example\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<identity-client-id> --client-secret=<identity-client-secret> --silent --plain) # --plain flag will output only the token, so it can be fed to an environment variable. --silent will disable any update messages.\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Example\nexport INFISICAL_TOKEN=<service-token>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GCP IAM in Infisical CLI\nDESCRIPTION: Command to log in using GCP IAM method. It requires a machine identity ID and a path to the GCP service account key file in JSON format.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=gcp-iam --machine-identity-id=<machine-identity-id> --service-account-key-file-path=<service-account-key-file-path>\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Applications with Infisical Environment Variables\nDESCRIPTION: Start your Express, Fastify, or Koa application with Infisical to inject environment variables and secrets from your Infisical Cloud configuration. The command wraps your normal start command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/express.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP ID Token Authentication for Infisical Java SDK\nDESCRIPTION: This snippet demonstrates how to set up GCP ID Token authentication for the Infisical Java SDK. It shows the process of creating client settings, authentication options, and configuring the GCP ID Token auth method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  ClientSettings settings = new ClientSettings();\n  AuthenticationOptions authOptions = new AuthenticationOptions();\n  GCPIDTokenAuthMethod authMethod = new GCPIDTokenAuthMethod();\n\n  authMethod.setIdentityID(\"YOUR_MACHINE_IDENTITY_ID\");\n\n  authOptions.setGcpIDToken(authMethod);\n  settings.setAuth(authOptions);\n\n  InfisicalClient client = new InfisicalClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Setting Infisical Token as Environment Variable for Terraform\nDESCRIPTION: This bash snippet shows how to set the Infisical admin token as an environment variable for use with Terraform. It exports the token and then runs 'terraform apply'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/automated-bootstrapping.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=your-access-token\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Gradle Task with Infisical\nDESCRIPTION: Example command showing how to run a specific Gradle task with environment variables injected by Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- gradle generateFile\n```\n\n----------------------------------------\n\nTITLE: Starting JavaScript Script with PM2 for Infisical-Injected App\nDESCRIPTION: This snippet shows how to start the JavaScript script (`infisical-run.js`) with PM2, ensuring that the Node.js application runs as a PM2 managed process and inherits environment secrets from Infisical. Depends on PM2 and a valid `infisical-run.js` script. Input: PM2 process manager. Output: Application running with secrets via Infisical under PM2.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/pm2.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npm2 start infisical-run.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client in C#\nDESCRIPTION: This snippet demonstrates how to import the Infisical SDK and create a client instance with Universal Auth authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Infisical.Sdk;\n\nnamespace Example\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n          ClientSettings settings = new ClientSettings\n          {\n            Auth = new AuthenticationOptions\n            {\n              UniversalAuth = new UniversalAuthMethod\n              {\n                ClientId = \"your-client-id\",\n                ClientSecret = \"your-client-secret\"\n              }\n            }\n          };\n\n\n          var infisicalClient = new InfisicalClient(settings); // <-- Your SDK client is now ready to use\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Infisical Secret Provider Class (YAML)\nDESCRIPTION: This Kubernetes SecretProviderClass resource configures the connection between the Secrets Store CSI driver and the Infisical CSI provider. It specifies the Infisical instance URL (`infisicalUrl`), authentication method (`authMethod`), machine identity ID (`identityId`), target Infisical project (`projectId`) and environment (`envSlug`), and maps specific Infisical secrets (`secrets`) to file names (`fileName`) for mounting. This resource must be created in the same namespace as the pods that will consume these secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets-store.csi.x-k8s.io/v1\nkind: SecretProviderClass\nmetadata:\n  name: my-infisical-app-csi-provider\nspec:\n  provider: infisical\n  parameters:\n    infisicalUrl: \"https://app.infisical.com\"\n    authMethod: \"kubernetes\"\n    identityId: \"ad2f8c67-cbe2-417a-b5eb-1339776ec0b3\"\n    projectId: \"09eda1f8-85a3-47a9-8a6f-e27f133b2a36\"\n    envSlug: \"prod\"\n    secrets: |\n      - secretPath: \"/\"\n        fileName: \"dbPassword\"\n        secretKey: \"DB_PASSWORD\"\n      - secretPath: \"/app\"\n        fileName: \"appSecret\"\n        secretKey: \"APP_SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Account Token Authentication\nDESCRIPTION: Demonstrates how to specify a custom path for the Kubernetes service account token used in authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --service-account-token-path=<service-account-token-path>\n```\n\n----------------------------------------\n\nTITLE: Creating an ACL Policy for HashiCorp Vault\nDESCRIPTION: ACL policy definition that grants create, read, and update capabilities to a specific KV path (kv/data/dev) and full access to namespace operations. This policy will be attached to the role that Infisical uses to authenticate with Vault.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cloud/hashicorp-vault.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npath \"kv/data/dev\" {\n  capabilities = [ \"create\", \"read\", \"update\" ]\n}\n\npath \"sys/namespaces/*\" {\n   capabilities = [ \"create\", \"read\", \"update\", \"delete\", \"list\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Infisical-Injected Secrets via JavaScript (Child Process)\nDESCRIPTION: This Node.js JavaScript snippet demonstrates starting a child process running the Infisical CLI, which in turn runs `npm start` with injected environment variables and secrets. Dependencies are Infisical CLI and Node.js runtime. The script captures stdout and stderr of the spawned process for logging, making it suitable for integration with process managers like PM2. Input: None required. Output: Inherited process streams with Infisical environment variables included.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/pm2.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst spawn = require(\"child_process\").spawn;\\n\\nconst infisical = spawn(\"infisical\", [\"run\", \"--\", \"npm\", \"start\"]);\\n\\ninfisical.stdout.on(\"data\", (data) => console.log(`${data}`));\\ninfisical.stderr.on(\"data\", (data) => console.error(`${data}`));\n```\n\n----------------------------------------\n\nTITLE: Defining InfisicalSecret with Universal Auth in YAML\nDESCRIPTION: This YAML snippet defines an InfisicalSecret custom resource using universal authentication. It specifies the project slug, environment slug, and secrets path for fetching secrets from Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n      universalAuth:\n          secretsScope:\n              projectSlug: <project-slug> # <-- project slug\n              envSlug: <env-slug> # \"dev\", \"staging\", \"prod\", etc..\n              secretsPath: \"<secrets-path>\" # Root is \"/\"\n          credentialsRef:\n              secretName: universal-auth-credentials # <-- name of the Kubernetes secret that stores our machine identity credentials\n              secretNamespace: default # <-- namespace of the Kubernetes secret that stores our machine identity credentials\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating Terraform Cloud Sync via Infisical API - Bash\nDESCRIPTION: This snippet demonstrates how to programmatically create a Terraform Cloud Sync in Infisical using a curl command to send a POST request to the designated API endpoint. It requires the URL for Infisical Cloud, an API endpoint, and a JSON payload with information such as sync name, project ID, connection ID, secret path, environment, and sync/destination configuration. The API expects authentication (not shown in the snippet) and a properly structured JSON body, and will return a response with sync details upon successful creation. Ensure required IDs (project, connection, etc.) are valid and available beforehand.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/terraform-cloud.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/terraform-cloud \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-terraform-cloud-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"scope\": \"variable-set\",\n        \"variableSetId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"variableSetName\": \"my-variable-set\",\n        \"org\": \"my-organization-id\",\n        \"category\": \"env\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Auth Login in Infisical Go SDK\nDESCRIPTION: Shows how to perform Kubernetes Auth login using the Infisical Go SDK, which is specific to applications running on Kubernetes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Service account token path will default to /var/run/secrets/kubernetes.io/serviceaccount/token if empty value is passed\n_, err = client.Auth().KubernetesAuthLogin(\"MACHINE_IDENTITY_ID\", \"SERVICE_ACCOUNT_TOKEN_PATH\")\n\nif err != nil {\n  fmt.Println(err)\n  os.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Token with Multiple Scopes and Access Levels\nDESCRIPTION: This command creates a service token with specified scopes and access levels. It grants read and write access to the 'dev:/global' and 'dev:/backend' scopes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical service-token create --scope=dev:/global --scope=dev:/backend --access-level=read --access-level=write\n```\n\n----------------------------------------\n\nTITLE: Authentication with Service Token (Legacy)\nDESCRIPTION: Configure the Infisical provider using Service Token authentication, which is considered legacy and will be deprecated in a future release.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/terraform.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"infisical\" {\n  host          = \"https://app.infisical.com\"\n  service_token = var.infisical_service_token\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a Node.js Project using Bash\nDESCRIPTION: This snippet illustrates Bash commands to navigate to a project root and initialize Infisical, preparing the Node.js project to access secrets managed via Infisical Cloud. Required dependencies include the Infisical CLI, and the user must have set up environment variables in Infisical Cloud. The commands assume the user has terminal access and the needed CLI installed. Inputs: project directory path. Output: Initialized Infisical setup for secret management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/pm2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project\\ncd /path/to/project\\n\\n# then initialize infisical\\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Getting Individual Secret from Infisical\nDESCRIPTION: Retrieves a single secret by name from the specified project and environment. Supports both shared and personal secret types.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nGetSecretOptions options = new GetSecretOptions();\noptions.setSecretName(\"TEST\");\noptions.setEnvironment(\"dev\");\noptions.setProjectID(\"PROJECT_ID\");\n\nGetSecretResponseSecret secret = client.getSecret(options);\n\nString secretValue = secret.getSecretValue();\n```\n\n----------------------------------------\n\nTITLE: Creating Volume from ConfigMap\nDESCRIPTION: Shows how to create a volume from a managed ConfigMap to store secrets as files.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: configmaps-volume-name # The name of the volume under which configmaps will be stored\n    configMap:\n      name: managed-configmap # managed configmap name\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Using a JWT Token for Infisical API Authentication in Node.js\nDESCRIPTION: This snippet shows how to use Node.js to read a Kubernetes service account JWT token from the filesystem and send it as part of a login request to the Infisical API for authentication. It requires Node.js, the 'fs' module for file operations, and the 'axios' HTTP client for API requests. 'tokenPath' specifies the location of the JWT, 'infisicalUrl' is the API endpoint, and 'identityId' identifies the intended service identity. The expected input is a valid Kubernetes JWT token; output is an Infisical access token logged to console. Requires proper network access and permissions; failure scenarios (e.g., invalid or expired tokens) are logged as errors.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\ntry {\n    const tokenPath = \"/var/run/secrets/kubernetes.io/serviceaccount/token\";\n    const jwtToken = fs.readFileSync(tokenPath, \"utf8\");\n\n    const infisicalUrl = \"https://app.infisical.com\"; // or your self-hosted Infisical URL\n    const identityId = \"<your-identity-id>\";\n\n    const { data } = await axios.post(\n        `{infisicalUrl}/api/v1/auth/kubernetes-auth/login`,\n        {\n            identityId,\n            jwt,\n        }\n    );\n\n    console.log(\"result data: \", data); // access token here\n} catch(err) {\n    console.error(err);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Secrets in Infisical\nDESCRIPTION: Demonstrates updating an existing secret using the updateSecret method. Requires the secret name, new value, project ID, and environment parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst updatedApiKey = await client.updateSecret({\n    secretName: \"API_KEY\",\n    secretValue: \"NEW SECRET VALUE\",\n    projectId: \"PROJECT_ID\",\n    environment: \"dev\",\n    path: \"/\",\n    type: \"shared\"\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Infisical Machine Identity Tokens as Shell Variables\nDESCRIPTION: Bash commands to export machine identity tokens as shell variables for use with Docker Compose. These commands generate tokens using the Infisical CLI with universal authentication and then make them available as environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-compose.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#Example\n\n# Token refers to the token we generated in step 2 for this service\nexport INFISICAL_TOKEN_SERVICE_A=$(infisical login --method=universal-auth --client-id=<your-client-id> --client-secret=<your-client-secret> --silent --plain)\nexport INFISICAL_TOKEN_SERVICE_B=$(infisical login --method=universal-auth --client-id=<your-client-id> --client-secret=<your-client-secret> --silent --plain)\n\n# Then run your compose file in the same terminal.\ndocker-compose ...\n```\n\n----------------------------------------\n\nTITLE: Initialize Node Project\nDESCRIPTION: Command to create a new Node.js project with a default package.json file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/node.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets with Infisical Go SDK\nDESCRIPTION: Demonstrates how to list all secrets within a specific project, environment, and secret path using the Infisical Go SDK.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsecrets, err := client.Secrets().List(infisical.ListSecretsOptions{\n  ProjectID:          \"PROJECT_ID\",\n  Environment:        \"dev\",\n  SecretPath:         \"/foo/bar\",\n  AttachToProcessEnv: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Server Principal for Infisical\nDESCRIPTION: SQL commands to create a dedicated server login and database user for Infisical to connect to Microsoft SQL Server. The script creates the login, grants connect permission, optional permission for Platform Managed Credentials, and creates a database user.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/mssql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Create login at the server level\nCREATE LOGIN [infisical_app] WITH PASSWORD = 'my-password';\n\n-- Grant server-level connect permission\nGRANT CONNECT SQL TO [infisical_app];\n\n-- If you intend to use Platform Managed Credentials (see below)\nGRANT ALTER ANY LOGIN TO [infisical_app];\n\n-- Switch to the specific database where you want to create the user\nUSE my_database;\n\n-- Create the database user mapped to the login\nCREATE USER [infisical_app] FOR LOGIN [infisical_app];\n```\n\n----------------------------------------\n\nTITLE: Symmetric Encryption with Infisical Python SDK\nDESCRIPTION: Demonstrates symmetric encryption using the Infisical SDK's cryptographic functions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nencryptOptions = EncryptSymmetricOptions(\n    key=key,\n    plaintext=\"Infisical is awesome!\"\n)\n\nencryptedData = client.encryptSymmetric(encryptOptions)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Host via Infisical SSH\nDESCRIPTION: Command for users to initiate an SSH connection to a remote host using Infisical's secure certificate-based authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical ssh connect\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Token with Expiry\nDESCRIPTION: This command creates a service token with a specified expiry time. It grants read access to the 'dev:/global' scope and sets the token to expire after 120 seconds.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninfisical service-token create --scope=dev:/global --access-level=read --expiry-seconds 120\n```\n\n----------------------------------------\n\nTITLE: AWS Parameter Store IAM Policy\nDESCRIPTION: This JSON policy defines the minimum IAM permissions required for Infisical to sync secrets to AWS Parameter Store. It includes permissions for putting, getting, and deleting parameters, as well as KMS permissions for encryption operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n{\n    \"Sid\": \"AllowSSMAccess\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n        \"ssm:PutParameter\",\n        \"ssm:GetParameters\",\n        \"ssm:GetParametersByPath\",\n        \"ssm:DescribeParameters\",\n        \"ssm:DeleteParameters\",\n        \"ssm:ListTagsForResource\", // if you need to add tags to secrets\n        \"ssm:AddTagsToResource\", // if you need to add tags to secrets\n        \"ssm:RemoveTagsFromResource\", // if you need to add tags to secrets\n        \"kms:ListAliases\", // if you need to specify the KMS key\n        \"kms:Encrypt\", // if you need to specify the KMS key\n        \"kms:Decrypt\", // if you need to specify the KMS key\n        \"kms:DescribeKey\" // if you need to specify the KMS key\n    ],\n    \"Resource\": \"*\"\n}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using volumes to Mount Managed Secrets as Files\nDESCRIPTION: Configuration snippet showing how to create a volume that contains files with secrets from a managed Kubernetes secret, making them accessible as files in the container filesystem.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: secrets-volume-name # The name of the volume under which secrets will be stored\n    secret:\n      secretName: managed-secret # managed secret name\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Baseline Scans\nDESCRIPTION: Commands for creating and applying baseline scans to identify only new security issues.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan --report-path leaks-report.json\ninfisical scan --baseline-path leaks-report.json --report-path findings.json\n```\n\n----------------------------------------\n\nTITLE: Complete Deployment Using envFrom with ConfigMap\nDESCRIPTION: Full example of a Kubernetes deployment that uses envFrom to reference a managed ConfigMap.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        envFrom:\n        - configMapRef:\n            name: managed-configmap # <- name of managed configmap\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Provider with OIDC Authentication\nDESCRIPTION: Terraform configuration for the Infisical provider using OIDC authentication. Demonstrates how to reference the injected workload identity token and specify the identity ID and host settings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/terraform-cloud.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"infisical\" {\n  host = \"https://app.infisical.com\"\n\n  auth = {\n    oidc = {\n      identity_id = \"<identity-id>\"\n      # This must match the environment variable Terraform injects:\n      token_environment_variable_name = \"TFC_WORKLOAD_IDENTITY_TOKEN\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Secrets with Go SDK\nDESCRIPTION: Demonstrates how to update an existing secret in Infisical using the Go SDK. Requires project ID, environment, secret key and new value parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nsecret, err := client.Secrets().Update(infisical.UpdateSecretOptions{\n  ProjectID:                \"PROJECT_ID\",\n  Environment:              \"dev\",\n  SecretKey:                \"NEW_SECRET_KEY\",\n  NewSecretValue:           \"NEW_SECRET_VALUE\",\n  NewSkipMultilineEncoding: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Secret from Infisical\nDESCRIPTION: Deletes a secret from the specified project and environment. Supports path specification and secret type selection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nDeleteSecretOptions options = new DeleteSecretOptions();\n\noptions.setSecretName(\"SECRET_TO_DELETE\");\noptions.setEnvironment(\"dev\");\noptions.setProjectID(\"PROJECT_ID\");\noptions.setPath(\"/\"); // Default\noptions.setType(\"shared\"); // Default\n\nDeleteSecretResponseSecret deletedSecret = client.deleteSecret(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring EFS Volume with Terraform\nDESCRIPTION: Terraform configuration for creating an Amazon Elastic File System (EFS) and mounting it to private subnets for secret storage shared between containers.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ecs-with-agent.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_efs_file_system\" \"infisical_efs\" {\n  tags = {\n    Name = \"INFISICAL-ECS-EFS\"\n  }\n}\n\nresource \"aws_efs_mount_target\" \"mount\" {\n  count           = length(aws_subnet.private.*.id)\n  file_system_id  = aws_efs_file_system.infisical_efs.id\n  subnet_id       = aws_subnet.private[count.index].id\n  security_groups = [aws_security_group.efs_sg.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Folders in Infisical using Go SDK\nDESCRIPTION: Updates an existing folder in Infisical by specifying the folder ID and new name. Requires project ID, environment, folder ID, and new name parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfolder, err := client.Folders().Update(infisical.UpdateFolderOptions{\n  ProjectID:   \"PROJECT_ID\",\n  Environment: \"dev\",\n  Path:        \"/\",\n  FolderID:    \"FOLDER_ID_TO_UPDATE\",\n  NewName:     \"new-folder-name\",\n})\n```\n\n----------------------------------------\n\nTITLE: Labeling Docker Swarm Nodes\nDESCRIPTION: These commands label the nodes in the Docker Swarm to specify their roles. This helps in deploying stateful components like Postgres and Redis to specific nodes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-swarm.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker node update --label-add name=node1 <NODE1_ID>\ndocker node update --label-add name=node2 <NODE2_ID>\ndocker node update --label-add name=node3 <NODE3_ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Secrets in Snowflake\nDESCRIPTION: Configuration parameters and steps required to set up dynamic secret generation for Snowflake credentials. Includes account setup, user management, and SQL statement customization options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/snowflake.mdx#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Applying the InfisicalDynamicSecret CRD to Kubernetes\nDESCRIPTION: A command to apply the InfisicalDynamicSecret CRD configuration to a Kubernetes cluster using kubectl.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f dynamic-secret-crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Operator Cluster-Wide (Bash)\nDESCRIPTION: Installs the Infisical Secrets Operator chart from the 'infisical-helm-charts' repository using Helm. The `--generate-name` flag automatically creates a unique release name. This command installs the operator with cluster-wide permissions by default. Requires Helm CLI and sufficient Kubernetes cluster permissions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --generate-name infisical-helm-charts/secrets-operator\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Task Definition with Terraform\nDESCRIPTION: Terraform configuration for an ECS task definition that includes mounting an EFS volume and setting up container definitions with the Infisical Agent sidecar configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ecs-with-agent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n...snip...\nresource \"aws_ecs_task_definition\" \"app\" {\n  family                   = \"cb-app-task\"\n  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn\n  task_role_arn            = aws_iam_role.ecs_task_role.arn\n  network_mode             = \"awsvpc\"\n  requires_compatibilities = [\"FARGATE\"]\n  cpu                      = 4096\n  memory                   = 8192\n  container_definitions = templatefile(\"./templates/ecs/cb_app.json.tpl\", {\n    app_image           = var.app_image\n    sidecar_image       = var.sidecar_image\n    app_port            = var.app_port\n    fargate_cpu         = var.fargate_cpu\n    fargate_memory      = var.fargate_memory\n    aws_region          = var.aws_region\n    machine_identity_id = \"5655f4f5-332b-45f9-af06-8f493edff36f\"\n    agent_config = base64encode(file(\"../agent-config.yaml\"))\n  })\n  volume {\n    name = \"infisical-efs\"\n    efs_volume_configuration {\n      file_system_id = aws_efs_file_system.infisical_efs.id\n      root_directory = \"/\"\n    }\n  }\n}\n...snip...\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI via NPM\nDESCRIPTION: Commands to install and update Infisical CLI using the NPM package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @infisical/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm update -g @infisical/cli\n```\n\n----------------------------------------\n\nTITLE: Start Node Application\nDESCRIPTION: Command to start the Node.js application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/node.mdx#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Accessing User Metadata in ABAC Policies\nDESCRIPTION: Template syntax for accessing user identity information and metadata attributes within ABAC policies. Shows how to reference user ID, username, and custom metadata attributes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/access-controls/abac/managing-user-metadata.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ identity.id }}\n{{ identity.username }}\n{{ identity.metadata.<metadata-key-name> }}\n```\n\n----------------------------------------\n\nTITLE: Getting Secret with Infisical C# Client\nDESCRIPTION: Demonstrates how to retrieve a secret from Infisical using the GetSecret method. The method fetches a shared secret by default and requires project ID, environment, and secret name parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new GetSecretOptions\n    {\n        SecretName = \"AAAA\",\n        ProjectId = \"659c781eb2d4fe3e307b77bd\",\n        Environment = \"dev\",\n    };\nvar secret = infisical.GetSecret(options);\n```\n\n----------------------------------------\n\nTITLE: Authentication Method Selection with Infisical CLI\nDESCRIPTION: Demonstrates how to specify the authentication method when logging into Infisical. Supports multiple methods including user, universal-auth, kubernetes, azure, GCP, and AWS IAM authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=<auth-method>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folders with Infisical CLI\nDESCRIPTION: Command to fetch all folders within a specified path in a project. Supports optional path specification and machine identity access token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets folders get --path=/some/path/to/folder\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Infisical Service Token\nDESCRIPTION: Bash command to run a Docker container with an Infisical service token passed as an environment variable, enabling the container to authenticate with Infisical using the deprecated service token method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --env INFISICAL_TOKEN=[token] [DOCKER-IMAGE]...\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with GCP ID Token Authentication (Python)\nDESCRIPTION: This example demonstrates how to configure the Infisical client using GCP ID Token authentication, which is specific to applications running on Google Cloud Platform.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom infisical_client import ClientSettings, InfisicalClient, AuthenticationOptions, GCPIDTokenAuthMethod\n\nclient = InfisicalClient(ClientSettings(\n    auth=AuthenticationOptions(\n        gcp_id_token=GCPIDTokenAuthMethod(\n            identity_id=\"MACHINE_IDENTITY_ID\",\n        )\n    )\n))\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI via Scoop on Windows\nDESCRIPTION: Commands to install and update Infisical CLI using the Scoop package manager on Windows.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscoop bucket add org https://github.com/Infisical/scoop-infisical.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nscoop install infisical\n```\n\nLANGUAGE: bash\nCODE:\n```\nscoop update infisical\n```\n\n----------------------------------------\n\nTITLE: Managing Infisical Secret Folders\nDESCRIPTION: This command allows you to fetch, create, and delete folders from within a path in a given project. It provides a way to organize and manage the structure of your secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets folders\n```\n\n----------------------------------------\n\nTITLE: Running a Flask Application with Infisical\nDESCRIPTION: Commands to start a Flask application with Infisical to inject environment variables. Infisical will load the secrets from your Infisical Cloud account before starting the Flask server.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/flask.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example \ninfisical run -- flask run\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Azure Auth in Infisical Agent - YAML\nDESCRIPTION: This YAML snippet provides configuration for the Infisical agent to authenticate via Azure using the 'azure' auth type. The main parameter required is 'identity-id', pointing to the machine identity file generated following the Infisical documentation. This method assumes that authentication is performed inside an Azure environment and that the identity-id file is present and valid.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  type: \"azure\"\n  config:\n    identity-id: \"./identity-id\" # Path to the file containing the machine identity ID\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Kubernetes Auth in Infisical Agent - YAML\nDESCRIPTION: This YAML example demonstrates how to configure the agent to use the 'kubernetes' authentication method with Infisical. It requires specifying file paths for the 'identity-id' (machine identity ID) and optionally a custom path for the Kubernetes service account token. By default, the service account token is read from /var/run/secrets/kubernetes.io/serviceaccount/token. This method is intended for deployments inside Kubernetes clusters where necessary secret files are present.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  type: \"kubernetes\"\n  config:\n    identity-id: \"./identity-id\" # Path to the file containing the machine identity ID\n    service-account-token: \"/var/run/secrets/kubernetes.io/serviceaccount/token\" # Optional field, custom path to the Kubernetes service account token to use\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Secrets Manager Sync via Infisical API using cURL - Bash\nDESCRIPTION: This code snippet demonstrates how to use a cURL POST request to create an AWS Secrets Manager Sync on the Infisical platform by targeting the designated /secret-syncs/aws-secrets-manager endpoint. Dependencies include cURL and an active Infisical environment with proper authentication (not included in this snippet). Required parameters are the sync name, projectId, connectionId, secret source path, destination region, environment, and behavioral options (such as initialSyncBehavior). The input is a JSON payload that describes the sync configuration, and, on success, a detailed JSON response describing the created sync is returned.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/aws-secrets-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/aws-secrets-manager \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-secrets-manager-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"region\": \"us-east-1\",\n        \"mappingBehavior\": \"one-to-one\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Applying Infisical Push Secret Configuration in Bash\nDESCRIPTION: Commands for applying the Infisical Push Secret CRD and source secret to a Kubernetes cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f source-push-secret.yaml\nkubectl apply -f example-infisical-push-secret-crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on Windows using Scoop\nDESCRIPTION: These commands add the Infisical bucket to Scoop and then install the Infisical CLI on Windows.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ scoop bucket add org https://github.com/Infisical/scoop-infisical.git\n```\n\nLANGUAGE: console\nCODE:\n```\n$ scoop install infisical\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Secrets for Production Deployment\nDESCRIPTION: This YAML snippet shows how to create a Kubernetes secret for a production Infisical installation, including database and Redis connection strings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/kubernetes-helm.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: infisical-secrets\ntype: Opaque\nstringData:\n  AUTH_SECRET: <>\n  ENCRYPTION_KEY: <>\n  REDIS_URL: <>\n  DB_CONNECTION_URI: <>\n  SITE_URL: <>\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Certificate Issuance (Bash)\nDESCRIPTION: Illustrates the JSON response structure from the Infisical API after successfully issuing a certificate. The response contains the PEM-encoded `certificate`, the `certificateChain`, the `issuingCaCertificate`, the certificate's `serialNumber`, and crucially, the `privateKey`. The private key is only provided at the time of issuance and must be stored securely.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n  certificate: \"...\",\n  certificateChain: \"...\",\n  issuingCaCertificate: \"...\",\n  privateKey: \"...\",\n  serialNumber: \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Infisical Secret CRD with kubectl\nDESCRIPTION: Command to apply the Infisical Secret CRD to your Kubernetes cluster. This creates a managed secret or config map based on your configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f example-infisical-secret-crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines to Use Infisical Secrets\nDESCRIPTION: This YAML configuration demonstrates how to set up a Bitbucket pipeline that fetches secrets from Infisical using the Infisical CLI. It shows the process of installing the CLI, authenticating with universal auth credentials, and running a build command with injected secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cicd/bitbucket.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: atlassian/default-image:3\n\npipelines:\n  default:\n    - step:\n        name: Build application with secrets from Infisical\n        script:\n          - apt update && apt install -y curl\n          - curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | bash\n          - apt-get update && apt-get install -y infisical\n          - export INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$INFISICAL_CLIENT_ID --client-secret=$INFISICAL_CLIENT_SECRET --silent --plain)\n          - infisical run --projectId=1d0443c1-cd43-4b3a-91a3-9d5f81254a89 --env=dev -- npm run build\n```\n\n----------------------------------------\n\nTITLE: Running a NestJS Application with Infisical\nDESCRIPTION: Commands to start your NestJS application with Infisical, which injects the environment variables and secrets from your Infisical account into your application at runtime.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/nestjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run start:dev\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI in Debian/Ubuntu Dockerfile\nDESCRIPTION: This snippet shows how to add the Infisical CLI to a Dockerfile using Debian or Ubuntu as the base image. It installs necessary dependencies, downloads the setup script, and uses apt-get to install the Infisical package.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y bash curl && curl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | bash \\\n&& apt-get update && apt-get install -y infisical\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Native AWS IAM in Infisical CLI\nDESCRIPTION: Command to log in using Native AWS IAM method. It requires a machine identity ID for authentication in an AWS environment like EC2 or Lambda.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=aws-iam --machine-identity-id=<machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Batch Creating Secrets with Go SDK\nDESCRIPTION: Demonstrates how to create multiple secrets at once in Infisical using the Go SDK. Supports creating multiple secrets with their respective values and optional metadata.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ncreatedSecrets, err := client.Secrets().Batch().Create(infisical.BatchCreateSecretsOptions{\n\t\tEnvironment: \"<environment-slug>\",\n\t\tSecretPath:  \"<secret-path>\",\n\t\tProjectID:   \"<project-id>\",\n\t\tSecrets: []infisical.BatchCreateSecret{\n\t\t\t{\n\t\t\t\tSecretKey:   \"SECRET-1\",\n\t\t\t\tSecretValue: \"test-value-1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tSecretKey:   \"SECRET-2\",\n\t\t\t\tSecretValue: \"test-value-2\",\n\t\t\t},\n\t\t},\n\t})\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Token Refreshing in Infisical Go SDK\nDESCRIPTION: Demonstrates how to disable automatic token refreshing when initializing the Infisical client.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n  client := infisical.NewInfisicalClient(context.Background(), infisical.Config{\n    AutoTokenRefresh: false, // <- Disable automatic token refreshing\n  })\n```\n\n----------------------------------------\n\nTITLE: Importing Intermediate CA Certificate\nDESCRIPTION: API request to import the signed certificate and certificate chain back to the intermediate CA.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/ca/<intermediate-ca-id>/import-certificate' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"certificate\": \"<certificate>\",\n      \"certificateChain\": \"<certificate-chain>\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets with Infisical Client\nDESCRIPTION: Retrieves all secrets from a specified project and environment with configurable options for path, imports, and secret references.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nListSecretsOptions options = new ListSecretsOptions();\noptions.setEnvironment(\"dev\");\noptions.setProjectID(\"PROJECT_ID\");\noptions.setPath(\"/foo/bar\");\noptions.setIncludeImports(false);\noptions.setRecursive(false);\noptions.setExpandSecretReferences(true);\n\nSecretElement[] secrets = client.listSecrets(options);\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Template Structure in Golang\nDESCRIPTION: Golang struct definition for the TemplateSecret type used in secret templating. This structure defines the format of secrets that can be accessed within templates.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_27\n\nLANGUAGE: golang\nCODE:\n```\ntype TemplateSecret struct {\n    Value      string `json:\"value\"`\n    SecretPath string `json:\"secretPath\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Infisical ConfigMap Configuration\nDESCRIPTION: Command to apply the Infisical configuration YAML file using kubectl.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f infisical-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Azure App Configuration Sync via Infisical API (Bash)\nDESCRIPTION: This Bash code snippet demonstrates how to initiate an Azure App Configuration Secret Sync using Infisical's REST API. Requires 'curl' and access to an Infisical workspace, with a valid project, connection, and appropriate permissions. The JSON body includes parameters like sync name, project and connection IDs, environment, secret path, and destination settings. Input is a POST request with configuration details; output is the API's JSON response containing the created sync's properties.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/azure-app-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/azure-app-configuration \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-azure-app-configuration-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n      \"configurationUrl\": \"https://my-azure-app-configuration.azconfig.io\",\n      \"label\": \"my-label\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Constructing a Signed AWS STS GetCallerIdentity Request (Node.js)\nDESCRIPTION: This JavaScript code demonstrates the construction and signing of an AWS STS GetCallerIdentity request using AWS SDK in Node.js. It initializes request parameters and headers, computes the content length, and uses AWS.Signers.V4 to sign the request. Required dependencies: 'aws-sdk' and Node.js Buffer module. Inputs are AWS credentials and region; outputs are signed request headers and bodies for secure authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/aws-auth.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst AWS = require(\"aws-sdk\");\n\nconst region = \"<your-aws-region>\";\nconst infisicalUrl = \"https://app.infisical.com\"; // or your self-hosted Infisical URL\n\nconst iamRequestURL = `https://sts.${region}.amazonaws.com/`;\nconst iamRequestBody = \"Action=GetCallerIdentity&Version=2011-06-15\";\nconst iamRequestHeaders = {\n    \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n    Host: `sts.${region}.amazonaws.com`\n};\n\nconst request = new AWS.HttpRequest(new AWS.Endpoint(iamRequestURL), region);\nrequest.method = \"POST\";\nrequest.headers = iamRequestHeaders;\nrequest.headers[\"X-Amz-Date\"] = AWS.util.date.iso8601(new Date()).replace(/[:-]|\\.\\d{3}/g, \"\");\nrequest.body = iamRequestBody;\nrequest.headers[\"Content-Length\"] = Buffer.byteLength(iamRequestBody);\n\nconst signer = new AWS.Signers.V4(request, \"sts\");\nsigner.addAuthorization(AWS.config.credentials, new Date());\n```\n\n----------------------------------------\n\nTITLE: Configuring destination in InfisicalPushSecret CRD\nDESCRIPTION: This example illustrates how to set up the destination field in the InfisicalPushSecret CRD. It specifies where secrets should be created in Infisical, including project ID, environment slug, and secrets path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  destination:\n    projectId: <project-id>\n    environmentSlug: <env-slug>\n    secretsPath: <secrets-path>\n```\n\n----------------------------------------\n\nTITLE: API Request for Creating a Root CA in Infisical\nDESCRIPTION: This code shows how to create a root CA in Infisical using the API. The request includes the CA configuration with name, description, key algorithm details, validity period, and subject information.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/ca' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"name\": \"Root CA\",\n      \"description\": \"This is our company root CA\",\n      \"keyAlgorithm\": \"rsa\",\n      \"keyBits\": 4096,\n      \"notBefore\": \"2023-06-12\",\n      \"notAfter\": \"2026-06-12\",\n      \"subject\": {\n          \"commonName\": \"Root CA\",\n          \"organization\": \"My Company\",\n          \"organizationalUnit\": \"Platform\",\n          \"country\": \"CA\"\n      }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Using env to Select Individual Secrets from Managed Secret\nDESCRIPTION: Configuration snippet showing how to use env to select individual secrets by key name from a managed secret and expose them as specific environment variables in a container.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: SECRET_NAME # The environment variable's name which is made available in the container\n    valueFrom:\n      secretKeyRef:\n        name: managed-secret # managed secret name\n        key: SOME_SECRET_KEY # The name of the key which exists in the managed secret\n```\n\n----------------------------------------\n\nTITLE: Installing Namespace-Scoped Operator (First Instance) (Bash)\nDESCRIPTION: Installs the Infisical Secrets Operator restricted to a specific namespace (`first-namespace`) using Helm. This is intended as the first namespace-scoped installation, so it includes CRD installation (default behavior). It sets `scopedNamespace` to limit watching resources and `scopedRBAC` to true for namespace-specific roles. Requires Helm CLI and cluster permissions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# First namespace installation (with CRDs)\nhelm install operator-namespace1 infisical-helm-charts/secrets-operator \\\n  --namespace first-namespace \\\n  --set scopedNamespace=first-namespace \\\n  --set scopedRBAC=true\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical Client in C#\nDESCRIPTION: Sets up the Infisical client with necessary configuration settings including client ID and secret. Shows how to retrieve a secret using the Infisical SDK.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/microsoft-power-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new ClientSettings\n{\n    ClientId = \"CLIENT_ID\",\n    ClientSecret = \"CLIENT_SECRET\",\n    // SiteUrl = \"http://localhost:8080\", <-- This line can be omitted if you're using Infisical Cloud.\n};\nvar infisical = new InfisicalClient(settings);\n\nvar options = new GetSecretOptions\n{\n    SecretName = \"TEST\",\n    ProjectId = \"PROJECT_ID\",\n    Environment = \"dev\",\n};\nvar secret = infisical.GetSecret(options);\n```\n\n----------------------------------------\n\nTITLE: Custom Scan Configuration File\nDESCRIPTION: TOML configuration file for customizing secret scanning rules, allowlists, and detection patterns.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Title for the configuration file\ntitle = \"Some title\"\n\n[extend]\nuseDefault = true\npath = \"common_config.toml\"\n\n[[rules]]\nid = \"some-identifier-for-rule\"\ndescription = \"awesome rule 1\"\nregex = '''one-go-style-regex-for-this-rule'''\npath = '''a-file-path-regex'''\ntags = [\"tag\",\"another tag\"]\nsecretGroup = 3\nentropy = 3.5\nkeywords = [\n\t\"auth\",\n\t\"password\",\n\t\"token\",\n]\n```\n\n----------------------------------------\n\nTITLE: Starting a Fiber Application with Infisical\nDESCRIPTION: Start your Fiber application with Infisical to inject environment variables and secrets into your application at runtime.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/fiber.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example \ninfisical run -- go run server.go\n```\n\n----------------------------------------\n\nTITLE: Creating Root CA via API Request\nDESCRIPTION: API request to create a root Certificate Authority with basic configuration including project slug and common name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/ca' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"projectSlug\": \"<your-project-slug>\",\n      \"type\": \"root\",\n      \"commonName\": \"My Root CA\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with Kubernetes Authentication (Python)\nDESCRIPTION: This example shows how to configure the Infisical client using Kubernetes authentication, which is specific to applications running on Kubernetes and requires a machine identity ID and optionally a path to the service account token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom infisical_client import InfisicalClient, ClientSettings, AuthenticationOptions, KubernetesAuthMethod\n\nkubernetes_client = InfisicalClient(ClientSettings(\n    auth=AuthenticationOptions(\n        kubernetes=KubernetesAuthMethod(\n            identity_id=\"YOUR_IDENTITY_ID\",\n            service_account_token_path=\"/var/run/secrets/kubernetes.io/serviceaccount/token\" # Optional\n        )\n    )\n))\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Application with Infisical\nDESCRIPTION: This snippet shows how to start a Remix application using Infisical to inject environment variables. It uses the 'infisical run' command followed by the usual application start command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/remix.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Ephemeral Resources for Secret Management\nDESCRIPTION: Fetch database credentials using ephemeral resources, which ensures sensitive values are never persisted in state files. This is the recommended approach for enhanced security.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/terraform.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Fetch database credentials ephemerally\nephemeral \"infisical_secret\" \"db_creds\" {\n  name         = \"DB_CREDENTIALS\"\n  env_slug     = \"prod\"\n  workspace_id = var.infisical_workspace_id\n  folder_path  = \"/database\"\n}\n\n# Use the credentials to configure a provider\nprovider \"postgresql\" {\n  host     = data.aws_db_instance.example.address\n  port     = data.aws_db_instance.example.port\n  username = jsondecode(ephemeral.infisical_secret.db_creds.value)[\"username\"]\n  password = jsondecode(ephemeral.infisical_secret.db_creds.value)[\"password\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Source Secret in YAML\nDESCRIPTION: Defines a Kubernetes Secret that contains the secrets to be pushed to Infisical. This example includes API key, database URL, and encryption key values that will be managed by the InfisicalPushSecret CRD.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: push-secret-demo\n  namespace: default\nstringData: # can also be \"data\", but needs to be base64 encoded\n  API_KEY: some-api-key\n  DATABASE_URL: postgres://127.0.0.1:5432\n  ENCRYPTION_KEY: fabcc12-a22-facbaa4-11aa568aab\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets with Infisical Client (Python)\nDESCRIPTION: This snippet demonstrates how to use the listSecrets method of the Infisical client to retrieve all secrets within a specific project and environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclient.listSecrets(options=ListSecretsOptions(\n    environment=\"dev\",\n    project_id=\"PROJECT_ID\"\n))\n```\n\n----------------------------------------\n\nTITLE: Fetching Project ID from URL in Infisical\nDESCRIPTION: This snippet demonstrates how to obtain the Project ID from the Infisical web application URL. The Project ID is a crucial identifier for various CLI operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.infisical.com/project/<your_project_id>/settings\n```\n\n----------------------------------------\n\nTITLE: Configuring Native AWS IAM Auth in Infisical Agent - YAML\nDESCRIPTION: This YAML snippet configures the Infisical agent to use AWS IAM authentication in cloud native AWS environments such as EC2 or Lambda. The only required parameter is 'identity-id', pointing to the file that holds the machine identity ID as outlined by the Infisical AWS authentication workflow. This declaration assumes the necessary identity file exists and the agent is running with necessary IAM role permissions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  type: \"aws-iam\"\n  config:\n    identity-id: \"./identity-id\" # Path to the file containing the machine identity ID\n```\n\n----------------------------------------\n\nTITLE: Azure Auth Login in Infisical Go SDK\nDESCRIPTION: Demonstrates how to perform Azure Auth login using the Infisical Go SDK, which is specific to applications running on Azure.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n_, err = client.Auth().AzureAuthLogin(\"MACHINE_IDENTITY_ID\")\n\nif err != nil {\n  fmt.Println(err)\n  os.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Docker Container with Infisical Token\nDESCRIPTION: This console command demonstrates how to run a Docker container with an Infisical token. The token is passed as an environment variable to allow the container to fetch secrets from Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker run --env INFISICAL_TOKEN=<your_infisical_token> <DOCKER-IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Listing Folders with Go SDK\nDESCRIPTION: Shows how to list all folders within an Infisical project and environment using the Go SDK. Requires project ID, environment, and path parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfolders, err := client.Folders().List(infisical.ListFoldersOptions{\n  ProjectID:   \"PROJECT_ID\",\n  Environment: \"dev\",\n  Path:        \"/\",\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Data with KMS in Infisical using Go SDK\nDESCRIPTION: Signs data using a specified KMS key. Requires base64 encoded data and supports different signing algorithms.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.Kms().Signing().SignData(infisical.KmsSignDataOptions{\n  KeyId:            \"<key-id>\",\n  Data:             \"<data-to-sign>\", // Must be a base64 encoded string.\n  SigningAlgorithm: \"<signing-algorithm>\", // The signing algorithm that will be used to sign the data.\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Gateway as Systemd Service\nDESCRIPTION: Commands to install and start the Infisical Gateway as a systemd service in production environments. Requires Linux with systemd and root privileges.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/gateways/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo infisical gateway install --token <your-machine-identity-token> --domain <your-infisical-domain>\nsudo systemctl start infisical-gateway\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment with Auto-Reload\nDESCRIPTION: Example of a Kubernetes deployment configuration with auto-reload functionality enabled for dynamic secrets management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\n  annotations: \n    secrets.infisical.com/auto-reload: \"true\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        envFrom:\n        - secretRef:\n            name: managed-secret\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Auth Login in Infisical Go SDK\nDESCRIPTION: Shows how to perform AWS IAM Auth login using the Infisical Go SDK, which is specific to applications running on AWS.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n_, err = client.Auth().AwsIamAuthLogin(\"MACHINE_IDENTITY_ID\")\n\nif err != nil {\n  fmt.Println(err)\n  os.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Extract Token Using jq\nDESCRIPTION: Command to extract just the machine identity token from the bootstrap response using jq.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninfisical bootstrap --domain=https://your-infisical-instance.com --email=admin@example.com --password=your-secure-password --organization=your-org-name | jq \".identity.credentials.token\"\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Script\nDESCRIPTION: This command runs the migration script to transform MongoDB data into PostgreSQL format.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run migration\n```\n\n----------------------------------------\n\nTITLE: InfisicalSecret with Labels and Annotations\nDESCRIPTION: Example showing how to add labels and annotations to an InfisicalSecret CRD that will be propagated to the managed secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample\n  labels:\n    label-to-be-passed-to-managed-secret: sample-value\n  annotations:\n    example.com/annotation-to-be-passed-to-managed-secret: \"sample-value\"\nspec:\n  ..\n  authentication:\n    ...\n  managedKubeSecretReferences:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Namespace-Scoped Operator (Subsequent Instance) (Bash)\nDESCRIPTION: Installs an additional instance of the Infisical Secrets Operator restricted to another namespace (`another-namespace`). Crucially, it sets `installCRDs=false` to prevent conflicts, as CRDs are cluster-scoped and should only be installed once. It also sets `scopedNamespace` and `scopedRBAC` for isolation. Requires Helm CLI and cluster permissions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Subsequent namespace installations\nhelm install operator-namespace2 infisical-helm-charts/secrets-operator \\\n  --namespace another-namespace \\\n  --set scopedNamespace=another-namespace \\\n  --set scopedRBAC=true \\\n  --set installCRDs=false\n```\n\n----------------------------------------\n\nTITLE: Creating Folders in Infisical using Go SDK\nDESCRIPTION: Creates a new folder in Infisical with specified project ID, name, environment, and path. Requires project ID and environment parameters, while path is optional.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfolder, err := client.Folders().Create(infisical.CreateFolderOptions{\n  ProjectID:   \"PROJECT_ID\",\n  Name:        \"new=folder-name\",\n  Environment: \"dev\",\n  Path:        \"/\",\n})\n```\n\n----------------------------------------\n\nTITLE: GCP Service Account Key Authentication\nDESCRIPTION: Shows how to authenticate using a GCP service account key file path. Required for GCP IAM authentication method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --service-account-key-file-path=<gcp-service-account-key-file-path>\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in Ruby on Rails Project\nDESCRIPTION: Navigate to your project root directory and initialize Infisical to set up the configuration for your Rails application. This creates the necessary configuration files for Infisical in your project.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/rails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Resulting Managed Secret with Propagated Labels and Annotations\nDESCRIPTION: Shows how labels and annotations from an InfisicalSecret CRD are propagated to the resulting managed Kubernetes Secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata: ...\nkind: Secret\nmetadata:\n  annotations:\n    example.com/annotation-to-be-passed-to-managed-secret: sample-value\n    secrets.infisical.com/version: W/\"3f1-ZyOSsrCLGSkAhhCkY2USPu2ivRw\"\n  labels:\n    label-to-be-passed-to-managed-secret: sample-value\n  name: managed-token\n  namespace: default\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical Client with Kubernetes Authentication\nDESCRIPTION: Sets up the Infisical client using Kubernetes authentication method. Requires a valid Kubernetes identity ID and optional service account token path configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n  ClientSettings settings = new ClientSettings();\n  AuthenticationOptions authOptions = new AuthenticationOptions();\n  KubernetesAuthMethod authMethod = new KubernetesAuthMethod();\n\n  authMethod.setIdentityID(\"YOUR_IDENTITY_ID\");\n  authMethod.setServiceAccountTokenPath(\"/var/run/secrets/kubernetes.io/serviceaccount/token\"); // Optional\n\n  authOptions.setKubernetes(authMethod);\n  settings.setAuth(authOptions);\n\n  InfisicalClient client = new InfisicalClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a Nuxt Project\nDESCRIPTION: This command initializes Infisical in your Nuxt project directory. It sets up the necessary configuration to connect your project with Infisical's secret management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/nuxt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Java SDK Client\nDESCRIPTION: This snippet shows how to import the Infisical SDK and create a client instance with Universal Auth. It demonstrates setting up client settings, authentication options, and creating the Infisical client.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.infisical.sdk.InfisicalClient;\nimport com.infisical.sdk.schema.*;\n\npublic class App {\n    public static void main(String[] args) {\n        // Create the authentication settings for the client\n        ClientSettings settings = new ClientSettings();\n        AuthenticationOptions authOptions = new AuthenticationOptions();\n        UniversalAuthMethod authMethod = new UniversalAuthMethod();\n\n        authMethod.setClientID(\"YOUR_IDENTITY_ID\");\n        authMethod.setClientSecret(\"YOUR_CLIENT_SECRET\");\n\n        authOptions.setUniversalAuth(authMethod);\n        settings.setAuth(authOptions);\n\n        // Create a new Infisical Client\n        InfisicalClient client = new InfisicalClient(settings); // Your client!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Connection via API Request\nDESCRIPTION: This bash snippet demonstrates how to create an AWS connection using the Assume Role method via the Infisical API. It includes the necessary headers and JSON payload with connection details.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n        --url https://app.infisical.com/api/v1/app-connections/aws \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n            \"name\": \"my-aws-connection\",\n            \"method\": \"assume-role\",\n            \"credentials\": {\n                \"roleArn\": \"...\",\n            }\n        }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Templating with Infisical Operator\nDESCRIPTION: Example of how to use secret templating with the Infisical operator. This snippet shows how to create new secret keys and override existing ones using Go templates.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nmanagedKubeSecretReferences:\n  - secretName: managed-secret\n    secretNamespace: default\n    template:\n      includeAllSecrets: true\n      data:\n        # Create new secret key that doesn't exist in your Infisical project using values of other secrets\n        NEW_KEY: \"{{ .DB_PASSWORD.Value }}\"\n        # Override an existing secret key in Infisical project with a new value using values of other secrets\n        API_URL: \"https://api.{{.COMPANY_NAME.Value}}.{{.REGION.Value}}.com\"\n```\n\n----------------------------------------\n\nTITLE: Adding Infisical Helm Repository\nDESCRIPTION: These commands add the Infisical Helm repository and update the local repository cache.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/kubernetes-helm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add infisical-helm-charts 'https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/'\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring Native GCP ID Token Auth in Infisical Agent - YAML\nDESCRIPTION: This YAML example details the configuration for authenticating the Infisical agent using GCP's ID Token method. The required 'identity-id' parameter should point to the appropriate file path containing the GCP machine identity ID. This approach is designed for deployments in GCP environments where agent authentication is required using GCP-provided identity tokens.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  type: \"gcp-id-token\"\n  config:\n    identity-id: \"./identity-id\" # Path to the file containing the machine identity ID\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database Connection from Environment Variables\nDESCRIPTION: Gradle configuration that sets a system property for database URL using an environment variable injected by Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    systemProperty 'db.url', System.getenv('DB_URL')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI in AWS Amplify Pre-Build Phase\nDESCRIPTION: YAML configuration for installing the Infisical CLI during the pre-build phase of AWS Amplify deployment. This allows the build process to access the Infisical CLI tool for retrieving secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cloud/aws-amplify.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  phases:\n    preBuild:\n      commands:\n- sudo curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.rpm.sh' | sudo -E bash\n- sudo yum -y install infisical\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Ansible Collection from Galaxy\nDESCRIPTION: Installs the Infisical collection from Ansible Galaxy using the ansible-galaxy CLI command. This is the first step to integrate Infisical with your Ansible automation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ansible.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ansible-galaxy collection install infisical.vault\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamicSecret Properties for InfisicalDynamicSecret in Kubernetes\nDESCRIPTION: This YAML configuration specifies the details of the dynamic secret to create leases for, including the secret name, project ID, environment slug, and secrets path within the Infisical project.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  dynamicSecret:\n    secretName: <dynamic-secret-name>\n    projectId: <project-id>\n    environmentSlug: <env-slug>\n    secretsPath: <secrets-path>\n```\n\n----------------------------------------\n\nTITLE: Starting KMIP Server with Infisical CLI\nDESCRIPTION: Command to launch the KMIP server with required configuration parameters including machine identity credentials, domain, and hostname settings. The command supports various optional flags for customizing server behavior, authentication methods, and certificate management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/kmip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical kmip start \\\n  --identity-client-id=<machine-identity-client-id> \\ # This can be set by defining the INFISICAL_UNIVERSAL_AUTH_CLIENT_ID ENV variable\n  --identity-client-secret=<machine-identity-client-secret> \\ # This can be set by defining the INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET ENV variable\n  --domain=https://app.infisical.com \\\n  --hostnames-or-ips=\"my-kmip-server.com\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical for Remix Application\nDESCRIPTION: This snippet demonstrates how to navigate to the project root and initialize Infisical for a Remix application. It's the first step in setting up Infisical for environment variable management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/remix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Using Infisical Secret Lookup in Ansible Playbooks\nDESCRIPTION: Example of how to use the Infisical lookup plugin in Ansible playbooks to read secrets. Shows how to retrieve all secrets within a scope and how to read a specific secret by name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ansible.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n---\nvars:\n  read_all_secrets_within_scope: \"{{ lookup('infisical.vault.read_secrets', universal_auth_client_id='<>', universal_auth_client_secret='<>', project_id='<>', path='/', env_slug='dev', url='https://spotify.infisical.com') }}\"\n  # [{ \"key\": \"HOST\", \"value\": \"google.com\" }, { \"key\": \"SMTP\", \"value\": \"gmail.smtp.edu\" }]\n\n  read_secret_by_name_within_scope: \"{{ lookup('infisical.vault.read_secrets', universal_auth_client_id='<>', universal_auth_client_secret='<>', project_id='<>', path='/', env_slug='dev', secret_name='HOST', url='https://spotify.infisical.com') }}\"\n  # [{ \"key\": \"HOST\", \"value\": \"google.com\" }]\n```\n\n----------------------------------------\n\nTITLE: Running Rails Application with Infisical\nDESCRIPTION: Start your Rails application with Infisical to inject the environment variables and secrets. The command uses Infisical to load environment variables before executing your application's start command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/rails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example \ninfisical run -- bin/rails server\n```\n\n----------------------------------------\n\nTITLE: Referencing ConfigMap Using envFrom in Kubernetes\nDESCRIPTION: Shows how to expose all secrets from a managed ConfigMap to a container using envFrom.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nenvFrom:\n  - configMapRef:\n      name: managed-configmap # managed configmap name\n```\n\n----------------------------------------\n\nTITLE: Defining Required Environment Variables for Self-Hosted Infisical OIDC SSO\nDESCRIPTION: Specifies the necessary environment variables (`AUTH_SECRET`, `SITE_URL`) for self-hosted Infisical instances when configuring OIDC SSO. `AUTH_SECRET` is used for signing and verifying JWTs, and `SITE_URL` provides the absolute URL of the instance, including the protocol.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/general-oidc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- `AUTH_SECRET`: A secret key used for signing and verifying JWT. This\\n  can be a random 32-byte base64 string generated with `openssl rand -base64\\n  32`.\\n- `SITE_URL`: The absolute URL of your self-hosted instance of Infisical including the protocol (e.g. https://app.infisical.com)\n```\n\n----------------------------------------\n\nTITLE: Starting Infisical Docker Container\nDESCRIPTION: This command starts the Infisical Docker container with necessary environment variables. It maps port 80 to the container's port 8080 and sets required configuration values. The user needs to replace placeholder values for DB_CONNECTION_URI, REDIS_URL, SITE_URL, and the image version.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/standalone-infisical.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 80:8080  \\\n-e ENCRYPTION_KEY=f40c9178624764ad85a6830b37ce239a \\\n-e AUTH_SECRET=\"q6LRi7c717a3DQ8JUxlWYkZpMhG4+RHLoFUVt3Bvo2U=\" \\\n-e DB_CONNECTION_URI=\"<>\" \\\n-e REDIS_URL=\"<>\" \\\n-e SITE_URL=\"<>\" \\\ninfisical/infisical:<version>\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Symmetric Key in Java\nDESCRIPTION: Decrypts ciphertext using the symmetric key, initialization vector, and authentication tag. Returns the original plaintext string.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nDecryptSymmetricOptions decryptOptions = new DecryptSymmetricOptions();\ndecryptOptions.setKey(key);\ndecryptOptions.setCiphertext(encryptedData.getCiphertext());\ndecryptOptions.setIv(encryptedData.getIv());\ndecryptOptions.setTag(encryptedData.getTag());\n\nString decryptedString = client.decryptSymmetric(decryptOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring universalAuth in InfisicalPushSecret CRD\nDESCRIPTION: These examples show how to set up universal authentication in the InfisicalPushSecret CRD and the corresponding Kubernetes Secret for storing credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# infisical-push-secret.yaml\nspec:\n  universalAuth:\n    credentialsRef:\n      secretName: <secret-name> \n      secretNamespace: <secret-namespace>\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# machine-identity-credentials.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: universal-auth-credentials\ntype: Opaque\nstringData:\n  clientId: <machine-identity-client-id>\n  clientSecret: <machine-identity-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with AWS IAM Authentication (Python)\nDESCRIPTION: This example demonstrates how to configure the Infisical client using AWS IAM authentication, which is specific to applications running on AWS and requires a machine identity ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom infisical_client import ClientSettings, InfisicalClient, AuthenticationOptions, AWSIamAuthMethod\n\nclient = InfisicalClient(ClientSettings(\n    auth=AuthenticationOptions(\n        aws_iam=AWSIamAuthMethod(identity_id=\"MACHINE_IDENTITY_ID\")\n    )\n))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Key Vault Connection by Name using REST API\nDESCRIPTION: An OpenAPI endpoint specification for retrieving Azure Key Vault connection details by the connection name. The endpoint follows RESTful conventions using a GET request to path /api/v1/app-connections/azure-key-vault/connection-name/{connectionName}.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/azure-key-vault/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/azure-key-vault/connection-name/{connectionName}\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Format for secrets.reminder-expired Event (JSON)\nDESCRIPTION: This JSON snippet shows the payload structure for an Infisical webhook triggered when a secret reminder expires. It includes the event type ('secrets.reminder-expired'), project details (workspace ID, environment, secret path), specific secret information (name, ID, reminder note), and a timestamp. This enables integrations to react to expiring secret reminders.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/webhooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"secrets.reminder-expired\",\n  \"project\": {\n    \"workspaceId\": \"the workspace id\",\n    \"environment\": \"project environment\",\n    \"secretPath\": \"project folder path\",\n    \"secretName\": \"name of the secret\",\n    \"secretId\": \"id of the secret\",\n    \"reminderNote\": \"reminder note of the secret\"\n  },\n  \"timestamp\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Infisical Secrets Using Service Token in AWS Amplify Build Phase\nDESCRIPTION: YAML configuration for the build phase that uses a service token to authenticate with Infisical, exports secrets to a .env file, and continues with the build process. This is the deprecated approach but still functional.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cloud/aws-amplify.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  phases:\n    build:\n      commands:\n- INFISICAL_TOKEN=${INFISICAL_TOKEN}\n        - infisical export --format=dotenv > .env\n        - <rest of the commands>\n```\n\n----------------------------------------\n\nTITLE: Adding Infisical Tab to Backstage Entity Pages\nDESCRIPTION: React/TypeScript code to add an Infisical secrets tab to the entity page layout in Backstage.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/external/backstage.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EntityInfisicalContent } from '@infisical/backstage-plugin-infisical';\n\nconst serviceEntityPage = (\n  <EntityLayout>\n    {/* ...other tabs */}\n    <EntityLayout.Route path=\"/infisical\" title=\"Secrets\">\n      <EntityInfisicalContent />\n    </EntityLayout.Route>\n  </EntityLayout>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Terraform Cloud Connection via API Request in Bash\nDESCRIPTION: This code snippet demonstrates how to create a Terraform Cloud connection by making a POST request to the Infisical API. The request includes a name for the connection, the authentication method (api-token), and the API token credentials obtained from Terraform Cloud.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/terraform-cloud.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n        --url https://app.infisical.com/api/v1/app-connections/terraform-cloud \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n            \"name\": \"my-terraform-cloud-connection\",\n            \"method\": \"api-token\",\n            \"credentials\": {\n                \"apiToken\": \"...\",\n            }\n        }'\n```\n\n----------------------------------------\n\nTITLE: Setting Infisical Token Environment Variable\nDESCRIPTION: Examples of setting the INFISICAL_TOKEN environment variable using machine identities or service tokens\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/export.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Example\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<identity-client-id> --client-secret=<identity-client-secret> --silent --plain)\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Example\nexport INFISICAL_TOKEN=<service-token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Agent for Docker Swarm\nDESCRIPTION: YAML configuration for the Infisical Agent that specifies authentication settings, sink for access token, and template rendering configurations. This configuration uses Universal Auth for authentication and sets up file templates with polling intervals.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-swarm-with-agent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninfisical:\naddress: \"https://app.infisical.com\"\nauth:\n  type: \"universal-auth\"\n  config:\n    client-id: \"/run/secrets/infisical-universal-auth-client-id\"\n    client-secret: \"/run/secrets/infisical-universal-auth-client-secret\"\n    remove_client_secret_on_read: false\nsinks:\n  - type: \"file\"\n    config:\n      path: \"/infisical-secrets/access-token\"\ntemplates:\n  - source-path: /run/secrets/nginx-home-page-template\n    destination-path: /infisical-secrets/index.html\n    config:\n      polling-interval: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Exclusions in .infisicalignore\nDESCRIPTION: Example of .infisicalignore file format showing how to exclude specific secrets using their fingerprints. Each line contains a colon-separated string with the fingerprint hash, file path, secret type, and line number.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ignore\nCODE:\n```\nbea0ff6e05a4de73a5db625d4ae181a015b50855:frontend/components/utilities/attemptLogin.js:stripe-access-token:147\nbea0ff6e05a4de73a5db625d4ae181a015b50855:backend/src/json/integrations.json:generic-api-key:5\n1961b92340e5d2613acae528b886c842427ce5d0:frontend/components/utilities/attemptLogin.js:stripe-access-token:148\n```\n\n----------------------------------------\n\nTITLE: Filtering Secrets by Tags\nDESCRIPTION: This snippet shows how to use the --tags flag to filter and retrieve only secrets associated with specific tags when using the 'infisical run' command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical run --tags=tag1,tag2,tag3 -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradle Task that Uses Environment Variables\nDESCRIPTION: Defines a Gradle task that reads an environment variable injected by Infisical. The task generates a file with content from the environment variable or uses a default value if not set.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntask generateFile {\n    doLast {\n        String content = System.getenv('ENV_NAME_FROM_INFISICAL') ?: 'Default Content'\n        file('output.txt').text = content\n        println \"Generated output.txt with content: $content\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical CLI in a project\nDESCRIPTION: This command initializes the Infisical CLI in a project directory, creating an infisical.json file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ infisical init\n```\n\n----------------------------------------\n\nTITLE: Starting Infisical Development Server with Docker Compose\nDESCRIPTION: This command uses Docker Compose to start all required services for Infisical in local development. It builds and recreates containers as needed.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/developing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.dev.yml up --build --force-recreate\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Infisical\nDESCRIPTION: Installs the required Python dependencies for the Infisical Ansible collection. The collection depends on the Infisical SDK for Python, which must be installed separately.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ansible.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install infisical-python\n```\n\n----------------------------------------\n\nTITLE: Example InfisicalSecret Resource Configuration\nDESCRIPTION: Complete example of an InfisicalSecret resource with Kubernetes authentication configuration\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n      kubernetesAuth:\n          identityId: <machine-identity-id>\n          serviceAccountRef:\n            name: infisical-service-account\n            namespace: <service-account-namespace>\n          secretsScope:\n              projectSlug: your-project-slug\n              envSlug: prod\n              secretsPath: \"/path\"\n              recursive: true\n```\n\n----------------------------------------\n\nTITLE: Running a Nuxt Application with Infisical\nDESCRIPTION: This command demonstrates how to start your Nuxt application with Infisical, which injects the environment variables from your Infisical project into your application at runtime.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/nuxt.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Infisical KMS Key via Bash API Call\nDESCRIPTION: This Bash snippet provides an example of making a POST request with curl to decrypt data using the Infisical KMS key. The endpoint requires the key ID and accepts a base64-encoded 'ciphertext' value in the JSON payload. Authentication is required as per standard API policy. After a successful call, the plaintext is returned base64 encoded; always ensure correspondence between the ciphertext and desired output encoding.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/kms/keys/<key-id>/decrypt \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"ciphertext\": \"HwFHwSFHwlMF6TOfp==\" // base64 encoded ciphertext\n}'\n```\n\n----------------------------------------\n\nTITLE: Docker CMD for Running Infisical Startup Script\nDESCRIPTION: Dockerfile CMD instruction to execute the shell script that handles Infisical authentication and secret injection. Used in the machine identity startup script approach.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"./script.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Infisical Reset Command in Bash\nDESCRIPTION: This command clears all Infisical-generated configuration data, effectively resetting the software to its default settings. It can be used to address persistent issues with the CLI.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/reset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical reset\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SES SMTP Environment Variables\nDESCRIPTION: This snippet provides the environment variable settings for configuring Infisical's email service using AWS Simple Email Service (SES). Replace the placeholder values for `SMTP_HOST`, `SMTP_USERNAME`, `SMTP_PASSWORD`, and `SMTP_FROM_ADDRESS` with your AWS SES SMTP endpoint, username, password, and verified sending email address.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=email-smtp.ap-northeast-1.amazonaws.com # SMTP endpoint obtained from SMTP settings\nSMTP_USERNAME=xxx # your SMTP username\nSMTP_PASSWORD=xxx # your SMTP password\nSMTP_PORT=465\nSMTP_FROM_ADDRESS=hey@example.com # your email address being used to send out emails\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Example Audit Log JSON Payload Structure\nDESCRIPTION: Demonstrates the complete structure of an Infisical audit log entry, including event details, actor information, and metadata. Shows all possible fields and their organization within the log object.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/audit-logs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": \"[UUID]\",\n   \"ipAddress\": \"[IP_ADDRESS]\",\n   \"userAgent\": \"[USER_AGENT_STRING]\",\n   \"userAgentType\": \"web\",\n   \"expiresAt\": \"[TIMESTAMP]\",\n   \"createdAt\": \"[TIMESTAMP]\",\n   \"updatedAt\": \"[TIMESTAMP]\",\n   \"orgId\": \"[ORGANIZATION_UUID]\",\n   \"projectId\": \"[PROJECT_UUID]\",\n   \"projectName\": \"[PROJECT_NAME]\",\n   \"event\": {\n       \"type\": \"get-secrets\",\n       \"metadata\": {\n           \"secretPath\": \"[PATH]\",\n           \"environment\": \"[ENVIRONMENT_NAME]\",\n           \"numberOfSecrets\": [NUMBER]\n       }\n   },\n   \"actor\": {\n       \"type\": \"user\",\n       \"metadata\": {\n           \"email\": \"[EMAIL]\",\n           \"userId\": \"[USER_UUID]\",\n           \"username\": \"[USERNAME]\",\n           \"permission\": {\n               \"metadata\": {},\n               \"auth\": {}\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Data with Infisical KMS API\nDESCRIPTION: This code snippet demonstrates how to verify a signature by making a POST request to the Infisical KMS API. It includes the base64 encoded data, the signature to verify, and the signing algorithm that was used.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/kms/keys/<key-id>/verify \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"data\": \"SGVsbG8sIFdvcmxkIQ==\", // base64 encoded data\n    \"signature\": \"JYuiBt1Ta9pbqFIW9Ou6qzBsFhjYbMJp9k4dP87ILrO+F2MPnp85g3nOlXK1ttZmRoGWsWnLNDRn9W3rf5VtkeaixPqUW/KvY/fM3CxdMyIV3BuxlGgDksjL8X34Eqkrz4CCPo9hjB5uT+rBCOxCgZqRbOdATPipAneUapI9npseNquEeh3jPklwviBix83PJHV9PW2t03AGGUXuMY55ZaFEIMv+IrI1WYdnPVIXDyIitYsS3y+/6KRfhVeTcPNJ5Rw+FE9y1eZzDEZtTNpxOfUT3QIoXmpZlYL4HbhRuJBZ+Yx54C7uPiUIN9U69XbyXt+Kkynykw2HPaagwuCZxiqCU5sFfLnrVbc3dmZxQcX2yRrs2gmFamzBx+uVbi648H4mb7WuE5UPTBjjA11jRsBjCY0YS2T4Vgfe1RlzlPQkZgjP/bnCCGDqXa3/VZAlZX1nTI51X995bPHBQI0rq2sNDlIXenwiAy1wJSITbSI8DbUx09Cr83xCEaYAE6R6PUfog/tbIUXi0VbrYsCVkAGCK446Wb1vW6q7HR8jrjXNwmXlqN9eLbSVWqdWj7N7fieeTYSrECtUaAjxtUYTIVsH2bfT6FOEM9gMWKffOpFowVzzr3B9bNQLIhnEEwebxBw947i4OcxyVIcEUuumWxoKvcbSPxzJ8v1M3SoBBh4=\", // base64 encoded signature\n    \"signingAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_512\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with GCP ID Token Auth\nDESCRIPTION: Demonstrates how to configure the Infisical client using GCP ID Token authentication method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new InfisicalClient({\n    auth: {\n      gcpIdToken: {\n        identityId: \"YOUR_IDENTITY_ID\"\n      }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Named Infisical Service Token\nDESCRIPTION: This command creates a named service token. It grants read access to the 'dev:/global' scope and sets a custom name for the token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical service-token create --scope=dev:/global --access-level=read --name service-token-name\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical .NET SDK via NuGet\nDESCRIPTION: This command shows how to install the Infisical .NET SDK package using the dotnet CLI.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet add package Infisical.Sdk\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Role for Infisical Connection\nDESCRIPTION: SQL commands to create a dedicated role for Infisical in PostgreSQL with login access to a specified database. This creates the necessary credentials for Infisical to connect to your PostgreSQL database.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/postgres.mdx#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- create user role\nCREATE ROLE infisical_role WITH LOGIN PASSWORD 'my-password';\n\n-- grant login access to the specified database\nGRANT CONNECT ON DATABASE my_database TO infisical_role;\n```\n\n----------------------------------------\n\nTITLE: Verifying Data with Infisical KMS in Go\nDESCRIPTION: This snippet demonstrates how to verify data using the Infisical KMS service. It requires a key ID, base64 encoded data to verify, and the signing algorithm that was used to sign the data. The method returns information about signature validity.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.Kms().Signing().Verify(infisical.KmsVerifyDataOptions{\n  KeyId:            \"<key-id>\",\n  Data:             \"<data-to-verify>\", // Must be a base64 encoded string.\n  SigningAlgorithm: \"<signing-algorithm>\", // The signing algorithm that was used to sign the data.\n})\n```\n\n----------------------------------------\n\nTITLE: Running a Laravel Application with Infisical\nDESCRIPTION: This command starts your Laravel application with Infisical, which injects the environment variables and secrets into your application runtime environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/laravel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example \ninfisical run -- php artisan serve\n```\n\n----------------------------------------\n\nTITLE: User Authentication with Infisical CLI\nDESCRIPTION: Command for users to authenticate with Infisical before connecting to remote hosts.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login\n```\n\n----------------------------------------\n\nTITLE: Symmetric Decryption with Infisical Python SDK\nDESCRIPTION: Shows how to perform symmetric decryption using the Infisical SDK's cryptographic functions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndecryptOptions = DecryptSymmetricOptions(\n    ciphertext=encryptedData.ciphertext,\n    iv=encryptedData.iv,\n    tag=encryptedData.tag,\n    key=key\n)\n\ndecryptedString = client.decryptSymmetric(decryptOptions)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Infisical Agent and Nginx\nDESCRIPTION: Docker Compose file that defines a stack with an Infisical Agent container for secret retrieval and an Nginx container for displaying the secrets. The configuration includes volume mounts, networks, and Docker secrets for authentication credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-swarm-with-agent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.1\"\n\nservices:\n  infisical-agent:\n    container_name: infisical-agnet\n    image: infisical/cli:0.18.0\n    command: agent --config=/run/secrets/infisical-agent-config\n    volumes:\n      - infisical-agent:/infisical-secrets\n    secrets:\n      - infisical-universal-auth-client-id\n      - infisical-universal-auth-client-secret\n      - infisical-agent-config\n      - nginx-home-page-template\n    networks:\n      - infisical_network\n\n  nginx:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - infisical-agent:/usr/share/nginx/html\n    networks:\n      - infisical_network\n\nvolumes:\n  infisical-agent: \n\nsecrets:\n  infisical-universal-auth-client-id:\n    file: ./client-id\n  infisical-universal-auth-client-secret:\n    file: ./client-secret\n  infisical-agent-config:\n    file: ./infisical-agent-config\n  nginx-home-page-template:\n    file: ./nginx-home-page-template\n    \n\nnetworks:\n  infisical_network:\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with AWS IAM Auth\nDESCRIPTION: Demonstrates the configuration of the Infisical client using AWS IAM authentication method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new InfisicalClient({\n    auth: {\n      awsIam: {\n        identityId: \"YOUR_IDENTITY_ID\"\n      }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Universal Auth in Infisical CLI\nDESCRIPTION: Command to log in using Universal Auth method. It requires a client ID and client secret for authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=universal-auth --client-id=<client-id> --client-secret=<client-secret>\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Injecting Infisical Secrets in AB Initio Workflow\nDESCRIPTION: This script demonstrates how to authenticate with Infisical using a machine identity, fetch secrets for a specific project and environment, and inject them as environment variables in an AB Initio workflow.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/ab-initio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Login using the machine identity. Modify this accordingly based on the authentication method used.\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$INFISICAL_CLIENT_ID --client-secret=$INFISICAL_CLIENT_SECRET --silent --plain)\n\n# Fetch secrets from Infisical\ninfisical export --projectId=\"<>\" --env=\"prod\" > infisical.env\n\n# Inject secrets as environment variables\nsource infisical.env\n```\n\n----------------------------------------\n\nTITLE: Displaying Infisical CSI Provider Helm Chart Values (Bash)\nDESCRIPTION: This command displays all configurable values (arguments) for the Infisical CSI provider Helm chart. This helps in customizing the installation. Requires Helm and the Infisical Helm repository added.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values infisical-helm-charts/infisical-csi-provider\n```\n\n----------------------------------------\n\nTITLE: Running .NET Applications with Infisical Secret Injection\nDESCRIPTION: Commands to run a .NET application with Infisical, which automatically injects environment variables and secrets during runtime. The example shows running a .NET application with the dotnet run command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/dotnet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Granting AWS Secrets Manager Access for Infisical Sync (JSON)\nDESCRIPTION: This IAM policy defines the minimum permissions required for an IAM Role (assumed by Infisical) to interact with AWS Secrets Manager. It allows actions like listing, getting, creating, updating, deleting, describing, and tagging secrets. It also includes KMS permissions (`kms:ListAliases`, `kms:Encrypt`, `kms:Decrypt`, `kms:DescribeKey`) necessary if secrets are encrypted with a custom KMS key. This enables Infisical's secret syncing feature with AWS Secrets Manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowSecretsManagerAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"secretsmanager:ListSecrets\",\n                \"secretsmanager:GetSecretValue\",\n                \"secretsmanager:BatchGetSecretValue\",\n                \"secretsmanager:CreateSecret\",\n                \"secretsmanager:UpdateSecret\",\n                \"secretsmanager:DeleteSecret\",\n                \"secretsmanager:DescribeSecret\",\n                \"secretsmanager:TagResource\",\n                \"secretsmanager:UntagResource\",\n                \"kms:ListAliases\", // if you need to specify the KMS key\n                \"kms:Encrypt\", // if you need to specify the KMS key\n                \"kms:Decrypt\", // if you need to specify the KMS key\n                \"kms:DescribeKey\" // if you need to specify the KMS key\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning Git History for Secrets\nDESCRIPTION: Command to scan full git history for potential secret leaks using Infisical's scanning feature.\nSOURCE: https://github.com/infisical/infisical/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ninfisical scan --verbose\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal to Ignore Infisical Commands\nDESCRIPTION: Set up your terminal to ignore specific Infisical commands for security and privacy concerns.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF >> $HOME/.profile && source $HOME/.profile\n\n# Ignoring specific Infisical CLI commands\nDEFAULT_HISTIGNORE=$HISTIGNORE\nexport HISTIGNORE=\"*infisical secrets set*:$DEFAULT_HISTIGNORE\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical from EC2 Instance using Node.js\nDESCRIPTION: Sample code showing how to authenticate with Infisical from within an EC2 instance by obtaining the region from instance metadata and constructing a signed request.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/aws-auth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport AWS from \"aws-sdk\";\nimport axios from \"axios\";\n\nconst main = async () => {\n    try {\n        // obtain region from EC2 instance metadata\n        const tokenResponse = await axios.put(\"http://169.254.169.254/latest/api/token\", null, {\n            headers: {\n            \"X-aws-ec2-metadata-token-ttl-seconds\": \"21600\"\n            }\n        });\n\n        const url = \"http://169.254.169.254/latest/dynamic/instance-identity/document\";\n        const response = await axios.get(url, {\n            headers: {\n                \"X-aws-ec2-metadata-token\": tokenResponse.data\n            }\n        });\n\n        const region = response.data.region;\n\n        AWS.config.update({\n            region\n        });\n\n        const iamRequestURL = `https://sts.${region}.amazonaws.com/`;\n        const iamRequestBody = \"Action=GetCallerIdentity&Version=2011-06-15\";\n        const iamRequestHeaders = {\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n            Host: `sts.${region}.amazonaws.com`\n        };\n```\n\n----------------------------------------\n\nTITLE: Launching Docker Compose with Infisical Integration\nDESCRIPTION: This console command demonstrates how to start Docker Compose services that are configured to use Infisical for secret management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Viewing Infisical CSI Provider Logs via kubectl (Bash)\nDESCRIPTION: This command retrieves the logs from a specific Infisical CSI provider pod (e.g., `infisical-csi-provider-7x44t`). These logs are essential for troubleshooting issues related to the provider's operation, such as authentication failures or errors fetching secrets. The pod name needs to be adjusted based on the actual deployment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs infisical-csi-provider-7x44t\n```\n\n----------------------------------------\n\nTITLE: ListSecrets Template Examples\nDESCRIPTION: Example templates showing how to use the listSecrets function with different configurations for recursive and reference expansion options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{{- with listSecrets \"6553ccb2b7da580d7f6e7260\" \"dev\" \"/\" `{\"recursive\": false, \"expandSecretReferences\": true}` }}\n{{- range . }}\n{{ .Key }}={{ .Value }}\n{{- end }}\n{{- end }}\n```\n\nLANGUAGE: bash\nCODE:\n```\n{{- with secret \"da8056c8-01e2-4d24-b39f-cb4e004b8d44\" \"staging\" \"/\" `{\"recursive\": true, \"expandSecretReferences\": true}` }}\n{{- range . }}\n{{- if eq .SecretPath \"/\"}}\n{{ .Key }}={{ .Value }}\n{{- else}}\n{{ .SecretPath }}/{{ .Key }}={{ .Value }}\n{{- end}}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Create Auth0 Client Secret Rotation API Request\nDESCRIPTION: API request to create a new Auth0 client secret rotation configuration in Infisical. Includes parameters for rotation interval, timing, secret mappings and other configuration options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/auth0-client-secret.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://us.infisical.com/api/v2/secret-rotations/auth0-client-secret \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-auth0-rotation\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"my client secret rotation\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/\",\n    \"isAutoRotationEnabled\": true,\n    \"rotationInterval\": 30,\n    \"rotateAtUtc\": {\n        \"hours\": 0,\n        \"minutes\": 0\n    },\n    \"parameters\": {\n        \"clientId\": \"...\"\n    },\n    \"secretsMapping\": {\n        \"clientId\": \"AUTH0_CLIENT_ID\",\n        \"clientSecret\": \"AUTH0_CLIENT_SECRET\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Applying the InfisicalPushSecret CRD with kubectl\nDESCRIPTION: Command to apply the InfisicalPushSecret custom resource that will push secrets from the Kubernetes Secret to Infisical based on the specified configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f infisical-push-secret.yaml\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Infisical KMS in Go\nDESCRIPTION: This snippet demonstrates how to decrypt data using a key in the Infisical KMS. It requires the key ID and ciphertext to decrypt, and returns the decrypted data as a string.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.Kms().DecryptData(infisical.KmsDecryptDataOptions{\n  KeyId: \"<key-id>\",\n  Ciphertext: \"<encrypted-data>\",\n})\n```\n\n----------------------------------------\n\nTITLE: Signing a Digest with Infisical KMS API in Bash\nDESCRIPTION: This curl command demonstrates how to sign a digest using the Infisical KMS API. It sends a POST request to the signing endpoint with the digest data, signing algorithm, and a flag indicating it's a digest.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/kms/keys/<key-id>/sign \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"data\": <digest-output-of-openssl-command>,\n\"signingAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_512\",\n\"isDigest\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Authentication for InfisicalDynamicSecret in Kubernetes\nDESCRIPTION: This YAML snippet shows how to configure AWS IAM authentication for the InfisicalDynamicSecret. It specifies the identity ID of the machine identity created for AWS IAM authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  authentication:\n    awsIamAuth:\n      identityId: <machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for the project setup.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/python.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: GCP ID Token Auth Login in Infisical Go SDK\nDESCRIPTION: Shows how to perform GCP ID Token Auth login using the Infisical Go SDK, which is specific to applications running on Google Cloud Platform.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n_, err := client.Auth().GcpIdTokenAuthLogin(\"YOUR_MACHINE_IDENTITY_ID\")\n\nif err != nil {\n  fmt.Println(err)\n  os.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for OIDC Auth in GitHub Actions YAML\nDESCRIPTION: This YAML block specifies the permissions required for a GitHub Actions workflow to request an OIDC token, enabling secure authentication with Infisical via the identity provider. The crucial 'id-token: write' permission allows fetching a JWT for use with Infisical's OIDC login. No additional dependencies are needed, but the workflow must execute in a repository configured for GitHub Actions. The key parameter is 'permissions' with 'id-token: write'. Required as a prerequisite for subsequent identity token fetching.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    id-token: write # This is required for requesting the JWT\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching Infisical Secrets Using Machine Identity in AWS Amplify Build Phase\nDESCRIPTION: YAML configuration for the build phase that authenticates with Infisical using a machine identity, exports secrets to a .env file, and continues with the build process. This approach uses secure client credentials for authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cloud/aws-amplify.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  phases:\n    build:\n      commands:\n- INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=${INFISICAL_MACHINE_IDENTITY_CLIENT_ID} --client-secret=${INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET} --silent --plain)\n        - infisical export --format=dotenv > .env\n        - <rest of the commands>\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Node.js SDK via npm\nDESCRIPTION: Shows the command to install the Infisical Node.js SDK using npm package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ npm install @infisical/sdk\n```\n\n----------------------------------------\n\nTITLE: Creating Secret with Infisical C# Client\nDESCRIPTION: Shows how to create a new secret in Infisical using the CreateSecret method. Requires environment, project ID, secret name, and value parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new CreateSecretOptions {\n    Environment = \"dev\",\n    ProjectId = \"PROJECT_ID\",\n\n    SecretName = \"NEW_SECRET\",\n    SecretValue = \"NEW_SECRET_VALUE\",\n    SecretComment = \"This is a new secret\",\n};\n\nvar newSecret = infisical.CreateSecret(options);\n```\n\n----------------------------------------\n\nTITLE: Creating OpenLDAP User with LDIF\nDESCRIPTION: LDIF template for creating a new user in OpenLDAP with basic attributes and password configuration. Uses template variables for username and password insertion.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/ldap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ldif\nCODE:\n```\ndn: uid={{Username}},dc=infisical,dc=com\nchangetype: add\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: inetOrgPerson\ncn: John Doe\nsn: Doe\nuid: jdoe\nmail: jdoe@infisical.com\nuserPassword: {{Password}}\n```\n\n----------------------------------------\n\nTITLE: Auth0 Client Secret Rotation API Response\nDESCRIPTION: Sample response from the Auth0 client secret rotation creation API endpoint showing the created rotation configuration with all its properties including timing details and connection information.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/auth0-client-secret.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretRotation\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-auth0-rotation\",\n        \"description\": \"my client secret rotation\",\n        \"secretsMapping\": {\n            \"clientId\": \"AUTH0_CLIENT_ID\",\n            \"clientSecret\": \"AUTH0_CLIENT_SECRET\"\n        },\n        \"isAutoRotationEnabled\": true,\n        \"activeIndex\": 0,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"rotationInterval\": 30,\n        \"rotationStatus\": \"success\",\n        \"lastRotationAttemptedAt\": \"2023-11-07T05:31:56Z\",\n        \"lastRotatedAt\": \"2023-11-07T05:31:56Z\",\n        \"lastRotationJobId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"nextRotationAt\": \"2023-11-07T05:31:56Z\",\n        \"connection\": {\n            \"app\": \"auth0\",\n            \"name\": \"my-auth0-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/\"\n        },\n        \"rotateAtUtc\": {\n            \"hours\": 0,\n            \"minutes\": 0\n        },\n        \"lastRotationMessage\": null,\n        \"type\": \"auth0-client-secret\",\n        \"parameters\": {\n            \"clientId\": \"...\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile CMD for Infisical Integration\nDESCRIPTION: This snippet shows how to modify the CMD instruction in a Dockerfile to use Infisical for running the service. It prefixes the service start command with the Infisical run command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"infisical\", \"run\", \"--\", \"[your service start command]\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical for Django Project\nDESCRIPTION: This snippet shows how to navigate to your Django project's root directory and initialize Infisical. This is the first step to set up Infisical for managing environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/django.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Signing Data with Infisical KMS API\nDESCRIPTION: This code snippet demonstrates how to sign data by making a POST request to the Infisical KMS API. It includes a sample request with base64 encoded data and specifies the signing algorithm to use.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/kms/keys/<key-id>/sign \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"data\": \"SGVsbG8sIFdvcmxkIQ==\", // base64 encoded data\n    \"signingAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_512\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Environment Variables for Self-Hosted Infisical\nDESCRIPTION: Environment variables required for configuring a GitHub OAuth connection on a self-hosted Infisical instance. These variables include the client ID and client secret from your GitHub OAuth application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nINF_APP_CONNECTION_GITHUB_OAUTH_CLIENT_ID: The **Client ID** of your GitHub OAuth application.\nINF_APP_CONNECTION_GITHUB_OAUTH_CLIENT_SECRET: The **Client Secret** of your GitHub OAuth application.\n```\n\n----------------------------------------\n\nTITLE: Running Gradle with Infisical CLI Basic Command\nDESCRIPTION: Demonstrates the basic command structure for running Gradle tasks with Infisical. This allows Infisical to inject environment variables into the Gradle process.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- [Your command here]\n```\n\n----------------------------------------\n\nTITLE: Basic Infisical Bootstrap Command Usage\nDESCRIPTION: Main command syntax for bootstrapping a new Infisical instance with required parameters for domain, email, password and organization name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical bootstrap --domain=<domain> --email=<email> --password=<password> --organization=<organization>\n```\n\n----------------------------------------\n\nTITLE: Obtaining Machine Identity Access Token\nDESCRIPTION: Authenticate with Infisical using client ID and secret, and set the INFISICAL_TOKEN environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<identity-client-id> --client-secret=<identity-client-secret> --silent --plain)\n```\n\n----------------------------------------\n\nTITLE: Downloading Infisical Credentials File with curl in Bash\nDESCRIPTION: Command to download the Infisical .env file using curl.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-compose.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o .env https://raw.githubusercontent.com/Infisical/infisical/main/.env.example\n```\n\n----------------------------------------\n\nTITLE: Default Operator Configuration for Cluster-Wide Access (YAML)\nDESCRIPTION: Illustrates the default Helm values configuration for a cluster-wide Infisical Secrets Operator installation. `installCRDs` is true (installs CRDs), `scopedNamespace` is empty (enables cluster-wide watching), and `scopedRBAC` is false (uses cluster-wide roles/bindings). This snippet typically represents content within a `values.yaml` file or default settings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ninstallCRDs: true # Install CRDs (set to false for additional namespace installations)\nscopedNamespace: \"\" # Empty for cluster-wide access\nscopedRBAC: false # Cluster-wide permissions\n```\n\n----------------------------------------\n\nTITLE: Setting up kubernetesAuth in InfisicalPushSecret CRD\nDESCRIPTION: This snippet demonstrates how to configure Kubernetes authentication in the InfisicalPushSecret CRD, including service account reference and token creation options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetesAuth:\n    identityId: <machine-identity-id>\n    autoCreateServiceAccountToken: true # Automatically creates short-lived service account tokens for the service account.\n    serviceAccountTokenAudiences:\n      - <audience> # Optionally specify audience for the service account token. No audience is specified by default.\n    serviceAccountRef:\n      name: <secret-name>\n      namespace: <secret-namespace>\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Rotation via API\nDESCRIPTION: API request example for creating a PostgreSQL credentials rotation configuration using Infisical's REST API. Includes request parameters for rotation interval, mapping, and user configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/postgres-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://us.infisical.com/api/v2/secret-rotations/postgres-credentials \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-pg-rotation\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"my database credentials rotation\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/\",\n    \"isAutoRotationEnabled\": true,\n    \"rotationInterval\": 30,\n    \"rotateAtUtc\": {\n        \"hours\": 0,\n        \"minutes\": 0\n    },\n    \"parameters\": {\n        \"username1\": \"infisical_user_1\",\n        \"username2\": \"infisical_user_2\"\n    },\n    \"secretsMapping\": {\n        \"username\": \"POSTGRES_DB_USERNAME\",\n        \"password\": \"POSTGRES_DB_PASSWORD\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication in Infisical Kubernetes CRD\nDESCRIPTION: Example showing how to configure Azure authentication in an InfisicalSecret resource. This requires adding your machine identity ID to the authentication.azureAuth.identityId field and specifying the secrets scope with project slug, environment slug, and secrets path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n      azureAuth:\n          identityId: <your-machine-identity-id>\n\n          # secretsScope is identical to the secrets scope in the universalAuth field in this sample.\n          secretsScope:\n              projectSlug: your-project-slug\n              envSlug: prod\n              secretsPath: \"/path\"\n              recursive: true\n  ...\n```\n\n----------------------------------------\n\nTITLE: Signing a Certificate Signing Request (CSR) via Infisical API (Bash)\nDESCRIPTION: This Bash cURL command shows how to submit an externally generated, PEM-encoded Certificate Signing Request (CSR) to the Infisical API endpoint `/api/v1/pki/certificates/sign-certificate`. It uses a specified `certificateTemplateId` and `ttl`. This method is used when the private key is generated and managed outside of Infisical. Authentication is required.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/certificates/sign-certificate' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"certificateTemplateId\": \"<certificate-template-id>\",\n      \"csr\": \"...\",\n      \"ttl\": \"1y\",\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Identity Token Authentication in YAML\nDESCRIPTION: Example configuration for setting up GCP identity token authentication with a machine identity ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n  spec:\n    gcpIdTokenAuth:\n      identityId: <machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Issuing an Infisical Certificate via API using a Template (Bash)\nDESCRIPTION: This Bash cURL command demonstrates how to issue an X.509 certificate using a specific certificate template via the Infisical API endpoint `/api/v1/pki/certificates/issue-certificate`. The request body must include the `certificateTemplateId`, the desired `commonName` for the certificate (which must comply with the template's policy), and the `ttl`. Authentication is required.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/certificates/issue-certificate' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"certificateTemplateId\": \"<certificate-template-id>\",\n      \"commonName\": \"service.acme.com\",\n      \"ttl\": \"1y\",\n  }'\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Infisical GCP IAM Endpoint using cURL\nDESCRIPTION: This Bash snippet provides a cURL command example for authenticating to the Infisical API using the GCP IAM method. It sends a POST request to the `/api/v1/auth/gcp-auth/login` endpoint, passing the Infisical identity ID and the previously generated signed JWT as URL-encoded form data. This request exchanges the signed JWT for an Infisical access token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/gcp-auth.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/auth/gcp-auth/login' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-urlencode 'identityId=...' \\\n    --data-urlencode 'jwt=...'\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Environment Variables\nDESCRIPTION: This snippet shows the required environment variables for Infisical, including database connections and encryption keys.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTION_URI=postgres://user:password@localhost:5432/infisical # Replace with your Postgres database connection URI\nREDIS_URL=redis://localhost:6379 # Replace with your Redis connection URI\nENCRYPTION_KEY=your_encryption_key # Replace with your encryption key (can be generated with: openssl rand -hex 16)\nAUTH_SECRET=your_auth_secret # Replace with your auth secret (can be generated with: openssl rand -base64 32)\n```\n\n----------------------------------------\n\nTITLE: Managing Logged-in Users with Infisical CLI\nDESCRIPTION: The 'infisical user' command is used to manage the current logged-in users on the Infisical CLI. It provides functionality for user management operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical user\n```\n\n----------------------------------------\n\nTITLE: Running a Bun application with Infisical\nDESCRIPTION: Commands to start your Bun application with Infisical, which injects environment variables from your Infisical account into the application runtime. Includes a specific example using the 'bun run dev' command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/bun.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- bun run dev\n```\n\n----------------------------------------\n\nTITLE: Example start commands using Infisical CLI\nDESCRIPTION: These are example commands for starting applications with Infisical-injected environment variables for different frameworks and scripts.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ infisical run -- npm run dev\n$ infisical run -- flask run\n$ infisical run -- ./your_bash_script.sh\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Secret in Infisical\nDESCRIPTION: Updates an existing secret's value in the specified project and environment. Supports path specification and secret type selection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nUpdateSecretOptions options = new UpdateSecretOptions();\n\noptions.setSecretName(\"SECRET_TO_UPDATE\");\noptions.setSecretValue(\"NEW SECRET VALUE\");\noptions.setEnvironment(\"dev\");\noptions.setProjectID(\"PROJECT_ID\");\noptions.setPath(\"/\"); // Default\noptions.setType(\"shared\"); // Default\n\nUpdateSecretResponseSecret updatedSecret = client.updateSecret(options);\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Account in Kubernetes\nDESCRIPTION: YAML configuration to create a service account named 'infisical-auth' in the default namespace for Kubernetes authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: infisical-auth\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Authentication for InfisicalDynamicSecret\nDESCRIPTION: This YAML configuration sets up Kubernetes authentication for the InfisicalDynamicSecret. It specifies the identity ID, service account reference, and options for auto-creating service account tokens and setting token audiences.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetesAuth:\n    identityId: <machine-identity-id>\n    autoCreateServiceAccountToken: true # Automatically creates short-lived service account tokens for the service account.\n    serviceAccountTokenAudiences:\n      - <audience> # Optionally specify audience for the service account token. No audience is specified by default.\n    serviceAccountRef:\n      name: <secret-name>\n      namespace: <secret-namespace>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Infisical CSI Secret Management Flow (Mermaid)\nDESCRIPTION: This Mermaid flowchart diagram illustrates the flow of secrets from the Infisical platform through the Infisical CSI Provider and the Secrets Store CSI Driver to be mounted as a volume in a Kubernetes pod.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph Secrets Management\n        SS(Infisical) --> CSP(Infisical CSI Provider)\n        CSP --> CSD(Secrets Store CSI Driver)\n    end\n\n    subgraph Application\n        CSD --> V(Volume)\n        V <--> P(Pod)\n    end\n```\n\n----------------------------------------\n\nTITLE: Required GitHub App Environment Variables for Self-Hosted Infisical\nDESCRIPTION: These environment variables must be configured in a self-hosted Infisical instance to enable GitHub App integration. They include the client ID, client secret, application slug, app ID, and private key credentials from the GitHub application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cicd/githubactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCLIENT_ID_GITHUB_APP: The **Client ID** of your GitHub application.\nCLIENT_SECRET_GITHUB_APP: The **Client Secret** of your GitHub application.\nCLIENT_SLUG_GITHUB_APP: The **Slug** of your GitHub application. This is the one found in the URL.\nCLIENT_APP_ID_GITHUB_APP: The **App ID** of your GitHub application.\nCLIENT_PRIVATE_KEY_GITHUB_APP: The **Private Key** of your GitHub application.\n```\n\n----------------------------------------\n\nTITLE: Fetching Secrets with Infisical CLI in Jenkins\nDESCRIPTION: This command uses the Infisical CLI to fetch secrets from the dev environment at the root path. It's executed in a Jenkins shell build step after setting up the INFISICAL_TOKEN credential.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cicd/jenkins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets --env=dev --path=/\n```\n\n----------------------------------------\n\nTITLE: Sample PostgreSQL Connection API Response\nDESCRIPTION: JSON response example from the Infisical API after successfully creating a PostgreSQL connection. The response includes the connection ID, name, organization details, and connection configuration details.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/postgres.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"appConnection\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-pg-connection\",\n        \"version\": 1,\n        \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"app\": \"postgres\",\n        \"method\": \"username-and-password\",\n        \"isPlatformManagedCredentials\": true,\n        \"credentials\": {\n            \"host\": \"123.4.5.6\",\n            \"port\": 5432,\n            \"database\": \"default\",\n            \"username\": \"infisical_role\",\n            \"sslEnabled\": true,\n            \"sslRejectUnauthorized\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Infisical Stack to Docker Swarm\nDESCRIPTION: This command deploys the Infisical stack to the Docker Swarm using the specified YAML configuration file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-swarm.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker stack deploy -c infisical-stack.yaml infisical\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Gateway with Direct Token\nDESCRIPTION: Command to run the Gateway using a pre-existing authentication token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/gateways/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical gateway --token <your-machine-identity-token>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Request Headers for Infisical CLI\nDESCRIPTION: Configure custom HTTP headers for requests to servers protected by authentication services like Cloudflare Access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Syntax: headername1=headervalue1 headername2=headervalue2\nexport INFISICAL_CUSTOM_HEADERS=\"Access-Client-Id=your-client-id Access-Client-Secret=your-client-secret\"\n\n# Execute Infisical commands after setting the environment variable\ninfisical secrets ls\n```\n\n----------------------------------------\n\nTITLE: Verifying Managed ConfigMap Creation\nDESCRIPTION: Command to verify that the managed config map has been successfully created in the specified namespace. Infisical config map data is synced every minute by default.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# Verify managed config map is created\nkubectl get configmaps -n <namespace of managed config map>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Authentication Settings\nDESCRIPTION: Required configuration settings in cassandra.yaml file to enable user authentication and authorization for dynamic secret generation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/cassandra.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticator: PasswordAuthenticator\nauthorizer: CassandraAuthorizer\n```\n\n----------------------------------------\n\nTITLE: Setting LeaseRevocationPolicy for InfisicalDynamicSecret in Kubernetes\nDESCRIPTION: This YAML snippet shows how to set the leaseRevocationPolicy field in the InfisicalDynamicSecret spec. It defines the behavior for handling leases when the CRD is deleted, with the option to revoke leases.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  leaseRevocationPolicy: Revoke\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Sync via Infisical API (Bash Request)\nDESCRIPTION: This snippet demonstrates issuing an authenticated HTTP POST request with curl to Infisical's API, initiating a GitHub secret sync. Required dependencies include curl and a valid Infisical account with API token setup. The JSON payload specifies key parameters such as name, projectId, GitHub connectionId, project environment, secret folder path, and GitHub destination scope (organization, repository, or repository environment). The request body can be customized for additional sync options. Inputs are provided as JSON; outputs are the standard API response with sync status and metadata. Authorization headers (such as API keys) may be needed for a real interaction.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/github \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-github-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"scope\": \"repository\",\n        \"owner\": \"my-github\",\n        \"repo\": \"my-repository\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Listing Leases for Dynamic Secret in Infisical\nDESCRIPTION: This command lists all leases for a specified dynamic secret. It supports flags for environment selection, project folder specification, and authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/dynamic-secrets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical dynamic-secrets lease list <dynamic-secret-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease list <dynamic-secret-name> --path=\"/\" --env=dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease list <dynamic-secret-name> --projectId=<project-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease list <dynamic-secret-name> --token=<token>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Reviewer JWT\nDESCRIPTION: Bash command to retrieve and decode the JWT token from the created secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret infisical-auth-token -n default -o=jsonpath='{.data.token}' | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Installing Etcd Cluster on Linux\nDESCRIPTION: Commands for installing and configuring Etcd cluster nodes for distributed consensus.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install etcd\n```\n\n----------------------------------------\n\nTITLE: Using Data Sources for Secret Management\nDESCRIPTION: Fetch secrets using traditional data sources, which is suitable for backwards compatibility or when working with older Terraform versions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/terraform.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# Fetch all secrets in a folder\ndata \"infisical_secrets\" \"my_secrets\" {\n  env_slug     = \"dev\"\n  workspace_id = var.infisical_workspace_id\n  folder_path  = \"/api\"\n}\n\n# Use individual secrets\nresource \"aws_db_instance\" \"example\" {\n  username = data.infisical_secrets.my_secrets.secrets[\"DB_USER\"]\n  password = data.infisical_secrets.my_secrets.secrets[\"DB_PASS\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP IAM Auth in Infisical Agent - YAML\nDESCRIPTION: This YAML configuration allows the Infisical agent to authenticate using a GCP IAM service account key. It requires both 'identity-id' and 'service-account-key' parameters, referencing the machine identity file and the GCP service account key JSON file respectively. This setup is aimed at environments leveraging GCP IAM and requires correct pathing to credentials for successful authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  type: \"gcp-iam\"\n  config:\n    identity-id: \"./identity-id\" # Path to the file containing the machine identity ID\n    service-account-key: \"./service-account-key.json\" # Path to your GCP service account key file\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Infisical Secrets\nDESCRIPTION: Command to inject Infisical secrets into your Spring Boot application using the Maven wrapper. This allows your application to access environment variables stored in Infisical during runtime.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/spring-boot-maven.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- ./mvnw spring-boot:run --quiet\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with Azure Authentication (Python)\nDESCRIPTION: This snippet illustrates how to set up the Infisical client using Azure authentication, which is specific to applications running on Azure and requires a machine identity ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom infisical_client import InfisicalClient, ClientSettings, AuthenticationOptions, AzureAuthMethod\n\nkubernetes_client = InfisicalClient(ClientSettings(\n    auth=AuthenticationOptions(\n        azure=AzureAuthMethod(\n            identity_id=\"YOUR_IDENTITY_ID\",\n        )\n    )\n))\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI in RedHat/CentOS/Amazon Linux Dockerfile\nDESCRIPTION: This snippet demonstrates how to add the Infisical CLI to a Dockerfile using RedHat, CentOS, or Amazon Linux as the base image. It uses curl to download the setup script and yum to install the Infisical package.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN curl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.rpm.sh' | sh \\ \n&& yum install -y infisical\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Users and Permissions\nDESCRIPTION: SQL commands to create two database users with encrypted passwords and grant necessary database access permissions. This setup is required before configuring credential rotation in Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/postgres-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- create user roles\nCREATE USER infisical_user_1 WITH ENCRYPTED PASSWORD 'temporary_password';\nCREATE USER infisical_user_2 WITH ENCRYPTED PASSWORD 'temporary_password';\n\n-- grant database connection permissions\nGRANT CONNECT ON DATABASE my_database TO infisical_user_1;\nGRANT CONNECT ON DATABASE my_database TO infisical_user_2;\n\n-- grant relevant table permissions\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO infisical_user_1;\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO infisical_user_2;\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Project via API using curl\nDESCRIPTION: This curl command demonstrates how to use the Infisical admin token to create a new project programmatically. It sends a POST request to the projects endpoint with the necessary project details in the JSON payload.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/automated-bootstrapping.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"Authorization: Bearer ${INFISICAL_TOKEN}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"projectName\": \"New Project\",\n    \"projectDescription\": \"A project created via API\",\n    \"slug\": \"new-project-slug\",\n    \"template\": \"default\",\n    \"type\": \"SECRET_MANAGER\"\n  }' \\\n  https://your-infisical-instance.com/api/v2/projects\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Login Endpoint Specification\nDESCRIPTION: YAML specification for the login API endpoint defining the POST request to /api/v1/auth/universal-auth/login\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/universal-auth/login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Login\"\nopenapi: \"POST /api/v1/auth/universal-auth/login\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Role with Policy in HashiCorp Vault via CLI\nDESCRIPTION: Vault CLI command to create an 'infisical' role with the 'test' policy attached. The role is configured with a token TTL of 1 hour and maximum TTL of 4 hours.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cloud/hashicorp-vault.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nvault write auth/approle/role/infisical token_policies=\"test\" token_ttl=1h token_max_ttl=4h\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Symmetric Key in Java\nDESCRIPTION: Encrypts plaintext using a symmetric key. Takes key and plaintext as input parameters and returns an object containing the ciphertext, initialization vector, and authentication tag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nEncryptSymmetricOptions options = new EncryptSymmetricOptions();\noptions.setKey(key);\noptions.setPlaintext(\"Infisical is awesome!\");\n\nEncryptSymmetricResponse encryptedData = client.encryptSymmetric(options);\n```\n\n----------------------------------------\n\nTITLE: Renewing Infisical Universal Auth Access Token using CLI\nDESCRIPTION: This command renews an existing universal auth access token for Infisical. It takes the current access token as an argument and outputs a renewed access token to the console.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical token renew <ua-access-token>\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Infisical Auth via kubectl (Bash)\nDESCRIPTION: This command creates a Kubernetes Secret named `issuer-infisical-client-secret` in the specified namespace. It stores the Infisical Client Secret (obtained in Step 1) required by the Infisical PKI Issuer for Universal Authentication. Replace `<namespace_you_want_to_issue_certificates_in>` and `<client_secret>` with actual values.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic issuer-infisical-client-secret \\\n    --namespace <namespace_you_want_to_issue_certificates_in> \\\n    --from-literal=clientSecret=<client_secret>\n```\n\n----------------------------------------\n\nTITLE: Debugging Spring Boot with Infisical Secrets\nDESCRIPTION: Command to run Spring Boot in debug mode with Infisical secrets injected. This configuration enables remote debugging on port 5005 while maintaining access to environment variables from Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/spring-boot-maven.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- ./mvnw spring-boot:run -Dspring-boot.run.jvmArguments=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005\"\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Credentials Environment Variable for Self-Hosted Infisical\nDESCRIPTION: Specifies the environment variable `INF_APP_CONNECTION_GCP_SERVICE_ACCOUNT_CREDENTIAL` used to configure a self-hosted Infisical instance. The value should be the entire content of the downloaded GCP service account JSON key file, provided as a string. This enables the instance to authenticate with GCP for impersonation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/gcp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nINF_APP_CONNECTION_GCP_SERVICE_ACCOUNT_CREDENTIAL\n```\n\n----------------------------------------\n\nTITLE: Configuring awsIamAuth in InfisicalPushSecret CRD\nDESCRIPTION: This example shows how to set up AWS IAM authentication in the InfisicalPushSecret CRD using a machine identity ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  authentication:\n    awsIamAuth:\n      identityId: <machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft SQL Server Connection via API\nDESCRIPTION: API request example showing how to create a Microsoft SQL Server Connection in Infisical using the REST API. The request includes connection details, authentication method, and optional platform-managed credentials flag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/mssql.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/app-connections/mssql \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-mssql-connection\",\n    \"method\": \"username-and-password\",\n    \"isPlatformManagedCredentials\": true,\n    \"credentials\": {\n        \"host\": \"123.4.5.6\",\n        \"port\": 1433,\n        \"database\": \"default\",\n        \"username\": \"infisical_login\",\n        \"password\": \"my-password\",\n        \"sslEnabled\": true,\n        \"sslRejectUnauthorized\": true\n    },\n}'\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with HSM Configuration\nDESCRIPTION: Docker command to run Infisical with HSM integration, including volume mounts and environment variables\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 80:8080 \\\n  -v /etc/luna-docker:/usr/safenet/lunaclient \\\n  -e HSM_LIB_PATH=\"/usr/safenet/lunaclient/libs/64/libCryptoki2.so\" \\\n  -e HSM_PIN=\"<your-hsm-device-pin>\" \\\n  -e HSM_SLOT=<hsm-device-slot> \\\n  -e HSM_KEY_LABEL=\"<your-key-label>\" \\\n\n  # The rest are unrelated to HSM setup...\n  -e ENCRYPTION_KEY=\"<>\" \\\n  -e AUTH_SECRET=\"<>\" \\\n  -e DB_CONNECTION_URI=\"<>\" \\\n  -e REDIS_URL=\"<>\" \\\n  -e SITE_URL=\"<>\" \\\n  infisical/infisical-fips:<version> # Replace <version> with the version you want to use\n```\n\n----------------------------------------\n\nTITLE: Sample Databricks Sync Create Response - Bash\nDESCRIPTION: This bash code block presents an example JSON response from a successful Databricks Sync creation using Infisical's API. It includes identifiers, status, configuration details, environment and folder information, and nested sync options. The response enables the user to confirm the sync properties post-creation. No external dependencies are required to interpret this response apart from JSON parsing capability.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/databricks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-databricks-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"databricks\",\n            \"name\": \"my-databricks-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"databricks\",\n        \"destinationConfig\": {\n            \"scope\": \"my-scope\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical CLI in a .NET Project\nDESCRIPTION: Commands to navigate to the project directory and initialize Infisical for a .NET application. This sets up the configuration for Infisical to manage environment variables in the project.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/dotnet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical for a Fiber Application\nDESCRIPTION: Navigate to your project's root directory and initialize Infisical to set up secret management for your Fiber application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/fiber.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Environment File\nDESCRIPTION: These commands create a directory and an environment file for Infisical configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p /etc/infisical && touch /etc/infisical/environment\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP2Go Email Settings\nDESCRIPTION: Configuration settings for setting up SMTP2Go email service with Infisical. Includes host, port, authentication credentials, and sender details. Supports both TLS and SSL connections on various ports.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\nSMTP_HOST=mail.smtp2go.com\nSMTP_PORT=You can use one of the following ports: 2525, 80, 25, 8025, or 587\nSMTP_USERNAME=username #Your SMTP2GO account's SMTP username\nSMTP_PASSWORD=password #Your SMTP2GO account's SMTP password\nSMTP_FROM_ADDRESS=hey@example.com # your email address being used to send out emails\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Encoding SSL Certificate for Database Connection\nDESCRIPTION: Command to encode an SSL certificate in base64 for securing PostgreSQL connections.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"<certificate>\" | base64\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a SvelteKit Project\nDESCRIPTION: This code snippet shows how to navigate to your SvelteKit project root directory and initialize Infisical. This sets up the necessary configuration for Infisical to work with your project.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/sveltekit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Auth Login in Infisical Go SDK\nDESCRIPTION: Demonstrates how to perform GCP IAM Auth login using the Infisical Go SDK, which requires a machine identity ID and a service account key file path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n_, err = client.Auth().GcpIamAuthLogin(\"MACHINE_IDENTITY_ID\", \"SERVICE_ACCOUNT_KEY_FILE_PATH\")\n\nif err != nil {\n  fmt.Println(err)\n  os.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Secrets with Infisical Python SDK\nDESCRIPTION: Shows how to delete a secret from Infisical using the deleteSecret() method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclient.deleteSecret(options=DeleteSecretOptions(\n    environment=\"dev\",\n    project_id=\"PROJECT_ID\",\n    secret_name=\"API_KEY\"\n))\n```\n\n----------------------------------------\n\nTITLE: Linking Secret to Service Account in Bash\nDESCRIPTION: This Bash command patches the Infisical token reviewer service account to link it with the created Secret containing the JWT token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch serviceaccount infisical-token-reviewer -p '{\"secrets\": [{\"name\": \"infisical-token-reviewer-token\"}]}' -n default\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Infisical KMS in Go\nDESCRIPTION: This snippet shows how to encrypt data using a key in the Infisical KMS. It requires the key ID and plaintext data to encrypt, and returns the encrypted data as a string.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.Kms().EncryptData(infisical.KmsEncryptDataOptions{\n  KeyId: \"<key-id>\",\n  Plaintext: \"<data-to-encrypt>\",\n})\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Definition for Camunda Connection\nDESCRIPTION: Markdown definition specifying the OpenAPI route for creating a new Camunda application connection using a POST request.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/camunda/create.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Create\"\nopenapi: \"POST /api/v1/app-connections/camunda\"\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Python SDK (Command Line)\nDESCRIPTION: This command installs the Infisical Python SDK using pip. It requires Python 3.7 or higher.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/python.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install infisical-python\n```\n\n----------------------------------------\n\nTITLE: Connecting CLI to Self-Hosted Infisical Instance\nDESCRIPTION: Configure the CLI to connect to a self-hosted Infisical instance using environment variables or command-line flags.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# set backend host\nexport INFISICAL_API_URL=\"https://your-self-hosted-infisical.com/api\"\n\n# remove backend host\nunset INFISICAL_API_URL\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical <any-command> --domain=\"https://your-self-hosted-infisical.com/api\"\n```\n\n----------------------------------------\n\nTITLE: Updating Backend API Domain for Infisical CLI Profile\nDESCRIPTION: The 'infisical user update domain' subcommand enables users to modify the backend API used for all requests associated with a specific profile. This allows pointing the profile to use either Infisical Cloud or a self-hosted Infisical instance.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/user.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical user update domain\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Swarm Node Information\nDESCRIPTION: This command displays information about the nodes in the Docker Swarm, including their IDs, hostnames, status, and availability.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-swarm.mdx#2025-04-22_snippet_6\n\nLANGUAGE: plain\nCODE:\n```\n$ docker node ls\nID                            HOSTNAME    STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION\n0jnegl4gpo235l66nglcwc07t     localhost   Ready     Active                          26.0.2\nno1a7zwj88057k73m196ulkq6 *   localhost   Ready     Active         Leader           26.0.2\nwcb2x27w3tq7ht4v1h7ke49qk     localhost   Ready     Active                          26.0.2\nzov5q7uop7wpxc2ndz712v9oa     localhost   Ready     Active                          26.0.2\n```\n\n----------------------------------------\n\nTITLE: GitLab Pipeline Configuration with Infisical OIDC Authentication\nDESCRIPTION: Example GitLab CI/CD pipeline configuration that demonstrates how to set up OIDC authentication with Infisical, including token generation and secret access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/gitlab.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: ubuntu\n\nstages:\n- build\n\nbuild-job:\nstage: build\nid_tokens:\n    INFISICAL_ID_TOKEN:\n        aud: infisical-aud-test\nscript:\n    - apt update && apt install -y curl\n    - curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | bash\n    - apt-get update && apt-get install -y infisical\n    - export INFISICAL_TOKEN=$(infisical login --method=oidc-auth --machine-identity-id=4e807a78-1b1c-4bd6-9609-ef2b0cf4fd54 --oidc-jwt=$INFISICAL_ID_TOKEN --silent --plain)\n    - infisical run --projectId=1d0443c1-cd43-4b3a-91a3-9d5f81254a89 --env=dev -- npm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Token with Glob Pattern Scope\nDESCRIPTION: This command demonstrates creating a service token with a scope using a glob pattern. It grants read and write access to all paths under 'dev:/backend'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical service-token create --scope=dev:/backend/** --access-level=read --access-level=write\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with GCP IAM Auth\nDESCRIPTION: Shows how to set up the Infisical client using GCP IAM authentication, including specifying the service account key file path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new InfisicalClient({\n    auth: {\n      gcpIam: {\n        identityId: \"YOUR_IDENTITY_ID\",\n        serviceAccountKeyFilePath: \"./path/to/your/service-account-key.json\"\n      }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Universal Auth API Response Example\nDESCRIPTION: Sample JSON response from the Universal Auth login endpoint showing the access token and related metadata.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/universal-auth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"accessToken\": \"...\",\n  \"expiresIn\": 7200,\n  \"accessTokenMaxTTL\": 43244\n  \"tokenType\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Request for Creating an Intermediate CA in Infisical\nDESCRIPTION: This code demonstrates how to create an intermediate CA chained to a parent CA through the API. The request specifies the CA configuration including the parent CA ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/ca' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"name\": \"Intermediate CA\",\n      \"description\": \"This is our company intermediate CA\",\n      \"keyAlgorithm\": \"rsa\",\n      \"keyBits\": 4096,\n      \"notBefore\": \"2023-06-12\",\n      \"notAfter\": \"2025-06-12\",\n      \"subject\": {\n          \"commonName\": \"Intermediate CA\",\n          \"organization\": \"My Company\",\n          \"organizationalUnit\": \"Platform\",\n          \"country\": \"CA\"\n      },\n      \"parent\": {\n          \"caId\": \"...\"\n      }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Creating Terraform Cloud Sync - JSON\nDESCRIPTION: This JSON snippet shows a successful response from the Infisical API after creating a Terraform Cloud Sync. It includes all fields returned for a sync, such as sync status, IDs, connection details, environment, folder, destination configuration, and sync options. The response structure enables clients to track sync metadata, audit status, and correlate objects based on provided identifiers. It is representative of the data schema returned from Infisical for integration or automation purposes, and output fields may vary depending on the destination scope and completion status.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/terraform-cloud.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-terraform-cloud-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"terraform-cloud\",\n            \"name\": \"my-terraform-cloud-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"terraform-cloud\",\n        \"destinationConfig\": {\n            \"scope\": \"workspace\",\n            \"workspaceId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"workspaceName\": \"my-workspace\",\n            \"org\": \"my-organization-id\",\n            \"category\": \"terraform\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical for a Laravel Application\nDESCRIPTION: This command navigates to the project root directory and initializes Infisical for your Laravel application, setting up the necessary configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/laravel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: OIDC Authentication Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the authentication flow between GitLab Pipeline, GitLab Identity Provider, and Infisical for OIDC authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/gitlab.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as GitLab Pipeline\n  participant Idp as GitLab Identity Provider\n  participant Infis as Infisical\n\n  Client->>Idp: Step 1: Request identity token\n  Idp-->>Client: Return JWT with verifiable claims\n\n  Note over Client,Infis: Step 2: Login Operation\n  Client->>Infis: Send signed JWT to /api/v1/auth/oidc-auth/login\n\n  Note over Infis,Idp: Step 3: Query verification\n  Infis->>Idp: Request JWT public key using OIDC Discovery\n  Idp-->>Infis: Return public key\n\n  Note over Infis: Step 4: JWT validation\n  Infis->>Client: Return short-lived access token\n\n  Note over Client,Infis: Step 5: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Secrets for Proof of Concept Deployment\nDESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes secret for a minimal Infisical installation in a test or proof-of-concept environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/kubernetes-helm.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: infisical-secrets\ntype: Opaque\nstringData:\n  AUTH_SECRET: <>\n  ENCRYPTION_KEY: <>\n  SITE_URL: <>\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Collection via API\nDESCRIPTION: API request to add a certificate to an existing PKI collection. Requires collection ID and certificate ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/alerting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/collections/<collection-id>/items' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"type\": \"certificate\",\n      \"itemId\": \"id-of-certificate\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Native GCP ID Token in Infisical CLI\nDESCRIPTION: Command to log in using Native GCP ID Token method. It requires a machine identity ID for authentication in a GCP environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=gcp-id-token --machine-identity-id=<machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Office365 SMTP Environment Variables\nDESCRIPTION: This snippet provides the environment variable settings for configuring Infisical's email service using Office365. Replace `SMTP_USERNAME`, `SMTP_PASSWORD`, and `SMTP_FROM_ADDRESS` with your Office365 account email address and password.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=smtp.office365.com\nSMTP_USERNAME=username@yourdomain.com # your username\nSMTP_PASSWORD=password # your password\nSMTP_PORT=587\nSMTP_FROM_ADDRESS=username@yourdomain.com\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Renewing a Lease for Dynamic Secret in Infisical\nDESCRIPTION: This command renews a lease for a dynamic secret before it expires. It supports flags for environment selection, project folder specification, authentication, and lease lifetime.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/dynamic-secrets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical dynamic-secrets lease renew <lease-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease renew <lease-id> --path=\"/\" --env=dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease renew <lease-id> --projectId=<project-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease renew <lease-id> --token=<token>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease renew <lease-id> --ttl=<ttl>\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Application Credentials as Environment Variables in Infisical - Markdown\nDESCRIPTION: This snippet instructs the user to set two key environment variables in the Infisical deployment: INF_APP_CONNECTION_AZURE_CLIENT_ID and INF_APP_CONNECTION_AZURE_CLIENT_SECRET, corresponding to the Azure application's client ID and client secret. Setting these variables allows Infisical to use the Azure Key Vault OAuth flow. The snippet lists the variable names and their mapping to values from the Azure application registration, and signals the necessity of restarting the Infisical instance for the changes to take effect. No specific dependencies beyond a configured Infisical instance and Azure application are required. The variables must be set in the environment where Infisical runs. Expected input: Azure client ID and secret. Expected output: Successful Azure OAuth connection post-restart.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/azure-key-vault.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- `INF_APP_CONNECTION_AZURE_CLIENT_ID`: The **Application (Client) ID** of your Azure application.\n- `INF_APP_CONNECTION_AZURE_CLIENT_SECRET`: The **Client Secret** of your Azure application.\n```\n\n----------------------------------------\n\nTITLE: Creating Folders with Infisical CLI\nDESCRIPTION: Command to create a new folder with a specified name at a given path. Requires path and name parameters to specify location and folder name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets folders create --path=/some/path/to/folder --name=folder-name\n```\n\n----------------------------------------\n\nTITLE: Downloading Infisical Credentials File with wget in Bash\nDESCRIPTION: Command to download the Infisical .env file using wget.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-compose.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget -O .env https://raw.githubusercontent.com/Infisical/infisical/main/.env.example\n```\n\n----------------------------------------\n\nTITLE: Verifying a Digest with Infisical KMS API in Bash\nDESCRIPTION: This curl command shows how to verify a digest signature using the Infisical KMS API. It sends a POST request to the verification endpoint with the digest data, signature, signing algorithm, and a flag indicating it's a digest.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/kms/keys/<key-id>/verify \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"data\": <digest-output-of-openssl-command>,\n\"signature\": <base64-encoded-signature>,\n\"signingAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_512\",\n\"isDigest\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for CA Certificate Renewal Endpoint\nDESCRIPTION: This code snippet defines the OpenAPI specification for the endpoint used to renew a CA certificate. It specifies the HTTP method as POST and the path including the CA ID parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/certificate-authorities/renew.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Renew\"\nopenapi: \"POST /api/v1/pki/ca/{caId}/renew\"\n---\n```\n\n----------------------------------------\n\nTITLE: Running a React App with Infisical for Environment Variable Injection\nDESCRIPTION: This snippet demonstrates how to start your React application with Infisical to inject environment variables. It includes a general command pattern and a specific example using npm run dev.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/react.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Scan Command in Bash\nDESCRIPTION: Demonstrates basic usage of the 'infisical scan' command, including a verbose option to display full secret findings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/scan.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan\n\n# Display the full secret findings\ninfisical scan --verbose\n```\n\n----------------------------------------\n\nTITLE: Parsing Camunda Sync Creation Response - JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a typical response returned from the Infisical API after creating a Camunda Sync, including details such as IDs, sync status, configuration, and related connection/environment information. Consumers should parse this object to extract sync identifiers, status, and configuration options for further management or verification of the operation. No dependencies beyond basic JSON processing; expected input is the API HTTP response and the output is a JSON object describing the created sync resource.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/camunda.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-camunda-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"camunda\",\n            \"name\": \"my-camunda-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"camunda\",\n        \"destinationConfig\": {\n            \"scope\": \"cluster\",\n            \"clusterUUID\": \"cc4c8dae-dce9-4f4c-9882-132b2bd65fa5\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Secrets Manager IAM Policy\nDESCRIPTION: This JSON policy defines the minimum IAM permissions required for Infisical to sync secrets to AWS Secrets Manager. It includes permissions for listing, creating, updating, and deleting secrets, as well as KMS permissions for encryption operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n{\n    \"Sid\": \"AllowSecretsManagerAccess\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n        \"secretsmanager:ListSecrets\",\n        \"secretsmanager:GetSecretValue\",\n        \"secretsmanager:BatchGetSecretValue\",\n        \"secretsmanager:CreateSecret\",\n        \"secretsmanager:UpdateSecret\",\n        \"secretsmanager:DeleteSecret\",\n        \"secretsmanager:DescribeSecret\",\n        \"secretsmanager:TagResource\",\n        \"secretsmanager:UntagResource\",\n        \"kms:ListAliases\", // if you need to specify the KMS key\n        \"kms:Encrypt\", // if you need to specify the KMS key\n        \"kms:Decrypt\", // if you need to specify the KMS key\n        \"kms:DescribeKey\" // if you need to specify the KMS key\n    ],\n    \"Resource\": \"*\"\n}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Resource Definitions in Kubernetes Cluster\nDESCRIPTION: This command installs the Custom Resource Definitions (CRDs) into the Kubernetes cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Listing Dynamic Secrets in Infisical Project\nDESCRIPTION: This command prints out all dynamic secrets in your Infisical project. It can be used with environment variables for authentication and performance optimization.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/dynamic-secrets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical dynamic-secrets\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<identity-client-id> --client-secret=<identity-client-secret> --silent --plain)\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_DISABLE_UPDATE_CHECK=true\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets --projectId=<project-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets --token=<token>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets --path=\"/\" --env=dev\n```\n\n----------------------------------------\n\nTITLE: Adding Infisical Helm Repository (Bash)\nDESCRIPTION: Adds the official Infisical Helm chart repository named 'infisical-helm-charts' from the specified Cloudsmith URL to the local Helm configuration. This allows Helm to find and install the Infisical Secrets Operator chart. Requires the Helm CLI to be installed and configured.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add infisical-helm-charts 'https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub App Environment Variables for Self-Hosted Infisical\nDESCRIPTION: Environment variables required for configuring a GitHub App connection on a self-hosted Infisical instance. These variables include the client ID, client secret, app slug, app ID, and private key from your GitHub application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nINF_APP_CONNECTION_GITHUB_APP_CLIENT_ID: The **Client ID** of your GitHub application.\nINF_APP_CONNECTION_GITHUB_APP_CLIENT_SECRET: The **Client Secret** of your GitHub application.\nINF_APP_CONNECTION_GITHUB_APP_SLUG: The **Slug** of your GitHub application. This is the one found in the URL.\nINF_APP_CONNECTION_GITHUB_APP_ID: The **App ID** of your GitHub application.\nINF_APP_CONNECTION_GITHUB_APP_PRIVATE_KEY: The **Private Key** of your GitHub application.\n```\n\n----------------------------------------\n\nTITLE: Creating Intermediate CA via API Request\nDESCRIPTION: API request to create an intermediate Certificate Authority specifying type and common name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/ca' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"projectSlug\": \"<your-project-slug>\",\n      \"type\": \"intermediate\",\n      \"commonName\": \"My Intermediate CA\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Result of Creating Azure App Configuration Sync via Infisical API (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the API response returned after successfully creating an Azure App Configuration Secret Sync through the Infisical endpoint. The response provides detailed sync metadata such as IDs, status, timestamps, configuration parameters, and relationships to associated Azure and project resources. This is for informational purposes, enabling clients to programmatically interpret the results and track sync jobs.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/azure-app-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-azure-app-configuration-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"azure\",\n            \"name\": \"my-azure-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"azure-app-configuration\",\n        \"destinationConfig\": {\n            \"configurationUrl\": \"https://my-azure-app-configuration.azconfig.io\",\n            \"label\": \"my-label\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SecretID for AppRole Authentication in HashiCorp Vault\nDESCRIPTION: Vault CLI command to generate a new SecretID for the 'infisical' role. The SecretID serves as a password component for AppRole authentication and is required for Infisical to authenticate with Vault.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cloud/hashicorp-vault.mdx#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nvault write -force auth/approle/role/infisical/secret-id\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status via kubectl (Bash)\nDESCRIPTION: This command uses kubectl, the Kubernetes command-line tool, to retrieve the status of the specified pod (`nginx-secrets-store`). It's used to verify if the pod that should mount secrets is running correctly.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Check pod status\nkubectl get pod nginx-secrets-store\n```\n\n----------------------------------------\n\nTITLE: Update KMS Key OpenAPI Endpoint Definition\nDESCRIPTION: OpenAPI specification for the PATCH endpoint that updates an existing key in the KMS. The endpoint uses the keyId parameter to identify the specific key to update.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/kms/keys/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v1/kms/keys/{keyId}\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Against Downloaded CRL using OpenSSL (Bash)\nDESCRIPTION: This command uses OpenSSL to verify a certificate (`cert.pem`) against a specific Certificate Revocation List (`crl.pem`) obtained from its issuing Certificate Authority (`chain.pem`). The `-crl_check` flag enables CRL verification.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopenssl verify -crl_check -CAfile chain.pem -CRLfile crl.pem cert.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Helm Chart Values for Infisical Deployment\nDESCRIPTION: This YAML configuration defines the values used by the Helm chart to deploy Infisical. It includes settings for the Infisical application, PostgreSQL database, Redis, and ingress configuration. The file allows for customization of various deployment aspects such as image versions, resource allocations, and service configurations.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/infisical-standalone-postgres/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfullnameOverride: \"\"\ninfisical:\n  affinity: {}\n  autoDatabaseSchemaMigration: true\n  databaseSchemaMigrationJob:\n    image:\n      pullPolicy: \"IfNotPresent\"\n      repository: \"ghcr.io/groundnuty/k8s-wait-for\"\n      tag: \"no-root-v2.0\"\n  deploymentAnnotations: {}\n  enabled: true\n  fullnameOverride: \"\"\n  image:\n    imagePullSecrets: []\n    pullPolicy: \"IfNotPresent\"\n    repository: \"infisical/infisical\"\n    tag: \"v0.93.1-postgres\"\n  kubeSecretRef: \"infisical-secrets\"\n  name: \"infisical\"\n  podAnnotations: {}\n  replicaCount: 2\n  resources:\n    limits:\n      memory: \"600Mi\"\n    requests:\n      cpu: \"350m\"\n  service:\n    annotations: {}\n    nodePort: \"\"\n    type: \"ClusterIP\"\n  serviceAccount:\n    annotations: {}\n    create: true\n    name: null\ningress:\n  annotations: {}\n  enabled: true\n  hostName: \"\"\n  ingressClassName: \"nginx\"\n  nginx:\n    enabled: true\n  tls: []\nnameOverride: \"\"\npostgresql:\n  auth:\n    database: \"infisicalDB\"\n    password: \"root\"\n    username: \"infisical\"\n  enabled: true\n  fullnameOverride: \"postgresql\"\n  name: \"postgresql\"\n  useExistingPostgresSecret:\n    enabled: false\n    existingConnectionStringSecret:\n      key: \"\"\n      name: \"\"\nredis:\n  architecture: \"standalone\"\n  auth:\n    password: \"mysecretpassword\"\n  cluster:\n    enabled: false\n  enabled: true\n  fullnameOverride: \"redis\"\n  name: \"redis\"\n  usePassword: true\n```\n\n----------------------------------------\n\nTITLE: Deleting Folders with Infisical CLI\nDESCRIPTION: Command to delete an existing folder by name at a specified path. Requires path and name parameters to identify the folder to be deleted.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/secrets.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets folders delete --path=/some/path/to/folder --name=folder-name\n```\n\n----------------------------------------\n\nTITLE: Working with .env Files in Infisical\nDESCRIPTION: Examples of environment file interactions including importing and exporting secrets in .env format. No code shown but functionality described for both importing by file drop and exporting via download button.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.env\n```\n\n----------------------------------------\n\nTITLE: Creating a Lease for Dynamic Secret in Infisical\nDESCRIPTION: This command creates a new lease for a specified dynamic secret. It supports various flags for environment selection, output formatting, and authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/dynamic-secrets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical dynamic-secrets lease create <dynamic-secret-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease create dynamic-secret-postgres --plain\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease create <dynamic-secret-name> --path=\"/\" --env=dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease create <dynamic-secret-name> --projectId=<project-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease create <dynamic-secret-name> --token=<token>\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical dynamic-secrets lease create <dynamic-secret-name> --ttl=<ttl>\n```\n\n----------------------------------------\n\nTITLE: Reading RoleID for AppRole Authentication in HashiCorp Vault\nDESCRIPTION: Vault CLI command to retrieve the RoleID for the 'infisical' role. The RoleID serves as a username component for AppRole authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/cloud/hashicorp-vault.mdx#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nvault read auth/approle/role/infisical/role-id\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Infisical C# Client\nDESCRIPTION: Shows how to decrypt data using the DecryptSymmetric method. Requires the ciphertext, key, initialization vector, and authentication tag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar decryptOptions = new DecryptSymmetricOptions\n{\n    Key = key,\n    Ciphertext = encryptedData.Ciphertext,\n    Iv = encryptedData.Iv,\n    Tag = encryptedData.Tag,\n};\n\nvar decryptedPlaintext = infisical.DecryptSymmetric(decryptOptions);\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PATCH Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification defining the PATCH endpoint for updating SSH certificate templates. The endpoint requires a certificateTemplateId parameter in the path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/ssh/certificate-templates/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPATCH /api/v1/ssh/certificate-templates/{certificateTemplateId}\n```\n\n----------------------------------------\n\nTITLE: Running a Vite App with Infisical for Environment Variable Injection\nDESCRIPTION: This command starts your Vite application with Infisical, allowing it to inject environment variables from your Infisical configuration into your application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Azure Key Vault Sync via API (Bash/cURL)\nDESCRIPTION: This Bash snippet demonstrates how to create an Azure Key Vault Sync using the Infisical API via a cURL POST request. It sends a JSON payload to the `/api/v1/secret-syncs/azure-key-vault` endpoint, specifying parameters like the sync name, project ID, connection ID, source environment/path, sync options (e.g., `initialSyncBehavior`), and the target Azure Key Vault URL (`vaultBaseUrl`). This serves as an alternative method to configuring the sync through the Infisical UI.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/azure-key-vault.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/azure-key-vault \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-key-vault-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"vaultBaseUrl\": \"https://my-key-vault.vault.azure.net\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring gcpIamAuth in InfisicalPushSecret CRD\nDESCRIPTION: This example demonstrates how to set up GCP IAM authentication in the InfisicalPushSecret CRD, including the machine identity ID and service account key file path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  gcpIamAuth:\n    identityId: <machine-identity-id>\n    serviceAccountKeyFilePath: </path-to-service-account-key-file.json>\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical PKI Issuer Controller via kubectl (Bash)\nDESCRIPTION: This command installs the Infisical PKI Issuer controller into the Kubernetes cluster by applying its installation manifest from the Infisical GitHub repository. This controller manages the interaction between cert-manager and Infisical PKI.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/Infisical/infisical-issuer/main/build/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Kubernetes Operator Controller\nDESCRIPTION: This command runs the Kubernetes operator controller in the foreground.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Response Format for Signing Data with Infisical KMS API\nDESCRIPTION: This code snippet shows the expected response format when signing data using the Infisical KMS API. The response includes the base64 encoded signature, the ID of the key used for signing, and the signing algorithm used.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"signature\": \"JYuiBt1Ta9pbqFIW9Ou6qzBsFhjYbMJp9k4dP87ILrO+F2MPnp85g3nOlXK1ttZmRoGWsWnLNDRn9W3rf5VtkeaixPqUW/KvY/fM3CxdMyIV3BuxlGgDksjL8X34Eqkrz4CCPo9hjB5uT+rBCOxCgZqRbOdATPipAneUapI9npseNquEeh3jPklwviBix83PJHV9PW2t03AGGUXuMY55ZaFEIMv+IrI1WYdnPVIXDyIitYsS3y+/6KRfhVeTcPNJ5Rw+FE9y1eZzDEZtTNpxOfUT3QIoXmpZlYL4HbhRuJBZ+Yx54C7uPiUIN9U69XbyXt+Kkynykw2HPaagwuCZxiqCU5sFfLnrVbc3dmZxQcX2yRrs2gmFamzBx+uVbi648H4mb7WuE5UPTBjjA11jRsBjCY0YS2T4Vgfe1RlzlPQkZgjP/bnCCGDqXa3/VZAlZX1nTI51X995bPHBQI0rq2sNDlIXenwiAy1wJSITbSI8DbUx09Cr83xCEaYAE6R6PUfog/tbIUXi0VbrYsCVkAGCK446Wb1vW6q7HR8jrjXNwmXlqN9eLbSVWqdWj7N7fieeTYSrECtUaAjxtUYTIVsH2bfT6FOEM9gMWKffOpFowVzzr3B9bNQLIhnEEwebxBw947i4OcxyVIcEUuumWxoKvcbSPxzJ8v1M3SoBBh4=\", // base64 encoded signature\n    \"keyId\": \"62b2c14e-58af-4199-9842-02995c63edf9\",\n    \"signingAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_512\",\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Infisical Secrets Action with OIDC Auth in GitHub Actions YAML Workflow\nDESCRIPTION: This YAML workflow configures a GitHub Actions pipeline that employs the Infisical Secrets Action to retrieve secrets securely using OIDC authentication. It illustrates workflow declaration, permission setup, and job structure. The action is parameterized via 'with' inputs, including 'method' (set to 'oidc'), 'env-slug', 'project-slug', and 'identity-id'. Prerequisites include a valid configured identity in Infisical and proper OIDC integration. The workflow expects manual triggers and uses Ubuntu runners. Secrets are loaded into the workflow's environment for use by subsequent jobs.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/github.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Manual workflow\n\non:\n    workflow_dispatch:\n\npermissions:\n    id-token: write # This is required for requesting the JWT\n\njobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: Infisical/secrets-action@v1.0.7\n              with:\n                  method: \"oidc\"\n                  env-slug: \"dev\"\n                  project-slug: \"ggggg-9-des\"\n                  identity-id: \"6b579c00-5c85-4b44-aabe-f8a\n...\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Project Membership Creation\nDESCRIPTION: API endpoint specification for creating a project membership by making a POST request to /api/v2/workspace/{projectId}/groups/{groupId}\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/project-groups/create.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPOST /api/v2/workspace/{projectId}/groups/{groupId}\n```\n\n----------------------------------------\n\nTITLE: Getting CSR for Intermediate CA\nDESCRIPTION: API request to retrieve the Certificate Signing Request (CSR) for an intermediate CA.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'https://app.infisical.com/api/v1/pki/ca/<intermediate-ca-id>/csr' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --data-raw ''\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Windmill Sync Creation in JSON\nDESCRIPTION: This code snippet shows the expected JSON response structure when creating a Windmill Sync via the API. It includes details about the created sync, such as its ID, name, configuration, and status.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/windmill.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-windmill-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"windmill\",\n            \"name\": \"my-windmill-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"windmill\",\n        \"destinationConfig\": {\n            \"workspace\": \"my-workspace\",\n            \"path\": \"f/folder/path/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining SSH Certificates with Infisical CLI\nDESCRIPTION: This command issues SSH credentials from a certificate template and loads them into the SSH agent. It requires specifying the certificate template ID and principals (usernames).\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical ssh issue-credentials --certificateTemplateId=<certificate-template-id> --principals=<username> --addToAgent\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Container Definitions Template\nDESCRIPTION: Terraform template file defining container configurations including the Infisical Agent sidecar with environment variables for authentication and a shared EFS volume mount point.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ecs-with-agent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n[\n...snip...\n  {\n    \"name\": \"infisical-sidecar\",\n    \"image\": \"${sidecar_image}\",\n    \"cpu\": 1024,\n    \"memory\": 1024,\n    \"networkMode\": \"bridge\",\n    \"command\": [\"agent\"],\n    \"essential\": false,\n    \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"/ecs/agent\",\n          \"awslogs-region\": \"${aws_region}\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n    },\n    \"healthCheck\": {\n        \"command\": [\"CMD-SHELL\", \"agent\", \"--help\"],\n        \"interval\": 30,\n        \"timeout\": 5,\n        \"retries\": 3,\n        \"startPeriod\": 0\n    },\n    \"environment\": [\n      {\n        \"name\": \"INFISICAL_MACHINE_IDENTITY_ID\",\n        \"value\": \"${machine_identity_id}\"\n      },\n      {\n        \"name\": \"INFISICAL_AGENT_CONFIG_BASE64\",\n        \"value\": \"${agent_config}\"\n      }\n    ],\n    \"mountPoints\": [\n      {\n          \"containerPath\": \"/infisical-agent\",\n          \"sourceVolume\": \"infisical-efs\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Response Format for Verifying Data with Infisical KMS API\nDESCRIPTION: This code snippet shows the expected response format when verifying a signature using the Infisical KMS API. The response includes a boolean indicating whether the signature is valid, the ID of the key used for verification, and the signing algorithm used.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"signatureValid\": true,\n    \"keyId\": \"62b2c14e-58af-4199-9842-02995c63edf9\",\n    \"signingAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_512\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terraform Cloud Connection by ID using OpenAPI\nDESCRIPTION: This OpenAPI specification defines a GET endpoint to fetch a specific Terraform Cloud connection using its unique identifier. The endpoint path includes a variable 'connectionId' to specify which connection to retrieve.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/terraform-cloud/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/terraform-cloud/{connectionId}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical using Universal Auth\nDESCRIPTION: Command to authenticate with Infisical using Universal Auth credentials and store the access token as an environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<identity-client-id> --client-secret=<identity-client-secret> --silent --plain)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Helm Chart with HSM Configuration\nDESCRIPTION: Command to upgrade the Infisical Helm chart with the updated values file that includes HSM integration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install infisical infisical-helm-charts/infisical-standalone --values /path/to/values.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Symmetric Key for Encryption\nDESCRIPTION: Creates a base64-encoded 256-bit symmetric key for encryption/decryption operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst key = client.createSymmetricKey();\n```\n\n----------------------------------------\n\nTITLE: Deleting Secret with Infisical C# Client\nDESCRIPTION: Shows how to delete a secret from Infisical using the DeleteSecret method. Requires environment, project ID, and secret name parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new DeleteSecretOptions\n{\n    Environment = \"dev\",\n    ProjectId = \"PROJECT_ID\",\n    SecretName = \"NEW_SECRET\",\n};\n\nvar deletedSecret = infisical.DeleteSecret(options);\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Infisical CLI (Bash)\nDESCRIPTION: Demonstrates a complete workflow for setting up and using the Infisical CLI after installation. It includes installing the CLI globally via npm, authenticating the user with their Infisical account, initializing a project (linking a local directory to an Infisical project), and listing the secrets accessible within the configured project and environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/npm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install the Infisical CLI\n$ npm install -g @infisical/cli\n\n# Authenticate with the Infisical CLI\n$ infisical login \n\n# Initialize your Infisical CLI\n$ infisical init\n\n# List your secrets with Infisical CLI\n$ infisical secrets\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Volume Claim for HSM Client Files\nDESCRIPTION: Kubernetes manifest to create a Persistent Volume Claim (PVC) that will store the HSM client files for access by the Infisical deployment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: infisical-data-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 500Mi\nEOF\n```\n\n----------------------------------------\n\nTITLE: Registering a Host with Infisical SSH\nDESCRIPTION: Command to register a remote host with Infisical SSH, including configuration of SSH daemon and certificate files.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo infisical ssh add-host --projectId=<project-id> --hostname=<hostname> --token=\"$INFISICAL_TOKEN\" --writeUserCaToFile --writeHostCertToFile --configureSshd\n```\n\n----------------------------------------\n\nTITLE: Interpreting Infisical GitHub Sync API Response (JSON)\nDESCRIPTION: This snippet displays a typical JSON response from Infisical's API upon successfully creating a GitHub Sync. No external dependencies are required to parse the result aside from a JSON parser. The object includes metadata such as sync id, status, project and environment info, sync options, and destination configuration, along with timestamps for sync operations. All parameters directly reflect the input payload and the API's internal state, with some nullable fields if not applicable to the operation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-github-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"github\",\n            \"name\": \"my-github-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"github\",\n        \"destinationConfig\": {\n            \"scope\": \"repository\",\n            \"owner\": \"my-github\",\n            \"repo\": \"my-repository\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Symmetric Key\nDESCRIPTION: Demonstrates symmetric encryption of data using a provided key. Returns initialization vector, authentication tag, and ciphertext.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { iv, tag, ciphertext } = await client.encryptSymmetric({\n    key: key,\n    plaintext: \"Infisical is awesome!\",\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a NestJS Project\nDESCRIPTION: Commands to navigate to your project directory and initialize Infisical for your NestJS application. This creates the necessary configuration to connect your project with your Infisical secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/nestjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication for InfisicalDynamicSecret in Kubernetes\nDESCRIPTION: This YAML configuration demonstrates how to set up Azure authentication for the InfisicalDynamicSecret. It specifies the identity ID of the machine identity created for Azure authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  authentication:\n    azureAuth:\n      identityId: <machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Universal Auth Login in Infisical Go SDK\nDESCRIPTION: Demonstrates how to perform Universal Auth login using the Infisical Go SDK, either with environment variables or direct method calls.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n_, err := client.Auth().UniversalAuthLogin(\"CLIENT_ID\", \"CLIENT_SECRET\")\n\nif err != nil {\n  fmt.Println(err)\n  os.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Symmetric Key\nDESCRIPTION: Shows how to decrypt data using symmetric decryption with the provided key, initialization vector, tag, and ciphertext.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst decryptedString = await client.decryptSymmetric({\n    key: key,\n    iv: iv,\n    tag: tag,\n    ciphertext: ciphertext,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Public Key from Infisical KMS in Go\nDESCRIPTION: This snippet demonstrates how to retrieve a public key from the Infisical KMS. This method only works for keys with 'sign-verify' usage and will return an error if attempted with encryption/decryption keys.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\npublicKey, err := client.Kms().Signing().GetPublicKey(infisical.KmsGetPublicKeyOptions{\n  KeyId: \"<key-id>\",\n})\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Build with Environment-Specific Configurations\nDESCRIPTION: Example command for running a Gradle build with Infisical-injected environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- gradle build\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Infisical Development Server\nDESCRIPTION: This command stops and removes all containers created by the Docker Compose file for the Infisical development environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/developing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.dev.yml down\n```\n\n----------------------------------------\n\nTITLE: Revoking a Certificate via Infisical API (Bash/cURL)\nDESCRIPTION: This cURL command sends a POST request to the Infisical API endpoint to revoke a specific certificate identified by its `<cert-serial-number>`. It requires an Authorization bearer token and specifies the reason for revocation (e.g., 'UNSPECIFIED') in the JSON payload.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/certificates/<cert-serial-number>/revoke' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"revocationReason\": \"UNSPECIFIED\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical from AWS Lambda using Node.js\nDESCRIPTION: Sample code demonstrating how to construct a signed GetCallerIdentity query and authenticate with Infisical from within an AWS Lambda function. Uses AWS SDK v4 signing and axios for HTTP requests.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/aws-auth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AWS from \"aws-sdk\";\nimport axios from \"axios\";\n\nexport const handler = async (event, context) => {\n    try {\n        const region = process.env.AWS_REGION;\n        AWS.config.update({ region });\n\n        const iamRequestURL = `https://sts.${region}.amazonaws.com/`;\n        const iamRequestBody = \"Action=GetCallerIdentity&Version=2011-06-15\";\n        const iamRequestHeaders = {\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n            Host: `sts.${region}.amazonaws.com`,\n        };\n\n        // Create the request\n        const request = new AWS.HttpRequest(iamRequestURL, region);\n        request.method = \"POST\";\n        request.headers = iamRequestHeaders;\n        request.headers[\"X-Amz-Date\"] = AWS.util.date\n            .iso8601(new Date())\n            .replace(/[:-]|\\.\\d{3}/g, \"\");\n        request.body = iamRequestBody;\n        request.headers[\"Content-Length\"] =\n        Buffer.byteLength(iamRequestBody).toString();\n\n        // Sign the request\n        const signer = new AWS.Signers.V4(request, \"sts\");\n        signer.addAuthorization(AWS.config.credentials, new Date());\n\n        const infisicalUrl = \"https://app.infisical.com\"; // or your self-hosted Infisical URL\n        const identityId = \"<your-identity-id>\";\n\n        const { data } = await axios.post(\n            `${infisicalUrl}/api/v1/auth/aws-auth/login`,\n            {\n                identityId,\n                iamHttpRequestMethod: \"POST\",\n                iamRequestUrl: Buffer.from(iamRequestURL).toString(\"base64\"),\n                iamRequestBody: Buffer.from(iamRequestBody).toString(\"base64\"),\n                iamRequestHeaders: Buffer.from(\n                JSON.stringify(iamRequestHeaders)\n                ).toString(\"base64\"),\n            }\n        );\n\n        console.log(\"result data: \", data); // access token here\n    } catch (err) {\n        console.error(err);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Infisical Project Role from V1 to V2 in Terraform HCL\nDESCRIPTION: Provides a complete example of migrating an Infisical project role from V1 to V2 permissions. The V2 configuration expands permissions for secrets, secret-imports, secret-folders, and dynamic-secrets with appropriate action mappings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/internals/permissions/migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# Old V1 configuration\nresource \"infisical_project_role\" \"example\" {\n  name = \"example\"\n  permissions = [\n    {\n      subject = \"secrets\"\n      action = \"read\"\n    },\n    {\n      subject = \"secrets\"\n      action = \"edit\"\n    }\n  ]\n}\n\n# New V2 configuration\nresource \"infisical_project_role\" \"example\" {\n  name = \"example\"\n  permissions_v2 = [\n    # Original secrets permission\n    {\n      subject = \"secrets\"\n      action = [\"read\", \"edit\"]\n      inverted = false\n    },\n    # Add equivalent secret-imports permission\n    {\n      subject = \"secret-imports\"\n      action = [\"read\", \"edit\"]\n      inverted = false\n    },\n    # Add secret-folders permission (without read)\n    {\n      subject = \"secret-folders\"\n      action = [\"edit\"]\n      inverted = false\n    },\n    # Add dynamic-secrets permission with mapped actions\n    {\n      subject = \"dynamic-secrets\"\n      action = [\"read-root-credential\", \"edit-root-credential\", \"lease\"]\n      inverted = false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key with OpenSSL\nDESCRIPTION: Command to generate a random 16 byte hex string for the ENCRYPTION_KEY environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 16\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Infisical Documentation\nDESCRIPTION: These commands install the Mintlify CLI globally using either npm or yarn. Mintlify is used for managing Infisical's documentation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/developing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add mintlify\n```\n\n----------------------------------------\n\nTITLE: Creating a Vercel Connection via API Request\nDESCRIPTION: This code snippet demonstrates how to create a Vercel Connection in Infisical using a POST API request. It sends a JSON payload containing the connection name, authentication method (API token), and the token credentials to the Infisical API endpoint.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/vercel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n        --url https://app.infisical.com/api/v1/app-connections/vercel \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n            \"name\": \"my-vercel-connection\",\n            \"method\": \"api-token\",\n            \"credentials\": {\n                \"apiToken\": \"...\",\n            }\n        }'\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Kubernetes Operator\nDESCRIPTION: This command builds the Docker image for the Kubernetes operator and pushes it to the specified registry.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/k8-operator:tag\n```\n\n----------------------------------------\n\nTITLE: API Response Structure for Infisical Bootstrap Process\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the bootstrap process. It includes details about the created user, organization, and machine identity, including the important access token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/automated-bootstrapping.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identity\": {\n    \"credentials\": {\n      \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eUlkIjoiZGIyMjQ3OTItZWQxOC00Mjc3LTlkYWUtNTdlNzUyMzE1ODU0IiwiaWRlbnRpdHlBY2Nlc3NUb2tlbklkIjoiZmVkZmZmMGEtYmU3Yy00NjViLWEwZWEtZjM5OTNjMTg4OGRlIiwiYXV0aFRva2VuVHlwZSI6ImlkZW50aXR5QWNjZXNzVG9rZW4iLCJpYXQiOjE3NDIzMjI0ODl9.mqcZZqIFqER1e9ubrQXp8FbzGYi8nqqZwfMvz09g-8Y\"\n    },\n    \"id\": \"db224792-ed18-4277-9dae-57e752315854\",\n    \"name\": \"Instance Admin Identity\"\n  },\n  \"message\": \"Successfully bootstrapped instance\",\n  \"organization\": {\n    \"id\": \"b56bece0-42f5-4262-b25e-be7bf5f84957\",\n    \"name\": \"dog\",\n    \"slug\": \"dog-v-e5l\"\n  },\n  \"user\": {\n    \"email\": \"admin@example.com\",\n    \"firstName\": \"Admin\",\n    \"id\": \"a418f355-c8da-453c-bbc8-6c07208eeb3c\",\n    \"lastName\": \"User\",\n    \"superAdmin\": true,\n    \"username\": \"admin@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Token with Project ID\nDESCRIPTION: This command creates a service token for a specific project using the project ID. It grants read access to the 'dev:/global' scope.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical service-token create --scope=dev:/global --access-level=read --projectId=63cefb15c8d3175601cfa989\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Authentication for InfisicalDynamicSecret in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to set up universal authentication for the InfisicalDynamicSecret. It specifies the credentials reference for the machine identity used to authenticate with Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# infisical-push-secret.yaml\nspec:\n  universalAuth:\n    credentialsRef:\n      secretName: <secret-name>\n      secretNamespace: <secret-namespace>\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# machine-identity-credentials.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: universal-auth-credentials\ntype: Opaque\nstringData:\n  clientId: <machine-identity-client-id>\n  clientSecret: <machine-identity-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Setup Pod for HSM Client Files\nDESCRIPTION: Kubernetes manifest to create a temporary pod with the PVC mounted, allowing files to be copied into the persistent storage for later use by the Infisical deployment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hsm-setup-pod\nspec:\n  containers:\n  - name: setup\n    image: busybox\n    command: [\"/bin/sh\", \"-c\", \"sleep 3600\"]\n    volumeMounts:\n    - name: hsm-data\n      mountPath: /data\n  volumes:\n  - name: hsm-data\n    persistentVolumeClaim:\n      claimName: infisical-data-pvc\nEOF\n```\n\n----------------------------------------\n\nTITLE: Disabling Update Check with Environment Variable\nDESCRIPTION: This snippet shows how to disable the check for new CLI versions by setting the INFISICAL_DISABLE_UPDATE_CHECK environment variable. This can improve command execution time and is recommended for production environments.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Example\nexport INFISICAL_DISABLE_UPDATE_CHECK=true\n```\n\n----------------------------------------\n\nTITLE: Project Template API Response Structure\nDESCRIPTION: Sample response from the project template creation API showing the returned template object with its properties.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/project-templates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"projectTemplate\": {\n        \"id\": \"<template-id>\",\n        \"name\": \"my-project-template\",\n        \"description\": \"...\",\n        \"environments\": \"[...]\",\n        \"roles\": \"[...]\",\n        \"orgId\": \"<org-id>\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Signing Algorithms in Infisical KMS using Go\nDESCRIPTION: This snippet shows how to retrieve a list of signing algorithms available for a specific key in the Infisical KMS. It requires the key ID and returns an array of available signing algorithm names that can be used with that key.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.Kms().Signing().ListSigningAlgorithms(infisical.KmsListSigningAlgorithmsOptions{\n  KeyId: \"<key-id>\",\n})\n```\n\n----------------------------------------\n\nTITLE: Identifying Infisical Cloud US Service Account for GCP Impersonation\nDESCRIPTION: Provides the specific GCP service account email (`infisical-us@infisical-us.iam.gserviceaccount.com`) for Infisical Cloud US. Grant the 'Service Account Token Creator' role to this principal on your target service account within your GCP project to allow Infisical Cloud US to perform impersonation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/gcp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninfisical-us@infisical-us.iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Reference in YAML\nDESCRIPTION: Example configuration for TLS CA certificate reference, including secret name, namespace, and key specifications for SSL/TLS connections to Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  tls:\n    caRef:\n      secretName: custom-ca-certificate\n      secretNamespace: default\n      key: ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication for Infisical Java SDK\nDESCRIPTION: This snippet shows how to set up Azure authentication for the Infisical Java SDK. It demonstrates creating client settings, authentication options, and configuring the Azure auth method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n  ClientSettings settings = new ClientSettings();\n  AuthenticationOptions authOptions = new AuthenticationOptions();\n  AzureAuthMethod authMethod = new AzureAuthMethod();\n  \n  authMethod.setIdentityID(\"YOUR_IDENTITY_ID\");\n\n  authOptions.setAzure(authMethod);\n  settings.setAuth(authOptions);\n\n  InfisicalClient client = new InfisicalClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Client Secrets Implementation in Rust\nDESCRIPTION: Implementation of the ClientSecrets struct showing how to add new secret management methods to the SDK.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub struct ClientSecrets<'a> {\n    pub(crate) client: &'a mut crate::Client,\n}\n\nimpl<'a> ClientSecrets<'a> {\n    pub async fn create(&mut self, input: &CreateSecretOptions) -> Result<CreateSecretResponse> {\n        create_secret(self.client, input).await\n    }\n}\n\nimpl<'a> Client {\n    pub fn secrets(&'a mut self) -> ClientSecrets<'a> {\n        ClientSecrets { client: self }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Aliases with Infisical CLI\nDESCRIPTION: Demonstrates how to use custom aliases with Infisical to run commands that require secret injection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nyd() {\n  yarn dev\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=prod --path=/apps/reddit --command=\"source custom.sh && yd\"\n```\n\n----------------------------------------\n\nTITLE: Switching Between User Profiles in Infisical CLI\nDESCRIPTION: The 'infisical user switch' subcommand allows users to switch between profiles that are currently logged into the Infisical CLI. This is useful for managing multiple user accounts.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical user switch\n```\n\n----------------------------------------\n\nTITLE: Schema Generation - Rust Main Function\nDESCRIPTION: Main function implementation for generating type schemas using QuickType integration\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() -> Result<()> {\n    // Input types for new Client\n    write_schema_for!(infisical_json::client::ClientSettings);\n    // Input types for Client::run_command\n    write_schema_for!(infisical_json::command::Command);\n\n    // Output types for Client::run_command\n    // Only add structs which are direct results of SDK commands.\n    write_schema_for_response! {\n        infisical::manager::secrets::GetSecretResponse,\n        infisical::manager::secrets::ListSecretsResponse,\n        infisical::manager::secrets::UpdateSecretResponse,\n        infisical::manager::secrets::DeleteSecretResponse,\n        infisical::manager::secrets::CreateSecretResponse, // <-- This is the output from the above example!\n        infisical::auth::AccessTokenSuccessResponse\n    };\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Expiration Alert via API\nDESCRIPTION: API request to create an alert for certificate expiration monitoring. Specifies collection, alert timing, and notification recipients.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/alerting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/alerts' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"projectId\": \"<your-project-id>\",\n      \"pkiCollectionId\": \"<your-collection-id>\",\n      \"name\": \"My Alert\",\n      \"alertBeforeDays\": 30,\n      \"emails\": [\"johndoe@gmail.com\", \"janedoe@gmail.com\"]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Generating GCP ID Token with Curl\nDESCRIPTION: Makes a request to obtain an ID token from a GCE instance's metadata server. The token is used for authenticating with Infisical API.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/gcp-auth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Metadata-Flavor: Google\" \\'http://metadata/computeMetadata/v1/instance/service-accounts/default/identity?audience=<identityId>&format=full'\n```\n\n----------------------------------------\n\nTITLE: Microservice Folder Structure Example\nDESCRIPTION: Demonstrates a typical folder hierarchy for organizing secrets in a microservice architecture, showing how to structure environment variables and user-specific secrets across different services.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/folder.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n| service1\n|---- envars\n|---- users\n|-------- tokens1\n|-------- tokens2\n| service2\n|---- envars\n...\n```\n\n----------------------------------------\n\nTITLE: Creating an Infisical Certificate Template via API using cURL (Bash)\nDESCRIPTION: This Bash cURL command sends a POST request to the Infisical API endpoint `/api/v1/pki/certificate-templates` to create a certificate template. The request body includes the issuing CA ID (`caId`), a name for the template, and optional constraints like regular expressions for `commonName` and `subjectAlternativeName`, and a maximum `ttl`. Authentication (e.g., via Bearer token) is required but not shown in this basic example.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/certificate-templates' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"caId\": \"<ca-id>\",\n      \"name\": \"My Certificate Template\",\n      \"commonName\": \".*.acme.com\",\n      \"subjectAlternativeName\": \".*.acme.com\",\n      \"ttl\": \"1y\",\n  }'\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types with Quicktype\nDESCRIPTION: Example of generating TypeScript type definitions from the schema using quicktype. This code writes the generated types to the Node.js SDK directory.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ts = await quicktype({\n    inputData,\n    lang: \"typescript\",\n    rendererOptions: {}\n});\nawait ensureDir(\"./languages/node/src/infisical_client\");\nwriteToFile(\"./languages/node/src/infisical_client/schemas.ts\", ts.lines);\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Connection with Access Key via API\nDESCRIPTION: This bash snippet shows the beginning of an API request to create an AWS connection using the Access Key authentication method. It includes the endpoint and headers but the request data is incomplete in the provided text.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n        --url https://app.infisical.com/api/v1/app-connections/aws \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Data Decryption using Infisical KMS API in Bash\nDESCRIPTION: This snippet demonstrates the JSON response from Infisical KMS after decrypting ciphertext data. The response provides the base64-encoded plaintext under the 'plaintext' field. This format ensures secure handling and transmission of sensitive information, with required post-processing to decode back to the original string. The structure is straightforward and typically used as input for further processing or storage.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"plaintext\": \"lUFHM5Ggwo6TOfpuN1S==\" // base64 encoded plaintext\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Response for Azure Key Vault Sync Creation (JSON)\nDESCRIPTION: This JSON snippet shows a sample response received from the Infisical API upon successful creation of an Azure Key Vault Sync via the endpoint `/api/v1/secret-syncs/azure-key-vault`. The response object contains comprehensive details of the newly created `secretSync`, including its unique ID, user-defined name and description, status (enabled, sync status, timestamps), associated project, environment, folder details, connection information, and the configured destination Azure Key Vault URL.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/azure-key-vault.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-key-vault-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"azure\",\n            \"name\": \"my-azure-key-vault-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"azure-key-vault\",\n        \"destinationConfig\": {\n          \"vaultBaseUrl\": \"https://my-key-vault.vault.azure.net\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Environment in Infisical Config\nDESCRIPTION: Configuration example showing how to set a default environment in .infisical.json. This allows for consistent environment selection without needing to specify the --env flag in CLI commands.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/project-config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaceId\": \"63ee5410a45f7a1ed39ba118\",\n  \"defaultEnvironment\": \"test\",\n  \"gitBranchToEnvironmentMapping\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Secrets Store CSI Driver Helm Repository (Bash)\nDESCRIPTION: This command adds the official Helm chart repository for the Kubernetes Secrets Store CSI driver, which is a prerequisite for using the Infisical CSI provider. Helm must be installed and configured to run this command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical for a Project\nDESCRIPTION: Navigate to the project directory and initialize Infisical, creating a .infisical.json file for local project settings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to your project\ncd /path/to/project\n\n# initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Generating a New SSH Key Pair on a Host\nDESCRIPTION: This command generates a new RSA key pair for SSH host authentication with a 4096-bit key size and no passphrase. The keys are saved in the standard location.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ''\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Config Directory\nDESCRIPTION: This snippet shows how to explicitly set the directory where the .infisical.json file resides using the --project-config-dir flag. This is useful for certain monorepo setups.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/run.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical run --project-config-dir=/some-dir -- printenv\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Creating Auth0 Connection (JSON)\nDESCRIPTION: This JSON snippet shows a sample successful response from the Infisical API after creating an Auth0 connection. It includes details of the newly created connection, such as its ID, name, organization ID, creation/update timestamps, the connected application ('auth0'), the method used ('client-credentials'), and the non-sensitive parts of the credentials (domain, client ID, audience). The `clientSecret` is omitted for security.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/auth0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"appConnection\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-auth0-connection\",\n        \"version\": 1,\n        \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"app\": \"auth0\",\n        \"method\": \"client-credentials\",\n        \"credentials\": {\n            \"domain\": \"xxx-xxxxxxxxx.us.auth0.com\",\n            \"clientId\": \"...\",\n            \"audience\": \"https://xxx-xxxxxxxxx.us.auth0.com/api/v2/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Symmetric Key in Java\nDESCRIPTION: Creates a base64-encoded 256-bit symmetric key for encryption/decryption operations. Returns a string representing the generated key.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/java.mdx#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nString key = client.createSymmetricKey();\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Token with Multiple Scopes\nDESCRIPTION: This command shows how to create a service token with multiple scopes. It grants read access to both 'dev:/global' and 'dev:/backend/**' paths.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical service-token create --scope=dev:/global --scope=dev:/backend/** --access-level=read\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH API Endpoint for GCP Secret Manager Sync Update in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the PATCH endpoint used to update a GCP Secret Manager sync configuration. It specifies the endpoint path, request body structure, and possible response codes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/gcp-secret-manager/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"PATCH /api/v1/secret-syncs/gcp-secret-manager/{syncId}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with Azure Auth\nDESCRIPTION: Shows how to set up the Infisical client using Azure authentication method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new InfisicalClient({\n  auth: {\n    azure: {\n      identityId: \"YOUR_IDENTITY_ID\"\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Token Reviewer Service Account\nDESCRIPTION: YAML configuration for creating a service account that will be used by Infisical to authenticate with the Kubernetes API Server\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: infisical-token-reviewer\n  namespace: default\n\n```\n\n----------------------------------------\n\nTITLE: Creating Vercel Sync via cURL - Bash\nDESCRIPTION: This Bash snippet uses cURL to call the Infisical REST API endpoint for creating a new Vercel Sync. Dependencies include curl and network access, with required parameters in a JSON POST body such as sync name, projectId, connectionId, environment, and destination configuration. The API expects a JSON payload, and successful requests result in the creation of a sync configuration linking Infisical secrets to a specified Vercel app and environment. Ensure proper API authentication according to your Infisical setup; error handling for failed requests should be implemented as needed.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/vercel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/vercel \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-vercel-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"app\": \"prj_bz7zgHvQETPvJWc5tmIr0tGRH9kE\",\n        \"env\": \"preview\",\n        \"branch\": \"test\",\n        \"appName\": \"nextjs-boilerplate\",\n        \"teamId\": \"team_0d444b5088888dd257\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: CircleCI Pipeline Configuration\nDESCRIPTION: CircleCI configuration file showing how to use OIDC token with Infisical Terraform provider\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/circleci.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\njobs:\n  terraform-apply:\n    docker:\n    - image: hashicorp/terraform:latest\n\n    steps:\n    - checkout\n    - run:\n        command: |\n          export INFISICAL_AUTH_JWT=\"$CIRCLE_OIDC_TOKEN\"\n          terraform init\n          terraform apply -auto-approve\n\nworkflows:\n  version: 2\n  build-and-test:\n    jobs:\n    - terraform-apply\n```\n\n----------------------------------------\n\nTITLE: Visualizing CA Hierarchy with Mermaid\nDESCRIPTION: A diagram showing the hierarchical relationship between Root CA and Intermediate CAs in a Private CA structure\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Root CA]\n    A --> B[Intermediate CA]\n    A --> C[Intermediate CA]\n```\n\n----------------------------------------\n\nTITLE: API Request for CA Renewal in Infisical\nDESCRIPTION: This code shows how to renew a CA certificate by making an API request to the Renew CA endpoint. The request specifies the new validity end date for the CA certificate.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/ca/<ca-id>/renew' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"type\": \"existing\",\n      \"notAfter\": \"2029-06-12\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sample OIDC Login Response Structure\nDESCRIPTION: Example response structure from a successful OIDC authentication request showing access token details and expiration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/general.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n\"accessToken\": \"...\",\n\"expiresIn\": 7200,\n\"accessTokenMaxTTL\": 43244\n\"tokenType\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Infisical API Authentication Request\nDESCRIPTION: HTTP request to authenticate with Infisical API using the Azure managed identity access token to obtain an Infisical access token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/azure-auth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/auth/gcp-auth/login' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-urlencode 'identityId=...' \\\n    --data-urlencode 'jwt=...'\n```\n\n----------------------------------------\n\nTITLE: Infisical API Authentication Response\nDESCRIPTION: Example response from Infisical API authentication endpoint containing the Infisical access token and its metadata.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/azure-auth.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"accessToken\": \"...\",\n    \"expiresIn\": 7200,\n    \"accessTokenMaxTTL\": 43244\n    \"tokenType\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Terraform Cloud Connection API\nDESCRIPTION: This snippet shows the expected JSON response after successfully creating a Terraform Cloud connection. The response includes details such as the connection ID, name, version, organization ID, timestamps, app type, authentication method, and credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/terraform-cloud.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"appConnection\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-terraform-cloud-connection\",\n        \"version\": 123,\n        \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"app\": \"terraform-cloud\",\n        \"method\": \"api-token\",\n        \"credentials\": {\n            \"apiToken\": \"...\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Daemon for Host Certificates\nDESCRIPTION: These configuration lines should be added to the sshd_config file to specify the host key and certificate locations for SSH server authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nHostKey /etc/ssh/ssh_host_rsa_key\nHostCertificate /etc/ssh/ssh_host_key-cert.pub\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Secret Key using OpenSSL (Bash)\nDESCRIPTION: This command uses the OpenSSL tool to generate a random 32-byte string encoded in base64. This generated string is suitable for use as the `AUTH_SECRET` environment variable required for self-hosted Infisical instances, which is used for signing and verifying JSON Web Tokens (JWTs).\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/okta.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Command JSON Response\nDESCRIPTION: Example JSON response returned by the bootstrap command showing created user, organization, and machine identity details.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identity\": {\n    \"credentials\": {\n      \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eUlkIjoiZGIyMjQ3OTItZWQxOC00Mjc3LTlkYWUtNTdlNzUyMzE1ODU0IiwiaWRlbnRpdHlBY2Nlc3NUb2tlbklkIjoiZmVkZmZmMGEtYmU3Yy00NjViLWEwZWEtZjM5OTNjMTg4OGRlIiwiYXV0aFRva2VuVHlwZSI6ImlkZW50aXR5QWNjZXNzVG9rZW4iLCJpYXQiOjE3NDIzMjI0ODl9.mqcZZqIFqER1e9ubrQXp8FbzGYi8nqqZwfMvz09g-8Y\"\n    },\n    \"id\": \"db224792-ed18-4277-9dae-57e752315854\",\n    \"name\": \"Instance Admin Identity\"\n  },\n  \"message\": \"Successfully bootstrapped instance\",\n  \"organization\": {\n    \"id\": \"b56bece0-42f5-4262-b25e-be7bf5f84957\",\n    \"name\": \"dog\",\n    \"slug\": \"dog-v-e5l\"\n  },\n  \"user\": {\n    \"email\": \"admin@example.com\",\n    \"firstName\": \"Admin\",\n    \"id\": \"a418f355-c8da-453c-bbc8-6c07208eeb3c\",\n    \"lastName\": \"User\",\n    \"superAdmin\": true,\n    \"username\": \"admin@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Injected Secrets in Spring Boot Application\nDESCRIPTION: Java code example demonstrating how to access Infisical-injected secrets within a Spring Boot application using the Environment interface. This allows you to retrieve secret values by their environment variable names.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/spring-boot-maven.mdx#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  ...\n  import org.springframework.core.env.Environment;\n\n  @SpringBootApplication\n  public class DemoApplication {\n    @Autowired\n    private Environment env;\n\n    @Bean\n    public void someMethod() {\n        System.out.println(env.getProperty(\"SOME_SECRET_NAME\"));\n      };\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering Infisical Backend Plugin in Backstage\nDESCRIPTION: TypeScript code to register the Infisical backend plugin in the Backstage backend entry point file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/external/backstage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBackend } from '@backstage/backend-defaults';\n\nconst backend = createBackend();\n\nbackend.add(import('@infisical/backstage-backend-plugin-infisical'));\n\nbackend.start();\n```\n\n----------------------------------------\n\nTITLE: OIDC Authentication Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the OIDC authentication workflow between Client, Identity Provider, and Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/general.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as Client\n  participant Idp as Identity Provider\n  participant Infis as Infisical\n\n  Client->>Idp: Step 1: Request identity token\n  Idp-->>Client: Return JWT with verifiable claims\n\n  Note over Client,Infis: Step 2: Login Operation\n  Client->>Infis: Send signed JWT to /api/v1/auth/oidc-auth/login\n\n  Note over Infis,Idp: Step 3: Query verification\n  Infis->>Idp: Request JWT public key using OIDC Discovery\n  Idp-->>Infis: Return public key\n\n  Note over Infis: Step 4: JWT validation\n  Infis->>Client: Return short-lived access token\n\n  Note over Client,Infis: Step 5: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Displaying Infisical Secrets\nDESCRIPTION: HTML template used by the Infisical Agent to render secrets fetched from an Infisical project. The template uses Go templating syntax to iterate through secrets and display them as list items on a webpage.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-swarm-with-agent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n    <h1>This file is rendered by Infisical agent template engine</h1>\n    <p>Here are the secrets that have been fetched from Infisical and stored in your volume mount</p>\n    <ol>\n      {{- with secret \"7df67a5f-d26a-4988-a375-7153c08149da\" \"dev\" \"/\" }}\n      {{- range . }}\n      <li>{{ .Key }}={{ .Value }}</li>\n      {{- end }}\n      {{- end }}\n    </ol>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Connection via API Request (Bash/JSON)\nDESCRIPTION: This Bash snippet demonstrates an API request payload for creating a new AWS application connection named 'my-aws-connection'. It specifies the 'access-key' authentication method and provides the necessary 'accessKeyId' and 'secretKey' credentials within a JSON structure.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n                                    \"name\": \"my-aws-connection\",\n                                    \"method\": \"access-key\",\n                                    \"credentials\": {\n                                        \"accessKeyId\": \"...\",\n                                        \"secretKey\": \"...\"\n                                    }\n                                }'\n```\n\n----------------------------------------\n\nTITLE: Response for AWS Secrets Manager Sync Creation - JSON\nDESCRIPTION: This snippet provides a sample JSON response returned after successfully creating an AWS Secrets Manager Sync through the Infisical API. The response includes metadata and status fields such as sync id, description, project and connection associations, state details, and destination configuration. No dependencies are required to interpret the response. The key output is validation of the sync's properties and readiness for subsequent operations or troubleshooting. The structure should be used to verify correct configuration or to programmatically inspect syncs after creation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/aws-secrets-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-secrets-manager-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"aws\",\n            \"name\": \"my-aws-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"aws-secrets-manager\",\n        \"destinationConfig\": {\n            \"region\": \"us-east-1\",\n            \"mappingBehavior\": \"one-to-one\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Helm Charts\nDESCRIPTION: This snippet demonstrates how to add the Infisical repository to Helm, and install both Infisical and the Infisical Secrets Operator using default values. It creates a namespace called 'infisical' for the installations.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Add the Infisical repository\nhelm repo add infisical 'https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/' && helm repo update\n\n# Install Infisical (default values)\nhelm upgrade --install --atomic \\\n  -n infisical --create-namespace \\\n  infisical infisical/infisical\n  \n# Install Infisical Secrets Operator (default values)\nhelm upgrade --install --atomic \\\n  -n infisical --create-namespace \\\n  infisical-secrets-operator infisical/secrets-operator\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Updating Vercel Secret Sync in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the PATCH endpoint used to update a Vercel secret sync configuration. It specifies the HTTP method and the endpoint path with a syncId parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/vercel/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"PATCH /api/v1/secret-syncs/vercel/{syncId}\"\n```\n\n----------------------------------------\n\nTITLE: OIDC JWT Authentication\nDESCRIPTION: Demonstrates authentication using an OIDC JWT token provided by an identity provider.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --oidc-jwt=<oidc-jwt-token>\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Account\nDESCRIPTION: YAML configuration for creating a new Kubernetes service account for Infisical authentication\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ServiceAccount\napiVersion: v1\nmetadata:\n  name: infisical-service-account\n```\n\n----------------------------------------\n\nTITLE: Generating AUTH_SECRET using OpenSSL (Bash)\nDESCRIPTION: Provides a Bash command using OpenSSL to generate a secure, random 32-byte base64 encoded string suitable for use as the `AUTH_SECRET` environment variable in Infisical. This secret is essential for signing and verifying JSON Web Tokens (JWTs) during the authentication process.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/gitlab.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Deleting Folders in Infisical using Go SDK\nDESCRIPTION: Deletes a folder in Infisical using either folder ID or folder name. Requires project ID and environment, with optional path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ndeletedFolder, err := client.Folders().Delete(infisical.DeleteFolderOptions{\n  // Either folder ID or folder name is required.\n  FolderName:  \"name-of-folder-to-delete\",\n  FolderID:    \"folder-id-to-delete\",\n  ProjectID:   \"PROJECT_ID\",\n  Environment: \"dev\",\n  Path:        \"/\",\n})\n```\n\n----------------------------------------\n\nTITLE: API Response from Creating a Root CA\nDESCRIPTION: This is the response from the API when a root CA creation is successful. It returns the CA ID which is used for referencing the CA in subsequent operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"caId\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Format for secret.modified Event (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of the payload sent by an Infisical webhook when a secret is modified. It includes the event type ('secret.modified'), project details (workspace ID, environment, secret path), and a timestamp. This payload allows receiving applications to understand which secret change triggered the webhook.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/webhooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"secret.modified\",\n  \"project\": {\n    \"workspaceId\": \"the workspace id\",\n    \"environment\": \"project environment\",\n    \"secretPath\": \"project folder path\"\n  },\n  \"timestamp\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing GCP ID Token Authentication Flow with Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating the workflow between GCP Service, Infisical, and Google OAuth2 API for authentication. Shows the process of token retrieval, verification, and API access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/gcp-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant GCE as GCP Service\n  participant Infis as Infisical\n  participant Google as OAuth2 API\n\n  Note over GCE,Google: Step 1: Instance Identity Token Retrieval\n  GCE->>Google: Request instance identity metadata token\n  Google-->>GCE: Return JWT token with RS256 signature\n\n  Note over GCE,Infis: Step 2: Identity Token Login Operation\n  GCE->>Infis: Send JWT token to /api/v1/auth/gcp-auth/login\n  Infis->>Google: Request OAuth2 certificates\n  Google-->>Infis: Return certificates\n\n  Note over Infis: Step 3: Identity Token Verification\n  Note over Infis: Step 4: Identity Property Validation\n  Infis->>GCE: Return short-lived access token\n\n  Note over GCE,Infis: Step 4: Access Infisical API with Token\n  GCE->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Infisical Auth via YAML (YAML & Bash)\nDESCRIPTION: This defines a Kubernetes Secret resource declaratively in YAML to store the Infisical Client Secret. The subsequent `kubectl apply` command creates the secret in the cluster. Replace `<namespace_you_want_to_issue_certificates_in>` and `<client_secret>` (base64 encoded value of the actual secret) with actual values. This is an alternative to creating the secret directly with `kubectl create secret`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n    name: issuer-infisical-client-secret\n    namespace: <namespace_you_want_to_issue_certificates_in>\ndata:\n    clientSecret: <client_secret>\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f secret-issuer.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Camunda Sync via API using curl - Bash\nDESCRIPTION: This bash code snippet demonstrates how to create a Camunda Sync in Infisical by sending a POST request using curl to the designated API endpoint, with required headers and a JSON payload. Dependencies include curl and network access to https://app.infisical.com. Key parameters like name, projectId, connectionId, environment, and destinationConfig (containing cluster UUID) dictate the behavior and location for secrets synchronization. The input is a JSON body, and the expected output is a standard API response indicating the success of the sync creation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/camunda.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/camunda \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-camunda-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"scope\": \"cluster\",\n        \"clusterUUID\": \"cc4c8dae-dce9-4f4c-9882-132b2bd65fa5\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Example GitHub Callback URL and Infisical SITE_URL Configuration\nDESCRIPTION: Illustrates the correct relationship between the GitHub OAuth application's **Authorization callback URL** and the corresponding `SITE_URL` environment variable in Infisical for SSO configuration. The example shows that if the callback URL is `https://app.infisical.com/api/v1/sso/github`, the `SITE_URL` should be set to the base domain `https://app.infisical.com`. Ensuring this match is crucial for successful authentication flow.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/github.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Plain Text\nCODE:\n```\nFor example, if the former is `https://app.infisical.com/api/v1/sso/github` then the latter should be `https://app.infisical.com`.\n```\n\n----------------------------------------\n\nTITLE: Implementing OIDC Authentication in JavaScript\nDESCRIPTION: JavaScript function demonstrating OIDC authentication implementation with Infisical, including token retrieval and API login.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/general.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const oidcLogin = async ({ identityId, domain, oidcAudience }) => {\n    const idToken = await core.getIDToken(oidcAudience);\n\n    const loginData = querystring.stringify({\n        identityId,\n        jwt: idToken,\n    });\n\n    try {\n        const response = await axios({\n        method: \"post\",\n        url: `${domain}/api/v1/auth/oidc-auth/login`,\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        data: loginData,\n        });\n\n        return response.data.accessToken;\n    } catch (err) {\n        core.error(\"Error:\", err.message);\n        throw err;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical in Backstage app-config.yaml\nDESCRIPTION: YAML configuration for connecting Backstage to Infisical, including base URL and two authentication options: API token or client credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/external/backstage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninfisical:\n  baseUrl: https://app.infisical.com\n\n  authentication:\n    # Option 1: API Token Authentication\n    auth_token:\n      token: ${INFISICAL_API_TOKEN}\n\n    # Option 2: Client Credentials Authentication\n    universalAuth:\n      clientId: ${INFISICAL_CLIENT_ID}\n      clientSecret: ${INFISICAL_CLIENT_SECRET}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical CLI Using Token Flag\nDESCRIPTION: Command to authenticate with Infisical using the --token flag when exporting secrets.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-pass-envs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical export --token=<>\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL with Patroni\nDESCRIPTION: Commands for setting up PostgreSQL nodes with Patroni for cluster management.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install -y postgresql-14 postgresql-contrib-14 python3-pip\npip3 install patroni[etcd] psycopg2-binary\n\nsudo mkdir /etc/patroni\nsudo chown postgres:postgres /etc/patroni\n```\n\n----------------------------------------\n\nTITLE: Sample API Response from GCP Secret Manager Sync Creation (JSON)\nDESCRIPTION: This JSON response snippet shows the structure of a successful response from the Infisical API after a GCP Secret Manager Sync is created. It details the sync's metadata, configuration, connection, and environment details. Consumers must handle unique IDs, timestamps, sync status, and related nested objects; no dependencies needed beyond a JSON parser, and typical outputs include resource identifiers, status, and configuration echo.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/gcp-secret-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"aee02c4a-4a5f-488c-82dd-0b3164772871\",\n        \"name\": \"my-gcp-sync\",\n        \"description\": \"this is an example secret sync\",\n        \"isAutoSyncEnabled\": true,\n        \"version\": 1,\n        \"projectId\": \"09eda1f8-85a3-47a9-8a6f-e27f133b2a36\",\n        \"folderId\": \"1447389e-16fb-49ba-96fd-361b5a2522af\",\n        \"connectionId\": \"eec83609-5eb4-4d8d-9f6e-ded016984f0d\",\n        \"createdAt\": \"2025-01-27T12:28:59.408Z\",\n        \"updatedAt\": \"2025-01-27T12:28:59.408Z\",\n        \"syncStatus\": \"pending\",\n        \"lastSyncJobId\": null,\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": null,\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"connection\": {\n            \"app\": \"gcp\",\n            \"name\": \"my-gcp-connection\",\n            \"id\": \"eec83609-5eb4-4d8d-9f6e-ded016984f0d\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"124e0392-4070-4b1c-900e-ced30cd55bf3\"\n        },\n        \"folder\": {\n            \"id\": \"1447389e-16fb-49ba-96fd-361b5a2522af\",\n            \"path\": \"/\"\n        },\n        \"destination\": \"gcp-secret-manager\",\n        \"destinationConfig\": {\n            \"projectId\": \"infisical-test-playground\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing IAM User to Assume Any Role in AWS (JSON)\nDESCRIPTION: This IAM policy grants an IAM User the permission (`sts:AssumeRole`) to assume any IAM role (`Resource: \"arn:aws:iam::*:role/*\"`) within the AWS account. It is required for self-hosted Infisical instances (not running on AWS) to connect via the Assume Role method, allowing the instance's IAM User to assume the target role configured for Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n{\n    \"Sid\": \"AllowAssumeAnyRole\",\n    \"Effect\": \"Allow\",\n    \"Action\": \"sts:AssumeRole\",\n    \"Resource\": \"arn:aws:iam::*:role/*\"\n}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Daemon Configuration\nDESCRIPTION: Configuration settings to be added to the SSH daemon config file for enabling trusted CA keys and accepted key types.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTrustedUserCAKeys /etc/ssh/ca.pub\n\nPubkeyAcceptedKeyTypes=+ssh-rsa,ssh-rsa-cert-v01@openssh.com\n```\n\n----------------------------------------\n\nTITLE: Injecting Environment Variables with Infisical CLI\nDESCRIPTION: Use the infisical run command to inject environment variables into your application for various environments and frameworks.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/usage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=dev --path=/apps/firefly -- [your application start command] # e.g. npm run dev\n\n# example with node (nodemon)\ninfisical run --env=staging --path=/apps/spotify -- nodemon index.js\n\n# example with flask\ninfisical run --env=prod --path=/apps/backend -- flask run\n\n# example with spring boot - maven\ninfisical run --env=dev --path=/apps/ -- ./mvnw spring-boot:run --quiet\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Updating AWS Parameter Store Secret Sync\nDESCRIPTION: YAML snippet defining the OpenAPI specification for the PATCH endpoint to update an AWS Parameter Store secret sync. It includes the endpoint path, request parameters, and response schemas.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/aws-parameter-store/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Update\"\nopenapi: \"PATCH /api/v1/secret-syncs/aws-parameter-store/{syncId}\"\n```\n\n----------------------------------------\n\nTITLE: Creating SHA512 Digest with OpenSSL in Bash\nDESCRIPTION: This command creates a SHA512 digest of the input data 'Hello, World' using OpenSSL, which is then base64 encoded. This is used as preparation for signing or verifying data with Infisical KMS.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"Hello, World\" | openssl dgst -sha512 -binary | openssl base64\n```\n\n----------------------------------------\n\nTITLE: Importing Infisical Plugin in Backstage Frontend App\nDESCRIPTION: React/TypeScript code to import and register the Infisical plugin in the Backstage frontend application file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/external/backstage.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { infisicalPlugin } from '@infisical/backstage-plugin-infisical';\n\nconst app = createApp({\n  plugins: [\n    infisicalPlugin,\n    // ...other plugins\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Infisical Gateway Service with Systemd in Bash\nDESCRIPTION: Commands to manage the Infisical gateway systemd service after installation. These include starting, stopping, checking status, and disabling the service.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/gateway.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start infisical-gateway    # Start the service\nsudo systemctl stop infisical-gateway     # Stop the service\nsudo systemctl status infisical-gateway   # Check service status\nsudo systemctl disable infisical-gateway  # Disable auto-start on boot\n```\n\n----------------------------------------\n\nTITLE: Describing the Certificate Secret (Bash)\nDESCRIPTION: This command provides detailed information about the Kubernetes Secret containing the issued certificate and private key. The example output shows metadata like labels and annotations added by cert-manager (including common name, issuer details) and the data keys (`ca.crt`, `tls.crt`, `tls.key`) along with their sizes. Replace the namespace (`default`) if necessary.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe secret certificate-by-issuer -n default\n```\n\nLANGUAGE: bash\nCODE:\n```\nName:         certificate-by-issuer\nNamespace:    default\nLabels:       controller.cert-manager.io/fao=true\nAnnotations:  cert-manager.io/alt-names: \n            cert-manager.io/certificate-name: certificate-by-issuer\n            cert-manager.io/common-name: certificate-by-issuer.example.com\n            cert-manager.io/ip-sans: \n            cert-manager.io/issuer-group: infisical-issuer.infisical.com\n            cert-manager.io/issuer-kind: Issuer\n            cert-manager.io/issuer-name: issuer-infisical\n            cert-manager.io/uri-sans: \n\nType:  kubernetes.io/tls\n\nData\n====\nca.crt: 1306 bytes\ntls.crt: 2380 bytes\ntls.key:  227 bytes\n```\n\n----------------------------------------\n\nTITLE: Client Role Binding Configuration\nDESCRIPTION: YAML configuration for binding the system:auth-delegator role to application service accounts for self-validation method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: infisical-client-binding-[your-app-name]\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: [your-app-service-account]\n    namespace: [your-app-namespace]\n```\n\n----------------------------------------\n\nTITLE: Generating AUTH_SECRET using OpenSSL in Shell\nDESCRIPTION: Generates a random 32-byte base64 encoded string using the `openssl rand` command. This string is intended to be used as the `AUTH_SECRET` environment variable for signing and verifying JWTs in the Infisical instance during Google SSO configuration. This secret is crucial for securing authentication tokens.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical for Node.js Web Applications\nDESCRIPTION: Navigate to your project root directory and initialize Infisical to set up environment variables management for your Express, Fastify, or Koa application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/express.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Password Flag Example Usage\nDESCRIPTION: Example showing how to specify the admin password using the --password flag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical bootstrap --password=your-secure-password\n```\n\n----------------------------------------\n\nTITLE: Creating a Databricks Sync with Infisical API - Bash\nDESCRIPTION: This bash snippet demonstrates how to programmatically create a Databricks secret sync in Infisical using a POST request to the /api/v1/secret-syncs/databricks endpoint. The payload includes parameters for sync name, project ID, description, connection ID, environment, secret storage path, enablement flag, sync options, and Databricks destination config (scope). Required dependencies: curl, valid Infisical account, Databricks connection, and relevant API credentials. Inputs are provided as a JSON payload, returning a JSON response representing the created sync.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/databricks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/databricks \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-databricks-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"scope\": \"my-scope\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Debugging SSH Connection with Verbose Output\nDESCRIPTION: This command connects to a host with maximum verbosity (-vvv) to troubleshoot SSH connections and verify certificate-based authentication is working properly.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nssh -vvv username@hostname\n```\n\n----------------------------------------\n\nTITLE: Setting Infisical Token as Environment Variable\nDESCRIPTION: Command to set the INFISICAL_TOKEN environment variable for CLI authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-pass-envs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=<>\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Connection via API\nDESCRIPTION: cURL command to create a PostgreSQL connection through the Infisical API. This request includes connection parameters such as host, port, database, credentials, and SSL settings. The platform-managed credentials option is enabled to improve security.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/postgres.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/app-connections/postgres \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-pg-connection\",\n    \"method\": \"username-and-password\",\n    \"isPlatformManagedCredentials\": true,\n    \"credentials\": {\n        \"host\": \"123.4.5.6\",\n        \"port\": 5432,\n        \"database\": \"default\",\n        \"username\": \"infisical_role\",\n        \"password\": \"my-password\",\n        \"sslEnabled\": true,\n        \"sslRejectUnauthorized\": true\n    },\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Server Users and Permissions\nDESCRIPTION: SQL commands to create server-level logins, database users, and grant necessary permissions for credential rotation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/mssql-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- create server-level logins\nCREATE LOGIN [infisical_user_1] WITH PASSWORD = 'my-password';\nCREATE LOGIN [infisical_user_2] WITH PASSWORD = 'my-password';\nGRANT CONNECT SQL TO [infisical_user_1];\nGRANT CONNECT SQL TO [infisical_user_2];\n\n-- create database-level users with login from above\nUSE my_database;\nCREATE USER [infisical_user_1] FOR LOGIN [infisical_user_1];\nCREATE USER [infisical_user_2] FOR LOGIN [infisical_user_2];\n\n-- grant relevant permissions\nGRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA::dbo TO [infisical_user_1];\nGRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA::dbo TO [infisical_user_2];\n```\n\n----------------------------------------\n\nTITLE: Removing Workspace Member - OpenAPI DELETE Endpoint\nDESCRIPTION: OpenAPI route specification for deleting a workspace membership. The endpoint follows the pattern DELETE /api/v2/workspace/{projectId}/memberships where projectId is the workspace identifier.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/project-users/remove-member-from-workspace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v2/workspace/{projectId}/memberships\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Terraform Cloud Workload Identity Tokens\nDESCRIPTION: Example variable naming pattern for generating multiple workload identity tokens in Terraform Cloud. Shows how to create additional variables with custom tags that result in corresponding token environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/terraform-cloud.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTFC_WORKLOAD_IDENTITY_AUDIENCE_[YOUR_TAG_HERE]\n```\n\n----------------------------------------\n\nTITLE: Creating a Windmill Connection via API Request in Bash\nDESCRIPTION: This curl command demonstrates how to create a Windmill Connection by making a POST request to the Infisical API. It includes the required headers and JSON payload with connection name, authentication method, and credentials including the token and instance URL.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/windmill.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n        --url https://app.infisical.com/api/v1/app-connections/windmill \\\n        --header 'Content-Type: application/json' \\\n        --data '{\n            \"name\": \"my-windmill-connection\",\n            \"method\": \"access-token\",\n            \"credentials\": {\n                \"token\": \"...\",\n                \"instanceUrl\": \"https://app.windmill.dev\"\n            }\n        }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend SMTP Environment Variables\nDESCRIPTION: This snippet outlines the environment variables needed to configure Infisical's email service using Resend. Replace `SMTP_PASSWORD` with your actual Resend API key and `SMTP_FROM_ADDRESS` with your verified sending email address.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=smtp.resend.com\nSMTP_USERNAME=resend\nSMTP_PASSWORD=YOUR_API_KEY\nSMTP_PORT=587\nSMTP_FROM_ADDRESS=hey@example.com # your email address being used to send out emails\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical API using GCP Token\nDESCRIPTION: Example request to authenticate with Infisical API using the obtained GCP ID token. Returns an access token for subsequent API calls.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/gcp-auth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/auth/gcp-auth/login' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-urlencode 'identityId=...' \\\n    --data-urlencode 'jwt=...'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Project Details via OpenAPI\nDESCRIPTION: OpenAPI endpoint specification for getting project/workspace information using a workspace ID parameter. This endpoint uses the GET HTTP method to fetch project data.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/workspaces/get-workspace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/workspace/{workspaceId}\n```\n\n----------------------------------------\n\nTITLE: Configuring Luna HSM Client Settings\nDESCRIPTION: Configuration settings for the Luna HSM client specifying timeouts, directory paths, and connection parameters for HSM integration with Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nLuna = {\n  DefaultTimeOut = 500000;\n  PEDTimeout1 = 100000;\n  PEDTimeout2 = 200000;\n  PEDTimeout3 = 20000;\n  KeypairGenTimeOut = 2700000;\n  CloningCommandTimeOut = 300000;\n  CommandTimeOutPedSet = 720000;\n}\n\nCardReader = {\n  LunaG5Slots = 0;\n  RemoteCommand = 1;\n}\n\nMisc = {\n  # Update the paths to point to the mounted path if your folder structure is different from the one mentioned in the previous step.\n  PluginModuleDir = /hsm-client/plugins;\n  MutexFolder = /hsm-client/lock;\n  PE1746Enabled = 1;\n  ToolsDir = /usr/bin;\n\n}\n\nPresentation = {\n  ShowEmptySlots = no;\n}\n\nLunaSA Client = {\n  ReceiveTimeout = 20000;\n  # Update the paths to point to the mounted path if your folder structure is different from the one mentioned in the previous step.\n  SSLConfigFile = /hsm-client/etc/openssl.cnf;\n  ClientPrivKeyFile = ./etc/ClientNameKey.pem;\n  ClientCertFile = ./etc/ClientNameCert.pem;\n  ServerCAFile = ./etc/CAFile.pem;\n  NetClient = 1;\n  TCPKeepAlive = 1;\n}\n\n\nREST = {\n  AppLogLevel = error\n  ServerName = <REDACTED>;\n  ServerPort = 443;\n  AuthTokenConfigURI = <REDACTED>;\n  AuthTokenClientId = <REDACTED>;\n  AuthTokenClientSecret = <REDACTED>;\n  RestClient = 1;\n  ClientTimeoutSec = 120;\n  ClientPoolSize = 32;\n  ClientEofRetryCount = 15;\n  ClientConnectRetryCount = 900;\n  ClientConnectIntervalMs = 1000;\n}\nXTC = {\n  Enabled = 1;\n  TimeoutSec = 600;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Gateway in Bash\nDESCRIPTION: Command to run the Infisical gateway in the foreground. The gateway connects to the relay service and maintains a persistent connection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/gateway.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical gateway --token=<token>\n```\n\n----------------------------------------\n\nTITLE: Listing Mounted Secrets Inside Pod via kubectl (Bash)\nDESCRIPTION: This command uses kubectl to execute the `ls -l` command inside the running `nginx-secrets-store` pod. It lists the contents of the `/mnt/secrets-store` directory, allowing verification that the secrets defined in the SecretProviderClass have been successfully mounted as files.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# View mounted secrets\nkubectl exec -it nginx-secrets-store -- ls -l /mnt/secrets-store\n```\n\n----------------------------------------\n\nTITLE: Secret Template Configuration Example in YAML\nDESCRIPTION: Example of template configuration showing how to include and transform secrets using Go templating.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\npush:\n  secret:\n    secretName: push-secret-demo\n    secretNamespace: default\n    template:\n      includeAllSecrets: true\n      data:\n        SITE_URL: \"{{ .SITE_URL.Value }}\"\n        API_URL: \"https://api.{{.SITE_URL.Value}}.{{.REGION.Value}}.com\"\n```\n\n----------------------------------------\n\nTITLE: Secret Configuration for CA Certificate\nDESCRIPTION: Example Kubernetes Secret definition for storing a CA certificate. This shows how to structure a Secret that contains a certificate to be used with Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: custom-ca-certificate\ntype: Opaque\nstringData:\n  ca.crt: |\n    -----BEGIN CERTIFICATE-----\n    MIIEZzCCA0+gAwIBAgIUDk9+HZcMHppiNy0TvoBg8/aMEqIwDQYJKoZIhvcNAQEL\n    ...\n    BQAwDTELMAkGA1UEChMCUEgwHhcNMjQxMDI1MTU0MjAzWhcNMjUxMDI1MjE0MjAz\n    -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Setting AUTH_SECRET and SITE_URL for OIDC on Self-Hosted Infisical - Bash\nDESCRIPTION: This snippet demonstrates how to generate a secure random secret for the AUTH_SECRET and provides guidance on configuring the SITE_URL for a self-hosted Infisical setup. These environment variables are necessary for enabling OpenID Connect SSO using Keycloak as the identity provider in Infisical. The AUTH_SECRET should be a securely generated 32-byte base64 string, and SITE_URL must be the full base URL (including protocol) of your Infisical deployment. Inputs: none directly; Output: a secure random base64 string printed to standard output.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/keycloak-oidc/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Creating Global Configuration ConfigMap for Infisical Operator\nDESCRIPTION: YAML configuration for creating the required namespace and ConfigMap for global Infisical operator settings. The ConfigMap must be named 'infisical-config' and placed in the 'infisical-operator-system' namespace.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: infisical-operator-system\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: infisical-config\n  namespace: infisical-operator-system\ndata:\n  hostAPI: https://example.com/api # <-- global hostAPI\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Parameters for AWS Secrets Manager in Markdown\nDESCRIPTION: This snippet defines the parameters required for creating an AWS Secrets Manager integration in Infisical. It includes fields for authentication, activation status, app name, AWS region, source environment, and secret path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/integrations/create.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Tab title=\"AWS Secrets manager\">\n    <ParamField body=\"integrationAuthId\" type=\"string\" required>\n\t\t\t\tThe ID of the integration auth object for authentication with AWS.\n\t\t\t\tRefer [Create Integration Auth](./create-auth) for more info\n\t\t</ParamField>\n    <ParamField body=\"isActive\" type=\"boolean\">\n\t\t\t\tWhether the integration should be active or inactive\n\t\t</ParamField>\n    <ParamField body=\"app\" type=\"string\" required>\n\t\t\t\tThe secret name used when saving secret in AWS SSM. Used for naming and can be arbitrary.\n\t\t</ParamField>\n    <ParamField body=\"region\" type=\"string\" required>\n\t\t\t\tThe AWS region of the SSM. Example: `us-east-1`\n\t\t</ParamField>\n    <ParamField body=\"sourceEnvironment\" type=\"string\" required>\n\t\t\t\tThe Infisical environment slug from where secrets will be synced from. Example: `dev`\n\t\t</ParamField>\n    <ParamField body=\"secretPath\" type=\"string\" required>\n\t\t\t\tThe Infisical folder path from where secrets will be synced from. Example: `/some/path`. The root of the environment is `/`.\n\t\t</ParamField>\n  </Tab>\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests with Infisical Environment Variables\nDESCRIPTION: Example command for running Gradle tests with database configuration injected by Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- gradle test\n```\n\n----------------------------------------\n\nTITLE: Secret Management Types - Rust Structs\nDESCRIPTION: Rust struct definitions for secret creation options and response types used in the SDK\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse schemars::JsonSchema;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug, JsonSchema)]\n#[serde(rename_all = \"camelCase\")]\n// Input:\npub struct CreateSecretOptions {\n  pub environment: String,                   // environment\n  pub secret_comment: Option<String>,        // secretComment\n  pub path: Option<String>,                  // secretPath\n  pub secret_value: String,                  // secretValue\n  pub skip_multiline_encoding: Option<bool>, // skipMultilineEncoding\n  pub r#type: Option<String>,                // shared / personal\n  pub project_id: String,                    // workspaceId\n  pub secret_name: String,                   // secretName (PASSED AS PARAMETER IN REQUEST)\n}\n\n// Output:\n#[derive(Serialize, Deserialize, Debug, JsonSchema)]\n#[serde(rename_all = \"camelCase\")]\npub struct CreateSecretResponse {\n  pub secret: Secret, // \"Secret\" is defined elsewhere.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Project Template in Project Creation API\nDESCRIPTION: API request to create a new project using a specified template name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/project-templates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v2/workspace \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"projectName\": \"My Project\",\n    \"template\": \"<template-name>\", // defaults to \"default\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub SSO Environment Variables for Infisical\nDESCRIPTION: Defines the environment variables required for configuring GitHub SSO in a self-hosted Infisical instance. `CLIENT_ID_GITHUB_LOGIN` and `CLIENT_SECRET_GITHUB_LOGIN` are credentials obtained from the created GitHub OAuth app. `AUTH_SECRET` is a secret key used for signing and verifying JWTs. `SITE_URL` is the absolute URL of the self-hosted Infisical instance. These variables must be set, and the instance restarted for the configuration to take effect.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n- `CLIENT_ID_GITHUB_LOGIN`: The **Client ID** of your GitHub OAuth application.\n- `CLIENT_SECRET_GITHUB_LOGIN`: The **Client Secret** of your GitHub OAuth application.\n- `AUTH_SECRET`: A secret key used for signing and verifying JWT. This can be a random 32-byte base64 string generated with `openssl rand -base64 32`.\n- `SITE_URL`: The URL of your self-hosted instance of Infisical - should be an absolute URL including the protocol (e.g. https://app.infisical.com)\n```\n\n----------------------------------------\n\nTITLE: Deployment Example with env for Specific Managed Secrets\nDESCRIPTION: Complete example of a Kubernetes deployment that uses env to inject specific secrets from a managed secret as named environment variables in the container.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.14.2\n          env:\n            - name: STRIPE_API_SECRET\n              valueFrom:\n                secretKeyRef:\n                  name: managed-secret # <- name of managed secret\n                  key: STRIPE_API_SECRET\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Active Directory Password Rotation LDIF\nDESCRIPTION: LDIF template for rotating user password in Active Directory using the unicodePwd attribute with encoded password format.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/ldap.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ldif\nCODE:\n```\ndn: cn=sheencaps capadngan,ou=people,dc=acme,dc=com\nchangetype: modify\nreplace: unicodePwd\nunicodePwd::{{EncodedPassword}}\n-\n\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Listing Tags in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET endpoint to list tags in a workspace. It specifies the HTTP method, path parameters, and the expected response structure.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-tags/list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"GET /api/v1/workspace/{projectId}/tags\"\n```\n\n----------------------------------------\n\nTITLE: API Request for Creating MSSQL Credentials Rotation\nDESCRIPTION: CURL command demonstrating how to create a Microsoft SQL Server credentials rotation configuration via the Infisical API.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/mssql-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://us.infisical.com/api/v2/secret-rotations/mssql-credentials \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-mssql-rotation\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"my database credentials rotation\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/\",\n    \"isAutoRotationEnabled\": true,\n    \"rotationInterval\": 30,\n    \"rotateAtUtc\": {\n        \"hours\": 0,\n        \"minutes\": 0\n    },\n    \"parameters\": {\n        \"username1\": \"infisical_user_1\",\n        \"username2\": \"infisical_user_2\"\n    },\n    \"secretsMapping\": {\n        \"username\": \"MSSQL_DB_USERNAME\",\n        \"password\": \"MSSQL_DB_PASSWORD\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a Gatsby Project\nDESCRIPTION: This snippet shows how to navigate to your Gatsby project directory and initialize Infisical for environment variable management. The initialization process connects your project to your Infisical configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/gatsby.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Running Django Application with Infisical\nDESCRIPTION: This snippet demonstrates how to start your Django application with Infisical to inject environment variables. It includes a general command format and a specific example using Django's manage.py.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/django.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- python manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation in Bash\nDESCRIPTION: Command to check if Docker is installed on the system.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-compose.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun SMTP Environment Variables\nDESCRIPTION: This snippet displays the environment variable configuration needed for Infisical to send emails via Mailgun. You need to replace the placeholder values for `SMTP_HOST`, `SMTP_USERNAME`, `SMTP_PASSWORD`, and `SMTP_FROM_ADDRESS` with your specific Mailgun SMTP credentials and sending email address.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=smtp.mailgun.org # obtained from credentials page\nSMTP_USERNAME=postmaster@example.mailgun.org # obtained from credentials page\nSMTP_PASSWORD=password # obtained from credentials page\nSMTP_PORT=587\nSMTP_FROM_ADDRESS=hey@example.com # your email address being used to send out emails\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Gateway Service in Bash\nDESCRIPTION: Command to install and enable the Infisical gateway as a systemd service. This must be run with sudo privileges on a Linux system with systemd.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/gateway.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo infisical gateway install --token=<token> --domain=<domain>\n```\n\n----------------------------------------\n\nTITLE: Lease Management Documentation\nDESCRIPTION: Instructions for managing dynamic secret leases, including audit, revocation, and renewal procedures.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/azure-entra-id.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Audit or Revoke Leases\nOnce you have created one or more leases, you will be able to access them by clicking on the respective dynamic secret item on the dashboard. \nThis will allow you to see the expiration time of the lease or delete a lease before it's set time to live.\n\n## Renew Leases\nTo extend the life of the generated dynamic secret leases past its initial time to live, simply click on the **Renew** button as illustrated below.\n```\n\n----------------------------------------\n\nTITLE: Complete Deployment Using ConfigMap with Volumes\nDESCRIPTION: Full example of a Kubernetes deployment that creates and mounts a volume from a ConfigMap.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.14.2\n          volumeMounts:\n            - name: configmaps-volume-name\n              mountPath: /etc/config\n              readOnly: true\n          ports:\n            - containerPort: 80\n      volumes:\n        - name: configmaps-volume-name\n          configMap:\n            name: managed-configmap # <- managed configmap\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account JWT Token\nDESCRIPTION: YAML configuration for creating a long-lived service account JWT token for the token reviewer\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: infisical-token-reviewer-token\n  annotations:\n    kubernetes.io/service-account.name: \"infisical-token-reviewer\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Secure AUTH_SECRET using OpenSSL\nDESCRIPTION: Provides a shell command using `openssl` to generate a cryptographically secure, random 32-byte base64 encoded string suitable for the `AUTH_SECRET` environment variable required for self-hosted Infisical OIDC configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/general-oidc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Switching Vault Type in Infisical CLI\nDESCRIPTION: Command to change the active vault type for storing login credentials. Allows switching between different vault storage options like keychain or file-based storage.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/vault.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical vault set <name-of-vault>\n\n# Example \ninfisical vault set keychain\n```\n\n----------------------------------------\n\nTITLE: Example Audit Log Entry Structure in JSON\nDESCRIPTION: Sample JSON structure showing the format of audit log entries that are streamed to external logging providers. Includes actor details, event metadata, and various timestamps.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/audit-log-streams/audit-log-streams.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"7dc1713b-d787-4147-9e21-770be01cc992\",\n  \"actor\": \"user\",\n  \"actorMetadata\": {\n    \"email\": \"example@infisical.com\",\n    \"userId\": \"7383b701-d83f-45c0-acb4-04e138b987ab\",\n    \"username\": \"example@infisical.com\"\n  },\n  \"ipAddress\": \"127.0.0.1\",\n  \"eventType\": \"create-secret\",\n  \"eventMetadata\": {\n    \"secretId\": \"3e5c796e-6599-4181-8dca-51133bb3acd0\",\n    \"secretKey\": \"TEST-SECRET\",\n    \"secretPath\": \"/\",\n    \"environment\": \"dev\",\n    \"secretVersion\": 1\n  },\n  \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n  \"userAgentType\": \"web\",\n  \"expiresAt\": \"2025-01-18T01:11:25.552Z\",\n  \"createdAt\": \"2025-01-15T01:11:25.552Z\",\n  \"updatedAt\": \"2025-01-15T01:11:25.552Z\",\n  \"orgId\": \"785649f1-ff4b-4ef9-a40a-9b9878e46e57\",\n  \"projectId\": \"09bfcc01-0917-4bea-9c7a-2d320584d5b1\",\n  \"projectName\": \"example-project\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on Debian/Ubuntu\nDESCRIPTION: These commands add the Infisical repository and install the CLI on Debian-based Linux distributions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ curl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' \\\n| sudo -E bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install -y infisical\n```\n\n----------------------------------------\n\nTITLE: Universal Auth Sequence Flow Diagram in Mermaid\nDESCRIPTION: Sequence diagram showing the authentication workflow between client and Infisical server, including login operation, credential validation, and API access using tokens.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/universal-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as Client\n  participant Infis as Infisical\n\n  Note over Client,Infis: Step 1: Login Operation\n  Client->>Infis: Send Client ID and Client Secret\n\n  Note over Infis: Step 2: Client ID and Client Secret validation\n  Infis->>Client: Return short-lived access token\n\n  Note over Client,Infis: Step 3: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Granting AWS Parameter Store Access for Infisical Sync (JSON)\nDESCRIPTION: This IAM policy provides the minimum permissions for an IAM Role (assumed by Infisical) to manage parameters in AWS Systems Manager (SSM) Parameter Store. It includes permissions for putting, getting, describing, deleting parameters (`ssm:PutParameter`, `ssm:GetParameters`, etc.) and managing tags (`ssm:ListTagsForResource`, `ssm:AddTagsToResource`, etc.). It also includes KMS permissions (`kms:ListAliases`, `kms:Encrypt`, `kms:Decrypt`, `kms:DescribeKey`) for use cases involving custom KMS keys. This policy facilitates Infisical's secret syncing feature with AWS Parameter Store.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowSSMAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:PutParameter\",\n                \"ssm:GetParameters\",\n                \"ssm:GetParametersByPath\",\n                \"ssm:DescribeParameters\",\n                \"ssm:DeleteParameters\",\n                \"ssm:ListTagsForResource\", // if you need to add tags to secrets\n                \"ssm:AddTagsToResource\", // if you need to add tags to secrets\n                \"ssm:RemoveTagsFromResource\", // if you need to add tags to secrets\n                \"kms:ListAliases\", // if you need to specify the KMS key\n                \"kms:Encrypt\", // if you need to specify the KMS key\n                \"kms:Decrypt\", // if you need to specify the KMS key\n                \"kms:DescribeKey\" // if you need to specify the KMS key\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Secrets\nDESCRIPTION: Demonstrates how to fetch all secrets from a specific project environment, including recursive folder access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ninfisical secrets --projectId=<your-project-id --env=dev --recursive\n```\n\n----------------------------------------\n\nTITLE: Updating Permission Configuration Format in Terraform HCL\nDESCRIPTION: Demonstrates the difference between V1 and V2 permission formats in Terraform HCL. V2 uses arrays for actions and introduces an optional 'inverted' flag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/internals/permissions/migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// V1 format (single action)\n{\n  subject: \"secrets\",\n  action: \"read\"\n}\n\n// V2 format (array of actions)\n{\n  subject: \"secrets\",\n  action: [\"read\"],\n  inverted: false  // Optional, defaults to false\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Bash Script with PM2 for Infisical-Injected App\nDESCRIPTION: This snippet runs the bash script (`infisical-run.sh`) using PM2, enabling the app to operate as a managed process with automatic secret injection from Infisical. PM2 must be installed globally, and `infisical-run.sh` script should be present and executable. Input: PM2 process manager. Output: App running under PM2 with secrets injected.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/pm2.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npm2 start infisical-run.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluent Bit for AWS S3 Log Streaming\nDESCRIPTION: Configuration file for Fluent Bit that sets up an HTTP listener on port 8888 and forwards logs to AWS S3. The configuration includes service settings, HTTP input configuration, and S3 output settings with compression and file organization parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/audit-log-streams/audit-log-streams-with-fluentbit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[SERVICE]\n    Flush        1\n    Log_Level    info\n    Daemon       off\n\n[INPUT]\n    Name   http\n    Listen 0.0.0.0\n    Port   8888\n\n[OUTPUT]\n    Name                         s3\n    Match                        *\n    bucket                       my-bucket\n    region                       us-west-2\n    total_file_size              50M\n    use_put_object               Off\n    compression                  gzip\n    s3_key_format                /$TAG/%Y/%m/%d/%H_%M_%S.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on Debian/Ubuntu\nDESCRIPTION: Commands to install Infisical CLI on Debian-based Linux distributions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n'https://artifacts-cli.infisical.com/setup.deb.sh' \\\n| sudo -E bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install -y infisical\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubernetes Operator to Cluster\nDESCRIPTION: This command deploys the Kubernetes operator to the cluster using the specified Docker image.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/k8-operator:tag\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File with curl in Bash\nDESCRIPTION: Command to download the Infisical docker-compose.prod.yml file using curl.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-compose.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o docker-compose.prod.yml https://raw.githubusercontent.com/Infisical/infisical/main/docker-compose.prod.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Service URL for Infisical Operator in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to set the hostAPI field to access the Infisical backend service directly within the same Kubernetes cluster. It uses the internal cluster DNS to route requests without going through the public internet.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttp://<backend-svc-name>.<namespace>.svc.cluster.local:4000/api\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Attaching Identities in YAML\nDESCRIPTION: YAML configuration for the POST endpoint to attach identities in Infisical's universal authentication system. It specifies the route parameters, request body structure, and possible response scenarios.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/universal-auth/attach.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"POST /api/v1/auth/universal-auth/identities/{identityId}\"\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container with Infisical Using Service Token\nDESCRIPTION: Docker CMD instructions for running a service with Infisical CLI using the deprecated service token authentication method. Includes examples for both single and multiple command execution.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"infisical\", \"run\", \"--\", \"[your service start command]\"]\n\n# example with single single command\nCMD [\"infisical\", \"run\", \"--\", \"npm\", \"run\", \"start\"]\n\n# example with multiple commands\nCMD [\"infisical\", \"run\", \"--command\", \"npm run start && ...\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Release Status\nDESCRIPTION: Command to retrieve the status of the Infisical Helm release in the specified namespace.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/infisical-standalone-postgres/templates/NOTES.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm status -n {{ .Release.Namespace }} {{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Token\nDESCRIPTION: YAML configuration for creating a service account token for the Infisical service account\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: infisical-service-account-token\n  annotations:\n    kubernetes.io/service-account.name: \"infisical-service-account\"\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables for GitLab SSO Troubleshooting\nDESCRIPTION: Lists the key environment variables (`CLIENT_ID_GITLAB_LOGIN`, `CLIENT_SECRET_GITLAB_LOGIN`, `AUTH_SECRET`, `SITE_URL`) to verify when troubleshooting GitLab SSO configuration issues in a self-hosted Infisical instance. Incorrectly set variables are a common cause of SSO failures.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/gitlab.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- Check that you have set the `CLIENT_ID_GITLAB_LOGIN`, `CLIENT_SECRET_GITLAB_LOGIN`, \\n`AUTH_SECRET`, and `SITE_URL` environment variables.\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Role Binding for Token Review\nDESCRIPTION: YAML configuration to bind the service account to system:auth-delegator role, enabling access to the TokenReview API.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: role-tokenreview-binding\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: infisical-auth\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring HSM Environment Variables for Infisical\nDESCRIPTION: Required environment variables that need to be set for HSM integration with Infisical. These variables include the PKCS#11 library path, PIN, slot number, and key label settings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHSM_LIB_PATH: path/to/pkcs11/library\nHSM_PIN: hsm-authentication-pin\nHSM_SLOT: slot-number\nHSM_KEY_LABEL: key-label\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Infisical Instance via API using curl\nDESCRIPTION: This code snippet demonstrates how to bootstrap an Infisical instance using a curl command to make a POST request to the bootstrap endpoint. It includes the required JSON payload with email, password, and organization name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/automated-bootstrapping.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"admin@example.com\",\"password\":\"your-secure-password\",\"organization\":\"your-org-name\"}' \\\n  http://your-infisical-instance.com/api/v1/admin/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Retrieving Infisical Resources in Kubernetes\nDESCRIPTION: Command to get all Infisical resources in the specified namespace, excluding secrets and persistent volume claims.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/infisical-standalone-postgres/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Kubernetes HA Architecture with Mermaid - mermaid\nDESCRIPTION: This Mermaid diagram visually represents a high-availability on-premises deployment of Infisical across multiple data centers using Kubernetes clusters, CloudNativePG for PostgreSQL management, Bitnami Redis, object storage for backup, and global load balancing. Dependencies include the Mermaid syntax/parser, and intended output is a directed flowchart mapping all major components, data flows, and labeling of primary/replica nodes. Input is not required; output is a rendered architecture diagram for documentation or planning. This visualization enforces understanding of redundancy and backup strategies across the described architecture.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/on-prem-k8s-ha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph GLB[\"Global LB (HAProxy/NGINX)\"]\n    end\n\n    subgraph OS[\"Object Storage\"]\n        direction LR\n        store[\"S3/MinIO/Enterprise Storage\"]\n        subgraph store_contents[\"Storage Contents\"]\n            wal[\"PostgreSQL WAL\"]\n            pgbackup[\"PostgreSQL Backups\"]\n            redisbackup[\"Redis Backups\"]\n        end\n    end\n\n    subgraph DC1[\"Active Data Center\"]\n        direction TB\n        subgraph k8s1[\"Kubernetes Cluster\"]\n            ing1[\"Ingress Controller\"]\n            app1[\"Infisical Deployment\"]\n            \n            subgraph db1[\"CloudNativePG\"]\n                pg1p[\"PostgreSQL Primary\"]\n                pg1r[\"PostgreSQL Replicas\"]\n            end\n            \n            subgraph red1[\"Redis (Bitnami)\"]\n                rp1[\"Redis Primary\"]\n            end\n        end\n    end\n\n    subgraph DC2[\"Passive Data Center\"]\n        direction TB\n        subgraph k8s2[\"Kubernetes Cluster\"]\n            ing2[\"Ingress Controller\"]\n            app2[\"Infisical Deployment\"]\n            \n            subgraph db2[\"CloudNativePG\"]\n                pg2[\"PostgreSQL Replicas\"]\n            end\n            \n            subgraph red2[\"Redis (Bitnami)\"]\n                r2[\"Redis Standby\"]\n            end\n        end\n    end\n\n    %% Connections\n    GLB --> ing1\n    GLB -.-> ing2\n    \n    %% Database connections\n    pg1p --> store\n    store --> pg2\n    \n    %% Redis backup flow\n    rp1 --> store\n    store -.-> r2\n    \n    %% Intra-DC connections\n    ing1 --> app1\n    app1 --> db1\n    app1 --> red1\n    \n    ing2 --> app2\n    app2 --> db2\n    app2 --> red2\n\n    classDef primary fill:#f96,stroke:#333\n    classDef replica fill:#69f,stroke:#333\n    classDef storage fill:#9c6,stroke:#333\n    classDef lb fill:#c9f,stroke:#333\n    \n    class pg1p,rp1 primary\n    class pg1r,pg2,r2 replica\n    class store,wal,pgbackup,redisbackup storage\n    class GLB,ing1,ing2 lb\n```\n\n----------------------------------------\n\nTITLE: GCP Service Account Parameter Fields Definition\nDESCRIPTION: Parameter field definitions for GCP KMS configuration including alias, description, region, service account credentials, and key name requirements.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms-configuration/gcp-kms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ParamField path=\"Alias\" type=\"string\" required>\n    Name for referencing the GCP KMS key within the organization.\n</ParamField>\n\n<ParamField path=\"Description\" type=\"string\">\n    Short description of the GCP KMS key.\n</ParamField>\n\n<ParamField path=\"GCP Region\" type=\"dropdown\" required>\n    The GCP region where the GCP KMS key ring is located.\n</ParamField>\n\n<ParamField path=\"Service Account Credential JSON\" type=\"file\" required>\n    Upload the JSON file you downloaded earlier when creating the GCP service account.\n</ParamField>\n\n<ParamField path=\"GCP Key Name\" type=\"dropdown\" required>\n    This field will be populated with the list of GCP KMS keys in the selected region. Select the key you created earlier.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing a New Command - Infisical Node.js SDK - TypeScript\nDESCRIPTION: This TypeScript snippet defines an 'InfisicalClient' class for the Node.js SDK that integrates with native Rust bindings to support a new command (e.g., createSecret). The class manages conversion between TypeScript types and Rust-native types using a QuickType-generated schema converter, passing encoded JSON to lower-level commands and parsing the returned JSON result. Key dependencies include the auto-generated 'binding' file, 'schemas.ts' types, and QuickType converters. Main parameters include client settings and command option objects. Outputs include promise-based responses and direct access to newly created secrets, with errors thrown on failure.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// 'binding' is a js file that makes it easier to access the methods in the bindings. (it's auto generated when running npm run build)\\nimport * as rust from \"../../binding\";\\n// We can import the newly generated types from the schemas.ts file. (Generated with QuickType!)\\nimport type { CreateSecretOptions, CreateSecretResponse } from \"./schemas\";\\n// This is the QuickType converter that we use to create commands with! It takes care of all JSON parsing and serialization.\\nimport { Convert, ClientSettings } from \"./schemas\";\\n\\nexport class InfisicalClient {\\n    #client: rust.Client;\\n\\n    constructor(settings: ClientSettings) {\\n        const settingsJson = settings == null ? null : Convert.clientSettingsToJson(settings);\\n        this.#client = new rust.InfisicalClient(settingsJson);\\n    }\\n\\n    // ... getSecret\\n    // ... listSecrets\\n    // ... updateSecret\\n    // ... deleteSecret\\n\\n    async createSecret(options: CreateSecretOptions): Promise<CreateSecretResponse[\"secret\"]> {\\n        // The runCommand will return a JSON string, which we can parse into a CreateSecretResponse.\\n        const command = await this.#client.runCommand(\\n            Convert.commandToJson({\\n                createSecret: options\\n            })\\n        );\\n        const response = Convert.toResponseForCreateSecretResponse(command); // <-- This is the QuickType converter in action!\\n\\n        // If the response is not successful or the data is null, we throw an error.\\n        if (!response.success || response.data == null) {\\n            throw new Error(response.errorMessage ?? \"Something went wrong\");\\n        }\\n\\n        // To make it easier to work with the response, we return the secret directly.\\n        return response.data.secret;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving PostgreSQL Connection by Name using OpenAPI GET Endpoint\nDESCRIPTION: OpenAPI specification for the GET endpoint to retrieve PostgreSQL connection details by connection name. The endpoint path includes a parameter for the connection name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/postgres/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/postgres/connection-name/{connectionName}\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Configuration Based on Environment Profile\nDESCRIPTION: Gradle script snippet showing how to conditionally apply configurations based on an environment profile variable injected by Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nif (System.getenv('PROFILE') == 'production') {\n    // production-specific configurations\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Entra ID Prerequisites Configuration Guide\nDESCRIPTION: Step-by-step markdown documentation for setting up required Azure Entra ID permissions and configurations including tenant ID, application registration, and role assignments.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/azure-entra-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Prerequisites\n\n<Steps>\n<Step>\nLogin to [Microsoft Entra ID](https://entra.microsoft.com/)\n</Step>\n\n<Step>\nGo to Overview, Copy and store `Tenant Id`\n</Step>\n\n<Step>\nGo to Applications > App registrations. Click on New Registration.\n</Step>\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on Arch Linux\nDESCRIPTION: Command to install Infisical CLI on Arch Linux using the yay package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/overview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyay -S infisical-bin\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Token with Token-Only Output\nDESCRIPTION: This command creates a service token and outputs only the token itself. It grants read and write access to the 'dev:/global' scope.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/service-token.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninfisical service-token create --scope=dev:/global --access-level=read --access-level=write --token-only\n```\n\n----------------------------------------\n\nTITLE: Editing Infisical Environment File\nDESCRIPTION: This command opens the Infisical environment file for editing using nano.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nano /etc/infisical/environment\n```\n\n----------------------------------------\n\nTITLE: Configuring hostAPI for Self-Hosted Infisical Instance in Kubernetes\nDESCRIPTION: This snippet demonstrates how to set the hostAPI field to access a self-hosted Infisical instance within the same Kubernetes cluster. It uses the internal service DNS name to route requests directly without going through the public internet.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttp://<backend-svc-name>.<namespace>.svc.cluster.local:4000/api\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint - Retrieve MSSQL Credentials\nDESCRIPTION: OpenAPI specification for GET endpoint that fetches MSSQL credentials using a rotation ID parameter. The endpoint is versioned as v2 and follows RESTful conventions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-rotations/mssql-credentials/get-generated-credentials-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v2/secret-rotations/mssql-credentials/{rotationId}/generated-credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Core Settings\nDESCRIPTION: Ruby configuration file for Infisical Core defining encryption keys, database connections, and port settings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ninfisical_core['ENCRYPTION_KEY'] = 'your-secure-encryption-key'\ninfisical_core['AUTH_SECRET'] = 'your-secure-auth-secret'\n\ninfisical_core['DB_CONNECTION_URI'] = 'postgres://user:pass@52.1.0.2:5000/infisical'\ninfisical_core['REDIS_URL'] = 'redis://52.1.0.2:6379'\n\ninfisical_core['PORT'] = 8080\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for AWS KMS Access via Access Key in JSON\nDESCRIPTION: This JSON snippet defines an AWS IAM policy granting the necessary permissions for Infisical to use AWS KMS via an IAM user's Access Key. It permits the 'kms:Decrypt', 'kms:Encrypt', and 'kms:DescribeKey' actions for all KMS resources ('*'). This policy needs to be attached to the IAM user whose access keys will be used by Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms-configuration/aws-kms.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowKMSAccess\",\n      \"Effect\": \"Allow\",\n        \"Action\": [\n          \"kms:Decrypt\",\n          \"kms:Encrypt\",\n          \"kms:DescribeKey\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Service Account in YAML\nDESCRIPTION: This YAML defines a Kubernetes ServiceAccount named 'infisical-service-account' that will be used to authenticate with Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ServiceAccount\napiVersion: v1\nmetadata:\n  name: infisical-service-account\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Custom Certificates in Infisical Docker Container\nDESCRIPTION: This snippet shows how to set the NODE_EXTRA_CA_CERTS environment variable in the Infisical Docker container. This variable points to the location of the ca-certificates file, which includes the custom certificates.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/custom-certificates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on RedHat/CentOS/Amazon Linux\nDESCRIPTION: Commands to install Infisical CLI on RedHat-based Linux distributions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.rpm.sh' \\\n| sudo -E bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install infisical\n```\n\n----------------------------------------\n\nTITLE: GET Endpoint Definition for KMS Signing Algorithms\nDESCRIPTION: OpenAPI endpoint specification for retrieving signing algorithms associated with a specific key ID from the KMS service.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/kms/signing/signing-algorithms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/kms/keys/{keyId}/signing-algorithms\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Core on Debian-based Systems\nDESCRIPTION: This command installs the Infisical Core package on Debian-based systems using a setup script from Cloudsmith.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-core/cfg/setup/bash.deb.sh' | sudo bash && sudo apt-get install -y infisical-core\n```\n\n----------------------------------------\n\nTITLE: Adding Auto-Reload Annotation for Infisical Managed Secrets\nDESCRIPTION: YAML snippet showing the annotation to add to Kubernetes resources for auto-reloading when Infisical managed secrets are updated.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/secrets-operator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  secrets.infisical.com/auto-reload: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CA for Infisical Connection (YAML)\nDESCRIPTION: Provides a YAML snippet for a Custom Resource Definition (CRD) spec, demonstrating how to configure the operator to trust a custom Certificate Authority (CA). This is used when connecting to an Infisical instance (`hostAPI`) secured with a private or self-signed certificate. The `tls.caRef` section points to a Kubernetes secret (`custom-ca-certificate` in `default` namespace) containing the CA certificate under the key `ca.crt`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nspec:\n  hostAPI: https://app.infisical.com/api\n  tls:\n    caRef:\n      secretName: custom-ca-certificate\n      secretNamespace: default\n      key: ca.crt\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a React Project\nDESCRIPTION: This snippet shows how to navigate to your project directory and initialize Infisical for use with a Create React App project. The initialization process will set up Infisical configuration in your project.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/react.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Sending Signed AWS Auth Request to Infisical via cURL (Bash)\nDESCRIPTION: This cURL example demonstrates how to send a signed AWS GetCallerIdentity payload to the Infisical authentication API. It provides the structure for a POST request with the necessary fields (identityId, iamHttpRequestMethod, iamRequestBody, iamRequestHeaders) expected to be base64-encoded as required. The output is the API response, which should include an access token for authenticated API access. Ensure to fill actual values for each parameter for a successful request.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/aws-auth.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/auth/aws-auth/login' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-urlencode 'identityId=...' \\\n    --data-urlencode 'iamHttpRequestMethod=...' \\\n    --data-urlencode 'iamRequestBody=...' \\\n    --data-urlencode 'iamRequestHeaders=...'\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration\nDESCRIPTION: Terraform configuration for Infisical provider using OIDC authentication\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/circleci.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n    required_providers {\n        infisical = {\n            source = \"infisical/infisical\"\n        }\n    }\n}\n\nprovider \"infisical\" {\n    host = \"https://app.infisical.com\"\n    auth = {\n        oidc = {\n            identity_id = \"f2f5ee4c-6223-461a-87c3-406a6b481462\"\n        }\n    }\n}\n\nresource \"infisical_access_approval_policy\" \"prod-access-approval\" {\n    project_id = \"09eda1f8-85a3-47a9-8a6f-e27f133b2a36\"\n    name = \"my-approval-policy\"\n    environment_slug = \"prod\"\n    secret_path = \"/\"\n    approvers = [\n    {\n        type = \"user\"\n        username = \"sheen+200@infisical.com\"\n    },\n    ]\n    required_approvals = 1\n    enforcement_level =  \"soft\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth0 Connection via Infisical API Request (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to make a POST request using `curl` to the Infisical API endpoint `/api/v1/app-connections/auth0` to create a new Auth0 connection. It uses the Client Credentials method, sending the connection name, method type, and Auth0 credentials (domain, client ID, client secret, audience) in the JSON payload. Requires `curl` to be installed and valid Auth0 M2M application credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/auth0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/app-connections/auth0 \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-auth0-connection\",\n    \"method\": \"client-credentials\",\n    \"credentials\": {\n        \"domain\": \"xxx-xxxxxxxxx.us.auth0.com\",\n        \"clientId\": \"...\",\n        \"clientSecret\": \"...\",\n        \"audience\": \"https://xxx-xxxxxxxxx.us.auth0.com/api/v2/\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: LDAP User Deletion LDIF\nDESCRIPTION: LDIF template for removing a user from LDAP/Active Directory systems. Compatible with both OpenLDAP and Active Directory.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/ldap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ldif\nCODE:\n```\ndn: CN={{Username}},OU=Test Create,DC=infisical,DC=com\nchangetype: delete\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on RedHat/CentOS/Amazon Linux\nDESCRIPTION: These commands add the Infisical repository and install the CLI on RedHat-based Linux distributions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.rpm.sh' \\\n| sudo -E bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo yum install infisical\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Secret Manager Sync Using Infisical API (Bash)\nDESCRIPTION: This snippet demonstrates how to create a GCP Secret Manager Sync in Infisical with a POST API request using curl. It sends a JSON body specifying destination configuration, sync options, environment, and related metadata. Required dependencies are curl and valid API credentials; inputs include project identifiers, connection IDs, and sync configuration fields. The output is the server's response, which should be checked for success or error messaging.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/gcp-secret-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/gcp-secret-manager \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"destinationConfig\": {\n        \"scope\": \"global\",\n        \"projectId\": \"infisical-test-playground\"\n    },\n    \"name\": \"my-gcp-sync\",\n    \"description\": \"this is an example secret sync\",\n    \"secretPath\": \"/\",\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"isAutoSyncEnabled\": true,\n    \"connectionId\": \"eec83609-5eb4-4d8d-9f6e-ded016984f0d\",\n    \"environment\": \"dev\",\n    \"projectId\": \"09eda1f8-85a3-47a9-8a6f-e27f133b2a36\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Systemd Service File\nDESCRIPTION: This command opens a new systemd service file for Infisical using nano.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nano /etc/systemd/system/infisical.service\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP IAM Authentication for InfisicalDynamicSecret in Kubernetes\nDESCRIPTION: This YAML snippet shows how to configure GCP IAM authentication for the InfisicalDynamicSecret. It specifies the identity ID and the path to the GCP service account key file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  gcpIamAuth:\n    identityId: <machine-identity-id>\n    serviceAccountKeyFilePath: </path-to-service-account-key-file.json>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers for Infisical CLI in Bash\nDESCRIPTION: This command sets custom HTTP headers for the Infisical CLI using an environment variable. It's useful for authenticating with servers that require additional headers, such as those protected by Cloudflare Access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_CUSTOM_HEADERS=\"Access-Client-Id=your-client-id Access-Client-Secret=your-client-secret\"\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP Password Rotation LDIF\nDESCRIPTION: LDIF template for rotating user password in OpenLDAP using the password attribute.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/ldap.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ldif\nCODE:\n```\ndn: cn=sheencaps capadngan,ou=people,dc=acme,dc=com\nchangetype: modify\nreplace: userPassword\npassword: {{Password}}\n-\n\n```\n\n----------------------------------------\n\nTITLE: Creating a KMS Key with Infisical API using Bash\nDESCRIPTION: This snippet demonstrates how to create a cryptographic KMS key by making an HTTP POST request with curl to the Infisical API endpoint. It requires a valid project ID and authentication headers may be required (not shown). Key parameters are specified in the JSON payload, including 'projectId', 'name', 'description', and 'encryptionAlgorithm'. The request returns a JSON object containing the created key's details; ensure that the API endpoint and encryption algorithm are correctly specified.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/kms/keys \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"projectId\": \"<project-id>\",\n    \"name\": \"my-secret-key\",\n    \"description\": \"...\",\n    \"encryptionAlgorithm\": \"aes-256-gcm\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Applying Token Reviewer Role Binding in Bash\nDESCRIPTION: This Bash command applies the YAML configuration to create the ClusterRoleBinding for the Infisical token reviewer service account.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f infisical-reviewer-cluster-role-binding.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI in RedHat/CentOs/Amazon-linux Dockerfile\nDESCRIPTION: This Dockerfile command installs the Infisical CLI on RedHat, CentOs, or Amazon Linux by running the RPM setup script from Cloudsmith and using yum to install the package.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN curl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.rpm.sh' | sh \\ \n&& yum install -y infisical\n```\n\n----------------------------------------\n\nTITLE: Generating AUTH_SECRET using OpenSSL (Shell)\nDESCRIPTION: Provides a shell command using `openssl` to generate a cryptographically secure, random 32-byte base64 encoded string. This output is suitable for use as the value for the `AUTH_SECRET` environment variable required by Infisical for JWT operations during GitHub SSO.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating AWS Parameter Store Sync (JSON)\nDESCRIPTION: This JSON snippet represents the sample response from the Infisical API after successfully creating an AWS Parameter Store Sync. It details the resulting sync resource, including metadata such as id, state, project references, sync status, configuration, and related destination properties. This structure illustrates what to expect in a successful API response, which clients can parse to track sync job results, connection and environment info, and configuration. The response structure is subject to Infisical API versioning and may require adaptation if schema changes occur.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/aws-parameter-store.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-parameter-store-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"aws\",\n            \"name\": \"my-aws-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"aws-parameter-store\",\n        \"destinationConfig\": {\n            \"region\": \"us-east-1\",\n            \"path\": \"/my-aws/path/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Windmill Sync via API in Bash\nDESCRIPTION: This code snippet demonstrates how to create a Windmill Sync using the Infisical API. It sends a POST request to the Create Windmill Sync endpoint with the necessary configuration parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/windmill.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/windmill \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-windmill-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"workspace\": \"my-workspace\",\n        \"path\": \"f/folder/path/\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Reference in YAML\nDESCRIPTION: Example configuration for referencing CA certificates for SSL/TLS connections to Infisical instance.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  tls:\n    caRef:\n      secretName: custom-ca-certificate\n      secretNamespace: default\n      key: ca.crt\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Creation Status (Bash)\nDESCRIPTION: This command checks the status of `Certificate` resources in the specified namespace. The example output shows the `certificate-by-issuer` certificate is `READY` (True), stored in the `certificate-by-issuer` secret, issued by `issuer-infisical`, and currently valid. Replace `<namespace_of_your_certificate>`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get certificates -n <namespace_of_your_certificate> -o wide\n```\n\nLANGUAGE: bash\nCODE:\n```\nNAME                    READY   SECRET                  ISSUER             STATUS                                          AGE\ncertificate-by-issuer   True    certificate-by-issuer   issuer-infisical   Certificate is up to date and has not expired   20h\n```\n\n----------------------------------------\n\nTITLE: Managing SAP HANA Dynamic Secrets Configuration\nDESCRIPTION: Guide for configuring and managing dynamic SAP HANA database credentials using Infisical, including setting up prerequisites, configuring connection parameters, and managing credential leases.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/sap-hana.mdx#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Linking Service Account Token\nDESCRIPTION: Bash command to patch the service account and link it with the created secret token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch serviceaccount infisical-auth -p '{\"secrets\": [{\"name\": \"infisical-auth-token\"}]}' -n default\n```\n\n----------------------------------------\n\nTITLE: PATCH Organization Membership Update API Endpoint\nDESCRIPTION: OpenAPI endpoint definition for updating an organization member's details. The endpoint path includes organization ID and membership ID parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/organizations/update-membership.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v2/organizations/{organizationId}/memberships/{membershipId}\n```\n\n----------------------------------------\n\nTITLE: Granting Secret Rotation Permissions in SQL Server\nDESCRIPTION: SQL command to grant the necessary permission for secret rotation functionality, allowing the Infisical user to alter other login passwords.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/mssql.mdx#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nGRANT ALTER ANY LOGIN TO infisical_login;\n```\n\n----------------------------------------\n\nTITLE: Sample Azure Token Response\nDESCRIPTION: Example response from the Azure IMDS endpoint containing the access token and related metadata.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/azure-auth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"access_token\": \"eyJ0eXAi...\",\n    \"refresh_token\": \"\",\n    \"expires_in\": \"3599\",\n    \"expires_on\": \"1506484173\",\n    \"not_before\": \"1506480273\",\n    \"resource\": \"https://management.azure.com/\",\n    \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Secure AUTH_SECRET using OpenSSL\nDESCRIPTION: This command uses OpenSSL to generate a random 32-byte base64 encoded string. This string is intended for use as the `AUTH_SECRET` environment variable in self-hosted Infisical instances, crucial for signing and verifying JWTs during SAML authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/google-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets with Go SDK\nDESCRIPTION: Demonstrates how to retrieve a secret from Infisical using the Go SDK. The method fetches and returns a shared secret by default, requiring project ID, environment, and secret key parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nsecret, err := client.Secrets().Retrieve(infisical.RetrieveSecretOptions{\n  SecretKey:   \"API_KEY\",\n  ProjectID:   \"PROJECT_ID\",\n  Environment: \"dev\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy for Infisical\nDESCRIPTION: This snippet shows the HAProxy configuration for Infisical, including global settings, defaults, and backend configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\n\nfrontend http-in\n    bind *:80\n    default_backend infisical\n\nbackend infisical\n    server infisicalapp 127.0.0.1:8080 check\n```\n\n----------------------------------------\n\nTITLE: Configuring Patroni for PostgreSQL Cluster\nDESCRIPTION: YAML configuration for Patroni showing cluster settings, connection parameters, and PostgreSQL tuning options.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nscope: infisical-cluster\nnamespace: /db/\nname: postgresql1\n\nrestapi:\n  listen: 52.1.0.6:8008\n  connect_address: 52.1.0.6:8008\n\netcd:\n  hosts: 52.1.0.3:2379,52.1.0.4:2379,52.1.0.5:2379\n\nbootstrap:\n  dcs:\n    ttl: 30\n    loop_wait: 10\n    retry_timeout: 10\n    maximum_lag_on_failover: 1048576\n    postgresql:\n      use_pg_rewind: true\n      parameters:\n        max_connections: 1000\n        shared_buffers: 2GB\n        work_mem: 8MB\n        max_worker_processes: 8\n        max_parallel_workers_per_gather: 4\n        max_parallel_workers: 8\n        wal_level: replica\n        hot_standby: \"on\"\n        max_wal_senders: 10\n        max_replication_slots: 10\n        hot_standby_feedback: \"on\"\n```\n\n----------------------------------------\n\nTITLE: Capture Token in Variable\nDESCRIPTION: Example showing how to capture the bootstrap token in a shell variable for further use in automation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN=$(infisical bootstrap --domain=https://your-infisical-instance.com --email=admin@example.com --password=your-secure-password --organization=your-org-name | jq -r \".identity.credentials.token\")\n\n# Now use the token for further automation\necho \"Token has been captured and can be used for authentication\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure App Configuration Sync Details by Name (OpenAPI)\nDESCRIPTION: OpenAPI specification for the GET endpoint to fetch Azure App Configuration sync details using the sync name. The endpoint path includes a parameter for the sync name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/azure-app-configuration/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /api/v1/secret-syncs/azure-app-configuration/sync-name/{syncName}\n```\n\n----------------------------------------\n\nTITLE: Creating Symmetric Key with Infisical C# Client\nDESCRIPTION: Creates a base64-encoded 256-bit symmetric key for encryption/decryption operations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/csharp.mdx#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar key = infisical.CreateSymmetricKey();\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Gateway with Environment Variable\nDESCRIPTION: Commands to run the Gateway using an authentication token stored in an environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/gateways/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=<your-machine-identity-token>\ninfisical gateway\n```\n\n----------------------------------------\n\nTITLE: OIDC Authentication Flow Diagram\nDESCRIPTION: Sequence diagram showing the authentication flow between CircleCI jobs, CircleCI Identity Provider, and Infisical\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/circleci.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as CircleCI Job\n  participant Idp as CircleCI Identity Provider\n  participant Infis as Infisical\n\n  Idp->>Client: Step 1: Inject JWT with verifiable claims\n\n  Note over Client,Infis: Step 2: Login Operation\n  Client->>Infis: Send signed JWT to /api/v1/auth/oidc-auth/login\n\n  Note over Infis,Idp: Step 3: Query verification\n  Infis->>Idp: Request JWT public key using OIDC Discovery\n  Idp-->>Infis: Return public key\n\n  Note over Infis: Step 4: JWT validation\n  Infis->>Client: Return short-lived access token\n\n  Note over Client,Infis: Step 5: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Auth Flow Diagram\nDESCRIPTION: Sequence diagram showing the authentication workflow between GCP IAM service accounts and Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/gcp-auth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant GCE as Client\n  participant Infis as Infisical\n  participant Google as Cloud IAM\n\n  Note over GCE,Google: Step 1: Signed JWT Token Generation\n  GCE->>Google: Request to generate signed JWT token\n  Google-->>GCE: Return signed JWT token\n\n  Note over GCE,Infis: Step 2: JWT Token Login Operation\n  GCE->>Infis: Send signed JWT token to /api/v1/auth/gcp-auth/login\n  Infis->>Google: Request public key\n  Google-->>Infis: Return public key\n\n  Note over Infis: Step 3: JWT Token Verification\n  Note over Infis: Step 4: JWT Property Validation\n  Infis->>GCE: Return short-lived access token\n\n  Note over GCE,Infis: Step 5: Access Infisical API with Token\n  GCE->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Signing a CSR (Bash)\nDESCRIPTION: Shows the JSON response structure from the Infisical API after successfully signing a submitted CSR. The response includes the PEM-encoded `certificate`, `certificateChain`, `issuingCaCertificate`, and `serialNumber`. Unlike direct issuance, the `privateKey` is not returned as it was associated with the externally provided CSR.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n  certificate: \"...\",\n  certificateChain: \"...\",\n  issuingCaCertificate: \"...\",\n  privateKey: \"...\",\n  serialNumber: \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling Artifacts with Infisical Environment Variables\nDESCRIPTION: Example command for assembling artifacts with versioning information injected by Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- gradle assemble\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for SSH CA Retrieval\nDESCRIPTION: YAML definition for the OpenAPI GET endpoint to retrieve SSH Certificate Authority details. It specifies the path, including the sshCaId parameter, for accessing specific CA information.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/ssh/ca/read.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"GET /api/v1/ssh/ca/{sshCaId}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring updatePolicy in InfisicalPushSecret CRD\nDESCRIPTION: This example demonstrates how to set the updatePolicy field in the InfisicalPushSecret CRD. The updatePolicy defines how the operator handles conflicting secrets when pushing to Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  updatePolicy: Replace\n```\n\n----------------------------------------\n\nTITLE: Example Secret Output After Creation\nDESCRIPTION: An example of the expected YAML output when retrieving the managed secret from Kubernetes, showing the data section containing the lease credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  DB_PASSWORD: VHhETjZ4c2xsTXpOSWdPYW5LLlRyNEc2alVKYml6WiQjQS0tNTdodyREM3ZLZWtYSi4hTkdyS0F+TVFsLU9CSA==\n  DB_USERNAME: cHg4Z0dJTUVBcHdtTW1aYnV3ZWRsekJRRll6cW4wFEE=\nkind: Secret\n# .....\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Managed Identity Access Token\nDESCRIPTION: HTTP request to obtain a managed identity access token from Azure Instance Metadata Service (IMDS) endpoint. The token is required for authentication with Infisical API.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/azure-auth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fmanagement.azure.com%2F' -H Metadata:true -s\n```\n\n----------------------------------------\n\nTITLE: GET Terraform Cloud Connection Endpoint Definition\nDESCRIPTION: OpenAPI endpoint definition for retrieving a Terraform Cloud connection by its name. The endpoint accepts a connectionName parameter in the URL path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/terraform-cloud/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/terraform-cloud/connection-name/{connectionName}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with AWS SSM using Infisical API\nDESCRIPTION: This curl command uses the Infisical Integration Auth API to authenticate with AWS SSM. It requires the workspace ID, integration type, AWS IAM User Access ID, and Access Secret Key as parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/overview/examples/integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n    --url https://app.infisical.com/api/v1/integration-auth/access-token \\\n    --header 'Authorization: <authorization>' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\n    \"workspaceId\": \"<workspaceid>\",\n    \"integration\": \"aws-secret-manager\",\n    \"accessId\": \"<aws iam user access id>\",\n    \"accessToken\": \"<aws iam user access secret key>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Copying HSM Client Files to Persistent Volume\nDESCRIPTION: Commands to create directories, copy the HSM client files to the PVC, and set appropriate permissions for the files.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec hsm-setup-pod -- mkdir -p /data/ # Create the data directory\nkubectl cp ./hsm-client/ hsm-setup-pod:/data/ # Copy the HSM client files into the PVC\nkubectl exec hsm-setup-pod -- chmod -R 755 /data/ # Set the correct permissions for the HSM client files\n```\n\n----------------------------------------\n\nTITLE: Installing HAProxy for Reverse Proxy\nDESCRIPTION: This command installs HAProxy on the system to be used as a reverse proxy for Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ apt-get install -y haproxy\n```\n\n----------------------------------------\n\nTITLE: Example LDAP Group Filter Template\nDESCRIPTION: Template for constructing group membership query with support for different directory schemas.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ldap/general.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n(&(objectClass=posixGroup)(memberUid={{.Username}}))\n(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Master Node\nDESCRIPTION: Redis configuration for master node including memory settings and security parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_5\n\nLANGUAGE: conf\nCODE:\n```\nbind 52.1.0.9\nport 6379\ndir /var/lib/redis\nmaxmemory 3gb\nmaxmemory-policy noeviction\nrequirepass \"your_redis_password\"\nmasterauth \"your_redis_password\"\n```\n\n----------------------------------------\n\nTITLE: Example Keycloak SAML IdP Metadata URL Format\nDESCRIPTION: Provides the typical format for the Keycloak SAML 2.0 Identity Provider (IdP) Metadata URL. This URL is required during the final SAML configuration steps within Infisical to locate the IdP's metadata.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/keycloak-saml.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://keycloak-mysite.com/realms/myrealm/protocol/saml\n```\n\n----------------------------------------\n\nTITLE: Template File Example\nDESCRIPTION: Example of a template file used for custom secret rendering\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/export.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{{$secrets := secret \"<infisical-project-id>\" \"<environment-slug>\" \"<folder-path>\"}}\n{{$length := len $secrets}}\n{{- \"{\"}} \n{{- with $secrets }}\n  {{- range $index, $secret := . }}\n    \"{{ $secret.Key }}\": \"{{ $secret.Value }}\"{{if lt $index (minus $length 1)}},{{end}}\n  {{- end }}\n{{- end }}\n{{ \"}\" -}}\n```\n\n----------------------------------------\n\nTITLE: GET Secret Sync by ID Endpoint\nDESCRIPTION: OpenAPI endpoint specification for retrieving a specific secret sync configuration using its unique identifier. The endpoint follows the pattern /api/v1/secret-syncs/windmill/{syncId} where syncId is the path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/windmill/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/windmill/{syncId}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: This command starts the MongoDB and PostgreSQL services defined in the docker-compose.yaml file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Example OIDC Token Structure\nDESCRIPTION: Demonstrates the structure of an OIDC token response containing machine identity information and custom claims that can be mapped to permission attributes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/access-controls/abac/managing-machine-identity-attributes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"machine456\",\n  \"name\": \"Service A\",\n  \"user\": {\n    \"department\": \"engineering\",\n    \"role\": \"service\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Individual ConfigMap Keys Using env\nDESCRIPTION: Shows how to select individual secrets by key name from a managed ConfigMap.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: CONFIG_NAME # The environment variable's name which is made available in the container\n    valueFrom:\n      configMapKeyRef:\n        name: managed-configmap # managed configmap name\n        key: SOME_CONFIG_KEY # The name of the key which exists in the managed configmap\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for AWS KMS Access via Assume Role in JSON\nDESCRIPTION: This JSON snippet defines an AWS IAM policy granting the minimum required permissions for Infisical to interact with AWS KMS when using the Assume Role authentication method. It allows the 'kms:Decrypt', 'kms:Encrypt', and 'kms:DescribeKey' actions on all KMS resources ('*'). This policy should be attached to the IAM role created for Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms-configuration/aws-kms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowKMSAccess\",\n      \"Effect\": \"Allow\",\n        \"Action\": [\n          \"kms:Decrypt\",\n          \"kms:Encrypt\",\n          \"kms:DescribeKey\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Infisical Cloud EU Service Account for GCP Impersonation\nDESCRIPTION: Provides the specific GCP service account email (`infisical-eu@infisical-eu.iam.gserviceaccount.com`) for Infisical Cloud EU. Grant the 'Service Account Token Creator' role to this principal on your target service account within your GCP project to allow Infisical Cloud EU to perform impersonation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/gcp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ninfisical-eu@infisical-eu.iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Configuring SocketLabs SMTP Environment Variables\nDESCRIPTION: This snippet shows the environment variable configuration required for Infisical to utilize SocketLabs for sending emails. Ensure you replace the placeholder `SMTP_USERNAME`, `SMTP_PASSWORD`, and `SMTP_FROM_ADDRESS` with your actual SocketLabs credentials and an email address associated with an authenticated domain in SocketLabs.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=smtp.socketlabs.com\nSMTP_USERNAME=username # obtained from your credentials\nSMTP_PASSWORD=password # obtained from your credentials\nSMTP_PORT=587\nSMTP_FROM_ADDRESS=hey@example.com # your email address being used to send out emails\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSH CA Certificate Templates with OpenAPI\nDESCRIPTION: This OpenAPI specification defines the GET endpoint for listing SSH CA certificate templates. It requires the sshCaId parameter in the path to identify the specific SSH CA.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/ssh/ca/list-certificate-templates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/ssh/ca/{sshCaId}/certificate-templates\n```\n\n----------------------------------------\n\nTITLE: Universal Auth Client ID Authentication\nDESCRIPTION: Shows how to authenticate using a universal auth client ID. Required when using the universal-auth method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --client-id=<client-id>\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Vault Configuration in Infisical CLI\nDESCRIPTION: Command to display the current vault configuration and available vault types in Infisical. Shows whether credentials are stored in auto (system native) or file-based vault.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/vault.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfisical vault \n\n# Example output\nVaults are used to securely store your login details locally. Available vaults:\n- auto (automatically select native vault on system)\n- file (encrypted file vault)\n\nYou are currently using [file] vault to store your login credentials\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Definition for Key Creation\nDESCRIPTION: OpenAPI specification for the POST endpoint that creates a new key in the KMS. The endpoint is available at /api/v1/kms/keys.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/kms/keys/create.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPOST /api/v1/kms/keys\n```\n\n----------------------------------------\n\nTITLE: Adding Infisical Helm Repository (Bash)\nDESCRIPTION: This command adds the Helm repository containing the Infisical CSI provider chart. This is necessary before installing the provider. Helm must be installed.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add infisical-helm-charts 'https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/'\n\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Example LDAP User Search Filter\nDESCRIPTION: Template for constructing LDAP user search filter with username placeholder.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ldap/general.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(uid={{username}})\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Core Repository - RedHat/CentOS\nDESCRIPTION: Command to add the Infisical repository to RedHat/CentOS systems using cloudsmith setup script.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-core/setup.rpm.sh' \\\n| sudo -E bash\n```\n\n----------------------------------------\n\nTITLE: Restoring MongoDB Dump to Local Instance\nDESCRIPTION: This command restores the dumped MongoDB data to the local MongoDB instance.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmongorestore --uri=mongodb://root:example@localhost:27017/ --archive=\"mongodump-db\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes HSM Client Files Copy\nDESCRIPTION: Command to copy HSM client files to Kubernetes directory\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncp -r /<path-to-where-your-hsm-client-is-located> /etc/hsm-client\n```\n\n----------------------------------------\n\nTITLE: JumpCloud LDAP Server Configuration Parameters\nDESCRIPTION: Essential LDAP configuration parameters for connecting Infisical to JumpCloud LDAP server, including server URL, bind credentials, and search filters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ldap/jumpcloud.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nldaps://ldap.jumpcloud.com:636\n\nBind DN format: uid=<ldap-user-username>,ou=Users,o=<your-org-id>,dc=jumpcloud,dc=com\n\nUser Search Base: ou=Users,o=<your-org-id>,dc=jumpcloud,dc=com\n\nUser Search Filter: (uid={{username}})\n\nGroup Filter: (&(objectClass=groupOfNames)(member=uid={{.Username}},ou=Users,o=<your-org-id>,dc=jumpcloud,dc=com))\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Infisical GCP IAM Login\nDESCRIPTION: This snippet shows a sample JSON response received after successfully authenticating to the Infisical `/api/v1/auth/gcp-auth/login` endpoint using a signed JWT obtained via GCP IAM. The response includes the `accessToken` needed for subsequent API calls, its time-to-live (`expiresIn`), the maximum TTL (`accessTokenMaxTTL`), and the `tokenType`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/gcp-auth.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"accessToken\": \"...\",\n    \"expiresIn\": 7200,\n    \"accessTokenMaxTTL\": 43244\n    \"tokenType\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Infisical Token Reviewer Service Account in Bash\nDESCRIPTION: This Bash command applies the YAML configuration to create the Infisical token reviewer service account in the Kubernetes cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f infisical-reviewer-service-account.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Syncing Secrets to Azure App Configuration\nDESCRIPTION: This snippet defines the API endpoint for syncing secrets to Azure App Configuration. It specifies the HTTP method (POST) and the path parameters required for the sync operation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/azure-app-configuration/sync-secrets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Sync Secrets\"\nopenapi: \"POST /api/v1/secret-syncs/azure-app-configuration/{syncId}/sync-secrets\"\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Active Directory User with LDIF\nDESCRIPTION: LDIF template for creating a new user in Active Directory and adding them to a group. Uses encoded password format required by AD.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/ldap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ldif\nCODE:\n```\ndn: CN={{Username}},OU=Test Create,DC=infisical,DC=com\nchangetype: add\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: user\nuserPrincipalName: {{Username}}@infisical.com\nsAMAccountName: {{Username}}\nunicodePwd::{{EncodedPassword}}\nuserAccountControl: 66048\n\ndn: CN=test-group,OU=Test Create,DC=infisical,DC=com\nchangetype: modify\nadd: member\nmember:  CN={{Username}},OU=Test Create,DC=infisical,DC=com\n-\n```\n\n----------------------------------------\n\nTITLE: Mounting ConfigMap Volume to Container\nDESCRIPTION: Shows how to mount a ConfigMap volume to a container's filesystem.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - name: configmaps-volume-name\n    mountPath: /etc/config\n    readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Service Configuration with Infisical Token\nDESCRIPTION: This YAML snippet shows how to configure a service in a Docker Compose file to use an Infisical token. It sets the INFISICAL_TOKEN environment variable using a shell variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    api:\n        build: .\n        image: example-service-2\n        environment:\n        - INFISICAL_TOKEN=${INFISICAL_TOKEN_FOR_API}\n```\n\n----------------------------------------\n\nTITLE: Running Postgres Migrations for Infisical\nDESCRIPTION: This command runs the latest Postgres migrations for Infisical using the configured environment variables.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ eval $(cat /etc/infisical/environment) infisical-core migration:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoho Mail SMTP Environment Variables\nDESCRIPTION: This snippet displays the environment variable configuration needed for Infisical to send emails via Zoho Mail. Replace `SMTP_USERNAME`, `SMTP_PASSWORD`, and `SMTP_FROM_ADDRESS` with your Zoho Mail email address (personal or domain-based) and password.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=smtp.zoho.com\nSMTP_USERNAME=username # your email\nSMTP_PASSWORD=password # your password\nSMTP_PORT=587\nSMTP_FROM_ADDRESS=hey@example.com # your personal Zoho email or domain-based email linked to Zoho Mail\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for GCP Secret Manager Sync Retrieval\nDESCRIPTION: Specifies the OpenAPI definition for the GET endpoint to retrieve GCP Secret Manager sync details by sync name. The endpoint uses the sync name as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/gcp-secret-manager/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Get by Name\"\nopenapi: \"GET /api/v1/secret-syncs/gcp-secret-manager/sync-name/{syncName}\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Identity Token Authentication in YAML\nDESCRIPTION: Example configuration for GCP identity token authentication in InfisicalDynamicSecret CRD, specifying the machine identity ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n  spec:\n    gcpIdTokenAuth:\n      identityId: <machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Running a SvelteKit App with Infisical\nDESCRIPTION: This code snippet demonstrates how to start your SvelteKit application with Infisical to inject environment variables. It includes a general command format and a specific example using npm run dev.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/sveltekit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for MacOS Fork Safety Issues\nDESCRIPTION: Troubleshooting solution for a common Python error on MacOS related to fork safety. Sets an environment variable to resolve the issue when running the Infisical lookup plugin.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ansible.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n```\n\n----------------------------------------\n\nTITLE: Retrieving OIDC Authentication Identity with OpenAPI\nDESCRIPTION: OpenAPI specification for the GET endpoint to retrieve an OIDC authentication identity. The endpoint requires an identityId parameter in the path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/oidc-auth/retrieve.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/auth/oidc-auth/identities/{identityId}\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Gateway with Token and Domain in Bash\nDESCRIPTION: Command to run the Infisical gateway with both token and domain parameters specified. This connects the gateway to a specific self-hosted Infisical instance.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/gateway.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical gateway --token=<token> --domain=<domain>\n```\n\n----------------------------------------\n\nTITLE: Basic Azure Function HTTP Trigger Implementation in C#\nDESCRIPTION: Simple HTTP trigger function that returns a 'Hello World' response. This demonstrates the basic structure of an Azure Function using the older runtime version 1.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/microsoft-power-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Net;\n\npublic static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log)\n{\n    log.Info(\"C# HTTP trigger function processed a request.\");\n    return req.CreateResponse(HttpStatusCode.OK, \"Hello World\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CA Public Key to known_hosts\nDESCRIPTION: This example shows how to add the Certificate Authority's public key to the client's known_hosts file to trust hosts signed by that CA.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n@cert-authority *.example.com ssh-rsa ...\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Infisical Token Renewal Command\nDESCRIPTION: This snippet demonstrates the exact syntax for using the 'infisical token renew' command in a terminal or command prompt. It shows how to pass the current access token as an argument to the command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ infisical token renew <ua-access-token>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes HSM Chrystoki Configuration\nDESCRIPTION: Initial configuration for Chrystoki in Kubernetes environment\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: conf\nCODE:\n```\nChrystoki2 = {\n  # This path points to the mounted path, /hsm-client\n  LibUNIX64 = /hsm-client/libs/64/libCryptoki2.so;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Infisical Admin Credentials\nDESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes Secret to store the Infisical admin token securely. It uses the Opaque type and base64 encoding for the token value.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/automated-bootstrapping.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: infisical-admin-credentials\ntype: Opaque\ndata:\n  token: <base64-encoded-token>\n```\n\n----------------------------------------\n\nTITLE: Applying Service Account Token Secret in Bash\nDESCRIPTION: This Bash command applies the YAML configuration to create the Secret containing the long-lived JWT token for the Infisical token reviewer service account.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f service-account-reviewer-token.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Ingress Controller in Helm Values\nDESCRIPTION: This YAML snippet demonstrates how to enable the Nginx Ingress controller in the Helm values file for routing traffic to Infisical services.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/kubernetes-helm.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  nginx:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Dumping Local PostgreSQL Data\nDESCRIPTION: This command creates a dump file of the local PostgreSQL database containing the migrated data.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npg_dump -h localhost -U infisical -Fc -b -v -f dumpfilelocation.sql -d infisical\n```\n\n----------------------------------------\n\nTITLE: LDIF Entry Format Guidelines\nDESCRIPTION: Key formatting requirements for LDIF entries including spacing rules and modification block structure. Critical for proper LDAP directory modifications.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/ldap.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ldif\nCODE:\n```\n# Format requirements:\n# - No trailing spaces on any line\n# - Empty line before each modify block\n# - Multiple modifications end with single dash (-)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Redeployment for Managed Secrets\nDESCRIPTION: Annotation to enable automatic redeployment of workloads when their managed secrets are updated. This ensures applications always use the latest secret values.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets.infisical.com/auto-reload: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating PKI Collection via API\nDESCRIPTION: API request to create a new PKI/Certificate collection in Infisical. Requires an access token and project ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/alerting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/collections' \\\n  --header 'Authorization: Bearer <access-token>' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"projectId\": \"<your-project-id>\",\n      \"name\": \"My Certificate Collection\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Active Directory Password and Account Configuration Notes\nDESCRIPTION: Technical specifications for handling passwords and account control settings in Active Directory. Includes details about unicodePwd field formatting, userAccountControl flags for account management, and memberOf attribute behavior.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/ldap.mdx#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n- unicodePwd field must be preceded by ::\n- userAccountControl values:\n  - 512: Enable user account\n  - 65536: Disable password expiration\n  - 66048: Combined value for both (512 + 65536)\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File with wget in Bash\nDESCRIPTION: Command to download the Infisical docker-compose.prod.yml file using wget.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-compose.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget -O docker-compose.prod.yml https://raw.githubusercontent.com/Infisical/infisical/main/docker-compose.prod.yml\n```\n\n----------------------------------------\n\nTITLE: Requesting GCP Authentication Login in Infisical API\nDESCRIPTION: This JSON snippet shows the structure of the request body for the GCP authentication login endpoint. It includes the required parameters: email, workspaceId, and gcpToken.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/gcp-auth/login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"string\",\n  \"workspaceId\": \"string\",\n  \"gcpToken\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Infrastructure with Terraform Commands\nDESCRIPTION: Bash commands for initializing Terraform, previewing resources to be created with plan, and applying the configuration to deploy the infrastructure to AWS.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/ecs-with-agent.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd terraform\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n```\n\nLANGUAGE: bash\nCODE:\n```\nApply complete! Resources: 1 added, 1 changed, 1 destroyed.\n\nOutputs:\n\nalb_hostname = \"cb-load-balancer-1675475779.us-east-1.elb.amazonaws.com:8080\"\n```\n\n----------------------------------------\n\nTITLE: Defining push.secret in InfisicalPushSecret CRD\nDESCRIPTION: These snippets demonstrate how to use the push.secret field in the InfisicalPushSecret CRD to define a Kubernetes secret for pushing to Infisical, along with an example of the corresponding Kubernetes Secret resource.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npush:\n  secret:\n    secretName: push-secret-demo\n    secretNamespace: default\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: push-secret-demo\n  namespace: default\n# Pass in the secrets you wish to push to Infisical\nstringData:\n  API_KEY: some-api-key\n  DATABASE_URL: postgres://127.0.0.1:5432\n  ENCRYPTION_KEY: fabcc12-a22-facbaa4-11aa568aab\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP ID Token Authentication in Infisical Kubernetes CRD\nDESCRIPTION: Example showing how to configure GCP ID Token authentication in an InfisicalSecret resource. This requires adding your machine identity ID to the authentication.gcpIdTokenAuth.identityId field and specifying the secrets scope with project slug, environment slug, and secrets path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  name: infisicalsecret-sample-crd\nspec:\n  authentication:\n      gcpIdTokenAuth:\n          identityId: <your-machine-identity-id>\n\n          # secretsScope is identical to the secrets scope in the universalAuth field in this sample.\n          secretsScope:\n              projectSlug: your-project-slug\n              envSlug: prod\n              secretsPath: \"/path\"\n              recursive: true\n  ...\n```\n\n----------------------------------------\n\nTITLE: Verifying GitHub SSO Environment Variables for Troubleshooting (Infisical)\nDESCRIPTION: Lists the critical environment variables (`CLIENT_ID_GITHUB_LOGIN`, `CLIENT_SECRET_GITHUB_LOGIN`, `AUTH_SECRET`, `SITE_URL`) that should be checked for correctness when troubleshooting GitHub SSO failures in a self-hosted Infisical instance. Misconfiguration of these variables is a common cause of issues.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/github.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\n- Check that you have set the `CLIENT_ID_GITHUB_LOGIN`, `CLIENT_SECRET_GITHUB_LOGIN`, \n`AUTH_SECRET`, and `SITE_URL` environment variables.\n```\n\n----------------------------------------\n\nTITLE: Exporting Infisical Token as Shell Variable\nDESCRIPTION: This console command shows how to export an Infisical token as a shell variable. This is used in conjunction with the Docker Compose configuration to provide the token to the container.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/docker.mdx#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nexport INFISICAL_TOKEN_FOR_API=<your_infisical_token>\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Structure\nDESCRIPTION: Markdown structure defining the introduction page layout with title and card-based navigation for different language and stack guides.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Introduction\"\n---\n\nWhether you're running a Node application on Heroku, Next.js application with Vercel, or Kubernetes on AWS, Infisical has a secret management strategy from local development to production ready for you.\n\n## Guides by Language\n\n<CardGroup cols={2}>\n  <Card\n    title=\"Node\"\n    href=\"/documentation/guides/node\"\n    icon=\"node\"\n    color=\"#3c8639\"\n  >\n    Manage secrets across your Node stack\n  </Card>\n  <Card \n    href=\"/documentation/guides/python\" \n    title=\"Python\" \n    icon=\"python\" \n    color=\"#3775a9\"\n    >\n    Manage secrets across your Python stack\n  </Card>\n</CardGroup>\n\n## Guides by Stack\n\n<CardGroup cols={2}>\n  <Card\n    title=\"Next.js + Vercel\"\n    href=\"/documentation/guides/nextjs-vercel\"\n    icon=\"cloud\"\n    color=\"#3c8639\"\n  >\n    Manage secrets for your Next.js + Vercel stack\n  </Card>\n</CardGroup>\n\nWant a guide? [Throw in a request](https://github.com/Infisical/infisical/issues).\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Swarm Service Status\nDESCRIPTION: This command displays the status of all services deployed in the Docker Swarm, including their replicas, images, and exposed ports.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-swarm.mdx#2025-04-22_snippet_5\n\nLANGUAGE: plain\nCODE:\n```\n$ docker service ls \nID             NAME                        MODE         REPLICAS   IMAGE                                  PORTS\n4kzq3ub8qgn9   infisical_etcd1             replicated   1/1        ghcr.io/zalando/spilo-16:3.2-p2        \ntqx9t82bn8d9   infisical_etcd2             replicated   1/1        ghcr.io/zalando/spilo-16:3.2-p2        \nt8vbkrasy8fz   infisical_etcd3             replicated   1/1        ghcr.io/zalando/spilo-16:3.2-p2        \n77iei42fcf6q   infisical_haproxy           global       4/4        haproxy:latest                         *:5002-5003->5433-5434/tcp, *:6379->6379/tcp, *:7001->7000/tcp, *:8080->8080/tcp\njaewzqy8md56   infisical_infisical         replicated   5/5        infisical/infisical:v0.60.1-postgres   \n58w4zablfbtb   infisical_redis_replica0    replicated   1/1        bitnami/redis:6.2.10                   \nw4yag2whq0un   infisical_redis_replica1    replicated   1/1        bitnami/redis:6.2.10                   \nw03mriy0jave   infisical_redis_replica2    replicated   1/1        bitnami/redis:6.2.10                   \nppo6rk47hc9t   infisical_redis_sentinel1   replicated   1/1        bitnami/redis-sentinel:6.2.10          \nub29vd0lnq7f   infisical_redis_sentinel2   replicated   1/1        bitnami/redis-sentinel:6.2.10          \nszg3yky7yji2   infisical_redis_sentinel3   replicated   1/1        bitnami/redis-sentinel:6.2.10          \neqtocpf5tiy0   infisical_spolo1            replicated   1/1        ghcr.io/zalando/spilo-16:3.2-p2        \n3lznscvk7k5t   infisical_spolo2            replicated   1/1        ghcr.io/zalando/spilo-16:3.2-p2        \nv04ml7rz2j5q   infisical_spolo3            replicated   1/1        ghcr.io/zalando/spilo-16:3.2-p2\n```\n\n----------------------------------------\n\nTITLE: Formatting Multiple Custom Headers for Infisical CLI in Bash\nDESCRIPTION: This example shows how to set multiple custom headers for the Infisical CLI. Each header-value pair is separated by a space, allowing for flexible authentication configurations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/faq.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_CUSTOM_HEADERS=\"Header1=value1 Header2=value2 Header3=value3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 SAML Application Settings (JSON)\nDESCRIPTION: This JSON configuration defines settings for an Auth0 SAML application integrating with Infisical. It specifies the `audience` (obtained from Infisical), maps standard SAML claims (`email`, `given_name`, `family_name`) to Auth0 user attributes, sets the `signatureAlgorithm` to `rsa-sha256`, the `digestAlgorithm` to `sha256`, and ensures the SAML response is signed (`signResponse: true`). This JSON should be placed in the 'Settings' field within the SAML2 Web App addon settings in Auth0, replacing `<audience-from-infisical>` with the actual Audience value from Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/auth0-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"audience\": \"<audience-from-infisical>\",\n\"mappings\": {\n    \"email\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/email\",\n    \"given_name\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/firstName\",\n    \"family_name\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/lastName\"\n},\n\"signatureAlgorithm\": \"rsa-sha256\",\n\"digestAlgorithm\": \"sha256\",\n\"signResponse\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronization Setup with Infisical API\nDESCRIPTION: This curl command uses the Infisical Integration API to configure the synchronization behavior between Infisical and AWS SSM. It specifies the source environment and secret path in Infisical, and the destination in SSM for secret synchronization.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/overview/examples/integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n    --url https://app.infisical.com/api/v1/integration \\\n    --header 'Authorization: <authorization>' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\n    \"integrationAuthId\": \"<integrationauthid>\",\n    \"sourceEnvironment\": \"<sourceenvironment>\",\n    \"secretPath\": \"<secret-path, default is '/' >\",\n    \"app\": \"<app>\",\n    \"region\": \"<aws-ssm-region>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Values for HSM Support\nDESCRIPTION: Helm values configuration to update the Infisical deployment to use the FIPS-compliant image and mount the HSM client files from the PVC.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n  # ... The rest of the values.yaml file ...\n  \n  image:\n    repository: infisical/infisical-fips # Very important: Must use \"infisical/infisical-fips\"\n    tag: \"v0.117.1-postgres\"\n    pullPolicy: IfNotPresent\n\n  extraVolumeMounts:\n    - name: hsm-data\n      mountPath: /hsm-client # The path we will mount the HSM client files to\n      subPath: ./hsm-client\n\n  extraVolumes:\n    - name: hsm-data \n      persistentVolumeClaim:\n        claimName: infisical-data-pvc # The PVC we created in the previous step\n\n  # ... The rest of the values.yaml file ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Replica Nodes\nDESCRIPTION: Redis configuration for replica nodes showing replication settings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_6\n\nLANGUAGE: conf\nCODE:\n```\nbind 52.1.0.10\nport 6379\ndir /var/lib/redis\nreplicaof 52.1.0.9 6379\nmasterauth \"your_redis_password\"\nrequirepass \"your_redis_password\"\n```\n\n----------------------------------------\n\nTITLE: API Response for MSSQL Credentials Rotation Creation\nDESCRIPTION: Example JSON response returned after successfully creating a Microsoft SQL Server credentials rotation configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/mssql-credentials.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"secretRotation\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-mssql-rotation\",\n        \"description\": \"my database credentials rotation\",\n        \"secretsMapping\": {\n            \"username\": \"MSSQL_DB_USERNAME\",\n            \"password\": \"MSSQL_DB_PASSWORD\"\n        },\n        \"isAutoRotationEnabled\": true,\n        \"activeIndex\": 0,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"rotationInterval\": 30,\n        \"rotationStatus\": \"success\",\n        \"lastRotationAttemptedAt\": \"2023-11-07T05:31:56Z\",\n        \"lastRotatedAt\": \"2023-11-07T05:31:56Z\",\n        \"lastRotationJobId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"nextRotationAt\": \"2023-11-07T05:31:56Z\",\n        \"connection\": {\n            \"app\": \"mssql\",\n            \"name\": \"my-mssql-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/\"\n        },\n        \"rotateAtUtc\": {\n            \"hours\": 0,\n            \"minutes\": 0\n        },\n        \"lastRotationMessage\": null,\n        \"type\": \"mssql-credentials\",\n        \"parameters\": {\n            \"username1\": \"infisical_user_1\",\n            \"username2\": \"infisical_user_2\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Humanitec Sync via API with cURL - Bash\nDESCRIPTION: This snippet demonstrates how to create a Humanitec Sync in Infisical using a cURL command to send a POST request to the Infisical API. It requires the project, connection, and configuration details like name, projectId, destination config, and sync options. The input parameters are sent as a JSON payload, and dependencies include access to Infisical Cloud, a valid Humanitec Connection, and configured secrets. The output will be a JSON response with the sync's details.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/humanitec.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl    --request POST \\\n--url https://app.infisical.com/api/v1/secret-syncs/humanitec \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-humanitec-sync\",\n    \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"description\": \"an example sync\",\n    \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n    \"environment\": \"dev\",\n    \"secretPath\": \"/my-secrets\",\n    \"isEnabled\": true,\n    \"syncOptions\": {\n        \"initialSyncBehavior\": \"overwrite-destination\"\n    },\n    \"destinationConfig\": {\n        \"scope\": \"application\",\n        \"app\": \"my-app\",\n        \"environment\": \"development\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Binding Token Reviewer to Auth Delegator Role\nDESCRIPTION: YAML configuration for binding the reviewer service account to the system:auth-delegator cluster role for authentication and authorization checks\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: infisical-token-reviewer-role-binding\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: infisical-token-reviewer\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Infisical CLI Global Options\nDESCRIPTION: Available global options for the Infisical CLI, including help, debug mode, domain configuration, and version information.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/commands.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Option            | Description                                     |\n| ----------------- | ----------------------------------------------- |\n| `--help`, `-h`    | List help for any command                       |\n| `--debug`, `-d`   | Enable verbose logging                          |\n| `--domain`        | Use to direct Infisical to a self-hosted domain |\n| `--version`, `-v` | Print version information and quit              |\n```\n\n----------------------------------------\n\nTITLE: Creating Project Template via API Request\nDESCRIPTION: API request to create a new project template with specified name, description, environments, and roles configurations.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/project-templates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://app.infisical.com/api/v1/project-templates \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\": \"my-project-template\",\n    \"description\": \"...\",\n    \"environments\": \"[...]\",\n    \"roles\": \"[...]\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI on Arch Linux\nDESCRIPTION: This command installs the Infisical CLI on Arch Linux using the yay package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ yay -S infisical-bin\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret for CA Certificate\nDESCRIPTION: Example of a Kubernetes Secret definition for storing a CA certificate.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: custom-ca-certificate\ntype: Opaque\nstringData:\n  ca.crt: |\n    -----BEGIN CERTIFICATE-----\n    MIIEZzCCA0+gAwIBAgIUDk9+HZcMHppiNy0TvoBg8/aMEqIwDQYJKoZIhvcNAQEL\n    ...\n    BQAwDTELMAkGA1UEChMCUEgwHhcNMjQxMDI1MTU0MjAzWhcNMjUxMDI1MjE0MjAz\n    -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Azure Auth Sequence Flow Diagram in Mermaid\nDESCRIPTION: A sequence diagram showing the authentication workflow between a client, Infisical, and Azure AD OpenID. It illustrates the four main steps: instance identity token retrieval, identity token login operation, token verification, and API access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/azure-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as Client\n  participant Infis as Infisical\n  participant Azure as Azure AD OpenID\n\n  Note over Client,Azure: Step 1: Instance Identity Token Retrieval\n  Client->>Azure: Request managed identity access token\n  Azure-->>Client: Return managed identity access token\n\n  Note over Client,Infis: Step 2: Identity Token Login Operation\n  Client->>Infis: Send managed identity access token to /api/v1/auth/azure-auth/login\n  Infis->>Azure: Request public key\n  Azure-->>Infis: Return public key\n\n  Note over Infis: Step 3: Identity Token Verification\n  Note over Infis: Step 4: Identity Property Validation\n  Infis->>Client: Return short-lived access token\n\n  Note over Client,Infis: Step 4: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Setting up azureAuth in InfisicalPushSecret CRD\nDESCRIPTION: This snippet illustrates how to configure Azure authentication in the InfisicalPushSecret CRD using a machine identity ID.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  authentication:\n    azureAuth:\n      identityId: <machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Reviewer JWT Token in Bash\nDESCRIPTION: This Bash command retrieves the JWT token from the created Secret and decodes it from base64 encoding.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret infisical-token-reviewer-token -n default -o=jsonpath='{.data.token}' | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Attaching Kubernetes Auth Identities\nDESCRIPTION: Specifies the OpenAPI details for a POST request to attach Kubernetes authentication identities. The endpoint is '/api/v1/auth/kubernetes-auth/identities/{identityId}'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/kubernetes-auth/attach.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPOST /api/v1/auth/kubernetes-auth/identities/{identityId}\n```\n\n----------------------------------------\n\nTITLE: Deploying Docker Stack with Infisical Agent\nDESCRIPTION: Command to deploy the Docker stack defined in the docker-compose.yaml file with the name 'agent-demo'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-swarm-with-agent.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker stack deploy -c docker-compose.yaml agent-demo\n```\n\n----------------------------------------\n\nTITLE: Inspecting Infisical Secret Status and Conditions\nDESCRIPTION: Example YAML output showing the status conditions of an InfisicalSecret resource, including token loading status and sync readiness state with error details.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl get infisicalSecrets\nNAME                     AGE\ninfisicalsecret-sample   12s\n\n$ kubectl describe infisicalSecret infisicalsecret-sample\n...\nSpec:\n...\nStatus:\n  Conditions:\n    Last Transition Time:  2022-12-18T04:29:09Z\n    Message:               Infisical controller has located the Infisical token in provided Kubernetes secret\n    Reason:                OK\n    Status:                True\n    Type:                  secrets.infisical.com/LoadedInfisicalToken\n    Last Transition Time:  2022-12-18T04:29:10Z\n    Message:               Failed to update secret because: 400 Bad Request\n    Reason:                Error\n    Status:                False\n    Type:                  secrets.infisical.com/ReadyToSyncSecrets\nEvents:                    <none>\n```\n\n----------------------------------------\n\nTITLE: OIDC Claims Access Format\nDESCRIPTION: Shows the syntax format for accessing OIDC claims in policies after they have been mapped.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/access-controls/abac/managing-machine-identity-attributes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ identity.auth.oidc.claims.<permission claim name> }}\n```\n\n----------------------------------------\n\nTITLE: Service Component Path\nDESCRIPTION: Path structure for service components in the project\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/how-to-create-a-feature.mdx#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/src/services\"\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Certificate Revocation (JSON)\nDESCRIPTION: This JSON object represents a sample successful response from the Infisical API after revoking a certificate. It confirms the action, provides the serial number of the revoked certificate, and the timestamp of revocation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  message: \"Successfully revoked certificate\",\n  serialNumber: \"...\",\n  revokedAt: \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Github OIDC Authentication Flow\nDESCRIPTION: A sequence diagram showing the interaction flow between Github Workflow, Identity Provider, and Infisical during OIDC authentication. It illustrates the five main steps: requesting identity token, login operation, query verification, JWT validation, and API access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/oidc-auth/github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as Github Workflow\n  participant Idp as Identity Provider\n  participant Infis as Infisical\n\n  Client->>Idp: Step 1: Request identity token\n  Idp-->>Client: Return JWT with verifiable claims\n\n  Note over Client,Infis: Step 2: Login Operation\n  Client->>Infis: Send signed JWT to /api/v1/auth/oidc-auth/login\n\n  Note over Infis,Idp: Step 3: Query verification\n  Infis->>Idp: Request JWT public key using OIDC Discovery\n  Idp-->>Infis: Return public key\n\n  Note over Infis: Step 4: JWT validation\n  Infis->>Client: Return short-lived access token\n\n  Note over Client,Infis: Step 5: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin for Vite TypeScript Project\nDESCRIPTION: This snippet demonstrates how to configure ESLint with the React plugin for a Vite TypeScript project. It sets the React version, adds the React plugin, and enables recommended rules for React and JSX runtime.\nSOURCE: https://github.com/infisical/infisical/blob/main/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Creating Vercel Sync - JSON\nDESCRIPTION: This JSON snippet is an example of a successful API response after creating a new Vercel Sync with Infisical. The response includes comprehensive sync metadata such as identifiers, current state, version, associated environment, sync status, and destination configuration. Consumers can extract IDs, sync status, and reference details from this object for further automation, monitoring, or UI rendering. Fields like syncOptions, destination, and connection parameters illustrate the resulting configuration state of the created sync.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/vercel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-vercel-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"vercel\",\n            \"name\": \"my-vercel-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"vercel\",\n        \"destinationConfig\": {\n            \"app\": \"prj_bz7zgHvQETPvJWc5tmIr0tGRH9kE\",\n            \"env\": \"preview\",\n            \"branch\": \"test\",\n            \"appName\": \"nextjs-boilerplate\",\n            \"teamId\": \"team_0d444b5088888dd257\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Auth Secret Key using OpenSSL\nDESCRIPTION: Command to generate a random 32-byte base64 string for the AUTH_SECRET environment variable used in self-hosted Infisical instances.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/auth0-oidc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating Humanitec Sync - JSON\nDESCRIPTION: This JSON snippet represents the typical API response returned when a Humanitec Sync is successfully created in Infisical. It contains detailed status information about the new sync, including IDs, versioning, associated project and connection, status fields, and the configuration of destination and sync options. Input is a POST request to the API, and the output is this structured sync object. No additional dependencies are required to parse this output, and it's suitable for automated integration or status tracking.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/secret-syncs/humanitec.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secretSync\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-humanitec-sync\",\n        \"description\": \"an example sync\",\n        \"isEnabled\": true,\n        \"version\": 1,\n        \"folderId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connectionId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"syncStatus\": \"succeeded\",\n        \"lastSyncJobId\": \"123\",\n        \"lastSyncMessage\": null,\n        \"lastSyncedAt\": \"2023-11-07T05:31:56Z\",\n        \"importStatus\": null,\n        \"lastImportJobId\": null,\n        \"lastImportMessage\": null,\n        \"lastImportedAt\": null,\n        \"removeStatus\": null,\n        \"lastRemoveJobId\": null,\n        \"lastRemoveMessage\": null,\n        \"lastRemovedAt\": null,\n        \"syncOptions\": {\n            \"initialSyncBehavior\": \"overwrite-destination\"\n        },\n        \"projectId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"connection\": {\n            \"app\": \"humanitec\",\n            \"name\": \"my-humanitec-connection\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"environment\": {\n            \"slug\": \"dev\",\n            \"name\": \"Development\",\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\"\n        },\n        \"folder\": {\n            \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n            \"path\": \"/my-secrets\"\n        },\n        \"destination\": \"humanitec\",\n        \"destinationConfig\": {\n            \"scope\": \"application\",\n            \"org\": \"my-organization\",\n            \"app\": \"my-app\",\n            \"env\": \"development\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Source Secret with kubectl\nDESCRIPTION: Command to apply the Kubernetes Secret containing the secrets to be pushed to Infisical. This needs to be done before applying the InfisicalPushSecret CRD.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f source-secret.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Secret for HSM Integration\nDESCRIPTION: Example Kubernetes Secret manifest containing the necessary environment variables for HSM integration, including paths, PIN, slot, and key label.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: infisical-secrets\ntype: Opaque\nstringData:\n  # ... Other environment variables ...\n  HSM_LIB_PATH: \"/hsm-client/libs/64/libCryptoki2.so\" # If you followed this guide, this will be the path of the Luna Cloud HSM client\n  HSM_PIN: \"<your-hsm-device-pin>\"\n  HSM_SLOT: \"<hsm-device-slot>\"\n  HSM_KEY_LABEL: \"<your-key-label>\"\n```\n\n----------------------------------------\n\nTITLE: Full Helm Values Example for Infisical\nDESCRIPTION: This comprehensive YAML example shows a complete Helm values configuration for Infisical, including settings for the application, ingress, PostgreSQL, and Redis.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/kubernetes-helm.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnameOverride: \"infisical\"\nfullnameOverride: \"infisical\"\n\ninfisical:\n  enabled: true\n  name: infisical\n  autoDatabaseSchemaMigration: true\n  fullnameOverride: \"\"\n  podAnnotations: {}\n  deploymentAnnotations: {}\n  replicaCount: 6\n\n  image:\n    repository: infisical/infisical\n    tag: \"v0.46.2-postgres\"\n    pullPolicy: IfNotPresent\n\n  affinity: {}\n  kubeSecretRef: \"infisical-secrets\"\n  service:\n    annotations: {}\n    type: ClusterIP\n    nodePort: \"\"\n\n  resources:\n    limits:\n      memory: 210Mi\n    requests:\n      cpu: 200m\n\ningress:\n  enabled: true\n  hostName: \"\"\n  ingressClassName: nginx\n  nginx:\n    enabled: true\n  annotations: {}\n  tls: []\n\npostgresql:\n  enabled: true\n  name: \"postgresql\"\n  fullnameOverride: \"postgresql\"\n  auth:\n    username: infisical\n    password: root\n    database: infisicalDB\n\nredis:\n  enabled: true\n  name: \"redis\"\n  fullnameOverride: \"redis\"\n  cluster:\n    enabled: false\n  usePassword: true\n  auth:\n    password: \"mysecretpassword\"\n  architecture: standalone\n```\n\n----------------------------------------\n\nTITLE: Checking Setup Pod Readiness\nDESCRIPTION: Command to wait for the setup pod to be ready before proceeding with file transfers.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl wait --for=condition=Ready pod/hsm-setup-pod --timeout=60s\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Listing CRLs (JSON)\nDESCRIPTION: This JSON array represents a sample successful response from the Infisical API when listing CRLs for a CA. Each object in the array contains the ID and the actual CRL data (likely base64 encoded PEM format, indicated by '...') for a specific CRL.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    id: \"...\",\n    crl: \"...\"\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Authentication Parameters in Markdown\nDESCRIPTION: This snippet defines the parameters required for integration authentication, specifically for AWS Secrets Manager. It uses a tabbed layout to separate different integration types and includes field definitions for each parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/integrations/create-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs>\n  <Tab title=\"AWS Secrets manager\">\n    <ParamField body=\"integration\" type=\"string\" initialValue=\"aws-secret-manager\" required>\n\t\t\t\tThis value must be **aws-secret-manager**.\n\t\t</ParamField>\n    <ParamField body=\"workspaceId\" type=\"string\" required>\n\t\t\t\tInfisical project id for the integration.\n\t\t</ParamField>\n    <ParamField body=\"accessId\" type=\"string\" required>\n\t\t\t\tThe AWS IAM User Access ID.\n\t\t</ParamField>\n    <ParamField body=\"accessToken\" type=\"string\" required>\n\t\t\t\tThe AWS IAM User Access Secret Key.\n\t\t</ParamField>\n  </Tab>\n  <Tab title=\"GCP Secrets manager\">\n    Coming Soon\n  </Tab>\n  <Tab title=\"Heroku\">\n\t\t\t\tComing Soon\n  </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hook\nDESCRIPTION: Command to install Infisical's pre-commit hook for automated secret scanning before commits.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan install --pre-commit-hook\n```\n\n----------------------------------------\n\nTITLE: Binding Token Reviewer to Auth Delegator Role in YAML\nDESCRIPTION: This YAML defines a ClusterRoleBinding that binds the 'infisical-token-reviewer' service account to the 'system:auth-delegator' cluster role, allowing it to perform delegated authentication and authorization checks.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: infisical-token-reviewer-role-binding\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: infisical-token-reviewer\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Deleting Integration with OpenAPI Specification\nDESCRIPTION: OpenAPI specification for the DELETE endpoint to remove an integration. It requires the integrationId as a path parameter to identify the integration to be deleted.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/integrations/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v1/integration/{integrationId}\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Agent\nDESCRIPTION: Command to start the Infisical agent with a specified configuration file.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ninfisical agent --config example-agent-config-file.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Secrets Store CSI Driver Logs via kubectl (Bash)\nDESCRIPTION: This command retrieves logs from a specific Secrets Store CSI driver pod (e.g., `csi-secrets-store-csi-driver-7h4jp`) running in the `kube-system` namespace. These logs help diagnose problems related to the CSI driver itself, such as volume mounting issues or communication problems with the provider plugin. The pod name and potentially the namespace need to be adjusted.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs csi-secrets-store-csi-driver-7h4jp -n=kube-system\n```\n\n----------------------------------------\n\nTITLE: Undeploying Kubernetes Operator from Cluster\nDESCRIPTION: This command removes the Kubernetes operator deployment from the cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Installing cert-manager via kubectl (Bash)\nDESCRIPTION: This command installs the cert-manager v1.15.3 into the Kubernetes cluster by applying its official manifest directly from GitHub. cert-manager is a prerequisite for using the Infisical PKI Issuer.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.yaml\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram - Kubernetes Auth Flow with Infisical\nDESCRIPTION: Illustrates the authentication workflow between a Kubernetes pod, Infisical service, and Kubernetes API Server. Shows the four main steps: JWT token retrieval, login operation, identity verification, and API access.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/kubernetes-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Pod as Pod\n  participant Infis as Infisical\n  participant KubernetesServer as K8s API Server\n\n  Note over Pod: Step 1: Service Account JWT Token Retrieval\n\n  Note over Pod,Infis: Step 2: JWT Token Login Operation\n  Pod->>Infis: Send JWT token to /api/v1/auth/kubernetes-auth/login\n  Infis->>KubernetesServer: Forward JWT token for validation\n    KubernetesServer-->>Infis: Return identity info for JWT\n\n  Note over Infis: Step 3: Identity Property Verification\n  Infis->>Pod: Return short-lived access token\n\n  Note over Pod,Infis: Step 4: Access Infisical API with Token\n  Pod->>Infis: Make authenticated requests using the short-lived access token\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for GitHub Secret Sync by Name in OpenAPI\nDESCRIPTION: Specifies an OpenAPI GET endpoint for retrieving GitHub secret sync information using a sync name parameter. The endpoint path includes a variable 'syncName' to identify the specific sync.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/github/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/github/sync-name/{syncName}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Retrieved Secret in C#\nDESCRIPTION: Demonstrates how to use the retrieved secret from Infisical to make authenticated HTTP requests to an API endpoint using HttpClient.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/microsoft-power-apps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var client = new HttpClient())\n{\n    client.DefaultRequestHeaders\n        .Accept\n        .Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n    client.DefaultRequestHeaders.Add(\"X-API-KEY\", secret);\n\n    var result = await client.GetAsync(apiEndpoint);\n    var resultContent = await result.Content.ReadAsStringAsync();\n    req.CreateResponse(HttpStatusCode.OK, resultContent);\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for AWS Connection Creation (Bash/JSON)\nDESCRIPTION: This Bash snippet shows a sample JSON response received after successfully creating an AWS application connection via the API. It includes details of the created connection like its unique 'id', 'name', 'version', 'orgId', creation/update timestamps, application type ('aws'), authentication 'method' ('access-key'), and the provided 'accessKeyId' (the secret key is typically omitted in responses for security).\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n                        {\n                            \"appConnection\": {\n                                \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n                                \"name\": \"my-aws-connection\",\n                                \"version\": 123,\n                                \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n                                \"createdAt\": \"2023-11-07T05:31:56Z\",\n                                \"updatedAt\": \"2023-11-07T05:31:56Z\",\n                                \"app\": \"aws\",\n                                \"method\": \"access-key\",\n                                \"credentials\": {\n                                    \"accessKeyId\": \"...\"\n                                }\n                            }\n                        }\n```\n\n----------------------------------------\n\nTITLE: Sample Response: KMS Key Creation with Infisical API in Bash\nDESCRIPTION: This snippet illustrates a typical JSON response returned by the Infisical KMS API after successfully creating a key. The output includes fields such as 'id', 'description', 'name', 'orgId', 'createdAt', 'updatedAt', and related key metadata. No dependencies are required to consume this JSON other than a successful API call. Keys such as 'isDisabled' and 'isReserved' provide operational context for the created key.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"key\": {\n        \"id\": \"<key-id>\",\n        \"description\": \"...\",\n        \"isDisabled\": false,\n        \"isReserved\": false,\n        \"orgId\": \"<org-id>\",\n        \"name\": \"my-secret-key\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"projectId\": \"<project-id>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting resyncInterval in InfisicalPushSecret CRD\nDESCRIPTION: These examples show how to set the resyncInterval field in the InfisicalPushSecret CRD. The resyncInterval defines the time between each resync operation, with various time units supported.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nresyncInterval: 5s # 10 seconds\nresyncInterval: 10s # 10 seconds\nresyncInterval: 5m # 5 minutes\nresyncInterval: 1h # 1 hour\nresyncInterval: 1d # 1 day\n```\n\n----------------------------------------\n\nTITLE: Domain Flag Example Usage\nDESCRIPTION: Example showing how to specify the Infisical instance domain URL using the --domain flag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical bootstrap --domain=https://your-infisical-instance.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Memberships for an Organization using OpenAPI\nDESCRIPTION: This OpenAPI specification defines the GET endpoint for retrieving user memberships within a specific organization. It requires the organizationId as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/organizations/memberships.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v2/organizations/{organizationId}/memberships\n```\n\n----------------------------------------\n\nTITLE: Starting and Enabling Infisical Service\nDESCRIPTION: These commands reload the systemd daemon, start the Infisical service, and enable it to start on boot.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl daemon-reload\n$ systemctl start infisical\n$ systemctl enable infisical\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript in Vite React Project\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions property in the ESLint configuration for a TypeScript React project using Vite. It specifies the project files and root directory for TypeScript configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Intermediate CA Certificate\nDESCRIPTION: API request to sign an intermediate certificate using the root CA and CSR.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://app.infisical.com/api/v1/pki/ca/<root-ca-id>/sign-intermediate' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"csr\": \"<csr>\",\n      \"notAfter\": \"2029-06-12\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Get Projects API Endpoint\nDESCRIPTION: API endpoint for retrieving all projects/workspaces belonging to a specific organization. Requires the organizationId parameter in the URL path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/organizations/workspaces.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v2/organizations/{organizationId}/workspaces\n```\n\n----------------------------------------\n\nTITLE: Starting Infisical with Docker Compose in Bash\nDESCRIPTION: Command to start Infisical and related services using Docker Compose.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-compose.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.prod.yml up\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Compose Installation in Bash\nDESCRIPTION: Command to check if Docker Compose is installed on the system.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-compose.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose\n```\n\n----------------------------------------\n\nTITLE: Listing CRLs for a CA via Infisical API (Bash/cURL)\nDESCRIPTION: This cURL command sends a GET request to the Infisical API endpoint to retrieve the Certificate Revocation Lists (CRLs) associated with a specific Certificate Authority (CA) identified by `<ca-id>`. It requires an Authorization bearer token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'https://app.infisical.com/api/v1/pki/ca/<ca-id>/crls' \\\n  --header 'Authorization: Bearer <access-token>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Systemd Service\nDESCRIPTION: This snippet shows the contents of the Infisical systemd service file, including service description, environment file, and execution details.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Infisical Service\nAfter=network.target\n\n[Service]\n# The path to the environment file we created in the previous step\nEnvironmentFile=/etc/infisical/environment\nType=simple\n# Change the user to the user you want to run Infisical as\nUser=root\nExecStart=/usr/local/bin/infisical-core\nRestart=always\nRestartSec=30\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Stack\nDESCRIPTION: Command to clean up by removing the deployed Docker stack named 'agent-demo'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-swarm-with-agent.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker stack rm agent-demo\n```\n\n----------------------------------------\n\nTITLE: Applying InfisicalDynamicSecret CRD\nDESCRIPTION: Command to apply the InfisicalDynamicSecret CRD configuration to a Kubernetes cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f dynamic-secret-crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Infisical Access Token API Response Example (Bash)\nDESCRIPTION: This snippet presents a sample JSON response from the Infisical authentication API after a successful AWS Auth login. The output includes the issued access token, its validity period in seconds, and the token type. No dependencies for the snippet itself; it's for reference of what to expect from the API.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/aws-auth.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"accessToken\": \"...\",\n    \"expiresIn\": 7200,\n    \"accessTokenMaxTTL\": 43244\n    \"tokenType\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Backstage Infisical Backend Plugin with Yarn\nDESCRIPTION: Command to install the Infisical backend plugin from the Backstage root directory using Yarn package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/external/backstage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# From your Backstage root directory\nyarn --cwd packages/backend add @infisical/backstage-backend-plugin-infisical\n```\n\n----------------------------------------\n\nTITLE: Configuring Gmail SMTP Environment Variables\nDESCRIPTION: This snippet shows the environment variable configuration for using Gmail as the SMTP provider for Infisical. Replace `SMTP_USERNAME`, `SMTP_PASSWORD`, and `SMTP_FROM_ADDRESS` with your Gmail email address and password. Note the requirement for enabling 'less secure app access' or using Google Workspace/Cloud Identity credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=smtp.gmail.com\nSMTP_USERNAME=hey@gmail.com # your email\nSMTP_PASSWORD=password # your password\nSMTP_PORT=587\nSMTP_FROM_ADDRESS=hey@gmail.com\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid SMTP Environment Variables\nDESCRIPTION: This snippet shows the environment variable settings required to configure Infisical's email service using Twilio SendGrid. Replace the placeholder values for `SMTP_PASSWORD` and `SMTP_FROM_ADDRESS` with your actual SendGrid API key and verified sending email address.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nSMTP_HOST=smtp.sendgrid.net\nSMTP_USERNAME=apikey\nSMTP_PASSWORD=SG.rqFsfjxYPiqE1lqZTgD_lz7x8IVLx # your SendGrid API Key from step above\nSMTP_PORT=587\nSMTP_FROM_ADDRESS=hey@example.com # your email address being used to send out emails\nSMTP_FROM_NAME=Infisical\n```\n\n----------------------------------------\n\nTITLE: Setting Project Version from Environment Variables\nDESCRIPTION: Gradle script that sets the project version based on a build number injected by Infisical, with a fallback default value.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/build-tools/gradle.mdx#2025-04-22_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nversion = System.getenv('BUILD_NUMBER') ?: '1.0.0-SNAPSHOT'\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical CLI in Debian/Ubuntu Dockerfile\nDESCRIPTION: This Dockerfile command installs the Infisical CLI on Debian or Ubuntu by updating packages, installing bash and curl, running the Debian setup script, and installing the Infisical package.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y bash curl && curl -1sLf \\\n  'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | bash \\\n  && apt-get update && apt-get install -y infisical\n```\n\n----------------------------------------\n\nTITLE: Secret Template Definition\nDESCRIPTION: Template file that defines how secrets should be rendered, using the secret function to fetch and format secrets with key-value pairs separated by equals sign.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n{{- with secret \"6553ccb2b7da580d7f6e7260\" \"dev\" \"/\" }}\n{{- range . }}\n{{ .Key }}={{ .Value }}\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Command Handler Implementation in Rust\nDESCRIPTION: Implementation of the command handler showing how different commands are matched and executed.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nmatch cmd {\n    Command::GetSecret(req) => self.0.secrets().get(&req).await.into_string(),\n    Command::ListSecrets(req) => self.0.secrets().list(&req).await.into_string(),\n    Command::UpdateSecret(req) => self.0.secrets().update(&req).await.into_string(),\n    Command::DeleteSecret(req) => self.0.secrets().delete(&req).await.into_string(),\n    Command::CreateSecret(req) => self.0.secrets().create(&req).await.into_string(),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Updating Integration in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a PATCH endpoint used to update an existing integration. It specifies the HTTP method, path, and includes the integrationId parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/integrations/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"PATCH /api/v1/integration/{integrationId}\"\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Command to install Express and the Infisical SDK dependencies.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/node.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install express @infisical/sdk\n```\n\n----------------------------------------\n\nTITLE: Markdown Card Group Component\nDESCRIPTION: A markdown component structure using CardGroup and Card elements to display navigation options for ABAC documentation sections.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/access-controls/abac/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"Users\" icon=\"square-1\" href=\"./managing-user-metadata\">\n    Manage user metadata manually or automatically via SAML logins.  \n  </Card>\n  <Card title=\"Machine Identities\" icon=\"square-2\" href=\"./managing-machine-identity-attributes\">\n   Set metadata manually like users and access additional attributes provided during machine authentication (for example, OIDC claims).\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: API Response from CA Renewal\nDESCRIPTION: This is the response from the API when a CA renewal is successful. It returns the new certificate, certificate chain, and serial number.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/private-ca.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{\n  certificate: \"...\",\n  certificateChain: \"...\",\n  serialNumber: \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Ignore Patterns with .infisicalignore\nDESCRIPTION: Shows the structure of a .infisicalignore file used to exclude specific secret findings from scans. Each line contains a fingerprint, file path, and secret type to ignore in the format fingerprint:filepath:secret-type:line.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-scanning.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ignore\nCODE:\n```\nbea0ff6e05a4de73a5db625d4ae181a015b50855:frontend/components/utilities/attemptLogin.js:stripe-access-token:147\nbea0ff6e05a4de73a5db625d4ae181a015b50855:backend/src/json/integrations.json:generic-api-key:5\n1961b92340e5d2613acae528b886c842427ce5d0:frontend/components/utilities/attemptLogin.js:stripe-access-token:148\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Secret Creation (Bash)\nDESCRIPTION: This command checks if the Kubernetes Secret specified in the `Certificate` resource (`certificate-by-issuer`) has been created successfully. The example output confirms the secret exists, is of type `kubernetes.io/tls`, and contains data (certificate and key). Replace `<namespace_of_your_certificate>`.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret certificate-by-issuer -n <namespace_of_your_certificate>\n```\n\nLANGUAGE: bash\nCODE:\n```\nNAME                    TYPE                DATA   AGE\ncertificate-by-issuer   kubernetes.io/tls   2      26h\n```\n\n----------------------------------------\n\nTITLE: Creating HSM Client Directory in Docker\nDESCRIPTION: Command to create a directory for storing HSM client files in Docker environment\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /etc/luna-docker\n```\n\n----------------------------------------\n\nTITLE: Deleting KMS Keys in Infisical using Go SDK\nDESCRIPTION: Deletes an existing KMS key using the key ID. Returns the details of the deleted key including its metadata.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/go.mdx#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ndeletedKey, err = client.Kms().Keys().Delete(infisical.KmsDeleteKeyOptions{\n\t\tKeyId: \"<key-id>\",\n\t})\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm on Manager Node\nDESCRIPTION: This command initializes a Docker Swarm on the designated manager node. It generates a join token for worker nodes to join the swarm.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-swarm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm init\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Data Encryption via Infisical KMS API in Bash\nDESCRIPTION: This snippet shows the JSON response from Infisical KMS after a successful encryption operation. It contains the 'ciphertext' key representing the base64 encoded ciphertext of the supplied data. This output is typically consumed programmatically for subsequent decryption or storage. The response format is straightforward, but always ensure base64 encoding alignment between input and output.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"ciphertext\": \"HwFHwSFHwlMF6TOfp==\" // base64 encoded ciphertext\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App with Environment Variables - TypeScript\nDESCRIPTION: TypeScript implementation of _app.tsx file that logs environment variable to console\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/nextjs-vercel.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n    console.log('Hello, ', process.env.NEXT_PUBLIC_NAME);\n    return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Backstage Infisical Frontend Plugin with Yarn\nDESCRIPTION: Command to install the Infisical frontend plugin from the Backstage root directory using Yarn package manager.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/external/backstage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From your Backstage root directory\nyarn --cwd packages/app add @infisical/backstage-plugin-infisical\n```\n\n----------------------------------------\n\nTITLE: Example LDAP Server URL Configuration\nDESCRIPTION: Example formats for LDAP server URLs including standard LDAP and LDAPS (SSL/TLS) connections.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ldap/general.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nldap://ldap.your-org.com\nldaps://ldap.myorg.com:636\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for GCP Identity Retrieval\nDESCRIPTION: OpenAPI specification for retrieving GCP authentication identity information through a GET request. The endpoint accepts an identity ID as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/gcp-auth/retrieve.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/auth/gcp-auth/identities/{identityId}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Helm Release Resources\nDESCRIPTION: Command to get all resources associated with the Infisical Helm release in the specified namespace.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/infisical-standalone-postgres/templates/NOTES.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm get all -n {{ .Release.Namespace }} {{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: Generating AUTH_SECRET Value using OpenSSL (Shell)\nDESCRIPTION: Provides a shell command using OpenSSL to generate a cryptographically secure 32-byte base64 encoded random string. This generated string is suitable for use as the `AUTH_SECRET` environment variable required for securing JWTs in self-hosted Infisical instances when configuring SAML SSO.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/azure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Verifying Infisical PKI Issuer Creation (Bash)\nDESCRIPTION: This command checks the status of the Infisical PKI `Issuer` resources within the specified namespace. The example output shows a successfully created issuer named `issuer-infisical`. Replace `<namespace_of_issuer>` with the actual namespace.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get issuers.infisical-issuer.infisical.com -n <namespace_of_issuer> -o wide\n```\n\nLANGUAGE: bash\nCODE:\n```\nNAME               AGE\nissuer-infisical   21h\n```\n\n----------------------------------------\n\nTITLE: GetSecretByName Template Usage\nDESCRIPTION: Example template demonstrating how to use the getSecretByName function to retrieve and render a single secret by its name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/infisical-agent.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{{ with getSecretByName \"d821f21d-aa90-453b-8448-8c78c1160a0e\" \"dev\" \"/\" \"POSTHOG_HOST\"}}\n{{ if .Value }}\npassword = \"{{ .Value }}\"\n{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Command Enum Definition in Rust\nDESCRIPTION: Definition of the Command enum used to handle different SDK operations with their respective input types.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse schemars::JsonSchema;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, JsonSchema, Debug)]\n#[serde(rename_all = \"camelCase\", deny_unknown_fields)]\npub enum Command {\n    GetSecret(GetSecretOptions),\n    ListSecrets(ListSecretsOptions),\n    CreateSecret(CreateSecretOptions),\n    UpdateSecret(UpdateSecretOptions),\n    DeleteSecret(DeleteSecretOptions),\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PATCH Endpoint for Folder Updates\nDESCRIPTION: OpenAPI specification for the folder update endpoint that accepts PATCH requests. The endpoint uses a folder ID parameter to identify which folder to update.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/folders/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v1/folders/{folderId}\n```\n\n----------------------------------------\n\nTITLE: Complete Deployment Using env with ConfigMap\nDESCRIPTION: Full example of a Kubernetes deployment that references individual keys from a managed ConfigMap.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.14.2\n          env:\n            - name: STRIPE_API_SECRET\n              valueFrom:\n                configMapKeyRef:\n                  name: managed-configmap # <- name of managed configmap\n                  key: STRIPE_API_SECRET\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Getting Postgres Connection by ID Endpoint Definition\nDESCRIPTION: OpenAPI endpoint specification for retrieving Postgres connection details using a GET request to /api/v1/app-connections/postgres/{connectionId}.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/postgres/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/postgres/{connectionId}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Host with SSH\nDESCRIPTION: This command establishes an SSH connection to a remote host using the username and hostname. The SSH certificate loaded into the agent will be used for authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh username@hostname\n```\n\n----------------------------------------\n\nTITLE: Deleting Temporary Setup Pod\nDESCRIPTION: Command to delete the temporary pod after successfully transferring HSM client files to the PVC.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod hsm-setup-pod\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub App Connection by ID - OpenAPI GET Endpoint\nDESCRIPTION: OpenAPI specification for a GET endpoint that retrieves GitHub app connection details using a connection ID parameter. The endpoint path follows the pattern /api/v1/app-connections/github/{connectionId}.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/github/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/github/{connectionId}\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Version in Helm Values\nDESCRIPTION: This YAML snippet shows how to set the Infisical docker image version in the Helm values file. It's important to specify a version rather than using 'latest' for stability in production.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/kubernetes-helm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninfisical:\n  image:\n    repository: infisical/infisical\n    tag: \"v0.46.2-postgres\" #<-- update\n    pullPolicy: IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application with TypeScript\nDESCRIPTION: Command to initialize a new Next.js application using create-next-app with TypeScript configuration\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/nextjs-vercel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpx create-next-app@latest --ts --use-npm infisical-nextjs\ncd infisical-nextjs\n```\n\n----------------------------------------\n\nTITLE: Running Infisical on Linux/macOS\nDESCRIPTION: Command to clone the Infisical repository, set up environment files, and start the application using Docker Compose on Linux/macOS systems.\nSOURCE: https://github.com/infisical/infisical/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/Infisical/infisical && cd \"$(basename $_ .git)\" && cp .env.example .env && docker compose -f docker-compose.prod.yml up\n```\n\n----------------------------------------\n\nTITLE: Creating Infisical Secret Resources in Kubernetes\nDESCRIPTION: Commands to create a Kubernetes secret for the Infisical token and an InfisicalSecret resource for synchronizing secrets from Infisical to a managed Kubernetes secret.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/secrets-operator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Create the tokenSecretReference (replace with your own token)\nkubectl create secret generic infisical-example-service-token \\\n  --from-literal=infisicalToken=\"<infisical-token-here>\"\n\n# Create the InfisicalSecret\ncat <<EOF | kubectl apply -f -\napiVersion: secrets.infisical.com/v1alpha1\nkind: InfisicalSecret\nmetadata:\n  # Name of of this InfisicalSecret resource\n  name: infisicalsecret-example\nspec:\n  # The host that should be used to pull secrets from. The default value is https://app.infisical.com/api.\n  hostAPI: https://app.infisical.com/api\n\n  # The Kubernetes secret the stores the Infisical token\n  tokenSecretReference:\n    # Kubernetes secret name\n    secretName: infisical-example-service-token\n    # The secret namespace\n    secretNamespace: default\n\n  # The Kubernetes secret that Infisical Operator will create and populate with secrets from the above project\n  managedSecretReference:\n    # The name of managed Kubernetes secret that should be created\n    secretName: infisical-managed-secret\n    # The namespace the managed secret should be installed in\n    secretNamespace: default\nEOF\n```\n\n----------------------------------------\n\nTITLE: GET Workspace Integrations Endpoint\nDESCRIPTION: OpenAPI endpoint specification for retrieving project integrations for a specific workspace. The endpoint accepts a workspaceId parameter in the URL path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/integrations/list-project-integrations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/workspace/{workspaceId}/integrations\n```\n\n----------------------------------------\n\nTITLE: Reload SSH Daemon\nDESCRIPTION: Command to reload the SSH daemon after configuration changes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload sshd\n```\n\n----------------------------------------\n\nTITLE: Revoking Access Token via API Endpoint\nDESCRIPTION: OpenAPI route specification for token revocation endpoint. Accepts POST requests to /api/v1/auth/token/revoke to invalidate existing access tokens.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/universal-auth/revoke-access-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPOST /api/v1/auth/token/revoke\n```\n\n----------------------------------------\n\nTITLE: Fetching AWS Token from Environment Variables in Go\nDESCRIPTION: This snippet demonstrates how to securely retrieve an AWS token from environment variables using os.Getenv(). This is considered a safer approach for handling sensitive credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/cli/testdata/expected/git/small-branch-foo.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\t// seems safer\n\taws_token := os.Getenv(\"AWS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Obtaining Universal Auth Token with Infisical CLI\nDESCRIPTION: Command to login with universal auth method, obtain an access token, and set it as INFISICAL_TOKEN environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-pass-envs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=<your-client-id> --client-secret=<your-client-secret> --silent --plain)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Infisical Operator via Helm\nDESCRIPTION: Command to uninstall the Infisical operator using Helm, noting that managed secrets will not be deleted during uninstallation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/overview.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall <release name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Automated Redis Backups via Kubernetes CronJob - YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes CronJob that regularly backs up a Redis instance managed by Bitnami. It runs hourly, executes the Redis SAVE command to persist data to RDB, and uploads the resulting dump to external object storage using the mc CLI. Dependencies: Kubernetes cluster, an existing Redis instance with persistent storage PVC named redis-data, environment variable REDIS_PASSWORD, and access to object-store via mc. Inputs include the schedule and storage credentials; outputs are persisted RDB backup files in object storage. Intended for administrators to automate regular Redis backups within the Kubernetes ecosystem.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/on-prem-k8s-ha.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: CronJob\nmetadata:\nname: redis-backup\nspec:\nschedule: \"0 * * * *\"  # Every hour\njobTemplate:\n    spec:\n    template:\n        spec:\n        containers:\n        - name: redis-backup\n            image: bitnami/redis\n            command:\n            - /bin/sh\n            - -c\n            - |\n            redis-cli -a $REDIS_PASSWORD save\n            mc cp /data/dump.rdb object-store/redis-backups/\n        volumes:\n        - name: redis-data\n            persistentVolumeClaim:\n            claimName: redis-data\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel\nDESCRIPTION: Redis Sentinel configuration for monitoring and automatic failover of Redis nodes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_7\n\nLANGUAGE: conf\nCODE:\n```\nport 26379\nsentinel monitor mymaster 52.1.0.9 6379 2\nsentinel auth-pass mymaster \"your_redis_password\"\nsentinel down-after-milliseconds mymaster 5000\nsentinel failover-timeout mymaster 60000\nsentinel parallel-syncs mymaster 1\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Vercel App Connection Availability Check in OpenAPI\nDESCRIPTION: This OpenAPI specification defines a GET endpoint to check the availability of Vercel app connections. The endpoint is '/api/v1/app-connections/vercel/available'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/vercel/available.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/vercel/available\n```\n\n----------------------------------------\n\nTITLE: Retrieving MSSQL Credentials Rotation - OpenAPI Endpoint\nDESCRIPTION: REST API endpoint specification for getting MSSQL credentials rotation details by ID. Uses GET method to fetch rotation information for a specific rotationId.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-rotations/mssql-credentials/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v2/secret-rotations/mssql-credentials/{rotationId}\n```\n\n----------------------------------------\n\nTITLE: CA Update OpenAPI Endpoint Definition\nDESCRIPTION: Defines the OpenAPI specification for the CA update endpoint. This endpoint uses PATCH method on /api/v1/pki/ca/{caId} path to update an existing Certificate Authority.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/certificate-authorities/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Update\"\nopenapi: \"PATCH /api/v1/pki/ca/{caId}\"\n---\n```\n\n----------------------------------------\n\nTITLE: Dynamic Secret Setup Instructions\nDESCRIPTION: Markdown documentation detailing the process of setting up dynamic secrets with Azure Entra ID, including parameter configuration and secret generation steps.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/azure-entra-id.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Set up Dynamic Secrets with Azure Entra ID\n\n<Steps>\n  <Step title=\"Open Secret Overview Dashboard\">\n\tOpen the Secret Overview dashboard and select the environment in which you would like to add a dynamic secret.\n  </Step>\n...\n```\n\n----------------------------------------\n\nTITLE: Applying Secret Changes\nDESCRIPTION: Command to apply the updated Kubernetes Secret with HSM configuration settings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./secret-file-name.yaml\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET Postgres App Connection Availability Endpoint\nDESCRIPTION: YAML snippet defining the OpenAPI specification for the GET endpoint to check Postgres app connection availability. It specifies the title and the HTTP method with path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/postgres/available.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Available\"\nopenapi: \"GET /api/v1/app-connections/postgres/available\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Node Settings\nDESCRIPTION: YAML configuration for Etcd node setup including cluster membership and networking parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: etcd1\ndata-dir: /var/lib/etcd\ninitial-cluster-state: new\ninitial-cluster-token: etcd-cluster-1\ninitial-cluster: etcd1=http://52.1.0.3:2380,etcd2=http://52.1.0.4:2380,etcd3=http://52.1.0.5:2380\ninitial-advertise-peer-urls: http://52.1.0.3:2380\nlisten-peer-urls: http://52.1.0.3:2380\nlisten-client-urls: http://52.1.0.3:2379,http://127.0.0.1:2379\nadvertise-client-urls: http://52.1.0.3:2379\n```\n\n----------------------------------------\n\nTITLE: Generating Random Base64 String using OpenSSL (Shell)\nDESCRIPTION: This shell command uses OpenSSL to generate a cryptographically secure 32-byte random string encoded in Base64. This is typically used to create a secret key, such as the `AUTH_SECRET` environment variable required for self-hosted Infisical instances when configuring SAML SSO.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/keycloak-saml.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rand -base64\n32\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifests\nDESCRIPTION: This command generates Kubernetes manifests such as Custom Resources (CRs) or Custom Resource Definitions (CRDs) after modifying API definitions.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake manifests\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Updating Kubernetes Auth Identity in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the PATCH endpoint used to update a Kubernetes authentication identity. It specifies the HTTP method, path, and includes the identity ID as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/kubernetes-auth/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"PATCH /api/v1/auth/kubernetes-auth/identities/{identityId}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions on SSH Host Certificate\nDESCRIPTION: This command sets the appropriate permissions (0640) on the host certificate file, restricting access to the file owner and group.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod 0640 /etc/ssh/ssh_host_key-cert.pub\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Page with MDX Components\nDESCRIPTION: MDX documentation page structure showing deployment options for Infisical using Card and CardGroup components. The page includes sections for Docker, Docker Compose, and Kubernetes deployments, with commented out sections for native deployments.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"\"\nsidebarTitle: \"Introduction\"\ndescription: \"Learn how to self-host Infisical on your own infrastructure.\"\n---\n\nSelf-hosting Infisical lets you retain data on your own infrastructure and network.\nChoose from a number of deployment options listed below to get started.\n\n<Card\n  title=\"Docker\"\n  color=\"#000000\"\n  icon=\"docker\"\n  href=\"deployment-options/standalone-infisical\"\n>\n  Use the fully packaged docker image to deploy Infisical anywhere.\n</Card>\n<CardGroup cols={2}>\n  <Card\n    title=\"Docker Compose\"\n    color=\"#000000\"\n    icon=\"docker\"\n    href=\"deployment-options/docker-compose\"\n  >\n    Install Infisical using our Docker Compose template.\n  </Card>\n  <Card\n    title=\"Kubernetes\"\n    color=\"#000000\"\n    icon=\"gear-complex-code\"\n    href=\"deployment-options/kubernetes-helm\"\n  >\n  Use our Helm chart to Install Infisical on your Kubernetes cluster.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating HSM Client Directory in Kubernetes\nDESCRIPTION: Command to create a directory for storing HSM client files in Kubernetes environment\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /etc/hsm-client\n```\n\n----------------------------------------\n\nTITLE: Joining Docker Swarm as Worker Node\nDESCRIPTION: This command is used by worker nodes to join the Docker Swarm. It requires the join token and manager node IP address provided during swarm initialization.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-swarm.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join --token <JOIN_TOKEN> <MANAGER_NODE_IP>:2377\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for MongoDB and PostgreSQL\nDESCRIPTION: This YAML configuration sets up local instances of MongoDB and PostgreSQL using Docker Compose. It defines services, environment variables, ports, and volumes for both databases.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.1'\n\nservices:\n  mongodb:\n    image: mongo\n    restart: always\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n\n  postgres:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: example\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  mongodb_data:\n  postgres_data:\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Resources in Kubernetes\nDESCRIPTION: This command applies the custom resource definitions from the config/samples/ directory to the Kubernetes cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f config/samples/\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpine Linux Docker Build with Retry Mechanism\nDESCRIPTION: A Dockerfile configuration that implements a retry mechanism and fallback mirrors for Alpine Linux package installations. It includes version pinning, multiple mirror support, and health checks for the Infisical platform backend.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/getting-started/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Pin Alpine version from list: https://dl-cdn.alpinelinux.org/alpine/\nARG ALPINE_VERSION=3.17\nARG ALPINE_APPEND=v3.17/main\n\n# Specify number of retries for each mirror\nARG MAX_RETRIES=3\n\n# Define base Alpine mirror URLs in attempt order from list: https://dl-cdn.alpinelinux.org/alpine/MIRRORS.txt\nARG BASE_ALPINE_MIRRORS=\"https://dl-cdn.alpinelinux.org/alpine https://ftp.halifax.rwth-aachen.de/alpine https://uk.alpinelinux.org/alpine\"\n\n# Build stage\n# Add the Alpine version arg\nFROM node:16-alpine$ALPINE_VERSION AS build\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only-production\n\nCOPY . .\nRUN npm run build\n\n# Production stage\n# Add the Alpine version arg\nFROM node:16-alpine$ALPINE_VERSION\n\nWORKDIR /app\n\nENV npm_config_cache /home/node/.npm\n\nCOPY package*.json ./\nRUN npm ci --only-production\n\nCOPY --from=build /app .\n\n# Add retry mechanism and loop through the specified mirrors\nRUN retries_left=$MAX_RETRIES; \\\n    for mirror in $ALPINE_MIRRORS; do \\\n        full_mirror=\"$mirror/$ALPINE_APPEND\"; \\\n        echo \"Trying mirror: $full_mirror\"; \\\n        echo >>/etc/apk/repositories \"$full_mirror\"; \\\n        for i in $(seq $retries_left); do \\\n            echo \"Retrying... Attempt $i (Retries Left: $((retries_left - i)))\"; \\\n            if apk add --no-cache bash curl git && \\\n               curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' | bash && \\\n               apk add --no-cache infisical=0.8.1; then \\\n                break; \\\n            fi; \\\n            sleep 10; \\\n        done; \\\n        if [ $? -eq 0 ]; then \\\n            break; \\\n        fi; \\\n    done\n\nHEALTHCHECK --interval=10s --timeout=3s --start-period=10s \\  \n  CMD node healthcheck.js\n\nEXPOSE 4000\n\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Email Domain List - Plain Text\nDESCRIPTION: A text file containing one email domain per line, organized alphabetically. The domains appear to be predominantly used for temporary email services, spam operations, or disposable email addresses.\nSOURCE: https://github.com/infisical/infisical/blob/main/backend/src/lib/validator/disposable_emails.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nindomaed.pw\nindomina.cf\nindoserver.stream\nindosukses.press\nineec.net\ninfocom.zp.ua\ninggo.org\ninkomail.com\ninmynetwork.tk\ninoutmail.de\ninoutmail.eu\ninoutmail.info\ninoutmail.net\ninpwa.com\ninsanumingeniumhomebrew.com\ninsorg-mail.info\ninstaddr.ch\ninstance-email.com\ninstant-mail.de\ninstantblingmail.info\ninstantemailaddress.com\ninstantmail.fr\ninternet-v-stavropole.ru\ninternetoftags.com\ninterstats.org\nintersteller.com\nintopwa.com\nintopwa.net\nintopwa.org\ninvestore.co\niozak.com\nip4.pp.ua\nip6.li\nip6.pp.ua\nipoo.org\nippandansei.tk\nipsur.org\nirabops.com\nirc.so\nirish2me.com\nirishspringrealty.com\niroid.com\nironiebehindert.de\nirssi.tv\nis.af\nisdaq.com\nishop2k.com\nisosq.com\nistii.ro\nisukrainestillacountry.com\nit7.ovh\nitaly-mail.com\nitcompu.com\nitfast.net\nitunesgiftcodegenerator.com\niubridge.com\niuemail.men\niwi.net\nixaks.com\nixx.io\nj-p.us\njafps.com\njajxz.com\njanproz.com\njaqis.com\njdmadventures.com\njdz.ro\nje-recycle.info\njellow.ml\njihorumon.info\njosse.ltd\njourrapide.com\njpco.org\njsrsolutions.com\njumonji.tk\njungkamushukum.com\njunk.to\njunk1e.com\njunkmail.ga\njunkmail.gq\njust-email.com\njustemail.ml\njuyouxi.com\njwork.ru\nkademen.com\nkadokawa.cf\nkadokawa.ga\nkadokawa.gq\nkadokawa.ml\nkadokawa.tk\nkaengu.ru\nkagi.be\nkakadua.net\nkalapi.org\nkamen-market.ru\nkamsg.com\nkaovo.com\nkappala.info\nkara-turk.net\nkaratraman.ml\nkariplan.com\nkarta-kykyruza.ru\nkartvelo.com\nkasmail.com\nkaspop.com\nkatztube.com\nkazelink.ml\nkbox.li\nkcrw.de\nkeepmymail.com\nkeinhirn.de\nkeipino.de\nkekita.com\nkellychibale-researchgroup-uct.com\nkemptvillebaseball.com\nkennedy808.com\nkiani.com\nkillmail.com\nkillmail.net\nkimsdisk.com\nkingsq.ga\nkino-100.ru\nkiois.com\nkismail.ru\nkisstwink.com\nkitnastar.com\nkjkszpjcompany.com\nkkmail.be\nkksm.be\nklassmaster.com\nklassmaster.net\nklick-tipp.us\nklipschx12.com\nkloap.com\nkludgemush.com\nklzlk.com\nkmail.li\nkmhow.com\nknol-power.nl\nkobrandly.com\nkommunity.biz\nkon42.com\nkonultant-jurist.ru\nkook.ml\nkopagas.com\nkopaka.net\nkorona-nedvizhimosti.ru\nkoshu.ru\nkosmetik-obatkuat.com\nkostenlosemailadresse.de\nkoszmail.pl\nkpay.be\nkpooa.com\nkpost.be\nkrd.ag\nkrsw.tk\nkruay.com\nkrypton.tk\nksmtrck.tk\nkuhrap.com\nkulmeo.com\nkulturbetrieb.info\nkurzepost.de\nkutakbisajauhjauh.gq\nkvhrr.com\nkvhrs.com\nkvhrw.com\nkwift.net\nkwilco.net\nkyal.pl\nkyois.com\nkzccv.com\nl-c-a.us\nl33r.eu\nl6factors.com\nlabetteraverouge.at\nlabworld.org\nlacedmail.com\nlackmail.net\nlackmail.ru\nlacto.info\nlags.us\nlain.ch\nlak.pp.ua\nlakelivingstonrealestate.com\nlakqs.com\nlamasticots.com\nlandmail.co\nlaoeq.com\nlarisia.com\nlarland.com\nlast-chance.pro\nlastmail.co\nlastmail.com\nlawlita.com\nlazyinbox.com\nlazyinbox.us\nldaho.biz\nldop.com\nldtp.com\nle-tim.ru\nlee.mx\nleeching.net\nleetmail.co\nlegalrc.loan\nlellno.gq\nlenovog4.com\nlerbhe.com\nletmeinonthis.com\nletthemeatspam.com\nlez.se\nlgxscreen.com\nlhsdv.com\nliamcyrus.com\nlifebyfood.com\nlifetimefriends.info\nlifetotech.com\nligsb.com\nlillemap.net\nlilo.me\nlindenbaumjapan.com\nlink2mail.net\nlinkedintu\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine on Nodes\nDESCRIPTION: This command downloads and executes the Docker installation script on each node in the cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/docker-swarm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Update Secret Import API Specification\nDESCRIPTION: OpenAPI specification for the PATCH endpoint that updates secret imports by their ID. The endpoint path is /api/v1/secret-imports/{secretImportId}.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-imports/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v1/secret-imports/{secretImportId}\n```\n\n----------------------------------------\n\nTITLE: Update PostgreSQL Connection PATCH Endpoint\nDESCRIPTION: HTTP PATCH endpoint definition for updating an existing PostgreSQL connection configuration. The endpoint path includes a connectionId parameter to identify which connection to update.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/postgres/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/v1/app-connections/postgres/{connectionId}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Permissions for ElastiCache Dynamic Secrets\nDESCRIPTION: JSON policy document defining the required AWS IAM permissions for managing ElastiCache users and user groups. These permissions allow for creating, modifying, and deleting users, as well as managing replication groups.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/dynamic-secrets/aws-elasticache.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"elasticache:DescribeUsers\",\n        \"elasticache:ModifyUser\",\n        \"elasticache:CreateUser\",\n        \"elasticache:CreateUserGroup\",\n        \"elasticache:DeleteUser\",\n        \"elasticache:DescribeReplicationGroups\",\n        \"elasticache:DescribeUserGroups\",\n        \"elasticache:ModifyReplicationGroup\",\n        \"elasticache:ModifyUserGroup\"\n      ],\n      \"Resource\": \"arn:aws:elasticache:<region>:<account-id>:user:*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for PKI Alert Removal in OpenAPI\nDESCRIPTION: Specifies the OpenAPI path and HTTP method for deleting a PKI alert. The endpoint uses a path parameter 'alertId' to identify the specific alert to be deleted.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/pki-alerts/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v1/pki/alerts/{alertId}\n```\n\n----------------------------------------\n\nTITLE: GET Terraform Cloud Sync by Name Endpoint\nDESCRIPTION: OpenAPI specification for retrieving Terraform Cloud sync configuration using the sync name as a path parameter. The endpoint follows the pattern '/api/v1/secret-syncs/terraform-cloud/sync-name/{syncName}'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/terraform-cloud/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/terraform-cloud/sync-name/{syncName}\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Secret with OpenSSL\nDESCRIPTION: Command to generate a random 32 byte base64 string for the AUTH_SECRET environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: SSH Authentication Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the workflow between Client, Infisical SSH CA, and Remote Host for SSH certificate authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as Client\n  participant Infisical as Infisical (SSH CA)\n  participant Host as Remote Host\n\n  Note over Client,Client: Step 1: Client Authentication with Infisical\n  Client->>Infisical: Send credential(s) to authenticate with Infisical\n\n  Infisical-->>Client: Return access token\n\n  Note over Client,Infisical: Step 2: SSH Certificate Request\n  Client->>Infisical: Make authenticated request for SSH certificate via either /api/v1/ssh/issue or /api/v1/ssh/sign\n\n  Infisical-->>Client: Return signed SSH certificate (and optionally key pair)\n\n  Note over Client,Client: Step 3: SSH Operation\n  Client->>Host: SSH into Host using the SSH certificate\n\n  Host-->>Client: Grant access to the host\n```\n\n----------------------------------------\n\nTITLE: Specifying a Self-Hosted Infisical API Endpoint via Bash (hostAPI Example)\nDESCRIPTION: Demonstrates the format for specifying a self-hosted Infisical backend's service address for secure internal communication in the Kubernetes cluster. This example should be adapted with actual backend service name and namespace. The endpoint is used as the 'hostAPI' value in the InfisicalSecret specification to control where secrets are fetched from during synchronization.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-secret-crd.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttp://<backend-svc-name>.<namespace>.svc.cluster.local:4000/api\n```\n\n----------------------------------------\n\nTITLE: Building New Bindings and SDK Artifacts - Node.js, Console\nDESCRIPTION: This snippet shows the required shell commands to install dependencies and build the Node.js SDK after adding a new command. Running 'npm install' installs necessary packages, and 'npm run build' compiles the SDK and executes scripts to generate native bindings (from 'infisical-napi'), ensuring the Node.js SDK can access updated functionality. Prerequisites include a Node.js development environment and an updated codebase. Inputs are shell commands, and outputs consist of built bindings ready to be consumed by the Node.js SDK.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ npm install\\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Updating Project in Infisical API (YAML)\nDESCRIPTION: This YAML snippet specifies the OpenAPI details for the PATCH endpoint used to update a project (workspace) in Infisical. It includes the HTTP method and the path with a workspace ID parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/workspaces/update-workspace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Update Project\"\nopenapi: \"PATCH /api/v1/workspace/{workspaceId}\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Against CRL Distribution Point using OpenSSL (Bash)\nDESCRIPTION: This command uses OpenSSL to verify a certificate (`cert.pem`) by checking the CRL distribution point specified within the certificate itself. The `-crl_check` flag enables CRL verification, and `-crl_download` attempts to download the CRL from the distribution point. `-verbose` provides detailed output.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nopenssl verify -verbose -crl_check -crl_download -CAfile chain.pem cert.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Consent Message in Markdown\nDESCRIPTION: Example of using Markdown formatting to display a bold warning message in the auth consent section of the login page.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/admin-panel/server-admin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**You are entering a confidential website**\n```\n\n----------------------------------------\n\nTITLE: MSSQL Credentials Rotation API Endpoint\nDESCRIPTION: OpenAPI specification for the POST endpoint that creates new MSSQL credentials rotation configurations. The endpoint is located at /api/v2/secret-rotations/mssql-credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-rotations/mssql-credentials/create.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPOST /api/v2/secret-rotations/mssql-credentials\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: Command to initialize a Docker Swarm cluster, which is required before deploying the stack.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/docker-swarm-with-agent.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm init\n```\n\n----------------------------------------\n\nTITLE: Cloning Infisical Repository\nDESCRIPTION: This command clones the Infisical repository with the specific branch for PostgreSQL migration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -b infisical/v0.46.11-postgres https://github.com/Infisical/infisical.git\n```\n\n----------------------------------------\n\nTITLE: Deleting Certificate Template via OpenAPI Specification\nDESCRIPTION: OpenAPI specification for the DELETE endpoint to remove a certificate template. The endpoint requires the certificateTemplateId as a path parameter to identify the template to be deleted.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/certificate-templates/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v1/pki/certificate-templates/{certificateTemplateId}\n```\n\n----------------------------------------\n\nTITLE: Example Infisical Client ID/URL Configuration\nDESCRIPTION: This URL is used as an example configuration value for the Client ID, Home URL, and Valid redirect URIs when setting up the Keycloak SAML client for Infisical. For self-hosted instances, this should be replaced with the actual domain of the Infisical deployment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/keycloak-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.infisical.com\n```\n\n----------------------------------------\n\nTITLE: Pulling Infisical Docker Image\nDESCRIPTION: This command pulls a specific version of the Infisical Docker image from Docker Hub. The user needs to replace '<version>' with the desired image tag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/standalone-infisical.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull infisical/infisical:<version>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vercel Secret Sync Configurations via GET API Endpoint\nDESCRIPTION: This OpenAPI specification defines the GET endpoint for fetching Vercel secret sync configurations. It includes query parameters for pagination and sorting, and describes the structure of the response object.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/vercel/list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/vercel\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies\nDESCRIPTION: These commands navigate to the backend directory and install the necessary dependencies.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd backend\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Copying HSM Client Files\nDESCRIPTION: Command to copy Luna HSM client files to the designated directory\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp -r /<path-to-where-your-luna-client-is-located> /etc/luna-docker\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Allowed Origins\nDESCRIPTION: Example of setting the CORS_ALLOWED_ORIGINS environment variable to allow specific origins.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCORS_ALLOWED_ORIGINS=[\"https://example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Verifying Secret Creation in Kubernetes\nDESCRIPTION: A command to verify the creation of the dynamic secret lease in Kubernetes by retrieving the managed secret and displaying its YAML representation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret <managed-secret-name> -o yaml\n```\n\n----------------------------------------\n\nTITLE: Manual Pre-commit Hook Integration\nDESCRIPTION: Command for manual integration of Infisical scanning in custom pre-commit hook setups like Husky.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical scan git-changes --staged --verbose\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for JWT Login Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the JWT authentication login endpoint. It specifies the HTTP method as POST and the path as '/api/v1/auth/jwt-auth/login'.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/jwt-auth/login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Login\"\nopenapi: \"POST /api/v1/auth/jwt-auth/login\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Deleting GCP Secret Manager Sync\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for a DELETE endpoint to remove a GCP Secret Manager sync. It includes the HTTP method and the path with a variable syncId parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/gcp-secret-manager/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Delete\"\nopenapi: \"DELETE /api/v1/secret-syncs/gcp-secret-manager/{syncId}\"\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Retrieving CSR in OpenAPI\nDESCRIPTION: OpenAPI specification for a GET endpoint to retrieve a Certificate Signing Request (CSR) for a specific Certificate Authority (CA). The endpoint includes the CA ID as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/certificate-authorities/csr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Get CSR\"\nopenapi: \"GET /api/v1/pki/ca/{caId}/csr\"\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vercel Secret Sync by ID using OpenAPI GET Request\nDESCRIPTION: This OpenAPI specification defines the GET endpoint for fetching a Vercel secret sync by its ID. The endpoint requires the 'syncId' as a path parameter to identify the specific sync to retrieve.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/vercel/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/vercel/{syncId}\n```\n\n----------------------------------------\n\nTITLE: Reloading SSH Daemon\nDESCRIPTION: Command to reload the SSH daemon to apply configuration changes after host registration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload sshd\n```\n\n----------------------------------------\n\nTITLE: Installing Migration Script Dependencies\nDESCRIPTION: These commands navigate to the pg-migrator directory and install the necessary dependencies for the migration script.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd pg-migrator\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Secret Syncs Options in OpenAPI\nDESCRIPTION: This snippet defines the OpenAPI schema for the GET /api/v1/secret-syncs/options endpoint. It specifies the HTTP method and the path for retrieving secret sync options in the Infisical API.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/options.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/options\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Regular and Inverted Permissions in TypeScript\nDESCRIPTION: This snippet shows how to define regular and inverted permissions for reading secrets in Infisical. It illustrates the difference between allowing and denying access to secrets using the 'inverted' property.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/internals/permissions/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Regular permission - allows reading secrets\n{\n  subject: \"secrets\",\n  action: [\"read\"]\n}\n\n// Inverted permission - denies reading secrets\n{\n  subject: \"secrets\",\n  action: [\"read\"],\n  inverted: true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Windmill Secret Syncs by Name in OpenAPI\nDESCRIPTION: Specifies the OpenAPI route for retrieving Windmill secret syncs using their sync name. The endpoint is a GET request to '/api/v1/secret-syncs/windmill/sync-name/{syncName}' where {syncName} is a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/windmill/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/windmill/sync-name/{syncName}\n```\n\n----------------------------------------\n\nTITLE: Running Vue.js Application with Infisical\nDESCRIPTION: Start your Vue.js application with environment variables injected by Infisical. This allows your application to access secrets stored in Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/vue.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run dev\n```\n\n----------------------------------------\n\nTITLE: Visualizing Secret Rotation Timeline with Mermaid\nDESCRIPTION: Gantt chart showing the lifecycle of three credential sets over 90 days with 30-day rotation intervals. Demonstrates the overlapping states (Active, Inactive, Revoked) of credentials during rotation cycles.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title Credential Lifecycle (Interval = 30 days)\n    dateFormat  YYYY-MM-DD\n    axisFormat %b %d\n\n    section Credentials 1\n    Active      :active, a1, 2023-01-01, 30d\n    Inactive    :done, i1, after a1, 30d\n    Revoked     :crit, r1, after i1, 30d\n\n    section Credentials 2\n    Active      :active, a2, 2023-01-31, 30d\n    Inactive    :done, i2, after a2, 30d\n    Revoked     :crit, r2, after i2, 30d\n\n    section Credentials 3\n    Active      :active, a3, 2023-03-02, 30d\n    Inactive    :done, i3, after a3, 30d\n    Revoked     :crit, r3, after i3, 30d\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Core Package - Debian/Ubuntu\nDESCRIPTION: Command to install the Infisical Core package on Debian/Ubuntu systems.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install -y infisical-core\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Read Replicas\nDESCRIPTION: JSON structure for configuring PostgreSQL read replicas using the DB_READ_REPLICAS environment variable.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/configuration/envars.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nDB_READ_REPLICAS=[{\"DB_CONNECTION_URI\":\"\"}]\n```\n\n----------------------------------------\n\nTITLE: Deleting Databricks Secret Sync via API Endpoint\nDESCRIPTION: This OpenAPI specification defines the DELETE endpoint for removing a Databricks secret sync. It requires a syncId path parameter and returns different status codes based on the operation's success or failure.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/databricks/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v1/secret-syncs/databricks/{syncId}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Native Azure in Infisical CLI\nDESCRIPTION: Command to log in using Native Azure method. It requires a machine identity ID for authentication in an Azure environment.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --method=azure --machine-identity-id=<machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Retrieving PKI Collection Items with OpenAPI GET Request\nDESCRIPTION: OpenAPI specification for a GET request to retrieve PKI collection items. The endpoint requires a collectionId parameter in the path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/pki-collections/list-items.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/pki/collections/{collectionId}/items\n```\n\n----------------------------------------\n\nTITLE: Visualizing Certificate Authority Hierarchy using Mermaid\nDESCRIPTION: A Mermaid diagram illustrating a typical Public Key Infrastructure (PKI) hierarchy. It shows a Root Certificate Authority (CA) signing Intermediate CAs, which in turn sign Leaf Certificates, representing the chain of trust.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Root CA]\n    A --> B[Intermediate CA]\n    A --> C[Intermediate CA]\n    B --> D[Leaf Certificate]\n    C --> E[Leaf Certificate]\n```\n\n----------------------------------------\n\nTITLE: Configuring Infisical Client with ES5 Syntax\nDESCRIPTION: Shows how to require and configure the Infisical client using ES5 syntax, including setting up authentication.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/sdks/languages/node.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { InfisicalClient } = require(\"@infisical/sdk\");\n\nconst client = new InfisicalClient({\n    auth: {\n      universalAuth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        clientSecret: \"YOUR_CLIENT_SECRET\"\n      }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Restarting Infisical Deployment\nDESCRIPTION: Command to restart the Infisical deployment to apply all HSM configuration changes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment/infisical-infisical\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Infisical CLI\nDESCRIPTION: This command logs into the Infisical CLI, which is required before obtaining SSH certificates.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Identity HTTP Endpoint Definition\nDESCRIPTION: OpenAPI endpoint definition for retrieving JWT authentication identity information via GET request. The endpoint requires an identity ID parameter in the URL path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/jwt-auth/retrieve.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/auth/jwt-auth/identities/{identityId}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PATCH Endpoint for Identity Updates\nDESCRIPTION: OpenAPI specification for the PATCH endpoint that updates JWT authentication identities. The endpoint accepts an identity ID parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/jwt-auth/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v1/auth/jwt-auth/identities/{identityId}\n```\n\n----------------------------------------\n\nTITLE: Structuring On-Call Summary Report in Plain Text\nDESCRIPTION: This template outlines the structure for an on-call summary report. It includes sections for the date range, notable incidents, support inquiries, and general comments. The template helps standardize reporting and ensures all crucial information is captured.\nSOURCE: https://github.com/infisical/infisical/blob/main/company/documentation/engineering/oncall-summery-template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nDate: MM/DD/YY-MM/DD/YY\n\nNotable incidents:\n-  [<open/resolved>] <details of the incident including who was impacted. what you did to mitigate/patch the issue>\n    - Action items:\n        - <what can we do to prevent this from happening in the future?> \n\nNotable support:\n- [Customer company name] <details of the support inquiry>\n    - Action items:\n        - <what actions should be taken/has been taken to resolve this>\n        - <what can we do to prevent this from happening in the future?> \n\nComments:\n<Any comments you have from your on call shift. Were there any pain points you experienced, etc?>\n```\n\n----------------------------------------\n\nTITLE: Organization Flag Example Usage\nDESCRIPTION: Example showing how to specify the organization name using the --organization flag.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/bootstrap.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example\ninfisical bootstrap --organization=your-org-name\n```\n\n----------------------------------------\n\nTITLE: Delete Secret Sync Endpoint Definition\nDESCRIPTION: OpenAPI specification for a DELETE endpoint that removes secret synchronization configurations for Camunda integration using a syncId path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/camunda/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v1/secret-syncs/camunda/{syncId}\n```\n\n----------------------------------------\n\nTITLE: Deleting Postgres Credentials Secret Rotation with OpenAPI\nDESCRIPTION: OpenAPI specification for the DELETE endpoint to remove a Postgres credentials secret rotation. The endpoint requires the rotationId as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-rotations/postgres-credentials/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v2/secret-rotations/postgres-credentials/{rotationId}\n```\n\n----------------------------------------\n\nTITLE: Restarting HAProxy Service\nDESCRIPTION: This command restarts the HAProxy service to apply the new configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl restart haproxy\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Microsoft SQL Server Connection API\nDESCRIPTION: Example response from the Infisical API after successfully creating a Microsoft SQL Server connection. The response includes connection details, ID, and timestamp information.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/mssql.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"appConnection\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-pg-connection\",\n        \"version\": 1,\n        \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"app\": \"mssql\",\n        \"method\": \"username-and-password\",\n        \"isPlatformManagedCredentials\": true,\n        \"credentials\": {\n            \"host\": \"123.4.5.6\",\n            \"port\": 1433,\n            \"database\": \"default\",\n            \"username\": \"infisical_login\",\n            \"sslEnabled\": true,\n            \"sslRejectUnauthorized\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Machine Identity Authentication\nDESCRIPTION: Shows how to authenticate using a machine identity ID. Required for kubernetes, azure, GCP, and AWS IAM authentication methods.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/login.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ninfisical login --machine-identity-id=<your-machine-identity-id>\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for MSSQL Connection Retrieval by Name\nDESCRIPTION: This snippet defines an OpenAPI specification for a GET endpoint that retrieves MSSQL connection details by connection name. The endpoint path includes a parameter for the connection name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/mssql/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Get by Name\"\nopenapi: \"GET /api/v1/app-connections/mssql/connection-name/{connectionName}\"\n---\n```\n\n----------------------------------------\n\nTITLE: Decoding and Displaying Certificate Information Using OpenSSL\nDESCRIPTION: This command retrieves a certificate from a Kubernetes Secret, decodes it from base64, and displays its contents using OpenSSL. It's useful for verifying the details of a newly issued certificate.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/pki-issuer.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret certificate-by-issuer -n default -o jsonpath='{.data.tls\\.crt}' | base64 --decode | openssl x509 -text -noout\n```\n\n----------------------------------------\n\nTITLE: Ignoring Known Secrets Example\nDESCRIPTION: JavaScript example showing how to ignore known secrets using inline comments.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/scanning-overview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction helloWorld() {\n    console.log(\"8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ\"); // infisical-scan:ignore\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Server\nDESCRIPTION: Command for installing Redis server on cluster nodes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install redis-server\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Core Package - RedHat/CentOS\nDESCRIPTION: Command to install the Infisical Core package on RedHat/CentOS systems.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install infisical-core\n```\n\n----------------------------------------\n\nTITLE: Defining GET /api/v1/folders API Endpoint in OpenAPI\nDESCRIPTION: This snippet specifies the OpenAPI definition for the GET /api/v1/folders endpoint. It indicates that this is an API for listing folders in the Infisical system.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/folders/list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"List\"\nopenapi: \"GET /api/v1/folders\"\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Search Functionality in JavaScript\nDESCRIPTION: This function opens the search bar when called, typically triggered by a button click.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/introduction-new.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function openSearch() {\n  document.getElementById('search-bar-entry').click();\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Backstage Entities with Infisical Project ID\nDESCRIPTION: YAML configuration example showing how to annotate a Backstage entity with an Infisical project ID for integration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/external/backstage.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: example-service\n  annotations:\n    infisical/projectId: <your-infisical-project-id>\n```\n\n----------------------------------------\n\nTITLE: Reloading SSH Daemon Configuration\nDESCRIPTION: This command reloads the SSH daemon to apply the new host certificate configuration without disconnecting existing SSH sessions.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/ssh-old.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload sshd\n```\n\n----------------------------------------\n\nTITLE: Retrieving Postgres Credentials Rotation by Name using OpenAPI\nDESCRIPTION: This OpenAPI specification defines an endpoint to get Postgres credentials rotation details by providing a rotation name. It uses the GET method and includes the rotation name as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-rotations/postgres-credentials/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v2/secret-rotations/postgres-credentials/rotation-name/{rotationName}\n```\n\n----------------------------------------\n\nTITLE: Restoring Data to Production PostgreSQL\nDESCRIPTION: This command restores the dumped data to the production PostgreSQL database.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npg_restore --clean -v -h <host> -U <db-user-name> -d <database-name> -j 2 dumpfilelocation.sql\n```\n\n----------------------------------------\n\nTITLE: Deleting Certificate Authority via API Endpoint (OpenAPI)\nDESCRIPTION: This OpenAPI specification defines the DELETE endpoint for removing a Certificate Authority. It requires the CA ID as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/certificate-authorities/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nDELETE /api/v1/pki/ca/{caId}\n```\n\n----------------------------------------\n\nTITLE: GET Endpoint for Camunda Connection by Name\nDESCRIPTION: OpenAPI specification for retrieving Camunda connection details via the connection name. The endpoint accepts a connectionName path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/camunda/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/camunda/connection-name/{connectionName}\n```\n\n----------------------------------------\n\nTITLE: Deleting SSH Certificate Template via HTTP DELETE Request\nDESCRIPTION: This HTTP request deletes a specific SSH certificate template identified by its unique ID. The endpoint follows RESTful conventions for resource deletion.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/ssh/certificate-templates/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/v1/ssh/certificate-templates/{certificateTemplateId}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Humanitec App Connection by ID - OpenAPI Endpoint Definition\nDESCRIPTION: OpenAPI specification for the GET endpoint to retrieve a specific Humanitec app connection using its unique ID. The endpoint accepts a connection ID parameter in the URL path.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/humanitec/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/humanitec/{connectionId}\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a Vite Project\nDESCRIPTION: This command initializes Infisical in your Vite application by navigating to the project root and running the init command.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize Infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Starting and Verifying Infisical Core\nDESCRIPTION: Commands to reconfigure and check the status of Infisical Core nodes.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo infisical-ctl reconfigure\nsudo infisical-ctl status\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App with Environment Variables - JavaScript\nDESCRIPTION: JavaScript implementation of _app.js file that logs environment variable to console\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/nextjs-vercel.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@/styles/globals.css'\n\nexport default function App({ Component, pageProps }) {\n    console.log('Hello, ', process.env.NEXT_PUBLIC_NAME);\n    return <Component {...pageProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Additional Privilege Lookup\nDESCRIPTION: YAML snippet defining an OpenAPI GET endpoint for retrieving additional privilege information by privilege slug. The endpoint path includes a dynamic parameter for the privilege slug.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/identity-specific-privilege/find-by-slug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"GET /api/v1/additional-privilege/identity/{privilegeSlug}\"\n```\n\n----------------------------------------\n\nTITLE: Complete Go Program Demonstrating Variable Declaration\nDESCRIPTION: A complete main package that demonstrates different ways to declare and initialize variables in Go, including string variables, multiple int variables, boolean values, and using short declaration syntax.\nSOURCE: https://github.com/infisical/infisical/blob/main/cli/testdata/expected/git/small.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n    var a = \"initial\"\n    fmt.Println(a)\n\n    var b, c int = 1, 2\n    fmt.Println(b, c)\n\n    var d = true\n    fmt.Println(d)\n\n    var e int\n    fmt.Println(e)\n\n    f := \"apple\"\n    fmt.Println(f)\n}\n```\n\n----------------------------------------\n\nTITLE: Luna HSM Chrystoki Configuration\nDESCRIPTION: Configuration file for Luna HSM client setup with paths and settings\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: conf\nCODE:\n```\nChrystoki2 = {\n  # This path points to the mounted path, /usr/safenet/lunaclient\n  LibUNIX64 = /usr/safenet/lunaclient/libs/64/libCryptoki2.so;\n}\n\nLuna = {\n  DefaultTimeOut = 500000;\n  PEDTimeout1 = 100000;\n  PEDTimeout2 = 200000;\n  PEDTimeout3 = 20000;\n  KeypairGenTimeOut = 2700000;\n  CloningCommandTimeOut = 300000;\n  CommandTimeOutPedSet = 720000;\n}\n\nCardReader = {\n  LunaG5Slots = 0;\n  RemoteCommand = 1;\n}\n\nMisc = {\n  # Update the paths to point to the mounted path if your folder structure is different from the one mentioned in the previous step.\n  PluginModuleDir = /usr/safenet/lunaclient/plugins;\n  MutexFolder = /usr/safenet/lunaclient/lock;\n  PE1746Enabled = 1;\n  ToolsDir = /usr/bin;\n\n}\n\nPresentation = {\n  ShowEmptySlots = no;\n}\n\nLunaSA Client = {\n  ReceiveTimeout = 20000;\n  # Update the paths to point to the mounted path if your folder structure is different from the one mentioned in the previous step.\n  SSLConfigFile = /usr/safenet/lunaclient/etc/openssl.cnf;\n  ClientPrivKeyFile = ./etc/ClientNameKey.pem;\n  ClientCertFile = ./etc/ClientNameCert.pem;\n  ServerCAFile = ./etc/CAFile.pem;\n  NetClient = 1;\n  TCPKeepAlive = 1;\n}\n\n\nREST = {\n  AppLogLevel = error\n  ServerName = <REDACTED>;\n  ServerPort = 443;\n  AuthTokenConfigURI = <REDACTED>;\n  AuthTokenClientId = <REDACTED>;\n  AuthTokenClientSecret = <REDACTED>;\n  RestClient = 1;\n  ClientTimeoutSec = 120;\n  ClientPoolSize = 32;\n  ClientEofRetryCount = 15;\n  ClientConnectRetryCount = 900;\n  ClientConnectIntervalMs = 1000;\n}\nXTC = {\n  Enabled = 1;\n  TimeoutSec = 600;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Update Check Environment Variable\nDESCRIPTION: Example of setting the INFISICAL_DISABLE_UPDATE_CHECK environment variable\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/cli/commands/export.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Example\nexport INFISICAL_DISABLE_UPDATE_CHECK=true\n```\n\n----------------------------------------\n\nTITLE: Template Secret Structure Definition in Go\nDESCRIPTION: Go struct definition showing the structure of template secrets with Value and SecretPath fields.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype TemplateSecret struct {\n    Value      string `json:\"value\"`\n    SecretPath string `json:\"secretPath\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GCP Secret Manager Sync Creation\nDESCRIPTION: YAML specification for the POST /api/v1/secret-syncs/gcp-secret-manager endpoint. It defines the request body schema, required parameters, and response structure for creating a new GCP Secret Manager sync in Infisical.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/gcp-secret-manager/create.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\ninfo:\n  title: Create GCP Secret Manager Sync\n  version: 1.0.0\npaths:\n  /api/v1/secret-syncs/gcp-secret-manager:\n    post:\n      summary: Create a new GCP Secret Manager sync\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - projectId\n                - secretPath\n                - environment\n                - sourceEnvironment\n                - path\n                - folderPath\n              properties:\n                projectId:\n                  type: string\n                  description: The GCP project ID\n                secretPath:\n                  type: string\n                  description: The path to the secret in GCP Secret Manager\n                environment:\n                  type: string\n                  description: The Infisical environment to sync from\n                sourceEnvironment:\n                  type: string\n                  description: The source environment in Infisical\n                path:\n                  type: string\n                  description: The path in Infisical to sync from\n                folderPath:\n                  type: string\n                  description: The folder path in GCP Secret Manager\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  secretSync:\n                    type: object\n                    properties:\n                      _id:\n                        type: string\n                      integration:\n                        type: string\n                      projectId:\n                        type: string\n                      secretPath:\n                        type: string\n                      environment:\n                        type: string\n                      path:\n                        type: string\n                      folderPath:\n                        type: string\n                      createdAt:\n                        type: string\n                        format: date-time\n                      updatedAt:\n                        type: string\n                        format: date-time\n```\n\n----------------------------------------\n\nTITLE: Dumping MongoDB Production Data\nDESCRIPTION: This command creates a dump of the production MongoDB database, excluding the auditlogs collection.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/guides/mongo-to-postgres.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmongodump --uri=<your_mongo_prod_uri> --archive=\"mongodump-db\" --db=<db name> --excludeCollection=auditlogs\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Certificate Template Creation (Bash)\nDESCRIPTION: Provides an example JSON structure returned by the Infisical API upon successful creation of a certificate template. The response includes the unique `id` of the new template, the associated `caId`, and the configured properties like `name`, `commonName`, `subjectAlternativeName`, and `ttl`. The code block is marked as Bash, but the content is JSON.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/pki/certificates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\n  id: \"...\",\n  caId: \"...\",\n  name: \"...\",\n  commonName: \"...\",\n  subjectAlternativeName: \"...\",\n  ttl: \"...\",\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Terraform Cloud App Connections via GET Request\nDESCRIPTION: OpenAPI specification for the GET endpoint to list Terraform Cloud app connections. This endpoint allows retrieving all Terraform Cloud connections associated with the authenticated user or organization.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/terraform-cloud/list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/app-connections/terraform-cloud\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Environment Variable Access in Go\nDESCRIPTION: Demonstrates various ways to declare and initialize variables in Go, including type inference, multiple variable declaration, and default values. Also shows how to retrieve an environment variable and contains an example of hardcoded credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/cli/testdata/expected/git/small.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\tvar a = \"initial\"\n\tfmt.Println(a)\n\tvar b, c int = 1, 2\n\tfmt.Println(b, c)\n\tvar d = true\n\tfmt.Println(d)\n\tvar e int\n\tfmt.Println(e)\n\t// load secret via env\n\tawsToken := os.Getenv(\"AWS_TOKEN\")\n\n\tf := \"apple\"\n\tfmt.Println(f)\n    \n    // opps I added a secret at line 20\n    awsToken := \"AKIALALEMEL33243OLIA\"\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH API Endpoint for Updating SSH CA in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a PATCH endpoint used to update an existing SSH Certificate Authority (CA) configuration. It specifies the endpoint path and title.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/ssh/ca/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Update\"\nopenapi: \"PATCH /api/v1/ssh/ca/{sshCaId}\"\n---\n```\n\n----------------------------------------\n\nTITLE: Admin Console Navigation Cards in MDX\nDESCRIPTION: MDX code snippet that creates a two-column card group layout with navigation cards for the Server Admin Console and Organization Admin Console sections.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/admin-panel/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"Server Admin Console\"\n    href=\"./server-admin\"\n    icon=\"user-tie\"\n    color=\"#000000\"\n  >\n    Configure and manage server related features.\n  </Card>\n  \n  <Card\n    title=\"Organization Admin Console\"\n    href=\"./org-admin-console\"\n    icon=\"sitemap\"\n    color=\"#000000\"\n  >\n    View and access resources across your organization.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Editing HAProxy Configuration\nDESCRIPTION: This command opens the HAProxy configuration file for editing using nano.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/deployment-options/native/standalone-binary.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ nano /etc/haproxy/haproxy.cfg\n```\n\n----------------------------------------\n\nTITLE: Rendering Topic Navigation Cards in HTML/JSX\nDESCRIPTION: This snippet creates a grid of topic cards for easy navigation through the documentation. It includes cards for Getting Started, API Reference, Security, Self-hosting, Integrations, and Releases.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/introduction-new.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div style={{marginTop: '6rem', marginBottom: '8rem', maxWidth: '70rem', marginLeft: 'auto',\n    marginRight: 'auto', paddingLeft: '1.25rem',\n    paddingRight: '1.25rem' }}>\n\n<div\n  style={{\n    textAlign: 'center',\n    fontSize: '24px',\n    fontWeight: '600',\n    color: '#121142',\n    marginBottom: '3rem',\n  }}\n>\n  Choose a topic below or simply{' '}\n  <span className=\"text-primary\">get started</span>\n</div>\n\n<CardGroup cols={3}>\n  <Card title=\"Getting Started\" icon=\"book-open\" href=\"/guides\">\n    Practical guides and best practices to get you up and running quickly.\n  </Card>\n  <Card title=\"API Reference\" icon=\"code-simple\" href=\"/reference\">\n    Comprehensive details about the Infisical API.\n  </Card>\n  <Card title=\"Security\" icon=\"code-simple\" href=\"/reference\">\n    Learn more about Infisical's architecture and underlying security.\n  </Card>\n  <Card title=\"Self-hosting\" icon=\"link-simple\" href=\"/integrations\">\n    Read self-hosting instruction for Infisical.\n  </Card>\n  <Card title=\"Integrations\" icon=\"link-simple\" href=\"/integrations\">\n    Infisical's growing number of third-party integrations.\n  </Card>\n  <Card title=\"Releases\" icon=\"party-horn\" href=\"/release-notes\">\n    News about features and changes in Pinecone and related tools.\n  </Card>\n</CardGroup>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy Load Balancer for Infisical\nDESCRIPTION: HAProxy configuration for load balancing Postgres, Redis, and Infisical services. Includes health checks, connection timeouts, and backend server definitions for high availability setup.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_8\n\nLANGUAGE: conf\nCODE:\n```\nglobal\n    maxconn 10000\n    log stdout format raw local0\n\ndefaults\n    log global\n    mode tcp\n    retries 3\n    timeout client 30m\n    timeout connect 10s\n    timeout server 30m\n    timeout check 5s\n\nlisten stats\n    mode http\n    bind *:7000\n    stats enable\n    stats uri /\n\nresolvers hostdns\n    nameserver dns 127.0.0.11:53\n    resolve_retries 3\n    timeout resolve 1s\n    timeout retry 1s\n    hold valid 5s\n\nfrontend postgres_master\n    bind *:5000\n    default_backend postgres_master_backend\n\nfrontend postgres_replicas\n    bind *:5001\n    default_backend postgres_replica_backend\n\nbackend postgres_master_backend\n    option httpchk GET /master\n    http-check expect status 200\n    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions\n    server postgres-1 52.1.0.6:5432 check port 8008\n    server postgres-2 52.1.0.7:5432 check port 8008\n    server postgres-3 52.1.0.8:5432 check port 8008\n\nbackend postgres_replica_backend\n    option httpchk GET /replica\n    http-check expect status 200\n    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions\n    server postgres-1 52.1.0.6:5432 check port 8008\n    server postgres-2 52.1.0.7:5432 check port 8008\n    server postgres-3 52.1.0.8:5432 check port 8008\n\nfrontend redis_master_frontend\n    bind *:6379\n    default_backend redis_master_backend\n\nbackend redis_master_backend\n    option tcp-check\n    tcp-check send AUTH\\ 123456\\r\\n\n    tcp-check expect string +OK\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send info\\ replication\\r\\n\n    tcp-check expect string role:master\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    server redis-1 52.1.0.9:6379 check inter 1s\n    server redis-2 52.1.0.10:6379 check inter 1s\n    server redis-3 52.1.0.11:6379 check inter 1s\n\nfrontend infisical_frontend\n    bind *:80\n    default_backend infisical_backend\n\nbackend infisical_backend\n    option httpchk GET /api/status\n    http-check expect status 200\n    server infisical-1 52.1.0.15:8080 check inter 1s\n    server infisical-2 52.1.0.16:8080 check inter 1s\n    server infisical-3 52.1.0.17:8080 check inter 1s\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Secret Rotation Options in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /api/v2/secret-rotations/options endpoint. It specifies the endpoint details, including the operation ID, summary, and response schema.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-rotations/options.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"GET /api/v2/secret-rotations/options\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Secret Import\nDESCRIPTION: Markdown definition of an OpenAPI endpoint for importing secrets. The endpoint follows the pattern POST /api/v1/secret-syncs/windmill/{syncId}/import-secrets where {syncId} is the identifier for the sync operation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/windmill/import-secrets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Import Secrets\"\nopenapi: \"POST /api/v1/secret-syncs/windmill/{syncId}/import-secrets\"\n---\n```\n\n----------------------------------------\n\nTITLE: Running a Gatsby Application with Infisical\nDESCRIPTION: This snippet demonstrates how to start your Gatsby application with Infisical to inject environment variables. The command uses Infisical to run your normal start command with the appropriate environment variables loaded.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/gatsby.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run -- <your application start command>\n\n# Example\ninfisical run -- npm run develop\n```\n\n----------------------------------------\n\nTITLE: Update Terraform Cloud Connection API Endpoint Definition\nDESCRIPTION: OpenAPI specification for the PATCH endpoint that updates an existing Terraform Cloud connection. The endpoint accepts a connection ID as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/terraform-cloud/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v1/app-connections/terraform-cloud/{connectionId}\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Token from Environment in Go\nDESCRIPTION: Imports necessary packages and retrieves an AWS token from environment variables. This snippet demonstrates how to securely access credentials from the environment rather than hardcoding them.\nSOURCE: https://github.com/infisical/infisical/blob/main/cli/testdata/expected/git/small.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\t// seems safer\n\taws_token := os.Getenv(\"AWS_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Section with Search Bar in HTML/JSX\nDESCRIPTION: This snippet creates the hero section of the documentation page, including a background image, title, and a search button that triggers the openSearch function.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/getting-started/introduction-new.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  className=\"relative w-full flex items-center justify-center\"\n  style={{ height: '24rem', backgroundColor: '#1F1F33', overflow: 'hidden' }}\n>\n  <div style={{ flex: 'none' }}>\n    <img\n      src=\"/images/background.png\"\n      style={{ height: '68rem', width: '68rem' }}\n    />\n  </div>\n  <div style={{ position: 'absolute', textAlign: 'center' }}>\n    <div\n      style={{\n        color: 'white',\n        fontWeight: '400',\n        fontSize: '48px',\n        margin: '0',\n      }}\n    >\n      Infisical Documentation\n    </div>\n    <p\n      style={{\n        color: 'white',\n        fontWeight: '400',\n        fontSize: '20px',\n        opacity: '0.7',\n      }}\n    >\n      What can we help you build?\n    </p>\n    <button\n      type=\"button\"\n      className=\"mx-auto w-full flex items-center text-sm leading-6 shadow-sm text-gray-400 bg-white ring-1 ring-gray-400/20 focus:outline-primary\"\n      id=\"home-search-entry\"\n      style={{\n        maxWidth: '24rem',\n        borderRadius: '4px',\n        marginTop: '3rem',\n        paddingLeft: '0.75rem',\n        paddingRight: '0.75rem',\n        paddingTop: '0.75rem',\n        paddingBottom: '0.75rem',\n      }}\n      onClick={openSearch}\n    >\n      <svg\n        className=\"h-4 w-4 ml-1.5 mr-3 flex-none bg-gray-500 hover:bg-gray-600 dark:bg-white/50 dark:hover:bg-white/70\"\n        style={{\n          maskImage:\n            'url(\"https://mintlify.b-cdn.net/v6.5.1/solid/magnifying-glass.svg\")',\n          maskRepeat: 'no-repeat',\n          maskPosition: 'center center',\n        }}\n      />\n      Start a chat with us...\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating kubectl-install Folder\nDESCRIPTION: This command updates the kubectl-install folder after modifying API definitions.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nmake kubectl-install\n```\n\n----------------------------------------\n\nTITLE: Displaying FAQ Content in Markdown\nDESCRIPTION: Structured FAQ content using AccordionGroup and Accordion components to display information about Infisical secret syncing capabilities and requirements.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes-csi.mdx#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## Frequently Asked Questions\n\n<AccordionGroup>\n  <Accordion title=\"Is it possible to sync Infisical secrets as environment variables?\">\n    Yes, but it requires an indirect approach:\n\n    1. First enable syncing to Kubernetes secrets by setting `syncSecret.enabled=true` in the CSI driver installation\n    2. Configure the Secret Provider Class to sync specific secrets to Kubernetes secrets\n    3. Use the resulting Kubernetes secrets in your pod's environment variables\n\n    This means secrets are first synced to Kubernetes secrets before they can be used as environment variables. You can find detailed examples in the [Secrets Store CSI driver documentation](https://secrets-store-csi-driver.sigs.k8s.io/topics/set-as-env-var).\n\n  </Accordion>\n</AccordionGroup>\n\n<AccordionGroup>\n  <Accordion title=\"Do I have to list out every Infisical single secret that I want to sync?\">\n    Yes, you will need to explicitly list each secret you want to sync in the\n    Secret Provider Class configuration. This is a common requirement across all\n    CSI providers as the Secrets Store CSI Driver architecture requires specific\n    mapping of secrets to their mounted file locations.\n  </Accordion>\n</AccordionGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Git for Infisical Development\nDESCRIPTION: This command creates a new branch in the local Git repository for Infisical development. Replace MY_BRANCH_NAME with your desired branch name.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/developing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b MY_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Retrieving Databricks Secret Sync by ID using OpenAPI GET Request\nDESCRIPTION: This OpenAPI specification defines a GET endpoint for fetching a specific Databricks secret sync by its ID. The endpoint requires the syncId as a path parameter and returns details of the requested secret sync.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/databricks/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/databricks/{syncId}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Listing Client Secrets in OpenAPI\nDESCRIPTION: This OpenAPI specification defines the GET endpoint for retrieving client secrets associated with a specific identity. It requires the identityId as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/universal-auth/list-client-secrets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/auth/universal-auth/identities/{identityId}/client-secrets\n```\n\n----------------------------------------\n\nTITLE: Initializing Infisical in a Vue.js Project\nDESCRIPTION: Navigate to the project root directory and initialize Infisical to start managing environment variables for your Vue.js application.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/frameworks/vue.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to the root of your of your project \ncd /path/to/project\n\n# then initialize infisical\ninfisical init\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Navigation Cards in Markdown\nDESCRIPTION: A markdown structure using CardGroup and Card components to create a navigation interface for access control documentation. Each card represents a different access control feature with links to detailed documentation.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/access-controls/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={2}>\n  <Card \n    title=\"Role-based Access Controls\" \n    href=\"./role-based-access-controls\" \n    icon=\"address-book\" \n    color=\"#000000\"\n  >\n    Manage user and machine identitity permissions through predefined roles. \n  </Card>\n\n  <Card \n    title=\"Attribute-based Access Control\" \n    href=\"/documentation/platform/access-controls/abac\" \n    icon=\"address-book\" \n    color=\"#000000\"\n  >\n    Manage user and machine identitity permissions based on their attributes.\n  </Card>\n  <Card\n    title=\"Additional Privileges\"\n    href=\"./additional-privileges\"\n    icon=\"ballot-check\"\n    color=\"#000000\"\n  >\n    Add specific privileges to users and machines on top of their roles. \n  </Card>\n  <Card \n    title=\"Temporary Access\" \n    href=\"./temporary-access\" \n    icon=\"clock\" \n    color=\"#000000\"\n  >\n    Grant timed access to roles and specific privileges. \n  </Card>\n  <Card\n    title=\"Access Requests\"\n    href=\"./access-requests\"\n    icon=\"check\"\n    color=\"#000000\"\n  >\n    Enable users to request (temporary) access to sensitive resources. \n  </Card>\n  <Card \n    title=\"Approval Workflows\" \n    href=\"/documentation/platform/pr-workflows\" \n    icon=\"thumbs-up\" \n    color=\"#000000\"\n  >\n    Set up review policies for secret changes in sensitive environments. \n  </Card>\n  <Card\n    title=\"Audit Logs\"\n    href=\"/documentation/platform/audit-logs\"\n    icon=\"list\"\n    color=\"#000000\"\n  >\n    Track every action performed by user and machine identities in Infisical. \n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Consent Message in HTML\nDESCRIPTION: Example of using HTML formatting with inline styling to display a bold warning message in the auth consent section of the login page.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/admin-panel/server-admin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"font-weight: bold;\">You are entering a confidential website</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Foo Function with Hardcoded AWS Token in Go\nDESCRIPTION: Defines a Foo function in a package that prints \"foo\" and a hardcoded AWS token. This demonstrates unsafe credential handling by embedding a sensitive token directly in code.\nSOURCE: https://github.com/infisical/infisical/blob/main/cli/testdata/expected/git/small.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport \"fmt\"\n\nfunc Foo() {\n\tfmt.Println(\"foo\")\n\n\t// seems safe\n\taws_token := \"AKIALALEMEL33243OLIA\"\n\tfmt.Println(aws_token)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch - Console Command\nDESCRIPTION: Command to create and checkout a new branch for development work\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b MY_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Migration File Path\nDESCRIPTION: Path specification for the migration file location\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/how-to-create-a-feature.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/src/db/migrations/<timestamp>_<feature-x>.ts\"\n```\n\n----------------------------------------\n\nTITLE: AWS Connection API Response Example\nDESCRIPTION: This JSON snippet shows a sample response from the Infisical API after successfully creating an AWS connection. It includes the connection ID, name, organization ID, timestamps, and connection method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/aws.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"appConnection\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-aws-connection\",\n        \"version\": 123,\n        \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2023-11-07T05:31:56Z\",\n        \"updatedAt\": \"2023-11-07T05:31:56Z\",\n        \"app\": \"aws\",\n        \"method\": \"assume-role\",\n        \"credentials\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Infisical Documentation Locally with Mintlify\nDESCRIPTION: This command changes to the docs directory and starts the Mintlify development server, making the documentation available at localhost:3000.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/developing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd docs; mintlify dev;\n```\n\n----------------------------------------\n\nTITLE: Delete GitHub App Connection HTTP Endpoint\nDESCRIPTION: DELETE endpoint for removing a GitHub app connection. Requires the connectionId as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/app-connections/github/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/v1/app-connections/github/{connectionId}\n```\n\n----------------------------------------\n\nTITLE: Setting deletionPolicy in InfisicalPushSecret CRD\nDESCRIPTION: This snippet shows how to configure the deletionPolicy field in the InfisicalPushSecret CRD. The deletionPolicy determines the operator's behavior when the CRD is deleted.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-push-secret-crd.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  deletionPolicy: Delete\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration - ENV File\nDESCRIPTION: Environment variable configuration required for local testing, including machine identity credentials and project settings\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# This is required for running tests locally.\n# Rename this file to \".env\" and fill in the values below.\n\n# Please make sure that the machine identity has access to the project you are testing in.\n# https://infisical.com/docs/documentation/platform/identities/universal-auth\nINFISICAL_UNIVERSAL_CLIENT_ID=MACHINE_IDENTITY_CLIENT_ID\nINFISICAL_UNIVERSAL_CLIENT_SECRET=MACHINE_IDENTITY_CLIENT_SECRET\n\n# The ID of the Infisical project where we will create the test secrets.\n# NOTE: The project must have a dev environment. (This is created by default when you create a project.)\nINFISICAL_PROJECT_ID=INFISICAL_TEST_PROJECT_ID\n\n# The Infisical site URL. If you are testing with a local Infisical instance, then this should be set to \"http://localhost:8080\".\nINFISICAL_SITE_URL=https://app.infisical.com\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Vercel Connection API\nDESCRIPTION: This snippet shows the expected JSON response from the Infisical API after successfully creating a Vercel connection. It includes details like the connection ID, name, version, organization ID, timestamps, app type, and authentication method.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/vercel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"appConnection\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-vercel-connection\",\n        \"version\": 123,\n        \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2025-04-01T05:31:56Z\",\n        \"updatedAt\": \"2025-04-01T05:31:56Z\",\n        \"app\": \"vercel\",\n        \"method\": \"api-token\",\n        \"credentials\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Infisical Admin Login Path Example\nDESCRIPTION: Example path for the Infisical admin login portal. Organization administrators can use this path (appended to the site URL, e.g., https://app.infisical.com/login/admin) to log in directly, bypassing SSO, especially in case of lockout after enforcing SAML SSO.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/sso/keycloak-saml.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/login/admin\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Windmill Connection API\nDESCRIPTION: This JSON snippet shows the expected response format after successfully creating a Windmill Connection via the API. It includes the connection details such as ID, name, version, organization ID, timestamps, app type, authentication method, and credentials.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/windmill.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"appConnection\": {\n        \"id\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"name\": \"my-windmill-connection\",\n        \"version\": 123,\n        \"orgId\": \"3c90c3cc-0d44-4b50-8888-8dd25736052a\",\n        \"createdAt\": \"2025-04-01T05:31:56Z\",\n        \"updatedAt\": \"2025-04-01T05:31:56Z\",\n        \"app\": \"windmill\",\n        \"method\": \"access-token\",\n        \"credentials\": {\n            \"instanceUrl\": \"https://app.windmill.dev\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FastifyServerInstance Type Path\nDESCRIPTION: Path to Fastify type definitions file\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/how-to-create-a-feature.mdx#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/src/server/routes/index.ts\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group by ID using OpenAPI GET Request\nDESCRIPTION: This OpenAPI specification defines a GET endpoint to fetch a group's details by its unique identifier. The endpoint requires the group ID as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/groups/get-by-id.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/groups/{id}\n```\n\n----------------------------------------\n\nTITLE: Token Auth Sequence Diagram in Mermaid\nDESCRIPTION: A sequence diagram illustrating the authentication workflow between a client and Infisical using token authentication. Shows the simple flow of making authenticated requests using an access token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/identities/token-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Client as Client\n  participant Infis as Infisical\n\n  Note over Client,Infis: Access Infisical API with Token\n  Client->>Infis: Make authenticated requests using the token\n```\n\n----------------------------------------\n\nTITLE: Ormify Utility Path\nDESCRIPTION: Path to the custom Infisical ormify function\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/how-to-create-a-feature.mdx#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n\"src/lib/knex\"\n```\n\n----------------------------------------\n\nTITLE: Luna HSM Client Directory Structure\nDESCRIPTION: Example directory structure showing the required files and folders for Luna HSM client setup\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/kms/hsm-integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npartition-ca-certificate.pem\npartition-certificate.pem\nserver-certificate.pem\nChrystoki.conf\n/plugins\n  libcloud.plugin\n/lock\n/libs\n  /64\n    libCryptoki2.so\n/jsp\n  LunaProvider.jar\n  /64\n    libLunaAPI.so\n/etc\n  openssl.cnf\n/bin\n  /64\n    ckdemo\n    lunacm\n    multitoken\n    vtl\n```\n\n----------------------------------------\n\nTITLE: Schema Export Path\nDESCRIPTION: Path reference for schema exports and type definitions\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/how-to-create-a-feature.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/src/db/schemas\"\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Workspace Role\nDESCRIPTION: HTTP GET endpoint for retrieving a workspace role using project slug and role slug parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/project-roles/get-by-slug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/workspace/{projectSlug}/roles/slug/{slug}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Custom Resource Definitions from Kubernetes Cluster\nDESCRIPTION: This command removes the Custom Resource Definitions (CRDs) from the Kubernetes cluster.\nSOURCE: https://github.com/infisical/infisical/blob/main/k8-operator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Updating TableName Enum Path\nDESCRIPTION: Path specification for updating the TableName enum in the models schema file\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/how-to-create-a-feature.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/src/db/schemas/models.ts\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Tree for Infisical Backend\nDESCRIPTION: Complete directory tree showing the organization of backend folders including scripts, e2e-tests, source code, and enterprise edition components. Shows the hierarchical layout of types, database, library, queue, server, and services directories.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/folder-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── scripts\n├── e2e-test\n└── src/\n    ├── @types/\n    │   ├── knex.d.ts\n    │   └── fastify.d.ts\n    ├── db/\n    │   ├── migrations\n    │   ├── schemas\n    │   └── seed\n    ├── lib/\n    │   ├── fn\n    │   ├── date\n    │   └── config\n    ├── queue\n    ├── server/\n    │   ├── routes/\n    │   │   ├── v1\n    │   │   └── v2\n    │   ├── plugins\n    │   └── config\n    ├── services/\n    │   ├── auth\n    │   ├── org\n    │   └── project/\n    │       ├── project-service.ts\n    │       ├── project-types.ts\n    │       └── project-dal.ts\n    └── ee/\n        ├── routes\n        └── services\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation in Rust\nDESCRIPTION: Definition of the Error enum used for error handling in the base SDK. Shows how different error types are handled and propagated.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/sdk/developing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Error)]\npub enum Error {\n    #[error(\"Secret with name '{}' not found.\", .secret_name)]\n    SecretNotFound { secret_name: String },\n\n    // .. other errors\n\n    #[error(transparent)]\n    Reqwest(#[from] reqwest::Error),\n    #[error(transparent)]\n    Serde(#[from] serde_json::Error),\n    #[error(transparent)]\n    Io(#[from] std::io::Error),\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH Endpoint for Updating Workspace Membership\nDESCRIPTION: OpenAPI endpoint specification for updating a user's membership in a workspace. The endpoint takes workspaceId and membershipId as path parameters.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/project-users/update-membership.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v1/workspace/{workspaceId}/memberships/{membershipId}\n```\n\n----------------------------------------\n\nTITLE: Databricks Secret Sync Update Endpoint Definition\nDESCRIPTION: OpenAPI endpoint specification for updating Databricks secret sync configuration with syncId parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/databricks/update.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nPATCH /api/v1/secret-syncs/databricks/{syncId}\n```\n\n----------------------------------------\n\nTITLE: Querying Vercel Secret Sync by Name - OpenAPI Endpoint\nDESCRIPTION: OpenAPI specification for GET endpoint that retrieves a Vercel secret sync configuration by its sync name. The endpoint path includes a syncName parameter to identify the specific sync configuration.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/vercel/get-by-name.mdx#2025-04-22_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nGET /api/v1/secret-syncs/vercel/sync-name/{syncName}\n```\n\n----------------------------------------\n\nTITLE: Defining POST API Endpoint for Tag Creation in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for creating a new tag in a workspace. It specifies the HTTP method (POST) and the endpoint URL structure, including the projectId parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-tags/create.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"POST /api/v1/workspace/{projectId}/tags\"\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for Rotation Manager\nDESCRIPTION: JSON policy configuration that grants necessary permissions for managing IAM access keys. This policy allows the managing user to create, delete, and check last usage of access keys.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/aws-iam.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"VisualEditor0\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\"iam:DeleteAccessKey\",\n\t\t\t\"iam:GetAccessKeyLastUsed\",\n\t\t\t\"iam:CreateAccessKey\"\n\t\t\t],\n\t\t\t\"Resource\": \"*\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Remove Secrets Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the endpoint to remove secrets from a Terraform Cloud sync. It specifies the HTTP method as POST and includes the syncId as a path parameter.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/secret-syncs/terraform-cloud/remove-secrets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Remove Secrets\"\nopenapi: \"POST /api/v1/secret-syncs/terraform-cloud/{syncId}/remove-secrets\"\n```\n\n----------------------------------------\n\nTITLE: Go Function with Hardcoded AWS Token\nDESCRIPTION: This snippet defines a Go function named Foo() that includes a hardcoded AWS token, which is an insecure practice. The function prints 'foo' and the hardcoded token to standard output.\nSOURCE: https://github.com/infisical/infisical/blob/main/cli/testdata/expected/git/small-branch-foo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport \"fmt\"\n\nfunc Foo() {\n\tfmt.Println(\"foo\")\n\n\t// seems safe\n\taws_token := \"AKIALALEMEL33243OLIA\"\n\tfmt.Println(aws_token)\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Secret Rotation Permissions in PostgreSQL\nDESCRIPTION: SQL command to enable the Infisical role to alter other users' passwords, which is required for Secret Rotation functionality. This grants the CREATEROLE privilege to the Infisical database role.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/app-connections/postgres.mdx#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- enable permissions to alter login credentials\nALTER ROLE infisical_role WITH CREATEROLE;\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedSecretReference for InfisicalDynamicSecret in Kubernetes\nDESCRIPTION: This YAML configuration specifies the Kubernetes secret where the dynamic secret lease should be stored. It includes the secret name and namespace within the managedSecretReference field of the InfisicalDynamicSecret spec.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/integrations/platforms/kubernetes/infisical-dynamic-secret-crd.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  managedSecretReference:\n    secretName: <secret-name>\n    secretNamespace: default\n```\n\n----------------------------------------\n\nTITLE: Running Infisical on Windows\nDESCRIPTION: Command to clone the Infisical repository, set up environment files, and start the application using Docker Compose on Windows Command Prompt.\nSOURCE: https://github.com/infisical/infisical/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/Infisical/infisical && cd infisical && copy .env.example .env && docker compose -f docker-compose.prod.yml up\n```\n\n----------------------------------------\n\nTITLE: Domain List for Email Service Blocking\nDESCRIPTION: A plain text list of domain names used by temporary email services and spam providers. The list is organized alphabetically and can be used for email validation and spam prevention.\nSOURCE: https://github.com/infisical/infisical/blob/main/backend/src/lib/validator/disposable_emails.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\noffshore-proxies.net\nohaaa.de\nohi.tw\noida.icu\noing.cf\nokclprojects.com\nokinawa.li\nokrent.us\nokzk.com\nolimp-case.ru\nolypmall.ru\nomail.pro\nomnievents.org\nomtecha.com\none-mail.top\none-time.email\none2mail.info\nonekisspresave.com\nonemail.host\noneoffmail.com\nonetm.jp\nonewaymail.com\nonlatedotcom.info\nonline.ms\nonlineidea.info\nonqin.com\nontyne.biz\noohioo.com\noolus.com\noonies-shoprus.ru\noopi.org\noosln.com\nopayq.com\nopenavz.com\nopendns.ro\nopentrash.com\nopmmedia.ga\nopp24.com\noptimaweb.me\nopwebw.com\noranek.com\nordinaryamerican.net\noreidresume.com\norgmbx.cc\noroki.de\noshietechan.link\notherinbox.com\nourklips.com\nourpreviewdomain.com\noutlawspam.com\noutmail.win\novomail.co\novpn.to\nowleyes.ch\nowlpic.com\nownsyou.de\noxopoha.com\nozyl.de\n[...continued...]\n```\n\n----------------------------------------\n\nTITLE: Simple Hello Printing Function in Go\nDESCRIPTION: Defines a PrintHello function in the api package that prints \"hello\". This is a basic example of function definition in Go.\nSOURCE: https://github.com/infisical/infisical/blob/main/cli/testdata/expected/git/small.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage api\n\nimport \"fmt\"\n\nfunc PrintHello() {\n\tfmt.Println(\"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Token HTTP Endpoint\nDESCRIPTION: API endpoint specification for creating authentication tokens. The endpoint requires an identity ID parameter and uses POST method to generate a new token.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/api-reference/endpoints/token-auth/create-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v1/auth/token-auth/identities/{identityId}/tokens\n```\n\n----------------------------------------\n\nTITLE: Installing Infisical Core Repository - Debian/Ubuntu\nDESCRIPTION: Command to add the Infisical repository to Debian/Ubuntu systems using cloudsmith setup script.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/self-hosting/reference-architectures/linux-deployment-ha.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -1sLf \\\n'https://dl.cloudsmith.io/public/infisical/infisical-core/setup.deb.sh' \\\n| sudo -E bash\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hook for Secret Scanning\nDESCRIPTION: Command to install a pre-commit hook that scans for secrets before commits are pushed to the repository.\nSOURCE: https://github.com/infisical/infisical/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ninfisical scan install --pre-commit-hook\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application with JavaScript\nDESCRIPTION: Command to initialize a new Next.js application using create-next-app with JavaScript configuration\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/guides/nextjs-vercel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpx create-next-app@latest --use-npm infisical-nextjs\ncd infisical-nextjs\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Infisical Helm Release\nDESCRIPTION: Command to uninstall the Infisical Helm release from the specified namespace.\nSOURCE: https://github.com/infisical/infisical/blob/main/helm-charts/infisical-standalone-postgres/templates/NOTES.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall -n {{ .Release.Namespace }} {{ .Release.Name }}\n```\n\n----------------------------------------\n\nTITLE: SendGrid Permissions Array Example\nDESCRIPTION: Example showing how to specify SendGrid API key permissions as a JSON array of permission strings.\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/documentation/platform/secret-rotation/sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\"user.profile.read\", \"user.profile.update\"]\n```\n\n----------------------------------------\n\nTITLE: Knex Type Definition Path\nDESCRIPTION: File path for Knex.js type definitions\nSOURCE: https://github.com/infisical/infisical/blob/main/docs/contributing/platform/backend/how-to-create-a-feature.mdx#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/src/@types/knex.d.ts\"\n```"
  }
]