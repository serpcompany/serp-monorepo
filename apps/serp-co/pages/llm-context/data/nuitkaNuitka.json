[
  {
    "owner": "nuitka",
    "repo": "nuitka",
    "content": "TITLE: Compiling Python Program to Executable\nDESCRIPTION: Basic command to compile a Python program into an executable\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka some_program.py\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Program to Standalone Executable with Nuitka\nDESCRIPTION: This command demonstrates how to compile a Python program to a standalone executable using Nuitka. The --follow-imports option ensures all imported modules are included.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/resource_reader37/some_package/DATA_FILE.txt#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m nuitka --follow-imports program.py\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Module with Nuitka\nDESCRIPTION: Command to compile a Python file into a module (.so file)\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka --module some_module.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Binary Executable with Nuitka in Bash\nDESCRIPTION: This command creates a single binary executable using Nuitka's onefile mode. The resulting binary will extract itself on the target machine before running the program.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --onefile program.py\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Program with All Optimizations in Nuitka\nDESCRIPTION: This command shows how to compile a Python program with all available optimizations enabled in Nuitka, which can improve performance of the resulting executable.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/resource_reader37/some_package/DATA_FILE.txt#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m nuitka --follow-imports --show-progress program.py\n```\n\n----------------------------------------\n\nTITLE: Standalone Program Compilation\nDESCRIPTION: Command to compile a program into standalone mode for distribution\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --standalone program.py\n```\n\n----------------------------------------\n\nTITLE: Extension Module Compilation\nDESCRIPTION: Command to compile a Python module into a loadable extension module\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --mode=module some_module.py\n```\n\n----------------------------------------\n\nTITLE: Compiling Program with Package Dependencies\nDESCRIPTION: Compile a Python program along with a specific package it depends on\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka --follow-import-to=some_package some_program.py\n```\n\n----------------------------------------\n\nTITLE: Accessing Files in Onefile Mode\nDESCRIPTION: Demonstrates how to access files in Nuitka's onefile mode, showing the difference between accessing external files located near the executable and internal files bundled inside the executable. Includes a cross-mode compatible approach.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# This will find a file *near* your onefile.exe\nopen(os.path.join(os.path.dirname(sys.argv[0]), \"user-provided-file.txt\"))\n# This will find a file *inside* your onefile.exe\nopen(os.path.join(os.path.dirname(__file__), \"user-provided-file.txt\"))\n\n# This will find a file *near* your onefile binary and work for standalone too\ntry:\n   open(os.path.join(__compiled__.containing_dir, \"user-provided-file.txt\"))\nexcept NameError:\n   open(os.path.join(os.path.dirname(sys.argv[0]), \"user-provided-file.txt\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Files Near Standalone Applications\nDESCRIPTION: A pattern for locating files near a Nuitka-compiled standalone application that works with different application structures including macOS app bundles. The code uses the __compiled__.containing_dir attribute with a fallback for non-compiled environments.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# This will find a file *near* your app or dist folder\ntry:\n   open(os.path.join(__compiled__.containing_dir, \"user-provided-file.txt\"))\nexcept NameError:\n   open(os.path.join(os.path.dirname(sys.argv[0]), \"user-provided-file.txt\"))\n```\n\n----------------------------------------\n\nTITLE: Compiling with Standard Library Dependencies\nDESCRIPTION: Compile a Python program including all dependencies, even from standard library\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka --recurse-all --follow-stdlib some_program.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Extracting Binary with Temporary Folder in Bash\nDESCRIPTION: This command creates a single binary that unpacks into a temporary folder before execution. It's useful for cases where the program needs to access files relative to its location.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Create a binary that unpacks into a temporary folder\npython -m nuitka --onefile program.py\n```\n\n----------------------------------------\n\nTITLE: Importing Python Modules Dynamically from Plugin Directories\nDESCRIPTION: A clean approach for loading Python plugin modules dynamically that works with both interpreted and compiled Python code. This method uses standard library tools like pkgutil and importlib instead of manually executing code with exec().\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Using a package name, to locate the plugins. This is also a sane\n# way to organize them into a directory.\nscan_path = scan_package.__path__\n\nfor item in pkgutil.iter_modules(scan_path):\n   importlib.import_module(scan_package.__name__ + \".\" + item.name)\n\n   # You may want to do it recursively, but we don't do this here in\n   # this example. If you'd like to, handle that in this kind of branch.\n   if item.ispkg:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies for Nuitka Compiler\nDESCRIPTION: Specifies required and optional Python package dependencies with version constraints based on Python version and OS. Includes packages for caching (appdirs), progress display (tqdm), ordered sets, subprocess handling, compression (zstandard), YAML processing, and templating (Jinja2).\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nappdirs\n\ntqdm; python_version == '2.7' or python_version >= '3.4'\n\nordered-set == 4.1.0; python_version >= '3.7'\norderedset == 2.0.3 ; os.name != 'nt' and sys.platform != 'darwin' and python_version < '3.7'\norderedset == 2.0.3 ; os.name == 'nt' and python_version >= '3.4' and python_version < '3.7'\norderedset == 2.0.3 ; sys.platform == 'darwin' and python_version < '3.7'\n\nsubprocess32; python_version == '2.7'\n\nzstandard >= 0.15; python_version >= '3.5'\n\npyyaml; python_version == '2.7' or python_version >= '3.6'\n\nJinja2 >= 2.10.2\n```\n\n----------------------------------------\n\nTITLE: Implementing Splash Screen with Nuitka Onefile Packaging\nDESCRIPTION: This code demonstrates how to implement a splash screen for a Windows application using Nuitka's onefile mode. It shows how to specify a splash screen image and the proper method to dismiss the splash screen when the application is ready.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# nuitka-project: --mode=onefile\n# nuitka-project: --mode=onefile-windows-splash-screen-image={MAIN_DIRECTORY}/Splash-Screen.png\n\n# Whatever this is, obviously\nprint(\"Delaying startup by 10s...\")\nimport time, tempfile, os\ntime.sleep(10)\n\n# Use this code to signal the splash screen removal.\nif \"NUITKA_ONEFILE_PARENT\" in os.environ:\n   splash_filename = os.path.join(\n      tempfile.gettempdir(),\n      \"onefile_%d_splash_feedback.tmp\" % int(os.environ[\"NUITKA_ONEFILE_PARENT\"]),\n   )\n\n   if os.path.exists(splash_filename):\n      os.unlink(splash_filename)\n\nprint(\"Done... splash should be gone.\")\n...\n\n# Rest of your program goes here.\n```\n\n----------------------------------------\n\nTITLE: Compiling with Runtime Checks\nDESCRIPTION: Compile a Python program with additional correctness checks for C code and runtime verification\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka --debug --follow-imports some_program.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuitka in pyproject.toml\nDESCRIPTION: Example of how to set up Nuitka as a build backend in pyproject.toml with various configuration options for the build process, including plugins and module exclusions.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"setuptools>=42\", \"wheel\", \"nuitka\", \"toml\"]\nbuild-backend = \"nuitka.distutils.Build\"\n\n# Data files are to be handled by setuptools and not Nuitka\n[tool.setuptools.package-data]\nsome_package = ['data_file.txt']\n\n[tool.nuitka]\n# These are not recommended, but they make it obvious to have effect.\n\n# boolean option, e.g. if you cared for C compilation commands, leading\n# dashes are omitted\nshow-scons = true\n\n# options with single values, e.g. enable a plugin of Nuitka\nenable-plugin = \"pyside2\"\n\n# options with several values, e.g. avoid including modules, accepts\n# list argument.\nnofollow-import-to = [\"*.tests\", \"*.distutils\"]\n```\n\n----------------------------------------\n\nTITLE: Compiling with Debug Information\nDESCRIPTION: Compile a Python program with debug information for tools like valgrind and gdb, without performance impact\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka --unstripped --follow-imports some_program.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuitka Options in Source Code\nDESCRIPTION: Shows how to embed Nuitka compilation options directly in Python source code using special comments, including conditional options based on OS and other variables.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# Compilation mode, support OS-specific options\n# nuitka-project-if: {OS} in (\"Windows\", \"Linux\", \"Darwin\", \"FreeBSD\"):\n#    nuitka-project: --mode=app\n# nuitka-project-else:\n#    nuitka-project: --mode=standalone\n\n# The PySide2 plugin covers qt-plugins\n# nuitka-project: --enable-plugin=pyside2\n# nuitka-project: --include-qt-plugins=qml\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Options in Python for Nuitka\nDESCRIPTION: This code snippet demonstrates how to add custom command line options to a Nuitka plugin. The method 'addPluginCommandLineOptions' is overloaded to extend the optparser group with plugin-specific options.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/Using-Plugin-Options.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef addPluginCommandLineOptions(cls, group):\n    ...  # add options to \"group\" here.\n```\n\n----------------------------------------\n\nTITLE: Nuitka Project Configuration in Python Comments\nDESCRIPTION: Example of OS-specific Nuitka compilation options embedded in Python comments. Shows how to configure different build settings for Windows/Linux versus macOS (app bundle).\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Compilation mode, standalone everywhere, except on macOS there app bundle\n# nuitka-project-if: {OS} in (\"Windows\", \"Linux\", \"FreeBSD\"):\n#    nuitka-project: --onefile\n# nuitka-project-if: {OS} == \"Darwin\":\n#    nuitka-project: --standalone\n#    nuitka-project: --macos-create-app-bundle\n#\n```\n\n----------------------------------------\n\nTITLE: Nuitka Configuration Getter Functions\nDESCRIPTION: A reference mapping of Nuitka's configuration getter functions to their corresponding command line options. Each function returns either a list, tuple, or boolean value based on the provided command line arguments when running Nuitka.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/UserPlugin-Creation.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngetShallFollowInNoCase               # list, items of --nofollow-import-to=\ngetShallFollowModules                # list, items of --follow-import-to=\ngetUserPlugins                       # tuple, items of --user-plugin=\nisAllowedToReexecute                 # bool = not --must-not-re-execute\nisClang                              # bool = --clang\nisDebug                              # bool = --debug or --debugger\nisExperimental(\"feature\")            # bool = --experimental=feature\nisFullCompat                         # bool = --full-compat\nisLto                                # bool = --lto\nisMingw64                            # bool = --mingw64\nisProfile                            # bool = --profile\nshallUsePythonDebug                  # bool = --python-debug or sys.flags.debug\nisRemoveBuildDir                     # bool = --remove-output\nisShowInclusion                      # bool = --show-modules\nisShowMemory                         # bool = --show-memory\nisShowProgress                       # bool = --show-progress\nisShowScons                          # bool = --show-scons\nisStandaloneMode                     # bool = --standalone\nisUnstripped                         # bool = --unstripped or --profile\nisVerbose                            # bool = --verbose\nshallCreatePyiFile                   # bool = not --no-pyi-file\nshallDetectMissingPlugins            # bool = not --plugin-no-detection\nshallExecuteImmediately              # bool = --run\nshallExplainImports                  # bool = --explain-imports\nshallFollowAllImports                # bool = --follow-imports\nshallFollowNoImports                 # bool = --nofollow-imports\nshallListPlugins                     # bool = --plugin-list\nshallMakeModule                      # bool = --module\nshallNotDoExecCCompilerCall          # bool = --generate-c-only\nshallNotStoreDependsExeCachedResults # bool = --disable-dll-dependency-cache\nshallNotUseDependsExeCachedResults   # bool = --disable-dll-dependency-cache or --force-dll-dependency-cache-update\nshallOnlyExecCCompilerCall           # bool = --recompile-c-only\nshallRunInDebugger                   # bool = --debug\nshallTraceExecution                  # bool = --trace-execution\nshallWarnImplicitRaises              # bool = --warn-implicit-exceptions\nshallWarnUnusualCode                 # bool = --warn-unusual-code\n```\n\n----------------------------------------\n\nTITLE: Package Compilation\nDESCRIPTION: Command to compile an entire Python package with all its contents\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --mode=module some_package --include-package=some_package\n```\n\n----------------------------------------\n\nTITLE: Preventing Fork Bombs in Nuitka Compiled Applications\nDESCRIPTION: This code provides a safety mechanism to prevent fork bombs in Nuitka compiled applications. It checks for a launch token environment variable and exits if not present, preventing the application from repeatedly launching itself.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport os, sys\n\nif \"NUITKA_LAUNCH_TOKEN\" not in os.environ:\n   sys.exit(\"Error, need launch token or else fork bomb suspected.\")\nelse:\n   del os.environ[\"NUITKA_LAUNCH_TOKEN\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing ModuleName class in Python for Nuitka compiler\nDESCRIPTION: This class represents a module name in the Nuitka compiler, handling different formats of module names including packages and modules. It provides functionality to manipulate module parts, check for package status, and compare module names.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/plugins/data_files/data_files_package/sub_dir/lulu.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ModuleName(object):\n    def __init__(self, name):\n        assert type(name) is str, name\n        assert \"\\\\\" not in name, name\n\n        self.name = name\n\n    def __repr__(self):\n        return \"<%s '%s'>\" % (self.__class__.__name__, self.name)\n\n    def getBasename(self):\n        return self.name.rsplit(\".\", 1)[-1] if \"..\" not in self.name else self.name\n\n    def asString(self):\n        return self.name\n\n    @staticmethod\n    def makeModuleNameInPackage(module_name, package_name):\n        if module_name == \"\":\n            return package_name\n\n        return package_name.getChildNamed(module_name)\n\n    def getPackageName(self):\n        return self.name.rsplit(\".\", 1)[0] if \"..\" not in self.name else None\n\n    def getChildNamed(self, name):\n        return ModuleName(self.name + \".\" + name)\n\n    def __eq__(self, other):\n        if type(other) is not ModuleName:\n            return NotImplemented\n\n        return self.name == other.name\n\n    def __ne__(self, other):\n        if type(other) is not ModuleName:\n            return NotImplemented\n\n        return self.name != other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def hasNamespace(self):\n        return False\n\n    def getFullName(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Nuitka User Plugin in Python\nDESCRIPTION: This example demonstrates how to create a user plugin for Nuitka that monitors math module calls in the main script. The plugin inherits from NuitkaPluginBase, defines command line options, and implements the onModuleSourceCode hook to analyze source code.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/UserPlugin-Creation.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\n\nfrom nuitka import Options\nfrom nuitka.plugins.PluginBase import NuitkaPluginBase\n\nclass NuitkaPluginMine(NuitkaPluginBase):\n    # Derive from filename, but can and should also be explicit.\n    plugin_name = __name__.split(\".\")[-1]\n\n    def __init__(self, trace_my_plugin):\n        # demo only: extract and display my options list\n        # check whether some specific option is set\n\n        self.check = trace_my_plugin\n        self.info(\" 'trace' is set to '%s'\" % self.check)\n\n        # do more init work here ...\n\n    @classmethod\n    def addPluginCommandLineOptions(cls, group):\n        group.add_option(\n            \"--trace-my-plugin\",\n            action=\"store_true\",\n            dest=\"trace_my_plugin\",\n            default=False,\n            help=\"This is show in help output.\"\n        )\n\n    def onModuleSourceCode(self, module_name, source_filename, source_code):\n        # if this is the main script and tracing should be done ...\n        if module_name == \"__main__\" and self.check:\n            self.info(\"\")\n            self.info(\" Calls to 'math' module:\")\n            for i, l in enumerate(source_code.splitlines()):\n                if \"math.\" in l:\n                    self.info(\" %i: %s\" % (i+1, l))\n            self.info(\"\")\n        return source_code\n```\n\n----------------------------------------\n\nTITLE: GitHub Workflow YAML for Cross-Platform Nuitka Builds\nDESCRIPTION: GitHub Actions workflow configuration for building Nuitka executables on multiple operating systems (macOS, Ubuntu, Windows). Includes steps for checkout, Python setup, dependency installation, and build artifact collection.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\nbuild:\n   strategy:\n      matrix:\n      os: [macos-latest, ubuntu-latest, windows-latest]\n\n   runs-on: ${{ matrix.os }}\n\n   steps:\n      - name: Check-out repository\n      uses: actions/checkout@v4\n\n      - name: Setup Python\n      uses: actions/setup-python@v5\n      with:\n         python-version: '3.10'\n         cache: 'pip'\n         cache-dependency-path: |\n            **/requirements*.txt\n\n      - name: Install your Dependencies\n      run: |\n         pip install -r requirements.txt -r requirements-dev.txt\n\n      - name: Build Executable with Nuitka\n      uses: Nuitka/Nuitka-Action@main\n      with:\n         nuitka-version: main\n         script-name: your_main_program.py\n         # many more Nuitka options available, see action doc, but it's best\n         # to use nuitka-project: options in your code, so e.g. you can make\n         # a difference for macOS and create an app bundle there.\n         mode: onefile\n\n      - name: Upload Artifacts\n      uses: actions/upload-artifact@v4\n      with:\n         name: ${{ runner.os }} Build\n         path: | # match what's created for the 3 OSes\n            build/*.exe\n            build/*.bin\n            build/*.app/**/*\n```\n\n----------------------------------------\n\nTITLE: Getting a module variable by name in Nuitka (Python)\nDESCRIPTION: This function retrieves a module variable node by name. It creates and returns the appropriate ExpressionModuleVariableRef instance for the specified variable name.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/pkgutil_usage/package/DATA_FILE3.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef getModuleVariableNameRef(module, var_name):\n    assert isModuleVariableName(var_name), var_name\n\n    from nuitka.nodes.ModuleAttributeNodes import ExpressionModuleVariableRef\n\n    return ExpressionModuleVariableRef(module=module, var_name=var_name)\n```\n\n----------------------------------------\n\nTITLE: Recursive Program Compilation\nDESCRIPTION: Command to compile a program with all its dependencies using --follow-imports flag\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --follow-imports program.py\n```\n\n----------------------------------------\n\nTITLE: Basic Nuitka Compilation\nDESCRIPTION: Command to compile Python code using Nuitka without additional options\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka hello.py\n```\n\n----------------------------------------\n\nTITLE: Determining if a module needs local node insertion in Nuitka (Python)\nDESCRIPTION: This function checks if a given module needs insertion of a local node. It examines the module to determine if it requires special handling for local variables.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/pkgutil_usage/package/DATA_FILE3.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef needsModuleLocalVariableNode(module):\n    \"\"\" Helper for nodes to determine if a module local variable needs to be inserted.\n\n    Args:\n        module: the module to check this for\n\n    Returns:\n        bool - Should the node be inserted\n    \"\"\"\n    if not module.isCompiledPythonModule():\n        return False\n\n    if module.isPythonShlibModule():\n        # Virtual modules don't get local variable nodes for now, they will\n        # be optimized completely.\n        return False\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Invoking a Nuitka User Plugin from Command Line with Bash\nDESCRIPTION: This command demonstrates how to execute Nuitka with a user plugin. The --user-plugin parameter specifies the plugin file path and options, while --standalone ensures a standalone build is created.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/UserPlugin-Creation.rst#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --standalone --user-plugin=user_plugin.py=trace script.py\n```\n\n----------------------------------------\n\nTITLE: Adding Nuitka build flag to setup.py\nDESCRIPTION: Simple configuration for setup.py to enable building with Nuitka without changing the build target. This flag can be toggled or made conditional with environment variables.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# For setup.py\nsetup(\n   ...,\n   build_with_nuitka=True\n)\n```\n\n----------------------------------------\n\nTITLE: Checking if a variable name is a module variable in Nuitka (Python)\nDESCRIPTION: This function determines if a given identifier name represents a module variable. It checks if the name is one of the predefined module variables in Python.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/pkgutil_usage/package/DATA_FILE3.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef isModuleVariableName(var_name):\n    return var_name in (\n        \"__name__\",\n        \"__package__\",\n        \"__path__\",\n        \"__file__\",\n        \"__cached__\",\n        \"__doc__\",\n        \"__builtins__\",\n        \"__loader__\",\n        \"__spec__\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuitka in setup.cfg\nDESCRIPTION: Example of how to enable Nuitka compilation in a setup.cfg configuration file using the build_with_nuitka metadata flag.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[metadata]\nbuild_with_nuitka = true\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py for Nuitka without other build systems\nDESCRIPTION: Example of how to configure setup.py to use Nuitka for building Python packages when not using other build systems. Shows how to pass Nuitka-specific options and handle package data.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# For setup.py if you don't use other build systems:\nsetup(\n   # Data files are to be handled by setuptools and not Nuitka\n   package_data={\"some_package\": [\"some_file.txt\"]},\n   ...,\n   # This is to pass Nuitka options.\n   command_options={\n      'nuitka': {\n         # boolean option, e.g. if you cared for C compilation commands\n         '--show-scons': True,\n         # options without value, e.g. enforce using Clang\n         '--clang': None,\n         # options with single values, e.g. enable a plugin of Nuitka\n         '--enable-plugin': \"pyside2\",\n         # options with several values, e.g. avoid including modules\n         '--nofollow-import-to' : [\"*.tests\", \"*.distutils\"],\n      },\n   },\n)\n```\n\n----------------------------------------\n\nTITLE: Checking shared memory segment status\nDESCRIPTION: Shell command to display the status of shared memory segments using ipcs command\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/pkgutil_usage/package/DATA_FILE2.txt#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nipcs -m | grep 0x4e554954\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py for Nuitka with other build systems\nDESCRIPTION: Example of how to configure setup.py to use Nuitka when working with other build systems like setuptools_rust. Uses tuple arguments for compatibility with other plugins.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# For setup.py with other build systems:\n# The tuple nature of the arguments is required by the dark nature of\n# \"setuptools\" and plugins to it, that insist on full compatibility,\n# e.g. \"setuptools_rust\"\n\nsetup(\n   # Data files are to be handled by setuptools and not Nuitka\n   package_data={\"some_package\": [\"some_file.txt\"]},\n   ...,\n   # This is to pass Nuitka options.\n   ...,\n   command_options={\n      'nuitka': {\n         # boolean option, e.g. if you cared for C compilation commands\n         '--show-scons': (\"setup.py\", True),\n         # options without value, e.g. enforce using Clang\n         '--clang': (\"setup.py\", None),\n         # options with single values, e.g. enable a plugin of Nuitka\n         '--enable-plugin': (\"setup.py\", \"pyside2\"),\n         # options with several values, e.g. avoid including modules\n         '--nofollow-import-to' : (\"setup.py\", [\"*.tests\", \"*.distutils\"]),\n      }\n   },\n)\n```\n\n----------------------------------------\n\nTITLE: Using nuitka-run Command\nDESCRIPTION: Demonstrates the usage of the nuitka-run command, which compiles and directly executes a Python script.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnuitka-run --help\n```\n\n----------------------------------------\n\nTITLE: Handling Command Line Arguments in Nuitka Compiled Programs\nDESCRIPTION: Demonstrates how sys.argv[0] and original_argv0 behave in compiled onefile executables with different invocation methods.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# Suppose the onefile binary is placed at /opt/abc/bin/foo, and it was\n# symlinked to /usr/local/bin/bar, and invoked as `bar ...`:\nassert sys.argv[0] == \"/usr/local/bin/bar\"\nassert __compiled__.original_argv0 == \"bar\"\n\n# If the onefile tempdir is overridden and the program is invoked\n# directly from the unpacked location, sys.argv[0] would not be touched.\n#\n# Suppose the onefile tempdir is /home/xx/.cache/abc/0.1.2, and the\n# foo.bin executable inside is symlinked to /usr/local/bin/baz, and\n# invoked as `baz ...`:\nassert sys.argv[0] == \"baz\"\nassert __compiled__.original_argv0 is None\n```\n\n----------------------------------------\n\nTITLE: Executing Nuitka with Python Interpreter\nDESCRIPTION: Demonstrates the recommended way to execute Nuitka using the Python interpreter to ensure the correct Python version is used.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<the_right_python> -m nuitka\n```\n\n----------------------------------------\n\nTITLE: Specifying PyYAML Dependency for Plugins\nDESCRIPTION: Defines PyYAML package requirements for plugins, with different versions for Python 2.7, 3.5, and 3.6+.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\npyyaml == 6.0.1; python_version >= '3.6'\npyyaml == 5.3.1; python_version == '3.5'\npyyaml == 5.4.1; python_version == '2.7'\n```\n\n----------------------------------------\n\nTITLE: Plugin Directory Inclusion\nDESCRIPTION: Command to compile with additional plugin directory for dynamic imports\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --follow-imports --include-plugin-directory=plugin_dir program.py\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Program with Dependencies\nDESCRIPTION: Compile a Python program with all its module dependencies and execute it immediately\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka --run --follow-imports some_program.py\n```\n\n----------------------------------------\n\nTITLE: Specifying TQDM Dependency for Progress Bar\nDESCRIPTION: Adds the tqdm package requirement for creating nice-looking progress bars, with different versions for Python < 3.7 and >= 3.7.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ntqdm == 4.64.1 ; python_version < '3.7'\ntqdm == 4.66.4 ; python_version >= '3.7'\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Module to Extension Module with Nuitka\nDESCRIPTION: This command demonstrates how to compile a Python module into an extension module using Nuitka, allowing it to be imported by other Python code with improved performance.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/resource_reader37/some_package/DATA_FILE.txt#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m nuitka --module some_module.py\n```\n\n----------------------------------------\n\nTITLE: Deep Copying Uncompiled Functions in Python\nDESCRIPTION: Shows how to properly clone functions when working with both compiled and uncompiled functions in Nuitka.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef binder(func, name):\n   try:\n      result = func.clone()\n   except AttributeError:\n      result = types.FunctionType(func.__code__, func.__globals__, name=func.__name__, argdefs=func.__defaults__, closure=func.__closure__)\n      result = functools.update_wrapper(result, func)\n      result.__kwdefaults__ = func.__kwdefaults__\n\n   result.__name__ = name\n   return result\n```\n\n----------------------------------------\n\nTITLE: Specifying Jinja2 Dependency for Runtime Code Generation\nDESCRIPTION: Defines Jinja2 package requirements for runtime code generation, with different versions for Python 2.7 and Python 3.7+.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nJinja2 == 2.11.3 ; python_version == '2.7'\nJinja2 == 3.1.4 ; python_version >= '3.7'\n```\n\n----------------------------------------\n\nTITLE: Getting Nuitka Version Information in Bash\nDESCRIPTION: Command to obtain version and system information from Nuitka Python compiler for bug reporting purposes. This provides detailed information about the Nuitka installation and environment configuration.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npython -m nuitka --version\n```\n\n----------------------------------------\n\nTITLE: Displaying Nuitka Help Information\nDESCRIPTION: Shows how to display Nuitka's help information using the --help option.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnuitka --help\n```\n\n----------------------------------------\n\nTITLE: Specifying Virtualenv Dependency for Testing\nDESCRIPTION: Defines virtualenv package requirements for distutils and PyPI packaging tests, with a fixed version for Python 2.7 and flexible for Python 3.5+.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nvirtualenv == 16.7.10; python_version == '2.7'\nvirtualenv ; python_version >= '3.5'\n```\n\n----------------------------------------\n\nTITLE: Listing Available Optional Standard Plugins in Nuitka\nDESCRIPTION: Command output showing all available optional standard plugins in Nuitka with their descriptions. This output is generated when using the --plugin-list option.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/Standard-Plugins-Documentation.rst#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nanti-bloat            Patch stupid imports out of widely used library modules source codes.\ndata-files\ndata-hiding           Commercial: Hide program constant Python data from offline inspection of created binaries.\ndatafile-inclusion-ng Commercial: Load file trusted file contents at compile time.\ndill-compat\nenum-compat\nethereum              Commercial: Required for ethereum packages in standalone mode\neventlet              Support for including 'eventlet' dependencies and its need for 'dns' package monkey patching\ngevent                Required by the gevent package\ngi                    Support for GI dependencies\nglfw                  Required for glfw in standalone mode\nimplicit-imports\nmultiprocessing       Required by Python's multiprocessing module\nnumpy                 Required for numpy, scipy, pandas, matplotlib, etc.\npbr-compat\npkg-resources         Resolve version numbers at compile time.\npmw-freezer           Required by the Pmw package\npylint-warnings       Support PyLint / PyDev linting source markers\npyqt5                 Required by the PyQt5 package.\npyside2               Required by the PySide2 package.\npyside6               Required by the PySide6 package for standalone mode.\npyzmq                 Required for pyzmq in standalone mode\ntensorflow            Required by the tensorflow package\ntk-inter              Required by Python's Tk modules\ntorch                 Required by the torch / torchvision packages\ntraceback-encryption  Commercial: Encrypt tracebacks (de-Jong-Stacks).\nwindows-service       Commercial: Create Windows Service files\n```\n\n----------------------------------------\n\nTITLE: Running Pystone Benchmarks for Python 2 and 3\nDESCRIPTION: Bash script to compile and run Pystone benchmarks for both Python 2 and 3 using Nuitka. It compares the performance of uncompiled and compiled versions by running the benchmark multiple times and selecting the best result.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\necho \"Uncompiled Python2\"\nfor i in {1..100}; do BENCH=1 python2 tests/benchmarks/pystone.py ; done | sort -rn | head -n 1\npython2 -m nuitka --lto=yes --pgo-c tests/benchmarks/pystone.py\necho \"Compiled Python2\"\nfor i in {1..100}; do BENCH=1 ./pystone.bin ; done | sort -n | head -rn 1\n\nPYTHON3=python3.10\n\n# Using a 100 gives semi-reliable values already, 1000 for best accuracy.\nRUNS=1000\n\n$PYTHON3 -m nuitka --lto=yes --pgo-c --static-libpython=yes tests/benchmarks/pystone3.py\necho \"Uncompiled $PYTHON3\"\nfor i in $(seq 1 $RUNS); do BENCH=1 $PYTHON3 tests/benchmarks/pystone3.py ; done | sort -rn | head -n 1\necho \"Compiled $PYTHON3\"\nfor i in $(seq 1 $RUNS); do BENCH=1 ./pystone3.bin ; done | sort -rn | head -n 1\n```\n\n----------------------------------------\n\nTITLE: Specifying Code Formatting Dependencies for Python 3.9+\nDESCRIPTION: Defines dependencies for code formatting tools like black, isort, and yamllint for Python versions 3.9 and above.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nblack == 24.10.0 ; python_version >= '3.9'\ntoml >= 0.10.1 ; python_version >= '3.9'\nisort == 5.13.2 ; python_version >= '3.9'\nyamllint == 1.28.0 ; python_version >= '3.9'\nrstfmt == 0.0.14 ; python_version >= '3.9'\njsonschema == 4.6.0 ; python_version >= '3.9'\nruamel.yaml == 0.17.21 ; python_version >= '3.9'\ndeepdiff == 5.8.1 ; python_version >= '3.9'\nmdformat == 0.7.16 ; python_version >= '3.9'\nmdformat-gfm == 0.3.5 ; python_version >= '3.9'\nmdformat-frontmatter == 2.0.1 ; python_version >= '3.9'\nmdformat-footnote == 0.1.1 ; python_version >= '3.9'\n```\n\n----------------------------------------\n\nTITLE: Installing ccache on macOS for Nuitka\nDESCRIPTION: Bash commands for installing ccache on macOS using Homebrew to improve compilation performance.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nexport HOMEBREW_INSTALL_FROM_API=1\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\neval $(/opt/homebrew/bin/brew shellenv)\nbrew install ccache\n```\n\n----------------------------------------\n\nTITLE: Sample Output from User Plugin Execution\nDESCRIPTION: This shows the console output when running the example user plugin. It displays plugin loading confirmation, options being used, and the analysis results showing lines containing math module calls.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/UserPlugin-Creation.rst#2025-04-19_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNuitka:INFO: 'user_plugin.py' options: ['trace']\nNuitka:INFO: 'trace' is set to True\nNuitka:INFO:User plugin 'user_plugin.py' loaded.\nNuitka:INFO:\nNuitka:INFO: Calls to 'math' module:\nNuitka:INFO: 125: print(math.sqrt(2))\nNuitka:INFO:\n```\n\n----------------------------------------\n\nTITLE: Specifying Wheel Dependency for Packaging\nDESCRIPTION: Adds the wheel package requirement for packaging purposes.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nwheel\n```\n\n----------------------------------------\n\nTITLE: Compiling with Full Debug Mode\nDESCRIPTION: Compile a Python program with all debugging options enabled, including Python debug library checks\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/doc/nuitka-man-include.txt#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ nuitka --debug --python-debug --follow-imports some_program.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Subprocess32 Dependency for Python 2.7\nDESCRIPTION: Adds the subprocess32 package requirement for Python 2.7 to improve testing reliability with timeout features.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsubprocess32 == 3.5.4 ; python_version == '2.7'\n```\n\n----------------------------------------\n\nTITLE: Testing Python Program\nDESCRIPTION: Command to run the Python program normally before compilation\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython hello.py\n```\n\n----------------------------------------\n\nTITLE: Simple Python Hello World Program\nDESCRIPTION: Basic Python program demonstrating function definition and main entry point pattern. Uses a talk() function that concatenates a string message.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef talk(message):\n    return \"Talk \" + message\n\n\ndef main():\n    print(talk(\"Hello World\"))\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Dependency for Python 3.9+\nDESCRIPTION: Adds the codespell package requirement for Python versions 3.9 and above, without fixing a specific version.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ncodespell ; python_version >= '3.9'\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Installation on Windows\nDESCRIPTION: Shows how to verify the Python installation on Windows by checking the version.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/README.rst#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Installing Git Hooks for Nuitka Development\nDESCRIPTION: Command to install the pre-commit git hook that automatically formats code according to Nuitka's development standards.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython misc/install-git-hooks.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuitka Compiler Settings in Python\nDESCRIPTION: This snippet defines various configuration options for the Nuitka compiler. It sets compiler flags, specifies the Python version, enables certain optimizations, and configures output file settings.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/distutils/example_1_setuptools/data_files/some_datafile.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# nuitka-project-if: os.path.isfile(\"../../setup.py\")\n\nimport os\n\n# The name of the package to compile\npackage_name = \"nuitka\"\n\n# Files that should be included in the compilation,\n# mainly to make sure they are available to tests.\ndata_files = [\n    \"README.rst\",\n    \"LICENSE.txt\",\n    \"CREDITS.rst\",\n    \"Requirements.txt\",\n]\n\n# Enable all warnings as errors, unless we manually disable them.\ncompiler_flags = [\"-Wall\", \"-Werror\"]\n\n# When targeting macOS older than current can produce errors.\nif os.name != \"nt\":\n    compiler_flags.append(\"-Wno-error=deprecated-declarations\")\n\n# Numpy on macOS has many deprecation warnings\nif os.name == \"posix\":\n    compiler_flags.append(\"-Wno-deprecated-declarations\")\n\n# Windows needs special handling.\nif os.name == \"nt\":\n    compiler_flags.append(\"/bigobj\")\n\n# For Python2 there is a 260 chars path limit to consider for modules.\n# for module_name in python_modules:\n#    assert len(module_name) <= 240, module_name\n\n# Specific to Nuitka:\ncompiler_flags.append(\"-Wno-error=sign-compare\")\ncompiler_flags.append(\"-Wno-error=int-in-bool-context\")\n\n# These are warnings we do not bother with specific to Nuitka:\ncompiler_flags.append(\"-Wno-error=deprecated-declarations\")\ncompiler_flags.append(\"-Wno-error=unused-function\")\ncompiler_flags.append(\"-Wno-error=unused-variable\")\ncompiler_flags.append(\"-Wno-error=redundant-decls\")\ncompiler_flags.append(\"-Wno-error=switch\")\n\n# Specific to one OS only:\ncompiler_flags.append(\"-Wno-error=cast-function-type\")\n\n# For coverage measuring, we need to preserve frame pointers.\nif \"NUITKA_COVERAGE\" in os.environ:\n    compiler_flags.append(\"-fno-omit-frame-pointer\")\n\n# To use \"nm\" need this\ncompiler_flags.append(\"-fno-lto\")\n\n# Used Python version.\npython_version = None\n\n# Enable LTO compilation in release mode.\nenable_lto = True\n\n# Disable console for this GUI app.\nenable_console = None\n\n# Use static libpython.\nstatic_libpython = not (\"NUITKA_DYNAMIC_LIBPYTHON\" in os.environ)\n\n# Debugging information level.\ndebug_level = None\n\n# Optimization level used.\noptimization_level = None\n\n# Output file.\noutput_filename = None\n\n# Make standalone.\nmake_standalone = False\n\n# Include data files.\ninclude_data_files = data_files\n\n# The Python package to compile.\npackage_name = package_name\n\n# Enable plugin for this project.\nenable_plugin_comparisons = True\nenable_plugin_pylint_warnings = True\nenable_plugin_pyside6 = True\nenable_plugin_pyqt6 = True\nenable_plugin_pyqt5 = True\nenable_plugin_gtk = True\n\n# Windows needs conservative mode enabled.\nconservative_mode = os.name == \"nt\"\n\n# Some test code is intentionally unused.\ncompiler_options = [\"-Wno-unused-function\", \"-Wno-unused-variable\"]\n\n# The deployment folder to use.\ndeployment_dir = \"@@@DEPLOYMENT_DIR@@@\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Ordered Set Dependency for Nuitka in Python\nDESCRIPTION: Defines the ordered-set or orderedset package requirement with specific versions based on the Python version and operating system. This is used to speed up Nuitka.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nordered-set == 4.1.0; python_version >= '3.7'\norderedset == 2.0.3 ; os.name != 'nt' and sys.platform != 'darwin' and python_version < '3.7'\norderedset == 2.0.3 ; os.name == 'nt' and python_version >= '3.6' and python_version < '3.7'\norderedset == 2.0.3 ; sys.platform == 'darwin' and python_version < '3.7'\n```\n\n----------------------------------------\n\nTITLE: Specifying Zstandard Dependency for Onefile Compression\nDESCRIPTION: Adds the zstandard package requirement for onefile compression on Python 3.5+.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nzstandard >= 0.15; python_version >= '3.5'\n```\n\n----------------------------------------\n\nTITLE: Implementing PackageName class in Python for Nuitka compiler\nDESCRIPTION: This class extends ModuleName to specifically represent package names in the Nuitka compiler. It implements package-specific behaviors like checking for namespace packages and retrieving parent package names.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/plugins/data_files/data_files_package/sub_dir/lulu.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PackageName(ModuleName):\n    def __init__(self, name):\n        ModuleName.__init__(self, name)\n\n        self._is_namespace = False\n\n    def markAsNamespacePackage(self):\n        self._is_namespace = True\n\n    def getChildNamed(self, name):\n        return ModuleName(self.name + \".\" + name)\n\n    def getParentPackageName(self):\n        if \"..\" not in self.name:\n            parent = self.name.rsplit(\".\", 1)[0] if \".\" in self.name else None\n\n            if parent is not None:\n                return PackageName(parent)\n            else:\n                return None\n        else:\n            return None\n\n    def hasNamespace(self):\n        return self._is_namespace\n\n    def __repr__(self):\n        return \"<%s '%s' %s>\" % (\n            self.__class__.__name__,\n            self.name,\n            \"namespace\" if self._is_namespace else \"regular\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Specifying Pytest Dependency for Testing\nDESCRIPTION: Adds the pytest package requirement for running tests on Python 2.7 or Python 3.4+.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\npytest; python_version == '2.7' or python_version >= '3.4'\n```\n\n----------------------------------------\n\nTITLE: Specifying Linting Dependencies for Python 3.9+\nDESCRIPTION: Defines dependencies for linting tools (PyLint, astroid) for Python versions 3.9 and above.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npylint == 3.0.3 ; python_version >= '3.9'\nastroid == 3.0.2 ; python_version >= '3.9'\n```\n\n----------------------------------------\n\nTITLE: Specifying ReStructuredText Linting Dependencies for Python 3.9+\nDESCRIPTION: Defines dependencies for linting ReStructuredText code snippets, including Pygments and rstcheck, for Python versions 3.9 and above.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nrestructuredtext-lint==1.4.0 ; python_version >= '3.9'\nPygments == 2.15.1 ; python_version >= '3.9'\nrstcheck == 6.2.0 ; python_version >= '3.9'\n```\n\n----------------------------------------\n\nTITLE: Specifying Doxypypy Dependency for Python 2.7+\nDESCRIPTION: Adds the doxypypy package requirement for API documentation generation using Doxygen for Python versions 2.7 and above.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndoxypypy == 0.8.8.6 ; python_version >= '2.7'\n```\n\n----------------------------------------\n\nTITLE: Specifying Pip Version Constraint for Python 2.7\nDESCRIPTION: Limits the pip version to be less than 21.0 for Python 2.7.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/requirements-devel.txt#2025-04-19_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\npip < 21.0 ; python_version == '2.7'\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Nuitka Versions in Markdown\nDESCRIPTION: This snippet shows a markdown table indicating which versions of Nuitka are currently supported for security updates. It uses checkmark emojis to denote support status.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/SECURITY.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| main    | :white_check_mark: |\n| develop | :white_check_mark: |\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dictionary Entries for Spell Checker in Plaintext\nDESCRIPTION: This snippet defines a list of custom words and phrases to be ignored by the spell checker. It includes technical terms, package names, and specific words used in the Nuitka project that might otherwise be flagged as misspellings.\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/misc/codespell-ignore.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# kind of besides the point, spell-checker: disable\nasend\ncompiletime\n# Changelog mentions of package names\nconnexion\n# operator name internally\nNotIn\n# We want to keep CODE_OF_CONDUCT verbatim\nsocio-economic\n# isort needs this as argument name\nthirdparty\n```\n\n----------------------------------------\n\nTITLE: Creating a shared memory segment\nDESCRIPTION: Shell command to create a new shared memory segment using ipcrm command\nSOURCE: https://github.com/nuitka/nuitka/blob/develop/tests/programs/pkgutil_usage/package/DATA_FILE2.txt#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nipcrm -M 0x4e554954\n```"
  }
]