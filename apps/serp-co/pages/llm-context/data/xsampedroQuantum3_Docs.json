[
  {
    "owner": "xsampedro",
    "repo": "quantum3_docs",
    "content": "TITLE: Component Type Checking in C#\nDESCRIPTION: Demonstrates how to check if an entity has a specific component type and access its data.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nif (frame.Has<Transform3D>(e)) {\n    var t = frame.Unsafe.GetPointer<Transform3D>(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Modifying Game State in C#\nDESCRIPTION: Shows how to use Quantum's auto-generated API to query and modify game state. This snippet demonstrates iterating over entities with specific components and updating their positions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/quantum-intro.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar es = frame.Filter<Transform3D, Resources>();\n// sets the entity ref and pointers to the components\nwhile (es.NextUnsafe(out var entity, out var transform, out var resources)) {\n  transform->Position += FPVector3.Forward * frame.DeltaTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Quantum Game and Adding a Player in C#\nDESCRIPTION: This code shows how to start a Quantum game asynchronously and add a player with a nickname to the online simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// this will return once the connection logic is complete (e.g. received snapshot if needed)\nvar runner = (QuantumRunner)await SessionRunner.StartAsync(sessionRunnerArguments);\n// adding player to the online simulation\nvar runtimePlayer = new RuntimePlayer { PlayerNickname = \"whiskeyjack29\" };\nrunner.Game.AddPlayer(runtimePlayer);\n```\n\n----------------------------------------\n\nTITLE: Player System Initialization\nDESCRIPTION: System implementation for handling player addition to the game, creating character entities and initializing player links when new players join the game session.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/platform-shooter-2d/further-steps.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nEntityRef character = frame.Create(prototypeAsset);\nPlayerLink* playerLink = frame.Unsafe.GetPointer<PlayerLink>(character);\nplayerLink->PlayerRef = player;\nRespawnHelper.RespawnRobot(frame, character);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Photon Client Connection in C#\nDESCRIPTION: Demonstrates how to create a basic Photon client class that connects to Photon Cloud servers. Includes connection handling, service loop implementation, and basic callback structure.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing Photon.Realtime;\nclass GameClass : IConnectionCallbacks\n{\n    private readonly LoadBalancingClient client = new LoadBalancingClient();\n    private bool quit;\n    ~GameClass()\n    {\n        this.client.Disconnect();\n        this.client.RemoveCallbackTarget(this);\n    }\n    public void StartClient()\n    {\n        this.client.AddCallbackTarget(this);\n        this.client.StateChanged += this.OnStateChange;\n        this.client.ConnectUsingSettings(new AppSettings() { AppIdRealtime = \"<your appid>\", FixedRegion = \"eu\" });\n        Thread t = new Thread(this.Loop);\n        t.Start();\n        Console.WriteLine(\"Running until key pressed.\");\n        Console.ReadKey();\n        this.quit = true;\n    }\n    private void Loop(object state)\n    {\n        while (!this.quit)\n        {\n            this.client.Service();\n            Thread.Sleep(33);\n        }\n    }\n    private void OnStateChange(ClientState arg1, ClientState arg2)\n    {\n        Console.WriteLine(arg1 + \" -> \" + arg2);\n    }\n    public void OnConnectedToMaster()\n    {\n        Console.WriteLine(\"OnConnectedToMaster Server: \" + this.client.LoadBalancingPeer.ServerIpAddress);\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Components in Quantum DSL (Qtn)\nDESCRIPTION: Demonstrates how to define a component in Quantum's Domain Specific Language (Qtn). This example creates a 'Resources' component with Mana and Health properties.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/quantum-intro.md#2025-04-23_snippet_0\n\nLANGUAGE: Qtn\nCODE:\n```\ncomponent Resources\n{\n  Int32 Mana;\n  FP Health;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection System\nDESCRIPTION: Core collision system that handles all entity collisions and routes them to appropriate handlers based on entity types.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/10-collision-detection.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing UnityEngine.Scripting;\nnamespace Quantum.Asteroids\n{\n  [Preserve]\n  public unsafe class AsteroidsCollisionsSystem : SystemSignalsOnly, ISignalOnCollisionEnter2D\n  {\n    public void OnCollisionEnter2D(Frame frame, CollisionInfo2D info)\n    {\n      // Projectile is colliding with something\n      if (frame.Unsafe.TryGetPointer<AsteroidsProjectile>(info.Entity, out var projectile))\n      {\n        if (frame.Unsafe.TryGetPointer<AsteroidsShip>(info.Other, out var ship))\n        {\n            // Projectile Hit Ship\n        }\n        else if (frame.Unsafe.TryGetPointer<AsteroidsAsteroid>(info.Other, out var asteroid))\n        {\n          // projectile Hit Asteroid\n        }\n      }\n\n      // Ship is colliding with something\n      else if (frame.Unsafe.TryGetPointer<AsteroidsShip>(info.Entity, out var ship))\n      {\n        if (frame.Unsafe.TryGetPointer<AsteroidsAsteroid>(info.Other, out var asteroid))\n        {\n          // Asteroid Hit Ship\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Component Functionality with Partial Struct\nDESCRIPTION: Shows how to extend a component's functionality by defining a partial struct in a separate C# file. This example adds an UpdateCooldown method to the Action component defined earlier.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum\n{\n    public partial struct Action\n    {\n        public void UpdateCooldown(FP deltaTime){\n            Cooldown -= deltaTime;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Quantum System Implementation\nDESCRIPTION: Template for creating a basic Quantum system class that inherits from SystemMainThread. Includes the essential Update method and required Preserve attribute.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  using Photon.Deterministic;\n  using UnityEngine.Scripting;\n  [Preserve]\n  public unsafe class NewQuantumSystem : SystemMainThread {\n    public override void Update(Frame frame) {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Max Component Count in Quantum 3\nDESCRIPTION: Demonstrates how to increase the maximum component count to 512 using a compiler define in a QTN file. This can potentially impact performance for games with high entity counts.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_15\n\nLANGUAGE: qtn\nCODE:\n```\n#pragma max_components 512\n```\n\n----------------------------------------\n\nTITLE: Custom Lateral Friction for Ball in C#\nDESCRIPTION: This code implements custom lateral friction for the ball when it bounces or rolls on the ground. It applies additional friction to control the ball's travel distance and prevent it from rolling off edges. The friction is applied separately for bounces and ground contact.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic void OnCollisionEnter3D(Frame frame, CollisionInfo3D info)\n{\n    if (frame.Unsafe.TryGetPointer(info.Entity, out BallStatus* ballStatus))\n    {\n        ballStatus->HasCollisionEnter = true;\n    }\n}\npublic void OnCollision3D(Frame frame, CollisionInfo3D info)\n{\n    if (frame.Unsafe.TryGetPointer(info.Entity, out BallStatus* ballStatus))\n    {\n        ballStatus->HasCollision = true;\n    }\n}\nprivate void HandleBallCollisions(Frame frame, ref Filter filter, BallHandlingData ballHandlingData)\n{\n    if (!filter.PhysicsBody->IsKinematic)\n    {\n        if (filter.BallStatus->HasCollisionEnter)\n        {\n            filter.PhysicsBody->Velocity.X *= ballHandlingData.LateralBounceFriction;\n            filter.PhysicsBody->Velocity.Z *= ballHandlingData.LateralBounceFriction;\n            frame.Events.OnBallBounced(filter.EntityRef);\n        }\n        if (filter.BallStatus->HasCollision)\n        {\n            filter.PhysicsBody->Velocity.X *= ballHandlingData.LateralGroundFriction;\n            filter.PhysicsBody->Velocity.Z *= ballHandlingData.LateralGroundFriction;\n        }\n    }\n    filter.BallStatus->HasCollisionEnter = false;\n    filter.BallStatus->HasCollision = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signals in Quantum DSL\nDESCRIPTION: Explains how to declare signals in Quantum DSL for inter-system communication, including usage of special types like entity_ref and passing data by reference.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_13\n\nLANGUAGE: Qtn\nCODE:\n```\nsignal OnDamage(FP damage, entity_ref entity);\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ISignalOnDamage\n{\n  public void OnDamage(Frame frame, FP damage, EntityRef entity);\n}\n```\n\nLANGUAGE: Qtn\nCODE:\n```\nsignal OnBeforeDamage(FP damage, Resources* resources);\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Structure for AsteroidsShipSystem in C#\nDESCRIPTION: Creates a Filter structure to define the components required for the ship entity in the AsteroidsShipSystem.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic struct Filter\n{\n    public EntityRef Entity;\n    public Transform2D* Transform;\n    public PhysicsBody2D* Body;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configurable Boundaries to AsteroidsGameConfig in C#\nDESCRIPTION: This code snippet adds configurable map size to the AsteroidsGameConfig, including a public field for setting the game map size and a property for accessing the map extends. It also includes a Loaded method to calculate the map extends when the config is loaded.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/7-boundaries.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[Header(\"Map configuration\")]\n[Tooltip(\"Total size of the map. This is used to calculate when an entity is outside de gameplay area and then wrap it to the other side\")]\npublic FPVector2 GameMapSize = new FPVector2(25, 25);\npublic FPVector2 MapExtends => _mapExtends;\nprivate FPVector2 _mapExtends;\n\npublic override void Loaded(IResourceManager resourceManager, Native.Allocator allocator)\n{\n    base.Loaded(resourceManager, allocator);\n    _mapExtends = GameMapSize / 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Photon Cloud and Matchmaking in C#\nDESCRIPTION: Establishes a connection to the Photon cloud and performs matchmaking to join or create a room. This is the foundational step for setting up an online Quantum session using Photon Realtime API.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionArguments = new MatchmakingArguments {\n    // The Photon application settings include information about the app.\n    PhotonSettings = PhotonServerSettings.Global.AppSettings,\n    // The plugin to request from the Photon cloud set to the Quantum plugin.\n    PluginName = \"QuantumPlugin\"\n    // Setting an explicit room name will try to create or join the room based on how CanOnlyJoin is set. The RoomName can be null to create a unique name on create.\n    RoomName = \"My Room Name\",\n    // The maximum number of clients that can connect to the room, it most cases this is equal to the max number of players in the Quantum simulation.\n    MaxPlayers = Input.MAX_COUNT,\n    // Configure if the connect request can also create rooms or if it only tries to join\n    CanOnlyJoin = false,\n    // This sets the AuthValues and should be replaced with custom authentication and setting AuthValues explicitly\n    UserId = Guid.NewGuid().ToString(),\n};\n// This line connects to the Photon cloud and performs matchmaking based on the arguments to finally enter a room.\nRealtimeClient Client = await MatchmakingExtensions.ConnectToRoomAsync(connectionArguments);\n```\n\n----------------------------------------\n\nTITLE: New Data-Driven System Setup in Quantum 3\nDESCRIPTION: Illustrates the new approach for setting up systems in Quantum 3 using the AddSystemsUser partial method. This allows for more flexible and configurable system initialization based on game modes or map selections.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/whats-new.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  using System.Collections.Generic;\n  public static partial class DeterministicSystemSetup {\n    static partial void AddSystemsUser(ICollection<SystemBase> systems, RuntimeConfig gameConfig, SimulationConfig simulationConfig, SystemsConfig systemsConfig) {\n      systems.Add(new TestSystemMainThreadGroup(\"TestSystemsGroup\", new SystemMainThread[] { new TestSystemImmediateRemoveDestroy(), }));\n      systems.Add(new TasksTestSystem());\n```\n\n----------------------------------------\n\nTITLE: FP Arithmetic Inlining\nDESCRIPTION: Shows how FP arithmetic operations can be inlined for better performance.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar v = parameter * FP._0_01;\n// inlined integer math\nFP v = default;\nv.RawValue = (parameter.RawValue * FP._0_01.RawValue) >> FPLut.PRECISION;\n```\n\n----------------------------------------\n\nTITLE: Implementing Raw Steering Calculation in C#\nDESCRIPTION: Implements the ComputeRawSteer method that handles movement calculations based on movement type. Includes handling for free fall, grounded movement, slope falls, and stationary states with velocity clamping.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ComputeRawSteer(FrameThreadSafe f, ref CharacterController3DMovement movementPack, FP dt) {\n  Grounded = movementPack.Grounded;\n  var config = f.FindAsset(Config);\n  var minYSpeed = -FP._100;\n  var maxYSpeed = FP._100;\n\n  switch (movementPack.Type) {\n\n    // FreeFall\n    case CharacterMovementType.FreeFall:\n\n      Velocity.Y -= config._gravityStrength * dt;\n\n      if (!config.AirControl || movementPack.Tangent == default(FPVector3)) {\n        Velocity.X = FPMath.Lerp(Velocity.X, FP._0, dt * config.Braking);\n        Velocity.Z = FPMath.Lerp(Velocity.Z, FP._0, dt * config.Braking);\n      } else {\n        Velocity += movementPack.Tangent * config.Acceleration * dt;\n      }\n\n      break;\n\n    // Grounded movement\n    case CharacterMovementType.Horizontal:\n\n      // apply tangent velocity\n      Velocity += movementPack.Tangent * config.Acceleration * dt;\n      var tangentSpeed = FPVector3.Dot(Velocity, movementPack.Tangent);\n\n      // lerp current velocity to tangent\n      var tangentVel = tangentSpeed * movementPack.Tangent;\n      var lerp = config.Braking * dt;\n      Velocity.X = FPMath.Lerp(Velocity.X, tangentVel.X, lerp);\n      Velocity.Z = FPMath.Lerp(Velocity.Z, tangentVel.Z, lerp);\n\n      // we only lerp the vertical velocity if the character is not jumping in this exact frame,\n      // otherwise it will jump with a lower impulse\n      if (Jumped == false) {\n        Velocity.Y = FPMath.Lerp(Velocity.Y, tangentVel.Y, lerp);\n      }\n\n      // clamp tangent velocity with max speed\n      var tangentSpeedAbs = FPMath.Abs(tangentSpeed);\n      if (tangentSpeedAbs > MaxSpeed) {\n        Velocity -= FPMath.Sign(tangentSpeed) * movementPack.Tangent * (tangentSpeedAbs - MaxSpeed);\n      }\n\n      break;\n\n    // Sliding due to excessively steep slope\n    case CharacterMovementType.SlopeFall:\n\n      Velocity += movementPack.SlopeTangent * config.Acceleration * dt;\n      minYSpeed = -config.MaxSlopeSpeed;\n\n      break;\n\n    // No movement, only deceleration\n    case CharacterMovementType.None:\n\n      var lerpFactor = dt * config.Braking;\n\n      if (Velocity.X.RawValue != 0) {\n        Velocity.X = FPMath.Lerp(Velocity.X, default, lerpFactor);\n        if (FPMath.Abs(Velocity.X) < FP.EN1) {\n          Velocity.X.RawValue = 0;\n        }\n      }\n\n      if (Velocity.Z.RawValue != 0) {\n        Velocity.Z = FPMath.Lerp(Velocity.Z, default, lerpFactor);\n        if (FPMath.Abs(Velocity.Z) < FP.EN1) {\n          Velocity.Z.RawValue = 0;\n        }\n      }\n\n      // we only lerp the vertical velocity back to 0 if the character is not jumping in this exact frame,\n      // otherwise it will jump with a lower impulse\n      if (Velocity.Y.RawValue != 0 && Jumped == false) {\n        Velocity.Y = FPMath.Lerp(Velocity.Y, default, lerpFactor);\n        if (FPMath.Abs(Velocity.Y) < FP.EN1) {\n          Velocity.Y.RawValue = 0;\n        }\n      }\n\n      minYSpeed = 0;\n\n      break;\n  }\n\n  // horizontal is clamped elsewhere\n  if (movementPack.Type != CharacterMovementType.Horizontal) {\n    var h = Velocity.XZ;\n\n    if (h.SqrMagnitude > MaxSpeed * MaxSpeed) {\n      h = h.Normalized * MaxSpeed;\n    }\n\n    Velocity.X = h.X;\n    Velocity.Y = FPMath.Clamp(Velocity.Y, minYSpeed, maxYSpeed);\n    Velocity.Z = h.Y;\n  }\n\n  // reset jump state\n  Jumped = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Character Animation Polling in Unity/Quantum\nDESCRIPTION: Demonstrates how to poll game state from Quantum and update Unity animator parameters. Shows component initialization and frame update handling for character animations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/animation.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using UnityEngine;\n  public class CharacterAnimations : QuantumEntityViewComponent\n  {\n    private Animator _animator;\n    public override void OnInitialize()\n    {\n      _animator = GetComponentInChildren<Animator>();\n    }\n    public override void OnUpdateView()\n    {\n      var kcc = PredictedFrame.Get<CharacterController3D>(EntityRef);\n      _animator.SetFloat(\"Speed\", kcc.Velocity.Magnitude.AsFloat);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NavMeshAgentTestSystem in C# for Quantum Engine\nDESCRIPTION: This code snippet demonstrates how to create a NavMeshAgent programmatically in the Quantum Engine. It sets up an entity with Transform3D, NavMeshPathfinder, and NavMeshSteeringAgent components, and configures a target position for the agent to navigate towards.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/workflow-agents.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum\n{\n  using Photon.Deterministic;\n  using UnityEngine.Scripting;\n  [Preserve]\n  public unsafe class NavMeshAgentTestSystem : SystemMainThread\n  {\n    public override void OnInit(Frame frame)\n    {\n      base.OnInit(frame);\n      var entity = frame.Create();\n      // Add a transform 3d component or 2d component\n      frame.Set(entity, new Transform3D()\n      {\n        Position = FPVector3.Zero,\n        Rotation = FPQuaternion.Identity\n      });\n      // Create the pathfinder component using the factory method, optionally pass a NavMeshAgentConfig\n      var pathfinder = NavMeshPathfinder.Create(frame, entity, null);\n      // Find the navmesh by name and set a target before adding the component\n      var navmesh = frame.Map.NavMeshes[\"Navmesh\"];\n      pathfinder.SetTarget(frame, new FPVector3(12, 0, 0), navmesh);\n      // Add the pathfinder and steering components to the entity\n      frame.Set(entity, pathfinder);\n      frame.Set(entity, new NavMeshSteeringAgent());\n    }\n    public override void Update(Frame frame)\n    {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Health Component Value Example\nDESCRIPTION: Demonstrates how to set the value of a Health component for an entity using the Frame.Get and Frame.Set methods. This example shows the pattern of getting a component, modifying it, and setting it back.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void SetHealth(Frame frame, EntityRef entity, FP value){\n    var health = frame.Get<Health>(entity);\n    health.Value = value;\n    frame.Set(entity, health);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Quantum Game Session with SessionRunner in C#\nDESCRIPTION: Shows how to start a Quantum game session using the new SessionRunner class. It configures session arguments and uses the StartAsync method to initiate the session, which returns a QuantumRunner instance.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/whats-new.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSessionRunner.Arguments sessionRunnerArguments = new SessionRunner.Arguments {\n    RunnerFactory = QuantumRunnerUnityFactory.DefaultFactory,\n    GameParameters = QuantumRunnerUnityFactory.CreateGameParameters,\n    ClientId = client.UserId,\n    RuntimeConfig = runtimeConfig,\n    SessionConfig = QuantumDeterministicSessionConfigAsset.DefaultConfig,\n    GameMode = DeterministicGameMode.Multiplayer,\n    PlayerCount = 8,\n    StartGameTimeoutInSeconds = 10,\n    Communicator = new QuantumNetworkCommunicator(client),\n};\nQuantumRunner runner = (QuantumRunner)await SessionRunner.StartAsync(sessionRunnerArguments);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Polling in Unity\nDESCRIPTION: Example implementation of the PollInput callback that reads Unity input and populates the Quantum Input struct. The input is converted to fixed point for deterministic operations before being sent to the simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n  public void PollInput(CallbackPollInput callback)\n   {\n    Quantum.Input i = new Quantum.Input();\n\n    var direction = new Vector3();\n    direction.x = UnityEngine.Input.GetAxisRaw(\"Horizontal\");\n    direction.y = UnityEngine.Input.GetAxisRaw(\"Vertical\");\n\n    i.Jump = UnityEngine.Input.GetKey(KeyCode.Space);\n\n    // convert to fixed point.\n    i.Direction = direction.ToFPVector3();\n\n    callback.SetInput(i, DeterministicInputFlags.Repeatable);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Reconnection Logic in C# for Photon-based Games\nDESCRIPTION: This code snippet demonstrates how to implement a recovery mechanism for unexpected disconnects in a Photon-based game using C#. It includes logic for determining when to reconnect, handling different types of reconnection attempts, and managing callbacks for connection events.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/troubleshooting/analyzing-disconnects.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Photon.Realtime;\npublic class RecoverFromUnexpectedDisconnectSample : IConnectionCallbacks\n{\n    private LoadBalancingClient loadBalancingClient;\n    private AppSettings appSettings;\n    public RecoverFromUnexpectedDisconnectSample(LoadBalancingClient loadBalancingClient, AppSettings appSettings)\n    {\n        this.loadBalancingClient = loadBalancingClient;\n        this.appSettings = appSettings;\n        this.loadBalancingClient.AddCallbackTarget(this);\n    }\n    ~RecoverFromUnexpectedDisconnectSample()\n    {\n        this.loadBalancingClient.RemoveCallbackTarget(this);\n    }\n    void IConnectionCallbacks.OnDisconnected(DisconnectCause cause)\n    {\n        if (this.CanRecoverFromDisconnect(cause))\n        {\n            this.Recover();\n        }\n    }\n    private bool CanRecoverFromDisconnect(DisconnectCause cause)\n    {\n        switch (cause)\n        {\n            // the list here may be non exhaustive and is subject to review\n            case DisconnectCause.Exception:\n            case DisconnectCause.ServerTimeout:\n            case DisconnectCause.ClientTimeout:\n            case DisconnectCause.DisconnectByServerLogic:\n            case DisconnectCause.DisconnectByServerReasonUnknown:\n                return true;\n        }\n        return false;\n    }\n    private void Recover()\n    {\n        if (!loadBalancingClient.ReconnectAndRejoin())\n        {\n            Debug.LogError(\"ReconnectAndRejoin failed, trying Reconnect\");\n            if (!loadBalancingClient.ReconnectToMaster())\n            {\n                Debug.LogError(\"Reconnect failed, trying ConnectUsingSettings\");\n                if (!loadBalancingClient.ConnectUsingSettings(appSettings))\n                {\n                    Debug.LogError(\"ConnectUsingSettings failed\");\n                }\n            }\n        }\n    }\n    #region Unused Methods\n    void IConnectionCallbacks.OnConnected()\n    {\n    }\n    void IConnectionCallbacks.OnConnectedToMaster()\n    {\n    }\n    void IConnectionCallbacks.OnRegionListReceived(RegionHandler regionHandler)\n    {\n    }\n    void IConnectionCallbacks.OnCustomAuthenticationResponse(Dictionary<string, object> data)\n    {\n    }\n    void IConnectionCallbacks.OnCustomAuthenticationFailed(string debugMessage)\n    {\n    }\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Component in Quantum DSL\nDESCRIPTION: Demonstrates how to define a basic component named 'Action' using Quantum's Domain Specific Language (DSL). This component has two properties: Cooldown and Power, both of type FP (Fixed Point).\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ncomponent Action\n{\n    FP Cooldown;\n    FP Power;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Quantum Command in C#\nDESCRIPTION: This snippet demonstrates how to create a basic command class that inherits from DeterministicCommand. It includes serialization of an enemy prototype reference and an execution method that creates an entity from that prototype.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using Photon.Deterministic;\n  public class CommandSpawnEnemy : DeterministicCommand\n  {\n    public AssetRefEntityPrototype EnemyPrototype;\n    public override void Serialize(BitStream stream)\n    {\n      stream.Serialize(ref EnemyPrototype);\n    }\n    public void Execute(Frame frame)\n    {\n      frame.Create(EnemyPrototype);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Polling and Handling Commands in the Simulation\nDESCRIPTION: This code shows how to implement a system that polls for commands from all players in each frame update. It retrieves commands using GetPlayerCommand and executes them if they match the expected type.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nnamespace Quantum\n{\n    public class PlayerCommandsSystem : SystemMainThread\n    {\n        public override void Update(Frame frame)\n        {\n            for (int i = 0; i < f.PlayerCount; i++)\n            {\n                 var command = frame.GetPlayerCommand(i) as CommandSpawnEnemy;\n                 command?.Execute(frame);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Input Polling Callback in Unity\nDESCRIPTION: Demonstrates how to subscribe to Quantum's PollInput callback in Unity to capture and send input to the simulation. This is placed in a MonoBehaviour's OnEnable method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n  private void OnEnable()\n  {\n    QuantumCallback.Subscribe(this, (CallbackPollInput callback) => PollInput(callback));\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame User Methods in C#\nDESCRIPTION: Shows the required partial method signatures for extending Frame.User functionality, including initialization, serialization, copying, allocation, and deallocation of frame data.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/frames.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npartial void InitUser() // Initialize the Data\npartial void SerializeUser(FrameSerializer serializer) // De/Serialize the Data\npartial void CopyFromUser(Frame frame) // Copy to next Frame\npartial void AllocUser() // Allocate space\npartial void FreeUser() // Free allocated space\n```\n\n----------------------------------------\n\nTITLE: Injecting Physics Queries in C# for Projectiles\nDESCRIPTION: Demonstrates how to inject raycast and overlap shape queries for projectiles in a Quantum3 system. It uses a custom ProjectileFilter struct and adds queries for projectile path and damage zone.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/queries.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    public unsafe struct ProjectileFilter\n    {\n        public EntityRef EntityRef;\n        public Transform3D* Transform;\n        public Projectile* Component;\n    }\n\n    public unsafe class ProjectileHitQueryInjectionSystem : SystemMainThread\n    {\n        public override void Update(Frame frame)\n        {\n            var projectileFilter = frame.Unsafe.FilterStruct<ProjectileFilter>();\n            var projectile = default(ProjectileFilter);\n\n            while (projectileFilter.Next(&projectile))\n            {\n                projectile.Component->PathQueryRef = frame.Physics3D.AddRaycastQuery(\n                    projectile.Transform->Position,\n                    projectile.Transform->Forward,\n                    projectile.Component->Speed * frame.DeltaTime);\n                var spec = frame.FindAsset<WeaponSpec>(projectile.Component->WeaponSpec.Id);\n\n                projectile.Component->DamageZoneQueryRef = frame.Physics3D.AddOverlapShapeQuery(\n                    projectile.Transform->Position,\n                    projectile.Transform->Rotation,\n                    spec.AttackShape.CreateShape(frame),\n                    spec.AttackLayers);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Room Using Async Methods in Photon Realtime API (C#)\nDESCRIPTION: This snippet demonstrates how to establish a connection and join a random room or create a new one using async/await pattern with the Photon Realtime API. It shows the clean async flow without callbacks.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar appSettings = new new AppSettings();\nvar client = new RealtimeClient();\nawait client.ConnectUsingSettingsAsync(appSettings);\nvar joinRandomRoomParams = new JoinRandomRoomArgs();\nvar enterRoomArgs = new EnterRoomArgs();\nvar result = await client.JoinRandomOrCreateRoomAsync(joinRandomRoomParams, enterRoomArgs);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Input Structure in Quantum DSL\nDESCRIPTION: Example of defining a basic input structure in Quantum DSL with a jump button and movement direction vector. This creates the foundation for deterministic input handling across all clients.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\ninput\n{\n    button Jump;\n    FPVector3 Direction;\n}\n```\n\n----------------------------------------\n\nTITLE: Frame API Usage Examples in C#\nDESCRIPTION: Shows various Frame API operations including RNG, Global access, and player input.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// RNG is a pointer.\n// Next gives a random FP between 0 and 1.\n// There are also bound options for both FP and int\nf.RNG->Next();\n// any property defined in the global {} scope in the DSL files is accessed through the Global pointer\nvar d = f.Global->DeltaTime;\n// input from a player is referenced by its index (i is a pointer to the DSL defined Input struct)\nvar i = f.GetPlayerInput(0);\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Jump Function in C#\nDESCRIPTION: Implements the Jump function that adds a vertical impulse to the character's velocity when grounded or when explicitly ignoring grounded state. Uses configuration-based or custom impulse values.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Jump(FrameBase frame, bool ignoreGrounded = false, FP? impulse = null) {\n    if (Grounded || ignoreGrounded) {\n        Velocity.Y.RawValue = impulse?.RawValue ?? frame.FindAsset<CharacterController3DConfig>(Config.Id).BaseJumpImpulse.RawValue;\n        Jumped = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Getter System Implementation in C#\nDESCRIPTION: Shows how to implement a system using ComponentGetter for accessing specific components of known entities.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe class MySpecificEntitySystem : SystemMainThread\n    struct MyFilter {\n        public EntityRef      Entity; // Mandatory member!\n        public Transform2D*   Transform2D;\n        public PhysicsBody2D* Body;\n    }\n    public override void Update(Frame frame) {\n        MyFilter result = default;\n\n        if (frame.Unsafe.ComponentGetter<MyFilter>().TryGet(frame, frame.Global->MyEntity, &result)) {\n            // Do Stuff\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Movement with Physics Bodies in C#\nDESCRIPTION: This code snippet shows an advanced movement implementation using the PhysicsBody2D component with the FlowFieldPathfinder. It applies velocity to the physics body based on rotation direction obtained from the pathfinder, allowing for more realistic movement with physics properties.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/flow-fields/navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar pathfinder  = frame.GetPointer<FlowFieldPathfinder>(entity);\nvar physicsBody = frame.GetPointer<PhysicsBody2D>(entity);\nif (pathfinder->HasDestination == false || pathfinder->AtDestination == true)\n{\n    physicsBody->Velocity = default;\n    return;\n}\nvar direction = pathfinder->GetRotationDirection(frame, entity);\nif (direction.Valid == false)\n{\n    physicsBody->Velocity = default;\n    return;\n}\nphysicsBody->Velocity = FPVector2.Rotate(FPVector2.Up, direction.Rotation) * Speed;\nphysicsBody->WakeUp();\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Animation in C# for Quantum Engine\nDESCRIPTION: Demonstrates how to set character animations based on the character controller state using QuantumEntityViewComponent. It updates animator parameters based on kinematic data from the predicted frame.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entity-view-component.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum {\n  using UnityEngine;\n  public class CharacterViewAnimations : QuantumEntityViewComponent {\n    private Animator _animator;\n    public override void OnInitialize() {\n      _animator = GetComponentInChildren<Animator>();\n    }\n    public override void OnUpdateView() {\n      // probably should use RealSpeed, but the variable isn't been written to in the KCC code currently\n      var kcc = PredictedFrame.Get<KCC>(EntityRef);\n      var kinematicSpeed = kcc.Data.KinematicVelocity.Magnitude;\n      _animator.SetFloat(\"Speed\", kinematicSpeed.AsFloat * 10);\n      _animator.SetBool(\"Jump\", kcc.Data.HasJumped);\n      _animator.SetBool(\"FreeFall\", !kcc.Data.IsGrounded);\n      _animator.SetBool(\"Grounded\", kcc.Data.IsGrounded);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PlayerConnectedSystem in C#\nDESCRIPTION: System implementation that checks player connection status using DeterministicInputFlags. Only processes input flags during verified frames to ensure data reliability.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/input-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe class PlayerConnectedSystem : SystemMainThread {\n    public override void Update(Frame frame) {\n      // only trustable in Verified frames\n      if (frame.IsVerified == false) {\n        return;\n      }\n      for (int p = 0; p < f.PlayerCount; p++) {\n        var isPlayerConnected = (frame.GetPlayerInputFlags(p) & Photon.Deterministic.DeterministicInputFlags.PlayerNotPresent) == 0;\n        // extra logic based on the player connectivity state\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Scheduling for Performance Optimization in C#\nDESCRIPTION: This code snippet demonstrates how to implement a modulo-based entity scheduling system to optimize performance in Quantum. It updates only a subset of entities each tick, reducing the total number of updates. The scheduling period and entity index are used to distribute the load across multiple frames.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Update(Frame frame) {\n  foreach (var (entity, c) in f.GetComponentIterator<Component>()) {\n    const int schedulePeriod = 5;\n    if (entity.Index % schedulePeriod == frame.Number % schedulePeriod) {\n      // it is time to update this entity\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Movement with KCC System in C#\nDESCRIPTION: Example implementation of a PlayerSystem that handles character movement using KCC. The system processes player input to control character rotation, movement direction, and jumping. It demonstrates core KCC functionality including look rotation, input direction setting, and jump mechanics.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe class PlayerSystem : SystemMainThreadFilter<PlayerSystem.Filter>\n{\n    public struct Filter\n    {\n        public EntityRef Entity;\n        public Player*   Player;\n        public KCC*      KCC;\n    }\n    public override void Update(Frame frame, ref Filter filter)\n    {\n        Player* player = filter.Player;\n        if (player->PlayerRef.IsValid == false)\n            return;\n        KCC*   kcc   = filter.KCC;\n        Input* input = frame.GetPlayerInput(player->PlayerRef);\n        kcc->AddLookRotation(input->LookRotationDelta.X, input->LookRotationDelta.Y);\n        kcc->SetInputDirection(kcc->Data.TransformRotation * input->MoveDirection.XOY);\n        if (input->Jump.WasPressed == true && kcc->IsGrounded == true)\n        {\n            kcc->Jump(FPVector3.Up * player->JumpForce);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing a List in a Command\nDESCRIPTION: This example demonstrates how to properly serialize a List<EntityRef> in a command. It includes handling both writing and reading operations in the Serialize method to ensure proper transmission of the list data.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    using System.Collections.Generic;\n    using Photon.Deterministic;\n\n    public class ExampleCommand : DeterministicCommand\n    {\n        public List<EntityRef> Entities = new List<EntityRef>();\n\n        public override void Serialize(BitStream stream)\n        {\n            var count = Entities.Count;\n            stream.Serialize(ref count);\n            if (stream.Writing)\n            {\n                foreach (var e in Entities)\n                {\n                    var copy = e;\n                    stream.Serialize(ref copy.Index);\n                    stream.Serialize(ref copy.Version);\n                }\n            }\n            else\n            {\n                for (int i = 0; i < count; i++)\n                {\n                    EntityRef readEntity = default;\n                    stream.Serialize(ref readEntity.Index);\n                    stream.Serialize(ref readEntity.Version);\n                    Entities.Add(readEntity);\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ship Fire Update System\nDESCRIPTION: Handles the firing logic for the ship, including fire rate control and projectile creation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/9-shooting.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void UpdateShipFire(Frame frame, ref Filter filter, Input* input)\n{\n    var config = frame.FindAsset(filter.AsteroidsShip->ShipConfig);\n    if (input->Fire && filter.AsteroidsShip->FireInterval <= 0)\n    {\n        filter.AsteroidsShip->FireInterval = config.FireInterval;\n        // TODO create projectile\n    }\n    else\n    {\n        filter.AsteroidsShip->FireInterval -= frame.DeltaTime;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Raycast Projectiles in C#\nDESCRIPTION: Physics system implementation for bullet trajectory calculation using incremental raycasts to prevent fast projectiles from passing through walls without CCD. Performs linecast checks and handles collision detection.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/platform-shooter-2d/further-steps.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nPhysics2D.HitCollection hits = frame.Physics2D.LinecastAll(bulletTransform->Position, futurePosition, -1, QueryOptions.HitAll | QueryOptions.ComputeDetailedInfo);\nfor (int i = 0; i < hits.Count; i++)\n{\n  var entity = hits[i].Entity;\n  ...\n  if (entity == EntityRef.None)\n  {\n    bulletTransform->Position = hits[i].Point;\n    // Applies polymorphic behavior on the bullet action\n    data.BulletAction(frame, bullet, EntityRef.None);\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing PhysicsCollider Shape at Runtime in C#\nDESCRIPTION: Demonstrates how to modify a PhysicsCollider's shape during runtime and update the associated PhysicsBody properties.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar collider = f.Get<PhysicsCollider3D>(entity);\ncollider.Shape = myNewShape;\nf.Set(entity, collider);\n```\n\n----------------------------------------\n\nTITLE: Initializing PhysicsBody3D Components in C#\nDESCRIPTION: This code shows how to create and set up Transform3D, PhysicsCollider3D, and PhysicsBody3D components for a 3D entity in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar entity = f.Create();\nvar transform = Transform3D.Create();\nvar shape = Shape3D.CreateSphere(FP._1);\nvar collider = PhysicsCollider3D.Create(shape);\nvar body = PhysicsBody3D.CreateDynamic(FP._1);\nf.Set(entity, transform);\nf.Set(entity, collider);\nf.Set(entity, body);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vehicle Component Methods\nDESCRIPTION: An implementation of a method to add nitro to a Vehicle component, demonstrating how to access the prototype values to enforce limits on runtime component values.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/materialization.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    public unsafe partial struct Vehicle\n    {\n        public void AddNitro(Frame frame, EntityRef entity, FP amount)\n        {\n            var prototype = frame.FindPrototype<Vehicle_Prototype>(Prototype);\n            Nitro = FPMath.Clamp(Nitro + amount, 0, prototype.MaxNitro);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linecast and Raycast in Quantum\nDESCRIPTION: Demonstrates how to perform linecast and raycast queries in both 2D and 3D physics systems. The code shows how to iterate through hit results and access their properties.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/queries.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// For 2D\nvar hits = f.Physics2D.LinecastAll(FPVector2.Zero, FPVector2.One);\nfor (int i = 0; i < hits.Count; i++) {\n    var hit = hits[i];\n}\n// For 3D\nvar hits = f.Physics3D.LinecastAll(FPVector3.Zero, FPVector3.One);\nfor (int i = 0; i < hits.Count; i++){\n    var hit = hits[i];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asteroid Wave Spawner System in C#\nDESCRIPTION: System implementation for spawning asteroids with random positions, rotations, and physics properties based on configuration settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nusing UnityEngine.Scripting;\nnamespace Quantum.Asteroids\n{\n    [Preserve]\n    public unsafe class AsteroidsWaveSpawnerSystem : SystemSignalsOnly\n    {\n        public void SpawnAsteroid(Frame frame, AssetRef<EntityPrototype> childPrototype)\n        {\n            AsteroidsGameConfig config = frame.FindAsset(frame.RuntimeConfig.GameConfig);\n            EntityRef asteroid = frame.Create(childPrototype);\n            Transform2D* asteroidTransform = frame.Unsafe.GetPointer<Transform2D>(asteroid);\n            asteroidTransform->Position = GetRandomEdgePointOnCircle(frame, config.AsteroidSpawnDistanceToCenter);\n            asteroidTransform->Rotation = GetRandomRotation(frame);\n            if (frame.Unsafe.TryGetPointer<PhysicsBody2D>(asteroid, out var body))\n            {\n                body->Velocity = asteroidTransform->Up * config.AsteroidInitialSpeed;\n                body->AddTorque(frame.RNG->Next(config.AsteroidInitialTorqueMin, config.AsteroidInitialTorqueMax));\n            }\n        }\n\n        public static FP GetRandomRotation(Frame frame)\n        {\n            return frame.RNG->Next(0, 360);\n        }\n        public static FPVector2 GetRandomEdgePointOnCircle(Frame frame, FP radius)\n        {\n            return FPVector2.Rotate(FPVector2.Up * radius , frame.RNG->Next() * FP.PiTimes2);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Movement System with Jump Events in Quantum\nDESCRIPTION: Shows how to implement a movement system that triggers jump events from within the Quantum simulation. Handles player input and dispatches events for animation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/animation.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    using Photon.Deterministic;\n\n    public unsafe struct PlayerMovementFilter\n    {\n        public EntityRef EntityRef;\n        public PlayerID* PlayerID;\n        public Transform3D* Transform;\n        public CharacterController3D* Kcc;\n    }\n\n    unsafe class MovementSystem : SystemMainThreadFilter<PlayerMovementFilter>\n    {\n        public override void Update(Frame frame, ref PlayerMovementFilter filter)\n        {\n            var input = frame.GetPlayerInput(filter.PlayerID->PlayerRef);\n            if (input->Jump.WasPressed)\n            {\n                frame.Events.PlayerJump(filter.EntityRef);\n                filter.Kcc->Jump(f);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Callbacks in a Quantum System for 3D KCC in C#\nDESCRIPTION: This snippet demonstrates how to implement the IKCCCallbacks3D interface in a Quantum system. It shows the structure of a system that can handle character collisions and triggers, and how to use these callbacks in the character's movement logic. The boolean return value in OnCharacterCollision3D allows for collision filtering.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using Quantum.Core;\n  using Quantum.Physics3D;\n  public unsafe class SampleSystem : SystemMainThreadFilter<SampleSystem.Filter>, IKCCCallbacks3D\n  {\n    public struct Filter\n    {\n      public EntityRef EntityRef;\n      public CharacterController3D* KCC;\n    }\n    public bool OnCharacterCollision3D(FrameBase f, EntityRef character, Hit3D hit)\n    {\n      // read the collision information to decide if this should or not be ignored\n      return true;\n    }\n    public void OnCharacterTrigger3D(FrameBase f, EntityRef character, Hit3D hit)\n    {\n    }\n    public override void Update(Frame frame, ref Filter filter)\n    {\n      // [...]\n      // adding the IKCCCallbacks3D as the last parameter (this system, in this case)\n      //CharacterController3D.Move(, input->Direction, this);\n      filter.KCC->Move(frame, filter.EntityRef, input->Direction, this);\n      // [...]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Player to Default Slot in Quantum 3\nDESCRIPTION: Demonstrates how to add a player to the default player slot (0) using the QuantumRunner in Quantum 3.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Will add the player to player slot 0\nQuantumRunner.Default.Game.AddPlayer(runtimePlayer);\n```\n\n----------------------------------------\n\nTITLE: Character Controller API Methods\nDESCRIPTION: Main API methods for the Character Controller including initialization, jump, move, and raw movement computation functions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Initialization\npublic void Init(FrameBase frame, CharacterController3DConfig config = null);\n// Jump\npublic void Jump(FrameBase frame, bool ignoreGrounded = false, FP? impulse = null);\n// Move\npublic void Move(FrameBase frame, EntityRef entity, FPVector3 direction, IKCCCallbacks3D callback = null, int? layerMask = null, Boolean? useManifoldNormal = null, FP? deltaTime = null);\n// Raw Information\npublic static CharacterController3DMovement ComputeRawMovement(Frame frame, EntityRef entity, Transform3D* transform, CharacterController3D* kcc, FPVector3 direction, IKCCCallbacks3D callback = null, int? layerMask = null, bool? useManifoldNormal = null);\n```\n\n----------------------------------------\n\nTITLE: Creating Physics Entity with Shape Configs in C#\nDESCRIPTION: Shows how to instantiate a player entity with physics components using shape configurations for both 2D and 3D scenarios.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// instantiating a player entity from the Frame object\nvar playerPrototype = f.FindAsset<EntityPrototype>(PLAYER_PROTOTYPE_PATH);\nvar playerEntity = playerPrototype.Container.CreateEntity(f);\nvar playerSpec = f.FindAsset<CharacterSpec>(\"PlayerSpec\");\nvar transform = Transform2D.Create();\nvar collider = PhysicsCollider2D.Create(playerSpec.Shape2D.CreateShape(f));\nvar body = PhysicsBody2D.CreateKinematic(playerSpec.Mass);\n// or the 3D equivalent:\nvar transform = Transform3D.Create();\nvar collider = PhysicsCollider3D.Create(playerSpec.Shape3D.CreateShape())\nvar body = PhysicsBody3D.CreateKinematic(playerSpec.Mass);\n// Set the component data\nf.Set(playerEntity, transform);\nf.Set(playerEntity, collider);\nf.Set(playerEntity, body);\n```\n\n----------------------------------------\n\nTITLE: Registering Callback Interfaces in C#\nDESCRIPTION: Shows how to register and unregister callback interfaces with LoadBalancingClient. These should be called in appropriate lifecycle methods like OnEnable/OnDisable or Start/OnDestroy in Unity MonoBehaviour.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/dotnet-callbacks.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLoadBalancingClient.AddCallbackTarget(this);\nLoadBalancingClient.RemoveCallbackTarget(this);\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Enums in Quantum DSL\nDESCRIPTION: Demonstrates how to define enums in Quantum DSL, including basic usage, explicit value assignment, and using flags. Also shows how to use enums in structs.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_9\n\nLANGUAGE: Qtn\nCODE:\n```\nenum EDamageType {\n    None, Physical, Magic\n}\nstruct StatsEffect {\n    EDamageType DamageType;\n}\n```\n\nLANGUAGE: Qtn\nCODE:\n```\nenum EModifierOperation : Byte\n{\n  None = 0,\n  Add = 1,\n  Subtract = 2\n}\n```\n\nLANGUAGE: Qtn\nCODE:\n```\nflags ETeamStatus : Byte\n{\n  None,\n  Winning,\n  SafelyWinning,\n  LowHealth,\n  MidHealth,\n  HighHealth,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Trigger Enter Callback in C#\nDESCRIPTION: Demonstrates how to implement a 3D trigger enter callback in a Quantum system. This example shows a PickUpSystem that handles item pickup when a player enters a trigger area.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/callbacks.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class PickUpSystem : SystemSignalsOnly, ISignalOnTriggerEnter3D\n{\n    public void OnTriggerEnter3D(Frame frame, TriggerInfo3D info)\n    {\n        if (!frame.Has<PickUpSlot>(info.Entity)) return;\n        if (!frame.Has<PlayerID>(info.Other)) return;\n\n        var item = frame.Get<PickUpSlot>(info.Entity).Item;\n        var itemAsset = frame.FindAsset<ItemBase>(item.Id);\n        itemAsset.OnPickUp(frame, info.Other, itemAsset);\n\n        frame.Destroy(info.Entity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Entity Creation on Verified Frames in C#\nDESCRIPTION: This code snippet demonstrates how to ensure entities are only created on verified frames in the Quantum Engine. It shows two approaches: using an if statement to check for verified frames, or an early return for predicted frames.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/entityref-hijacking.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nif(f.IsVerified) {\n    // Do stuff\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nif (f.IsPredicted)\n    return;\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a Compound Command\nDESCRIPTION: This snippet demonstrates how to create a CompoundCommand to pack multiple commands into a single transmission. This is useful when multiple commands need to be executed at the same tick, as normally commands arrive on consecutive ticks.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n    var compound = new Quantum.Core.CompoundCommand();\n    compound.Commands.Add(new FooCommand());\n    compound.Commands.Add(new BazCommand());\n    QuantumRunner.Default.Game.SendCommand(compound);\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Quantum Assets with TryGetGlobalAsset\nDESCRIPTION: Demonstrates the safe approach to accessing Quantum assets using a try-pattern that avoids exceptions when an asset reference is invalid. This pattern is useful when assets might not be available or could be null.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nif (QuantumUnityDB.TryGetGlobalAsset(myAssetRef, out CharacterSpec characterData)) {\n    FP maximumHealth = characterData.MaximumHealth;\n}\n```\n\n----------------------------------------\n\nTITLE: Raycast Optimization Guidelines\nDESCRIPTION: Best practices for optimizing raycast operations in the physics engine\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/physics-performance.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Add a LayerMask to avoid unnecessary collision evaluations with objects that don't matter.\n\n- Make the raycast distance as small as possible to avoid unnecessary collision evaluations.\n\n- Use `Raycast` instead of `RaycastAll` if only the first collision is important.\n\n- Make use of `QueryOptions` in the Raycast method to ensure it isn't hitting things that does not matter.\n```\n\n----------------------------------------\n\nTITLE: Sampling Unity Animation Curve for Quantum FPAnimationCurve\nDESCRIPTION: This method samples points from a Unity Animation Curve at a specified resolution and stores them in a Quantum FPAnimationCurve. It helps ensure deterministic evaluation of the curve in the Quantum simulation by pre-calculating sample points.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/animation-curves-baking.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void SaveQuantumCurve(AnimationCurve animationCurve, int resolution, ref FPAnimationCurve fpCurve, float startTime, float endTime)\n        {\n            if (resolution <= 0)\n                return;\n            fpCurve.Samples = new FP[resolution + 1];\n            var deltaTime = (endTime - startTime) / (float)resolution;\n            for (int i = 0; i < resolution + 1; i++)\n            {\n                var time = startTime + deltaTime * i;\n                var fp = FP.FromFloat_UNSAFE(animationCurve.Evaluate(time));\n                fpCurve.Samples[i].RawValue = fp.RawValue;\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Exceptions in C#\nDESCRIPTION: Demonstrates how to properly handle exceptions during the connection process using try-catch. This pattern helps manage errors that may occur when connecting to Photon rooms.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = default(RealtimeClient);\ntry {\n    client = await MatchmakingExtensions.ConnectToRoomAsync(connectionArguments);\n} catch (Exception e) {\n    // Something unexpected happened.\n    // In nearly all cases it's not worth to create detailed error handling. Log out the error, show generic feedback to the user and let him/her retry.\n    Debug.LogException(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Static Colliders\nDESCRIPTION: Demonstrates how to add and remove mesh colliders at runtime using the Dynamic Map API.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/dynamic-map.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// add\nvar meshColliderIndex = dynamicMap.AddMeshCollider(frame, meshCollider);\n// remove\ndynamicMap.RemoveMeshCollider(frame, meshColliderIndex);\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Processing Compound Commands\nDESCRIPTION: This code shows how to intercept compound commands in a system and process each individual command contained within. It iterates through all players, checks if their command is a CompoundCommand, and then processes each sub-command.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Update(Frame frame) {\n  for (var i = 0; i < frame.PlayerCount; i++) {\n      var compoundCommand = frame.GetPlayerCommand(i) as CompoundCommand;\n      if (compoundCommand != null) {\n        foreach (var cmd in compoundCommand.Commands) {\n          // execute individual commands logic\n        }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navmesh Baking Callback in C#\nDESCRIPTION: Implementation of a custom navmesh baking callback by extending MapDataBakerCallback class. Includes callback methods for different stages of the baking process including pre-bake, data collection, and post-bake operations. Must be placed in QuantumUser/Editor directory and requires QuantumMapBakeAssembly attribute.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/workflow-navmesh.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: Quantum.QuantumMapBakeAssembly]\nnamespace Quantum.Editor\n{\n  using System.Collections.Generic;\n  using UnityEngine;\n  public class NavmeshBakeCallback : MapDataBakerCallback\n  {\n    public override void OnBeforeBakeNavMesh(QuantumMapData data)\n    {\n      // Before any navmesh baking takes place.\n    }\n    public override void OnCollectNavMeshBakeData(QuantumMapData data, List<NavMeshBakeData> navMeshBakeData)\n    {\n      // Unity navmesh surfaces have been imported and bake data is already filled out.\n      Debug.Log($\"Found {navMeshBakeData.Count} navmesh bake data\");\n    }\n    public override void OnCollectNavMeshes(QuantumMapData data, List<NavMesh> navmeshes)\n    {\n      // Quantum navmesh have been baked.\n    }\n    public override void OnBakeNavMesh(QuantumMapData data) {\n      // Quantum navmeshes have been saved to assets.\n    }\n    // abstract methods have to be implemented but not needed here\n    public override void OnBake(QuantumMapData data) { }\n    public override void OnBeforeBake(QuantumMapData data) { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FindFriends Functionality in Photon Realtime (C#)\nDESCRIPTION: Demonstrates how to use the FindFriends operation to locate online friends and their current room. This example includes the necessary callback implementation for handling the friend list update.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/userids-and-friends.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing Photon.Realtime;\npublic class FindFriendsExample : IMatchmakingCallbacks\n{\n    private LoadBalancingClient loadBalancingClient;\n    public bool FindFriends(string[] friendsUserIds)\n    {\n        return loadBalancingClient.OpFindFriends(friendsUserIds);\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region IMatchmakingCallbacks\n    public override void IMatchmakingCallbacks.OnFriendListUpdate(List<FriendInfo> friendsInfo)\n    {\n        for(int i=0; i < friendsInfo.Count; i++)\n        {\n            FriendInfo friend = friendsInfo[i];\n            Debug.LogFormat(\"{0}\", friend);\n        }\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Quantum System State Management Example\nDESCRIPTION: Example demonstrating valid and invalid state management in Quantum systems, highlighting stateless requirements.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  public unsafe class MySystem : SystemMainThread\n  {\n    // This is ok\n    private const int _readOnlyData = 10;\n    // This is NOT ok (this data will not be rolled back, so it would lead to instant drifts between game clients during rollbacks)\n    private int _mutableData = 10;\n    public override void Update(Frame frame)\n    {\n        // it is ok to use a constant to compute something here\n        var temporaryData = _readOnlyData + 5;\n        // it is NOT ok to modify transient data that lives outside of the Frame object:\n        _transientData = 5;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Quantum Online Session in C#\nDESCRIPTION: Initializes and starts the Quantum simulation with network capabilities. This code sets up the necessary parameters for the Quantum runner including client ID, game configuration, and network communication.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n`var sessionRunnerArguments = new SessionRunner.Arguments {\n    // The runner factory is the glue between the Quantum.Runner and Unity\n    RunnerFactory = QuantumRunnerUnityFactory.DefaultFactory,\n    // Creates a default version of `QuantumGameStartParameters`\n    GameParameters = QuantumRunnerUnityFactory.CreateGameParameters,\n    // A secret user id that is for example used to reserved player slots to reconnect into a running session\n    ClientId = Client.UserId,\n    // The player data\n    RuntimeConfig = runtimeConfig,\n    // The session config loaded from the Unity asset tagged as `QuantumDefaultGlobal`\n    SessionConfig = QuantumDeterministicSessionConfigAsset.DefaultConfig,\n    // GameMode has to be multiplayer for online sessions\n    GameMode = DeterministicGameMode.Multiplayer,\n    // The number of player that the session is running for, in this case we use the code-generated max possible players for the Quantum simulation\n    PlayerCount = Input.MAX_COUNT,\n    // A timeout to fail the connection logic and Quantum protocol\n    StartGameTimeoutInSeconds = 10,\n    // The communicator will take over the network handling after the simulation has started\n    Communicator = new QuantumNetworkCommunicator(Client),\n};\n// This method completes when the client has successfully joined the online session\nQuantumRunner runner = (QuantumRunner)await SessionRunner.StartAsync(sessionRunnerArguments);\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing View Culling for Quantum Entity Views in C#\nDESCRIPTION: A sample implementation of the IQuantumEntityViewCulling interface that uses a sphere-based culling system to optimize which entities are synchronized with Unity views. The implementation filters entities based on distance from a central point and handles both 2D and 3D transforms.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entityview.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum {\n  using System.Collections.Generic;\n  using Photon.Deterministic;\n  using UnityEngine;\n  /// <summary>\n  /// Sample implementation of entity view culling using a sphere.\n  /// Add this script to the same GameObject that has the <see cref=\"QuantumEntityViewUpdater\"/>.\n  /// </summary>\n  public class QuantumEntityViewCulling : QuantumMonoBehaviour, IQuantumEntityViewCulling {\n    /// <summary>\n    /// The culling sphere center.\n    /// </summary>\n    public FPVector3 ViewCullingCenter;\n    /// <summary>\n    /// The culling radius.\n    /// </summary>\n    public FP ViewCullingRadius = 20;\n    List<(EntityRef, View)> _dynamicEntities = new List<(EntityRef, View)>();\n    List<(EntityRef, MapEntityLink)> _mapEntities = new List<(EntityRef, MapEntityLink)>();\n    /// <summary>\n    /// Only return dynamic entities inside the culling sphere.\n    /// </summary>\n    public unsafe IEnumerable<(EntityRef, View)> DynamicEntityIterator(QuantumGame game, Frame frame, QuantumEntityViewBindBehaviour createBehaviour) {\n      _dynamicEntities.Clear();\n      var radiusSqr = ViewCullingRadius * ViewCullingRadius;\n      if (createBehaviour == QuantumEntityViewBindBehaviour.NonVerified && frame.IsPredicted) {\n        // Use the prediction culling for non-verified bindings (this frame is predicted only in online mode)\n        var filter = frame.Filter<View>();\n        // Make sure to enabled prediction culling on the filter\n        filter.UseCulling = true;\n        while (filter.NextUnsafe(out var entity, out var view)) {\n          _dynamicEntities.Add((entity, *view));\n        }\n      } else {\n        // Use sphere distance check to cull entities\n        var filter3D = frame.Filter<Transform3D, View>();\n        while (filter3D.NextUnsafe(out var entity, out var transform, out var view)) {\n          var distanceSqr = (transform->Position - ViewCullingCenter).SqrMagnitude;\n          if (distanceSqr < radiusSqr) {\n            _dynamicEntities.Add((entity, *view));\n          }\n        }\n        var filter2D = frame.Filter<Transform2D, View>();\n        while (filter2D.NextUnsafe(out var entity, out var transform, out var view)) {\n          var distanceSqr = (transform->Position.XOY - ViewCullingCenter).SqrMagnitude;\n          if (distanceSqr < radiusSqr) {\n            _dynamicEntities.Add((entity, *view));\n          }\n        }\n      }\n      return _dynamicEntities;\n    }\n    /// <summary>\n    /// Only return map entities inside the culling sphere.\n    /// </summary>\n    public unsafe IEnumerable<(EntityRef, MapEntityLink)> MapEntityIterator(QuantumGame game, Frame frame, QuantumEntityViewBindBehaviour createBehaviour) {\n      _mapEntities.Clear();\n      var radiusSqr = ViewCullingRadius * ViewCullingRadius;\n      if (createBehaviour == QuantumEntityViewBindBehaviour.NonVerified && frame.IsPredicted) {\n        // Use the prediction culling for non-verified bindings (this frame is predicted only in online mode)\n        var filter = frame.Filter<MapEntityLink>();\n        // Make sure to enabled prediction culling on the filter\n        filter.UseCulling = true;\n        while (filter.NextUnsafe(out var entity, out var link)) {\n          _mapEntities.Add((entity, *link));\n        }\n      } else {\n        // Use sphere distance check to cull entities\n        var filter3D = frame.Filter<Transform3D, MapEntityLink>();\n        while (filter3D.NextUnsafe(out var entity, out var transform, out var link)) {\n          var distanceSqr = (transform->Position - ViewCullingCenter).SqrMagnitude;\n          if (distanceSqr < radiusSqr) {\n            _mapEntities.Add((entity, *link));\n          }\n        }\n        var filter2D = frame.Filter<Transform2D, MapEntityLink>();\n        while (filter2D.NextUnsafe(out var entity, out var transform, out var link)) {\n          var distanceSqr = (transform->Position.XOY - ViewCullingCenter).SqrMagnitude;\n          if (distanceSqr < radiusSqr) {\n            _mapEntities.Add((entity, *link));\n          }\n        }\n      }\n      return _mapEntities;\n    }\n    /// <summary>\n    /// Gizmo rendering of view culling sphere.\n    /// </summary>\n    public void OnDrawGizmosSelected() {\n      Gizmos.DrawWireSphere(ViewCullingCenter.ToUnityVector3(), ViewCullingRadius.AsFloat);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Character Controller Properties and Fields\nDESCRIPTION: Core properties and fields available in the CharacterController component including MaxSpeed, Velocity, Grounded status and Config reference.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic FP MaxSpeed { get; set;}\npublic FPVector3 Velocity { get; set;}\npublic bool Grounded { get; set;}\npublic AssetRef Config { get;}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Events in Quantum\nDESCRIPTION: Demonstrates how to define, trigger, and subscribe to events in Quantum for communicating between the simulation and rendering engine.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_14\n\nLANGUAGE: Qtn\nCODE:\n```\nevent MyEvent{\n  int Foo;\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nf.Events.MyEvent(2022);\n```\n\nLANGUAGE: C#\nCODE:\n```\nQuantumEvent.Subscribe(listener: this, handler: (MyEvent e) => Debug.Log($\"MyEvent {e.Foo}\"));\n```\n\n----------------------------------------\n\nTITLE: Defining a Component in Quantum DSL\nDESCRIPTION: Example of defining a basic 'Action' component with Cooldown and Power properties using Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\ncomponent Action\n{\n  FP Cooldown;\n  FP Power;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Scene Components in Unity/Quantum\nDESCRIPTION: This section shows the key scene components required for a Quantum game setup, including QuantumMap for baking entities and colliders, QuantumEntityViewUpdater for runtime entity management, and QuantumDebugInput for handling input in the deterministic engine.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/3-setting-up-a-scene.md#2025-04-23_snippet_0\n\nLANGUAGE: Unity\nCODE:\n```\nScene Components:\n- QuantumMap\n- QuantumEntityViewUpdater\n- QuantumDebugInput\n- QuantumStats\n```\n\n----------------------------------------\n\nTITLE: Implementing Wave Spawning Logic in C#\nDESCRIPTION: Additional methods for the AsteroidWaveSpawnerSystem to handle wave-based spawning of asteroids with increasing counts per wave.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void SpawnAsteroidWave(Frame frame)\n{\n    AsteroidsGameConfig config = frame.FindAsset(frame.RuntimeConfig.GameConfig);\n    for (int i = 0; i < frame.Global->AsteroidsWaveCount + config.InitialAsteroidsCount; i++)\n    {\n        SpawnAsteroid(frame, config.AsteroidPrototype);\n    }\n    frame.Global->AsteroidsWaveCount++;\n}\n\npublic override void OnInit(Frame frame)\n{\n    SpawnAsteroidWave(frame);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Map Change Signal in Quantum Engine (C#)\nDESCRIPTION: Shows how to implement the ISignalOnMapChanged interface to handle map changes in the Quantum engine. This method is called when the initial map is loaded or when the map is changed during runtime.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void OnMapChanged(Frame frame, AssetRef<Map> previousMap) {\n    // new map is frame.Map\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ball Gravity Scale in C#\nDESCRIPTION: This function updates the gravity scale of the ball after it's thrown. It uses a curve to interpolate the gravity scale from 0 to 1 over time, allowing for low passing without a parabola while maintaining realistic physics.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateBallGravityScale(Frame frame, ref Filter filter, BallHandlingData ballHandlingData)\n{\n    if (filter.BallStatus->GravityChangeTimer.IsRunning)\n    {\n        FP gravityScale = ballHandlingData.ThrowGravityChangeCurve.Evaluate(filter.BallStatus->GravityChangeTimer.NormalizedTime);\n        filter.PhysicsBody->GravityScale = gravityScale;\n        filter.BallStatus->GravityChangeTimer.Tick(frame.DeltaTime);\n        if (filter.BallStatus->GravityChangeTimer.IsDone)\n        {\n            ResetBallGravity(frame, filter.EntityRef);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic Asset Methods in Game Systems\nDESCRIPTION: Code example showing how to invoke polymorphic methods on assets from a game system, allowing for data-driven behavior without type checking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Assuming data is the pointer to a specific entity's CharacterData component, and entity is the corresponding EntityRef:\nvar spec = frame.FindAsset(data->Spec);\n// Updating Health using data-driven polymorphism (behavior depends on the data asset type and instance assigned to character\nspec.UpdateCharacter(frame, entity, data);\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Photon Room with Async API in C#\nDESCRIPTION: Demonstrates how to connect to a Photon room using the new async API in Photon Realtime 5. It sets up connection arguments and uses the ConnectToRoomAsync method to establish a connection.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/whats-new.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMatchmakingArguments connectionArguments = new MatchmakingArguments {\n    PhotonSettings = PhotonServerSettings.Default.AppSettings,\n    PluginName = \"QuantumPlugin\",\n    MaxPlayers = 8,\n    UserId = Guid.NewGuid().ToString(),\n    NetworkClient = new RealtimeClient { ClientType = ClientAppType.Quantum }\n};\nRealtimeClient client = await MatchmakingExtensions.ConnectToRoomAsync(connectionArguments);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Movement with Flow Field Pathfinder in C#\nDESCRIPTION: This code snippet demonstrates how to implement basic movement for an entity using the FlowFieldPathfinder. It checks if the pathfinder has a destination and is not already at the destination, gets the movement direction, and updates the entity's position directly using the Transform2D component.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/flow-fields/navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar pathfinder  = frame.GetPointer<FlowFieldPathfinder>(entity);\nif (pathfinder->HasDestination == false || pathfinder->AtDestination == true)\n    return;\nvar direction = pathfinder->GetDirection(frame, entity);\nif (direction.Valid == false)\n    return;\nvar transform        = frame.GetPointer<Transform2D>(entity);\ntransform->Position += direction.Direction * Speed * frame.DeltaTime;\n```\n\n----------------------------------------\n\nTITLE: Manual Callback Subscription in Pure C#\nDESCRIPTION: Demonstrates how to manually subscribe to and dispose of Quantum callbacks when working outside of a MonoBehaviour context.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nvar disposable = QuantumCallback.SubscribeManual((CallbackPollInput pollInput) => {}); // subscribes to the callback\n// ...\ndisposable.Dispose(); // disposes the callback subscription\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in the Simulation Setup\nDESCRIPTION: This snippet shows how to register command factories in the DeterministicCommandSetup class. It demonstrates adding a direct command factory and a pooled command factory for more efficient memory usage.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// CommandSetup.User.cs\nnamespace Quantum {\n  using System.Collections.Generic;\n  using Photon.Deterministic;\n  public static partial class DeterministicCommandSetup {\n    static partial void AddCommandFactoriesUser(ICollection<IDeterministicCommandFactory> factories, RuntimeConfig gameConfig, SimulationConfig simulationConfig) {\n      // user commands go here\n      // new instances will be created when a FooCommand is received (de-serialized)\n      factories.Add(new FooCommand());\n      // BazCommand instances will be acquired from/disposed back to a pool automatically\n      factories.Add(new DeterministicCommandPool<BazCommand>());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shape Cast Queries in Quantum\nDESCRIPTION: Demonstrates implementation of shape cast queries in both 2D and 3D physics systems, including shape creation and hit processing.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/queries.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// For 2D\nvar shape = Shape2D.CreateCircle(FP._1);\nvar hits = f.Physics2D.ShapeCastAll(FPVector2.Zero, FP._0, &shape, FPVector2.One);\nfor (int i = 0; i < hits.Count; i++){\n    var hit = hits[i];\n}\n// For 3D\nvar shape = Shape3D.CreateSphere(1);\nvar hits = f.Physics3D.ShapeCastAll(FPVector3.Zero, FPQuaternion.Identity, &shape, FPVector3.One);\nfor (int i = 0; i < hits.Count; i++){\n    var hit = hits[i];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Matchmaking in C# for Photon Realtime\nDESCRIPTION: This snippet shows how to implement matchmaking using the OpJoinRandomOrCreateRoom method. It sets up custom room properties and room options for creating a new room if joining a random one fails.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/quick-start.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>Called when the client arrives on the Master Server.</summary>\n/// <remarks>Part of IConnectionCallbacks.</remarks>\npublic void OnConnectedToMaster()\n{\n    this.JoinRandomOrCreateDemoRoom(Constants.MapType.Forest, 16);\n}\nprivate void JoinRandomOrCreateDemoRoom(Constants.MapType maptype, int gridSize)\n{\n    // custom room properties to use when this client creates a room\n    PhotonHashtable roomPropsForCreation = new PhotonHashtable()\n    {\n      { Constants.MapProp, maptype.ToString() },\n      { Constants.GridSizeProp, gridSize }\n    };\n    // room creation arguments\n    EnterRoomArgs enterRoomArgs = new EnterRoomArgs\n    {\n        RoomOptions = new RoomOptions\n        {\n            CustomRoomProperties = roomPropsForCreation,\n            CustomRoomPropertiesForLobby = Constants.RoomPropsInLobby\n        }\n    };\n    this.RealtimeClient.OpJoinRandomOrCreateRoom(null, enterRoomArgs);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics Callbacks via Code in C#\nDESCRIPTION: Demonstrates how to enable multiple callback types for an entity using bitwise operations on CallbackFlags. It shows setting flags for OnDynamicTrigger, OnDynamicTriggerEnter, and OnDynamicTriggerExit callbacks.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/callbacks.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nCallbackFlags flags = CallbackFlags.OnDynamicTrigger;\nflags |= CallbackFlags.OnDynamicTriggerEnter;\nflags |= CallbackFlags.OnDynamicTriggerExit;\n// for 2D\nf.Physics2D.SetCallbacks(entity, flags);\n// for 3D\nf.Physics3D.SetCallbacks(entity, flags);\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Instance in C#\nDESCRIPTION: Creates a new entity instance using the frame API. Returns an EntityRef.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = frame.Create();\n```\n\n----------------------------------------\n\nTITLE: Updating Movement Logic for Multiple Players\nDESCRIPTION: Modifies the ship movement system to use input from the linked player, allowing for multiple player control.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/5-player-spawning.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nInput* input = default;\nif(f.Unsafe.TryGetPointer(filter.Entity, out PlayerLink* playerLink))\n{\n    input = f.GetPlayerInput(playerLink->PlayerRef);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Match with JoinRandomOrCreateRoom in C#\nDESCRIPTION: Demonstrates how to implement a quick match feature using the JoinRandomOrCreateRoom method in Photon Realtime. This approach automatically joins an existing room or creates a new one if no suitable room is found.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\npublic class QuickMatchExample : IMatchmakingCallbacks\n{\n    private LoadBalancingClient loadBalancingClient;\n    private void QuickMatch()\n    {\n        loadBalancingClient.OpJoinRandomOrCreateRoom(null, null);;\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region IMatchmakingCallbacks\n    void IMatchmakingCallbacks.OnJoinedRoom()\n    {\n        // joined a room successfully\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Direction Input with Byte Encoding in Quantum DSL\nDESCRIPTION: Demonstrates a bandwidth-optimized approach for movement direction by using a single byte to encode the direction angle. This reduces input size from 16 bytes to just 1 byte.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\ninput\n{\n    Byte EncodedDirection;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SimulationConfig in C#\nDESCRIPTION: Shows how to extend the SimulationConfig class with custom fields using a partial class definition. This file is created during Quantum Unity project initialization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/config-files.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public partial class SimulationConfig : AssetObject {\n    public int Foo;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ship Movement in AsteroidsShipSystem\nDESCRIPTION: Adds a method to handle ship movement based on player input, including acceleration and rotation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void UpdateShipMovement(Frame frame, ref Filter filter, Input* input)\n{\n    FP shipAcceleration = 7;\n    FP turnSpeed = 8;\n\n    if (input->Up)\n    {\n        filter.Body->AddForce(filter.Transform->Up * shipAcceleration);\n    }\n    if (input->Left)\n    {\n        filter.Body->AddTorque(turnSpeed);\n    }\n    if (input->Right)\n    {\n        filter.Body->AddTorque(-turnSpeed);\n    }\n    filter.Body->AngularVelocity = FPMath.Clamp(filter.Body->AngularVelocity, -turnSpeed, turnSpeed);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KCC OnExit Method in C#\nDESCRIPTION: Defines the OnExit method for KCC processors, which is invoked when the KCC stops colliding with a collider. The return value controls the end of the interaction.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/processors.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual bool OnExit(KCCContext context, KCCProcessorInfo processorInfo) => true;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Event using Quantum DSL\nDESCRIPTION: Demonstrates how to define a basic event with an integer parameter using Quantum's Domain Specific Language (DSL).\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_0\n\nLANGUAGE: Qtn\nCODE:\n```\nevent MyEvent {\n    int Foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Quantum Animator API in C#\nDESCRIPTION: Demonstrates how to use the Quantum Animator API for getting and setting animator parameters in runtime. This includes examples of working with boolean, fixed point, integer, and trigger parameters.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/animator/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Getters\nAnimatorComponent.GetBoolean(frame, filter.AnimatorComponent, \"Defending\");\nAnimatorComponent.GetFixedPoint(frame, filter.AnimatorComponent, \"Direction\");\nAnimatorComponent.GetInteger(frame, filter.AnimatorComponent, \"State\");\n// Setters\nAnimatorComponent.SetBoolean(frame, filter.AnimatorComponent, \"Defending\", true);\nAnimatorComponent.SetInteger(frame, filter.AnimatorComponent, \"Direction\", 25);\nAnimatorComponent.SetFixedPoint(frame, filter.AnimatorComponent, \"Speed\", FP._1);\nAnimatorComponent.SetTrigger(frame, filter.AnimatorComponent, \"Shoot\");\n```\n\n----------------------------------------\n\nTITLE: Joining Random Room with Custom Properties in C#\nDESCRIPTION: Demonstrates how to join a random room or create a new one with custom properties using Photon's Realtime API in C#. It includes setting up a client, defining room properties, and handling callbacks for room joining and creation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// ...\npublic class MyClient : IConnectionCallbacks, IMatchmakingCallbacks\n{\n    private LoadBalancingClient loadBalancingClient;\n    public MyClient()\n    {\n        this.loadBalancingClient = new LoadBalancingClient();\n        this.loadBalancingClient.AddCallbackTarget(this);\n        // TODO: connect, call service, handle more error cases\n    }\n    // key of our \"map type\" room property\n    private static string MapProperty = \"m\";\n    // room properties available in matchmaking\n    private static string[] RoomPropsInLobby = new string[] {\"m\"};\n    // user choice, e.g. types 1 - 9\n    private byte selectedMapType = 2;\n    void MyJoinRandomOrCreateRoom()\n    {\n        // custom room properties to use when this client creates a room.\n        Hashtable mapSelectionAsProperties = new Hashtable() { { MapProperty, selectedMapType } };\n\n        // if a new room gets created, this sets the map property and makes it available in matchmaking\n        RoomOptions propertiesForRoomCreation = new RoomOptions\n                                    {\n                                        CustomRoomProperties = mapSelectionAsProperties,\n                                        CustomRoomPropertiesForLobby = RoomPropsInLobby\n                                    };\n        EnterRoomParams enterRoomParams = new EnterRoomParams\n                                    {\n                                        RoomOptions = propertiesForRoomCreation\n                                    };\n        // this defines the join random filter. rooms must match the key-values in this hashtable\n        OpJoinRandomRoomParams joinRoomParams = new OpJoinRandomRoomParams()\n                                    {\n                                        ExpectedCustomRoomProperties = mapSelectionAsProperties\n                                    };\n        this.loadBalancingClient.OpJoinRandomOrCreateRoom(joinRoomParams, enterRoomParams);\n    }\n\n    public void OnConnectedToMaster()\n    {\n        this.MyJoinRandomOrCreateRoom();\n    }\n    void IMatchmakingCallbacks.OnJoinedRoom()\n    {\n        // ...\n    }\n    void IMatchmakingCallbacks.OnCreatedRoom()\n    {\n        // only called when the room got created in addition to OnJoinedRoom()\n    }\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Simulation Plugin with DotNetSessionRunner in C#\nDESCRIPTION: Implementation of a DeterministicPluginFactory that includes server-side simulation capabilities using DotNetSessionRunner. This allows running Quantum simulation logic on the server.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/setup.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic override DeterministicPlugin CreateDeterministicPlugin(IPluginHost gameHost, String pluginName, Dictionary<String, String> config, IPluginLogger logger, ref String errorMsg) {\n  var sessionRunner = new DotNetSessionRunner {\n    AssetSerializer = new QuantumJsonSerializer()\n  };\n  return new DeterministicPlugin(new DeterministicServer(sessionRunner));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom View Context in C# for Quantum Engine\nDESCRIPTION: Demonstrates how to create a custom view context by deriving from IQuantumViewContext. This context can be used to share data between different parts of the game.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entity-view-component.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum {\n  using UnityEngine;\n  public class MyGameContext : QuantumMonoBehaviour, IQuantumViewContext {\n    public GameObject Template;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization Steps Overview\nDESCRIPTION: Core sequence of physics engine tasks that run each frame, showing the main areas for potential optimization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/physics-performance.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create physics entries for the entities in the simulation that have physics components and collect the entries.\n\n2. Broad-phase: Detect potentially overlapping pairs to be closely evaluated. This step is crucial to avoid a brute-force, O(n2) detection.\n\n3. Narrow-phase: Evaluate the previous broad-phase candidates and define which ones are overlapping. This step scales linearly with the number of potential candidates filtered by the broad-phase. This step does expensive math computations.\n\n4. Resolve velocity and position constraints using iterative solvers.\n\n5. Integrate the forces and velocities, detect sleeping bodies and resolve previous broad-phase queries.\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Patterns in Unity with Tasks (C#)\nDESCRIPTION: This comprehensive snippet demonstrates various patterns for handling exceptions in Tasks within Unity, showing which approaches properly propagate exceptions and which ones can lead to suppressed exceptions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Does NOT log exception.\n// Why? Because Unity does not handle exception inside tasks by design.\npublic Task Update1() {\n  return Task.Run(() => throw new Exception(\"peng\"));\n}\n​\n// Does NOT log exception.\n// Why? Because we return at await and continue as a task object and Unity swallows the exception.\npublic async Task Update3() {\n  await Task.Delay(100);\n  throw new Exception(\"peng\");\n}\n​\n// Logs exception.\n// Why? because we unwrap the task and run it synchronously with .Wait().\npublic void Update2() {\n  Task.Run(() => throw new Exception(\"peng\")).Wait();\n}\n// Logs exception.\n// Why? Because we resume the execution in this method and not return a task.\npublic async void Update4() {\n  await Task.Delay(100);\n  throw new Exception(\"peng\");\n}\n​\n// Logs exception.\n// Why? We add a continuation task that logs (in any thread) when the task faulted.\npublic Task Update5() {\n  var task = Task.Run(() => throw new Exception(\"peng\")).ContinueWith(t => {\n    if (t.IsFaulted) {\n      Debug.LogException(t.Exception.Flatten().InnerException);\n    };\n  });\n​\n  return task;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing PhysicsBody2D Components in C#\nDESCRIPTION: This snippet demonstrates how to create and initialize Transform2D, PhysicsCollider2D, and PhysicsBody2D components for an entity in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar entity = f.Create();\nvar transform = new Transform2D();\nvar collider = PhysicsCollider2D.Create(f, Shape2D.CreateCircle(1));\nvar body = PhysicsBody2D.CreateDynamic(1);\n\nf.Set(entity, transform);\nf.Set(entity, collider);\nf.Set(entity, body);\n```\n\n----------------------------------------\n\nTITLE: Implementing NavMesh Agent Movement Callback in C#\nDESCRIPTION: Implementation of the OnNavMeshMoveAgent callback that handles agent movement based on desired direction. Supports both 2D and 3D transforms, updating position and rotation based on the navigation system's steering output.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/workflow-agents.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void OnNavMeshMoveAgent(Frame frame, EntityRef entity, FPVector2 desiredDirection) {\n    var agent = frame.Unsafe.GetPointer<NavMeshSteeringAgent>(entity);\n    // simple demonstration how to move the agent.\n    if (frame.Has<Transform2D>(entity)) {\n        var transform = frame.Unsafe.GetPointer<Transform2D>(entity);\n        transform->Position.X.RawValue = transform->Position.X.RawValue + ((desiredDirection.X.RawValue * frame.DeltaTime.RawValue) >> FPLut.PRECISION);\n        transform->Position.Y.RawValue = transform->Position.Y.RawValue + ((desiredDirection.Y.RawValue * frame.DeltaTime.RawValue) >> FPLut.PRECISION);\n        transform->Rotation = FPVector2.RadiansSignedSkipNormalize(FPVector2.Up, desiredDirection);\n    } else if (frame.Has<Transform3D>(entity)) {\n        var transform = frame.Unsafe.GetPointer<Transform3D>(entity);\n        transform->Position.X.RawValue = transform->Position.X.RawValue + ((desiredDirection.X.RawValue * frame.DeltaTime.RawValue) >> FPLut.PRECISION);\n        transform->Position.Z.RawValue = transform->Position.Z.RawValue + ((desiredDirection.Y.RawValue * frame.DeltaTime.RawValue) >> FPLut.PRECISION);\n        var desiredRotation = FPVector2.RadiansSignedSkipNormalize(FPVector2.Up, desiredDirection);\n        transform->Rotation = FPQuaternion.AngleAxis(desiredRotation * FP.Rad2Deg, -FPVector3.Up);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Physics Body Properties After Shape Change in C#\nDESCRIPTION: Shows how to properly reset the inertia and center of mass of a PhysicsBody after changing its collider shape.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// following the snippet above\nvar body = f.Get<PhysicsBody3D>(entity);\nbody.ResetCenterOfMass(f, entity); // Needs to be called first\nbody.ResetInertia(f, entity); // Needs to be called second\nf.Set(entity, body);\n```\n\n----------------------------------------\n\nTITLE: Cached Component Getter Implementation in C#\nDESCRIPTION: Demonstrates how to implement a system with cached ComponentGetter for improved performance.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe class MySpecificEntitySystem : SystemMainThread\n    struct MyFilter {\n        public EntityRef      Entity; // Mandatory member!\n        public Transform2D*   Transform2D;\n        public PhysicsBody2D* Body;\n    }\n    ComponentGetter<MyFilter> _myFilterGetter;\n    public override void OnInit(Frame frame) {\n      _myFilterGetter = frame.Unsafe.ComponentGetter<MyFilter>();\n    }\n    public override void Update(Frame frame) {\n      MyFilter result = default;\n\n      if (_myFilterGetter.TryGet(frame, frame.Global->MyEntity, &result)) {\n        // Do Stuff\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Unions in Quantum DSL\nDESCRIPTION: Shows how to declare unions in Quantum DSL, which allow overlapping memory layouts for multiple structs. Includes examples of union declaration and usage within components.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_10\n\nLANGUAGE: Qtn\nCODE:\n```\nstruct DataA\n{\n  FPVector2 Foo;\n}\nstruct DataB\n{\n  FP Bar;\n}\nunion Data\n{\n  DataA A;\n  DataB B;\n}\n```\n\nLANGUAGE: Qtn\nCODE:\n```\ncomponent ComponentWithUnion {\n  Data ComponentData;\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UseWarriorAttack(Frame frame)\n{\n    var character = frame.Unsafe.GetPointer<Character>(entity);\n    character->Data.Warrior->ImpulseDirection = FPVector3.Forward;\n}\nprivate void ResetSpellcasterMana(Frame frame)\n{\n    var character = frame.Unsafe.GetPointer<Character>(entity);\n    character->Data.Spellcaster->Mana = FP._10;\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate bool IsWarrior(CharacterData data)\n{\n    return data.Field == CharacterData.WARRIOR;\n}\n```\n\n----------------------------------------\n\nTITLE: PhysicsBody3D Force and Impulse Application Methods in C#\nDESCRIPTION: This code snippet shows the available methods for applying external forces and impulses to a PhysicsBody3D component in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// This is the 3D API, the 2D one is identical.\npublic void AddTorque(FPVector3 amount)\npublic void AddAngularImpulse(FPVector3 amount)\npublic void AddForce(FPVector3 amount, FPVector3? relativePoint = null)\npublic void AddLinearImpulse(FPVector3 amount, FPVector3? relativePoint = null)\n// relativePoint is a vector from the body's center of mass to the point where the force is being applied, both in world space.\n// If a relativePoint is provided, the resulting Torque is computed and applied.\npublic void AddForceAtPosition(FPVector3 force, FPVector3 position, Transform3D* transform)\npublic void AddImpulseAtPosition(FPVector3 force, FPVector3 position, Transform3D* transform)\n// Applies the force/impulse at the position specified while taking into account the CoM.\n```\n\n----------------------------------------\n\nTITLE: Defining Character Movement Types and Data Structure in C#\nDESCRIPTION: Defines the CharacterController3DMovement struct and CharacterMovementType enum that store movement state and calculations. Includes properties for movement type, surface normals, tangents, correction vectors, and ground state.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum CharacterMovementType\n{\n    None, // grounded with no desired direction passed\n    FreeFall, // no contacts within the Radius\n    SlopeFall, // there is at least 1 ground contact within the Radius, specifically a contact with a normal angle vs -gravity <= maxSlopeAngle). It is possible to be \"grounded\" without this type of contact (see Grounded property in the CharacterController3DMovement)\n    Horizontal, // there is NO ground contact, but there is at least one lateral contact (normal angle vs -gravity > maxSlopeAngle)\n}\npublic struct CharacterController3DMovement\n{\n  public CharacterMovementType Type;\n\n  // the surface normal of the closest unique contact\n  public FPVector3 NearestNormal;\n\n  // the average normal from all contacts\n  public FPVector3 AvgNormal;\n\n  // the normal of the closest contact that qualifies as ground\n  public FPVector3 GroundNormal;\n\n  // the surface tangent (from GroundNormal and the derived direction) for Horizontal move, or the normalized desired direction when in CharacterMovementType.FreeFall\n  public FPVector3 Tangent;\n\n  // surface tangent computed from closest the contact normal vs -gravity (does not consider current velocity of CC itself).\n  public FPVector3 SlopeTangent;\n\n  // accumulated projected correction from all contacts within the Radius. It compensates with dot-products to NOT overshoot.\n  public FPVector3 Correction;\n\n  // max penetration of the closest contact within the Radius\n  public FP Penetration;\n\n  // uses the EXTENDED radius to assign this Boolean AND the GroundedNormalas to avoid oscilations of the grounded state when moving over slightly irregular terrain\n  public Boolean Grounded;\n\n  // number of contacts within Radius\n  public int Contacts;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Methods in Asset Classes\nDESCRIPTION: Example of using polymorphism with asset classes to implement varying behavior based on the concrete asset type, while maintaining proper data access patterns.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n  public unsafe abstract class CharacterSpec : AssetObject {\n    public FP Speed;\n    public FP MaxHealth;\n    public virtual void UpdateCharacter(Frame frame, EntityRef entity, CharacterData* data) {\n      if (data->Health < 0)\n        frame.Destroy(entity);\n    }\n  }\n  public unsafe class MageSpec : CharacterSpec {\n    public FP HealthRegenerationFactor;\n    // reads data from own instance and uses it to update transient health of Character pointer passed as param\n    public override void UpdateCharacter(Frame frame, EntityRef entity, CharacterData* data) {\n      data->Health += HealthRegenerationFactor * frame.DeltaTime;\n      base.UpdateCharacter(frame, entity, data);\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Screen Plugin in C#\nDESCRIPTION: This snippet demonstrates how to create a custom screen plugin by inheriting from QuantumMenuScreenPlugin. It overrides the Show and Hide methods to add custom functionality when a screen is displayed or hidden.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/sample-menu/sample-menu-customization.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class QuantumMenuScreenPluginFoo : QuantumMenuScreenPlugin {\n\n    public override void Show(QuantumMenuUIScreen screen) {\n      base.Show(screen);\n    }\n    public override void Hide(QuantumMenuUIScreen screen) {\n      base.Hide(screen);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending RuntimeConfig in C#\nDESCRIPTION: Shows how to extend the RuntimeConfig class with custom fields using a partial class definition. This allows adding user-specific data to the runtime configuration that will be serialized and synchronized.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/config-files.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public partial class RuntimeConfig {\n    // Add your own fields (don't use properties).\n    public int Foo;\n    // Implement DumpUserData() to add information to a debug string that is returned when using Dump().\n    partial void DumpUserData(ref String dump) {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Bot Entities in C#\nDESCRIPTION: A basic loop implementation for creating multiple bot entities based on the difference between expected and connected player counts. The code demonstrates how to fill empty player slots with bot entities.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player-replacement.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nfor(int i = 0; i < fillAmount; i++)\n{\n    // Create a new Entity here\n    // Setup it as a Bot as explained earlier on this document\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Commitment Logic in C#\nDESCRIPTION: Sample implementation of a commitment function that determines when momentum should be cancelled. Inherits from AIFunctionBool and returns boolean indicating if momentum should be cancelled.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/utility-theory.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  [System.Serializable]\n  public unsafe class SampleCommitment : AIFuncionBool\n  {\n    public override int Execute(Frame frame, EntityRef entity, ref AIContext aiContext)\n    {\n      return false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Commands from Unity View\nDESCRIPTION: This code demonstrates how to send a command from a Unity MonoBehaviour. It creates a new CommandSpawnEnemy instance, sets its properties, and sends it using the QuantumRunner's Game.SendCommand method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using UnityEngine;\n  public class EnemySpawnerUI : MonoBehaviour\n  {\n    [SerializeField] private AssetRefEntityPrototype _enemyPrototype;\n    public void SpawnEnemy()\n    {\n      CommandSpawnEnemy command = new CommandSpawnEnemy()\n      {\n        EnemyPrototype = _enemyPrototype,\n      };\n      QuantumRunner.Default.Game.SendCommand(command);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a System for Dynamic List Management in C#\nDESCRIPTION: Example of a C# system class 'HandleTargets' that manages the lifecycle and usage of a dynamic list in a Quantum component.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  public unsafe class HandleTargets : SystemMainThread, ISignalOnComponentAdded<Targets>, ISignalOnComponentRemoved<Targets>\n  {\n    public override void Update(Frame frame)\n    {\n      foreach (var (entity, component) in frame.GetComponentIterator<Targets>()) {\n        // To use a list, you must first resolve its pointer via the frame\n        var list = frame.ResolveList(component.Enemies);\n        // Do stuff\n      }\n    }\n    public void OnAdded(Frame frame, EntityRef entity, Targets* component)\n    {\n      // allocating a new List (returns the blittable reference type - QListPtr)\n        component->Enemies = frame.AllocateList<EntityRef>();\n    }\n\n    public void OnRemoved(Frame frame, EntityRef entity, Targets* component)\n    {\n      // A component HAS TO de-allocate all collection it owns from the frame data, otherwise it will lead to a memory leak.\n      // receives the list QListPtr reference.\n      frame.FreeList(component->Enemies);\n\n      // All dynamic collections a component points to HAVE TO be nullified in a component's OnRemoved\n      // EVEN IF is only referencing an external one!\n      // This is to prevent serialization issues that otherwise lead to a desynchronisation.\n      component->Enemies = default;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Color Change Event in C# using Photon Realtime API\nDESCRIPTION: This snippet demonstrates how to send a color change event for a player using the Photon Realtime API. It includes setting up event arguments, options, and calling the OpRaiseEvent method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/quick-start.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void ChangeLocalPlayerColor()\n{\n    if (this.LocalPlayer != null)\n    {\n        this.LocalPlayer.RandomizeColor();\n\n        RaiseEventArgs raiseEventArgs = new RaiseEventArgs() { CachingOption = EventCaching.AddToRoomCache };\n        SendOptions sendOptions = new SendOptions() { Reliability = this.SendReliable };\n        this.RealtimeClient.OpRaiseEvent(Constants.EvColor, this.LocalPlayer.WriteEvColor(), raiseEventArgs, sendOptions);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Players in Quantum using MonoBehaviour in C#\nDESCRIPTION: This class demonstrates how to add runtime players to a Quantum game by subscribing to the CallbackGameStarted event and using the AddPlayer method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class QuantumAddRuntimePlayers : QuantumMonoBehaviour {\n  public RuntimePlayer[] Players;\n  public void Awake() {\n    QuantumCallback.Subscribe(this, (CallbackGameStarted c) => OnGameStarted(c.Game, c.IsResync), game => game == QuantumRunner.Default.Game);\n  }\n  public void OnGameStarted(QuantumGame game, bool isResync) {\n    for (int i = 0; i < Players.Length; i++) {\n      game.AddPlayer(i, Players[i]);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LoadBalancing Client Workflow Example\nDESCRIPTION: Example showing the basic workflow for implementing a LoadBalancingClient, including connection, room management, and event handling. Shows core methods and callbacks that need to be implemented.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/dotnet-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLoadBalancingClient client;\nclient.Service(); // call regularly\nclient.Connect();\n// Handle in OnStatusChanged: StatusCode.Connect\nclient.OpJoinRoom();\n// Handle in OnOperationResponse: OperationCode.Join\nclient.OpRaiseEvent();\n// Handle events in OnEvent\nclient.OpLeave();\n// Handle in OnOperationResponse: OperationCode.Leave\nclient.Disconnect();\n// Handle in OnStatusChanged: StatusCode.Disconnect\n```\n\n----------------------------------------\n\nTITLE: Adding Character Controller Components in C#\nDESCRIPTION: Code examples showing how to programmatically add and initialize both 2D and 3D Character Controller components to an entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// 2D KCC\nvar kccConfig = frame.FindAsset<CharacterController2DConfig>(KCC_CONFIG_PATH);\nvar kcc = new CharacterController2D();\nkcc.Init(frame, kccConfig)\nf.Add(entity, kcc);\n// 3D KCC\nvar kccConfig = frame.FindAsset<CharacterController3DConfig>(KCC_CONFIG_PATH);\nvar kcc = new CharacterController3D();\nkcc.Init(frame, kccConfig)\nf.Add(entity, kcc);\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Movement Function in C#\nDESCRIPTION: Implements the Move function that calculates final character position based on current state, direction, gravity, jumps, and slopes. Uses ComputeRawMovement and applies necessary corrections for penetration.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Move(Frame frame, EntityRef entity, FPVector3 direction, IKCCCallbacks3D callback = null, int? layerMask = null, Boolean? useManifoldNormal = null, FP? deltaTime = null) {\n  Assert.Check(frame.Has<Transform3D>(entity));\n  var transform = frame.GetPointer<Transform3D>(entity);\n  var dt        = deltaTime ?? frame.DeltaTime;\n  CharacterController3DMovement movementPack;\n  fixed (CharacterController3D* thisKcc = &this) {\n    movementPack = ComputeRawMovement(frame, entity, transform, thisKcc, direction, callback, layerMask, useManifoldNormal);\n  }\n  ComputeRawSteer(frame, ref movementPack, dt);\n  var movement = Velocity * dt;\n  if (movementPack.Penetration > FP.EN3) {\n    var config = frame.FindAsset<CharacterController3DConfig>(Config.Id);\n    if (movementPack.Penetration > config.MaxPenetration) {\n      movement += movementPack.Correction;\n    } else {\n      movement += movementPack.Correction * config.PenetrationCorrection;\n    }\n  }\n  transform->Position += movement;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Static Collider States with Collision Handling\nDESCRIPTION: Demonstrates initialization of collider states and handling trigger events for static colliders, including state management through bitsets.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/statics.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// loops through the bitset to initialize all bits as \"On\" to mark all colliders as active\npublic override void OnInit(Frame frame)\n{\n    var collidersState = frame.Unsafe.GetPointerSingleton<StaticColliderState>();\n    for (int i = 0; i < collidersState->colliders.Length; i++) {\n        collidersState->colliders.Set(i);\n    }\n}\npublic void OnTrigger3D(Frame frame, TriggerInfo3D info)\n{\n    if (info.IsStatic == false) return;\n    // Use a custom asset slotted in the UserAsset field to identify toggleable colliders\n    var colliderAsset = frame.FindAsset<MyColliderAsset>(info.StaticData.Asset);\n    if (colliderAsset == null) return;\n\n    var collidersState = frame.Unsafe.GetPointerSingleton<StaticColliderState>();\n    collidersState->colliders.Clear(info.StaticData.ColliderIndex);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Room with Custom Properties for Lobby in C#\nDESCRIPTION: Demonstrates how to create a room with custom properties that are visible in the lobby for matchmaking purposes. This example sets up properties for map, game mode, and AI, which can be used as filters for random matchmaking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\nusing Hashtable = ExitGames.Client.Photon.Hashtable;\npublic class CreateRoomWithLobbyPropertiesExample : IMatchmakingCallbacks\n{\n    public const string MAP_PROP_KEY = \"map\";\n    public const string GAME_MODE_PROP_KEY = \"gm\";\n    public const string AI_PROP_KEY = \"ai\";\n    private LoadBalancingClient loadBalancingClient;\n    private void CreateRoom()\n    {\n        RoomOptions roomOptions = new RoomOptions();\n        roomOptions.CustomRoomPropertiesForLobby = { MAP_PROP_KEY, GAME_MODE_PROP_KEY, AI_PROP_KEY };\n        roomOptions.CustomRoomProperties = new Hashtable { { MAP_PROP_KEY, 1 }, { GAME_MODE_PROP_KEY, 0 } };\n        EnterRoomParams enterRoomParams = new EnterRoomParams();\n        enterRoomParams.RoomOptions = roomOptions;\n        loadBalancingClient.OpCreateRoom(enterRoomParams);\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region IMatchmakingCallbacks\n    void IMatchmakingCallbacks.OnCreateRoomFailed(short returnCode, string message)\n    {\n       // log error message and code\n    }\n    void IMatchmakingCallbacks.OnCreatedRoom()\n    {\n    }\n    void IMatchmakingCallbacks.OnJoinedRoom()\n    {\n        // joined a room successfully, OpCreateRoom leads here on success\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Grid System in Frame.User\nDESCRIPTION: Demonstrates a practical example of implementing Frame.User extension with a byte array grid system, including initialization, serialization, and copying functionality.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/frames.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n\n    unsafe partial class Frame    {\n        public byte[] Grid => _grid;\n        private byte[] _grid;\n        partial void InitUser() {\n            _grid = new byte[RuntimeConfig.GridSize];\n        }\n        partial void SerializeUser(FrameSerializer serializer)\n        {\n            serializer.Stream.SerializeArrayLength<Byte>(ref _grid);\n            for (int i = 0; i < Grid.Length; i++)\n            {\n                serializer.Stream.Serialize(ref Grid[i]);\n            }\n        }\n        partial void CopyFromUser(Frame frame)\n        {\n            Array.Copy(frame._grid, _grid, frame._grid.Length);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BTAgent Initialization in C#\nDESCRIPTION: Shows how to add a BTAgent component to an entity and initialize it with a behavior tree root.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar btAgent = new BTAgent();\nf.Set(myEntity, brAgent);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar btRootAsset = f.FindAsset<BTRoot>(btReference.Id);\nBTManager.Init(f, myEntity, btRoot);\n```\n\n----------------------------------------\n\nTITLE: Toggling CCD on Physics Body Component\nDESCRIPTION: Code example demonstrating how to enable or disable CCD for a specific entity's PhysicsBody component during runtime.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/ccd.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar physicsBody = f.Unsafe.GetPointer<PhysicsBody3D>(myEntityRef);\nphysicsBody->UseContinuousCollisionDetection = true;\n```\n\n----------------------------------------\n\nTITLE: Signal Definition in C#\nDESCRIPTION: Example of defining a signal in DSL for damage events.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nsignal OnDamage(FP damage, entity_ref entity);\n```\n\n----------------------------------------\n\nTITLE: Runtime Navmesh Replacement in Quantum\nDESCRIPTION: This implementation shows a complete solution for replacing a navmesh during game start or resync. It uses QuantumCallbacks to hook into game lifecycle events and replaces a dummy navmesh with a runtime-generated one. It includes a ScriptableObject for storing BakeData and a helper method for replacing navmesh properties.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/customized-navmesh.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  using Quantum.Experimental;\n  public class RuntimeNavmeshBaking : QuantumCallbacks {\n    public override void OnGameStart(QuantumGame game) {\n      // In this sample the bake data has already been created, but it should be assembled during runtime\n      var bakeData = UnityEngine.Resources.Load<BakeDataSO>(\"BakeData\");\n      ReplaceNavmesh(game.Frames.Verified.Map, 1356438205741681193, bakeData.BakeData);\n    }\n    public override void OnGameResync(QuantumGame game) {\n      var bakeData = UnityEngine.Resources.Load<BakeDataSO>(\"BakeData\");\n      ReplaceNavmesh(game.Frames.Verified.Map, 1356438205741681193, bakeData.BakeData);\n    }\n    private static void ReplaceNavmesh(Map map, AssetGuid navmeshGuid, NavmeshBakeData bakeData) {\n      var newNavmesh = NavmeshBaker.BakeNavMesh(map, bakeData);\n      var navmeshAsset = UnityDB.FindAsset<NavMeshAsset>(navmeshGuid);\n      // cannot change name or regions without manipulating the map too\n      navmeshAsset.Settings.GridSizeX = newNavmesh.GridSizeX;\n      navmeshAsset.Settings.GridSizeY = newNavmesh.GridSizeY;\n      navmeshAsset.Settings.GridNodeSize = newNavmesh.GridNodeSize;\n      navmeshAsset.Settings.WorldOffset = newNavmesh.WorldOffset;\n      navmeshAsset.Settings.MinAgentRadius = newNavmesh.MinAgentRadius;\n      navmeshAsset.Settings.Triangles = newNavmesh.Triangles;\n      navmeshAsset.Settings.TrianglesGrid = newNavmesh.TrianglesGrid;\n      navmeshAsset.Settings.Vertices = newNavmesh.Vertices;\n      navmeshAsset.Settings.BorderGrid = newNavmesh.BorderGrid;\n      navmeshAsset.Settings.TrianglesCenterGrid = newNavmesh.TrianglesCenterGrid;\n      navmeshAsset.Settings.Borders = newNavmesh.Borders;\n      navmeshAsset.Settings.Links = newNavmesh.Links;\n    }\n  }\n}\nnamespace Quantum {\n  using Quantum.Experimental;\n  using UnityEngine;\n  public class BakeDataSO : ScriptableObject {\n    public NavmeshBakeData BakeData;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global RNG in Quantum System\nDESCRIPTION: Demonstrates how to generate random numbers using the global RNGSession from frame globals within a system's OnInit method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/rngsession.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// inside of a system\npublic override void OnInit(Frame frame)\n{\n    int randomNum = frame.RNG->Next(0, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Blackboard Values in Quantum C#\nDESCRIPTION: Examples of reading and writing Blackboard values using both hardcoded keys and Blackboard node keys in Quantum C#. Shows variable access patterns and proper syntax for different approaches.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/blackboard.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// -- Using hardcoded keys --\nvar bbComponent = f.Unsafe.GetPointer<AIBlackboardComponent>(entityRef);\n// Reading\nvar value = bbComponent->GetInteger(frame, \"someKey\");\n// Writing\nbbComponent->Set(frame, \"someKey\", value);\n// -- Using keys from Blackboard nodes --\npublic AIBlackboardValueKey PickupsKey;\n// Reading\nvar value = bbComponent->GetInteger(frame, PickupsKey.Key);\n// Writing\nbbComponent->Set(frame, PickupsKey.Key, value);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Event in Unity\nDESCRIPTION: Illustrates how to subscribe to and handle a Quantum event within a Unity script.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nQuantumEvent.Subscribe(listener: this, handler: (EventMyEvent e) => Debug.Log($\"MyEvent {e.Foo}\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Character System with Frame Timer\nDESCRIPTION: Complete example showing how to implement a character system using FrameTimer for skill cooldown management.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/frame-timer.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using Photon.Deterministic;\n  using UnityEngine.Scripting;\n\n  [Preserve]\n  public unsafe class CharacterSystem : SystemMainThreadFilter<CharacterSystem.Filter> {\n    public struct Filter {\n      public EntityRef Entity;\n      public Character* Character;\n    }\n    public override void Update(Frame frame, ref Filter filter)\n        var character = filter.Character;\n        if (character->SkillCooldown.IsRunning(frame) == false) {\n            // Execute skill and reset the cooldown\n            // Reset the cooldown by creating a new timer\n            character->SkillCooldown = FrameTimer.FromSeconds(frame, 2);\n            // Reset the cooldown by restarting the timer.\n            // BUT this requires that the timer was set at a previous time, for example when adding the component.\n            character->SkillCooldown.Restart(frame);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dash Ability Movement Implementation in C#\nDESCRIPTION: Implementation of the dash ability movement using an animation curve. The code calculates relative position changes to allow for multiple movement effects to stack and to work with the character controller collision system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nif (abilityState.IsActive)\n{\n    AbilityInventory* abilityInventory = frame.Unsafe.GetPointer<AbilityInventory>(entityRef);\n    Transform3D* transform = frame.Unsafe.GetPointer<Transform3D>(entityRef);\n    CharacterController3D* kcc = frame.Unsafe.GetPointer<CharacterController3D>(entityRef);\n    FP lastNormalizedPosition = DashMovementCurve.Evaluate(lastNormalizedTime);\n    FPVector3 lastRelativePosition = abilityInventory->ActiveAbilityInfo.CastDirection * DashDistance * lastNormalizedPosition;\n    FP newNormalizedTime = ability.DurationTimer.NormalizedTime;\n    FP newNormalizedPosition = DashMovementCurve.Evaluate(newNormalizedTime);\n    FPVector3 newRelativePosition = abilityInventory->ActiveAbilityInfo.CastDirection * DashDistance * newNormalizedPosition;\n    transform->Position += newRelativePosition - lastRelativePosition;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vehicle Component in Quantum DSL\nDESCRIPTION: A Quantum DSL example showing a Vehicle component definition where most parameters are excluded from the prototype using the ExcludeFromPrototype attribute to keep the game state slim.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/materialization.md#2025-04-23_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\ncomponent Vehicle\n{\n    [ExcludeFromPrototype]\n    ComponentPrototypeRef Prototype;\n    [ExcludeFromPrototype]\n    Byte Flags;\n    [ExcludeFromPrototype]\n    FP Speed;\n    [ExcludeFromPrototype]\n    FP ForwardSpeed;\n    [ExcludeFromPrototype]\n    FPVector3 EngineForce;\n    [ExcludeFromPrototype]\n    FP WheelTraction;\n    [ExcludeFromPrototype]\n    FPVector3 AvgNormal;\n    [ExcludeFromPrototype]\n    array<Wheel>[4] Wheels;\n    FP Nitro;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BoundarySystem in C# for Quantum Asteroids\nDESCRIPTION: This code defines a BoundarySystem that checks if entities are within bounds and teleports them to the opposite side if they leave the screen. It includes a method to determine if a position is out of bounds and calculate the new position.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/7-boundaries.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing UnityEngine.Scripting;\nusing Photon.Deterministic;\nnamespace Quantum.Asteroids\n{\n    [Preserve]\n    public unsafe class BoundarySystem : SystemMainThreadFilter<BoundarySystem.Filter>\n    {\n        public struct Filter\n        {\n            public EntityRef Entity;\n            public Transform2D* Transform;\n        }\n        public override void Update(Frame frame, ref Filter filter)\n        {\n            if (IsOutOfBounds(filter.Transform->Position, new FPVector2(10, 10), out FPVector2 newPosition))\n            {\n                filter.Transform->Position = newPosition;\n                filter.Transform->Teleport(frame, newPosition);\n            }\n        }\n\n        /// <summary>\n        /// Test if a position is out of bounds and provide a warped position.\n        /// When the entity leaves the bounds it will emerge on the other side.\n        /// </summary>\n        public bool IsOutOfBounds(FPVector2 position, FPVector2 mapExtends, out FPVector2 newPosition)\n        {\n            newPosition = position;\n            if (position.X >= -mapExtends.X && position.X <= mapExtends.X &&\n                position.Y >= -mapExtends.Y && position.Y <= mapExtends.Y)\n            {\n                // position is inside map bounds\n                return false;\n            }\n            // warp x position\n            if (position.X < -mapExtends.X)\n            {\n                newPosition.X = mapExtends.X;\n            }\n            else if (position.X > mapExtends.X)\n            {\n                newPosition.X = -mapExtends.X;\n            }\n            // warp y position\n            if (position.Y < -mapExtends.Y)\n            {\n                newPosition.Y = mapExtends.Y;\n            }\n            else if (position.Y > mapExtends.Y)\n            {\n                newPosition.Y = -mapExtends.Y;\n            }\n            return true;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Async Asset Loading Implementation in C#\nDESCRIPTION: Implements a custom async asset loading system using IQuantumAssetObjectSource interface. Includes async asset creation and management with task-based operations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic void AddCustomAsset(AssetGuid guid) {\n  var source = new AsyncAssetObjectSource() {\n    AssetType = typeof(CharacterSpec), Factory = () => LazyCreateCharacterSpec(guid)\n  };\n  QuantumUnityDB.Global.AddSource(source, guid);\n}\n\nprivate async Task<AssetObject> LazyCreateCharacterSpec(AssetGuid guid) {\n  // create asset before the await, as this needs to be done in the main thread\n  var asset = ScriptableObject.CreateInstance<CharacterSpec>();\n  asset.MaxHealth = 100;\n\n  // task will resume on a different thread; we don't want to enter the main thread as the main thread may be blocked with\n  // the DB waiting\n  await Task.Delay(1000).ConfigureAwait(false);\n  return asset;\n}\n\npublic class AsyncAssetObjectSource : IQuantumAssetObjectSource {\n  private Task<AssetObject> _task;\n\n  public Func<Task<AssetObject>> Factory { get; set; }\n  public Type AssetType { get; set; }\n\n  public void Acquire(bool synchronous) => _task = Factory();\n  public void Release() => _task = null;\n  public AssetObject WaitForResult() => _task.Result;\n\n  public bool IsCompleted => _task?.IsCompleted == true;\n  public string Description => $\"AsyncAssetObjectSource: {AssetType}\";\n  public AssetObject EditorInstance => null; // no support for editor instance\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Mouse Input with Vector2Accumulator in C#\nDESCRIPTION: Demonstrates how to implement smooth mouse input handling using the Vector2Accumulator utility class. The code shows two options for consuming smoothed mouse delta: either aligned to render time or Quantum frame time. The implementation includes a 20ms smoothing window and proper input accumulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/input.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PlayerInput : MonoBehaviour\n{\n    // Creates an accumulator with 20ms smoothing window.\n    private Vector2Accumulator _lookRotationAccumulator = new Vector2Accumulator(0.02f, true);\n    private void Update()\n    {\n        Vector2 mouseDelta = Mouse.current.delta.ReadValue();\n        _lookRotationAccumulator.Accumulate(mouseDelta);\n    }\n\n    private void PollInput(CallbackPollInput callback)\n    {\n        Quantum.Input input = new Quantum.Input();\n\n        // 1. Option - consume whole smoothed mouse delta which is aligned to render time.\n        // input.LookRotationDelta = _lookRotationAccumulator.Consume();\n\n        // 2. Option (better) - consume smoothed mouse delta which is aligned to Quantum frame time.\n        // This variant ensures smooth interpolation when look rotation propagates to transform.\n        input.LookRotationDelta = _lookRotationAccumulator.ConsumeFrameAligned(callback.Game);\n        callback.SetInput(input, DeterministicInputFlags.Repeatable);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Iteration Example in C#\nDESCRIPTION: Demonstrates how to iterate through filtered components using both safe and unsafe approaches.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nwhile (filtered.Next(out var e, out var t, out var b)) {\n  t.Position += FPVector3.Forward * frame.DeltaTime;\n  frame.Set(e, t);\n}\n\nwhile (filtered.UnsafeNext(out var e, out var t, out var b)) {\n  t->Position += FPVector3.Forward * frame.DeltaTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Entity View Destruction in C#\nDESCRIPTION: Shows how to override the DestroyEntityViewInstance method to return views to an object pool instead of destroying them. This is useful for implementing efficient object pooling in Quantum 3.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entityview.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprotected virtual void DestroyEntityViewInstance(QuantumEntityView instance) {\n    _myObjectPool.ReturnInstance(instance);\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Event Subscription in C# Outside MonoBehaviour\nDESCRIPTION: Shows how to manually subscribe to and dispose of Quantum events when working outside of a MonoBehaviour context.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nvar disposable = QuantumEvent.SubscribeManual((EventPlayerHit e) => {}); // subscribes to the event\n// ...\ndisposable.Dispose(); // disposes the event subscription\n```\n\n----------------------------------------\n\nTITLE: Serializing an Array in a Command\nDESCRIPTION: This code shows how to serialize an array of EntityRef objects in a command. It uses the SerializeArrayLength method to handle the array size and then serializes each element individually.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    using Photon.Deterministic;\n\n    public class ExampleCommand : DeterministicCommand\n    {\n        public EntityRef[] Entities;\n\n        public override void Serialize(BitStream stream)\n        {\n            stream.SerializeArrayLength(ref Entities);\n            for (int i = 0; i < Cars.Length; i++)\n            {\n                EntityRef e = Entities[i];\n                stream.Serialize(ref e.Index);\n                stream.Serialize(ref e.Version);\n                Entities[i] = e;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Master Client Switch Event in C#\nDESCRIPTION: Callback method that gets triggered whenever the Master Client role changes to a new player in a Photon room. This method is part of the IInRoomCallbacks interface.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/hostmigration.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid IInRoomCallbacks.OnMasterClientSwitched(Player newMasterClient)\n```\n\n----------------------------------------\n\nTITLE: Triggering Signals in C#\nDESCRIPTION: Shows how to trigger a signal from a system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n// any System can trigger the generated signal, not leading to coupling with a specific implementation\nf.Signals.OnDamage(10, entity)\n```\n\n----------------------------------------\n\nTITLE: Quantum Game Player Management API in C#\nDESCRIPTION: This code snippet shows the QuantumGame class API for adding and removing players, including methods for specific player slots and removing all players.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass QuantumGame {\n  // Sends player data to the server and request adding a player (using player slot 0)\n  void AddPlayer(RuntimePlayer data);\n  // Sends player data a certain for player slot to the server\n  void AddPlayer(int playerSlot, RuntimePlayer data);\n  // Request removing player slot 0\n  void RemovePlayer();\n  // Removing certain player float\n  void RemovePlayer(int playerSlot);\n  // Remove all players that belong to this client\n  void RemoveAllPlayers();\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Navmesh Before Game Start in Quantum\nDESCRIPTION: This snippet shows how to replace a navmesh asset with a procedurally generated one before the game starts. It loads a reference navmesh asset, replaces its content with the new navmesh while preserving the GUID and path, and invalidates the data asset to prevent deserialization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/customized-navmesh.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// BakeData needs to be procedurally generated\nvar bakeData = default(NavmeshBakeData);\nvar newNavmesh = NavmeshBaker.BakeNavMesh(map, bakeData);\n// Load navmesh asset to replace\nvar navmeshAsset = UnityEngine.Resources.Load<NavMeshAsset>(\"DB/TestNavMeshAgents/NavMeshToReplace\");\n// Replace the navmesh content\nnewNavmesh.Guid = navmeshAsset.Settings.Guid;\nnewNavmesh.Path = navmeshAsset.Settings.Path;\nnavmeshAsset.Settings = newNavmesh;\n// Invalidate the navmesh data (because it has been generated during runtime it's already loaded)\nnavmeshAsset.Settings.DataAsset.Id = AssetGuid.Invalid;\nnavmeshAsset.Settings.Name = \"MyNavmesh\";\n// QuantumRunner.StartGame()\n```\n\n----------------------------------------\n\nTITLE: Implementing StepUpProcessor in C# for KCC\nDESCRIPTION: Demonstrates the implementation of a StepUpProcessor class that inherits from KCCProcessor and implements the IAfterMoveStep interface. This processor is responsible for detecting and handling step-up scenarios in character movement.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/processors.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic unsafe class StepUpProcessor : KCCProcessor, IAfterMoveStep\n{\n    public void AfterMoveStep(KCCContext context, KCCProcessorInfo processorInfo, KCCOverlapInfo overlapInfo)\n    {\n        // 1. Detect blocking geometry\n        // 2. Push character upwards based on unapplied movement.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unit Velocity with FlowFieldPathfinder in Quantum C#\nDESCRIPTION: This snippet demonstrates how units are moved by setting their velocity based on data provided by the FlowFieldPathfinder. This is part of the movement system in the advanced example.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/flow-fields-sample.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// In the movement system\nVector3 velocity = FlowFieldPathfinder.GetVelocity(unit.Position);\nunit.Velocity = velocity;\n```\n\n----------------------------------------\n\nTITLE: Quantum System Filter Implementation\nDESCRIPTION: Template for creating a Quantum system with filtering capabilities. Includes a Filter struct for entity component filtering.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  using Photon.Deterministic;\n  using UnityEngine.Scripting;\n  [Preserve]\n  public unsafe class NewQuantumSystem : SystemMainThreadFilter<NewQuantumSystem.Filter> {\n    public override void Update(Frame frame, ref Filter filter) {\n    }\n    public struct Filter {\n      public EntityRef Entity;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending RuntimePlayer for Asset References\nDESCRIPTION: Shows how to extend the RuntimePlayer class with custom AssetRef properties to allow players to select specific asset types. This approach enables drag-and-drop functionality in the Unity Editor for selecting character specifications.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// this is added to the RuntimePlayer.User.cs file\nnamespace Quantum {\n  partial class RuntimePlayer {\n    public AssetRef<CharacterSpec> CharacterSpec;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Quantum Demo Input in C#\nDESCRIPTION: This snippet demonstrates how to access and use the QuantumDemoInputTopDown structure within a game update method. It retrieves the input data for a specific player in the current frame.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Update(Frame frame, ref Filter filter)\n{\n    QuantumDemoInputTopDown input = *frame.GetPlayerInput(filter.PlayerStatus->PlayerRef);\n    // . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PollInput Method for Quantum Multi-Client Runner in C#\nDESCRIPTION: Example implementation of the PollInput method that the PlayerInputTemplate must contain. This method captures keyboard input for movement and jumping, converting it to Quantum's fixed point format for deterministic simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/multiclient.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void PollInput(CallbackPollInput callback)\n{\n  Quantum.Input i = new Quantum.Input();\n\n  var direction = new Vector3();\n  direction.x = UnityEngine.Input.GetAxisRaw(\"Horizontal\");\n  direction.y = UnityEngine.Input.GetAxisRaw(\"Vertical\");\n\n  i.Jump = UnityEngine.Input.GetKeyDown(KeyCode.Space);\n\n  // convert to fixed point.\n  i.Direction = direction.ToFPVector3();\n\n  callback.SetInput(i, DeterministicInputFlags.Repeatable);\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Managing Multi-Client Runner in C#\nDESCRIPTION: Code example showing how to programmatically create new local clients and shut down existing ones using the QuantumMultiClientRunner. This provides an alternative to the UI controls for managing clients during runtime.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/multiclient.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void CreateNewLocalClient()\n{\n  var multiclient = FindObjectOfType<QuantumMultiClientRunner>();\n  // initializes a new local player\n  multiclient.CreateNewPlayer();\n}\npublic void ShutDownLocalClient()\n{\n  // find the instance you want to shut down\n  var player = FindObjectOfType<QuantumMultiClientPlayer>();\n  // stops the local player instance\n  player.Stop();\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Map in Quantum Game Engine (C#)\nDESCRIPTION: Demonstrates how to change the current map during runtime in a Quantum game engine system update method. The code checks if the frame is verified before setting a new map.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Update(Frame frame) {\n    // only change the map during verified frames\n    if (frame.IsVerified) {\n        // nextMap is of type AssetRef<Quantum.Map>\n        frame.Map = frame.FindAsset(nextMap);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try-Catch in Async Methods (C#)\nDESCRIPTION: This snippet shows how to handle errors when using async methods with Photon Realtime API. It demonstrates the recommended try/catch pattern for connection attempts.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntry {\n  await client.ConnectUsingSettingsAsync(appSettings);\n} catch (Exception e) {\n  Debug.LogException(e);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Component Filtering System in C#\nDESCRIPTION: Example of using filters to process entities with specific components.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe class MySystem : SystemMainThread\n{\n    public override void Update(Frame frame)\n    {\n        var filtered = rame.Filter<Transform3D, PhysicsBody3D>();\n        while (filtered.Next(out var e, out var t, out var b)) {\n          t.Position += FPVector3.Forward * frame.DeltaTime;\n          frame.Set(e, t);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Quantum Assets in Unity Scripts\nDESCRIPTION: Shows how to retrieve Quantum assets from Unity scripts using the QuantumUnityDB.GetGlobalAsset method. This approach allows accessing assets outside of the simulation using an AssetRef, equivalent to Frame.FindAsset in the simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nCharacterSpec characterData = QuantumUnityDB.GetGlobalAsset(myAssetRef);\nFP maximumHealth = characterData.MaximumHealth;\n```\n\n----------------------------------------\n\nTITLE: Extending Event Implementation with List in C#\nDESCRIPTION: Demonstrates how to extend an event implementation to include a List<Int32> using partial class declarations in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using System;\n  using System.Collections.Generic;\n  partial class EventListEvent {\n    // Add the C# list field to the event object using partial.\n    public List<Int32> ListOfFoo;\n  }\n  partial class Frame {\n    partial struct FrameEvents {\n      public EventListEvent ListEvent(EntityRef entity, List<Int32> listOfFoo) {\n        var ev = ListEvent(entity);\n        if (ev == null) {\n          // Synced or local events can be null for example during predicted frame.\n          return null;\n        }\n        // Reuse the list object of the pooled event.\n        if (ev.ListOfFoo == null) {\n          ev.ListOfFoo = new List<Int32>(listOfFoo.Count);\n        }\n        ev.ListOfFoo.Clear();\n        // Copy the content into the event, to be independent from the input list object which can be cached.\n        ev.ListOfFoo.AddRange(listOfFoo);\n        return ev;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Blackboard Component in Quantum\nDESCRIPTION: Shows the process of initializing a Blackboard component using the AIBlackboardInitializer asset. Demonstrates component creation, asset reference, and entity assignment.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/blackboard.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// -- Blackboard setup\n// First, create the blackboard component (or have it created on the Entity Prototype)\nvar blackboardComponent = new AIBlackboardComponent();\n// Find the Blackboard Initializer asset\nvar bbInitializerAsset = f.FindAsset<AIBlackboardInitializer>(blackboardAsset.BlackboardInitializer.Id);\n// Call the static initialization method passing the blackboard component and the asset\nAIBlackboardInitializer.InitializeBlackboard(f, &blackboardComponent, bbInitializerAsset);\n// Set the blackboard into to the entity\nf.Set(littleGuyEntity, blackboardComponent);\n```\n\n----------------------------------------\n\nTITLE: Initializing Frame Timers in C#\nDESCRIPTION: Demonstrates different ways to create and initialize FrameTimer instances using frames, seconds, and default initialization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/frame-timer.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFrameTimer timerA = FrameTimer.FromFrames(frame, 60)\nFrameTimer timerB = FrameTimer.FromSeconds(frame, 2)\nFrameTimer timerC = default(FrameTimer);\n```\n\n----------------------------------------\n\nTITLE: Implementing ShipSpawnSystem for Player Object Creation\nDESCRIPTION: Defines a system that spawns player ships when new players join the game, creating entities and linking them to players.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/5-player-spawning.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing UnityEngine.Scripting;\nnamespace Quantum.Asteroids\n{\n    [Preserve]\n    public unsafe class ShipSpawnSystem : SystemSignalsOnly, ISignalOnPlayerAdded\n    {\n        public void OnPlayerAdded(Frame frame, PlayerRef player, bool firstTime)\n        {\n            {\n                RuntimePlayer data = frame.GetPlayerData(player);\n                // resolve the reference to the avatar prototype.\n                var entityPrototypAsset = frame.FindAsset<EntityPrototype>(data.PlayerAvatar);\n                // Create a new entity for the player based on the prototype.\n                var shipEntity = frame.Create(entityPrototypAsset);\n                // Create a PlayerLink component. Initialize it with the player. Add the component to the player entity.\n                frame.Add(shipEntity, new PlayerLink { PlayerRef = player });\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending RuntimePlayer Data in C#\nDESCRIPTION: This code snippet shows how to add custom data to the RuntimePlayer class. It adds a TeamId property and implements serialization for it using a BitStream.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/sample-menu/sample-menu-customization.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum\n{\n  using Photon.Deterministic;\n  public partial class RuntimePlayer\n  {\n    public int TeamId;\n    partial void SerializeUserData(BitStream stream)\n    {\n      stream.Serialize(ref TeamId);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RealtimeClient in C# for Photon Realtime\nDESCRIPTION: This snippet shows how to create and initialize a RealtimeClient instance, which is the central class of the Realtime API. It also demonstrates adding a callback target to the client.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/quick-start.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.RealtimeClient = new RealtimeClient();\nthis.RealtimeClient.AddCallbackTarget(this);\n```\n\n----------------------------------------\n\nTITLE: Animator State Signal method signatures in C#\nDESCRIPTION: API definitions for Animator State Signals which are called during state transitions. These methods provide detailed information about the animation state, including the frame, entity, animator component, and timing information.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/animator/manual.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Called in the first update when the Animator begins entering a state.\nvoid OnAnimatorStateEnter(Frame frame, EntityRef entity, AnimatorComponent* animator, AnimatorGraph graph, LayerData* layerData, AnimatorState state, FP time);\n// Called every frame while the Animator is updating a state.\nvoid OnAnimatorStateUpdate(Frame frame, EntityRef entity, AnimatorComponent* animator, AnimatorGraph graph, LayerData* layerData, AnimatorState state, FP time, AnimatorStateType stateType);\n// Called when the Animator updates for the last time, before fading to another state.\nvoid OnAnimatorStateExit(Frame frame, EntityRef entity, AnimatorComponent* animator, AnimatorGraph graph, LayerData* layerData, AnimatorState state, FP time);\n```\n\n----------------------------------------\n\nTITLE: Basic Component Iterator Usage in C#\nDESCRIPTION: Demonstrates how to use ComponentIterator to safely iterate over entities with a specific component type and modify their values.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var pair in frame.GetComponentIterator<Transform3D>())\n{\n    var component = pair.Component;\n    component.Position += FPVector3.Forward * frame.DeltaTime;\n    frame.Set(pair.Entity, component);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Follow Behavior in C# for Quantum Engine\nDESCRIPTION: Shows how to create a camera follow behavior using QuantumEntityViewComponent with a custom view context. It updates the camera position to follow the local player's entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entity-view-component.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Context, added to QuantumEntityViewUpdater game object\nnamespace Quantum {\n  using UnityEngine;\n  public class CustomViewContext : MonoBehaviour, IQuantumViewContext {\n    public Camera MyCamera;\n  }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n// View component, added to entity prefab (QuantumEntityView)\nnamespace Quantum {\n  using UnityEngine;\n  public class QuantumCameraFollow : QuantumEntityViewComponent<CustomViewContext> {\n    public Vector3 Offset;\n    public float LerpSpeed = 4;\n    private bool _isPlayerLocal;\n    public override void OnActivate(Frame frame) {\n      var playerLink = frame.Get<PlayerLink>(EntityRef);\n      _isPlayerLocal = Game.PlayerIsLocal(playerLink.Player);\n    }\n    public override void OnUpdateView() {\n      if (_isPlayerLocal == false) {\n        return;\n      }\n      var myPosition = transform.position;\n      var desiredPos = myPosition + Offset;\n      var currentCameraPos = ViewContext.MyCamera.transform.position;\n      ViewContext.MyCamera.transform.position = Vector3.Lerp(currentCameraPos, desiredPos, Time.deltaTime * LerpSpeed);\n      ViewContext.MyCamera.transform.LookAt(transform);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D and 2D Root Motion in Quantum Animator\nDESCRIPTION: This code snippet demonstrates how to handle root motion for both 3D and 2D entities in the Quantum Animator system. It includes collision detection and character controller integration for 3D, and rotation normalization for 2D.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/animator/manual.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n  // Handles 3D root motion\n  public void OnAnimatorRootMotion3D(Frame frame, EntityRef entity, AnimatorFrame deltaFrame, AnimatorFrame currentFrame)\n    {\n      //Return in case there is no motion delta\n      if (deltaFrame.Position == FPVector3.Zero && deltaFrame.RotationY == FP._0) return;\n      if (frame.Unsafe.TryGetPointer<Transform3D>(entity, out var transform))\n      {\n        // Create a quaternion representing the inverse of the current frame's Y-axis rotation\n        var currentFrameRotation = FPQuaternion.CreateFromYawPitchRoll(currentFrame.RotationY, 0, 0);\n        currentFrameRotation = FPQuaternion.Inverse(currentFrameRotation);\n        // Rotate the delta position by the inverse current rotation to align movement\n        var newPosition = currentFrameRotation * deltaFrame.Position;\n        // Apply the transform's rotation to the new position to get the world displacement\n        var displacement = transform->Rotation * newPosition;\n        var kccSettings = frame.FindAsset<KCCSettings>(frame.Unsafe.GetPointer<KCC>(entity)->Settings);\n        // Compute an adjusted target hit position for raycasting\n        var targetHitPosition =(displacement.XOZ.Normalized * FP._0_33 * 2 ) + displacement;\n        // Perform a raycast in the direction of the intended motion to detect potential collisions with statics\n        var hits = frame.Physics3D.RaycastAll(transform->Position, targetHitPosition.XOZ, targetHitPosition.Magnitude, -1,\n          QueryOptions.HitStatics);\n        if (hits.Count <= 0)\n        {\n          // If no collision, disable the character controller temporarily\n          if (frame.Unsafe.TryGetPointer<KCC>(entity, out var kcc))\n          {\n            kcc->SetActive(false);\n          }\n          // Apply the motion and rotation to the transform\n          transform->Position += displacement;\n          transform->Rotate(FPVector3.Up, deltaFrame.RotationY * FP.Rad2Deg);\n        }\n        else\n        {\n          // If there is collision, enable the character controller\n          if (frame.Unsafe.TryGetPointer<KCC>(entity, out var kcc))\n          {\n            kcc->SetActive(true);\n          }\n        }\n      }\n    }\n    public void OnAnimatorRootMotion2D(Frame frame, EntityRef entity, AnimatorFrame deltaFrame, AnimatorFrame currentFrame)\n    {\n      //Return in case there is no motion delta\n      if (deltaFrame.Position == FPVector3.Zero && deltaFrame.RotationY == FP._0) return;\n      if (frame.Unsafe.TryGetPointer<Transform2D>(entity, out var transform))\n      {\n        // Calculate new rotation by applying delta\n        FP newRotation = transform->Rotation + deltaFrame.RotationY;\n        // Normalize rotation to keep it within [-π, π]\n        while (newRotation < -FP.Pi) newRotation += FP.PiTimes2;\n        while (newRotation > FP.Pi) newRotation += -FP.PiTimes2;\n        // Rotate delta movement vector based on new orientation\n        var deltaMovement = FPVector2.Rotate(deltaFrame.Position.XZ, newRotation);\n\n         // Apply movement and rotation to the transform\n        transform->Position += deltaMovement;\n        transform->Rotation = newRotation;\n      }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Event Structure in Quantum DSL\nDESCRIPTION: Example of a more complex event definition with multiple parameters using Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_3\n\nLANGUAGE: Qtn\nCODE:\n```\nevent MyEvent {\n  FPVector3 Position;\n  FPVector3 Direction;\n  FP Length\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Spawn Point Data System in Quantum\nDESCRIPTION: This snippet implements a MapCustomData class that stores and manages spawn point information for a Quantum map. It includes methods for setting entity positions and rotations based on spawn point data, which is useful for positioning entities at game start.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/map-baking.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using System;\n  using Photon.Deterministic;\n  public unsafe partial class MapCustomData\n  {\n    [Serializable]\n    public struct SpawnPointData\n    {\n      public FPVector3 Position;\n      public FPQuaternion Rotation;\n    }\n    public SpawnPointData DefaultSpawnPoint;\n    public SpawnPointData[] SpawnPoints;\n    public void SetEntityToSpawnPoint(Frame frame, EntityRef entity, Int32? index)\n    {\n      var transform = frame.Unsafe.GetPointer<Transform3D>(entity);\n      var spawnPoint = index.HasValue && index.Value < SpawnPoints.Length ? SpawnPoints[index.Value] : DefaultSpawnPoint;\n      transform->Position = spawnPoint.Position;\n      transform->Rotation = spawnPoint.Rotation;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CAS Failure Callback in C# for Photon Realtime\nDESCRIPTION: This code snippet demonstrates how to add a callback for Check and Swap (CAS) failures when setting custom properties in Photon Realtime. It uses the OpResponseReceived event to detect CAS failures and trigger a custom action.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/custom-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n    private void OnEnable()\n    {\n        client.OpResponseReceived += NetworkingClientOnOpResponseReceived;\n    }\n    private void OnDisable()\n    {\n        client.OpResponseReceived -= NetworkingClientOnOpResponseReceived;\n    }\n    private void NetworkingClientOnOpResponseReceived(OperationResponse opResponse)\n    {\n        if (opResponse.OperationCode == OperationCode.SetProperties &&\n            opResponse.ReturnCode == ErrorCode.InvalidOperation)\n        {\n            // CAS failure\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Receiving Events in C# using Photon Realtime API\nDESCRIPTION: This snippet shows how to receive and handle events in the Particle Demo. It demonstrates looking up the sender's ParticlePlayer instance and handling specific event codes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/quick-start.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nParticlePlayer origin = null;\nbool found = this.ParticlePlayers.TryGetValue(photonEvent.Sender, out origin);\n\ncase Constants.EvPosition:\n    origin.ReadEvMove((PhotonHashtable)photonEvent.CustomData);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AI Action in C#\nDESCRIPTION: Demonstrates how to create a custom AI action by inheriting from the AIAction abstract class and implementing the Execute method. This allows for game-specific logic to be performed within the AI system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    [Serializable]\n    public partial class IdleAction : AIAction\n    {\n        public override void Execute(Frame frame, EntityRef entity, ref AIContext aiContext)\n        {\n            // Insert action code here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Component Block Iterator Usage in C#\nDESCRIPTION: Shows how to use ComponentBlockIterator for fast pointer-based access to components, with two different syntax approaches.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var pair in frame.Unsafe.GetComponentBlockIterator<Transform3D>())\n{\n    pair.Component->Position += FPVector3.Forward * frame.DeltaTime;\n}\n\nforeach (var (entityRef, transform) in frame.Unsafe.GetComponentBlockIterator<Transform3D>())\n{\n    transform->Position += FPVector3.Forward * frame.DeltaTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Quantum Events with onlyIfActiveAndEnabled Parameter in C#\nDESCRIPTION: Example of how to subscribe to Quantum events in a way that is compatible with entity view pooling by using the onlyIfActiveAndEnabled parameter to prevent inactive pooled objects from receiving events.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entityview.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nQuantumEvent.Subscribe<EventPlayerKilled>(this, OnKilled, onlyIfActiveAndEnabled: true);\n```\n\n----------------------------------------\n\nTITLE: Generating Procedural Map in Quantum Engine with C#\nDESCRIPTION: Demonstrates how to use the DeterministicBrickMapGenerator to create a procedural map at runtime before starting the game. This approach avoids the need for map downloads in multiplayer scenarios.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/brick-builder.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar generator = GetComponent<DeterministicBrickMapGenerator>();\ngenerator.Generate(seed);\n```\n\n----------------------------------------\n\nTITLE: Quantum Signal-Only System Implementation\nDESCRIPTION: Template for creating a Quantum system that only handles signals without Update functionality.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  using Photon.Deterministic;\n  using UnityEngine.Scripting;\n  [Preserve]\n  public unsafe class NewQuantumSystem : SystemSignalsOnly {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom View Context in C# for Quantum Engine\nDESCRIPTION: Shows how to access the custom view context within a QuantumEntityViewComponent. The context is made available through the ViewContext property.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entity-view-component.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum {\n  using UnityEngine;\n    public class MyViewScript : QuantumEntityViewComponent<MyGameContext> {\n      GameObject _go;\n      public override void OnInitialize() {\n        _go = Instantiate(ViewContext.Template);\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Unity AnimationCurve to Quantum FPAnimationCurve in C#\nDESCRIPTION: This code snippet demonstrates how to convert a Unity AnimationCurve to a deterministic Quantum FPAnimationCurve. It handles keyframe conversion, tangent modes, wrap modes, and samples the curve at specified resolution to ensure deterministic behavior in the Quantum simulation framework.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/animation-curves-baking.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic FPAnimationCurve ConvertAnimationCurve(AnimationCurve animationCurve)\n{\n    // Get UNITY keyframes\n    Keyframe[] unityKeys = animationCurve.keys;\n    // Prepare QUANTUM curves and keyframes to receive the info\n    FPAnimationCurve fpCurve = new FPAnimationCurve();\n    fpCurve.Keys = new FPAnimationCurve.Keyframe[unityKeys.Length];\n    // Get the Unity Start and End time for this specific curve\n    float startTime = animationCurve.keys.Length == 0 ? 0.0f : float.MaxValue;\n    float endTime = animationCurve.keys.Length == 0 ? 1.0f : float.MinValue;\n    // Set the resolution for the curve, which informs how detailed it is\n    fpCurve.Resolution = 32;\n    for (int i = 0; i < unityKeys.Length; i++)\n    {\n        fpCurve.Keys[i].Time = FP.FromFloat_UNSAFE(unityKeys[i].time);\n        fpCurve.Keys[i].Value = FP.FromFloat_UNSAFE(unityKeys[i].value);\n        if (float.IsInfinity(unityKeys[i].inTangent) == false)\n        {\n            fpCurve.Keys[i].InTangent = FP.FromFloat_UNSAFE(unityKeys[i].inTangent);\n        }\n        else\n        {\n            fpCurve.Keys[i].InTangent = FP.SmallestNonZero;\n        }\n        if (float.IsInfinity(unityKeys[i].outTangent) == false)\n        {\n            fpCurve.Keys[i].OutTangent = FP.FromFloat_UNSAFE(unityKeys[i].outTangent);\n        }\n        else\n        {\n            fpCurve.Keys[i].OutTangent = FP.SmallestNonZero;\n        }\n        fpCurve.Keys[i].TangentModeLeft = (byte)AnimationUtility.GetKeyLeftTangentMode(animationCurve, i);\n        fpCurve.Keys[i].TangentModeRight = (byte)AnimationUtility.GetKeyRightTangentMode(animationCurve, i);\n        startTime = Mathf.Min(startTime, animationCurve[i].time);\n        endTime = Mathf.Max(endTime, animationCurve[i].time);\n    }\n    fpCurve.StartTime = FP.FromFloat_UNSAFE(startTime);\n    fpCurve.EndTime = FP.FromFloat_UNSAFE(endTime);\n    fpCurve.PreWrapMode = (int)animationCurve.preWrapMode;\n    fpCurve.PostWrapMode = (int)animationCurve.postWrapMode;\n    // Actually save the many points of the unity curve into the quantum curve\n    SaveQuantumCurve(animationCurve, 32, ref fpCurve, startTime, endTime);\n    return fpCurve;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polling Pattern in Quantum Unity Component\nDESCRIPTION: Demonstrates how to poll game state data using QuantumEntityViewComponent in Unity. This example shows reading character controller velocity data to update an animator component on every frame update.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/events-vs-polling.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using UnityEngine;\n  public class CharacterAnimations : QuantumEntityViewComponent\n  {\n    private Animator _animator;\n    public override void OnInitialize()\n    {\n      _animator = GetComponentInChildren<Animator>();\n    }\n    public override void OnUpdateView()\n    {\n      var kcc = PredictedFrame.Get<CharacterController3D>(EntityRef);\n      _animator.SetFloat(\"Speed\", kcc.Velocity.Magnitude.AsFloat);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AbilityInventory Component in Quantum\nDESCRIPTION: A Quantum component that stores an array of Ability structs for each player entity. It uses a fixed array size matching the AbilityType enum and includes an ActiveAbilityInfo for tracking the currently active ability.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_4\n\nLANGUAGE: Qtn\nCODE:\n```\ncomponent AbilityInventory\n{\n    [ExcludeFromPrototype] ActiveAbilityInfo ActiveAbilityInfo;\n\n    // Same order as AbilityType enum also used for activation priority\n    [Header(\"Ability Order: Block, Dash, Attack, ThrowShort, ThrowLong, Jump\")]\n    array<Ability>[6] Abilities;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing RuntimeConfig using QuantumJsonSerializer in C#\nDESCRIPTION: Demonstrates how to serialize and deserialize RuntimeConfig objects using the new QuantumJsonSerializer. This replaces the deprecated SerializeUserData() method and allows for easier data transmission and deserialization by receiving backends.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/whats-new.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar runtimeConfig = new RuntimeConfig();\nvar runtimeConfigBinary = RuntimePlayer.ToByteArray(runtimeConfig, new QuantumJsonSerializer());\nvar runtimeConfigOther = RuntimePlayer.FromByteArray(runtimeConfigBinary, new QuantumJsonSerializer());\n// make sure to check if runtimeConfig and runtimeConfigOther are equal to validate the json serialization\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Rotation for Entity Views\nDESCRIPTION: Custom QuantumEntityView implementation that adds rotation smoothing to reduce visible jittering in agent movement.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/avoidance.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  using UnityEngine;\n  public class SmoothRotationEntityView : QuantumEntityView {\n    public float Blending = 15;\n    private Quaternion rotation;\n    protected override void ApplyTransform(ref UpdatePositionParameter param) {\n      // Override this in subclass to change how the new position is applied to the transform.\n      transform.position = param.NewPosition + param.ErrorVisualVector;\n      // Unity's quaternion multiplication is equivalent to applying rhs then lhs (despite their doc saying the opposite)\n      rotation = param.ErrorVisualQuaternion * param.NewRotation;\n      transform.rotation = Quaternion.Lerp(transform.rotation, rotation, Time.deltaTime * Blending);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collision Callback Interfaces for Quantum KCC in C#\nDESCRIPTION: This snippet defines two interfaces, IKCCCallbacks2D and IKCCCallbacks3D, which declare methods for handling character collisions and triggers in 2D and 3D physics respectively. These interfaces allow systems to receive and process collision information from the KCC.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/kcc.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IKCCCallbacks2D\n{\n    bool OnCharacterCollision2D(FrameBase f, EntityRef character, Physics2D.Hit hit);\n    void OnCharacterTrigger2D(FrameBase f, EntityRef character, Physics2D.Hit hit);\n}\npublic interface IKCCCallbacks3D\n{\n    bool OnCharacterCollision3D(FrameBase f, EntityRef character, Physics3D.Hit3D hit);\n    void OnCharacterTrigger3D(FrameBase f, EntityRef character, Physics3D.Hit3D hit);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Character Asset Class in C#\nDESCRIPTION: A minimal definition of a Quantum asset class that acts as an immutable data container for character specifications with deterministic properties like Speed and MaxHealth.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n  public class CharacterSpec : AssetObject {\n    public FP Speed;\n    public FP MaxHealth;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing NavMesh Agent Signal Interfaces in C#\nDESCRIPTION: Demonstrates the basic structure for implementing navigation agent callback interfaces in a SystemMainThread class. The system handles navigation search failures, waypoint reaching, and agent movement callbacks.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/workflow-agents.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public unsafe partial class NavMeshAgentTestSystem : SystemMainThread,\n                                                       ISignalOnNavMeshSearchFailed,\n                                                       ISignalOnNavMeshWaypointReached,\n                                                       ISignalOnNavMeshMoveAgent {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FlowFieldMap in Quantum C#\nDESCRIPTION: This snippet shows how the FlowFieldMap is created when the simulation starts. For the basic example, it's created from static data in ExampleBasicSystem.cs. For the advanced example, it's created in TileMapSystem.cs.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/flow-fields-sample.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Basic Example (ExampleBasicSystem.cs)\nFlowFieldMap flowFieldMap = new FlowFieldMap(staticData);\n\n// Advanced Example (TileMapSystem.cs)\nFlowFieldMap flowFieldMap = new FlowFieldMap(tileMapData);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic QuantumUnityDB with Addressables in C#\nDESCRIPTION: Shows how to configure QuantumUnityDB to load dynamically using Addressables through assembly-level attribute configuration.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly:Quantum.QuantumGlobalScriptableObjectAddress(typeof(QuantumUnityDB), \"QuantumUnityDBAddress\")]\n```\n\n----------------------------------------\n\nTITLE: Baking Navmesh from BakeData in Quantum\nDESCRIPTION: This code shows how to generate a Quantum navmesh from BakeData. The BakeData object needs to be deterministically created on each client, which allows for procedural generation without needing to share large navmesh files between clients.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/customized-navmesh.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Bake navmesh asset\nvar navmesh = NavmeshBaker.BakeNavMesh(f.Map, bakeData);\n```\n\n----------------------------------------\n\nTITLE: Querying Frame Timer Progress\nDESCRIPTION: Demonstrates how to check timer completion and query elapsed/remaining time in both frames and seconds.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/frame-timer.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif (timer.HasStoppedThisFrame(frame)) {\n    // Only if the timer ran out this exact frame.\n}\nelse {\n    var ticksRemaining = timer.RemainingFrames(frame);\n    var secondsRemaining = timer.RemainingSeconds(frame);\n    var ticksElapsed = timer.ElapsedFrames(frame);\n    var elapsedSeconds = timer.ElapsedSeconds(frame);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static Asset to QuantumUnityDB in C#\nDESCRIPTION: Demonstrates how to add a static character asset to QuantumUnityDB using AddAsset method. Creates a new CharacterSpec instance with specified guid and properties.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic void AddStaticAsset(AssetGuid guid) {\n  var asset = ScriptableObject.CreateInstance<CharacterSpec>();\n  asset.Guid = guid;\n  asset.Speed = 10;\n  asset.MaxHealth = 100;\n  QuantumUnityDB.Global.AddAsset(asset);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Physics Query Results in C# for Projectiles\nDESCRIPTION: Shows how to retrieve and process the results of previously injected physics queries for projectiles. It demonstrates checking for hits along the projectile's path and in its damage zone, with logic for updating position and applying damage.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/queries.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nnamespace Quantum\n{\n    public unsafe class ProjectileHitRetrievalSystem : SystemMainThread\n    {\n        public override void Update(Frame frame)\n        {\n            var projectileFilter = frame.Unsafe.FilterStruct<ProjectileFilter>();\n            var projectile = default(ProjectileFilter);\n            while (projectileFilter.Next(&projectile))\n            {\n                if (frame.Physics3D.TryGetQueryHits(projectile.Component->PathQueryRef, out var hitsOnTrajectory) == false || hitsOnTrajectory.Count <= 0)\n                {\n                    projectile.Transform->Position =\n                        projectile.Transform->Rotation *\n                        projectile.Transform->Forward *\n                        projectile.Component->Speed * frame.DeltaTime;\n                    continue;\n                }\n\n                if (frame.Physics3D.TryGetQueryHits(projectile.Component->DamageZoneQueryRef, out var damageZoneHits))\n                {\n                    for (int i = 0; i < damageZoneHits.Count; i++)\n                    {\n                        // Apply damage logic\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ability Struct Definition in Quantum\nDESCRIPTION: A Quantum struct that stores the state data for each ability, including timers for input buffering, delay, duration, and cooldown. It references an AbilityData asset for ability-specific data and logic.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_3\n\nLANGUAGE: Qtn\nCODE:\n```\nstruct Ability\n{\n    [ExcludeFromPrototype] AbilityType AbilityType;\n    [ExcludeFromPrototype] CountdownTimer InputBufferTimer;\n    [ExcludeFromPrototype] CountdownTimer DelayTimer;\n    [ExcludeFromPrototype] CountdownTimer DurationTimer;\n    [ExcludeFromPrototype] CountdownTimer CooldownTimer;\n    asset_ref<AbilityData> AbilityData;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with Dynamic Dictionary in Quantum DSL\nDESCRIPTION: Example of defining a 'Hazard' component with a dynamic dictionary mapping EntityRef to Int32 using Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\ncomponent Hazard {\n  dictionary<EntityRef, Int32> DamageDealt;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Quantum DSL\nDESCRIPTION: Example of defining a 'ResourceItem' struct with Value, MaxValue, and RegenRate properties using Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nstruct ResourceItem\n{\n  FP Value;\n  FP MaxValue;\n  FP RegenRate;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ship Component in Quantum\nDESCRIPTION: Defines the ship component structure with configuration reference and fire interval tracking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/9-shooting.md#2025-04-23_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\ncomponent AsteroidsShip\n{\n    AssetRef<AsteroidsShipConfig> ShipConfig;\n    FP FireInterval;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asteroid Game Configuration in C#\nDESCRIPTION: Defines the AsteroidsGameConfig class that inherits from AssetObject to store configuration parameters for asteroid spawning, including prototype references, speed, torque, and spawn settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nusing UnityEngine;\nnamespace Quantum.Asteroids\n{\n  public class AsteroidsGameConfig: AssetObject\n  {\n    [Header(\"Asteroids configuration\")]\n    [Tooltip(\"Prototype reference to spawn asteroids\")]\n    public AssetRef<EntityPrototype> AsteroidPrototype;\n    [Tooltip(\"Speed applied to the asteroid when spawned\")]\n    public FP AsteroidInitialSpeed = 8;\n    [Tooltip(\"Minimum torque applied to the asteroid when spawned\")]\n    public FP AsteroidInitialTorqueMin = 7;\n    [Tooltip(\"Maximum torque applied to the asteroid when spawned\")]\n    public FP AsteroidInitialTorqueMax = 20;\n    [Tooltip(\"Distance to the center of the map. This value is the radius in a random circular location where the asteroid is spawned\")]\n    public FP AsteroidSpawnDistanceToCenter = 20;\n    [Tooltip(\"Amount of asteroids spawned in level 1. In each level, the number os asteroids spawned is increased by one\")]\n    public int InitialAsteroidsCount = 5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity from Prototype in C#\nDESCRIPTION: Demonstrates how to create a new entity instance from an entity prototype reference using the Frame.Create() method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entity-prototypes.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid CreateExampleEntity(Frame frame) {\n    // Using a reference to the entity prototype asset\n    var exampleEntity = frame.Create(myPrototypeReference);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Quantum Runner with ClientId in C#\nDESCRIPTION: Demonstrates how to start a QuantumRunner with a ClientId, which is crucial for reconnecting players to maintain their player index.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/reconnecting.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessionRunnerArguments = new SessionRunner.Arguments {\n        ClientId = Client.UserId,\n        //Other arguments are needed\n      };\nvar runner = (QuantumRunner)await SessionRunner.StartAsync(sessionRunnerArguments);\n```\n\n----------------------------------------\n\nTITLE: Implementing NavMesh Waypoint Handler in C#\nDESCRIPTION: System implementation that handles NavMesh waypoint reaching events, specifically for teleporting agents when they reach link start waypoints. Uses Quantum framework's navigation callbacks and signal system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/links.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum\n{\n  using Photon.Deterministic;\n  using UnityEngine.Scripting;\n  [Preserve]\n  public unsafe class NewQuantumSystem : SystemMainThread, ISignalOnNavMeshWaypointReached\n  {\n    public override void Update(Frame frame)\n    {\n    }\n    public void OnNavMeshWaypointReached(Frame frame, EntityRef entity, FPVector3 waypoint, Navigation.WaypointFlag waypointFlags, ref bool resetAgent)\n    {\n      var agent = frame.Get<NavMeshPathfinder>(entity);\n      var waypointIndex = agent.WaypointIndex;\n      if ((waypointFlags & Navigation.WaypointFlag.LinkStart) == Navigation.WaypointFlag.LinkStart)\n      {\n        // There always is another waypoint after the LinkStart\n        var linkDestination = agent.GetWaypoint(frame, waypointIndex + 1);\n        f.Unsafe.GetPointer<Transform2D>(entity)->Position = linkDestination.XZ;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quantum System Group Implementation\nDESCRIPTION: Example showing how to implement a custom system group for organizing and managing multiple systems together.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  public class MySystemGroup : SystemMainThreadGroup\n  {\n    public MySystemGroup(string update, params SystemMainThread[] children) : base(update, children)\n    {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading User Asset from Quantum Map (C#)\nDESCRIPTION: Illustrates how to load a user-defined asset associated with a Quantum map. This code attempts to find and load a custom FooAsset from the map's UserAsset property during frame initialization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnInit(Frame frame) {\n  if (frame.TryFindAsset(frame.Map.UserAsset.Id, out FooAsset mapAsset)) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Replay Export in Unity\nDESCRIPTION: Code example showing how to manually create and save a replay file with optional checksums and asset database inclusion.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar replay = quantumGame.GetRecordedReplay(includeChecksums: true, includeDb: false))\nFile.WriteAllText(\"replay.json\", JsonUtility.ToJson(replay));\n```\n\n----------------------------------------\n\nTITLE: Defining Button Input in Quantum DSL\nDESCRIPTION: Shows how to define button inputs using the bit-efficient button type in the Quantum DSL. Button type consumes only 1 bit per instance over the network, making it optimal for boolean state inputs.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\ninput\n{\n    button Jump;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Struct in a Component Definition\nDESCRIPTION: Example of using a custom 'ResourceItem' struct within a 'Resources' component definition in Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\ncomponent Resources\n{\n  ResourceItem Health;\n  ResourceItem Strength;\n  ResourceItem Mana;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Player Events in Quantum DSL\nDESCRIPTION: Demonstrates the use of the 'remote' keyword to create events that only trigger for remote players.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_10\n\nLANGUAGE: Qtn\nCODE:\n```\nevent RemotePlayerOnly {\n  remote player_ref player;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Photon Server using AppSettings in C#\nDESCRIPTION: This code snippet demonstrates how to connect to the Photon server using AppSettings. It uses the ConnectUsingSettings method of the RealtimeClient and handles connection failure.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/quick-start.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void CallConnect(AppSettings appSettings)\n{\n    bool couldConnect = this.RealtimeClient.ConnectUsingSettings(appSettings);\n    if (!couldConnect)\n    {\n        this.RealtimeClient.DebugReturn(LogLevel.Error, \"Failed to connect.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FilterStruct Usage Example in C#\nDESCRIPTION: Demonstrates how to use a FilterStruct to iterate over filtered components.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar players = f.Unsafe.FilterStruct<PlayerFilter>();\nvar playerStruct = default(PlayerFilter);\nwhile (players.Next(&playerStruct))\n{\n    // Do stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Player Jump Event in Quantum\nDESCRIPTION: Shows the event definition for player jumps in Quantum's type notation format.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/animation.md#2025-04-23_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nevent PlayerJump { EntityRef EntityRef; }\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Player-Specific Events in Quantum DSL\nDESCRIPTION: Shows how to combine 'local' and 'remote' keywords for events with multiple player references.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_11\n\nLANGUAGE: Qtn\nCODE:\n```\nevent MyEvent {\n  local player_ref LocalPlayer;\n  remote player_ref RemotePlayer;\n  player_ref AnyPlayer;\n}\n```\n\n----------------------------------------\n\nTITLE: Team Matchmaking with Slot Reservation (C#)\nDESCRIPTION: Illustrates how to implement team matchmaking using slot reservation in Photon. It shows the process for the team leader to find or create a room, and for team members to join.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nOpJoinRandomRoomParams opJoinRandomRoomParams = new OpJoinRandomRoomParams();\nopJoinRandomRoomParams.ExpectedUsers = teamMembersUserIds;\nloadBalancingClient.OpJoinRandomRoom(opJoinRandomRoomParams);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nEnterRoomParams enterRoomParams = new EnterRoomParams();\nenterRoomParams.ExpectedUsers = teamMembersUserIds;\nloadBalancingClient.OpCreateRoom(enterRoomParams);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.OpFindFriends(new string[1]{ leaderUserId });\n```\n\nLANGUAGE: csharp\nCODE:\n```\nEnterRoomParams enterRoomParams = new EnterRoomParams();\nenterRoomParams.RoomName = roomNameWhereTheLeaderIs;\nloadBalancingClient.OpJoinRoom(enterRoomParams);\n```\n\n----------------------------------------\n\nTITLE: Handling Room Join Event in C# for Photon Realtime\nDESCRIPTION: This code snippet demonstrates how to handle the OnJoinedRoom event. It initializes particle players for each player in the room, sets up the local player, and randomizes the local player's position and color.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/quick-start.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void OnJoinedRoom()\n{\n    foreach (Player player in this.RealtimeClient.CurrentRoom.Players.Values)\n    {\n        ParticlePlayer particlePlayer = this.AddParticlePlayer(player);\n        if (particlePlayer.IsLocal)\n        {\n            this.LocalPlayer = particlePlayer;\n        }\n    }\n    // no matter if we joined or created a game, when we arrived in state \"Joined\", we are on the game server in a room and\n    // this client could start moving and update others of it's color\n    this.LocalPlayer.RandomizePosition();\n    this.ChangeLocalPlayerColor();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AsteroidsShip Tag Component in Qtn\nDESCRIPTION: This code snippet creates an empty AsteroidsShip component in Quantum's Qtn language. It serves as a tag component to uniquely identify the player's ship entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_6\n\nLANGUAGE: Qtn\nCODE:\n```\ncomponent AsteroidsShip\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static Assets at Runtime\nDESCRIPTION: Example of how to add static assets to the asset database at runtime with deterministic GUIDs, useful for downloaded or procedurally generated content.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// create any asset\nvar assetObject = AssetObject.Create<MyAssetObjectType>();\n// set its name\nassetObject.name = \"My Unique Asset Object Name\";\n// get a deterministic GUID\nvar guid = QuantumUnityDB.CreateRuntimeDeterministicGuid(assetObject);\n// add the asset to the asset database\nQuantumUnityDB.Global.AddAsset(assetObject);\n// set the GUID\nassetObject.Guid = guid;\n\n```\n\n----------------------------------------\n\nTITLE: Using Special Types in Quantum DSL\nDESCRIPTION: Demonstrates the usage of special types in Quantum DSL, including player_ref, entity_ref, asset_ref, list, dictionary, and fixed-size arrays.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_16\n\nLANGUAGE: Qtn\nCODE:\n```\nasset CharacterData; // the CharacterData class is partially defined in a normal C# file by the developer\n```\n\nLANGUAGE: Qtn\nCODE:\n```\nstruct SpecialData\n{\n  player_ref Player;\n  entity_ref Character;\n  entity_ref AnotherEntity;\n  asset_ref<CharacterData> CharacterData;\n  array<FP>[10] TenNumbers;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client-Only Events in Quantum DSL\nDESCRIPTION: Demonstrates the use of the 'client' keyword to create events that only execute on the client side.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_13\n\nLANGUAGE: Qtn\nCODE:\n```\nclient event MyClientEvent {}\n```\n\n----------------------------------------\n\nTITLE: Handling Projectile-Ship Collisions\nDESCRIPTION: Implements collision handling between projectiles and ships, including friendly-fire prevention.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/10-collision-detection.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void OnCollisionProjectileHitShip(Frame frame, CollisionInfo2D info, AsteroidsProjectile* projectile, AsteroidsShip* ship)\n{\n    if (projectile->Owner == info.Other)\n    {\n        info.IgnoreCollision = true;\n        return;\n    }\n\n    frame.Destroy(info.Entity);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Asset Data in C# Game Logic\nDESCRIPTION: Example of accessing and using asset data to compute physics values for a character, demonstrating the read-only nature of assets in gameplay logic.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// consider cd a CharacterData*, and body a PhysicsBody2D* (from a component filter, for example)\nvar spec = frame.FindAsset(cd->Spec);\nbody->Velocity = FPVector2.Right * spec.Speed;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing HFSM Agent Component in C#\nDESCRIPTION: Shows how to create and set up a new HFSM agent component on an entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar hfsmAgent = new HFSMAgent();\nf.Set(myEntity, hfsmAgent);\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Priority Ranking in C#\nDESCRIPTION: Custom AIFunction implementation for determining agent priority ranking. Returns rank value 10 if agent matches desired priority, 0 otherwise. Used to control absolute utility preferences in decision making.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/utility-theory.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  [System.Serializable]\n  public unsafe class AgentPriority : AIFunction<int>\n  {\n    public EAgentPriority DesiredPriority;\n    public override int Execute(Frame frame, EntityRef entity, ref AIContext aiContext)\n    {\n      // Get an agent-specific component\n      var agentData = frame.Unsafe.GetPointer<AgentData>(entity);\n      // Compare the agent current priority with the priority this AIFunction checks\n      // If the agent is currently prioritizing it, then increase the Rank of the Consideration to 10\n      // If the priority is something else, set it to 0 instead\n      if(agentData->Priority == DesiredPriority)\n      {\n        return 10;\n      }\n      else\n      {\n        return 0;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AsteroidsShipSystem Update Method with Input Handling\nDESCRIPTION: Modifies the Update method to get player input and apply ship movement based on that input.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Update(Frame frame, ref Filter filter)\n{\n    // gets the input for player 0\n    var input = frame.GetPlayerInput(0);\n\n    UpdateShipMovement(frame, ref filter, input);\n}\n```\n\n----------------------------------------\n\nTITLE: Quantum Callbacks for Player Management in C#\nDESCRIPTION: This code defines various callback structures for player addition and removal events in Quantum, including success and failure callbacks.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nCallbackLocalPlayerAddConfirmed {\n  public Frame Frame;\n  public int PlayerSlot;\n  public PlayerRef Player;\n}\nCallbackLocalPlayerAddFailed {\n  public int PlayerSlot;\n  public string Message;\n}\nCallbackLocalPlayerRemoveConfirmed {\n  public Frame Frame;\n  public int PlayerSlot;\n  public PlayerRef Player;\n}\nCallbackLocalPlayerRemoveFailed {\n  public int PlayerSlot;\n  public string Message;\n}\n// for example\nQuantumCallback.Subscribe(this, (CallbackLocalPlayerAddConfirmed c) => OnLocalPlayerAddConfirmed(c));\nprivate void OnLocalPlayerAddConfirmed(CallbackLocalPlayerAddConfirmed c) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Bitsets in Quantum DSL\nDESCRIPTION: Demonstrates how to declare bitsets in Quantum DSL for fixed-size memory blocks, useful for fog-of-war or grid-like structures.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_11\n\nLANGUAGE: Qtn\nCODE:\n```\nstruct FOWData\n{\n  bitset[256] Map;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerLink Component in Quantum\nDESCRIPTION: Creates a PlayerLink component to associate entities with specific players using PlayerRef.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/5-player-spawning.md#2025-04-23_snippet_0\n\nLANGUAGE: Qtn\nCODE:\n```\ncomponent PlayerLink\n{\n    player_ref PlayerRef;\n}\n```\n\n----------------------------------------\n\nTITLE: Using FPAnimationCurve in Variables and Assets in C#\nDESCRIPTION: This snippet demonstrates how to store an FPAnimationCurve in a local variable and pre-initialize it in an asset. It uses the CreateLinearCurve method from the previous snippet.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n// Storing a curve into a local variable\nvar curve = FPAnimationCurveUtils.CreateLinearCurve(FPAnimationCurve.WrapMode.Clamp, FPAnimationCurve.WrapMode.Clamp);\n// It can also be used directly to pre-initialise a curve in an asset\npublic unsafe partial class CollectibleData\n{\n    public FPAnimationCurve myCurve = FPAnimationCurveUtils.CreateLinearCurve(FPAnimationCurve.WrapMode.Clamp, FPAnimationCurve.WrapMode.Clamp);\n```\n\n----------------------------------------\n\nTITLE: Character Selection System Implementation\nDESCRIPTION: Implementation of in-game character selection system that creates and configures player data with selected character properties and adds the player to the game session.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/platform-shooter-2d/further-steps.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Create player data with the selected character.\nRuntimePlayer playerData = new RuntimePlayer();\nplayerData.PlayerAvatar = characterPrototype;\n// Attempt to set the player's nickname from the menu.\nvar menu =\nFindAnyObjectByType(typeof(Quantum.Menu.QuantumMenuUIController)) as Quantum.Menu.QuantumMenuUIController;\nif (menu != null)\n{\n  playerData.PlayerNickname = menu.ConnectArgs.Username;\n}\n// Add the player to the game.\nrunner.Game.AddPlayer(playerData);\n```\n\n----------------------------------------\n\nTITLE: Enum Definition for Component Addition Result\nDESCRIPTION: Defines an enum 'AddResult' that represents possible outcomes when adding a component to an entity. It includes cases for non-existent entity, already existing component, and successful addition.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic enum AddResult {\n    EntityDoesNotExist     = 0, // The EntityRef passed in is invalid.\n    ComponentAlreadyExists = 1, // The Entity in question already has this component attached to it.\n    ComponentAdded         = 2  // The component was successfully added to the entity.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Legacy Adapter for QPrototypeKCCProcessorLink in C#\nDESCRIPTION: This code creates a legacy adapter class that inherits from QPrototypeKCCProcessorLink to maintain backward compatibility after the breaking changes in version 3.0.3. This allows existing projects to continue using the old processor link scripts.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/download.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe partial class LegacyQPrototypeKCCProcessorLink : QPrototypeKCCProcessorLink {\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'nothashed' Keyword in Event Definition\nDESCRIPTION: Shows how to use the 'nothashed' keyword to control which data is used for event uniqueness checking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nabstract event MyEvent {\n  nothashed FPVector2 Position;\n  Int32 Foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AI System Implementation in C#\nDESCRIPTION: Provides a full example of an AI system that handles HFSM agent initialization and updates.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  public unsafe class AISystem : SystemMainThreadFilter<AISystem.Filter>, ISignalOnComponentAdded<HFSMAgent>\n  {\n    public struct Filter\n    {\n      public EntityRef Entity;\n      public HFSMAgent* HFSMAgent;\n    }\n    public void OnAdded(Frame frame, EntityRef entity, HFSMAgent* component)\n    {\n      HFSMRoot hfsmRoot = frame.FindAsset<HFSMRoot>(component->Data.Root.Id);\n      HFSMManager.Init(frame, entity, hfsmRoot);\n    }\n    public override void Update(Frame frame, ref Filter filter)\n    {\n    HFSMManager.Update(frame, frame.DeltaTime, filter.Entity);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Steam Auth Ticket using Steamworks.NET\nDESCRIPTION: Retrieves a Steam authentication session ticket and converts it to a hex-encoded UTF-8 string. Returns the auth ticket handle for later cancellation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/steam-auth.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic string GetSteamAuthTicket(out HAuthTicket hAuthTicket)\n{\n    byte[] ticketByteArray = new byte[1024];\n    uint ticketSize;\n    hAuthTicket = SteamUser.GetAuthSessionTicket(ticketByteArray, ticketByteArray.Length, out ticketSize);\n    System.Array.Resize(ref ticketByteArray, (int)ticketSize);\n    StringBuilder sb = new StringBuilder();\n    for(int i=0; i < ticketSize; i++)\n    {\n        sb.AppendFormat(\"{0:x2}\", ticketByteArray[i]);\n    }\n    return sb.ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Update Method in AsteroidsShipSystem\nDESCRIPTION: Implements the Update method to add a constant force to the ship entity in the upward direction.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Update(Frame frame, ref Filter filter)\n{\n    // note: pointer property access via -> instead of .\n    filter.Body->AddForce(filter.Transform->Up);\n}\n```\n\n----------------------------------------\n\nTITLE: Map Commands Implementation\nDESCRIPTION: Defines three main commands for map manipulation: PlaceBrickCommand for placing bricks with position and rotation, DeleteBrickCommand for removing specific bricks by collider index, and ClearBricksCommand for removing all bricks at once.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/brick-builder.md#2025-04-23_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Enum Definition for Component Set Result\nDESCRIPTION: Defines an enum 'SetResult' that represents possible outcomes when setting a component's values. It includes cases for non-existent entity, successful update, and component addition if it didn't exist.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic enum SetResult {\n    EntityDoesNotExist = 0, // The EntityRef passed in is invalid.\n    ComponentUpdated   = 1, // The component values were successfully updated.\n    ComponentAdded     = 2  // The Entity did not have a component of this type yet, so it was added with the new values.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 2D Physics Callback Signals in C#\nDESCRIPTION: Shows the interface definitions for 2D physics callback signals in Quantum. These interfaces define methods for collision and trigger events in 2D physics simulations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/callbacks.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum {\n  public interface ISignalOnCollision2D : ISignal {\n    void OnCollision2D(Frame frame, CollisionInfo2D info);\n  }\n  public interface ISignalOnCollisionEnter2D : ISignal {\n    void OnCollisionEnter2D(Frame frame, CollisionInfo2D info);\n  }\n  public interface ISignalOnCollisionExit2D : ISignal {\n    void OnCollisionExit2D(Frame frame, ExitInfo2D info);\n  }\n  public interface ISignalOnTrigger2D : ISignal {\n    void OnTrigger2D(Frame frame, TriggerInfo2D info);\n  }\n  public interface ISignalOnTriggerEnter2D : ISignal {\n    void OnTriggerEnter2D(Frame frame, TriggerInfo2D info);\n  }\n  public interface ISignalOnTriggerExit2D : ISignal {\n    void OnTriggerExit2D(Frame frame, ExitInfo2D info);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ball View Interpolation in C#\nDESCRIPTION: This code handles the interpolation of the ball's position and rotation between its real space and animated space when being caught or released by a player. It uses Unity's Vector3.Lerp and Quaternion.Slerp for smooth transitions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic unsafe class BallEntityView : QuantumEntityView\n{\n    private float _interpolationSpaceAlpha;\n    public void UpdateSpaceInterpolation()\n    {\n        // . . .\n        UpdateInterpolationSpaceAlpha(isBallHeldByPlayer);\n        if (_interpolationSpaceAlpha > 0f)\n        {\n            Vector3 interpolatedPosition = Vector3.Lerp(_lastBallRealPosition, _lastBallAnimationPosition, _interpolationSpaceAlpha);\n            Quaternion interpolatedRotation = Quaternion.Slerp(_lastBallRealRotation, _lastBallAnimationRotation, _interpolationSpaceAlpha);\n            transform.SetPositionAndRotation(interpolatedPosition, interpolatedRotation);\n        }\n    }\n    private void UpdateInterpolationSpaceAlpha(bool isBallHeldByPlayer)\n    {\n        float deltaChange = _spaceTransitionSpeed * Time.deltaTime;\n        if (isBallHeldByPlayer)\n        {\n            _interpolationSpaceAlpha += deltaChange;\n        }\n        else\n        {\n            _interpolationSpaceAlpha -= deltaChange;\n        }\n        _interpolationSpaceAlpha = Mathf.Clamp(_interpolationSpaceAlpha, 0f, 1f);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Assets at Runtime Using TryGetGlobalAsset\nDESCRIPTION: Shows how to safely access extended asset fields using QuantumUnityDB.TryGetGlobalAsset method with null checking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/extending-assets.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif (QuantumUnityDB.TryGetGlobalAsset(assetPath, out CharacterSpec characterSpec)) {\n  Debug.Log(characterSpec.DisplayName);\n}\n```\n\n----------------------------------------\n\nTITLE: Power-Up System Implementation\nDESCRIPTION: Implements a system for managing power-up states, including initialization, updates, and trigger handling for power-up collection and respawning.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/statics.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe class MyPowerUpSystem : SystemMainThread {\npublic override void OnInit(Frame frame)\n{\n    var powerUps = frame.Unsafe.GetPointerSingleton<PowerUps>();\n    for (int i = 0; i < powerUps->IsPowerUp.Length; i++)\n    {\n        var powerUp = frame.FindAsset<MyPowerUpAsset>(frame.Map.StaticColliders3D[i].StaticData.Asset);\n        if (powerUp == null) {\n            powerUps->IsPowerUp.Clear(i);\n            continue;\n        }\n\n        powerUps->IsPowerUp.Set(i);\n        powerUps->State.Set(i);\n        powerUps->Timers[i] = FP._0;\n    }\n}\npublic override void Update(Frame frame)\n{\n    var powerUps = frame.Unsafe.GetPointerSingleton<PowerUps>();\n    for (int i = 0; i < powerUps->IsPowerUp.Length; i++)\n    {\n        if (powerUps->IsPowerUp.IsSet(i) == false) continue;\n        if (powerUps->State.IsSet(i)) continue;\n        powerUps->Timers[i] -= frame.DeltaTime;\n        if(powerUps->Timers[i] > 0) continue;\n        powerUps->State.Set(i);\n        // Other code visualizing the spawned / re-enabled power-up\n        // can use frame event to trigger VFX, SFX, re-enable visual / GameObject\n    }\n}\npublic void OnTrigger3D(Frame frame, TriggerInfo3D info)\n{\n    if(info.IsStatic == false) return;\n\n    var powerUps = f.Unsafe.GetPointerSingleton<PowerUps>();\n    if(powerUps->IsPowerUp.IsSet(info.StaticData.ColliderIndex) == false) return;\n    if(powerUps->State.IsSet(info.StaticData.ColliderIndex) == false) return;\n    powerUps->State.Clear(info.StaticData.ColliderIndex);\n    powerUps->Timers[info.StaticData.ColliderIndex] = powerUps->SpawnCooldown;\n\n    // Remember to communicate the disabled state visually, e.g. trigger a frame event to disable the GameObject in Unity\n}\n```\n\n----------------------------------------\n\nTITLE: Extending RuntimePlayer in C#\nDESCRIPTION: Shows how to extend the RuntimePlayer class with custom fields using a partial class definition. This allows adding player-specific data that will be serialized and synchronized.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/config-files.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public partial class RuntimePlayer {\n    // Add your own fields (don't use properties).\n    public int Foo;\n    // Implement DumpUserData() to add information to a debug string that is returned when using Dump().\n    partial void DumpUserData(ref String dump) {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ability System Update Logic in C#\nDESCRIPTION: The core update method of the AbilitySystem that processes each ability in the player's inventory. It handles input detection, ability state updates, and ability activation through the data-driven ability system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Update(Frame frame, ref Filter filter)\n{\n    QuantumDemoInputTopDown input = *frame.GetPlayerInput(filter.PlayerStatus->PlayerRef);\n\n    for (int i = 0; i < filter.AbilityInventory->Abilities.Length; i++)\n    {\n        AbilityType abilityType = (AbilityType)i;\n        ref Ability ability = ref filter.AbilityInventory->Abilities[i];\n        AbilityData abilityData = frame.FindAsset<AbilityData>(ability.AbilityData.Id);\n        abilityData.UpdateAbility(frame, filter.EntityRef, ref ability);\n        abilityData.UpdateInput(frame, ref ability, input.GetAbilityInputWasPressed(abilityType));\n        abilityData.TryActivateAbility(frame, filter.EntityRef, filter.PlayerStatus, ref ability);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Map Data Baker in Quantum\nDESCRIPTION: This snippet shows how to create a custom map data baker by implementing the MapDataBakerCallback class. It demonstrates the basic structure with OnBeforeBake and OnBake methods, and includes the required assembly attribute to mark it for Quantum processing.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/map-baking.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: Quantum.QuantumMapBakeAssemblyAttribute]\nnamespace Quantum\n{\n  public class ExampleMapDataBaker : MapDataBakerCallback\n  {\n    public override void OnBeforeBake(QuantumMapData data)\n    {\n    }\n    public override void OnBake(QuantumMapData data)\n    {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Using BTRoot Asset in C#\nDESCRIPTION: Demonstrates how to reference and load a compiled behavior tree asset in the game code. Shows the field declaration and frame asset loading approach.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAssetRef<BTRoot> btRootRef;\nBTRoot btRoot = frame.FindAsset(btRootRef);\n```\n\n----------------------------------------\n\nTITLE: Overriding Entity View Creation in C#\nDESCRIPTION: Demonstrates how to override the CreateEntityViewInstance method to implement object pooling for entity views. This method uses a custom object pool to retrieve instances based on the asset's view.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entityview.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override QuantumEntityView CreateEntityViewInstance(Quantum.EntityView asset, Vector3? position = null, Quaternion? rotation = null) {\n    Debug.Assert(asset.View != null);\n    // view pooling can also be customized by using IQuantumEntityViewPool\n    EntityView view = _myObjectPool.GetInstance(asset);\n    view.transform.position = position ?? default;\n    view.transform.rotation = rotation ?? Quaternion.identity;\n    return view;\n}\n```\n\n----------------------------------------\n\nTITLE: BrickBuildingSystem Core Implementation\nDESCRIPTION: Main system handling brick placement, deletion and map updates using DynamicMap API. Includes initialization, command signal handling, and collision management. Uses BrickVisual for visual representation and supports both mesh and normal colliders.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/brick-builder.md#2025-04-23_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Sending Steam Auth Ticket to Photon Server\nDESCRIPTION: Configures the authentication values for the Photon client using Steam authentication type and the previously obtained ticket.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/steam-auth.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.AuthValues = new AuthenticationValues();\nloadBalancingClient.AuthValues.UserId = SteamUser.GetSteamID().ToString();\nloadBalancingClient.AuthValues.AuthType = CustomAuthenticationType.Steam;\nloadBalancingClient.AuthValues.AddAuthParameter(\"ticket\", SteamAuthSessionTicket);\n// connect\n```\n\n----------------------------------------\n\nTITLE: Rejoining Photon Realtime Room After Reconnecting to Master Server in C#\nDESCRIPTION: Example of rejoining a Photon Realtime room after reconnecting to the master server. This process involves reconnecting to the master server and then using the OpReJoinRoom method when the connection is established.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/reconnecting.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nRealtimeClient.ReconnectToMaster()\n// ..\npublic void IConnectionCallbacks.OnConnectedToMaster() {\n    _client.OpReJoinRoom(roomName);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom AIFunction Node Implementation\nDESCRIPTION: Example of implementing a custom AIFunction node to get an entity's position.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  [System.Serializable]\n  public unsafe class GetEntityPosition : AIFunctionFPVector3\n  {\n    public override FPVector3 Execute(Frame frame, EntityRef entity = default)\n    {\n      MyComponent myComponent = frame.Unsafe.GetPointer<MyComponent>(entity);\n      Transform3D* targetTransform = frame.Unsafe.GetPointer<Transform3D>(myComponent->TargetEntity);\n      return targetTransform->Position;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transform2DVertical Properties in C#\nDESCRIPTION: Demonstrates how to set up vertical transform properties for an entity in Quantum's 2.5D physics system. Sets both height and position values using fixed-point numbers.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/physics-25d.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    var transform2dVertical = new Transform2DVertical();\n    transform2dVertical.Height = FP._1;\n    transform2dVertical.Position = FP._1;\n\n    f.Set(entity, transform2dVertical);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Projectile System\nDESCRIPTION: Implements the core projectile system for handling projectile creation and initialization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/9-shooting.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nusing UnityEngine.Scripting;\nnamespace Quantum.Asteroids\n{\n    [Preserve]\n    public unsafe class AsteroidsProjectileSystem : SystemSignalsOnly\n    {\n        public void AsteroidsShipShoot(Frame frame, EntityRef owner, FPVector2 spawnPosition, AssetRef<EntityPrototype> projectilePrototype)\n        {\n            EntityRef projectileEntity = frame.Create(projectilePrototype);\n            Transform2D* projectileTransform = frame.Unsafe.GetPointer<Transform2D>(projectileEntity);\n            Transform2D* ownerTransform = frame.Unsafe.GetPointer<Transform2D>(owner);\n            projectileTransform->Rotation = ownerTransform->Rotation;\n            projectileTransform->Position = spawnPosition;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Assets in Quantum3 C#\nDESCRIPTION: Shows how to create a dynamic asset at runtime by instantiating a MageSpec object and adding it to the current frame. This demonstrates the basic usage of the DynamicAssetDB feature.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar mageSpec = AssetObject.Create<MageSpec>();\nmageSpec.Speed = 1;\nmageSpec.MaxHealth = 100;\nframe.AddAsset(mageSpec);\n```\n\n----------------------------------------\n\nTITLE: Defining 3D Physics Callback Signals in C#\nDESCRIPTION: Presents the interface definitions for 3D physics callback signals in Quantum. These interfaces define methods for collision and trigger events in 3D physics simulations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/callbacks.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum {\n  public interface ISignalOnCollision3D : ISignal {\n    void OnCollision3D(Frame frame, CollisionInfo3D info);\n  }\n  public interface ISignalOnCollisionEnter3D : ISignal {\n    void OnCollisionEnter3D(Frame frame, CollisionInfo3D info);\n  }\n  public interface ISignalOnCollisionExit3D : ISignal {\n    void OnCollisionExit3D(Frame frame, ExitInfo3D info);\n  }\n  public interface ISignalOnTrigger3D : ISignal {\n    void OnTrigger3D(Frame frame, TriggerInfo3D info);\n  }\n  public interface ISignalOnTriggerEnter3D : ISignal {\n    void OnTriggerEnter3D(Frame frame, TriggerInfo3D info);\n  }\n  public interface ISignalOnTriggerExit3D : ISignal {\n    void OnTriggerExit3D(Frame frame, ExitInfo3D info);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Navmesh Region for Individual Agent in C#\nDESCRIPTION: This code shows how to disable a specific region for an individual NavMeshPathfinder agent using its RegionMask.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/regions.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar regionId = frame.Map.RegionMap[\"Foo\"];\nvar agent = f.Unsafe.GetPointer<NavMeshPathfinder>(entity);\nagent->RegionMask.ToggleRegion(regionId, false)\n```\n\n----------------------------------------\n\nTITLE: Updating KCC Settings in C#\nDESCRIPTION: This snippet demonstrates how to update the KinematicCharacterController (KCC) settings based on the player's status. It selects different configurations for normal movement, ball carrying, and during ability usage or knockback.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic unsafe void UpdateKCCSettings(Frame frame, EntityRef playerEntityRef)\n{\n    PlayerStatus* playerStatus = frame.Unsafe.GetPointer<PlayerStatus>(playerEntityRef);\n    AbilityInventory* abilityInventory = frame.Unsafe.GetPointer<AbilityInventory>(playerEntityRef);\n    CharacterController3D* kcc = frame.Unsafe.GetPointer<CharacterController3D>(playerEntityRef);\n    CharacterController3DConfig config;\n    if (playerStatus->IsKnockbacked || abilityInventory->HasActiveAbility)\n    {\n        config = frame.FindAsset<CharacterController3DConfig>(NoMovementKCCSettings.Id);\n    }\n    else if (playerStatus->IsHoldingBall)\n    {\n        config = frame.FindAsset<CharacterController3DConfig>(CarryingBallKCCSettings.Id);\n    }\n    else\n    {\n        config = frame.FindAsset<CharacterController3DConfig>(DefaultKCCSettings.Id);\n    }\n    kcc->SetConfig(frame, config);\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting and Shutting Down Quantum 3 Session\nDESCRIPTION: Illustrates how to gracefully disconnect and shut down all Quantum runners asynchronously or synchronously in Quantum 3.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nasync void Disconnect() {\n    // Signal all runners to shutdown and wait until each one has disconnected\n    await QuantumRunner.ShutdownAllAsync();\n    // OR just signal their shutdown\n    QuantumRunner.ShutdownAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Button State in Quantum Simulation\nDESCRIPTION: Shows how to update a button's state directly in Quantum simulation code, which is useful for non-player entities like bots. The button state must be updated every frame for proper state tracking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// In Quantum code\ninput.button.Update(frame, value);\n```\n\n----------------------------------------\n\nTITLE: BTAgent Update Implementation\nDESCRIPTION: Shows the basic update call for a BTAgent and a complete system implementation for handling BTAgent updates.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nBTManager.Update(frame, filter.Entity);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  public unsafe class AISystem : SystemMainThread, SystemMainThreadFilter<AISystem.Filter>\n  {\n    public struct Filter\n    {\n      public EntityRef Entity;\n      public BTAgent* BTAgent;\n    }\n    public void OnAdded(Frame frame, EntityRef entity, BTAgent* component)\n    {\n        var btRootAsset = frame.FindAsset<BTRoot>(btReference.Id);\n        BTManager.Init(frame, myEntity, btRoot);\n    }\n    public override void Update(Frame frame, ref Filter filter)\n    {\n        BTManager.Update(frame, filter.Entity);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Materializing Prototypes into Runtime Structs\nDESCRIPTION: Code example demonstrating how to materialize a prototype into an actual runtime struct instance when needed.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nFoo f = new Foo();\nfooUser.F.Materialize(frame, ref f, default);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing RuntimePlayer Data in Quantum C#\nDESCRIPTION: This code demonstrates how to retrieve the RuntimePlayer asset associated with a player using the Frame.GetPlayerData() method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic void OnPlayerDataSet(Frame frame, PlayerRef player){\n  var data = frame.GetPlayerData(player);\n}\n```\n\n----------------------------------------\n\nTITLE: Replay File Deserialization\nDESCRIPTION: Code for loading and deserializing a replay file in Unity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar replayFile = JsonUtility.FromJson<QuantumReplayFile>(ReplayFile.text);\n```\n\n----------------------------------------\n\nTITLE: AIContext Access in Action\nDESCRIPTION: Shows how to access user-specific context in an AI action.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    [System.Serializable]\n    public unsafe class SampleAction : AIAction\n    {\n        public override void Update(Frame frame, EntityRef entity, ref AIContext aiContext)\n        {\n            var userContext = aiContext.UserData();\n            // either cash the data in local variables\n            var agent = userContext.HfsmAgent;\n            var blackboard = userContext.Blackboard;\n\n            // or use it right away where needed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Component RNGSession with Seed\nDESCRIPTION: Demonstrates how to initialize a component-level RNGSession with a specific seed value.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/rngsession.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void InitComponentWithSeed(MyComponent* component)\n{\n    int newSeed = 100;\n    component->Session = new RNGSession(newSeed);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Colliders in Code\nDESCRIPTION: Shows how to create a physics collider using a compound shape.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/shape-config.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n    var collider = PhysicsCollider2D.Create(f, compoundShape);\n    f.Set(entity, collider);\n```\n\n----------------------------------------\n\nTITLE: Creating a Spawn Point Baker for Quantum Maps\nDESCRIPTION: This implementation creates a SpawnPointBaker that collects spawn points from GameObjects tagged as 'SpawnPoint' in the Unity scene and converts them to Quantum's fixed-point format. The data is stored in the map's custom user asset for use during gameplay.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/map-baking.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using UnityEditor;\n  using UnityEngine;\n  public class SpawnPointBaker : MapDataBakerCallback\n  {\n    public override void OnBeforeBake(QuantumMapData data)\n    {\n    }\n    public override void OnBake(QuantumMapData data)\n    {\n      var customData = QuantumUnityDB.GetGlobalAssetEditorInstance<Map>(data.Asset.UserAsset.Id);\n      var spawnPoints = GameObject.FindGameObjectsWithTag(\"SpawnPoint\");\n      if (customData == null || spawnPoints.Length == 0)\n      {\n        return;\n      }\n      var defaultSpawnPoint = spawnPoints[0];\n      if (customData.DefaultSpawnPoint.Equals(default(MapCustomData.SpawnPointData)))\n      {\n        customData.DefaultSpawnPoint.Position = defaultSpawnPoint.transform.position.ToFPVector3();\n        customData.DefaultSpawnPoint.Rotation = defaultSpawnPoint.transform.rotation.ToFPQuaternion();\n      }\n      customData.SpawnPoints = new MapCustomData.SpawnPointData[spawnPoints.Length];\n      for (var i = 0; i < spawnPoints.Length; i++)\n      {\n        customData.SpawnPoints[i].Position = spawnPoints[i].transform.position.ToFPVector3();\n        customData.SpawnPoints[i].Rotation = spawnPoints[i].transform.rotation.ToFPQuaternion();\n      }\n#if UNITY_EDITOR\n      EditorUtility.SetDirty(customData);\n#endif\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Map and NavMesh in C#\nDESCRIPTION: Shows how to access Map and NavMesh instances from the Frame object.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Map is the container for several static data, such as navmeshes, etc\nMap map = f.Map;\nvar navmesh = map.NavMeshes[\"MyNavmesh\"];\n```\n\n----------------------------------------\n\nTITLE: Disabling a Navmesh Region Globally in C#\nDESCRIPTION: This snippet demonstrates how to get a region by its name from the map and disable it globally using the NavMeshRegionMask.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/regions.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar regionId = frame.Map.RegionMap[\"Foo\"];\nframe.NavMeshRegionMask->ToggleRegion(regionId, false);\n```\n\n----------------------------------------\n\nTITLE: Managing Asset References and Data Safely in C#\nDESCRIPTION: Examples of safe and unsafe operations with assets, showing that switching references is allowed but modifying asset data is not deterministic and should be avoided.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// cd is a CharacterData*\n// this is VALID and SAFE, as the CharacterSpec asset ref is part of the game state\ncd->Spec = frame.FindAsset<CharacterSpec>(\"anotherCharacterSpec-path\");\n// this is NOR valid NEITHER deterministic, as the internal data from an asset is NOT part of the transient game state:\nvar spec = frame.FindAsset<CharacterSpec>(\"anotherCharacterSpec-path\");\n// (DO NOT do this) changing a value directly in the asset object instance\nspec.Speed = 10;\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Drawing a 2D Capsule Shape in C#\nDESCRIPTION: This snippet demonstrates how to create a 2D capsule shape and draw it using Quantum's drawing functions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nFP radius = FP._0_50;\nFP extent = FP._1;\nShape2D shape = Shape2D.CreateCapsule(radius, extent);\n// Draw the capsule\nDraw.Capsule(FPVector2.Zero, shape.Capsule);\nDraw.Capsule(FPVector2.Zero, extent, radius);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Canceled and Confirmed Events in C#\nDESCRIPTION: Demonstrates how to subscribe to callbacks for canceled and confirmed events in Quantum, useful for handling non-synced events.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nQuantumCallback.Subscribe(this, (Quantum.CallbackEventCanceled c) => Debug.Log($\"Cancelled event {c.EventKey}\"));\nQuantumCallback.Subscribe(this, (Quantum.CallbackEventConfirmed c) => Debug.Log($\"Confirmed event {c.EventKey}\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Map Data Baker Implementation\nDESCRIPTION: Demonstrates implementing a custom map data baker with the required QuantumMapBakeAssembly attribute. This sample shows the structure required for hooking into the Quantum map baking pipeline to process custom scene data.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: QuantumMapBakeAssembly]\npublic class MyCustomDataBaker: MapDataBakerCallback {\n  public void OnBake(MapData data) {\n    // any custom code to live-load data from scene to be baked into a custom asset\n    // generated custom asset can then be assigned to data.Asset.Settings.UserAsset\n  }\n  public void OnBeforeBake(MapData data) {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Assets at Runtime Using GetGlobalAsset\nDESCRIPTION: Demonstrates how to access extended asset fields at runtime using QuantumUnityDB.GetGlobalAsset method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/extending-assets.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nCharacterSpec characterSpec = QuantumUnityDB.GetGlobalAsset(assetRef);\nDebug.Log(characterSpec.DisplayName);\n```\n\n----------------------------------------\n\nTITLE: Copying RuntimeConfig with JSON Serialization in C#\nDESCRIPTION: Shows how to create a copy of a RuntimeConfig instance using the Copy method with a QuantumUnityJsonSerializer. This can be used to test serialization or duplicate configurations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/config-files.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar copy = RuntimeConfig.Copy(runtimeConfig, new QuantumUnityJsonSerializer());\n```\n\n----------------------------------------\n\nTITLE: Blackboard Value Retrieval\nDESCRIPTION: Code snippet showing how to read a value from a blackboard asset.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar value = blackboardComponent->Board.GetValue(\"someKey\");\n```\n\n----------------------------------------\n\nTITLE: Implementing KCC OnEnter Method in C#\nDESCRIPTION: Defines the OnEnter method for KCC processors, which is invoked when the KCC starts colliding with a collider. The return value controls the start of the interaction.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/processors.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual bool OnEnter(KCCContext context, KCCProcessorInfo processorInfo, KCCOverlapHit overlapHit) => true;\n```\n\n----------------------------------------\n\nTITLE: Setting Prediction Area in Unity for Quantum Engine\nDESCRIPTION: This code snippet demonstrates how to set the prediction area in Unity for the Quantum engine. It updates the prediction area by calling SetPredictionArea() on every Unity update, passing a center point and radius.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/prediction-culling.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// center is either FPVector2 or FPVector3\n// radius is an FP\nQuantumRunner.Default.Game.SetPredictionArea(center, radius);\n```\n\n----------------------------------------\n\nTITLE: Using ComponentTypeRef for Dynamic Component Addition\nDESCRIPTION: Demonstrates how to use ComponentTypeRef to reference a component type at runtime, useful for dynamically adding components via polymorphism. This example shows setting a ComponentTypeRef and using it to add a component to an entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// set in an asset or prototype for example\nComponentTypeRef componentTypeRef;\nvar componentIndex = ComponentTypeId.GetComponentIndex(componentTypeRef);\nframe.Add(entityRef, componentIndex);\n```\n\n----------------------------------------\n\nTITLE: Defining Projectile Configuration\nDESCRIPTION: Creates a configuration class for projectile properties including speed and time-to-live settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/9-shooting.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nusing UnityEngine;\nnamespace Quantum\n{\n    public class AsteroidsProjectileConfig : AssetObject\n    {\n        [Tooltip(\"Speed applied to the projectile when spawned\")]\n        public FP ProjectileInitialSpeed = 15;\n        [Tooltip(\"Time until destroy the projectile\")]\n        public FP ProjectileTTL = 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Agents for Debugging in C#\nDESCRIPTION: Shows how to register agents to appear in the Debugger Window during simulation. This allows for custom labeling of entities in the debugger.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nBotSDKDebuggerSystem.AddToDebugger(entitiRef, (optional) customLabel);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateless System in C#\nDESCRIPTION: Illustrates how to create a stateless system in Quantum. This example defines a LogicSystem class that extends SystemMainThread and implements the Update method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/quantum-intro.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic unsafe class LogicSystem : SystemMainThread\n{\n  public override void Update(Frame frame)\n  {\n    // customer game logic here\n    // (frame is a reference for the generated game state container).\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Hard and Soft References to Quantum Assets\nDESCRIPTION: Demonstrates the difference between hard references and soft references (AssetRef<T>) to Quantum assets. Soft references allow for dynamic loading methods while avoiding direct dependencies on asset files.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestScript : MonoBehaviour {\n  // hard reference\n  public CharacterSpec HardRef;\n  // soft reference\n  public AssetRef<CharacterSpec> SoftRef;\n  void Start() {\n    // depending on the target asset's settings, this call may result in\n    // any of the supported loading methods being used\n    CharacterSpec characterData = QuantumUnityDB.GetGlobalAsset(SoftRef);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Navmesh Regions on Map Change in C#\nDESCRIPTION: This snippet implements the ISignalOnMapChanged interface to reset all navmesh regions when the map changes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/regions.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResetRegionsSystem : SystemSignalsOnly, ISignalOnMapChanged {\n    public void OnMapChanged(Frame frame, AssetRefMap previousMap) {\n        frame.ClearAllNavMeshRegions();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Interest Groups in Photon using C#\nDESCRIPTION: Method for modifying a client's interest group subscriptions. Allows adding and removing group numbers dynamically. Uses arrays of byte values to specify groups to add or remove, with special handling for null and empty arrays.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/interestgroups.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbool LoadBalancingPeer.OpChangeGroups(byte[] groupsToRemove, byte[] groupsToAdd)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing From Quantum Events in C#\nDESCRIPTION: Demonstrates how to unsubscribe from Quantum events, including canceling specific subscriptions, all subscriptions for a listener, or all listeners for a specific event type.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar subscription = QuantumEvent.Subscribe();\n// cancels this specific subscription\nQuantumEvent.Unsubscribe(subscription);\n// cancels all subscriptions for this listener\nQuantumEvent.UnsubscribeListener(this);\n// cancels all listeners to EventPlayerHit for this listener\nQuantumEvent.UnsubscribeListener<EventPlayerHit>(this);\n```\n\n----------------------------------------\n\nTITLE: Implementing Wave Spawning Fix\nDESCRIPTION: Adds functionality to spawn new waves of asteroids when all existing asteroids are destroyed.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/10-collision-detection.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic void OnRemoved(Frame frame, EntityRef entity, AsteroidsAsteroid* component)\n{\n    if (frame.ComponentCount<AsteroidsAsteroid>() <= 1)\n    {\n        SpawnAsteroidWave(frame);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Frame State in Quantum\nDESCRIPTION: Quantum-specific global frame definition for tracking asteroid wave count across the game simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_3\n\nLANGUAGE: quantum\nCODE:\n```\nglobal\n{\n    Int32 AsteroidsWaveCount;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Token Timeout in C#\nDESCRIPTION: Example of handling authentication token expiration and invalid authentication in the OnDisconnected callback. This code snippet shows how to restart the default connection sequence when these specific disconnect causes are encountered.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/reconnecting.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void OnDisconnected(DisconnectCause cause) {\n    switch (cause) {\n        case DisconnectCause.AuthenticationTicketExpired:\n        case DisconnectCause.InvalidAuthentication:\n            // Restart with your default connection sequence\n        break;\n```\n\n----------------------------------------\n\nTITLE: Loading Assets at Edit-time Using QuantumUnityDB\nDESCRIPTION: Demonstrates loading assets during Unity editor time using QuantumUnityDB.GetGlobalAssetEditorInstance method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/extending-assets.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nCharacterSpec characterSpec = QuantumUnityDB.GetGlobalAssetEditorInstance<CharacterSpec>(guid);\nDebug.Log(characterSpec.DisplayName);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ship Properties in C#\nDESCRIPTION: Creates a configuration class for ship properties including turn speed, acceleration, fire interval, and projectile settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/9-shooting.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nusing UnityEngine;\nnamespace Quantum\n{\n  public class AsteroidsShipConfig : AssetObject\n  {\n    [Tooltip(\"The speed that the ship turns with added as torque\")]\n    public FP ShipTurnSpeed = 8;\n    [Tooltip(\"The speed that the ship accelerates using add force\")]\n    public FP ShipAceleration = 6;\n    [Tooltip(\"Time interval between ship shots\")]\n    public FP FireInterval = FP._0_10;\n    [Tooltip(\"Displacement of the projectile spawn position related to the ship position\")]\n    public FP ShotOffset = 1;\n    [Tooltip(\"Prototype reference to spawn ship projectiles\")]\n    public AssetRef<EntityPrototype> ProjectilePrototype;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending AIContext for Compound Agents\nDESCRIPTION: Implements a partial structure for AIContextUser to manage HFSM and Blackboard references for different agent behaviors.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/snippets.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  public unsafe partial struct AIContextUser\n  {\n    public readonly AIBlackboardComponent* Blackboard;\n    public readonly HFSMAgent* HFSMAgent;\n    public AIContextUser(AIBlackboardComponent* blackboard, HFSMAgent* hfsmAgent)\n    {\n      Blackboard = blackboard;\n      HFSMAgent = hfsmAgent;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Asset Loader in C#\nDESCRIPTION: Demonstrates how to add a new list of assets using the QuantumGlobalScriptableObjectLoaderMethod attribute. This is useful for integrating with systems like Addressables.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[QuantumGlobalScriptableObjectLoaderMethod]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Map Data Baker\nDESCRIPTION: Shows how to create a custom map data baker by implementing the MapDataBakerCallback class. This allows custom data processing during the map baking process, which happens when saving a scene or entering play mode.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class MapDataBakerCallback {\n  public abstract void OnBake(MapData data);\n  public abstract void OnBeforeBake(MapData data);\n  public virtual void OnBakeNavMesh(MapData data) { }\n  public virtual void OnBeforeBakeNavMesh(MapData data) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Deterministic Plugin in C#\nDESCRIPTION: A minimal implementation of a DeterministicPluginFactory that creates an unmodified base plugin object. This serves as a starting point for custom Quantum Server plugins.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/setup.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic override DeterministicPlugin CreateDeterministicPlugin(IPluginHost gameHost, String pluginName, Dictionary<String, String> config, IPluginLogger logger, ref String errorMsg) {\n  return new DeterministicPlugin();\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Checking in C#\nDESCRIPTION: Shows how to check multiple components at once using ComponentSet.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar components = ComponentSet.Create<CharacterController3D, PhysicsBody3D>();\nif (frame.Has(e, components)) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Inheritance in Quantum DSL\nDESCRIPTION: Demonstrates how to use inheritance for events in Quantum's DSL to create specialized event types.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nevent MyBaseEvent {}\nevent SpecializedEventFoo : MyBaseEvent {}\nevent SpecializedEventBar : MyBaseEvent {}\n```\n\n----------------------------------------\n\nTITLE: Polling Button State in Unity\nDESCRIPTION: Demonstrates the correct way to poll for a button's current state in Unity. Only the current state should be polled, as Quantum internally tracks pressed/released states for simulation code.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// In Unity, when polling a player's input\ninput.Jump = UnityEngine.Input.GetKey(KeyCode.Space);\n```\n\n----------------------------------------\n\nTITLE: Declaring Input Structures in Quantum DSL\nDESCRIPTION: Shows how to define input structures in Quantum DSL for exchanging runtime input between clients, including movement vectors and buttons.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_12\n\nLANGUAGE: Qtn\nCODE:\n```\ninput\n{\n  FPVector2 Movement;\n    button Fire;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unity Input Handler for Quantum Framework\nDESCRIPTION: Creates an AsteroidsInput class that collects Unity input events and forwards them to the Quantum simulation engine. Handles keyboard inputs for ship movement and firing, using both WASD and arrow keys, with Space for firing.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nusing UnityEngine;\nnamespace Quantum.Asteroids\n{\n    public class AsteroidsInput : MonoBehaviour\n    {\n        private void OnEnable()\n        {\n            QuantumCallback.Subscribe(this, (CallbackPollInput callback) => PollInput(callback));\n        }\n        public void PollInput(CallbackPollInput callback)\n        {\n            Quantum.Input i = new Quantum.Input();\n\n            // Note: Use GetKey() instead of GetKeyDown/Up. Quantum calculates up/down internally.\n            i.Left = UnityEngine.Input.GetKey(KeyCode.A) || UnityEngine.Input.GetKey(KeyCode.LeftArrow);\n            i.Right = UnityEngine.Input.GetKey(KeyCode.D) || UnityEngine.Input.GetKey(KeyCode.RightArrow);\n            i.Up = UnityEngine.Input.GetKey(KeyCode.W) || UnityEngine.Input.GetKey(KeyCode.UpArrow);\n            i.Fire = UnityEngine.Input.GetKey(KeyCode.Space);\n\n            callback.SetInput(i, DeterministicInputFlags.Repeatable);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Updating UTAgent in C#\nDESCRIPTION: Demonstrates how to initialize and update a Utility Theory agent using UTManager. The code initializes the UtilityReasoner with a UTRoot asset and updates it each frame for a specific entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/utility-theory.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nUTManager.Init(f, &utAgent->UtilityReasoner, utAgent->UtilityReasoner.UTRoot, entity);\nUTManager.Update(f, &utAgent->UtilityReasoner, entity);\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Player Commands in C#\nDESCRIPTION: This snippet demonstrates how to iterate through player commands using a for loop and the Frame API in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// DeterministicCommand GetPlayerCommand(PlayerRef player);\nfor (int p = 0; p < f.PlayerCount; p++) {\n  var command = f.GetPlayerCommand(p);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Config Values in C#\nDESCRIPTION: Shows how to retrieve configuration values from an AIConfig asset. This can be used to access different constant values for various agents using the same AI behavior logic, allowing for easy difficulty adjustments.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar myBoolean = myConfig.Get(\"Key\").Value.Boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Jump Event Handler in Unity\nDESCRIPTION: Demonstrates how to subscribe to and handle jump events from Quantum in Unity, updating the animator accordingly.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/animation.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using UnityEngine;\n  public class CharacterAnimations : QuantumEntityViewComponent\n  {\n    private Animator _animator;\n    public override void OnInitialize()\n    {\n      _animator = GetComponentInChildren<Animator>();\n      QuantumEvent.Subscribe<EventPlayerJump>(this, OnPlayerJump);\n    }\n    private void OnPlayerJump(EventPlayerJump e)\n    {\n      if (e.EntityRef == EntityRef)\n      {\n        _animator.SetTrigger(\"Jump\");\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HFSM Agent Initialization with Asset in C#\nDESCRIPTION: Demonstrates how to initialize an HFSM agent with a root asset reference.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar hfsmRootAsset = f.FindAsset<HFSMRoot>(hfsmRoot.Id);\nHFSMManager.Init(frame, entityRef, hfsmRootAsset);\n```\n\n----------------------------------------\n\nTITLE: Updating Interest Groups in C# using Photon Realtime API\nDESCRIPTION: This snippet demonstrates how to update Interest Groups for a client in the Particle Demo. It checks the current group and calls OpChangeGroups to update the server with the client's interests.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/quick-start.md#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateInterestGroups()\n{\n    if (this.UseInterestGroups)\n    {\n        byte currentGroup = this.GetGroup(this.LocalPlayer);\n        if (currentGroup != this.LocalPlayer.VisibleGroup)\n        {\n            this.RealtimeClient.OpChangeGroups(new byte[0], new byte[] { currentGroup });     // config the server to only send this group\n            this.LocalPlayer.VisibleGroup = currentGroup;                               // store which group we now are interested in (server side)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Folder structure showing the organization of Quantum SDK files and user code directories within Unity project assets\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-project.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAssets\n├───Photon\n│   ├───PhotonLibs\n│   ├───PhotonRealtime\n│   ├───Quantum\n│   ├───QuantumAsteroids\n│   └───QuantumMenu\n└───QuantumUser\n    ├───Editor\n    │   ├───CodeGen\n    |   └───Generated\n    ├───Resources\n    ├───Scenes\n    ├───Simulation\n    │   └───Generated\n    └───View\n        └───Generated\n```\n\n----------------------------------------\n\nTITLE: Quantum System Activation Control\nDESCRIPTION: Example showing how to control system activation state at runtime using Frame methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void OnInit(Frame frame)\n{\n  // deactivates MySystem, so no updates (or signals) are called in it\n  frame.SystemDisable<MySystem>();\n  // (re)activates MySystem\n  frame.SystemEnable<MySystem>();\n  // possible to query if a System is currently enabled\n  var enabled = frame.SystemIsEnabled<MySystem>();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Enum AIParam Implementation\nDESCRIPTION: Shows how to create an AIParam type for custom enums.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Considering this enum:\npublic enum BotType { None, HFSM, BT, UT };\n// Create a new AIParam class based on that enum:\n[System.Serializable]\n  public unsafe sealed class AIParamBotType : AIParam<BotType>\n  {\n    public static implicit operator AIParamBotType(BotType value) { return new AIParamBotType() { DefaultValue = value }; }\n    protected override BotType GetBlackboardValue(BlackboardValue value)\n    {\n      int enumValue = *value.IntegerValue;\n      return (BotType)enumValue;\n    }\n    protected override BotType GetConfigValue(AIConfig.KeyValuePair config)\n    {\n      return (BotType)config.Value.Integer;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Blackboard API Usage Examples\nDESCRIPTION: Examples of using the Blackboard API for reading and writing values, showing type-specific methods and different setter overrides.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/blackboard.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// There is one method for each specific blackboard type (int, byte, FP, boolean, FP vectors and entityRef)\nblackboardComponent->GetInteger(frame, key);\n// For the setter method, there are different overrides depending on the type of data passed as the value\nblackboardComponent->Set(frame, key, value);\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicStartRequest Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicStartRequest, called when Quantum requests to start the simulation. Return false to deny the request.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean OnDeterministicStartRequest(Protocol.StartRequest startRequestData)\n```\n\n----------------------------------------\n\nTITLE: Filtering Room Properties in Join Random (C#)\nDESCRIPTION: Demonstrates how to join a random room with specific properties and expected max players using Photon's LoadBalancingClient. It includes error handling and success callbacks.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\nusing Hashtable = ExitGames.Client.Photon.Hashtable;\npublic class RandomMatchmakingExample : IMatchmakingCallbacks\n{\n    public const string MAP_PROP_KEY = \"map\";\n    private LoadBalancingClient loadBalancingClient;\n    public void JoinRandomRoom(byte mapCode, byte expectedMaxPlayers)\n    {\n        Hashtable expectedCustomRoomProperties = new Hashtable { { MAP_PROP_KEY, mapCode } };\n        OpJoinRandomRoomParams opJoinRandomRoomParams = new OpJoinRandomRoomParams();\n        opJoinRandomRoomParams.ExpectedMaxPlayers = expectedMaxPlayers;\n        opJoinRandomRoomParams.ExpectedCustomRoomProperties = expectedCustomRoomProperties:\n        loadBalancingClient.OpJoinRandomRoom(opJoinRandomRoomParams);\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region IMatchmakingCallbacks\n    void IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)\n    {\n        // log error code and message\n        // here usually you create a new room\n    }\n    void IMatchmakingCallbacks.OnJoinedRoom()\n    {\n        // joined a room successfully, OpJoinRandomRoom leads here on success\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeterministicInputFlags Enum in C#\nDESCRIPTION: Enum definition for DeterministicInputFlags that controls player input states and behavior. Used to track player connectivity, input repeatability, and server-side input replacement scenarios.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/input-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum DeterministicInputFlags : byte {\n  Repeatable = 1 << 0,\n  PlayerNotPresent = 1 << 1,\n  ReplacedByServer = 1 << 2,\n  Command = 1 << 3\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Filter Creation in C#\nDESCRIPTION: Example of creating a basic filter for multiple components and a more complex filter with 'without' and 'any' ComponentSet conditions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar filtered = frame.Filter<Transform3D, PhysicsBody3D>();\n\nvar without = ComponentSet.Create<CharacterController3D>();\nvar any = ComponentSet.Create<NavMeshPathFinder, NavMeshSteeringAgent>();\nvar filtered = frame.Filter<Transform3D, PhysicsBody3D>(without, any);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication in C#\nDESCRIPTION: This snippet demonstrates how to set up custom authentication parameters and connect to a Photon server using C#. It includes setting the authentication type, adding parameters, and assigning a user ID.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAuthenticationValues authValues = new AuthenticationValues();\nauthValues.AuthType = CustomAuthenticationType.Custom;\nauthValues.AddAuthParameter(\"user\", userId);\nauthValues.AddAuthParameter(\"pass\", pass);\nauthValues.UserId = userId; // this is required when you set UserId directly from client and not from web service\nloadBalancingClient.AuthValues = authValues;\n// connect\n```\n\n----------------------------------------\n\nTITLE: Enabling CCD in Physics Scene Settings\nDESCRIPTION: Code snippet showing how to enable Continuous Collision Detection at runtime by modifying the PhysicsSceneSettings in the current game frame.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/ccd.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nframe.PhysicsSceneSettings->CCDSettings.AllowCCD = true;\n```\n\n----------------------------------------\n\nTITLE: Cloning Static Maps\nDESCRIPTION: Shows how to create a dynamic map by cloning an existing static map.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/dynamic-map.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar dynamicMap = DynamicMap.FromStaticMap(f.Map);\n```\n\n----------------------------------------\n\nTITLE: Creating an Abstract Base Asset Class in C#\nDESCRIPTION: Definition of an abstract base asset class that can be extended by concrete implementations, enabling asset inheritance.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n  public abstract class CharacterSpec : AssetObject {\n    public FP Speed;\n    public FP MaxHealth;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Creating NavMesh Avoidance Obstacle in Code\nDESCRIPTION: Creates a new entity with NavMeshAvoidanceObstacle component and configures its basic properties including position, layer, radius and velocity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/avoidance.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar c = f.Create();\nf.Set(c, new Transform2D { Position = new FPVector2(8,-2) });\nvar obstacle = new NavMeshAvoidanceObstacle();\nobstacle.AvoidanceLayer = 0;\nobstacle.Radius = FP._0_50;\nobstacle.Velocity = FPVector2.Zero;\nf.Set(c, obstacle);\n```\n\n----------------------------------------\n\nTITLE: Basic HFSM Decision Implementation in C#\nDESCRIPTION: Shows how to implement a simple HFSM decision class that always returns true.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  [System.Serializable]\n  public partial class TrueDecision : HFSMDecision\n  {\n    public override unsafe bool Decide(Frame frame, EntityRef entity)\n    {\n      return true;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Asteroid Component Definition\nDESCRIPTION: Extends the asteroid component with child asteroid reference and spawn signal definition.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/10-collision-detection.md#2025-04-23_snippet_4\n\nLANGUAGE: Qtn\nCODE:\n```\ncomponent AsteroidsAsteroid\n{\n    asset_ref<EntityPrototype> ChildAsteroid;\n}\nsignal SpawnAsteroid(AssetRef<EntityPrototype> childPrototype, EntityRef parent);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Quantum Connection Behaviour in C#\nDESCRIPTION: This snippet demonstrates how to create a custom connection behaviour by inheriting from QuantumMenuConnectionBehaviourSDK. It overrides the ConnectAsyncInternal method to add custom logic for setting the player's team ID.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/sample-menu/sample-menu-customization.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Quantum\n{\n  using Quantum.Menu;\n  using System.Threading.Tasks;\n  public class CustomQuantumConnectionBehaviour : QuantumMenuConnectionBehaviourSDK\n  {\n    protected override Task<ConnectResult> ConnectAsyncInternal(QuantumMenuConnectArgs connectArgs)\n    {\n      connectArgs.RuntimePlayers[0].TeamId = 1; // Add any game-specific logic for getting the desired team id here\n      return base.ConnectAsyncInternal(connectArgs);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Cached Events with Filter Pattern in C# Photon\nDESCRIPTION: This snippet illustrates how to remove cached events using a filter pattern in Photon with C#. It shows the use of a Hashtable as event data and the RemoveFromRoomCache option to clean up specific cached events.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/cached-events.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nHashtable eventData = new Hashtable(){\"oid\", objectId};\nRaiseEventOptions options = new RaiseEventOptions();\noptions.CachingOption = EventCaching.RemoveFromRoomCache;\n```\n\n----------------------------------------\n\nTITLE: Assigning Asset References in C#\nDESCRIPTION: Code showing how to find an asset by path in the frame's asset database and assign it to a component property.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// assuming cd is a pointer to the CharacterData component\n// using the SLOW string path option (fast data driven asset refs will be explained next)\ncd->Spec = frame.FindAsset<CharacterSpec>(\"path-to-spec\");\n\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Quantum Runner in C#\nDESCRIPTION: Shows how to stop and destroy the QuantumSession, which is necessary when disconnecting before reconnecting.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/reconnecting.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nQuantumRunner.ShutdownAll(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicPlayerAdd Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicPlayerAdd, called when a new player is added to the Quantum simulation. Provides player slot and runtime player data access.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicPlayerAdd(int playerSlot, ref byte[] runtimePlayer)\n```\n\n----------------------------------------\n\nTITLE: Creating Quantum Entity Configuration\nDESCRIPTION: Configuration settings for creating a 2D circle entity with physics properties, including collider radius of 1.1 and PhysicsBody2D component for rigidbody physics.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/3-setting-up-a-scene.md#2025-04-23_snippet_1\n\nLANGUAGE: Unity\nCODE:\n```\nEntity Configuration:\n- GameObject: AsteroidLarge\n- PhysicsCollider2D: Radius = 1.1\n- PhysicsBody2D: Enabled\n- Transform Child (Model):\n  - Scale: (1.5, 1.5, 1.5)\n  - Rotation: (25, 17, -53)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component Structure in C# for Quantum 3\nDESCRIPTION: Shows the structure required for defining a custom component outside of the DSL. This includes implementing IComponent, defining SIZE, Serialize method, and OnAdded/OnRemoved delegates.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[StructLayout(LayoutKind.Explicit)]\npublic unsafe struct Example : IComponent {\n  public const int SIZE = sizeof(int);\n\n  public static ComponentChangedDelegate OnAdded;\n  public static ComponentChangedDelegate OnRemoved;\n\n  [FieldOffset(0)]\n  public int _number;\n\n  public static void Serialize(void* ptr, IDeterministicFrameSerializer serializer) {\n    serializer.Stream.Serialize(&((Example*)ptr)->_number);\n  }\n  public override int GetHashCode() {\n    return _number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Data with ByteArraySlice Pool in C#\nDESCRIPTION: Demonstrates how to use ByteArraySlicePool for efficient serialization of byte arrays with minimal memory allocation. Shows acquiring a pooled slice, writing serialization data, and automatic pool return.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/performance-tips.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Serialization()\n{\n    // Get a pooled Slice.\n    var pool = loadBalancingClient.LoadBalancingPeer.ByteArraySlicePool;\n    var slice = pool.Acquire(256);\n    // Write your serialization to the byte[] Buffer.\n    // Set Count to the number of bytes written.\n    slice.Count = MySerialization(slice.Buffer);\n    loadBalancingClient.OpRaiseEvent(MSG_ID, slice, opts, sendOpts);\n    // The ByteArraySlice that was Acquired is automatically returned to the pool\n    // inside of the OpRaiseEvent\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collision Signals\nDESCRIPTION: Defines signals for different types of collisions between game entities.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/10-collision-detection.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nsignal OnCollisionProjectileHitShip(CollisionInfo2D info, AsteroidsProjectile* projectile, AsteroidsShip* ship);\nsignal OnCollisionProjectileHitAsteroid(CollisionInfo2D info, AsteroidsProjectile* projectile, AsteroidsAsteroid* asteroid);\nsignal OnCollisionAsteroidHitShip(CollisionInfo2D info, AsteroidsShip* ship, AsteroidsAsteroid* asteroid);\n```\n\n----------------------------------------\n\nTITLE: Initializing Shape Configurations in C#\nDESCRIPTION: Demonstrates how to define shape configurations in a character specification data asset that can be edited from Unity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/collider-body.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// data asset containing a shape config property\npartial class CharacterSpec {\n  // this will be edited from Unity\n  public Shape2DConfig Shape2D;\n  public Shape3DConfig Shape3D;\n  public FP Mass;\n}\n```\n\n----------------------------------------\n\nTITLE: IPhotonPeerListener Interface Implementation\nDESCRIPTION: Core interface that must be implemented to handle Photon callbacks including status changes, operation responses, events, and debug information.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/dotnet-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IPhotonPeerListener\n{\n    void OnStatusChanged(StatusCode status);\n    void OnOperationResponse(OperationResponse response);\n    void OnEvent(EventData eventData);\n    void DebugReturn(DebugLevel level, string message);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WeaponSpec with Shape3DConfig\nDESCRIPTION: Demonstrates how to expose ShapeConfig in a custom asset class that includes attack shape configuration, layer masks and damage parameters.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/shape-config.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    public unsafe partial class WeaponSpec\n    {\n        public Shape3DConfig AttackShape;\n        public LayerMask AttackLayers;\n        public FP Damage;\n        public FP KnockbackForce;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Room Properties for Total Player Count in C#\nDESCRIPTION: Method to update the room's custom properties with the current total player count, including additional local players across all connected clients. This is maintained by the master client to enforce player count limits.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateRoomTotalPlayers()\n{\n    if (_connection != null && _connection.Client.InRoom && _connection.Client.LocalPlayer.IsMasterClient)\n    {\n        int totalPlayers = 0;\n        foreach (var player in _connection.Client.CurrentRoom.Players.Values)\n        {\n            if (player.CustomProperties.TryGetValue(LOCAL_PLAYERS_PROP_KEY, out var localPlayersCount))\n            {\n                totalPlayers += (int)localPlayersCount;\n            }\n        }\n        _connection.Client.CurrentRoom.SetCustomProperties(new PhotonHashtable\n        {\n            { TOTAL_PLAYERS_PROP_KEY, totalPlayers }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ConnectToRoomAsync Method Definition for Matchmaking (C#)\nDESCRIPTION: This snippet shows the method signature for ConnectToRoomAsync extension method, which combines common connection logic for Photon matchmaking into a single method that returns a Task.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task<RealtimeClient> ConnectToRoomAsync(MatchmakingArguments arguments)\n\n```\n\n----------------------------------------\n\nTITLE: Setting AIContext Usage\nDESCRIPTION: Example showing AIContext management recommendations, emphasizing creating it from scratch each frame for safety.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nAIContext\n```\n\n----------------------------------------\n\nTITLE: Configuring Matchmaking for Multiple Local Players in C#\nDESCRIPTION: Override of the OnConnect method that sets up matchmaking arguments with SQL lobby filtering to account for local players. This ensures rooms don't exceed the maximum player count when considering both remote and local players.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnConnect(QuantumMenuConnectArgs connectArgs, ref MatchmakingArguments args)\n{\n    args.RandomMatchingType = MatchmakingMode.FillRoom;\n    args.Lobby = LocalPlayerCountManager.SQL_LOBBY;\n    args.CustomLobbyProperties = new string[] { LocalPlayerCountManager.TOTAL_PLAYERS_PROP_KEY };\n    args.SqlLobbyFilter = $\"{LocalPlayerCountManager.TOTAL_PLAYERS_PROP_KEY} <= {Input.MAX_COUNT - _localPlayersCountSelector.GetLastSelectedLocalPlayersCount()}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Quantum System Start Disabled Configuration\nDESCRIPTION: Example showing how to configure a system to start in disabled state by default.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override bool StartEnabled => false;\n```\n\n----------------------------------------\n\nTITLE: Explicit FP Casting\nDESCRIPTION: Shows explicit casting from FP to float or double.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar v = (double)FP._1;\nvar v = (float)FP._1;\n```\n\n----------------------------------------\n\nTITLE: Creating Linear FPAnimationCurve in C#\nDESCRIPTION: This snippet defines a static method to create a simple, linear FPAnimationCurve with five key points. It allows specifying pre and post wrap modes for the curve.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n// Creating a simple, linear curve with five key points\n// Change the parameter as prefered\npublic static class FPAnimationCurveUtils\n{\n    public static FPAnimationCurve CreateLinearCurve(FPAnimationCurve.WrapMode preWrapMode, FPAnimationCurve.WrapMode postWrapMode)\n    {\n        return new FPAnimationCurve\n        {\n            Samples = new FP[5] { FP._0, FP._0_25, FP._0_50, FP._0_75, FP._1 },\n            PostWrapMode = (int)postWrapMode,\n            PreWrapMode = (int)preWrapMode,\n            StartTime = 0,\n            EndTime = 1,\n            Resolution = 32\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving AIParam Values with Config in C#\nDESCRIPTION: Demonstrates how to resolve an AIParam value using the provided configuration. This allows for flexible parameter resolution based on the specific config asset passed as a parameter.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Considering that the variable \"AttackRange\" is of type AIParamFP\nFP rangeValue = AttackRange.Resolve(f, blackboard, myConfig);\n```\n\n----------------------------------------\n\nTITLE: Reconnecting to Photon Realtime Room in C#\nDESCRIPTION: Asynchronous method to reconnect and rejoin a Photon Realtime room using MatchmakingExtensions. This method attempts to directly connect to the game server and rejoin the room using previously configured MatchmakingArguments.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/reconnecting.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRealtimeClient Client = await MatchmakingExtensions.ReconnectToRoomAsync(arguments);\n```\n\n----------------------------------------\n\nTITLE: Implementing QuantumReplayFile Class in C#\nDESCRIPTION: Defines the main replay file structure class that stores compressed input history, runtime configuration, checksums and asset data. This class handles all data needed to replay a Quantum game session and can be serialized to JSON.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class QuantumReplayFile {\n  // Delta compressed binary input history, this is the same that is send over replay webhooks for example.\n  public QuantumJsonFriendlyDataBlob InputHistoryDeltaCompressed;\n  // Full verbose input used in Quantum 2.1, which is still functional, but has only fringe use cases.\n  public DeterministicTickInputSet[] InputHistoryLegacy;\n  // Binary serialized RuntimeConfig.\n  // Use AssetSerializer.ConfigToByteArray(runtimeConfig, compress: true)\n  public QuantumJsonFriendlyDataBlob RuntimeConfigData;\n  /// The session config.\n  public DeterministicSessionConfig DeterministicConfig;\n  /// The last tick of the input.\n  public int LastTick;\n  /// The initial tick to start from, requires <see cref=\"InitialFrameData\"/> to be set.\n  public int InitialTick;\n  /// Optional frame data to start the replay with. This is used for save games for example.\n  public byte[] InitialFrameData;\n  /// Optional checksums. Omit this for replays in production environments.\n  public ChecksumFile Checksums;\n  /// Optional serialized asset database. Omit this for replays in production environments.\n  /// Use AssetSerializer.SerializeAssets(stream, ResourceManager.LoadAllAssets().ToArray()\n  public QuantumJsonFriendlyDataBlob AssetDatabaseData;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating NavMeshAgent Update Interval\nDESCRIPTION: Formula to determine when an agent should be updated based on its entity index and the configured update interval. This is used for performance optimization by reducing the frequency of agent updates.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/workflow-agents.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nupdateAgent = entity.Index % agentConfig.UpdateInterval == f.Number % agentConfig.UpdateInterval\n```\n\n----------------------------------------\n\nTITLE: Extending VehiclePrototype with Custom Parameters\nDESCRIPTION: A partial class implementation that extends the VehiclePrototype to include additional designer-configurable parameters and custom materialization logic. It populates the Prototype reference during materialization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/materialization.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Deterministic;\nusing Quantum.Inspector;\nusing System;\nnamespace Quantum.Prototypes\n{\npublic unsafe partial class VehiclePrototype\n{\n    // PUBLIC METHODS\n    [Header(\"Engine\")]\n    public FP EngineForwardForce = 130;\n    public FP EngineBackwardForce = 120;\n    public FPVector3 EngineForcePosition;\n    public FP ApproximateMaxSpeed = 20;\n    [Header(\"Hand Brake\")]\n    public FP HandBrakeStrength = 10;\n    public FP HandBrakeTractionMultiplier = 1;\n    [Header(\"Resistances\")]\n    public FP AirResistance = FP._0_02;\n    public FP RollingResistance = FP._0_10 * 6;\n    public FP DownForceFactor = 0;\n    public FP TractionGripMultiplier = 10;\n    public FP AirTractionDecreaseSpeed = FP._0_50;\n    [Header(\"Axles\")]\n    public AxleSetup FrontAxle = new AxleSetup();\n    public AxleSetup RearAxle = new AxleSetup();\n    [Header(\"Nitro\")]\n    public FP MaxNitro = 100;\n    public FP NitroForceMultiplier = 2;\n    // PARTIAL METHODS\n    partial void MaterializeUser(Frame frame, ref Vehicle result, in PrototypeMaterializationContext context)\n    {\n        result.Prototype = context.ComponentPrototypeRef;\n    }\n\n    [Serializable]\n    public class AxleSetup\n    {\n        public FPVector3 PositionOffset;\n        public FP Width = 1;\n        public FP SpringForce = 120;\n        public FP DampingForce = 175;\n        public FP SuspensionLength = FP._0_10 * 6;\n        public FP SuspensionOffset = -FP._0_25;\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Agent Distance for Avoidance Range\nDESCRIPTION: Formula to determine if two agents are within avoidance range of each other based on their positions and radii.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/avoidance.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ninRange = Distance(positionAgentA, positionAgentB) - radiusAgentA - radiusAgentB < AvoidanceRange\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Local Player Callbacks in Quantum 3\nDESCRIPTION: Demonstrates how to subscribe to various local player callbacks for handling player addition and removal confirmations and failures in Quantum 3.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nQuantumCallback.Subscribe(this, (CallbackLocalPlayerAddConfirmed c)    => OnLocalPlayerAddConfirmed(c));\nQuantumCallback.Subscribe(this, (CallbackLocalPlayerRemoveConfirmed c) => OnLocalPlayerRemoveConfirmed(c));\nQuantumCallback.Subscribe(this, (CallbackLocalPlayerAddFailed c)       => OnLocalPlayerAddFailed(c));\nQuantumCallback.Subscribe(this, (CallbackLocalPlayerRemoveFailed c)    => OnLocalPlayerRemoveFailed(c));\n```\n\n----------------------------------------\n\nTITLE: Loading Assets at Edit-time Using AssetDatabase\nDESCRIPTION: Shows how to load assets during Unity editor time using UnityEditor.AssetDatabase.LoadAssetAtPath method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/extending-assets.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nCharacterSpecAsset characterSpecAsset = UnityEditor.AssetDatabase.LoadAssetAtPath<CharacterSpecAsset>(path);\nDebug.Log(characterSpecAsset.DisplayName);\n```\n\n----------------------------------------\n\nTITLE: Modifying PhysicsMaterial Properties (Unsafe) in C#\nDESCRIPTION: Shows an unsafe way to modify PhysicsMaterial properties at runtime, which leads to non-deterministic behavior. Also demonstrates the safe way to switch material references.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/material.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// this is NOT safe and cannot be rolled-back:\ncollider->Material.Restitution = FP._0;\n// switching a reference is safe and can be rolled back:\nvar newMaterial = f.FindAsset<PhysicsMaterial>(\"ice\");\ncollider->Material = newMaterial;\n```\n\n----------------------------------------\n\nTITLE: Using Structs in Event Definitions with Quantum DSL\nDESCRIPTION: Illustrates how to incorporate pre-defined structs into event definitions for more complex data structures.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_6\n\nLANGUAGE: Qtn\nCODE:\n```\nstruct FooEventData {\n  FP Bar;\n  FP Par;\n  FP Rap;\n}\nevent FooEvent {\n  FooEventData EventData;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DotNetSessionRunner for Quantum Server Simulation\nDESCRIPTION: Configuration snippet for setting up a DotNetSessionRunner with a JSON asset serializer, required for running Quantum server-side simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessionRunner = new DotNetSessionRunner {\n  AssetSerializer = new QuantumJsonSerializer()\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring RuntimeConfig in C#\nDESCRIPTION: Demonstrates how to create and configure a RuntimeConfig instance with map, simulation config, and systems config references. The RuntimeConfig is assigned to SessionRunner.Arguments when starting a Quantum session.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/config-files.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar map              = new AssetRef<Map>(QuantumUnityDB.GetGlobalAssetGuid(\"Photon/Quantum/Samples/SampleScenes/Resources/SampleMap\"));\nvar simulationConfig = new AssetRef<SimulationConfig>(QuantumUnityDB.GetGlobalAssetGuid(\"QuantumUser/Resources/QuantumDefaultConfigs|DefaultConfigSimulation\"));\nvar systemsConfig    = new AssetRef<SystemsConfig>(QuantumUnityDB.GetGlobalAssetGuid(\"Photon/QuantumUser/Resources/DefaultSystemsConfig\"));\nvar sessionRunnerArguments = new SessionRunner.Arguments {\n    RuntimeConfig = new RuntimeConfig() {\n        Map              = map,\n        Seed             = DateTime.Now.Millisecond\n        SimulationConfig = simulationConfig,\n        SystemsConfig    = systemsConfig },\n    // ..\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Type Method in C#\nDESCRIPTION: Static method signature for registering custom types in Photon with byte array serialization approach.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPhotonPeer.RegisterType(Type customType, byte code, SerializeMethod serializeMethod, DeserializeMethod deserializeMethod)\n```\n\n----------------------------------------\n\nTITLE: FP Division Inlining\nDESCRIPTION: Demonstrates inlined division operations with FP values.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar v = parameter / FP._0_01;\n// inlined integer math\nFP v = default;\nv.RawValue = (parameter.RawValue << FPLut.PRECISION) / FP._0_01.RawValue;\n```\n\n----------------------------------------\n\nTITLE: Custom View Context Implementation\nDESCRIPTION: Implements a custom view context that handles player focus checking for both normal gameplay and replay modes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomViewContext : MonoBehaviour, IQuantumViewContext\n{\n  private PlayerRef _focusedPlayer;\n  public bool IsFocusedPlayer(QuantumGame game, PlayerRef player)\n  {\n    if (game.Session.GameMode == DeterministicGameMode.Replay)\n    {\n      return player == _focusedPlayer;\n    }\n    return game.PlayerIsLocal(player);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Frame Timers in Components\nDESCRIPTION: Shows how to declare FrameTimer variables in component DSL and global scope.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/frame-timer.md#2025-04-23_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\ncomponent Character {\n    FrameTimer SkillCooldown;\n}\nglobal {\n    FrameTimer GameTimer;\n}\n```\n\n----------------------------------------\n\nTITLE: ReconnectToRoomAsync Method Definition for Rejoining Rooms (C#)\nDESCRIPTION: This snippet shows the method signature for ReconnectToRoomAsync extension method, which handles the complex logic of rejoining a previously connected room, including handling cases where the previous connection is still active.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task<RealtimeClient> ReconnectToRoomAsync(MatchmakingArguments arguments)\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Map Data to Position Entities in Quantum\nDESCRIPTION: This snippet demonstrates how to access and use custom map data in the Quantum simulation to position entities at spawn points. It retrieves the MapCustomData from the frame's assets and uses it to set an entity's position and rotation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/map-baking.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar data = frame.FindAsset<MapCustomData>(frame.Map.UserAsset);\ndata.SetEntityToSpawnPoint(f, entity, spawnPointIndex);\n```\n\n----------------------------------------\n\nTITLE: Setting Master Client Explicitly in C#\nDESCRIPTION: Method to manually change the Master Client to a specific player in a Photon room. Returns a boolean indicating if the operation request was successfully sent.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/hostmigration.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.CurrentRoom.SetMasterClient(photonPlayer);\n```\n\n----------------------------------------\n\nTITLE: Adding Player to Specific Slot in Quantum 3\nDESCRIPTION: Shows how to add a player to a specific player slot (in this case, slot 1) using QuantumGame.AddPlayer method in Quantum 3.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Will add the player to player slot 1\nQuantumRunner.Default.Game.AddPlayer(1, runtimePlayer);\n```\n\n----------------------------------------\n\nTITLE: Adding Addressable Asset to QuantumUnityDB in C#\nDESCRIPTION: Demonstrates adding an addressable asset to QuantumUnityDB using QuantumAssetObjectSourceAddressable. This approach avoids loading the asset into memory until needed.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic void AddAddressableAsset(AssetGuid guid, Type assetType, string address) {\n  var source = new QuantumAssetObjectSourceAddressable(address, assetType);\n  QuantumUnityDB.Global.AddSource(source, guid);\n}\n```\n\n----------------------------------------\n\nTITLE: Using DSL Structs in Quantum Assets\nDESCRIPTION: Example of how to use DSL-defined structs in asset classes, requiring the Serializable attribute for Unity inspector compatibility.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n  public class FooUser : AssetObject {\n    public Foo F;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom MapData Asset in Quantum DSL\nDESCRIPTION: This snippet shows how to declare a custom map data asset in Quantum's DSL (Domain-Specific Language). This declaration is required before implementing the map custom data class.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/map-baking.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nasset MapCustomData;\n```\n\n----------------------------------------\n\nTITLE: Implementing PUN Authentication Callbacks\nDESCRIPTION: Defines callback methods for handling successful connection and authentication failures in Photon Unity Networking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/facebook-auth.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FacebookAuthTest : MonoBehaviourPunCallbacks\n{\n    public override void OnConnectedToMaster()\n    {\n        Debug.Log(\"Successfully connected to Photon!\");\n    }\n    // something went wrong\n    public override void OnCustomAuthenticationFailed(string debugMessage)\n    {\n        Debug.LogErrorFormat(\"Error authenticating to Photon using facebook: {0}\", debugMessage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Filter Struct in C# for AsteroidsShipSystem\nDESCRIPTION: This struct defines the filter used by the AsteroidsShipSystem to identify relevant entities. It includes references to the entity, transform, and physics body components.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic struct Filter\n{\n    public EntityRef Entity;\n    public Transform2D* Transform;\n    public PhysicsBody2D* Body;\n}\n```\n\n----------------------------------------\n\nTITLE: Deterministic Command Sender\nDESCRIPTION: Method to send commands from the server to the Quantum simulation. Takes a Protocol.Command object as parameter.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nvoid SendDeterministicCommand(Protocol.Command cmd)\n```\n\n----------------------------------------\n\nTITLE: Static Readonly FP Variables\nDESCRIPTION: Shows how to define static readonly variables for FP values.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly static FP MagicNumber = FP._1 +  FP._0_10;\n```\n\n----------------------------------------\n\nTITLE: Generating Deterministic GUID for Runtime Asset in C#\nDESCRIPTION: Shows how to create a runtime asset, set its name, generate a deterministic GUID, and add it to the Quantum asset database. This ensures consistent asset identification across all clients.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/brick-builder.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// create any asset\nvar assetObject = AssetObject.Create<MyAssetObjectType>();\n// set it's name\nassetObject.name = \"Generated Map\";\n// get a deterministic guid\nvar guid = QuantumUnityDB.CreateRuntimeDeterministicGuid(assetObject);\n// add the asset to the asset database\nQuantumUnityDB.Global.AddAsset(assetObject);\n// set the guid\nassetObject.Guid = guid;\n```\n\n----------------------------------------\n\nTITLE: Custom Type Implementation Example in C#\nDESCRIPTION: Example implementation of a custom type with serialization and deserialization methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyCustomType\n{\n  public byte Id { get; set; }\n  public static object Deserialize(byte[] data)\n  {\n    var result = new MyCustomType();\n    result.Id = data[0];\n    return result;\n  }\n  public static byte[] Serialize(object customType)\n  {\n    var c = (MyCustomType)customType;\n    return new byte[] { c.Id };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OnlyInPrototype Attribute in C#\nDESCRIPTION: Demonstrates the new OnlyInPrototype attribute usage for field exclusion from state objects while keeping them in prototypes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[OnlyInPrototype]\n```\n\nLANGUAGE: C#\nCODE:\n```\n[OnlyInPrototype(\"fieldType\", \"fieldName\")]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Specific Region Master Server in C#\nDESCRIPTION: Connects the client to a specific region's master server after region selection. Example shows connecting to the US region after determining the desired region through player choice or ping tests.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/reference/regions-quantum3.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    loadBalancingClient.ConnectToRegionMaster(\"us\")\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Quantum DSL\nDESCRIPTION: Shows how to declare globally accessible variables in Quantum DSL using the global scope, which are part of the state and compatible with predict-rollback systems.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_15\n\nLANGUAGE: Qtn\nCODE:\n```\nglobal {\n  // Any type that is valid in the DSL can also be used.\n  FP MyGlobalValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Shape Overlap Queries in Quantum\nDESCRIPTION: Shows implementation of shape overlap queries for both 2D and 3D physics, including creation of shapes and processing hit results.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/queries.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// For 2D\nvar hits = f.Physics2D.OverlapShape(FPVector2.Zero, FP._0, Shape2D.CreateCircle(FP._1));\nfor (int i = 0; i < hits.Count; i++){\n    var hit = hits[i];\n}\n// For 3D\nvar hits = f.Physics3D.OverlapShape(FPVector3.Zero, FPQuaternion.Identity, Shape3D.CreateSphere(1));\nfor (int i = 0; i < hits.Count; i++){\n    var hit = hits[i];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Packet Loss Statistics in C# Photon Client\nDESCRIPTION: Retrieves the number of packets dropped due to CRC check failures in the Photon client. This helps monitor connection quality and identify potential issues.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/troubleshooting/analyzing-disconnects.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLoadBalancingPeer.PacketLossByCrc\n```\n\n----------------------------------------\n\nTITLE: Basic Event Subscription in Unity\nDESCRIPTION: Shows a simple way to subscribe to Quantum events in Unity using QuantumEvent.Subscribe.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nQuantumEvent.Subscribe(listener: this, handler: (EventPlayerHit e) => Debug.Log($\"Player hit in Frame {e.Tick}\"));\n```\n\n----------------------------------------\n\nTITLE: AIParam Resolution Example\nDESCRIPTION: Shows how to resolve an AIParam value using the Resolve method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic AIParamInt MyAIParam;\nvar value = MyAIParam.ResolveResolve(frame, blackboard, aiConfig);\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Flow Field Map\nDESCRIPTION: Code example showing how to create a FlowFieldMap with specific dimensions, tile size, controller size, portal length, and cost field, then initialize it and store it in the frame context.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/flow-fields/flow-field-map.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar ffMap = new FlowFieldMap(new Vector2Int(16, 16), FP._2, 8, 4, COSTS);\nffMap.Initialize(frame.SimulationConfig.ThreadCount, false);\nframe.Context.FlowFieldMap = ffMap;\n```\n\n----------------------------------------\n\nTITLE: Sending JoinGame Webhook Request in JavaScript\nDESCRIPTION: HTTP POST request to join an existing game session on the Photon Server. The webhook URL is constructed using the WebHookBaseUrl configured in the Photon dashboard.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/game/join\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Values for Epic in C#\nDESCRIPTION: Code snippet demonstrating how to configure AuthenticationValues for Epic authentication using the retrieved ID token.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/epic-eos-auth.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar authValues = new AuthenticationValues();\nauthValues.AuthType = CustomAuthenticationType.Epic;\nvar idToken = /* token retrieved by GetLocalIdToken */;\nauthValues.AddAuthParameter(\"token\", idToken.Value.JsonWebToken.ToString());\nClient.AuthValues = authValues;\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook SDK and Authentication in HTML/JavaScript\nDESCRIPTION: This code snippet loads the Facebook JavaScript SDK asynchronously, creates a Facebook Login button, and handles the authentication process. It subscribes to the Facebook auth.authResponseChange event and connects to the Photon Cloud when the user is successfully authenticated.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-auth-facebook-javascript.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"fb-root\"></div>\n<script>\n    window.fbAsyncInit = function () {\n        FB.Event.subscribe('auth.authResponseChange', function (response) {\n            if (response.status === \"connected\") {\n                loadBalancingClient.setCustomAuthentication(\"token=\" + response.authResponse.accessToken, 2);\n                loadBalancingClient.connect(true);\n            }\n        });\n    };\n    (function (d, s, id) {\n        var js, fjs = d.getElementsByTagName(s)[0];\n        if (d.getElementById(id)) return;\n        js = d.createElement(s); js.id = id;\n        js.src = \"https://connect.facebook.net/en_US/all.js#xfbml=1&appId=\" + \"<YOUR_APP_ID>\";\n        fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Authentication Response in C#\nDESCRIPTION: Demonstrates how to implement a callback to access returned data from a custom authentication response in C#.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// implement callback from appropriate interface or override from class implementing it\nvoid OnCustomAuthenticationResponse(Dictionary<string, object> data)\n{\n    // here you can access the returned data\n}\n```\n\n----------------------------------------\n\nTITLE: SessionRunner Arguments Setup\nDESCRIPTION: Configures the SessionRunner arguments for replay playback, including runtime configuration and game mode settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar serializer = new QuantumUnityJsonSerializer();\nvar runtimeConfig = serializer.ConfigFromByteArray<RuntimeConfig>(replayFile.RuntimeConfigData.Decode(), compressed: true);\nvar arguments = new SessionRunner.Arguments {\n  RunnerFactory = QuantumRunnerUnityFactory.DefaultFactory,\n  RuntimeConfig = runtimeConfig,\n  SessionConfig = replayFile.DeterministicConfig,\n  ReplayProvider = _replayInputProvider,\n  GameMode = DeterministicGameMode.Replay,\n  RunnerId = \"LOCALREPLAY\",\n  PlayerCount = replayFile.DeterministicConfig.PlayerCount,\n  InstantReplaySettings = InstantReplayConfig,\n  InitialTick = replayFile.InitialTick,\n  FrameData = replayFile.InitialFrameData,\n  DeltaTimeType = DeltaTypeType\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SystemMainThreadFilter in AsteroidsShipSystem\nDESCRIPTION: Updates the AsteroidsShipSystem class to inherit from SystemMainThreadFilter, enabling entity filtering.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Preserve]\npublic unsafe class AsteroidsShipSystem : SystemMainThreadFilter<AsteroidsShipSystem.Filter>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Struct in Quantum DSL\nDESCRIPTION: Demonstrates how to import a custom struct with a defined size in Quantum DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_19\n\nLANGUAGE: cs\nCODE:\n```\n#define FOO_SIZE 8 // Define a constant value with the known size of the struct\nimport struct Foo(8);\n```\n\n----------------------------------------\n\nTITLE: Triggering HFSM Events in C#\nDESCRIPTION: Demonstrates how to trigger HFSM events from simulation code using the HFSMManager.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nHFSMManager.TriggerEvent(frame, entityRef, \"FooEvent\");\n```\n\n----------------------------------------\n\nTITLE: Defining Synced Events in Quantum DSL\nDESCRIPTION: Demonstrates the use of the 'synced' keyword to create events that are only dispatched when input is confirmed by the server.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_7\n\nLANGUAGE: Qtn\nCODE:\n```\nsynced event MyEvent {}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Simulation Events in Server Plugin in C#\nDESCRIPTION: Code demonstrating how to subscribe to events defined in simulation code from within a server plugin. This allows the plugin to react to game-specific events.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/setup.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void SubscribeToEvents(DotNetSessionRunner sessionRunner) {\n    var eventDispatcher = (EventDispatcher)sessionRunner.EventDispatcher;\n    eventDispatcher.Subscribe<EventFoo>(this, OnEventFoo);\n}\n\nprivate void OnEventFoo(EventFoo foo) {\n    // Do something with the event\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DynamicAssetDB in Quantum3 C#\nDESCRIPTION: Shows how to initialize a DynamicAssetDB instance with multiple assets before simulation start. This is used when assets need to exist at simulation initialization time.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar initialAssets = new DynamicAssetDB();\ninitialAssets.AddAsset(mageSpec);\ninitialAssets.AddAsset(warriorSpec);\n...\n```\n\n----------------------------------------\n\nTITLE: SendCommand Method Overloads\nDESCRIPTION: This snippet shows the available overloads for the SendCommand method. The method can be called either with just the command or with a player index and command, for scenarios with multiple players on a single machine.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/commands.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvoid SendCommand(DeterministicCommand command);\nvoid SendCommand(Int32 player, DeterministicCommand command);\n```\n\n----------------------------------------\n\nTITLE: FP Animation Curve Evaluation\nDESCRIPTION: Shows how to evaluate values from an FP animation curve.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// This returns the pre-baked value, interpolated accordingly to the curve's configuration such as it's key points, curve's resolution, tangets modes, etc\nFP myValue = myCurve.Evaluate(FP._0_50);\n```\n\n----------------------------------------\n\nTITLE: Registering Agent to Debugger in C#\nDESCRIPTION: Method call to register an AI agent entity with the Bot SDK debugger system. Allows optional custom labeling and hierarchy creation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nBotSDKDebuggerSystem.AddToDebugger(frame, collectorEntity, btAgent, (optional) customLabel);\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Arrays in Event Data Structures\nDESCRIPTION: Demonstrates how to use fixed arrays within structs for event data to avoid issues with QCollections.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nstruct FooEventData {\n    array<FP>[4] ArrayOfValues;\n}\nevent FooEvent {\n    FooEventData EventData;\n}\n```\n\n----------------------------------------\n\nTITLE: Combining FP Constants\nDESCRIPTION: Shows how to combine predefined FP static getters or const variables.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nFP foo = FP._1 + FP._0_10;\n// or\nfoo.RawValue = FP.Raw._1 + FP.Raw._0_10;\n```\n\n----------------------------------------\n\nTITLE: Region Selection Handler in C++\nDESCRIPTION: Implements the onAvailableRegions callback to handle region selection in C++. Automatically selects the first available region from the list.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/regions.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid NetworkLogic::onAvailableRegions(const ExitGames::Common::JVector<ExitGames::Common::JString>& availableRegions, const ExitGames::Common::JVector<ExitGames::Common::JString>& availableRegionServers)\n{\n    EGLOG(ExitGames::Common::DebugLevel::INFO, L\"%ls / %ls\", availableRegions.toString().cstr(), availableRegionServers.toString().cstr());\n    mpOutputListener->writeLine(L\"onAvailableRegions: \" + availableRegions.toString() + L\" / \" + availableRegionServers.toString());\n    // select first region from list\n    mpOutputListener->writeLine(L\"selecting region: \" + availableRegions[0]);\n    mLoadBalancingClient.selectRegion(availableRegions[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Action Sequences Documentation in Markdown\nDESCRIPTION: Details the three types of action sequences available in the Utility Theory implementation: On Enter, On Update, and On Exit actions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/utility-theory.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **On Enter**: executed when the Consideration is chosen as the most useful and started being executed;\n- **On Update**: executed every frame while the Consideration is still chosen as the most useful;\n- **On Exit**: executed when the Consideration was chosen on the previous frame, but it was not chosen again on the current frame;\n```\n\n----------------------------------------\n\nTITLE: Comparing FP Parsing Methods in C#\nDESCRIPTION: Demonstrates how different parsing methods can yield different results when converting to fixed-point numbers.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFP.FromFloat_UNSAFE(1.1f).RawValue != FP.FromString(\"1.1\").RawValue\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Agent Component in QTN\nDESCRIPTION: Defines a component structure for compound agents with multiple HFSM agents and blackboards for movement and attack behaviors.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/snippets.md#2025-04-23_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\ncomponent CompoundAgents\n{\n    HFSMAgent MovementHFSMAgent;\n    HFSMAgent AttackHFSMAgent;\n    AIBlackboardComponent MovementBlackboard;\n    AIBlackboardComponent AttackBlackboard;\n    AssetRefAIBlackboardInitializer MovementBBInitializer;\n    AssetRefAIBlackboardInitializer AttackBBInitializer;\n}\n```\n\n----------------------------------------\n\nTITLE: Safe String to FP Conversion\nDESCRIPTION: Shows deterministic string to FP conversion using FromString method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar v = FP.FromFloat(\"1.1\");\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Unsubscribing from Callbacks in MonoBehaviour\nDESCRIPTION: Demonstrates how to subscribe to and unsubscribe from Quantum callbacks within a MonoBehaviour context.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvar subscription = QuantumCallback.Subscribe(...);\nQuantumCallback.Unsubscribe(subscription); // cancels this specific subscription\nQuantumCallback.UnsubscribeListener(this); // cancels all subscriptions for this listener\nQuantumCallback.UnsubscribeListener<CallbackPollInput>(this); // cancels all listeners to CallbackPollInput for this listener\n```\n\n----------------------------------------\n\nTITLE: Custom Profiling Section Implementation\nDESCRIPTION: Example showing how to implement custom profiling sections in Quantum simulation code using nested profiler markers\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/profiling.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nHostProfiler.Start(\"Foo\");\n{\n  HostProfiler.Start(\"Bar1\");\n  // do work\n  HostProfiler.End();\n  HostProfiler.Start(\"Bar2\");\n  // do work\n  HostProfiler.End();\n}\nHostProfiler.End();\n```\n\n----------------------------------------\n\nTITLE: Advanced Event Subscription Options in Unity\nDESCRIPTION: Illustrates various advanced options available when subscribing to Quantum events in Unity, including filters and game mode specifications.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n// only invoked once, then removed\nQuantumEvent.Subscribe(this, (EventPlayerHit e) => {}, once: true);\n// not invoked if the listener is not active\n// and enabled (Behaviour.isActiveAndEnabled or GameObject.activeInHierarchy is checked)\nQuantumEvent.Subscribe(this, (EventPlayerHit e) => {}, onlyIfActiveAndEnabled: true);\n// only called for runner with specified id\nQuantumEvent.Subscribe(this, (EventPlayerHit e) => {}, runnerId: \"SomeRunnerId\");\n// only called for a specific\nQuantumEvent.Subscribe(this, (EventPlayerHit e) => {}, runner: runnerReference);\n// custom filter, invoked only if player 4 is local\nQuantumEvent.Subscribe(this, (EventPlayerHit e) => {}, filter: (QuantumGame game) => game.PlayerIsLocal(4));\n// only for replays\nQuantumEvent.Subscribe(this, (EventPlayerHit e) => {}, gameMode: DeterministicGameMode.Replay);\n// for all types except replays\nQuantumEvent.Subscribe(this, (EventPlayerHit e) => {}, gameMode: DeterministicGameMode.Replay, exclude: true);\n//=> The gameMode parameter accepts and array of DeterministicGameMode\n```\n\n----------------------------------------\n\nTITLE: Implementing an Animator Instant Event in C#\nDESCRIPTION: Definition of the AnimatorInstantEventAsset class that creates events triggered once when the animation reaches a specific timestamp. This class converts Unity animation events to Quantum's AnimatorInstantEvent, which can be extended for custom implementations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/animator/manual.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class AnimatorInstantEventAsset : AnimatorEventAsset, IAnimatorEventAsset\n  {\n    /// <inheritdoc cref=\"AnimatorEventAsset.OnBake\"/>\n    public new AnimatorEvent OnBake(AnimationClip unityAnimationClip, AnimationEvent unityAnimationEvent)\n    {\n      var quantumAnimatorEvent = new AnimatorInstantEvent();\n      quantumAnimatorEvent.AssetRef = Guid;\n      quantumAnimatorEvent.Time = FP.FromFloat_UNSAFE(unityAnimationEvent.time);\n      return quantumAnimatorEvent;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining RNG Session Struct for Entity-Specific Random Number Generation\nDESCRIPTION: This code snippet shows how to define a struct with an isolated RNGSession for entities subject to culling. This approach prevents visual jitter when multiple entities share an RNG session during prediction culling.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/prediction-culling.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstruct SomeStruct {\n    RNGSession MyRNG;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Mesh Triangles\nDESCRIPTION: Illustrates how to modify mesh triangles at runtime using a scope-based approach, including error handling and validation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/dynamic-map.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var scope = dynamicMap.EditMeshTriangles(frame, colliderIndex)) {\n  TriangleCCW triangle = new TriangleCCW { A = v0, B = v1, C = v2 };\n  if(scope.TryAddTriangle(ref triangle)) {\n    Log.Info(\"Triangle added successfully.\");\n  }\n  else {\n    Log.Error(\"Failed to add triangle.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MatchmakingReconnectInformation.Set Method Definition (C#)\nDESCRIPTION: This snippet shows the method signature for the MatchmakingReconnectInformation.Set virtual method, which can be overridden to customize how reconnection information is stored during an online session.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual void Set(RealtimeClient client)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Player Count in Quantum3 DSL\nDESCRIPTION: This code snippet demonstrates how to set the maximum player count in Quantum3 using the DSL. It defines a PLAYER_COUNT constant and uses a pragma to set the max_players value.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n#define PLAYER_COUNT 8\n#pragma max_players PLAYER_COUNT\n```\n\n----------------------------------------\n\nTITLE: Correct Frame Data Storage in Quantum\nDESCRIPTION: Proper implementation showing how to store non-transient data on the Frame to prevent desynchronization issues during rollbacks in Quantum simulations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// Frame\nunsafe partial class Frame {\n    public Boolean HasShoweredToday;\n    partial void CopyFromUser(Frame frame) {\n        // Implement copy of the custom parameters.\n    }\n}\npublic class CleaningSystem : SystemBase {\n    public override void Update(Frame frame) {\n        if (!frame.HasShoweredToday && frame.Global->ElapsedTime > 100) {\n            Shower();\n            frame.HasShoweredToday = true;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Step Position Delta in Quantum KCC\nDESCRIPTION: The equation used to calculate the desired position delta for a single move step in the Kinematic Character Controller. It combines dynamic velocity, kinematic velocity, and external delta with the delta time.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/movement.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nStep Position Delta = (Dynamic Velocity + Kinematic Velocity) * Delta Time + External Delta\n```\n\n----------------------------------------\n\nTITLE: Parsing Configuration Values in OnDeterministicServerSetup\nDESCRIPTION: Example showing how to parse boolean configuration values from the plugin configuration dictionary using the ConfigParsingExtensions helper methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nconfig.TryParseBool(\"WebHookEnableReplay\", out var isReplayStreamingEnabled, false);\n```\n\n----------------------------------------\n\nTITLE: Declaring MapDataBakeCallbacks Assembly in C#\nDESCRIPTION: Illustrates how to make MapDataBakeCallbacks implemented in a custom assembly known to Quantum by using the QuantumMapBakeAssembly attribute.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: QuantumMapBakeAssembly]\n```\n\n----------------------------------------\n\nTITLE: Asset Loading Implementation in C#\nDESCRIPTION: Implementation of an asset loading class showing proper handling of serialized and non-serialized data during the Loaded() lifecycle method. Demonstrates the need to properly reset non-serialized data when reloading assets.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class FooAsset {\n  public Foo Settings;\n  public int RawData;\n\n  [NonSerialized]\n  public List<int> Bar = new List<int>();\n  public override AssetObject AssetObject => Settings;\n    public override void Loaded(IResourceManager resourceManager, Native.Allocator allocator)\n    {\n      base.Loaded(resourceManager, allocator);\n    // This will break on the second run (see above) because Bar needs to be reset by either Bar.Clear() or Bar = new List<int>()\n    Bar.Add(RawData);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Data Modification in Quantum\nDESCRIPTION: Example of incorrect direct modification of Quantum data assets which would cause desynchronization issues. Assets contain read-only data and should never be modified directly.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar characterSpecAsset = frame.FindAsset<CharacterSpec>(\"WhiteFacedBarghast\");\ncharacterSpecAsset.RemainigLifetime = 21;\n```\n\n----------------------------------------\n\nTITLE: Quantum Demo Input Structure in C#\nDESCRIPTION: This code defines the structure for handling input in the Quantum demo. It includes fields for movement direction, aim direction, and various button inputs. This structure is used as a base for input handling in the game.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n[ExcludeFromPrototype]\nstruct QuantumDemoInputTopDown {\n    FPVector2 MoveDirection;\n    FPVector2 AimDirection;\n    button Left;\n    button Right;\n    button Up;\n    button Down;\n    button Jump;\n    button Dash;\n    button Fire;\n    button AltFire;\n    button Use;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Triggering in C#\nDESCRIPTION: Demonstrates how to trigger events from a system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// taking this DSL event definition as a basis\nevent TriggerSound\n{\n    FPVector2 Position;\n    FP Volume;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Photon AppSettings in C#\nDESCRIPTION: Shows how to safely copy the Photon AppSettings to avoid modifying the global settings asset. This is important when working with Photon server configurations in Unity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/starting-session.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar appSettings = new AppSettings(PhotonServerSettings.Global.AppSettings);\n```\n\n----------------------------------------\n\nTITLE: Using Attributes in C# for Quantum\nDESCRIPTION: Demonstrates how to use multiple attributes in C# for Quantum components.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n// Multiple single attributes\n[Header(\"Example Array\")][Tooltip(\"min = 1\\nmax = 20\")] public FP[] TestArray = new FP[20];\n// Multiple concatenated attributes\n[Header(\"Example Array\"), Tooltip(\"min = 1\\nmax = 20\")] public FP[] TestArray = new FP[20];\n```\n\n----------------------------------------\n\nTITLE: Renaming Components with FormerlyNamed Attribute\nDESCRIPTION: Shows how to safely rename components using the FormerlyNamed attribute to maintain backward compatibility and proper GUID migration.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/entity-prototypes.md#2025-04-23_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[FormerlyNamed(\"OldComponentName\")]\ncomponent NewComponentName {\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Components in C#\nDESCRIPTION: Demonstrates component removal from an entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nframe.Remove<Transform3D>(e);\n```\n\n----------------------------------------\n\nTITLE: Creating a TaskFactory for Unity SynchronizationContext (C#)\nDESCRIPTION: This snippet shows how to create a TaskFactory that uses Unity's SynchronizationContext. This ensures tasks will continue execution on the Unity main thread rather than thread pool threads.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar taskFactory = new TaskFactory(\n  CancellationToken.None,\n  TaskCreationOptions.DenyChildAttach,\n  TaskContinuationOptions.DenyChildAttach | TaskContinuationOptions.ExecuteSynchronously,\n  TaskScheduler.FromCurrentSynchronizationContext());\n\n```\n\n----------------------------------------\n\nTITLE: Quantum Signals for Player Management in C#\nDESCRIPTION: This snippet shows the Quantum signals for player addition and removal, which can be used in the simulation to track player changes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// The first time that this player ref was assigned to a player at all.\n// When firstTime is false the player ref is being reused by a different player.\nISignalOnPlayerAdded(Frame frame, PlayerRef player, bool firstTime)\nISignalOnPlayerRemoved\n(Frame frame, PlayerRef player)\n```\n\n----------------------------------------\n\nTITLE: Initializing AsteroidsShipSystem in C#\nDESCRIPTION: Sets up the basic structure for the AsteroidsShipSystem class, including the necessary attributes and namespace.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing UnityEngine.Scripting;\nnamespace Quantum.Asteroids\n{\n    [Preserve]\n    public unsafe class AsteroidsShipSystem\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Authentication Failure in C#\nDESCRIPTION: Demonstrates how to implement a callback function to handle custom authentication failures in C#. The debugMessage parameter contains the error message returned by the authentication provider.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnCustomAuthenticationFailed(string debugMessage)\n{\n   // The `debugMessage` could be what the authentication provider returned.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constants with FP\nDESCRIPTION: Demonstrates using constant values with FP structs.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nconst long MagicNumber = FP.Raw._1 + FP.Raw._0_10;\nFP foo = default;\nfoo.RawValue = MagicNumber;\n// or\nfoo = FP.FromRaw(MagicNumber);\n```\n\n----------------------------------------\n\nTITLE: Handling Intermediate Authentication Steps in C++\nDESCRIPTION: Shows how to implement a callback for multi-leg authentication in C++, handling intermediate steps with ResultCode 0.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// In case of multi-leg authentication simply implement:\nListener::onCustomAuthenticationIntermediateStep();\n// in case of ResultCode:0 LoadBalancing::Client will call that function and pass the intermediate data as parameter to it\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Quantum Plugin Configuration\nDESCRIPTION: XML snippet showing how to add custom string and integer properties to the Quantum plugin configuration in Photon Server.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Plugin\n  NewStringProperty=\"foo\"\n  NewIntProperty=\"10\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom FP Constants in Quantum DSL\nDESCRIPTION: Shows how to define custom FP constants in Quantum DSL files and access them in code.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_24\n\nLANGUAGE: cs\nCODE:\n```\n// in a DSL file\n#define Pi 3.14\n```\n\nLANGUAGE: cs\nCODE:\n```\n// 3.14\nFP constant = Constants.Pi;\n```\n\nLANGUAGE: cs\nCODE:\n```\n// 3.14 Raw\nvar rawConstant = Constants.Raw.Pi;\n```\n\n----------------------------------------\n\nTITLE: Quantum DSL Compiler Options\nDESCRIPTION: Demonstrates various compiler options available in Quantum DSL files.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_23\n\nLANGUAGE: cs\nCODE:\n```\n// pre defining max number of players (default is 6, absolute max is 64)\n#pragma max_players 16\n// increase the component count from 256 to 512\n#pragma max_components 512\n// numeric constants (useable inside the DSL by MY_NUMBER and useable in code by Constants.MY_NUMBER)\n#define MY_NUMBER 10\n// overriding the base class name for the generated constants (default is \"Constants\")\n#pragma constants_class_name MyFancyConstants\n```\n\n----------------------------------------\n\nTITLE: Serializing RuntimeConfig in C# with Quantum\nDESCRIPTION: Shows how to serialize RuntimeConfig to JSON using QuantumUnityJsonSerializer, including the necessary $type property for deserialization outside Unity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nQuantumUnityJsonSerializer.SerializeConfig(Stream stream, IRuntimeConfig config)\n```\n\n----------------------------------------\n\nTITLE: Assigning PhysicsMaterial to PhysicsCollider in C#\nDESCRIPTION: Demonstrates how to find and assign a PhysicsMaterial asset to a PhysicsCollider in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/material.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar material = f.FindAsset<PhysicsMaterial>(\"steel\");\ncollider.Material = material;\nf.Set(entity, collider);\n```\n\n----------------------------------------\n\nTITLE: Using FadeTo for programmatic animation transitions in C#\nDESCRIPTION: Example of using the FadeTo method to programmatically transition to another animation state. This allows for code-driven transitions that bypass the normal condition-based transitions in the animator graph.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/animator/manual.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n  // public void FadeTo(Frame frame, AnimatorComponent* animatorComponent, string stateName, bool setIgnoreTransitions, FP deltaTime)\n  //usage example\n  if (input->Run.WasPressed)\n  {\n    graph.FadeTo(frame, filter.AnimatorComponent, \"Running\", true, 0);\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Struct Size for Custom Types in C#\nDESCRIPTION: Shows how to define a struct with explicit size and field offsets in C# for use with Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  [StructLayout(LayoutKind.Explicit)]\n  public struct Foo {\n    public const int SIZE = sizeof(Int32) * 2;\n    [FieldOffset(0)]\n    public Int32 A;\n    [FieldOffset(sizeof(Int32))]\n    public Int32 B;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Photon SDK Integration in Unreal Engine\nDESCRIPTION: Illustrates the recommended folder structure for integrating Photon SDK files within an Unreal Engine project. Shows the placement of header files and platform-specific libraries.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/unreal-engine.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    \\---Source\n           +---Photon\n           |    +---Common-cpp\n           |    |    \\---inc\n           |    |        (*.h)\n           |    +---LoadBalancing-cpp\n           |    |    \\---inc\n           |    |        (*.h)\n           |    |---Photon-cpp\n           |    |    \\---inc\n           |    |        (*.h)\n           |    +---lib\n           |    |    +---Android\n           |    |        (*.a)\n           |    |    +---iOS\n           |    |        (*.a)\n           |    |    \\---Windows\n           |    |        (*.lib)\n```\n\n----------------------------------------\n\nTITLE: Embedding Quantum Asset Database in XML Project File\nDESCRIPTION: XML configuration for embedding the Quantum asset database JSON file as a resource in the simulation assembly. This enables asset access without external file dependencies.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <ItemGroup>\n    <EmbeddedResource Include=\"db.json\" />\n  </ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Triangle Distance Calculation with FP\nDESCRIPTION: Complex example showing precision issues when calculating distances to triangles.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n  var diff = p - v0;\n  var edge0 = v1 - v0;\n  var edge1 = v2 - v0;\n  var a00 = Dot(edge0, edge0);\n  var a01 = Dot(edge0, edge1);\n  var a11 = Dot(edge1, edge1);\n  var b0 = -Dot(diff, edge0);\n  var b1 = -Dot(diff, edge1);\n  var t0 = a01 * b1 - a11 * b0;\n  var t1 = a01 * b0 - a00 * b1;\n  // ...\n  closestPoint = v0 + t0 * edge0 + t1 * edge1;\n```\n\n----------------------------------------\n\nTITLE: Adding Asset to Quantum Asset Database in C#\nDESCRIPTION: Demonstrates how to create an asset object, generate a deterministic GUID, and add it to the Quantum asset database at runtime. This is used before starting the game to make assets available in the simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/brick-builder.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar asset = AssetObject.Create<MyAssetType>();\nasset.Guid = SomeDeterministicGuid;\nQuantumUnityDB.Global.AddAsset(asset);\n```\n\n----------------------------------------\n\nTITLE: Creating and Joining Private Rooms (C#)\nDESCRIPTION: Shows how to create or join a private room using a unique name known to friends. The room is set to be invisible to prevent others from joining.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\npublic class PrivateRoomExample : IMatchmakingCallbacks\n{\n    private LoadBalancingClient loadBalancingClient;\n    public void JoinOrCreatePrivateRoom(string nameEveryFriendKnows)\n    {\n        RoomOptions roomOptions = new RoomOptions();\n        roomOptions.IsVisible = false;\n        EnterRoomParams enterRoomParams = new EnterRoomParams();\n        enterRoomParams.RoomName = nameEveryFriendKnows;\n        enterRoomParams.RoomOptions = roomOptions;\n        loadBalancingClient.OpJoinOrCreateRoom(enterRoomParams);\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region IMatchmakingCallbacks\n    void IMatchmakingCallbacks.OnJoinRoomFailed(short returnCode, string message)\n    {\n      // log error code and message\n    }\n    void IMatchmakingCallbacks.OnJoinedRoom()\n    {\n        // joined a room successfully, OpJoinOrCreateRoom leads here on success\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Photon Client Connection in C++\nDESCRIPTION: Shows the C++ implementation of a basic Photon client connection including initialization, connection handling and main loop structure.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass SampleNetworkLogic\n{\npublic:\n    SampleNetworkLogic(const ExitGames::Common::JString& appID, const ExitGames::Common::JString& appVersion);\n    void connect(void);\n    void disconnect(void);\n    void run(void);\nprivate:\n    ExitGames::LoadBalancing::Client mLoadBalancingClient;\n    Listener mListener; // your implementation of the ExitGames::LoadBalancing::Listener interface\n    ExitGames::Common::Logger mLogger; // accessed by EGLOG()\n};\nSampleNetworkLogic::SampleNetworkLogic(const ExitGames::Common::JString& appID, const ExitGames::Common::JString& appVersion)\n    : mLoadBalancingClient(mListener, appID, appVersion)\n{\n}\nvoid SampleNetworkLogic::connect(void)\n{\n    // connect() is asynchronous - the actual result arrives in the Listener::connectReturn() or the Listener::connectionErrorReturn() callback\n    if(!mLoadBalancingClient.connect())\n        EGLOG(ExitGames::Common::DebugLevel::ERRORS, L\"Could not connect.\");\n}\nint main(void)\n{\n    static const ExitGames::Common::JString appID = L\"<no-app-id>\"; // set your app id here\n    static const ExitGames::Common::JString appVersion = L\"1.0\";\n    SampleNetworkLogic networkLogic(appID, appVersion);\n    networkLogic.connect();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Authentication in C++\nDESCRIPTION: This code snippet shows how to configure custom authentication parameters and prepare for connection to a Photon server using C++. It includes creating a parameter string, setting the authentication type, and assigning a user ID.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nExitGames::Common::JString params = \"user=\" + userId + \"&pass=\" + pass;\nExitGames::LoadBalancing::AuthenticationValues authenticationValues;\nauthenticationValues.setType(ExitGames::LoadBalancing::CustomAuthenticationType::CUSTOM);\nauthenticationValues.setParameters(params);\nauthenticationValues.setUserId(userId); // this is required when you set UserId directly from client and not from web service\n// pass authenticationValues as parameter on connect\n```\n\n----------------------------------------\n\nTITLE: Checking VIVEPORT Token Readiness in C#\nDESCRIPTION: Verifies if the VIVEPORT token is ready for use by calling the Token.IsReady method and handling the response.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/viveport-auth.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//...\nToken.IsReady(IsTokenReadyHandler);\n//...\nprivate static void IsTokenReadyHandler(int nResult)\n{\n    if (nResult == 0)\n    {\n        bTokenIsReady = true;\n        Viveport.Core.Logger.Log(\"IsTokenReadyHandler is successful\");\n    }\n    else\n    {\n        bTokenIsReady = false;\n        Viveport.Core.Logger.Log(\"IsTokenReadyHandler error: \" + nResult);\n    }\n}\n//...\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Cost Modifiers in Flow Field Map\nDESCRIPTION: Methods for temporarily modifying costs in specified areas of the map. AddCostModifier returns an ID that can be used with RemoveCostModifier to remove the same modifier later.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/flow-fields/flow-field-map.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic int AddCostModifier(Frame frame, FPVector2 minPosition, FPVector2 maxPosition, byte cost)\npublic bool RemoveCostModifier(Frame frame, int modifierID)\n```\n\n----------------------------------------\n\nTITLE: Safe Integer Casting\nDESCRIPTION: Demonstrates safe integer casting with FP values.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nFP v = (FP)(int)FP._1;\n```\n\n----------------------------------------\n\nTITLE: Managing Custom ByteArraySlice in C#\nDESCRIPTION: Shows how to maintain a custom ByteArraySlice instance for serialization, using a fixed-size buffer for repeated operations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/performance-tips.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate ByteArraySlice slice = new ByteArraySlice(new byte[1024]);\nvoid Serialization()\n{\n    // Write your serialization to the byte[] Buffer.\n    // Set Count to the number of bytes written.\n    slice.Count = MySerialization(slice.Buffer);\n    loadBalancingClient.OpRaiseEvent(MSG_ID, slice, opts, sendOpts);\n}\n```\n\n----------------------------------------\n\nTITLE: JoinGame Response JSON Example\nDESCRIPTION: Example JSON response for a successful JoinGame webhook, including RuntimePlayer and MaxPlayerSlots.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RuntimePlayer\": {\n    \"Name\": \"player1\"\n  },\n  \"MaxPlayerSlots\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Time-Window Animation Event in C#\nDESCRIPTION: Example implementation of ExampleTimeWindowEventAsset that inherits from AnimatorTimeWindowEventAsset. This class demonstrates how to create animation events that execute over a period of time with distinct OnEnter, Execute, and OnExit callback methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/animator/manual.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n  /// <summary>\n  /// This is a sample of how to use SampleTimeWindowEvent events. Use it as a base to create a new class inheriting from AnimatorInstantEventAsset and\n  /// implement a custom logic on Execute method\n  /// </summary>\n  [Serializable]\n  public class ExampleTimeWindowEventAsset : AnimatorTimeWindowEventAsset\n  {\n    public override unsafe void OnEnter(Frame frame, AnimatorComponent* animatorComponent, LayerData* layerData)\n    {\n      Debug.Log($\"[Quantum Animator ({frame.Number})] OnEnter animator time window event.\");\n    }\n\n    public override unsafe void Execute(Frame frame, AnimatorComponent* animatorComponent, LayerData* layerData)\n    {\n      Debug.Log($\"[Quantum Animator ({frame.Number})] Execute animator time window event.\");\n    }\n    public override unsafe void OnExit(Frame frame, AnimatorComponent* animatorComponent, LayerData* layerData)\n    {\n      Debug.Log($\"[Quantum Animator ({frame.Number})] OnExit animator time window event.\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Entity Management Operations in C#\nDESCRIPTION: Shows entity destruction and existence checking operations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// destroys the entity, including any component that was added to it.\nframe.Destroy(e);\n// checks if an EntityRef is still valid (good for when you store it as a reference inside other components):\nif (frame.Exists(e)) {\n  // safe to do stuff, Get/Set components, etc\n}\n```\n\n----------------------------------------\n\nTITLE: CloseGame WebHook JSON Request Example\nDESCRIPTION: Shows an example of the JSON body sent in a CloseGame webhook request. It includes the GameId and CloseReason.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"CloseReason\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Navmesh Binary Data in Quantum\nDESCRIPTION: This snippet demonstrates how to replace pre-existing navmesh data with new data. It loads the original navmesh asset, replaces its data with new data (which would typically come from a server download), and prepares it for use in the game.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/customized-navmesh.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Make sure to dispose the UnityDB after each game\nUnityDB.Dispose();\n// Load the pre-existing navmesh data asset\nvar navmeshData = UnityDB.FindAsset<BinaryDataAsset>(4350045557267041182).Settings;\n// This would need to be replaced by a downloaded file from a server\nvar newNavmeshData = UnityEngine.Resources.Load<BinaryDataAsset>(\"NewNavmeshData\");\n// Replace the navmesh data that is loaded with the pre-existing navmesh asset\n// Grid and world sizes etc must match, regions will be added to the map correctly\nnavmeshData.Data = newNavmeshData.Settings.Data;\n// QuantumRunner.StartGame()\n```\n\n----------------------------------------\n\nTITLE: FP Converter Unity Editor Window\nDESCRIPTION: Implementation of a Unity editor window for converting between float and FP values.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing UnityEditor;\nusing Photon.Deterministic;\npublic class FPConverter : EditorWindow {\n  private float _f;\n  private FP _fp;\n  [MenuItem(\"Quantum/FP Converter\")]\n  public static void ShowWindow() {\n    GetWindow(typeof(FPConverter), false, \"FP Converter\");\n  }\n  public virtual void OnGUI() {\n    _f = EditorGUILayout.FloatField(\"Input\", _f);\n    try {\n      _fp = FP.FromFloat_UNSAFE(_f);\n      var f = _fp.AsFloat;\n      var rect = EditorGUILayout.GetControlRect(true);\n      EditorGUI.FloatField(rect, \"Output FP\", f);\n      QuantumEditorGUI.Overlay(rect, \"(FP)\");\n      EditorGUILayout.LongField(\"Output Raw\", _fp.RawValue);\n    }\n    catch (OverflowException e) {\n      EditorGUILayout.LabelField(\"Out of range\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering HFSM Events in C#\nDESCRIPTION: Shows an overloaded method for triggering events in Hierarchical Finite State Machines (HFSM) without needing to provide HFSMData. This simplifies event triggering in certain scenarios.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nHFSMManager.TriggerEvent(...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Rewriter for Discord Activities in C#\nDESCRIPTION: This code snippet demonstrates how to implement an address rewriter function for Photon clients to work with Discord Activities. It rewrites Photon server URLs to use the Discord proxy, ensuring compatibility with Discord's security requirements.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/discord-activities.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring clientId = \"12345678\"; // your app's discord client id\nprivate string AddressRewriterDiscord(string address, ServerConnection serverType)\n{\n    bool isUri = Uri.TryCreate(address, UriKind.Absolute, out Uri uri);\n    if (isUri)\n    {\n        string host = uri.Host;\n        string[] hostSplit = host.Split('.');\n        if (hostSplit.Length != 3)\n        {\n            Debug.LogError($\"Host address could not be split into 3 parts (subdomain, domain and tld).\");\n            return address;\n        }\n        string subdomain = hostSplit[0];\n        string domain = hostSplit[1];\n        string discordAddress = $\"{uri.Scheme}://{clientId}.discordsays.com/.proxy/{domain}/{subdomain}{uri.path}\";\n        //Debug.Log($\"discordAddress: {discordAddress}\");\n        return discordAddress;\n    }\n    return address;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Debug Frame in C#\nDESCRIPTION: Code for invoking the debugger frame callback in the Bot SDK system\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nBotSDKDebuggerSystemCallbacks.OnVerifiedFrame?.Invoke(frame);\n```\n\n----------------------------------------\n\nTITLE: Lobby Stats Update Callback in C++\nDESCRIPTION: Shows the callback method for receiving lobby statistics updates in C++.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void onLobbyStatsUpdate(const Common::JVector<LobbyStatsResponse>& lobbyStats) {}\n```\n\n----------------------------------------\n\nTITLE: Receiving Events in C++\nDESCRIPTION: Shows how to handle incoming events in C++ using Photon's Realtime API. It demonstrates processing different event types and accessing event content in various formats.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvoid NetworkLogic::customEventAction(int playerNr, nByte eventCode, const ExitGames::Common::Object& eventContent)\n{\n    // logging the string representation of the eventContent can be really useful for debugging, but use with care: for big events this might get expensive\n    EGLOG(ExitGames::Common::DebugLevel::ALL, L\"an event of type %d from player Nr %d with the following content has just arrived: %ls\", eventCode, playerNr, eventContent.toString(true).cstr());\n    switch(eventCode)\n    {\n    case 1:\n        {\n            // you can access the content as a copy (might be a bit expensive for really big data constructs)\n            ExitGames::Common::Hashtable content = ExitGames::Common::ValueObject<ExitGames::Common::Hashtable>(eventContent).getDataCopy();\n            // or you access it by address (it will become invalid as soon as this function returns, so (any part of the) data that you need to continue having access to later on needs to be copied)\n            ExitGames::Common::Hashtable* pContent = ExitGames::Common::ValueObject<ExitGames::Common::Hashtable>(eventContent).getDataAddress();\n        }\n        break;\n    case 2:\n        {\n            // of course, the payload does not need to be a Hashtable - how about just sending around for example a plain 64bit integer?\n            long long content = ExitGames::Common::ValueObject<long long>(eventContent).getDataCopy();\n        }\n        break;\n    case 3:\n        {\n            // or an array of floats?\n            float* pContent = ExitGames::Common::ValueObject<float*>(eventContent).getDataCopy();\n            float** ppContent = ExitGames::Common::ValueObject<float*>(eventContent).getDataAddress();\n            short contentElementCount = *ExitGames::Common::ValueObject<float*>(eventContent).getSizes();\n            // when calling getDataCopy() on Objects that hold an array as payload, then you must deallocate the copy of the array yourself using deallocateArray()!\n            ExitGames::Common::MemoryManagement::deallocateArray(pContent);\n        }\n        break;\n    default:\n        {\n            // have a look at demo_typeSupport inside the C++ client SDKs for example code on how to send and receive more fancy data types\n        }\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Direction Input in Quantum DSL\nDESCRIPTION: Shows the standard way of defining movement direction using FPVector2 in Quantum DSL. This approach uses 16 bytes of network data per input instance.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\ninput\n{\n    FPVector2 Direction;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Local Player Events in Quantum DSL\nDESCRIPTION: Example of using the 'local' keyword to create events that only trigger for the local player.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_9\n\nLANGUAGE: Qtn\nCODE:\n```\nevent LocalPlayerOnly {\n  local player_ref player;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending PlayerRemoved WebHook POST Request in JavaScript\nDESCRIPTION: Demonstrates the HTTP POST request format for the PlayerRemoved webhook. This webhook is sent when a client is removed from the online game.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/player/removed\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple HFSM Agents\nDESCRIPTION: Update logic for managing multiple HFSM agents with their respective contexts and blackboards in a single frame update.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/snippets.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void Update(Frame frame, ref Filter filter)\n{\n    HFSMData* movementData = &filter.CompoundAgents->MovementHFSMAgent.Data;\n    HFSMData* rotationData = &filter.CompoundAgents->RotationHFSMAgent.Data;\n    HFSMData* attackData = &filter.CompoundAgents->AttackHFSMAgent.Data;\n    AIContext aiContext = new AIContext();\n    AIContextUser movementContext = new AIContextUser(&filter.CompoundAgents->MovementHFSMAgent, &filter.CompoundAgents->MovementBlackboard);\n    aiContext.UserData = &userData;\n    HFSMManager.Update(frame, frame.DeltaTime, movementData, filter.EntityRef, ref aiContext);\n    AIContextUser rotationContext = new AIContextUser(&filter.CompoundAgents->RotationHFSMAgent, &filter.CompoundAgents->RotationBlackboard);\n    aiContext.UserData = &userData;\n    HFSMManager.Update(frame, frame.DeltaTime, rotationData, filter.EntityRef, ref aiContext);\n    AIContextUser attackContext = new AIContextUser(&filter.CompoundAgents->AttackHFSMAgent, &filter.CompoundAgents->AttackBlackboard);\n    aiContext.UserData = &userData;\n    HFSMManager.Update(frame, frame.DeltaTime, attackData, filter.EntityRef, ref aiContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Timeout Disconnection During Scene Loading\nDESCRIPTION: Code snippet showing how to use ConnectionHandler to prevent timeout disconnection when loading large Unity scenes. This starts a fallback thread to maintain connection during loading operations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n    // Before starting loading the scene\n    if (_connectionHandler != null)\n    {\n      _connectionHandler.Client = UIMain.Client;\n      _connectionHandler.StartFallbackSendAckThread();\n    }\n```\n\n----------------------------------------\n\nTITLE: Default Component Materialization Order in Quantum\nDESCRIPTION: The predefined order in which default components are materialized during the entity creation process. This order ensures dependencies between components are properly resolved.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/materialization.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTransform2D\nTransform3D\nTransform2DVertical\nPhysicsCollider2D\nPhysicsBody2D\nPhysicsCollider3D\nPhysicsBody3D\nPhysicsJoints2D\nPhysicsJoints3D\nPhysicsCallbacks2D\nPhysicsCallbacks3D\nCharacterController2D\nCharacterController3D\nNavMeshPathfinder\nNavMeshSteeringAgent\nNavMeshAvoidanceAgent\nNavMeshAvoidanceObstacle\nView\nMapEntityLink\n```\n\n----------------------------------------\n\nTITLE: FilterStruct Definition in Quantum\nDESCRIPTION: Shows how to define a custom FilterStruct with component pointers and additional fields.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nstruct PlayerFilter\n{\n    public EntityRef Entity;\n    public CharacterController3D* KCC;\n    public Health* Health;\n    public FP AccumulatedDamage;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Steam Auth Ticket using Facepunch.Steamworks\nDESCRIPTION: Configures the Photon client authentication values using Facepunch.Steamworks implementation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/steam-auth.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.AuthValues = new AuthenticationValues();\nloadBalancingClient.AuthValues.UserId = SteamClient.SteamId.ToString();\nloadBalancingClient.AuthValues.AuthType = CustomAuthenticationType.Steam;\nloadBalancingClient.AuthValues.AddAuthParameter(\"ticket\", SteamAuthSessionTicket);\n// connect\n```\n\n----------------------------------------\n\nTITLE: Updating BoundarySystem to Use Configurable Boundaries in C#\nDESCRIPTION: This code snippet updates the BoundarySystem to use the configurable map size from the AsteroidsGameConfig. It retrieves the config from the frame and uses the MapExtends property to determine if an entity is out of bounds.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/7-boundaries.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Update(Frame frame, ref Filter filter)\n{\n    AsteroidsGameConfig config = frame.FindAsset(frame.RuntimeConfig.GameConfig);\n    if (IsOutOfBounds(filter.Transform->Position, config.MapExtends, out FPVector2 newPosition))\n    {\n        filter.Transform->Position = newPosition;\n        filter.Transform->Teleport(frame, newPosition);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Assets with Explicit GUID\nDESCRIPTION: Shows the new methods for adding dynamic assets with predetermined GUIDs of AssetGuidType.DynamicExplicit type.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nFrame.AddAsset(AssetObject, AssetGuid)\n```\n\nLANGUAGE: C#\nCODE:\n```\nDynamicAssetDB.AddAsset(AssetObject, AssetGuid)\n```\n\n----------------------------------------\n\nTITLE: Importing Types in Quantum DSL\nDESCRIPTION: Demonstrates how to import specific types and enums in Quantum DSL files.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\nimport MyInterface;\nor\nimport MyNameSpace.Utils;\n```\n\nLANGUAGE: cs\nCODE:\n```\nimport enum MyEnum(underlying_type);\n// This syntax is identical for Quantum specific enums\nimport enum Shape3DType(byte);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration Properties in C#\nDESCRIPTION: Code example demonstrating how to access and parse custom string and integer properties from the plugin configuration dictionary using helper methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nif (config.TryGetString(\"NewStringProperty\", out var newStringProperty, defaultValue: \"default\")) {\n}\nif (config.TryParseInt(\"NewIntProperty\", out var newIntProperty, defaultValue: 0)) {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Legacy Adapter for QPrototypeKCC in C#\nDESCRIPTION: This code creates a legacy adapter class that inherits from QPrototypeKCC to maintain backward compatibility after the breaking changes in version 3.0.3. This allows existing projects to continue using the old prototype scripts.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/kcc/download.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe partial class LegacyQPrototypeKCC : QPrototypeKCC {\n}\n```\n\n----------------------------------------\n\nTITLE: Sending CreateGame Webhook Request in JavaScript\nDESCRIPTION: HTTP POST request to create a new game session on the Photon Server. The webhook URL is constructed using the WebHookBaseUrl configured in the Photon dashboard.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/game/create\n```\n\n----------------------------------------\n\nTITLE: Defining Keywords for Quantum DSL Syntax Highlighting in Rider\nDESCRIPTION: Lists of keywords to be added to JetBrains Rider for syntax highlighting of .qtn files. These keywords are split into two levels for different highlighting styles.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-project.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#define\n#pragma\nabstract\nany\narray\nasset\nasset_ref\nbitset\nbutton\nbyte\ncomponent\ndictionary\nentity_ref\nenum\nevent\nfields\nfilter\nflags\nglobal\nhas\nimport\ninput\nint\nlist\nlocal\nlong\nnot\nplayer_ref\nremote\nsbyte\nset\nshort\nsignal\nstruct\nsynced\nuint\nulong\nunion\nuse\nushort\nusing\n```\n\nLANGUAGE: csharp\nCODE:\n```\n(\n)\n*\n:\n;\n<\n=\n>\n?\n[\n]\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Contact Points in C#\nDESCRIPTION: Shows how to iterate through contact points in a collision callback. This can be useful for visualizing or processing multiple contact points in a collision.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/callbacks.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nwhile(info.ContactPoints.Next(out var cp)) {\n  Draw.Sphere(cp, radius);\n}\n```\n\n----------------------------------------\n\nTITLE: BTAgent Component Usage Examples\nDESCRIPTION: Shows the two main approaches for using the BTAgent component - either as an entity component or as part of global variables. Used for implementing behavior tree logic in game entities.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Entity component approach\nentity.Add<BTAgent>();\n\n// Global variable approach\nframe.Global.BTAgent someAgent;\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Character Asset in Unity\nDESCRIPTION: Example of extending AssetObject to include Unity-specific fields like icons, colors and display names. Fields are wrapped in QUANTUM_UNITY conditional compilation to ensure they're only accessible in Unity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/extending-assets.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CharacterSpec : AssetObject {\n#if QUANTUM_UNITY\n  [Header(\"Unity\")]\n  public Sprite Icon;\n  public Color Color;\n  public string DisplayName;\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EnableMppm Property\nDESCRIPTION: Reference to the EnableMppm toggle property in QuantumMenuConnectionBehaviour class that controls MPPM communication. When disabled, connection must be started individually for each player.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/mppm.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nEnableMppm\n```\n\n----------------------------------------\n\nTITLE: User-Defined Component Materialization Order in Quantum\nDESCRIPTION: After default components have been materialized, user-defined components are materialized in alphabetical order, as shown in this example listing.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/materialization.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMyComponentAA\nMyComponentBB\nMyComponentCC\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a Singleton Component in Quantum DSL\nDESCRIPTION: Shows how to define a singleton component named 'MySingleton' using Quantum's DSL. Singleton components are special components of which only one instance can exist in the entire game state.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/components.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nsingleton component MySingleton{\n    FP Foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Static Asset Addition using AddSource in C#\nDESCRIPTION: Shows an alternative approach to add static assets using QuantumAssetObjectSourceStatic. Creates a new CharacterSpec and adds it through the AddSource method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic void AddStaticAsset(AssetGuid guid) {\n  var asset = ScriptableObject.CreateInstance<CharacterSpec>();\n  asset.Guid = guid;\n  asset.Speed = 10;\n  asset.MaxHealth = 100;\n  QuantumUnityDB.Global.AddSource(new QuantumAssetObjectSourceStatic(asset), guid);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending ReplayStart Webhook in JavaScript\nDESCRIPTION: HTTP POST request for sending a ReplayStart webhook to initiate replay streaming. Requires WebHookBaseUrl and WebHookEnableReplay to be set on the Photon dashboard.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/replay/start\n```\n\n----------------------------------------\n\nTITLE: Defining DeterministicGameMode Enums in C#\nDESCRIPTION: This snippet defines enum values for different game modes in the Photon.Deterministic namespace. It includes Local, Multiplayer, and Replay modes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/player/player.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nPhoton.Deterministic.DeterministicGameMode.Local\nPhoton.Deterministic.DeterministicGameMode.Multiplayer\nPhoton.Deterministic.DeterministicGameMode.Replay\n```\n\n----------------------------------------\n\nTITLE: Sending Events in C# and C++\nDESCRIPTION: Shows how to send events to other players in a room using Photon's Realtime API. Includes examples in both C# and C++ for sending custom event data.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbyte eventCode = 1; // make up event codes at will\nHashtable evData = new Hashtable(); // put your data into a key-value hashtable\nthis.loadBalancingClient.OpRaiseEvent(eventCode, evData, RaiseEventOptions.Default, SendOptions.SendReliable);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nnByte eventCode = 1; // use distinct event codes to distinguish between different types of events (for example 'move', 'shoot', etc.)\nExitGames::Common::Hashtable evData; // organize your payload data in any way you like as long as it is supported by Photons serialization\nbool sendReliable = false; // send something reliable if it has to arrive everywhere\nmLoadBalancingClient.opRaiseEvent(sendReliable, evData, eventCode);\n```\n\n----------------------------------------\n\nTITLE: Initializing Quantum Host Profiler in Unity\nDESCRIPTION: Basic initialization of the Quantum Host Profiler integration with Unity Profiler\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/profiling.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nQuantum.Profiling.HostProfiler.Init(..)\n```\n\n----------------------------------------\n\nTITLE: Sending CloseGame WebHook POST Request in JavaScript\nDESCRIPTION: Demonstrates the HTTP POST request format for the CloseGame webhook. This webhook is sent when a room/game session is closed after all clients have left.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/game/close\n```\n\n----------------------------------------\n\nTITLE: Sending Encrypted Operations in C# Photon SDKs\nDESCRIPTION: Demonstrates how to send an encrypted operation using the PhotonPeer class in C# Photon SDKs. This method is typically used internally at a lower level and not directly by developers.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/encryption.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPhotonPeer.SendOperation(/* ... */, sendOptions: new SendOptions { Encrypt = true });\n```\n\n----------------------------------------\n\nTITLE: Core Concepts Documentation in Markdown\nDESCRIPTION: Explains the three core concepts of the Bot SDK implementation: Considerations for defining agent behaviors, Response Curves for modeling utility values, and Actions for performing game state changes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/utility-theory.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. **Consideration**: this is the main type of node used, defining what are the things an agent should _consider_ doing. It encapsulates most of the relevant data for generating a _score_ (i.e the utility value), the Actions to be performed if the Consideraiton is chosen as the most useful, and many other extra aspects such as Ranking, Momentum and Cooldown;\n\n2. **Response Curve**: models one instance of a Response Curve (or Utility Curve) which outputs a score value. It receives an input as parameter which is used for evaluating a specific point of the curve.\n\n3. **Actions**: defines sets of sequential actions to be performed when a Consideration is chosen/updated/not chosen. These are responsible for actually changing the game state as part of an agent's actions.\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Match with JoinRandomRoom and CreateRoom in C#\nDESCRIPTION: Shows how to implement a quick match feature using separate JoinRandomRoom and CreateRoom methods in Photon Realtime. This approach first attempts to join a random room, and if unsuccessful, creates a new room with specified options.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\npublic class QuickMatchExample : IMatchmakingCallbacks\n{\n    [SerializeField]\n    private maxPlayers = 4;\n    private LoadBalancingClient loadBalancingClient;\n    private void CreateRoom()\n    {\n        RoomOptions roomOptions = new RoomOptions();\n        roomOptions.MaxPlayers = maxPlayers;\n        EnterRoomParams enterRoomParams = new EnterRoomParams();\n        enterRoomParams.RoomOptions = roomOptions;\n        loadBalancingClient.OpCreateRoom(enterRoomParams);\n    }\n    private void QuickMatch()\n    {\n        loadBalancingClient.OpJoinRandomRoom();\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region IMatchmakingCallbacks\n    void IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)\n    {\n        CreateRoom();\n    }\n    void IMatchmakingCallbacks.OnJoinedRoom()\n    {\n        // joined a room successfully\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Compound Shapes\nDESCRIPTION: Demonstrates creation and memory management of persistent compound shapes, including shape addition and disposal.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/shape-config.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    var compoundShape = Shape2D.CreatePersistentCompound();\n    compoundShape.Compound.AddShape(f, shape1);\n    compoundShape.Compound.AddShape(f, shape2);\n    (...) // Game logic\n    compoundShape.Compound.FreePersistent(f);\n```\n\n----------------------------------------\n\nTITLE: Installing Bot SDK Systems in SystemSetup\nDESCRIPTION: Demonstrates how to add BotSDKSystem and BotSDKDebuggerSystem to your SystemSetup class for automated processes and debugging capabilities.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nnew BotSDKSystem(),\nnew BotSDKDebuggerSystem()\n```\n\n----------------------------------------\n\nTITLE: Custom Type Registration Example in C#\nDESCRIPTION: Example showing how to register a custom type with Photon.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nPhotonPeer.RegisterType(typeof(MyCustomType), myCustomTypeCode, MyCustomType.Serialize, MyCustomType.Deserialize);\n```\n\n----------------------------------------\n\nTITLE: Room Creation and Joining with Slot Reservation using LoadBalancingClient (C#)\nDESCRIPTION: Shows how to create and join rooms with slot reservation using LoadBalancingClient in Photon. It includes examples for creating, joining, and joining random rooms.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nEnterRoomParams enterRoomParams = new EnterRoomParams();\nenterRoomParams.ExpectedUsers = expectedUsers;\n// create room example\nloadBalancingClient.OpCreateRoom(enterRoomParams);\n// join room example\nloadBalancingClient.OpJoinRoom(enterRoomParams);\n// join or create room example\nloadBalancingClient.OpJoinOrCreateRoom(enterRoomParams);\n// join random room example\nOpJoinRandomRoomParams opJoinRandomRoomParams = new OpJoinRandomRoomParams();\nopJoinRandomRoomParams.ExpectedUsers = expectedUsers;\nloadBalancingClient.OpJoinRandomRoom(opJoinRandomRoomParams);\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with Dynamic HashSet in Quantum DSL\nDESCRIPTION: Example of defining a 'Nodes' component with a dynamic hash set of FP values using Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\ncomponent Nodes {\n  hash_set<FP> ProcessedNodes;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Original Tile Cost in Flow Field Map\nDESCRIPTION: Method for permanently changing the cost of a single tile on the map by specifying the frame, location, and cost value.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/flow-fields/flow-field-map.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void SetOriginalTileCost(Frame frame, Vector2Byte location, byte cost)\n```\n\n----------------------------------------\n\nTITLE: Extending RuntimeConfig for Asteroids in C#\nDESCRIPTION: Partial class implementation that extends RuntimeConfig to include the AsteroidsGameConfig reference, enabling global access to asteroid configuration.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    public partial class RuntimeConfig\n    {\n        public AssetRef<Asteroids.AsteroidsGameConfig> GameConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Value Constants in FP\nDESCRIPTION: Shows how to use raw value constants with FP.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nconst long MagicNumber = 72089; // 1.1\nvar foo = FP.FromRaw(MagicNumber);\n// or\nfoo.RawValue = MagicNumber;\n```\n\n----------------------------------------\n\nTITLE: Using Attributes in Quantum DSL\nDESCRIPTION: Shows how to use single and multiple attributes in Quantum DSL files.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_22\n\nLANGUAGE: cs\nCODE:\n```\n[Header(\"Example Array\")] array<FP>[20] TestArray;\n```\n\nLANGUAGE: cs\nCODE:\n```\n[Header(\"Example Array\"), Tooltip(\"min = 1\\nmax = 20\")] array<FP>[20] TestArray;\n```\n\n----------------------------------------\n\nTITLE: AIContextUser Implementation\nDESCRIPTION: Example of implementing custom AIContextUser with specific fields.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  public unsafe partial struct AIContextUser\n  {\n    public readonly AIBlackboardComponent* Blackboard;\n    public readonly HFSMAgent* HFSMAgent;\n    public AIContextUser(AIBlackboardComponent* blackboard, HFSMAgent* hfsmAgent)\n    {\n      Blackboard = blackboard;\n      HFSMAgent = hfsmAgent;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FPVector3 Type Example in Quantum Engine\nDESCRIPTION: Example of the default axis value used when the joint axis is set to zero. Shows the use of FPVector3.Right as the default value.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/joints.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFPVector3.Right\n```\n\n----------------------------------------\n\nTITLE: Config Value Retrieval\nDESCRIPTION: Example of reading a boolean value from a config asset.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar myBoolean = myConfig.Get(\"Key\").Value.Boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Simulation in Photon C# Client\nDESCRIPTION: This code snippet demonstrates how to enable and configure network simulation settings in a Photon C# client. It shows how to activate simulation, adjust incoming lag, set outgoing packet loss percentage, and access the count of simulated lost packages.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/dotnet-sdk.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//Activate / Deactivate:\nthis.peer.IsSimulationEnabled = true;\n//Raise Incoming Lag:\nthis.peer.NetworkSimulationSettings.IncomingLag = 300; //default is 100ms\n//add 10% of outgoing loss:\nthis.peer.NetworkSimulationSettings.OutgoingLossPercentage = 10; //default is 1\n//this property counts the actual simulated loss:\nthis.peer.NetworkSimulationSettings.LostPackagesOut;\n```\n\n----------------------------------------\n\nTITLE: CreateGame Request JSON Example\nDESCRIPTION: Example JSON payload for a CreateGame webhook request, including AppId, AppVersion, Region, Cloud, UserId, AuthCookie, RoomName, GameId, and EnterRoomParams.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"AppVersion\": \"1.0-live\",\n  \"Region\": \"eu\",\n  \"Cloud\": \"1\",\n  \"UserId\": \"db757806-8570-45aa\",\n  \"AuthCookie\": {\n    \"Secret\": \"**********\"\n  }\n  \"RoomName\": \"e472a861-a1e2-49f7\",\n  \"GameId\": \"0:eu:e472a861-a1e2-49f7\",\n  \"EnterRoomParams\": {\n    \"RoomOptions\": {\n      \"IsVisible\": true,\n      \"IsOpen\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Config for AI Agents in C#\nDESCRIPTION: Shows how to set and get configuration for different AI agent types (HFSM, BT, UT). This allows for easy configuration management for specific entities or agents in the game.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// The config to be set can come from any source that you prefer. Some custom asset, RuntimeConfig, RuntimePlayer...it's up to you. Just set it to the component:\nhfsmAgent->Config = config;\nbtAgent->Config = config;\nutAgent->Config = config;\n// Then, when you need to GET the Config:\nhfsmAgent.GetConfig(frame);\nbtAgent.GetConfig(frame);\nutAgent.GetConfig(frame);\n```\n\n----------------------------------------\n\nTITLE: China Region Configuration in C#\nDESCRIPTION: Configures the client settings for connecting to the Chinese Mainland region using custom AppId and nameserver.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/regions.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ConnectToChina()\n{\n    AppSettings chinaSettings = new AppSettings();\n    chinaSettings.UseNameServer = true;\n    chinaSettings.ServerAddress = \"ns.photonengine.cn\";\n    chinaSettings.AppIdRealtime = \"ChinaRealtimeAppId\"; // TODO: replace with your own Realtime AppId unlocked for China region\n    chinaSettings.AppVersion = \"ChinaAppVersion\"; // optional\n\n    client.ConnectUsingSettings(chinaSettings);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Components to Entity in C#\nDESCRIPTION: Demonstrates adding Transform3D and PhysicsCollider3D components to an entity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar t = Transform3D.Create();\nframe.Set(e, t);\nvar c =  PhysicsCollider3D.Create(f, Shape3D.CreateSphere(1));\nframe.Set(e, c);\n```\n\n----------------------------------------\n\nTITLE: Network Throttling with Clumsy for Quantum\nDESCRIPTION: Filter configuration for the Clumsy network throttling tool to simulate latency on specific Quantum server ports (UDP 5056 and TCP 4531).\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nClumsy Filter: (udp.DstPort == 5056 or udp.SrcPort == 5056) or (tcp.DstPort == 4531 or tcp.SrcPort == 4531)\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with Dynamic List in Quantum DSL\nDESCRIPTION: Example of defining a 'Targets' component with a dynamic list of EntityRef using Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\ncomponent Targets {\n  list<EntityRef> Enemies;\n}\n```\n\n----------------------------------------\n\nTITLE: Safe FP Type Casting\nDESCRIPTION: Demonstrates safe type casting operations with FP.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nFP v = (FP)1;\nFP v = 1;\n```\n\n----------------------------------------\n\nTITLE: Logging Imported Unity NavMesh in Quantum\nDESCRIPTION: Console output message indicating successful import of a Unity NavMesh into Quantum, including cleanup and region detection information.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/workflow-navmesh.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nImported Unity NavMesh 'Navmesh', cleaned up 7 vertices, found 1 region(s), found 0 link(s)\n```\n\n----------------------------------------\n\nTITLE: GameConfigs WebHook JSON Request Example\nDESCRIPTION: Provides an example of the JSON body sent in a GameConfigs webhook request. It includes various game configuration details and authentication information.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"UserId\": \"db757806-8570-45aa\",\n  \"ActorNr\": 1,\n  \"RuntimeConfig\": {\n    \"Map\": {\n      \"Id\": {\n        \"Value\": 94358348534\n      }\n    }\n  },\n  \"SessionConfig\": {\n    \"PlayerCount\": 8,\n    \"ChecksumCrossPlatformDeterminism\": false,\n    \"LockstepSimulation\": false,\n    //...\n  },\n  \"AuthCookie\": {\n    \"Secret\": \"**********\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector2 Serialization Implementation in C#\nDESCRIPTION: Example implementation of Vector2 serialization using StreamBuffer.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic static readonly byte[] memVector2 = new byte[2 * 4];\nprivate static short SerializeVector2(StreamBuffer outStream, object customobject)\n{\n    Vector2 vo = (Vector2)customobject;\n    lock (memVector2)\n    {\n        byte[] bytes = memVector2;\n        int index = 0;\n        Protocol.Serialize(vo.x, bytes, ref index);\n        Protocol.Serialize(vo.y, bytes, ref index);\n        outStream.Write(bytes, 0, 2 * 4);\n    }\n    return 2 * 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Flags Enum Definition\nDESCRIPTION: Defines the flags used to configure what data gets recorded during a replay session, including input and checksums.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n  [Flags]\n  public enum RecordingFlags {\n    None = 0,                 // records nothing, default setting\n    Input = 1 << 0,           // records input\n    Checksums = 1 << 1,       // records checksums (must be enabled)\n    All = Input | Checksums   // recorded input and checksum\n  }\n```\n\n----------------------------------------\n\nTITLE: Converting Float to FP Using FromFloat_UNSAFE\nDESCRIPTION: Shows unsafe conversion from float to FP, which should only be used during edit time.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar v = FP.FromFloat_UNSAFE(1.1f);\n```\n\n----------------------------------------\n\nTITLE: Setting Room Options for Cache Cleanup in C# Photon\nDESCRIPTION: This snippet shows how to set room options to control cache cleanup behavior when players leave a room in Photon using C#. It demonstrates setting the CleanupCacheOnLeave property of RoomOptions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/cached-events.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nRoomOptions options = new RoomOptions();\noptions.CleanupCacheOnLeave = false;\n```\n\n----------------------------------------\n\nTITLE: Sending GameConfigs WebHook POST Request in JavaScript\nDESCRIPTION: Illustrates the HTTP POST request format for the GameConfigs webhook. This webhook is sent when a player sends a StartRequest operation with game configs.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/game/configs\n```\n\n----------------------------------------\n\nTITLE: Triggering an Event from Quantum Simulation\nDESCRIPTION: Shows how to fire a previously defined event from within the Quantum simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nf.Events.MyEvent(2023);\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicSnapshotRequested Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicSnapshotRequested, called when Quantum requests a simulation state snapshot for late-joining clients. Return false to deny request.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean OnDeterministicSnapshotRequested(ref Int32 tick, ref byte[] data)\n```\n\n----------------------------------------\n\nTITLE: Raising Custom ListEvent in Simulation Code\nDESCRIPTION: Shows how to call a custom ListEvent from simulation code in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n// The list object can be cached and reused, its content is copied inside the ListEvent() call (see above).\nf.Events.ListEvent(f, 0, new List<FP> {2, 3, 4});\n```\n\n----------------------------------------\n\nTITLE: PathClose Webhook JSON for Room Persistence in Photon Server\nDESCRIPTION: Sample JSON payload from a PathClose webhook with Type 'Save', which includes the complete serialized state of a room. This contains information about actors, properties, and cached events when a persistent room is closed.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActorCount\": 2,\n    \"AppVersion\": \"client-x.y.z\",\n    \"AppId\": \"00000000-0000-0000-0000-000000000000\",\n    \"GameId\": \"MyRoom\",\n    \"Region\": \"EU\",\n    \"State\": {\n        \"ActorCounter\": 3,\n        \"ActorList\": [\n            {\n                \"ActorNr\": 1,\n                \"UserId\": \"MyUserId1\",\n                \"NickName\": \"MyPlayer1\",\n                \"Binary\": \"RGIAAAEBRAAAAAJzAAlw...\",\n                \"DEBUG_BINARY\": {\n                    \"1\": {\n                        \"255\": \"MyPlayer1\",\n                        \"player_id\": \"12345\"\n                    }\n                }\n            },\n            {\n                \"ActorNr\": 3,\n                \"UserId\": \"MyUserId0\",\n                \"NickName\": \"MyPlayer0\",\n                \"Binary\": \"RGIAAAEBRAAAAAFi/3MA...\",\n                \"DEBUG_BINARY\": {\n                    \"1\": {\n                        \"255\": \"MyPlayer0\"\n                    }\n                }\n            }\n        ],\n        \"Binary\": {\n            \"18\": \"RAAAAAdzAAhwcm9wMUtl...\",\n            \"19\": \"RGl6AAEAAAAAAAN6AANp...\"\n        },\n        \"CheckUserOnJoin\": true,\n        \"CustomProperties\": {\n            \"lobby4Key\": \"test1b\",\n            \"lobby3Key\": \"test1a\"\n        },\n        \"DeleteCacheOnLeave\": false,\n        \"EmptyRoomTTL\": 0,\n        \"IsOpen\": true,\n        \"IsVisible\": true,\n        \"LobbyType\": 0,\n        \"LobbyProperties\": [\n            \"lobby3Key\",\n            \"lobby4Key\"\n        ],\n        \"MaxPlayers\": 4,\n        \"PlayerTTL\": 2147483647,\n        \"SuppressRoomEvents\": false,\n        \"Slice\": 0,\n        \"DebugInfo\": {\n            \"DEBUG_PROPERTIES_18\": {\n                \"250\": [\n                    \"lobby3Key\",\n                    \"lobby4Key\"\n                ],\n                \"prop1Key\": \"prop1Val\",\n                \"prop2Key\": \"prop2Val\",\n                \"lobby4Key\": \"test1b\",\n                \"lobby3Key\": \"test1a\",\n                \"map_name\": \"mymap\",\n                \"turn\": 1\n            },\n            \"DEBUG_EVENTS_19\": {\n                \"0\": [\n                    [\n                        3,\n                        0,\n                        \"data\"\n                    ],\n                    [\n                        3,\n                        0,\n                        \"data\"\n                    ],\n                    [\n                        3,\n                        0,\n                        \"data\"\n                    ]\n                ]\n            }\n        }\n    },\n    \"Type\": \"Save\"\n}\n```\n\n----------------------------------------\n\nTITLE: Room Creation and Joining with Slot Reservation (C#)\nDESCRIPTION: Demonstrates various methods for creating and joining rooms with slot reservation using expectedUsers parameter in Photon Network.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// create room example\nPhotonNetwork.CreateRoom(roomName, roomOptions, typedLobby, expectedUsers);\n// join room example\nPhotonNetwork.JoinRoom(roomName, expectedUsers);\n// join or create room example\nPhotonNetwork.JoinOrCreateRoom(roomName, roomOptions, typedLobby, expectedUsers);\n// join random room example\nPhotonNetwork.JoinRandomRoom(expectedProperties, maxPlayers, expectedUsers, matchmakingType, typedLobby, sqlLobbyFilter, expectedUsers);\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Events in Quantum DSL\nDESCRIPTION: Shows how to create abstract base events to prevent direct triggering of base event types.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nabstract event MyBaseEvent {}\nevent MyConcreteEvent : MyBaseEvent {}\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Struct for Quantum\nDESCRIPTION: Example of defining a C# struct 'Foo' with explicit memory layout and serialization for use in Quantum.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[StructLayout(LayoutKind.Explicit)]\npublic struct Foo {\n  public const int SIZE = 12; // the size in bytes of all members in bytes.\n\n  [FieldOffset(0)]\n  public int A;\n\n  [FieldOffset(4)]\n  public int B;\n\n  [FieldOffset(8)]\n  public int C;\n\n  public static unsafe void Serialize(void* ptr, FrameSerializer serializer)\n  {\n    var foo = (Foo*)ptr;\n    serializer.Stream.Serialize(&foo->A);\n    serializer.Stream.Serialize(&foo->B);\n    serializer.Stream.Serialize(&foo->C);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe FP Casting Examples\nDESCRIPTION: Shows unsafe casting operations that will cause errors.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nFP v = 1.1f;  // ERROR\nFP v = 1.1d;  // ERROR\n```\n\n----------------------------------------\n\nTITLE: OnComponentAdded HFSM Initialization Example in C#\nDESCRIPTION: Shows how to initialize HFSM agents using the OnComponentAdded callback in a system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// At any system...\n  public unsafe class AISystem : SystemMainThread, ISignalOnComponentAdded<HFSMAgent>\n  {\n    public void OnAdded(Frame frame, EntityRef entity, HFSMAgent* component)\n    {\n      // Get the HFSMRoot from the component set on the Entity Prototype\n      HFSMRoot hfsmRoot = frame.FindAsset<HFSMRoot>(component->Data.Root.Id);\n\n      // Initialize\n      HFSMManager.Init(frame, entityRef, hfsmRoot);\n    }\n  // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Serializing Player Color Data in Quantum\nDESCRIPTION: Implementation of the SerializeUserData method in RuntimePlayer.User.cs that handles serializing player customization data, specifically showing how RGB color values are serialized while omitting the alpha channel to save bandwidth.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/motor-dome.md#2025-04-23_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npartial void SerializeUserData(BitStream stream)\n{\n    /* ... */\n    stream.Serialize(ref primaryColor.R);\n    stream.Serialize(ref primaryColor.G);\n    stream.Serialize(ref primaryColor.B);\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Patterns in Unity Async Code\nDESCRIPTION: Demonstrates various patterns for handling exceptions in async code within Unity, showing which approaches successfully log exceptions and which do not. It includes examples of different task creation and execution methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/async-extensions.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Does NOT log exception.\n// Why? Because Unity does not handle exception inside tasks by design.\npublic Task Update1() {\n  return Task.Run(() => throw new Exception(\"peng\"));\n}\n\n// Does NOT log exception.\n// Why? Because we return at await and continue as a task object and Unity swallows the exception.\npublic async Task Update3() {\n  await Task.Delay(100);\n  throw new Exception(\"peng\");\n}\n\n// Logs exception.\n// Why? because we unwrap the task and run it synchronously with .Wait().\npublic void Update2() {\n  Task.Run(() => throw new Exception(\"peng\")).Wait();\n}\n// Logs exception.\n// Why? Because we resume the execution in this method and not return a task.\npublic async void Update4() {\n  await Task.Delay(100);\n  throw new Exception(\"peng\");\n}\n\n// Logs exception.\n// Why? We add a continuation task that logs (in any thread) when the task faulted.\npublic Task Update5() {\n  var task = Task.Run(() => throw new Exception(\"peng\")).ContinueWith(t => {\n    if (t.IsFaulted) {\n      Debug.LogException(t.Exception.Flatten().InnerException);\n    };\n  });\n\n  return task;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicServerSetup Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicServerSetup, called when a Photon Realtime room is created. Allows configuration of host, event sender, webhook host, and server simulation settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicServerSetup(IHost host, IEventSender eventSender, IWebhookHost webhookHost, Dictionary<string, string> config, ref Boolean runServerSimulation)\n```\n\n----------------------------------------\n\nTITLE: Asset Database Export\nDESCRIPTION: Shows how to export the Quantum asset database to a file separately from the replay data.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var file = File.Create(\"db.json\")) {\n  quantumGame.AssetSerializer.SerializeAssets(file, quantumGame.ResourceManager.LoadAllAssets().ToArray());\n}\n```\n\n----------------------------------------\n\nTITLE: Animator State Behaviour interface in C#\nDESCRIPTION: Method signatures for the AnimatorStateBehaviour abstract class. These methods must be implemented by derived classes to respond to state transitions. The boolean return value controls whether processing continues to other behaviours attached to the same state.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/animator/manual.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbool OnStateEnter(Frame frame, EntityRef entity, AnimatorComponent* animator, AnimatorGraph graph, LayerData* layerData, AnimatorState state, FP time);\nbool OnStateUpdate(Frame frame, EntityRef entity, AnimatorComponent* animator, AnimatorGraph graph, LayerData* layerData, AnimatorState state, FP time, AnimatorStateType stateType);\nbool OnStateExit(Frame frame, EntityRef entity, AnimatorComponent* animator, AnimatorGraph graph, LayerData* layerData, AnimatorState state, FP time);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication for PlayFab in JavaScript\nDESCRIPTION: Sets up custom authentication for PlayFab integration in JavaScript. It creates a query string with PlayFab UserId and Photon token, then sets the custom authentication type and parameters.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/playfab.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar queryString = \"username=\"+playFabUserId+\"&token=\"+playFabPhotonToken;\nloadBalancingClient.setCustomAuthentication(queryString, Photon.LoadBalancing.Constants.CustomAuthenticationType.Custom);\n// connect\n```\n\n----------------------------------------\n\nTITLE: Sending PlayerAdded WebHook POST Request in JavaScript\nDESCRIPTION: Illustrates the HTTP POST request format for the PlayerAdded webhook. This webhook is sent after a client successfully adds a player to the online game.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/player/added\n```\n\n----------------------------------------\n\nTITLE: Realtime Documentation Scraping Command\nDESCRIPTION: Command to run the scraper for Realtime documentation with default settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go -type=realtime -list-only=false\n```\n\n----------------------------------------\n\nTITLE: Initializing Compound Agents and Blackboards\nDESCRIPTION: Component initialization logic that sets up multiple HFSM agents and their corresponding blackboards with initializers.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/snippets.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void OnAdded(Frame frame, EntityRef entity, CompoundAgents* compoundAgents)\n{\n    // Initialise Agents\n    HFSMRoot hfsmRoot = frame.FindAsset<HFSMRoot>(compoundAgents->MovementHFSMAgent.Data.Root.Id);\n    HFSMManager.Init(frame, &compoundAgents->MovementHFSMAgent.Data, entity, hfsmRoot);\n    hfsmRoot = frame.FindAsset<HFSMRoot>(compoundAgents->AttackHFSMAgent.Data.Root.Id);\n    HFSMManager.Init(frame, &compoundAgents->AttackHFSMAgent.Data, entity, hfsmRoot);\n    // Initialise Blackboards\n    AIBlackboardInitializer initializer = frame.FindAsset<AIBlackboardInitializer>(compoundAgents->MovementBBInitializer.Id);\n    AIBlackboardInitializer.InitializeBlackboard(frame, &compoundAgents->MovementBlackboard, initializer);\n    initializer = frame.FindAsset<AIBlackboardInitializer>(compoundAgents->AttackBBInitializer.Id);\n    AIBlackboardInitializer.InitializeBlackboard(frame, &compoundAgents->AttackBlackboard, initializer);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mesh Collisions in C#\nDESCRIPTION: Demonstrates how to handle mesh collisions by iterating through individual triangle collisions. This is useful for detailed processing of collisions with complex mesh objects.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/callbacks.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nif (info.IsMeshCollision) {\n  while(info.MeshTriangleCollisions.Next(out var triCollision)) {\n    Draw.Ray(triCollision.Triangle->Center, triCollision.ContactNormal * triCollision.Penetration);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Photon LoadBalancingClient in C++\nDESCRIPTION: Implementation of disconnection logic in C++ using Photon's LoadBalancingClient. The code shows both the disconnect method and its usage in a main function, demonstrating the proper application lifecycle including connect, run loop, and disconnect phases.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nvoid SampleNetworkLogic::disconnect(void)\n{\n    mLoadBalancingClient.disconnect(); // disconnect() is asynchronous - the actual result arrives in the Listener::disconnectReturn() callback\n}\nint main(void)\n{\n    static const ExitGames::Common::JString appID = L\"<no-app-id>\"; // set your app id here\n    static const ExitGames::Common::JString appVersion = L\"1.0\";\n    SampleNetworkLogic networkLogic(appID, appVersion);\n    networkLogic.connect();\n    while(!shouldExit)\n    {\n        networkLogic.run();\n        SLEEP(100);\n    }\n    networkLogic.disconnect();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Specific Master Server in C# Realtime API\nDESCRIPTION: This code snippet demonstrates how to connect to a specific Photon Cloud region by setting the FixedRegion property and using ConnectUsingSettings. This approach bypasses the region list fetching and pinging process, speeding up the connection time.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/reference/regions-quantum3.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAppSettings.FixedRegion = \"us\"; // Set to a valid Region code\nConnectUsingSettings(settings);\n```\n\n----------------------------------------\n\nTITLE: Available AIParam Types\nDESCRIPTION: Lists all available AIParam types for different data types.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nAIParamInt, AIParamBool, AIParamByte, AIParamFP, AIParamFPVector2, AIParamFPVector3, AIParamString, AIParamEntityRef\n```\n\n----------------------------------------\n\nTITLE: Server Input Handler for Quantum Plugin\nDESCRIPTION: Override method to set input data for server-controlled players. Returns a Boolean indicating success. Input object already contains tick and player index.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nBoolean OnDeterministicServerInput(DeterministicTickInput input)\n```\n\n----------------------------------------\n\nTITLE: Storing RuntimeConfig on a MonoBehaviour in C#\nDESCRIPTION: Demonstrates how to store a RuntimeConfig on a Unity MonoBehaviour component for local debugging purposes. This approach is used by the QuantumRunnerLocalDebug script.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/config-files.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class QuantumRunnerLocalDebug : QuantumMonoBehaviour {\n    public RuntimeConfig RuntimeConfig;\n    // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Oculus Authentication Flow in Unity\nDESCRIPTION: Class that handles the Oculus Platform SDK initialization, user entitlement verification, and nonce generation. It manages the complete authentication flow from initialization to obtaining the user proof required for Photon authentication.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/oculus-auth.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing UnityEngine;\nusing Oculus.Platform;\nusing Oculus.Platform.Models;\npublic class OculusAuth : MonoBehaviour\n{\n    private string oculusId;\n    private void Start()\n    {\n        Core.AsyncInitialize().OnComplete(OnInitializationCallback);\n    }\n\n    private void OnInitializationCallback(Message<PlatformInitialize> msg)\n    {\n        if (msg.IsError)\n        {\n            Debug.LogErrorFormat(\"Oculus: Error during initialization. Error Message: {0}\",\n                msg.GetError().Message);\n        }\n        else\n        {\n            Entitlements.IsUserEntitledToApplication().OnComplete(OnIsEntitledCallback);\n        }\n    }\n    private void OnIsEntitledCallback(Message msg)\n    {\n        if (msg.IsError)\n        {\n            Debug.LogErrorFormat(\"Oculus: Error verifying the user is entitled to the application. Error Message: {0}\",\n                msg.GetError().Message);\n        }\n        else\n        {\n            GetLoggedInUser();\n        }\n    }\n    private void GetLoggedInUser()\n    {\n        Users.GetLoggedInUser().OnComplete(OnLoggedInUserCallback);\n    }\n    private void OnLoggedInUserCallback(Message<User> msg)\n    {\n        if (msg.IsError)\n        {\n            Debug.LogErrorFormat(\"Oculus: Error getting logged in user. Error Message: {0}\",\n                msg.GetError().Message);\n        }\n        else\n        {\n            oculusId = msg.Data.ID.ToString(); // do not use msg.Data.OculusID;\n            GetUserProof();\n        }\n    }\n    private void GetUserProof()\n    {\n        Users.GetUserProof().OnComplete(OnUserProofCallback);\n    }\n    private void OnUserProofCallback(Message<UserProof> msg)\n    {\n        if (msg.IsError)\n        {\n            Debug.LogErrorFormat(\"Oculus: Error getting user proof. Error Message: {0}\",\n                msg.GetError().Message);\n        }\n        else\n        {\n            string oculusNonce = msg.Data.Value;\n            // Photon Authentication can be done here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Start Handler for Quantum Plugin\nDESCRIPTION: Callback method that is invoked when the Quantum simulation begins. Takes no parameters and returns void.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnDeterministicStartSession()\n```\n\n----------------------------------------\n\nTITLE: Configuring Quantum Plugin in Photon Server\nDESCRIPTION: XML configuration for the Quantum plugin in the Photon Server environment. Defines plugin settings, assembly references, and essential asset paths for proper server operation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<root>\n  <PluginSettings Enabled=\"true\">\n    <Plugins>\n      <Plugin\n        Name=\"QuantumPlugin3.0\"\n        Version=\"\"\n        AssemblyName=\"Quantum.Plugin.Custom.dll\"\n        Type=\"Quantum.QuantumCustomPluginFactory\"\n        PathToLUTFolder=\"assets/LUT\"\n        PathToDBFile=\"assets/db.json\"\n        EmbeddedDBFile=\"Quantum.db.json\"\n      />\n    </Plugins>\n  </PluginSettings>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Room Count in C# and C++\nDESCRIPTION: Shows how to get the total number of live rooms in the application across both C# and C++ implementations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.RoomsCount\n```\n\nLANGUAGE: cpp\nCODE:\n```\nClient::getCountGamesRunning()\n```\n\n----------------------------------------\n\nTITLE: LeaveGame Response JSON Example\nDESCRIPTION: Example JSON response for a LeaveGame webhook, which is typically empty as it's just a confirmation of receipt.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // empty\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Client Version for Custom Authentication in C#\nDESCRIPTION: Shows how to send the client version as a parameter for custom authentication. This can be used to block connections from outdated client versions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nstring version = lbClient.AppVersion;\nlbClient.AuthValues = new AuthenticationValues();\nlbClient.AuthValues.AuthType = CustomAuthenticationType.Custom;\nlbClient.AuthValues.AddAuthParameter(\"version\", version);\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicCommand Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicCommand, called when a player sends a command to the Quantum simulation. Allows command validation or modification. Return false to deny command.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nBoolean OnDeterministicCommand(DeterministicPluginClient client, Protocol.Command cmd)\n```\n\n----------------------------------------\n\nTITLE: Enabling EventData Reuse in C# for Quantum3\nDESCRIPTION: This snippet demonstrates how to enable the reuse of EventData instances in C# clients to reduce garbage collection overhead. It uses the PhotonPeer.ReuseEventInstance setting to achieve this optimization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/performance-tips.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nPhotonPeer.ReuseEventInstance = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Client with Lobby Stats in C++\nDESCRIPTION: Shows how to initialize a client with lobby statistics enabled in C++.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nClient(LoadBalancing::Listener& listener, const Common::JString& applicationID, const Common::JString& appVersion, nByte connectionProtocol=Photon::ConnectionProtocol::DEFAULT, bool autoLobbyStats=false, nByte regionSelectionMode=RegionSelectionMode::DEFAULT);\n```\n\n----------------------------------------\n\nTITLE: Level Editor File I/O Operations\nDESCRIPTION: Implements map serialization and deserialization functionality through LevelEditorFileController, using BitStream to write brick information to persistent storage.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/technical-samples/brick-builder.md#2025-04-23_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Serialization Method Delegates in C#\nDESCRIPTION: Delegate definitions for serialization and deserialization methods used in custom type registration.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate byte[] SerializeMethod(object customObject);\npublic delegate object DeserializeMethod(byte[] serializedCustomObject);\n```\n\n----------------------------------------\n\nTITLE: Implementing DeterministicPluginFactory in C#\nDESCRIPTION: Override method for creating custom deterministic plugins for Quantum server rooms. This method is called by Photon Server to instantiate plugin code for individual rooms.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic override DeterministicPlugin CreateDeterministicPlugin(IPluginHost gameHost, String pluginName, Dictionary<String, String> config, ref String errorMsg)\n```\n\n----------------------------------------\n\nTITLE: AIContext Usage Example\nDESCRIPTION: Demonstrates how to create and use AIContext in agent updates.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nAIContext aiContext = new AIContext();\nAIContextUser userData = new AIContextUser(blackboard, hfsmAgent);\naiContext.UserData = &userData;\nHFSMManager.Update(frame, frame.DeltaTime, hfsmData, entityRef, ref aiContext);\n```\n\n----------------------------------------\n\nTITLE: Defining Component-Level RNGSession\nDESCRIPTION: Example of declaring an RNGSession property in a DSL component for per-entity random number generation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/rngsession.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// DSL component\ncomponent MyComponent\n{\n    RNGSession Session;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a C# Struct in Quantum DSL\nDESCRIPTION: Example of importing a C# defined struct 'Foo' for use in Quantum's DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nimport struct Foo(12);\n```\n\n----------------------------------------\n\nTITLE: Initializing Facebook SDK and Login Flow in Unity\nDESCRIPTION: Implements Facebook SDK initialization and login flow with permission handling. Includes callbacks for initialization and authentication status.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/facebook-auth.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Include Facebook namespace\nusing Facebook.Unity;\n// [..]\nprivate void Awake()\n{\n    if (!FB.IsInitialized)\n    {\n        // Initialize the Facebook SDK\n        FB.Init(InitCallback);\n    }\n    else\n    {\n        FacebookLogin();\n    }\n}\nprivate void InitCallback()\n{\n    if (FB.IsInitialized)\n    {\n        FacebookLogin();\n    }\n    else\n    {\n        Debug.Log(\"Failed to initialize the Facebook SDK\");\n    }\n}\nprivate void FacebookLogin()\n{\n    if (FB.IsLoggedIn)\n    {\n        OnFacebookLoggedIn();\n    }\n    else\n    {\n        var perms = new List<string>(){\"public_profile\", \"email\", \"user_friends\"};\n        FB.LogInWithReadPermissions(perms, AuthCallback);\n    }\n}\nprivate void AuthCallback(ILoginResult result)\n{\n    if (FB.IsLoggedIn)\n    {\n        OnFacebookLoggedIn();\n    }\n    else\n    {\n        Debug.LogErrorFormat(\"Error in Facebook login {0}\", result.Error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Team Matchmaking with Slot Reservation in Photon Realtime (C#)\nDESCRIPTION: Shows how to implement team matchmaking using slot reservation. The team leader performs matchmaking by joining a random room or creating a new one, reserving slots for team members.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/userids-and-friends.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nOpJoinRandomRoomParams opJoinRandomRoomParams = new OpJoinRandomRoomParams();\nopJoinRandomRoomParams.ExpectedUsers = teamMembersUserIds;\nloadBalancingClient.OpJoinRandomRoom(opJoinRandomRoomParams);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nEnterRoomParams enterRoomParams = new EnterRoomParams();\nenterRoomParams.ExpectedUsers = teamMembersUserIds;\nloadBalancingClient.OpCreateRoom(enterRoomParams);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.OpFindFriends(new string[1]{ leaderUserId });\n```\n\nLANGUAGE: csharp\nCODE:\n```\nEnterRoomParams enterRoomParams = new EnterRoomParams();\nenterRoomParams.RoomName = roomNameWhereTheLeaderIs;\nloadBalancingClient.OpJoinRoom(enterRoomParams);\n```\n\n----------------------------------------\n\nTITLE: Sending ReplayChunk Webhook in JavaScript\nDESCRIPTION: HTTP POST request for sending a ReplayChunk webhook with delta compressed input history. Requires WebHookBaseUrl and WebHookEnableReplay to be set on the Photon dashboard.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/replay/chunk\n```\n\n----------------------------------------\n\nTITLE: Getting Players Not in Rooms Count\nDESCRIPTION: Demonstrates how to retrieve the count of players who are connected but not joined to any room.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.PlayersOnMasterCount\n```\n\nLANGUAGE: cpp\nCODE:\n```\nClient::getCountPlayersOnline() - Client::getCountPlayersIngame()\n```\n\n----------------------------------------\n\nTITLE: Example UDP Packet Size Calculation for JoinRoom Operation\nDESCRIPTION: Demonstrates the byte-by-byte calculation of a JoinRoom operation packet size, including all protocol overhead from UDP/IP headers through operation parameters. Shows how a simple room join command requiring 8 bytes of payload results in a 74-byte total packet size.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/binary-protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nString parameter \"somegame\": 8 bytes UTF8 + 3 bytes overhead = 14 bytes\nOperation header: 8 bytes\nTotal operation size: 22 bytes\neNet send command: 12 bytes\nTotal with command: 34 bytes\neNet package header: 12 bytes\nTotal Photon packet: 46 bytes\nUDP/IP headers: 28 bytes\nFinal packet size: 74 bytes\n```\n\n----------------------------------------\n\nTITLE: Accessing Frame Heap in C# with Quantum\nDESCRIPTION: Demonstrates the updated syntax for accessing the Frame Heap, which is now a managed FrameHeap instance instead of a pointer.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nframe.Heap.\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeConfig Class in C#\nDESCRIPTION: C# class definition for RuntimeConfig, which is used for Quantum 3 runtime configuration. It includes a GameMode property and inherits additional properties from its base class.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public partial class RuntimeConfig {\n    public int GameMode;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Transfer Unit in C# Photon Client\nDESCRIPTION: Adjusts the Maximum Transfer Unit (MTU) for the Photon client. Lowering this value can help in certain network environments where larger packets are problematic.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/troubleshooting/analyzing-disconnects.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.LoadBalancingPeer.MaximumTransferUnit = 520;\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-Based Pattern in Quantum Unity Component\nDESCRIPTION: Shows how to implement event-based state updates using QuantumEntityViewComponent in Unity. This example demonstrates subscribing to damage events to trigger particle effects.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/events-vs-polling.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using UnityEngine;\n  public class CharacterAnimations : QuantumEntityViewComponent\n  {\n    private ParticleSystem _particles;\n    public override void OnInitialize()\n    {\n      _particles = GetComponent<ParticleSystem>();\n      QuantumEvent.Subscribe<EventOnDamaged>(this, OnDamaged);\n    }\n    private void OnDamaged(EventOnDamaged e)\n    {\n      if (e.EntityRef == EntityRef)\n      {\n        _particles.Play();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Release History Changelog\nDESCRIPTION: Detailed changelog entries documenting version updates, bug fixes, and feature additions for the Quantum Bot SDK from November 2023 to November 2024.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nNov 05, 2024\nBot SDK 3.6.0 A1\n* Visual Editor\n- Performance improvements on all the AI document editors\n- Left side panels can now be collapsed\nOct 29, 2024\nBot SDK 3.5.1 A1\n* Compiler\n- Fixed issue in which AI documents compiler would always generate assets with \"Override Guid\";\nSept 30, 2024\nBot SDK 3.5.0 A1\n* Visual Editor\n- Changed top menu to \"Tools/Quantum Bot SDK\";\n- Fixed issue in which double cliking an AI document asset without having the editor window opened would break the editor;\n- Removed usage of Assets/Gizmos folder;\n* AI Config\n- Fixed issue when using the AI Config panel with AssetRef entries;\n-\n* Utility Theory\n- Added debugger to Utility Theory AI documents;\n- Fixed issue in which Commitment and Rank fields would not be set to default after disconnecting its slots;\n* Behaviour Tree\n- BT Debugger now shows the progress of BTServices;\nSept 05, 2024\nBot SDK 3.4.8 A1\n* Core\n- Changed the Quantum.BotSDK.Core dll to make it possible to use Bot SDK in standalone projects;\nAug 13, 2024\nBot SDK 3.4.7 A1\n* Visual Editor\n- Fixed issue in which compiling an AI document whilst the export folder doesn't exist would break the compilation process;\n* Behaviour Tree\n- Fixed issue in which overriding BTNode.Init() and not calling base.Init() would break the internal BT state;\n- Fixed issue in which the BTComposite nodes' Loaded callbacks would try to access possibly null collections;\n* State Machine\n- Fixed issue in which logical decision nodes (AND, OR, NOT) would not cleanup references to nodes baked on the previous compilation;\nJuly 30, 2024\nBot SDK 3.4.6 A1\n* Visual Editor\n- Fixed sharing violation issue when opening the Bot SDK window for the first time;\n- Moved the Bot SDK toolbar options from \"Window\" to \"Tools\";\n* Bot SDK Core\n- On Quantum.BotSDK.Core.dll, removed dependencies on UnityEngine.dll;\n* AIConfig\n- Added log message when trying to set a variable in AIConfig but the key is empty or null;\nJuly 03, 2024\nBot SDK 3.4.5 A1\n* AIConfig\n- Fixed issue with AIConfig assets in which override versions could not be properly created;\nJuly 02, 2024\nBot SDK 3.4.4 A1\n* Visual Editor\n- Fixed issue in which slots with AssetRef type would not be visible;\nJuly 01, 2024\nBot SDK 3.4.3 A1\n* Visual Editor\n- Fixed issue in which the editor would not create nor open AI documents on Unity 2023 due to broken reference to dll;\n- Changed default export folder to \"Assets/QuantumUser/Resources/DB\";\nJun 21, 2024\nBot SDK 3.4.2 A1\n* Systems\n- [BREAKING CHANGE] Changed the namespaces of the Bot SDK systems;\n- Added [Preserve] attribute which is a requirement for Quantum 3 RC version;\n* BT\n- Fixed issue when trying to update a BTAgent without passing a pointer to a Blackboard component;\n- Fixed issue in the debugger which would throw NRE exceptions when trying to debug a BTAgent;\n* UT\n- Fixed issue in the debugger which would throw NRE exceptions when trying to debug a BTAgent;\n- Disabled the basic UT debugger;\n* Unity Editor\n- Removed outdated ways of creating AI documents from the context menu;\nJun 20, 2024\nBot SDK 3.4.1 A1\n* Visual Editor\n- Fixed issue in which the Bot SDK version file would not be properly created on the first time the addon is used;\n- Changed the default export folder for compiled AI assets;\nJun 19, 2024\nBot SDK 3.4.0 A1\n* GOAP\n- [BREAKING CHANGE] Removed the GOAP simulation and editor code;\n* BT\n- [BREAKING CHANGE] Changed BTNode.Init() to receive the following parameters: BTParams and AIContext;\n* Folders\n- Moved Bot SDK location to \"Assets/Photon/QuantumAddons/QuantumBotSDK\";\nMay 22, 2024\nBot SDK 3.3.0 A1\n* Visual Editor\n- Cleaning up the editor selection when changing the graph being edited;\n- Comment bubbles: pressing \"Enter\" does not save the text anymore, it creates a line breank instead (press Esc to save);\n- Added possibility to create Response Curve nodes in more types of graph;\n* Compiler\n- Better error handling when a Blackboard or Constant Node is not present on the variables panel;\n- Fixed issue when changing nodes types from the editor context menu which would not properly create a new asset with the new type (e.g when converting BT composite nodes);\n* Utility Theory\n- Fixed issue in assets caching which could lead to a desync on late joiners;\n- Fixed issue in which every Consideration node would always be created from scratch and not re-use previously baked assets;\n* HFSM\n- Fixed issue in assets caching which could lead to a desync on late joiners;\n- Changed from [HideInInspector] to [ExcludeFromPrototype] on the HFSMData struct;\n- Removed unused \"Prerequisite\" variable from TransitionSets;\n* Blackboard\n- Fixed issue when trying to compile an AI document which referenced a missing asset in a Blackboard variable;\n- Added TryGet methods\n* BT\n- Baking BT Service nodes nicknames into the created asset's Label field;\n- Improved null pointer check when trying to clear the reactive decorators list;\n- [BREAKING CHANGE] Renamed BTDecorator's method name from \"DryRun\" to \"CheckConditions\";\nMay 08, 2024\nBot SDK 3.2.1 A1\n* Visual Editor\n- Added [BotSDKTooltip] attribute which can be used in classes and fields.\nApr 23, 2024\nBot SDK 3.2.0 A1\n* BT\n- Fixed issue in Dynamic Decorators which would cause multiple nodes to run at the same time;\n- Added BTSelectorRandom which randomly picks a single child node to be executed with chances evenly distributed;\n- Fixed issue in which BTAgent code would try to de-allocate lists which were not yet allocated;\n* UT\n- Added back the OnComponentAdded/Removed signals to the BotSDKSystem;\n* HFSM\n- Fixed issue with the back-porting and baking of ANY Transitions, which would cause some transitions to not be baked\n- Added import to HFSMData in the DSL so it can be used in other qtn files;\n* Compiler\n- Fixed issues when compiling AssetRefs;\n- Added better error handling compiling AssetRefs;\n* Visual Editor\n- Fixed issue which would throw NRE when trying to handle Debug Points;\n- Changed the referenced Unity dll to version 2019.4.28f1;\n- Fixed issue which would cause the SettingsDatabase asset to be created from scratch;\n* Debugger\n- Fixed issues on the debugger enabled/disabled state which would causes issues when trying to run the game with Bot SDK open;\n- Improved how debugger hierarchies are handled internally;\nMar 19, 2024\nBot SDK 3.1.0 A1\n* Behaviour Tree\n- Fixed issue in which BTServices would not be executed;\n- Fixed issue in which BTServices would not be properly baked into assets when compiling the AI document;\n- Changed BTParams.Frame variable type from FrameThreadSafe to FrameBase;\n- Added [ExcludeFromPrototype] in most of BTAgent component fields;\n* Bot SDK Systems\n- Fixed issue in the BotSDKTimerSystem in which it would not write the FP current game time;\n* AIConfig\n- Changed its extension methods to use FrameBase instead of Frame;\n* GOAP\n- Added \"import singleton component\" on Unity, to import GOAPData;\nMar 14, 2024\nBot SDK 3.0.1 A1\n* Compiler\n- Fixed issue in which AIBlackboard and AIConfig assets would always be generated, even if not used;\nFeb 28, 2024\nBot SDK 3.0.0 A1\n* Bot SDK Core\n- Added a new dll which contains all the Bot SDK core types and logic;\n- Adapted all the assets and AssetRefs to function with the new Quantum 3 API;\n- Changed how the Bot SDK internal Timer was located, moving it from Frame.Global to a Singleton Component;\n- [BREAKING CHANGE] All the core methods on Bot SDK now use FrameBase instead of Frame;\n- [BREAKING CHANGE] AIContext: added a new field called \"UserData\" which should be used for inserting the custom context struct;\n* Visual Editor\n- Reworked all the document compilers;\n- Reworked the document debuggers;\n- Adapted other algorithms to use new Quantum 3 API;\n* Bot SDK Runtime\n- Added, in Unity, only the necessary types;\n- Adapted all the custom Unity code to work with the new Bot SDK Core dll;\nNov 09, 2023\nBot SDK 2.6.4 F1\n* HFSM\n- Fixed issue on the ANY Transition node Excluded List which would throw exceptions when pointing to already deleted State nodes;\nNov 07, 2023\nBot SDK 2.6.3 F1\n* Visual Editor\n- Fixed initialisation issues which could causa runtime errors when the game entered in Play Mode with a Bot SDK document open;\n* HFSM\n- Reworked the visuals of the ANY Transition node;\n- Added alternative to toggle the ANY Transition node list to \"Exclude List\" or \"Include List\";\n* Behaviour Tree\n- Fixed issue when cleaning the BT Context data which could try to deallocate an unallocated collection;\n-\nOct 10, 2023\nBot SDK 2.6.2 F1\n* Visual Editor\n- It is now possible to load types from external dlls using the SettingsDatabase asset;\n- Forced the xml serializer to always write \"\\r\\n\" on new lines;\n- Fixed issue where fields in SettingsDatabase would be set back to its default values;\n- When a version upgrade is detected, an automatic fixer is started and the currently open documents are re-deserialized again;\n* Behaviour Tree\n- Minor adjustment in BTAgent.User to load the root node using \"FrameThreadSafe\" instead of \"Frame\"\n* AIBlackboard\n- Adjusted the Reactive Decorators section to use \"FrameThreadSafe\" instead of \"Frame\"\n* Utility Theory\n- Fixed issue with copy/paste of UT Considerations;\n- Fixed issue where newly created Considerations would not have correct NodeFlags set;\nSept 06, 2023\nBot SDK 2.6.1 F1\n* AI Config\n- Added back the AIConfig editor code which was mistakenly commented out;\nSept 04, 2023\nBot SDK 2.6.0 F3\n* Visual Editor\n- Added a \"rendering culling\" which prevents far away nodes from being rendered as to increase overall editor performance;\n* Utility Theory\n- Added a \"Collapse\" button to the Consideration nodes top right corner which hides the Response Curves to improve rendering performance;\n- Fixed issue with Considerations which has no Response Curves and were ignoring the Base Score value;\n* AIBlackboard\n- Fixed issue on blackboard component's Free method which would try to clear empty lists of Reactive Decorators;\n* Debugger\n```\n\n----------------------------------------\n\nTITLE: Resource Manager Configuration\nDESCRIPTION: Sets up the resource manager with either the saved asset database or an external database file.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar assets = replayFile.AssetDatabaseData?.Decode();\nif (DatabaseFile != null) {\n  assets = DatabaseFile.bytes;\n}\nvar serializer = new QuantumUnityJsonSerializer();\nif (assets?.Length > 0) {\n  _resourceAllocator = new QuantumUnityNativeAllocator();\n  _resourceManager = new ResourceManagerStatic(serializer.AssetsFromByteArray(assets), new QuantumUnityNativeAllocator());\n  arguments.ResourceManager = _resourceManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Asset References in Quantum DSL\nDESCRIPTION: Example of using asset_ref type in Quantum DSL to declare a component property that references an immutable asset instance from the database.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\ncomponent CharacterData {\n    // reference to an immutable instance of CharacterSpec (from the Quantum asset database)\n    asset_ref<CharacterSpec> Spec;\n    // other component data\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication in JavaScript\nDESCRIPTION: This JavaScript code example illustrates how to set up custom authentication for a Photon client. It includes creating a query string with authentication parameters and setting the custom authentication type before connecting.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar queryString = \"user=\" + userId + \"&pass=\" + pass;\nvar type = Photon.LoadBalancing.Constants.CustomAuthenticationType.Custom;\nloadBalancingClient.setCustomAuthentication(queryString, type);\n// connect\n```\n\n----------------------------------------\n\nTITLE: Using Constants in Quantum DSL\nDESCRIPTION: Demonstrates using constants defined in Quantum DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar foo = default(FP);\nfoo += Constants.FPConst;\n// or\nfoo.RawValue += Constants.Raw.FPConst;\n```\n\n----------------------------------------\n\nTITLE: Creating a Unity-Specific TaskFactory in C#\nDESCRIPTION: Shows how to create a TaskFactory that is suitable for use in Unity, ensuring tasks run on the main thread. It uses TaskCreationOptions and TaskContinuationOptions to configure the factory appropriately.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/async-extensions.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar taskFactory = new TaskFactory(\n  CancellationToken.None,\n  TaskCreationOptions.DenyChildAttach,\n  TaskContinuationOptions.DenyChildAttach | TaskContinuationOptions.ExecuteSynchronously,\n  TaskScheduler.FromCurrentSynchronizationContext());\n```\n\n----------------------------------------\n\nTITLE: Explicit Lobby Stats Request in C++\nDESCRIPTION: Shows how to explicitly request lobby statistics and handle the response in C++.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nClient::opLobbyStats()\n```\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void onLobbyStatsResponse(const Common::JVector<LobbyStatsResponse>& lobbyStats) {}\n```\n\n----------------------------------------\n\nTITLE: GameResult Class Extension\nDESCRIPTION: Example of extending the GameResult class using partial class declaration to add custom fields\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public partial class GameResult {\n    public int Winner;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Only Events in Quantum DSL\nDESCRIPTION: Example of using the 'server' keyword to create events that only execute on the server side.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_12\n\nLANGUAGE: Qtn\nCODE:\n```\nserver synced event MyServerEvent {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Webhook Handler for Room Creation in JavaScript\nDESCRIPTION: Defines a CloudScript handler function for the 'RoomCreated' Realtime Webhook in JavaScript. This function is called when a new room is created in Photon.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/playfab.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhandlers.GameJoined = function(args)\n{\n      // your custom code goes here\n      return { ResultCode : 0, Message: \"Success\" };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Options for Raising Events in C# Photon\nDESCRIPTION: This snippet demonstrates how to set caching options when raising events in Photon using C#. It shows the use of RaiseEventOptions and the CachingOption property to control how events are cached.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/cached-events.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRaiseEventOptions options = new RaiseEventOptions();\noptions.CachingOption = EventCaching.AddToRoomCache;\n```\n\n----------------------------------------\n\nTITLE: Server Input Replacement Handler\nDESCRIPTION: Callback method triggered when the server replaces a player's input. Takes the replacement input data as parameter.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnDeterministicServerReplacedInput(DeterministicTickInput input)\n```\n\n----------------------------------------\n\nTITLE: Vector2 Deserialization Implementation in C#\nDESCRIPTION: Example implementation of Vector2 deserialization using StreamBuffer.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static object DeserializeVector2(StreamBuffer inStream, short length)\n{\n    Vector2 vo = new Vector2();\n    lock (memVector2)\n    {\n        inStream.Read(memVector2, 0, 2 * 4);\n        int index = 0;\n        Protocol.Deserialize(out vo.x, memVector2, ref index);\n        Protocol.Deserialize(out vo.y, memVector2, ref index);\n    }\n    return vo;\n}\n```\n\n----------------------------------------\n\nTITLE: Quantum System Debug Logging Example\nDESCRIPTION: Example of implementing debug logging in a Quantum system class using the Log.Debug method within the simulation code\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-project.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public unsafe class MyQuantumSystem : SystemMainThread\n    public override void Update(Frame frame) {\n      Log.Debug($\"Updating MyQuantumSystem tick {frame.Number}\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AIConfig in Behavior Trees in C#\nDESCRIPTION: Demonstrates how to retrieve the AIConfig associated with a BTAgent in Quantum code. This helper method simplifies access to configuration data for behavior trees.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nbtAgent.GetConfig(frame)\n```\n\n----------------------------------------\n\nTITLE: BTAgent Initialization using OnComponentAdded\nDESCRIPTION: Demonstrates how to initialize a BTAgent using the OnComponentAdded callback in a system implementation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// At any system...\n  public unsafe class AISystem : SystemMainThread, ISignalOnComponentAdded<BTAgent>\n  {\n    public void OnAdded(Frame frame, EntityRef entity, BTAgent* component)\n    {\n      // Get the BTRoot from the component set on the Entity Prototype\n      BTRoot btRoot = frame.FindAsset<BTRoot>(component->Tree.Id);\n      // Initialize\n      BTManager.Init(frame, entity, btRoot);\n    }\n  // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Order for Map Data Baker in Quantum\nDESCRIPTION: This snippet demonstrates how to set a specific execution order for a MapDataBakerCallback using the invokeOrder parameter. Lower values cause the callback to execute earlier in the baking process.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/map-baking.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MapDataBakerCallback(invokeOrder:5)]\npublic class ExampleMapDataBaker : MapDataBakerCallback\n```\n\n----------------------------------------\n\nTITLE: Input Confirmation Handler in Quantum Plugin\nDESCRIPTION: Callback method that handles confirmed input for a specific client and tick. Takes client instance, tick number, player index and input data as parameters.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnDeterministicInputConfirmed(DeterministicPluginClient client, Int32 tick, Int32 playerIndex, DeterministicTickInput input)\n```\n\n----------------------------------------\n\nTITLE: Async Disconnection with Error Handling in C#\nDESCRIPTION: Demonstrates how to handle errors when disconnecting asynchronously from a Photon server. It uses a try-catch block to catch and log any exceptions that may occur during the disconnection process.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/async-extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ntry {\n  // Disconnecting can also fail\n  await client.DisconnectAsync();\n} catch (Exception e) {\n  Debug.LogException(e);\n}\n```\n\n----------------------------------------\n\nTITLE: StreamBuffer Registration Method in C#\nDESCRIPTION: Method signature for registering custom types using Photon's StreamBuffer approach.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nRegisterType(Type customType, byte code, SerializeStreamMethod serializeMethod, DeserializeStreamMethod deserializeMethod)\n```\n\n----------------------------------------\n\nTITLE: Custom Room Listing with SQL Filters in Photon\nDESCRIPTION: Shows how to request a custom list of rooms from an SQL Lobby using SQL-like queries. This method returns up to 100 rooms that match the specified conditions, with results handled through the OnRoomListUpdate callback.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\npublic class GetCustomRoomListExample : ILobbyCallbacks\n{\n    private TypedLobby sqlLobby = new TypedLobby(\"customSqlLobby\", LobbyType.SqlLobby);\n    public void GetCustomRoomList(string sqlLobbyFilter)\n    {\n      loadBalancingClient.OpGetGameList(sqlLobby, sqlLobbyFilter);\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region ILobbyCallbacks\n    void ILobbyCallbacks.OnRoomListUpdate(List<RoomInfo> roomList)\n    {\n        // here you get the response, empty list if no rooms found\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Joining Rooms with SQL Lobby Filtering in C#\nDESCRIPTION: Demonstrates how to create a room with SQL properties and join random rooms using SQL filters in Photon Realtime. The example shows setting ELO rating and map properties as SQL filtering columns (C0, C1) and various filtering techniques including ranges and exact matches.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\nusing Hashtable = ExitGames.Client.Photon.Hashtable;\npublic class RandomMatchmakingExample : IMatchmakingCallbacks\n{\n    public const string ELO_PROP_KEY = \"C0\";\n    public const string MAP_PROP_KEY = \"C1\";\n    private TypedLobby sqlLobby = new TypedLobby(\"customSqlLobby\", LobbyType.SqlLobby);\n    private LoadBalancingClient loadBalancingClient;\n    private void CreateRoom()\n    {\n        RoomOptions roomOptions = new RoomOptions();\n        roomOptions.CustomRoomProperties = new Hashtable { { ELO_PROP_KEY, 400 }, { MAP_PROP_KEY, \"Map3\" } };\n        roomOptions.CustomRoomPropertiesForLobby = { ELO_PROP_KEY, MAP_PROP_KEY }; // makes \"C0\" and \"C1\" available in the lobby\n        EnterRoomParams enterRoomParams = new EnterRoomParams();\n        enterRoomParams.RoomOptions = roomOptions;\n        enterRoomParams.Lobby = sqlLobby;\n        loadBalancingClient.OpCreateRoom(enterRoomParams);\n    }\n    private void JoinRandomRoom()\n    {\n        string sqlLobbyFilter = \"C0 BETWEEN 345 AND 475 AND C1 = 'Map2'\";\n        //string sqlLobbyFilter = \"C0 > 345 AND C0 < 475 AND (C1 = 'Map2' OR C1 = \\\"Map3\\\")\";\n        //string sqlLobbyFilter = \"C0 >= 345 AND C0 <= 475 AND C1 IN ('Map1', 'Map2', 'Map3')\";\n        OpJoinRandomRoomParams opJoinRandomRoomParams = new OpJoinRandomRoomParams();\n        opJoinRandomRoomParams.SqlLobbyFilter = sqlLobbyFilter;\n        loadBalancingClient.OpJoinRandomRoom(opJoinRandomRoomParams);\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region IMatchmakingCallbacks\n    void IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)\n    {\n        CreateRoom();\n    }\n    void IMatchmakingCallbacks.OnCreateRoomFailed(short returnCode, string message)\n    {\n        Debug.LogErrorFormat(\"Room creation failed with error code {0} and error message {1}\", returnCode, message);\n    }\n    void IMatchmakingCallbacks.OnJoinedRoom()\n    {\n        // joined a room successfully, both JoinRandomRoom or CreateRoom lead here on success\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving EOS ID Token in C#\nDESCRIPTION: Method to retrieve an ID token for a logged-in local user using the EOS Auth Interface. The token is required for authentication and must be released when no longer needed.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/epic-eos-auth.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Call this method after login.\nprivate bool GetLocalIdToken(out IdToken? a_IdToken)\n{\n    var options = new CopyIdTokenOptions()\n    {\n        AccountId = LocalUserId\n    };\n\n    // NOTE: Make sure to use the EOSAuthInterface to get the IdToken instead of the EOSConnectInterface.\n    var result = EOSManager.Instance.GetEOSAuthInterface().CopyIdToken(ref options, out a_IdToken);\n\n    if (result != Result.Success)\n    {\n        Debug.LogError(\"Failed to copy the IdToken.\");\n        return false;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating NavMesh BakeData in C#\nDESCRIPTION: Demonstrates how to create a simple navigation mesh bake data structure with vertices and triangles. Sets up a basic navmesh with 4 vertices and 2 triangles, including configuration for agent radius, triangle calculation method, and position settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/navigation/customized-navmesh.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Generate simple navmesh BakeData\nvar bakeData = new MapNavMesh.BakeData() {\n  AgentRadius = FP._0_20,\n  ClosestTriangleCalculation = MapNavMesh.FindClosestTriangleCalculation.SpiralOut,\n  ClosestTriangleCalculationDepth = 1,\n  Name = \"DynamicNavmesh\",\n  PositionFP = FPVector3.Zero,\n  Regions = new System.Collections.Generic.List<string>(),\n  Vertices = new MapNavMeshVertexFP[] {\n    new MapNavMeshVertexFP { Position = FPVector3.Forward },\n    new MapNavMeshVertexFP { Position = FPVector3.Right },\n    new MapNavMeshVertexFP { Position = -FPVector3.Forward},\n    new MapNavMeshVertexFP { Position = -FPVector3.Right},\n  },\n  Triangles = new MapNavMeshTriangle[] {\n    new MapNavMeshTriangle { VertexIds2 = new int[] { 0, 1, 2}, Cost = FP._1 },\n    new MapNavMeshTriangle { VertexIds2 = new int[] { 0, 2, 3}, Cost = FP._1 }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: AddPlayer WebHook JSON Request Example\nDESCRIPTION: Provides an example of the JSON body sent in an AddPlayer webhook request. It includes player information and authentication details.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"UserId\": \"db757806-8570-45aa\",\n  \"ActorNr\": 1,\n  \"PlayerSlot\": 0,\n  \"RuntimePlayer\": {\n    \"Name\": \"player1\"\n  },\n  \"AuthCookie\": {\n    \"Secret\": \"**********\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Server Settings in Photon\nDESCRIPTION: Examples of proxy server configuration formats for Photon clients. Shows both basic proxy address and authenticated proxy setup patterns.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/secure-networks.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<proxyhostname>:<proxyport>\n<user>:<pass>@<proxyhostname>:<proxyport>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Simulation Callbacks in Server Plugin in C#\nDESCRIPTION: Example of subscribing to Quantum simulation callbacks from a server plugin. This code allows the plugin to react to system events like game start.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/setup.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void SubscribeToCallbacks(DotNetSessionRunner sessionRunner) {\n    var callbackDispatcher = (CallbackDispatcher)sessionRunner.CallbackDispatcher;\n    callbackDispatcher.Subscribe<CallbackGameStarted>(this, c => Log.Info(\"Game Started\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicServerClose Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicServerClose, called when a Photon Realtime room closes. Use for cleanup and resource disposal.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicServerClose()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Region Master in C#\nDESCRIPTION: Connects to a specific region's master server after region selection.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/regions.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    loadBalancingClient.ConnectToRegionMaster(\"us\")\n```\n\n----------------------------------------\n\nTITLE: Simulation Update Time Enum in Quantum\nDESCRIPTION: Enum defining different time measurement methods for the Quantum simulation. The EngineDeltaTime option helps maintain regular gameplay speed after pausing or debugging.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic enum SimulationUpdateTime {\n    Default = 0,                        // internal clock\n    EngineDeltaTime = 1,                // Time.deltaTime (Unity)\n    EngineUnscaledDeltaTime = 2         // Time.unscaledDeltaTime\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for PathEvent Webhook in Photon Realtime\nDESCRIPTION: This JSON payload demonstrates a sample call for the PathEvent webhook. It includes information about the actor raising the event, event data, room state, and other relevant details sent when a custom event is raised with the HttpForward flag set.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActorNr\": 3,\n    \"AppVersion\": \"client-x.y.z\",\n    \"AppId\": \"00000000-0000-0000-0000-000000000000\",\n    \"Data\": \"data\",\n    \"GameId\": \"MyRoom\",\n    \"Region\": \"EU\",\n    \"State\": {\n        \"ActorCounter\": 3,\n        \"ActorList\": [\n            {\n                \"ActorNr\": 1,\n                \"UserId\": \"MyUserId1\",\n                \"NickName\": \"MyPlayer1\",\n                \"Binary\": \"RGIAAAEBRAAAAAJzAAlw...\",\n                \"DEBUG_BINARY\": {\n                    \"1\": {\n                        \"255\": \"MyPlayer1\",\n                        \"player_id\": \"12345\"\n                    }\n                }\n            },\n            {\n                \"ActorNr\": 3,\n                \"UserId\": \"MyUserId0\",\n                \"NickName\": \"MyPlayer0\",\n                \"IsActive\": true,\n                \"Binary\": \"RGIAAAEBRAAAAAFi/3MAC...\",\n                \"DEBUG_BINARY\": {\n                    \"1\": {\n                        \"255\": \"MyPlayer0\"\n                    }\n                }\n            }\n        ],\n        \"Binary\": {\n            \"18\": \"RAAAAAdzAAhwcm9wMUtl...\",\n            \"19\": \"RGl6AAEAAAAAAAN6AANp...\"\n        },\n        \"CheckUserOnJoin\": true,\n        \"CustomProperties\": {\n            \"lobby4Key\": \"test1b\",\n            \"lobby3Key\": \"test1a\"\n        },\n        \"DeleteCacheOnLeave\": false,\n        \"EmptyRoomTTL\": 0,\n        \"IsOpen\": true,\n        \"IsVisible\": true,\n        \"LobbyType\": 0,\n        \"LobbyProperties\": [\n            \"lobby3Key\",\n            \"lobby4Key\"\n        ],\n        \"MaxPlayers\": 4,\n        \"PlayerTTL\": 2147483647,\n        \"SuppressRoomEvents\": false,\n        \"Slice\": 0,\n        \"DebugInfo\": {\n            \"DEBUG_PROPERTIES_18\": {\n                \"250\": [\n                    \"lobby3Key\",\n                    \"lobby4Key\"\n                ],\n                \"prop1Key\": \"prop1Val\",\n                \"prop2Key\": \"prop2Val\",\n                \"lobby4Key\": \"test1b\",\n                \"lobby3Key\": \"test1a\",\n                \"map_name\": \"mymap\",\n                \"turn\": 1\n            },\n            \"DEBUG_EVENTS_19\": {\n                \"0\": [\n                    [\n                        3,\n                        0,\n                        \"data\"\n                    ],\n                    [\n                        3,\n                        0,\n                        \"data\"\n                    ],\n                    [\n                        3,\n                        0,\n                        \"data\"\n                    ]\n                ]\n            }\n        }\n    },\n    \"Type\": \"Event\",\n    \"UserId\": \"MyUserId0\",\n    \"NickName\": \"MyPlayer0\",\n    \"EvCode\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static Assets to QuantumUnityDB at Runtime in C#\nDESCRIPTION: This snippet demonstrates how to generate a map and add it as a static asset to the QuantumUnityDB at runtime. It's used when baking a map before starting a Quantum session, allowing all clients to generate the map deterministically.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/maps/map-baking.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar generatedMap = new Map();\n// generate...\n// add the map to the QuantumUnityDB\nQuantumUnityDB.Global.AddAsset(generatedMap);\n```\n\n----------------------------------------\n\nTITLE: RuntimePlayer JSON Example\nDESCRIPTION: Example JSON representation of a RuntimePlayer object, including the $type property for deserialization, Loadout, PlayerAvatar, and PlayerNickname properties.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\":\"Quantum.RuntimePlayer, Quantum.Simulation\",\n  \"Loadout\": {\n    \"Id\": {\n      \"Value\": 440543562436170603\n    }\n  },\n  \"PlayerAvatar\": {\n    \"Id\": {\n      \"Value\": 2430278665492933905\n    }\n  },\n  \"PlayerNickname\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replay Input Provider Creation\nDESCRIPTION: Creates an input provider from the replay file that handles both delta compressed and raw inputs.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n_replayInputProvider = replayFile.CreateInputProvider();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Headers for Photon Cloud Webhooks\nDESCRIPTION: Example of configuring custom HTTP headers for Photon Cloud webhooks. This JSON string defines key-value pairs that will be set as HTTP headers in requests to the configured web service.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{'X-Secret': 'YWxhZGRpbjpvcGVuc2VzYW1l', 'X-Origin': 'Photon'}\n```\n\n----------------------------------------\n\nTITLE: Triggering GameResult Event\nDESCRIPTION: C# code example showing how to trigger a GameResult event from within the simulation\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nf.Events.GameResult(new GameResult { Winner = 3 });\n```\n\n----------------------------------------\n\nTITLE: Registering Agent Entity for Debugging in C#\nDESCRIPTION: This code snippet shows how to register an agent entity to the Debugger Window in Bot SDK. It allows for custom labeling and hierarchical organization of debugged entities.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nBotSDKDebuggerSystem.AddToDebugger(frame, collectorEntity, hfsmAgent, (optional) customLabel);\n```\n\n----------------------------------------\n\nTITLE: PlayFab Integration Response\nDESCRIPTION: Standard JSON response format for PlayFab webhook integration including result code and message\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ResultCode\": 0,\n    \"Message\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting VIVEPORT Session Token in C#\nDESCRIPTION: Retrieves the session token for VIVEPORT authentication and handles the response for use with Photon authentication.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/viveport-auth.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//...\nToken.GetSessionToken(GetSessionTokenHandler);\n//...\nprivate static void GetSessionTokenHandler(int nResult, string message)\n{\n    if (nResult == 0)\n    {\n        Viveport.Core.Logger.Log(\"GetSessionTokenHandler is successful, token:\" + message);\n        // Photon:\n        // With the viveport token, we can set the auth values for Photon and connect / auth.\n        // We store the token for later use.\n        ViveSessionToken = message;\n    }\n    else\n    {\n        if (message.Length != 0)\n        {\n            Viveport.Core.Logger.Log(\"GetSessionTokenHandler error: \" + nResult + \", message:\" + message);\n        }\n        else\n        {\n            Viveport.Core.Logger.Log(\"GetSessionTokenHandler error: \" + nResult);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to FP Using FromString_UNSAFE\nDESCRIPTION: Demonstrates unsafe string parsing to FP conversion.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar v = FP.FromFloat_UNSAFE(\"1.1\");\n```\n\n----------------------------------------\n\nTITLE: Implementing WebRPC Handler in JavaScript\nDESCRIPTION: Defines a CloudScript handler function for a custom WebRPC method named 'foo' in JavaScript. This function can be called by clients to execute custom logic on the server.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/playfab.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhandlers.foo = function(args)\n{\n      // your custom code goes here\n      return { ResultCode : 0, Message: \"Success\" };\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Application Background State in Unity\nDESCRIPTION: Implementation of OnApplicationPause callback to handle when a Unity application moves between foreground and background states. This is particularly important for mobile platforms where Application.runInBackground is not supported.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/troubleshooting/known-issues.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnApplicationPause( bool pauseStatus )\n{\n    if (pauseStatus)\n    {\n        // app moved to background\n    } else\n    {\n        // app is foreground again\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTTP Headers from Custom Configuration in Photon Cloud\nDESCRIPTION: Example of the resulting HTTP headers after applying the custom configuration. This shows how the JSON key-value pairs are transformed into actual HTTP request headers.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nX-Secret: YWxhZGRpbjpvcGVuc2VzYW1l\nX-Origin: Photon\n```\n\n----------------------------------------\n\nTITLE: Invoking Bot SDK Debugger Callback in C#\nDESCRIPTION: This code snippet demonstrates how to invoke the Bot SDK Debugger callback in verified frames, which is an alternative to using the BotSDKDebuggerSystem.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/hfsm.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nBotSDKDebuggerSystemCallbacks.OnVerifiedFrame?.Invoke(frame);\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Filter Struct with AsteroidsShip Component in C#\nDESCRIPTION: This updated struct includes the AsteroidsShip component in the filter, ensuring that only the player's ship entity is processed by the AsteroidsShipSystem.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/6-asteroids.md#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic struct Filter\n{\n    public EntityRef Entity;\n    public Transform2D* Transform;\n    public PhysicsBody2D* Body;\n    public AsteroidsShip* AsteroidsShip;\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Events in C#\nDESCRIPTION: Demonstrates how to implement event handling in C# using Photon's Realtime API. It shows the setup of an event callback and how to process different event types based on their code.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing ExitGames.Client.Photon;\nusing Photon.Realtime;\n// we add IOnEventCallback interface implementation\npublic class MyClient : IConnectionCallbacks, IMatchmakingCallabacks, IOnEventCallback\n{\n    private LoadBalancingClient loadBalancingClient;\n    public MyClient()\n    {\n        this.loadBalancingClient = new LoadBalancingClient();\n        this.loadBalancingClient.AddCallbackTarget(this);\n    }\n    ~MyClient()\n    {\n        this.loadBalancingClient.RemoveCallbackTarget(this);\n    }\n    void IOnEventCallback.OnEvent(EventData photonEvent)\n    {\n        // we have defined two event codes, let's determine what to do\n        switch (photonEvent.Code)\n        {\n            case 1:\n                // do something\n                break;\n            case 2:\n                // do something else\n                break;\n        }\n    }\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Checking Struct Size in C# System\nDESCRIPTION: Shows how to implement a system in C# to verify the size of a custom struct at runtime.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/dsl.md#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic unsafe class MyStructSizeCheckingSystem : SystemMainThread{\n  public override void OnInit(Frame frame)\n  {\n    Assert.Check(Constants.FOO_SIZE == Foo.SIZE);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Authentication for PlayFab in C++\nDESCRIPTION: Configures custom authentication values for PlayFab integration in C++. It creates a parameter string with PlayFab UserId and Photon token, then sets the authentication type and parameters.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/playfab.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nExitGames::Common::JString params = \"username=\"+PlayFabUserId+\"&token=\"+PlayFabPhotonToken;\nExitGames::LoadBalancing::AuthenticationValues playFabAuthenticationValues;\nplayFabAuthenticationValues.setType(ExitGames::LoadBalancing::CustomAuthenticationType::CUSTOM).setParameters(params);\n// pass playFabAuthenticationValues as parameter on connect\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Collider State Component in C#\nDESCRIPTION: Defines a singleton component to track static collider states using a bitset array with 256 slots.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/statics.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsingleton component StaticColliderState {\n    bitset[256] colliders;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Curve Input in C#\nDESCRIPTION: Example of creating custom input for response curves by reading entity health data. Inherits from AIFunction<FP> to provide deterministic floating point values as input to utility curves.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/utility-theory.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  using Photon.Deterministic;\n  [System.Serializable]\n  public unsafe partial class InputEntityHealth : AIFunction<FP>\n  {\n    public override FP Execute(Frame frame, EntityRef entity, ref AIContext aiContext)\n    {\n      // Read the current health from a component from the agent entity\n      var health = frame.Unsafe.GetPointer<Health>(entity);\n      return health->Current;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Loop in C#\nDESCRIPTION: Demonstrates how to implement the main service loop for handling message dispatch and network communication in C#.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvoid GameLoop()\n{\n    while (!shouldExit)\n    {\n        this.loadBalancingClient.Service();\n        Thread.Sleep(50); // wait for a few frames/milliseconds\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector2 Type Registration in C#\nDESCRIPTION: Example showing how to register Vector2 type with Photon.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nPhotonPeer.RegisterType(typeof(Vector2), (byte)'W', SerializeVector2, DeserializeVector2);\n```\n\n----------------------------------------\n\nTITLE: Basic AIParam Integer Field Declaration\nDESCRIPTION: Simple declaration of an integer field that can store values directly without extra code.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/shared-concepts.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic Int32 MyInteger;\n```\n\n----------------------------------------\n\nTITLE: Default RuntimePlayer Fields in C#\nDESCRIPTION: Shows the default fields included in the RuntimePlayer class for player avatar and nickname. These can be used as a starting point for player visualization and identification.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/config-files.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class RuntimePlayer {\n    // This is a proposal how to let players select an avatar prototype using RuntimePlayer. Can be ignored.\n    public AssetRefEntityPrototype PlayerAvatar;\n    // This is a proposal how to assign a nickname to players using RuntimePlayer. Can be ignored.\n    public string PlayerNickname;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscription with Delegate in Unity\nDESCRIPTION: Demonstrates how to subscribe to Quantum events using a delegate function in Unity.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nQuantumEvent.Subscribe<EventPlayerHit>(listener: this, handler: OnEventPlayerHit);\nprivate void OnEventPlayerHit(EventPlayerHit e){\n  Debug.Log($\"Player hit in Frame {e.Tick}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QuantumJsonFriendlyDataBlob Class in C#\nDESCRIPTION: Helper class for storing binary data in JSON format with support for Base64 encoding and compression. This class works around Unity JSON serialization limitations for byte arrays.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/replay.md#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class QuantumJsonFriendlyDataBlob {\n  /// The byte array is saved as is.\n  public byte[] Binary;\n  /// The byte array is saved as Base64 text.\n  public string Base64;\n  /// Both Binary and Base64 can be GZip compressed.\n  public bool IsCompressed;\n}\n```\n\n----------------------------------------\n\nTITLE: PlayerRemoved WebHook JSON Request Example\nDESCRIPTION: Shows an example of the JSON body sent in a PlayerRemoved webhook request. It includes player information, removal reason, and authentication details.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"UserId\": \"db757806-8570-45aa\",\n  \"ActorNr\": 1,\n  \"PlayerSlot\": 0,\n  \"Player\": 21,\n  \"Reason\": 0,\n  \"AuthCookie\": {\n    \"Secret\": \"**********\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EventKey from Event in C#\nDESCRIPTION: Shows how to create an EventKey from a received event, which can be used to identify event instances.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic void OnEvent(MyEvent e) {\n  EventKey eventKey = (EventKey)e;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Photon LoadBalancingClient in C#\nDESCRIPTION: Implementation of disconnect functionality in C# using Photon's LoadBalancingClient. The code demonstrates proper cleanup in a destructor and includes a disconnect method that checks the connection state before disconnecting. It also shows the callback implementation for handling disconnection events.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing Photon.Realtime;\npublic class MyClient : IConnectionCallbacks\n{\n    private LoadBalancingClient loadBalancingClient;\n    public MyClient()\n    {\n        this.loadBalancingClient = new LoadBalancingClient();\n        this.loadBalancingClient.AddCallbackTarget(this);\n    }\n    ~MyClient()\n    {\n        this.Disconnect();\n        this.loadBalancingClient.RemoveCallbackTarget(this);\n    }\n    void Disconnect()\n    {\n        if (this.loadBalancingClient.IsConnected)\n        {\n            this.loadBalancingClient.Disconnect();\n        }\n    }\n    void IConnectionCallbacks.OnDisconnected(DisconnectCause cause)\n    {\n        switch (cause)\n        {\n            // ...\n\n```\n\n----------------------------------------\n\nTITLE: Checking Frame Timer States\nDESCRIPTION: Shows how to check various states of FrameTimer instances including running state and initialization status.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/concepts-and-patterns/frame-timer.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntimerA.IsRunning(frame); // returns TRUE\ntimerB.IsRunning(frame); // returns TRUE\ntimerC.IsRunning(frame); // returns FALSE\ntimerA.IsSet; // returns TRUE\ntimerB.IsSet; // returns TRUE\ntimerC.IsSet; // returns FALSE\n```\n\n----------------------------------------\n\nTITLE: Reactive Decorator Implementation\nDESCRIPTION: Example of implementing reactive decorators with blackboard entry registration and triggering.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/bt.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// --> Sample from BTBlackboardCompare\n    public AIBlackboardValueKey BlackboardKeyA;\n    public AIBlackboardValueKey BlackboardKeyB;\n    public override void OnEnter(BTParams p)\n    {\n      base.OnEnter(p);\n      p.Blackboard->RegisterReactiveDecorator(p.Frame, BlackboardKeyA.Key, this);\n      p.Blackboard->RegisterReactiveDecorator(p.Frame, BlackboardKeyB.Key, this);\n    }\n```\n\nLANGUAGE: csharp\nCODE:\n```\nblackboard->Set(f, \"VariableKey\", value)->TriggerDecorators(p);\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous HTTP Requests from Quantum Server in C#\nDESCRIPTION: Example of sending HTTP requests from within a Quantum Server plugin. This demonstrates how to communicate with external services from the custom plugin.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/setup.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nHttpExample.SendAsync(host, result => {\n    if (result) {\n        Log.Info(\"HTTP Asyncronous Response: Success\");\n    } else {\n        Log.Info(\"HTTP Asyncronous Response: FAILED\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Constants Code\nDESCRIPTION: Shows how constants are generated in the code.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic static unsafe partial class Constants {\n  public const Int32 PLAYER_COUNT = 8;\n  /// <summary>1.100006</summary>\n\n  public static FP FPConst {\n    [MethodImpl(MethodImplOptions.AggressiveInlining)] get {\n      FP result;\n      result.RawValue = 72090;\n      return result;\n    }\n  }\n  public static unsafe partial class Raw {\n    /// <summary>1.100006</summary>\n    public const Int64 FPConst = 72090;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AddPlayer WebHook JSON Response Example\nDESCRIPTION: Shows an example of the JSON response body for an AddPlayer webhook. It includes a RuntimePlayer object that can be used to overwrite the client-sent RuntimePlayer.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RuntimePlayer\": {\n    \"Name\": \"player1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Runtime Triangles\nDESCRIPTION: Demonstrates new methods for serializing and deserializing runtime triangles in DynamicMap with custom implementations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDynamicMap.SerializeRuntimeTriangles\n```\n\nLANGUAGE: C#\nCODE:\n```\nDynamicMap.DeserializeRuntimeTriangles\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Shape from ShapeConfig\nDESCRIPTION: Shows how to use ShapeConfig to create and perform physics overlap checks for weapon attacks, demonstrating shape creation and physics queries.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/shape-config.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static void Attack(in Frame frame, in EntityRef entity)\n{\n    var transform = frame.Unsafe.GetPointer<Transform3D>(entity);\n    var weapon = frame.Unsafe.GetPointer<Weapon>(entity);\n    var weaponSpec = frame.FindAsset<WeaponSpec>(weapon->WeaponSpec.Id);\n    var hits = frame.Physics3D.OverlapShape(\n        transform->Position,\n        transform->Rotation,\n        weaponSpec.AttackShape.CreateShape(frame),\n        weaponSpec.AttackLayers);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Region in C# Realtime API\nDESCRIPTION: Demonstrates how to connect to a specific Photon Cloud region by setting the FixedRegion property in AppSettings and using ConnectUsingSettings method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/regions.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAppSettings.FixedRegion = \"us\"; // Replace \"us\" with desired region code\nConnectUsingSettings(settings);\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Async Connection in C#\nDESCRIPTION: Shows how to handle exceptions when using async methods for connecting to a Photon server. It uses a try-catch block to catch and log any exceptions that occur during the connection process.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/async-extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntry {\n  await client.ConnectUsingSettingsAsync(appSettings);\n} catch (Exception e) {\n  Debug.LogException(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Stripped Room State JSON for Photon Server Optimization\nDESCRIPTION: Example of a room state JSON with debug fields removed to optimize size. This stripped version contains only the essential fields needed for room reconstruction while removing unnecessary debug information.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"ResultCode\": 0,\n       \"Message\": \"Room State successfully loaded\",\n       \"State\": {\n           \"ActorCounter\": 3,\n           \"ActorList\": [\n               {\n                   \"ActorNr\": 1,\n                   \"UserId\": \"MyUserId1\",\n                   \"Binary\": \"RGIAAAEBRAAAAAJzAAlw...\"\n               },\n               {\n                   \"ActorNr\": 3,\n                   \"UserId\": \"MyUserId0\",\n                   \"Binary\": \"RGIAAAEBRAAAAAFi/3MA...\"\n               }\n           ],\n           \"Binary\": {\n               \"18\": \"RAAAAAdzAAhwcm9wMUtl...\",\n               \"19\": \"RGl6AAEAAAAAAAN6AANp...\"\n           },\n           \"CheckUserOnJoin\": true,\n           \"DeleteCacheOnLeave\": false,\n           \"EmptyRoomTTL\": 0,\n           \"IsOpen\": true,\n           \"IsVisible\": true,\n           \"LobbyType\": 0,\n           \"LobbyProperties\": [\n               \"lobby3Key\",\n               \"lobby4Key\"\n           ],\n           \"MaxPlayers\": 4,\n           \"PlayerTTL\": 2147483647,\n           \"SuppressRoomEvents\": false,\n           \"Slice\": 0\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicGameConfigs Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicGameConfigs, called when Quantum receives initial game configurations. Allows modification of runtime and session configurations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicGameConfigs(ref byte[] runtimeConfig, ref DeterministicSessionConfig sessionConfig)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Photon Name Server in C#\nDESCRIPTION: Establishes initial connection to the Photon name server to retrieve available regions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/regions.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    loadBalancingClient.ConnectToNameServer()\n```\n\n----------------------------------------\n\nTITLE: Running Exported Quantum Simulation with Console Runner\nDESCRIPTION: Command to run the exported Quantum simulation using the console runner. It requires specifying paths for replay, LUT, and optionally the database and checksum files.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-project.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nQuantum.Runner.exe --replay-path path/to/replay --lut-path path/to/lut --db-path path/to/db --checksum-path path/to/checksum\n```\n\n----------------------------------------\n\nTITLE: Getting Total Players Count\nDESCRIPTION: Demonstrates how to get the total number of connected players across the application.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.PlayersOnMasterCount + loadBalancingClient.PlayersInRoomsCount\n```\n\nLANGUAGE: cpp\nCODE:\n```\nClient::getCountPlayersOnline()\n```\n\n----------------------------------------\n\nTITLE: ReplayStart Response JSON Example\nDESCRIPTION: Example JSON response for a ReplayStart webhook. The 'Skip' property determines if replay streaming should be disabled for the game session.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Skip\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Facebook Login Button in HTML\nDESCRIPTION: This HTML snippet adds a Facebook Login button to the page. It creates a div element with the necessary Facebook-specific attributes for displaying the login button.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-auth-facebook-javascript.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"fb-login-button\" data-show-faces=\"true\" data-width=\"400\" data-max-rows=\"1\" data-registration-url=\"\"></div>\n```\n\n----------------------------------------\n\nTITLE: Triggering Events in Quantum Simulation\nDESCRIPTION: Shows how to trigger events from within the Quantum simulation using the Frame.Events API.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Update(Frame frame) {\n  frame.Events.MyEvent(2023);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicPlayerRemove Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicPlayerRemove, called when a player is removed from the Quantum simulation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicPlayerRemove(int playerSlot)\n```\n\n----------------------------------------\n\nTITLE: Canceling Steam Auth Ticket with Steamworks.NET\nDESCRIPTION: Cancels the Steam authentication ticket after authentication is complete to prevent further use.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/steam-auth.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSteamUser.CancelAuthTicket(hAuthTicket);\n```\n\n----------------------------------------\n\nTITLE: Parsing PathJoin Webhook JSON in Photon Realtime\nDESCRIPTION: Sample JSON structure for a PathJoin webhook call in Photon Realtime. This webhook is fired when an actor joins or rejoins a room that was not removed from Photon Cloud.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActorNr\": 2,\n    \"AppVersion\": \"client-x.y.z\",\n    \"AppId\": \"00000000-0000-0000-0000-000000000000\",\n    \"GameId\": \"MyRoom\",\n    \"Region\": \"EU\",\n    \"Type\": \"Join\",\n    \"UserId\": \"MyUserId0\",\n    \"NickName\": \"MyPlayer0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicLateStart Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicLateStart, called when a late-joining or reconnecting client is about to receive the simulation start event.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicLateStart(DeterministicPluginClient client, Protocol.SimulationStart startData)\n```\n\n----------------------------------------\n\nTITLE: Defining Input Structure in Quantum DSL\nDESCRIPTION: Creates an input structure using Quantum's Domain Specific Language to define player controls.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/4-player.md#2025-04-23_snippet_4\n\nLANGUAGE: qtn\nCODE:\n```\ninput {\n    button Left;\n    button Right;\n    button Up;\n    button Fire;\n}\n```\n\n----------------------------------------\n\nTITLE: Power-Up System Component Definition\nDESCRIPTION: Defines a singleton component for managing power-up states with bitsets and timers for spawn control.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/statics.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nsingleton component PowerUps {\n    [ExcludeFromPrototype] bitset[256] IsPowerUp;\n    [ExcludeFromPrototype] bitset[256] State;\n    [ExcludeFromPrototype] array<FP>[256] Timers;\n    FP SpawnCooldown;\n}\n```\n\n----------------------------------------\n\nTITLE: ClientDisconnect Webhook JSON Structure in Photon Server\nDESCRIPTION: Sample JSON structure sent when a client disconnects from a Photon room. Contains information about the actor (player), game room, and reason for disconnection.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActorNr\": 1,\n    \"AppVersion\": \"client-x.y.z\",\n    \"AppId\": \"00000000-0000-0000-0000-000000000000\",\n    \"GameId\": \"MyRoom\",\n    \"IsInactive\": true,\n    \"Reason\": \"0\",\n    \"Region\": \"EU\",\n    \"Type\": \"ClientDisconnect\",\n    \"UserId\": \"MyUserId1\",\n    \"NickName\": \"MyPlayer1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Game State System\nDESCRIPTION: Shows the file structure for the game state system, including the relevant files in the quantum.code directory. This structure demonstrates how the game state interfaces and implementation are organized.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/motor-dome.md#2025-04-23_snippet_0\n\nLANGUAGE: pre\nCODE:\n```\nquantum.code\n└ Game\n  ├ Game State\n  │ ├ gameState.qtn\n  │ └ IGameStates.cs\n  └ Systems\n    └ GameStateSystem.cs\n\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimePlayer Class in C#\nDESCRIPTION: C# class definition for RuntimePlayer, which is used for player-specific configuration in Quantum 3. It includes a Loadout property of type AssetRef<GearConfig>.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public partial class RuntimePlayer {\n    public AssetRef<GearConfig> Loadout;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unreal Engine Build Script for Photon SDK\nDESCRIPTION: Example of modifying the Unreal Engine Build.cs file to include Photon SDK libraries and set platform-specific defines. Demonstrates setup for Android platform, including library paths and compiler definitions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/unreal-engine.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string PhotonPath\n{\n       get { return Path.GetFullPath(Path.Combine(ModulePath, \"..\", \"Photon\")); }\n}\n//\nif ( Target.Platform == UnrealTargetPlatform.Android)\n{\n       // Set _EG_WINDOWS_PLATFORM for Windows, _EG_IPHONE_PLATFORM for iOS and _EG_IMAC_PLATFORM for OS X\n       Definitions.Add(\"_EG_ANDROID_PLATFORM\");\n       //\n       PublicAdditionalLibraries.Add(Path.Combine(PhotonPath, \"lib\", \"Android\", \"libcommon-cpp-static_debug_android_armeabi_no-rtti.a\"));\n       PublicAdditionalLibraries.Add(Path.Combine(PhotonPath, \"lib\", \"Android\", \"libphoton-cpp-static_debug_android_armeabi_no-rtti.a\"));\n       PublicAdditionalLibraries.Add(Path.Combine(PhotonPath, \"lib\", \"Android\", \"libloadbalancing-cpp-static_debug_android_armeabi_no-rtti.a\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Shapes in Compound\nDESCRIPTION: Demonstrates how to iterate through shapes in a compound shape using GetShapes method.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/shape-config.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nif (shape->Compound.GetShapes(frame, out Shape3D* shapesBuffer, out int count))\n{\n    for (var i = 0; i < count; i++)\n    {\n        Shape3D* currentShape = shapesBuffer + i;\n        // do something with the shape\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Physics Settings Table in Markdown\nDESCRIPTION: A markdown table showing various physics settings in the Map Data, including World Size, Buckets Count, and other parameters with their descriptions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/settings.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting | Description |\n| --- | --- |\n| **World Size** | The physics scene size in the bucketing axis. The broad phase is clamped by a bounding box of all physics entries between `-WorldSize/2` to `WorldSize/2`. It is therefore crucial to ensure the world is big enough to encompass all entities. If an entity is outside the world, it will cost performance as it is added to either the first or last bucket. Everything outside the bounding box is considered to be at the world's edge, from the physics engine perspective, which will result in false collision candidates. <br> <br>In the non bucketing axis, the physics world is only limited by the value range of `FP.UsableMin` to `FP.UsableMax`. |\n| **Buckets Count** | The amount of buckets used in the broad phase, which are resolved in parallel. Use a reasonable amount according to the amount of physics entries (colliders). Too many buckets and the handling overhead increases without any performance gain because there are only few entries in each one; too few buckets and there will be an excessive amount of entries in each, slowing down the broad phase performance. |\n| **Buckets Subdivisions** | Regular queries (overlaps and raycasts) use a stabbing approach for checking as few entries as possible in the buckets subdivisions. Tweak the number in accordance with the expected amount of entries and regular queries performed. Too many subdivisions will add overhead without performance, while too few will result in queries taking longer to resolve, because they will have to check too many entries. |\n| **NOTE on Buckets Count & Buckets Subdivisions**<br>The default buckets count and bucket subdivisions values (16 buckets with 8 subdivisions) are usually good for up to 1~2K entries. You should thus not have to worry about tweaking them unless the physics are the bottleneck of the game. In that case, use the Task Profiler for evaluating the performance and tweak the values based on the findings (broad phase and regular queries resolution respectively). |\n| **Bucketing Axis** | Physics entries are put into buckets according to their position in the bucketing axis. |\n| **Sorting Axis** | The queries in a bucket are sorted according to their position in the sorting axis. |\n| **NOTE on Bucketing Axis & Sorting Axis**<br>The Y-Axis represents the vertical axis of the physics simulation. In 2D this is equal to the Y-Axis, whereas in 3D the Y-Axis is mapped to the Z-Axis as the 3D space partitioning is performed on the XZ-Plane.<br> <br>Choose these a bucketing and sorting axis based on how the entries are spread out in the world. Selecting a different axis for bucketing and sorting (e.g. X-Y or Y-X) is good for uniformly spread entries across that plane. If entries are concentrated in one axis, consider using the same axis for both bucketing and sorting. |\n| **Triangle Mesh Cell Size** | Defines the size of the cells into which the 3D triangle soup is divided. This number should be adapted based on how dense the meshes' triangles density to get a reasonable amount of triangles per cell. <br> <br>For better visualization enable related fields in the `QuantumEditorSettings` asset's Collider gizmos section.<br> <br>This will affect the performance of both the broad phase and regular queries. Use the Task Profiler to analyse the performance and find the most suitable number for the game. |\n```\n\n----------------------------------------\n\nTITLE: Sending LeaveGame Webhook Request in JavaScript\nDESCRIPTION: HTTP POST request sent when a client leaves an existing game session on the Photon Server. The webhook URL is constructed using the WebHookBaseUrl configured in the Photon dashboard.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/game/leave\n```\n\n----------------------------------------\n\nTITLE: Configuring BaseUrl with Query String in Photon Cloud Webhooks\nDESCRIPTION: Example of setting up the BaseUrl configuration with query string parameters for Photon Cloud webhooks. This snippet demonstrates how to include client version and custom key-value pairs in the URL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://myawesomegame.com/chat/webhooks?clientver={AppVersion}&key=&keyA=valueA&keyA=valueB&keyB=valueB&=value\n```\n\n----------------------------------------\n\nTITLE: LeaveGame Request JSON Example\nDESCRIPTION: Example JSON payload for a LeaveGame webhook request, including AppId, GameId, UserId, ActorNr, AuthCookie, and IsInactive flag.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"*******************\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"UserId\": \"db757806-8570-45aa\",\n  \"ActorNr\": 1,\n  \"AuthCookie\": {\n    \"Secret\": \"**********\"\n  },\n  \"IsInactive\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing PathBeforeJoin Webhook JSON in Photon Realtime\nDESCRIPTION: Sample JSON structure for a PathBeforeJoin webhook call in Photon Realtime. This webhook is used to allow or deny access to rooms before an actor is created for the user.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Type\": \"BeforeJoin\",\n    \"AppVersion\": \"client-x.y.z\",\n    \"AppId\": \"00000000-0000-0000-0000-000000000000\",\n    \"GameId\": \"MyRoom\",\n    \"Region\": \"EU\",\n    \"UserId\": \"MyUserId0\",\n    \"NickName\": \"MyPlayer0\",\n    \"AuthCookie\": \"data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Quantum 3 Migration PowerShell Script\nDESCRIPTION: This PowerShell script automates the migration process from Quantum 2.1 to Quantum 3.0. It handles tasks like importing packages, running code generation, and upgrading assets. The script accepts various parameters to customize the migration process and provides options to troubleshoot migration issues.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nQuantum3Migration.ps1 -UnityEditorPath <path> -Quantum2MigrationPreparationPackagePath <path> -Quantum3PackagePath <path> -Quantum3MigrationPackagePath <path> [..]\nUsage:\n  -UnityEditorPath <path>                 The path to the UnityEditor exe.\n  -QuantumUnityPath <path>                The path to the Quantum Unity project folder. By default \"quantum_unity\".\n  -QuantumCodePath <path>                 The path to the Quantum code project. By default \"quantum_code/quantum.code\".\n  -AssetDBPath <path>                     The path to the temporary exported assets. By default \"Quantum3MigrationAssets\".\n  -Quantum2MigrationPreparationPackagePath <path>\n                                         The path to the Quantum 3 Migration Preparation unitypackage.\n  -Quantum3PackagePath <path>            The path to the Quantum 3 SDK unitypackage.\n  -Quantum3MigrationPackagePath <path>   The path to the Quantum 3 Migration unitypackage.\n  -LogBasePath <path>                    The folder where the migration logs are stored. If not set logs are created inside the executing directory.\n  -AssemblyDefinitionsDecision           Define the answer for the \"remove assembly definition\" prompt. \"yes\" or \"no\".\n  -PauseAfterEachStep                    Pause and wait for user input after each step. Default is false.\n  -SkipQuantum2Preparation               Disable Quantum 2 preparation steps.\n  -SkipQuantum3PackageImports            Disable the package import steps.\n  -SkipQuantumCodeCopy                   Disable importing the quantum code.\n  -SkipInitialCodeGen                    Disable initial CodeGen steps.\n  -SkipCompileErrorDetection             Disable waiting for compiler error fixes.\n  -SkipAssetsUpgrade                     Disable upgrading the Quantum assets.\n```\n\n----------------------------------------\n\nTITLE: Enabling CRC Checks in C# Photon Client\nDESCRIPTION: Enables CRC (Cyclic Redundancy Check) for package integrity verification in the Photon client. This helps detect corrupted packages during transmission.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/troubleshooting/analyzing-disconnects.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.LoadBalancingPeer.CrcEnabled = true\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Request Data from Photon Server\nDESCRIPTION: Illustrates the structure of JSON data sent from Photon Server to a web service, showcasing various data types and their representations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"(Dictionary<String,Object>)Dictionary\":{\n        \"(Int32)dk_int\":\"1\",\n        \"(String)dk_str\":\"dv2\",\n        \"(Boolean)dk_bool\":\"True\"\n    },\n    \"(Hashtable)Hashtable\":{\n        \"(Byte)hk_byte\":\"255\",\n        \"(Object[])hk_array\":[\n            \"(Int32)0\",\n            \"(String)xy\",\n            \"(Boolean)False\"\n        ],\n        \"hk_null\":\"null\"\n    },\n    \"null\":\"null\",\n    \"(String[])string[]\":[\n        \"PUN\",\n        \"TB\",\n        \"RT\",\n        \"Bolt\",\n        \"Chat\"\n    ],\n    \"(Byte[])byte[]\":[\n        \"255\",\n        \"0\"\n    ],\n    \"(Int16[])short[]\":[\n        \"-32768\",\n        \"32767\"\n    ],\n    \"(Int32[])int[]\":[\n        \"-2147483648\",\n        \"2147483647\"\n    ],\n    \"(Int64[])long[]\":[\n        \"-9223372036854775808\",\n        \"9223372036854775807\"\n    ],\n    \"(Single[])float[]\":[\n        \"-3.402823E+38\",\n        \"3.402823E+38\"\n    ],\n    \"(Double[])double[]\":[\n        \"-1.79769313486232E+308\",\n        \"1.79769313486232E+308\"\n    ],\n    \"(Boolean[])bool[]\":[\n        \"True\",\n        \"False\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Photon Industries Name Server\nDESCRIPTION: Configuration example for setting the Photon Industries name server address used in Industries Circle accounts.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/secure-networks.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAppSettings.Server = \"ns.photonindustries.io\";\n```\n\n----------------------------------------\n\nTITLE: GameResult JSON Example\nDESCRIPTION: Sample JSON structure for a GameResult event including frame number and winner information\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\":\"Quantum.GameResult, Quantum.Simulation\",\n  \"Frame\": 200,\n  \"Winner\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: WebhookError JSON Example\nDESCRIPTION: Example JSON structure for a WebhookError response, including HTTP status code, error name, and error message.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Status\": 400,\n  \"Error\": \"PlayerNotAllowed\",\n  \"Message\": \"LoremIpsum\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VIVEPORT API in C#\nDESCRIPTION: Initializes the VIVEPORT API with an application ID and sets up the initial status handler to check for successful initialization.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/viveport-auth.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n//...\nApi.Init(InitStatusHandler, APP_ID);\n//...\nprivate static void InitStatusHandler(int nResult)\n{\n    if (nResult == 0)\n    {\n        bInit = true;\n        bIsReady = false;\n        ViveSessionToken = string.Empty;\n        bArcadeIsReady = false;\n        Viveport.Core.Logger.Log(\"InitStatusHandler is successful\");\n    }\n    else\n    {\n        // Init error, close your app and make sure your app ID is correct or not.\n        bInit = false;\n        Viveport.Core.Logger.Log(\"InitStatusHandler error : \" + nResult);\n    }\n}\n//...\n```\n\n----------------------------------------\n\nTITLE: Parsing PathCreate Webhook JSON in Photon Realtime\nDESCRIPTION: Sample JSON structure for a PathCreate webhook call in Photon Realtime. This example shows the structure for a room creation event with custom properties and lobby settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActorNr\": 1,\n    \"AppVersion\": \"client-x.y.z\",\n    \"AppId\": \"00000000-0000-0000-0000-000000000000\",\n    \"CreateOptions\": {\n        \"MaxPlayers\": 4,\n        \"LobbyId\": null,\n        \"LobbyType\": 0,\n        \"CustomProperties\": {\n            \"lobby3Key\": \"lobby3Val\",\n            \"lobby4Key\": \"lobby4Val\"\n        },\n        \"EmptyRoomTTL\": 0,\n        \"PlayerTTL\": 2147483647,\n        \"CheckUserOnJoin\": true,\n        \"DeleteCacheOnLeave\": false,\n        \"SuppressRoomEvents\": false\n    },\n    \"GameId\": \"MyRoom\",\n    \"Region\": \"EU\",\n    \"Type\": \"Create\",\n    \"UserId\": \"MyUserId1\",\n    \"NickName\": \"MyPlayer1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Full Room State from PathCreate Webhook in Photon Server\nDESCRIPTION: Example of a full room state JSON returned in a PathCreate webhook with Type='Load'. Used when reconstructing a persistent room that was previously saved.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"ResultCode\": 0,\n       \"Message\": \"Room State successfully loaded\",\n       \"State\": {\n           \"ActorCounter\": 3,\n           \"ActorList\": [\n               {\n                   \"ActorNr\": 1,\n                   \"UserId\": \"MyUserId1\",\n                   \"NickName\": \"MyPlayer1\",\n                   \"Binary\": \"RGIAAAEBRAAAAAJzAAlw...\",\n                   \"DEBUG_BINARY\": {\n                       \"1\": {\n                           \"255\": \"MyPlayer1\",\n                           \"player_id\": \"12345\"\n                       }\n                   }\n               },\n               {\n                   \"ActorNr\": 3,\n                   \"UserId\": \"MyUserId0\",\n                   \"NickName\": \"MyPlayer0\",\n                   \"Binary\": \"RGIAAAEBRAAAAAFi/3MA...\",\n                   \"DEBUG_BINARY\": {\n                       \"1\": {\n                           \"255\": \"MyPlayer0\"\n                       }\n                   }\n               }\n           ],\n           \"Binary\": {\n               \"18\": \"RAAAAAdzAAhwcm9wMUtl...\",\n               \"19\": \"RGl6AAEAAAAAAAN6AANp...\"\n           },\n           \"CheckUserOnJoin\": true,\n           \"CustomProperties\": {\n               \"lobby4Key\": \"test1b\",\n               \"lobby3Key\": \"test1a\"\n           },\n           \"DeleteCacheOnLeave\": false,\n           \"EmptyRoomTTL\": 0,\n           \"IsOpen\": true,\n           \"IsVisible\": true,\n           \"LobbyType\": 0,\n           \"LobbyProperties\": [\n               \"lobby3Key\",\n               \"lobby4Key\"\n           ],\n           \"MaxPlayers\": 4,\n           \"PlayerTTL\": 2147483647,\n           \"SuppressRoomEvents\": false,\n           \"Slice\": 0,\n           \"DebugInfo\": {\n               \"DEBUG_PROPERTIES_18\": {\n                   \"250\": [\n                       \"lobby3Key\",\n                       \"lobby4Key\"\n                   ],\n                   \"prop1Key\": \"prop1Val\",\n                   \"prop2Key\": \"prop2Val\",\n                   \"lobby4Key\": \"test1b\",\n                   \"lobby3Key\": \"test1a\",\n                   \"map_name\": \"mymap\",\n                   \"turn\": 1\n               },\n               \"DEBUG_EVENTS_19\": {\n                   \"0\": [\n                       [\n                           3,\n                           0,\n                           \"data\"\n                       ],\n                       [\n                           3,\n                           0,\n                           \"data\"\n                       ],\n                       [\n                           3,\n                           0,\n                           \"data\"\n                       ]\n                   ]\n               }\n           }\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PUN Authentication with Facebook Token\nDESCRIPTION: Sets up Photon authentication values using Facebook access token and user ID. Prepares connection parameters for Photon Network.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/facebook-auth.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnFacebookLoggedIn()\n{\n    // AccessToken class will have session details\n    string aToken = AccessToken.CurrentAccessToken.TokenString;\n    string facebookId = AccessToken.CurrentAccessToken.UserId;\n    PhotonNetwork.AuthValues = new AuthenticationValues();\n    PhotonNetwork.AuthValues.AuthType = CustomAuthenticationType.Facebook;\n    PhotonNetwork.AuthValues.UserId = facebookId; // alternatively set by server\n    PhotonNetwork.AuthValues.AddAuthParameter(\"token\", aToken);\n    PhotonNetwork.ConnectUsingSettings(\"1.0\");\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing with ByteArraySlice Pool in C#\nDESCRIPTION: Demonstrates how to configure and use ByteArraySlice pooling for event deserialization, including proper memory management and slice release.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/performance-tips.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// By default byte arrays arrive as byte[]\n// UseByateArraySlicePoolForEvents must be enabled to use this feature\nprivate static void EnableByteArraySlicePooling()\n{\n    loadBalancingPeer.UseByteArraySlicePoolForEvents = true;\n}\nprivate void OnEvent(EventData photonEvent)\n{\n    // Rather than casting to byte[], we now cast to ByteArraySlice\n    ByteArraySlice slice = photonEvent.CustomData as ByteArraySlice;\n    // Read in the contents of the byte[] Buffer\n    // Your custom deserialization code for byte[] will go here.\n    Deserialize(slice.Buffer, slice.Count);\n    // Be sure to release the slice back to the pool\n    slice.Release();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data as Read by Web Service\nDESCRIPTION: Shows how the JSON data sent from Photon Server is interpreted and structured when received by a web service, including type conversions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"(object)Dictionary\":{\n        \"dk_int\":\"(number)1\",\n        \"dk_str\":\"(string)dv2\",\n        \"dk_bool\":\"(boolean)true\"\n    },\n    \"(object)Hashtable\":{\n        \"(number)hk_byte\":\"255\",\n        \"(array)hk_array\":[\n            \"(number)0\",\n            \"(string)xy\",\n            \"(boolean)false\"\n        ],\n        \"hk_null\":null\n    },\n    \"null\":null,\n    \"(array)string[]\":[\n        \"(string)PUN\",\n        \"(string)TB\",\n        \"(string)RT\",\n        \"(string)Bolt\",\n        \"(string)Chat\"\n    ],\n    \"byte[]\":\"(string)/wA=\",\n    \"(array)short[]\":[\n        \"(number)-32768\",\n        \"(number)32767\"\n    ],\n    \"(array)int[]\":[\n        \"(number)-2147483648\",\n        \"(number)2147483647\"\n    ],\n    \"(array)long[]\":[\n        \"(number)-9223372036854776000\",\n        \"(number)9223372036854776000\"\n    ],\n    \"(array)float[]\":[\n        \"(number)-3.40282347e+38\",\n        \"(number)3.40282347e+38\"\n    ],\n    \"(array)double[]\":[\n        \"(number)-1.7976931348623157e+308\",\n        \"(number)1.7976931348623157e+308\"\n    ],\n    \"(array)bool[]\":[\n        \"(boolean)true\",\n        \"(boolean)false\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending AddPlayer WebHook POST Request in JavaScript\nDESCRIPTION: Demonstrates the HTTP POST request format for the AddPlayer webhook. This webhook is sent when a client tries to add a player to the Quantum online game.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/player/add\n```\n\n----------------------------------------\n\nTITLE: Configuring Photon Authentication with Oculus Credentials\nDESCRIPTION: Code snippet demonstrating how to set up the Photon authentication values using the Oculus ID and nonce obtained from the authentication flow.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/oculus-auth.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.AuthValues = new AuthenticationValues();\nloadBalancingClient.AuthValues.UserId = oculusId;\nloadBalancingClient.AuthValues.AuthType = CustomAuthenticationType.Oculus;\nloadBalancingClient.AuthValues.AddAuthParameter(\"userid\", oculusId);\nloadBalancingClient.AuthValues.AddAuthParameter(\"nonce\", oculusNonce);\n// do not set loadBalancingClient.AuthValues.Token or authentication will fail\n// connect\n```\n\n----------------------------------------\n\nTITLE: Delta Compressed Input Handler\nDESCRIPTION: Callback for handling finalized delta compressed input data, useful for replay streaming. Takes tick number and compressed data array as parameters.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nvoid OnDeltaCompressedInput(int tick, byte[] data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Byte-Encoded Direction in Quantum\nDESCRIPTION: Extends the Input struct to add encoder/decoder properties for direction vectors. This implementation converts between FPVector2 and a single byte representation by encoding the direction angle, significantly reducing network data size.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/input.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    partial struct Input\n    {\n        public FPVector2 Direction\n        {\n            get\n            {\n                if (EncodedDirection == default)\n                    return default;\n\n                Int32 angle = ((Int32)EncodedDirection - 1) * 2;\n\n                return FPVector2.Rotate(FPVector2.Up, angle * FP.Deg2Rad);\n            }\n            set\n            {\n                if (value == default)\n                {\n                    EncodedDirection = default;\n                        return;\n                }\n\n                var angle = FPVector2.RadiansSigned(FPVector2.Up, value) * FP.Rad2Deg;\n\n                angle = (((angle + 360) % 360) / 2) + 1;\n\n                EncodedDirection = (Byte) (angle.AsInt);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RuntimeConfig JSON Example\nDESCRIPTION: Example JSON representation of a RuntimeConfig object, including the $type property for deserialization and various configuration settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\": \"Quantum.RuntimeConfig, Quantum.Simulation\",\n  \"GameMode\": 1,\n  \"Seed\": 0,\n  \"Map\": {\n    \"Id\": {\n      \"Value\":2640765235684814815\n      }\n  },\n  \"SimulationConfig\": {\n    \"Id\": {\n      \"Value\":440543562436170603\n    }\n  },\n  \"SystemsConfig\": {\n    \"Id\": {\n      \"Value\":2430278665492933905\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ENet Commands Structure\nDESCRIPTION: Detailed table of ENet commands used in the protocol, including their sizes, senders, and purposes for various network operations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/binary-protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| name | size | sent by | description |\n| --- | --- | --- | --- |\n| connect | 44 | client | reliable, per connection |\n| verify connect | 44 | server | reliable, per connect |\n| init message | 57 | client | reliable, per connection (choses the application) |\n| init response | 19 | server | reliable, per init |\n| ping | 12 | both | reliable, called in intervals (if nothing else was reliable) |\n| fetch timestamp | 12 | client | a ping which is immediately answered |\n| ack | 20 | both | unreliable, per reliable command |\n| disconnect | 12 | both | reliable, might be unreliable in case of timeout |\n| send reliable | 12 + payload | both | reliable, carries a operation, response or event |\n| send unreliable | 16 + payload | both | unreliable, carries a operation, response or event |\n| fragment | 32 + payload | both | reliable, used if the payload does not fit into a single datagram |\n```\n\n----------------------------------------\n\nTITLE: Implementing Room List Caching in C# for Photon Default Lobby\nDESCRIPTION: This C# class demonstrates how to implement room list caching for a Photon Default Lobby. It includes methods for joining a lobby, updating the cached room list, and handling lobby and connection callbacks. The class uses Photon.Realtime namespace and implements ILobbyCallbacks and IConnectionCallbacks interfaces.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/matchmaking-and-lobby.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Photon.Realtime;\nusing System.Collections.Generic;\npublic class RoomListCachingExample : ILobbyCallbacks, IConnectionCallbacks\n{\n    private TypedLobby customLobby = new TypedLobby(\"customLobby\", LobbyType.Default);\n    private LoadBalancingClient loadBalancingClient;\n    private Dictionary<string, RoomInfo> cachedRoomList = new Dictionary<string, RoomInfo>();\n    public void JoinLobby()\n    {\n        loadBalancingClient.JoinLobby(customLobby);\n    }\n    private void UpdateCachedRoomList(List<RoomInfo> roomList)\n    {\n        for(int i=0; i<roomList.Count; i++)\n        {\n            RoomInfo info = roomList[i];\n            if (info.RemovedFromList)\n            {\n                cachedRoomList.Remove(info.Name);\n            }\n            else\n            {\n                cachedRoomList[info.Name] = info;\n            }\n        }\n    }\n    // do not forget to register callbacks via loadBalancingClient.AddCallbackTarget\n    // also deregister via loadBalancingClient.RemoveCallbackTarget\n    #region ILobbyCallbacks\n    void ILobbyCallbacks.OnJoinedLobby()\n    {\n        cachedRoomList.Clear();\n    }\n    void ILobbyCallbacks.OnLeftLobby()\n    {\n        cachedRoomList.Clear();\n    }\n\n    void ILobbyCallbacks.OnRoomListUpdate(List<RoomInfo> roomList)\n    {\n        // here you get the response, empty list if no rooms found\n        UpdateCachedRoomList(roomList);\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endif\n    #region IConnectionCallbacks\n    void IConnectionCallbacks.OnDisconnected(DisconnectCause cause)\n    {\n        cachedRoomList.Clear();\n    }\n    // [..] Other callbacks implementations are stripped out for brevity, they are empty in this case as not used.\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FP from Raw Value\nDESCRIPTION: Demonstrates creating FP number using raw value representation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/fixed-point.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar v = FP.FromRaw(72089);\n```\n\n----------------------------------------\n\nTITLE: Checking Resent Reliable Commands in C# Photon Client\nDESCRIPTION: Accesses the count of resent reliable commands in the Photon client. A high value indicates an unstable connection with frequent packet loss.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/troubleshooting/analyzing-disconnects.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLoadBalancingPeer.ResentReliableCommands\n```\n\n----------------------------------------\n\nTITLE: GameConfigs WebHook JSON Response Example\nDESCRIPTION: Shows an example of the JSON response body for a GameConfigs webhook. It includes RuntimeConfig and SessionConfig objects that can be used to overwrite client-sent configurations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RuntimeConfig\": {\n    \"Map\": {\n      \"Id\": {\n        \"Value\": 94358348534\n      }\n    }\n  },\n  \"SessionConfig\": {\n    \"PlayerCount\": 8,\n    \"ChecksumCrossPlatformDeterminism\": false,\n    \"LockstepSimulation\": false,\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SessionConfig JSON Structure\nDESCRIPTION: Example of a complete SessionConfig JSON configuration including player count, simulation settings, and input parameters\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PlayerCount\": 8,\n  \"ChecksumCrossPlatformDeterminism\": false,\n  \"LockstepSimulation\": false,\n  \"InputDeltaCompression\": true,\n  \"UpdateFPS\": 60,\n  \"ChecksumInterval\": 60,\n  \"RollbackWindow\": 60,\n  \"InputHardTolerance\": 8,\n  \"InputRedundancy\": 3,\n  \"InputRepeatMaxDistance\": 10,\n  \"SessionStartTimeout\": 1,\n  \"TimeCorrectionRate\": 4,\n  \"MinTimeCorrectionFrames\": 1,\n  \"MinOffsetCorrectionDiff\": 1,\n  \"TimeScaleMin\": 100,\n  \"TimeScalePingMin\": 100,\n  \"TimeScalePingMax\": 300,\n  \"InputDelayMin\": 0,\n  \"InputDelayMax\": 60,\n  \"InputDelayPingStart\": 100,\n  \"InputFixedSizeEnabled\": true,\n  \"InputFixedSize\": 24\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Structure Causing Stale Data in Quantum\nDESCRIPTION: Unsafe code example demonstrating how pointer reuse can cause stale data issues in Quantum. This shows a common bug and how to fix it by properly initializing the struct with default(Bar).\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: Qtn\nCODE:\n```\nstruct Bar {\n    public bool Foo;\n}\nstatic unsafe void Main(string[] args) {\n    for (int i = 0; i < 2; i++) {\n        Bar bar;\n        //Bar bar = default(Bar); // <---- Fixes the stale data\n\n        Bar* barPt = &bar;\n        if (barPt->Foo)\n            Console.WriteLine(\"Stuff and Things\");\n\n        barPt->Foo = true;\n    }\n    Console.ReadKey();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Scraping Command\nDESCRIPTION: Example command showing custom configuration options including output directory and concurrency settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go -type=realtime -output=\"output/custom-realtime\" -list-only=false -concurrency=4\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicUpdate Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicUpdate, called during each server update cycle after input processing and server simulation have completed.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicUpdate()\n```\n\n----------------------------------------\n\nTITLE: Defining Lobby Constants for Local Multiplayer in C#\nDESCRIPTION: Constants for SQL lobby configuration used in the multiplayer setup. These constants define properties for tracking local player counts and total player counts across connected clients.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/sports-arena-brawler.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic const string LOCAL_PLAYERS_PROP_KEY = \"LP\";\npublic const string TOTAL_PLAYERS_PROP_KEY = \"C0\";\npublic static readonly TypedLobby SQL_LOBBY = new TypedLobby(\"customSqlLobby\", LobbyType.SqlLobby);\n```\n\n----------------------------------------\n\nTITLE: Exporting SessionConfig in Unity\nDESCRIPTION: Unity Editor menu path for exporting SessionConfig as JSON\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\nUnity Editor > Quantum > Export > SessionConfig (Json)\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Photon Cloud Webhooks\nDESCRIPTION: Examples of JSON response formats for Photon Cloud webhooks. These include success and error responses with result codes and optional messages.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"ResultCode\" : 0 }\n{ \"ResultCode\" : 0, \"Message\" : \"OK\" }\n{ \"ResultCode\" : 1, \"Message\" : \"Missing Webhook Argument: <argument name>.\" }\n{ \"ResultCode\" : 2, \"Message\" : \"Game with GameId=<gameId> already exists.\" }\n{ \"ResultCode\" : 3, \"Message\" : \"Could not load the State, Reason=<reason>.\" }\n```\n\n----------------------------------------\n\nTITLE: AppStats Update Callback in C++\nDESCRIPTION: Shows the callback method for receiving application statistics updates in C++.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void onAppStatsUpdate(void) {}\n```\n\n----------------------------------------\n\nTITLE: Writing to Context-Specific Blackboard\nDESCRIPTION: Implements an AI action that writes to the context-specific blackboard, demonstrating decoupled blackboard access.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/bot-sdk/snippets.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n    [System.Serializable]\n    public unsafe class WriteBlackboardCompound : AIAction\n    {\n        public int Value;\n        public override void Update(Frame frame, EntityRef entity, ref AIContext aiContext)\n        {\n            aiContext.UserData().Blackboard->Set(frame, \"TestInteger\", Value);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Steam Auth Ticket using Facepunch.Steamworks\nDESCRIPTION: Alternative implementation using Facepunch.Steamworks to get a Steam authentication ticket and convert it to hex-encoded string.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/steam-auth.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic string GetSteamAuthTicket(out AuthTicket authTicket)\n{\n    authTicket = SteamUser.GetAuthSessionTicket();\n    StringBuilder ticketString = new StringBuilder();\n    for (int i = 0; i < authTicket.Data.Length; i++)\n    {\n        ticketString.AppendFormat(\"{0:x2}\", authTicket.Data[i]);\n    }\n    return ticketString.ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Loop in C++\nDESCRIPTION: Shows how to implement the main service loop for handling message dispatch and network communication in C++.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/getting-started/realtime-intro.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid SampleNetworkLogic::run(void)\n{\n    mLoadBalancingClient.service(); // needs to be called regularly!\n}\nint main(void)\n{\n    static const ExitGames::Common::JString appID = L\"<no-app-id>\"; // set your app id here\n    static const ExitGames::Common::JString appVersion = L\"1.0\";\n    SampleNetworkLogic networkLogic(appID, appVersion);\n    networkLogic.connect();\n    while(!shouldExit)\n    {\n        networkLogic.run();\n        SLEEP(100);\n    }\n```\n\n----------------------------------------\n\nTITLE: PlayerAdded WebHook JSON Request Example\nDESCRIPTION: Provides an example of the JSON body sent in a PlayerAdded webhook request. It includes player information and authentication details.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"UserId\": \"db757806-8570-45aa\",\n  \"ActorNr\": 1,\n  \"PlayerSlot\": 0,\n  \"Player\": 21,\n  \"AuthCookie\": {\n    \"Secret\": \"**********\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Steam Auth Ticket with Facepunch.Steamworks\nDESCRIPTION: Cancels the Steam authentication ticket using Facepunch.Steamworks implementation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/steam-auth.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nticket.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Errors for Disconnect Testing in Clumsy\nDESCRIPTION: Configuration for the Clumsy network tool to simulate connection loss by dropping 100% of packets on specific UDP and TCP ports used by the game server.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/reconnecting.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFilter  (udp.DstPort == 5056 or udp.SrcPort == 5056) or (tcp.DstPort == 4531 or tcp.SrcPort == 4531)\nDrop    100%\n```\n\n----------------------------------------\n\nTITLE: Directory Structure in Plaintext\nDESCRIPTION: Shows the project's folder structure including main components and output directories.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md           # Project documentation\n├── go.mod              # Go module definition\n├── main.go             # Main application code\n├── scraper/            # Scraper package code\n│   └── scraper.go      # Core scraping functionality\n└── output/             # Root output directory\n    ├── quantum3/       # Output directory for Quantum3 documentation\n    └── realtime/       # Output directory for Photon Realtime documentation\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication for PlayFab in C#\nDESCRIPTION: Sets up custom authentication values for PlayFab integration in C#. It adds the PlayFab UserId and Photon token as authentication parameters.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/playfab.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nlbClient.AuthValues = new AuthenticationValues();\nlbClient.AuthValues.AuthType = CustomAuthenticationType.Custom;\nlbClient.AuthValues.AddAuthParameter(\"username\", PlayFabUserId);\nlbClient.AuthValues.AddAuthParameter(\"token\", PlayFabPhotonToken);\n// do not set AuthValues.Token or authentication will fail\n// connect\n```\n\n----------------------------------------\n\nTITLE: Reserving Slots for Expected Users in Photon Realtime (C#)\nDESCRIPTION: Demonstrates how to reserve slots for expected users when creating, joining, or finding rooms in Photon Realtime. This is useful for team matchmaking or inviting friends to join a specific room.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/userids-and-friends.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nEnterRoomParams enterRoomParams = new EnterRoomParams();\nenterRoomParams.ExpectedUsers = expectedUsers;\n// create room example\nloadBalancingClient.OpCreateRoom(enterRoomParams);\n// join room example\nloadBalancingClient.OpJoinRoom(enterRoomParams);\n// join or create room example\nloadBalancingClient.OpJoinOrCreateRoom(enterRoomParams);\n// join random room example\nOpJoinRandomRoomParams opJoinRandomRoomParams = new OpJoinRandomRoomParams();\nopJoinRandomRoomParams.ExpectedUsers = expectedUsers;\nloadBalancingClient.OpJoinRandomRoom(opJoinRandomRoomParams);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebHookCustomHttpHeaders in JSON\nDESCRIPTION: Example of setting custom HTTP headers for webhooks using a JSON dictionary in the Photon Dashboard configuration.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"A\": \"Foo\", \"B\": \"100\" }\n```\n\n----------------------------------------\n\nTITLE: JoinGame Request JSON Example\nDESCRIPTION: Example JSON payload for a JoinGame webhook request, including AppId, GameId, UserId, and AuthCookie.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"*******************\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"UserId\": \"db757806-8570-45aa\",\n  \"AuthCookie\": {\n    \"Secret\": \"**********\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Photon Authentication with VIVEPORT Token in C#\nDESCRIPTION: Sets up the Photon authentication values using the VIVEPORT session token for user authentication.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/viveport-auth.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.AuthValues = new AuthenticationValues();\nloadBalancingClient.authValues.AuthType = CustomAuthenticationType.Viveport;\nloadBalancingClient.AuthValues.AddAuthParameter(\"userToken\", ViveSessionToken);\n// do not set loadBalancingClient.AuthValues.Token or authentication will fail\n// connect\n```\n\n----------------------------------------\n\nTITLE: API References in Bug Fixes\nDESCRIPTION: Collection of code references mentioned in bug fixes, including Unity and Quantum3 API calls that were affected by the fixes.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nUnityEngine.AI.NavMesh.GetAreaNames\nEntityRef\nQuantumRunnerLocalDebug.DeltaTimeType\nQuantumRunnerLocalReplay.DeltaTimeType\nQuantumMenuConnectionBehaviour.RequestAvailableOnlineRegionsAsync()\nDraw.Rectangle()\nRecordingFlags.Input\n```\n\n----------------------------------------\n\nTITLE: URL Tag Usage Examples in Photon Cloud Webhooks\nDESCRIPTION: Examples of using URL tags in Photon Cloud webhook configurations. These demonstrate how to incorporate dynamic variables like region, app ID, version, and cloud into the webhook URLs.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{Region}.mydomain.com/{AppId}?version={AppVersion}&cloud={Cloud}\nhttps://mydomain.com/{Cloud}/{Region}/{AppId}/{AppVersion}\n```\n\n----------------------------------------\n\nTITLE: Changing RNGSession Seed at Runtime\nDESCRIPTION: Shows how to reset the global RNGSession with a new seed during simulation runtime.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/rngsession.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// inside of simulation\npublic void ResetSeed(Frame frame)\n{\n    int newSeed = 100;\n    frame.Global->RngSession = new Photon.Deterministic.RNGSession(newSeed);\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Using Async Methods with Error Handling (C#)\nDESCRIPTION: This snippet demonstrates how to properly disconnect using async methods with error handling in Photon Realtime API. It shows that even disconnection can fail and should be handled with try/catch.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ntry {\n  // Disconnecting can also fail\n  await client.DisconnectAsync();\n} catch (Exception e) {\n  Debug.LogException(e);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for PathGameProperties Webhook in Photon Realtime\nDESCRIPTION: This JSON payload represents a sample call for the PathGameProperties webhook. It includes details about the actor, game properties, room state, and other relevant information sent when custom properties are updated.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActorNr\": 1,\n    \"AppVersion\": \"client-x.y.z\",\n    \"AppId\": \"00000000-0000-0000-0000-000000000000\",\n    \"Properties\": {\n        \"turn\": 1,\n        \"lobby3Key\": \"test1a\",\n        \"lobby4Key\": \"test1b\"\n    },\n    \"GameId\": \"MyRoom\",\n    \"Region\": \"EU\",\n    \"State\": {\n        \"ActorCounter\": 2,\n        \"ActorList\": [\n            {\n                \"ActorNr\": 1,\n                \"UserId\": \"MyUserId1\",\n                \"NickName\": \"MyPlayer1\",\n                \"IsActive\": true,\n                \"Binary\": \"RGIAAAEBRAAAAAJzAAlz...\",\n                \"DEBUG_BINARY\": {\n                    \"1\": {\n                        \"255\": \"MyPlayer1\",\n                        \"player_id\": \"12345\"\n                    }\n                }\n            },\n            {\n                \"ActorNr\": 2,\n                \"UserId\": \"MyUserId0\",\n                \"NickName\": \"MyPlayer0\",\n                \"IsActive\": true,\n                \"Binary\": \"RGIAAEBRAAAAAFi/3M15...\",\n                \"DEBUG_BINARY\": {\n                    \"1\": {\n                        \"255\": \"MyPlayer0\"\n                    }\n                }\n            }\n        ],\n        \"Binary\": {\n            \"18\": \"RAAAAAdzAAhwcm9wMUtl...\"\n        },\n        \"CheckUserOnJoin\": true,\n        \"CustomProperties\": {\n            \"lobby4Key\": \"test1b\",\n            \"lobby3Key\": \"test1a\"\n        },\n        \"DeleteCacheOnLeave\": false,\n        \"EmptyRoomTTL\": 0,\n        \"IsOpen\": true,\n        \"IsVisible\": true,\n        \"LobbyType\": 0,\n        \"LobbyProperties\": [\n            \"lobby3Key\",\n            \"lobby4Key\"\n        ],\n        \"MaxPlayers\": 4,\n        \"PlayerTTL\": 2147483647,\n        \"SuppressRoomEvents\": false,\n        \"Slice\": 0,\n        \"DebugInfo\": {\n            \"DEBUG_PROPERTIES_18\": {\n                \"250\": [\n                    \"lobby3Key\",\n                    \"lobby4Key\"\n                ],\n                \"prop1Key\": \"prop1Val\",\n                \"prop2Key\": \"prop2Val\",\n                \"lobby4Key\": \"test1b\",\n                \"lobby3Key\": \"test1a\",\n                \"map_name\": \"mymap\",\n                \"turn\": 1\n            }\n        }\n    },\n    \"Type\": \"Game\",\n    \"UserId\": \"MyUserId1\",\n    \"NickName\": \"MyPlayer1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Input with Quantum Callbacks\nDESCRIPTION: Shows how to implement local input handling using Quantum callbacks in a MonoBehaviour.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/game-events.md#2025-04-23_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LocalInput : MonoBehaviour {\n  private DispatcherSubscription _pollInputDispatcher;\n  private void OnEnable() {\n    _pollInputDispatcher = QuantumCallback.Subscribe(this, (CallbackPollInput callback) => PollInput(callback));\n  }\n  public void PollInput(CallbackPollInput callback) {\n    Quantum.Input i = new Quantum.Input();\n    callback.SetInput(i, DeterministicInputFlags.Repeatable);\n  }\n  private void OnDisable(){\n    QuantumCallback.Unsubscribe(_pollInputDispatcher);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response Data as Read from Photon Server\nDESCRIPTION: Shows how the sample response data is interpreted and structured when read from the Photon Server, with type information included.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"(Dictionary<String,Object>)number\":{\n        \"(Double)MAX_VALUE\":\"1.79769313486232E+308\",\n        \"(Double)MIN_VALUE\":\"4.94065645841247E-324\"\n    },\n    \"(Dictionary<String,Object>)object\":{\n        \"(String)string\":\"xyz\",\n        \"null\":\"null\",\n        \"(Boolean)bool\":\"False\",\n        \"(Double)float\":\"-3.14\",\n        \"(Int64)integer\":\"123456\"\n    },\n    \"(Object[])array\":[\n        \"(String)xyz\",\n        \"(Int64)0\",\n        \"(Boolean)True\",\n        \"null\",\n        \"null\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lobby Statistics in C#\nDESCRIPTION: Shows how to enable lobby statistics before connecting to the server in C#.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.EnableLobbyStatistics = true;\n```\n\n----------------------------------------\n\nTITLE: ReplayChunk Webhook JSON Example\nDESCRIPTION: Example JSON payload for a ReplayChunk webhook request. Contains chunk information and binary input data for replay streaming.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"GameId\": \":eu:e472a861-a1e2-49f7\",\n  \"ChunkNumber\": 0,\n  \"IsLast\": false,\n  \"LastTick\": 302,\n  \"TickCount\": 243,\n  \"TickCountTotal\": 243,\n  \"IsCompressed\": false,\n  \"Input\": \"JQAAADwAAAAIAAMKFsCUwYDggOB/UCAAAPgfDMhgEoAHA////4PRBwATAAAAPQAAAAgAA2PaSK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Ports Table in Markdown\nDESCRIPTION: This markdown table defines the default ports used by Photon Cloud for various protocols and server types. It includes port numbers for UDP, TCP, WebSockets, and Secure WebSockets connections to Nameserver, Master Server, and Game Server.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/tcp-and-udp-port-numbers.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Port Number | Protocol | Purpose |\n| --- | --- | --- |\n| 5058 or 27000 | UDP | Client to Nameserver (UDP) |\n| 5055 or 27001 | UDP | Client to Master Server (UDP) |\n| 5056 or 27002 | UDP | Client to Game Server (UDP) |\n| 4533 | TCP | Client to Nameserver (TCP) |\n| 4530 | TCP | Client to Master Server (TCP) |\n| 4531 | TCP | Client to Game Server (TCP) |\n| 80 or 9090 | TCP | Client to Master Server (WebSockets) |\n| 80 or 9091 | TCP | Client to Game Server (WebSockets) |\n| 80 or 9093 | TCP | Client to Nameserver (WebSockets) |\n| 443 or 19090 | TCP | Client to Master Server (Secure WebSockets) |\n| 443 or 19091 | TCP | Client to Game Server (Secure WebSockets) |\n| 443 or 19093 | TCP | Client to Nameserver (Secure WebSockets) |\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Components in Quantum DSL\nDESCRIPTION: Shows how to increase the maximum number of components to 512 using a pragma directive in Quantum DSL.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/release-notes.md#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n#pragma max_components 512\n```\n\n----------------------------------------\n\nTITLE: GameResult Webhook JSON Example\nDESCRIPTION: Example JSON payload for a GameResult webhook request. Contains AppId, GameId, and an array of Results with client information and game outcome.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"Results\": [\n      {\n          \"Clients\": [\n              {\n                  \"UserId\": \"FJEH43FL56FSDR\",\n                  \"Players\": [\n                      0\n                  ],\n                  \"GameTime\": 63.3636703\n              }\n          ],\n          \"Result\": {\n              \"$type\": \"Quantum.GameResult, Quantum.Simulation\",\n              \"Frame\": 12010,\n              \"Winner\": 2\n          },\n          \"IsServerResult\": false\n      }\n  ],\n  \"UserId\": \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GameResult Webhook in JavaScript\nDESCRIPTION: HTTP POST request for sending a GameResult webhook to the Quantum server. Requires WebHookBaseUrl and WebHookEnableGameResult to be set on the Photon dashboard.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nPOST https://{WebHookBaseUrl}/game/result\n```\n\n----------------------------------------\n\nTITLE: UDP Packet Headers Structure\nDESCRIPTION: Defines the structure and size of UDP packet headers used in the Photon binary protocol, including UDP/IP headers, eNet packet headers, and operation headers.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/binary-protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| name | size [bytes] | description |\n| --- | --- | --- |\n| udp/ip | 28 + size(optional headers) | IP + UDP Header. Optional headers are less than 40 bytes. |\n| enet packet header | 12 | contains up to byte.MaxValue commands |\n| operation header | 8 | in a command (reliable, unreliable or fragment) contains operation parameters |\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers in JSON for Webhooks\nDESCRIPTION: Example of how to add custom HTTP headers in JSON format when configuring webhooks for a Photon Engine application. This allows developers to include additional information like API keys in webhook requests.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/gameplay/web-extensions/webhooks-v1-2.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"CustomHttpHeaders\": {\n  \"X-API-Key\": \"your-secret-api-key\",\n  \"Custom-Header\": \"custom-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Quantum Assets in Editor Scripts\nDESCRIPTION: Shows how to access Quantum assets specifically from Unity Editor scripts using the editor-specific GetGlobalAssetEditorInstance method. This approach allows editing asset properties and saving changes via the Editor API.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-unity.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void OnInspectorGUI()\n{\n    base.OnInspectorGUI();\n\n    CharacterSpec characterData = QuantumUnityDB.GetGlobalAssetEditorInstance(myAssetRef);\n    FP maximumHealth = characterData.MaximumHealth;\n    // do something\n    EditorUtility.SetDirty(characterData);\n}\n```\n\n----------------------------------------\n\nTITLE: ReplayStart Webhook JSON Example\nDESCRIPTION: Example JSON payload for a ReplayStart webhook request. Contains game session information and configuration data.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"AppVersion\": \"1.0-live\",\n  \"Region\": \"eu\",\n  \"Cloud\": \"0:\",\n  \"RoomName\": \"1.2-party-2349535735\",\n  \"GameId\": \"0:eu:e472a861-a1e2-49f7\",\n  \"SessionConfig\": { },\n  \"RuntimeConfig\": \"H4sIAAAAAAAACnWNPQvCMBCG/4ocjkWuye\n    X6sXZycNCCe8AogSYtNBlK6X/3UHQR4Zb35X2eW2GflslBC+ds\n    Y8rhcMkx+eC6Md79o9h96t6HPNjkxwgF9M7doMUCTnaCdoWjpB\n    WudshiUkxYsVHacE11KWe2TZiv4K3+4YjQkECKNJcVMuoXtszJ\n    hfkPI1tUVc1sqFGN1g3Kr+0J+3ktedUAAAA=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Concrete Asset Subclasses in C#\nDESCRIPTION: Examples of implementing concrete subclasses that extend a base asset class, adding specialized properties for different character types.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n  public class MageSpec : CharacterSpec {\n    public FP HealthRegenerationFactor;\n  }\n  public class WarriorSpec : CharacterSpec {\n    public FP Armour;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Assets in Quantum3 C#\nDESCRIPTION: Demonstrates how to find and dispose of previously created dynamic assets using frame operations. Shows the standard pattern for asset lifecycle management.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMageSpec asset = frame.FindAsset<MageSpec>(assetGuid);\nframe.DisposeAsset(assetGuid);\n```\n\n----------------------------------------\n\nTITLE: CreateGame Response JSON Example\nDESCRIPTION: Example JSON response for a successful CreateGame webhook, including GameId, EnterRoomParams, SessionConfig, RuntimeConfig, RuntimePlayer, and various game session settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppId\": \"d1f67eec-51fb-45c1\",\n  \"GameId\": \"0:eu:db757806-8570-45aa\",\n  \"EnterRoomParams\": {\n    \"RoomOptions\": {\n      \"IsVisible\": true,\n      \"IsOpen\": true\n    }\n  },\n  \"SessionConfig\": {\n    \"PlayerCount\": 8,\n    \"ChecksumCrossPlatformDeterminism\": false,\n    \"UpdateFPS\": 30\n  },\n  \"RuntimeConfig\": {\n    \"Map\": {\n      \"Id\": {\n        \"Value\": 94358348534\n      }\n    }\n  },\n  \"RuntimePlayer\": {\n    \"Name\": \"player1\"\n  },\n  \"MaxPlayerSlots\": 2,\n  \"SnapshotsBlocked\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prototype Pattern for Non-Serializable Structs\nDESCRIPTION: Example showing how to use the prototype pattern for DSL structs that aren't directly serializable in Unity, with materialization at runtime.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/assets/assets-simulation.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing Quantum.Prototypes;\n  public class FooUser : AssetObject {\n    public FooPrototype F;\n  }\n\n```\n\n----------------------------------------\n\nTITLE: File Path Reference in Markdown\nDESCRIPTION: Shows the file path reference for third-party assets in the game project structure.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/game-samples/quantum-simple-fps/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAssets/3rdParty\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Reference\nDESCRIPTION: A markdown link pointing to the external Photon Engine glossary documentation.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/glossary.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# glossary\n\n_Source: https://doc.photonengine.com/realtime/current/reference/glossary_\n```\n\n----------------------------------------\n\nTITLE: Union Struct Conversion in C#\nDESCRIPTION: Code showing how to convert Unity-serializable prototype structs to union structs in Quantum. This is necessary since Unity does not directly support overlapping fields in union structures.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nUnionName result = default;\nprototype.Materialize(frame, ref result, default);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Caching Leading to Desynchronization\nDESCRIPTION: Example of incorrect system implementation that caches data in a class field, which will cause desynchronization issues during rollbacks in Quantum simulations.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/faq.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class CleaningSystem : SystemBase {\n    public Boolean HasShoweredToday;    // <----- Error\n    public override void Update(Frame frame) {\n        if (!HasShoweredToday && frame.Global->ElapsedTime > 100) {\n            Shower();\n            HasShoweredToday = true;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response Data from Web Service\nDESCRIPTION: Demonstrates the structure of sample response data as sent from the web service, including various data types and nested objects.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/custom-authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"(object)number\": {\n        \"(number)MAX_VALUE\": \"1.7976931348623157e+308\",\n        \"(number)MIN_VALUE\": \"5e-324\"\n    },\n    \"(object)object\": {\n        \"(string)string\": \"xyz\",\n        \"null\": null,\n        \"(boolean)bool\": \"false\",\n        \"(undefined)undefined\": \"undefined\",\n        \"(number)float\": \"-3.14\",\n        \"(number)integer\": \"123456\"\n    },\n    \"(array)array\": [\n        \"(string)xyz\",\n        \"(number)0\",\n        \"(boolean)true\",\n        null,\n        \"(undefined)undefined\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting and Joining Room Asynchronously in C#\nDESCRIPTION: Demonstrates how to use async methods to connect to a Photon server and join a random room or create a new one. It uses ConnectUsingSettingsAsync and JoinRandomOrCreateRoomAsync methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/async-extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar appSettings = new new AppSettings();\nvar client = new RealtimeClient();\nawait client.ConnectUsingSettingsAsync(appSettings);\nvar joinRandomRoomParams = new JoinRandomRoomArgs();\nvar enterRoomArgs = new EnterRoomArgs();\nvar result = await client.JoinRandomOrCreateRoomAsync(joinRandomRoomParams, enterRoomArgs);\n```\n\n----------------------------------------\n\nTITLE: Legacy System Setup in Quantum 2.1 (Deprecated)\nDESCRIPTION: Shows the old method of creating systems in Quantum 2.1 using the static SystemSetup.CreateSystems() method. This approach is now deprecated and will log a warning if used in Quantum 3.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/whats-new.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum {\n  public static class SystemSetup {\n    public static SystemBase[] CreateSystems(RuntimeConfig gameConfig, SimulationConfig simulationConfig) {\n      return new SystemBase[] {\n          // ..\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Photon Name Server in C#\nDESCRIPTION: Establishes initial connection to the Photon name server to fetch available region master server addresses. This is required before accessing the region list or connecting to specific regions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/reference/regions-quantum3.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    loadBalancingClient.ConnectToNameServer()\n```\n\n----------------------------------------\n\nTITLE: Region Selection Handler in Objective-C\nDESCRIPTION: Implements the onAvailableRegions callback to handle region selection in Objective-C. Selects the first available region from the list.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/regions.md#2025-04-23_snippet_4\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void) onAvailableRegions:(EGArray*)availableRegions :(EGArray*)availableRegionServers\n{\n    NSString* r = [availableRegions componentsJoinedByString:@\", \"];\n    NSString* s = [availableRegionServers componentsJoinedByString:@\", \"];\n    EGLOG(EGDbgLvl::INFO, L\"onAvailableRegions: %ls / %ls\", [r UTF32String], [s UTF32String]);\n    [mOutputListener writeLine:@\"onAvailableRegions: %@ / %@\", r, s];\n    // select first region from list\n    [mOutputListener writeLine:@\"selecting region: %@\", availableRegions[0]];\n    [mLoadBalancingClient selectRegion:availableRegions[0]];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Max Component Count of 512 in Quantum Project\nDESCRIPTION: This pragma directive allows projects to use libraries with a maximum of 512 components. It should be added to a .qtn file in projects that require this extended component count.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/getting-started/migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma max_components 512\n```\n\n----------------------------------------\n\nTITLE: Copying Compound Shapes\nDESCRIPTION: Shows how to create a new compound shape by copying from an existing one.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/physics/shape-config.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar newCompoundShape = Shape2D.CreatePersistentCompound();\nnewCompoundShape.Compound.CopyFrom(f, ref oldCompoundShape);\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDeterministicInputReceived Method\nDESCRIPTION: Method signature for DeterministicServer.OnDeterministicInputReceived, called when player input is received by the Quantum simulation. Allows input modification before processing.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/addons/plugin-sdk/quantum-server-api.md#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnDeterministicInputReceived(DeterministicPluginClient client, DeterministicTickInput input)\n```\n\n----------------------------------------\n\nTITLE: Defining Asteroid Component in Quantum\nDESCRIPTION: Creates an empty tag component for asteroids that will be used to identify asteroid entities in collisions.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/tutorials/asteroids/10-collision-detection.md#2025-04-23_snippet_0\n\nLANGUAGE: Qtn\nCODE:\n```\ncomponent AsteroidsAsteroid\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Signal Subscriber Implementation in C#\nDESCRIPTION: Example of implementing a signal subscriber system.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/quantum-ecs/systems.md#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Quantum\n{\n  class CallbacksSystem : SystemSignalsOnly, ISignalOnDamage\n  {\n    public void OnDamage(Frame frame, FP damage, EntityRef entity)\n    {\n      // this will be called everytime any other system calls the OnDamage signal\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Clone Command\nDESCRIPTION: Git commands to clone the repository and navigate to the project directory.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/xsampedro/quantum3_docs.git\ncd quantum3_docs\n```\n\n----------------------------------------\n\nTITLE: Quantum Documentation Scraping Command\nDESCRIPTION: Command to run the scraper for Quantum documentation with default settings.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go -type=quantum -list-only=false\n```\n\n----------------------------------------\n\nTITLE: StreamBuffer Method Delegates in C#\nDESCRIPTION: Delegate definitions for StreamBuffer serialization and deserialization methods.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/reference/serialization-in-photon.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate short SerializeStreamMethod(StreamBuffer outStream, object customobject);\npublic delegate object DeserializeStreamMethod(StreamBuffer inStream, short length);\n```\n\n----------------------------------------\n\nTITLE: Getting Players in Rooms Count\nDESCRIPTION: Shows how to get the number of players currently inside game rooms.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/lobby-and-matchmaking/appandlobbystats.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nloadBalancingClient.PlayersInRoomsCount\n```\n\nLANGUAGE: cpp\nCODE:\n```\nClient::getCountPlayersIngame()\n```\n\n----------------------------------------\n\nTITLE: Go Dependencies Installation\nDESCRIPTION: Command to install project dependencies using Go modules.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Defining MatchmakingReconnectInformation Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MatchmakingReconnectInformation class using a markdown table. It includes the property names, types, and descriptions for room connection details, region, app version, user ID, and timeout information.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/game-session/async-extensions.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Type | Description |\n| --- | --- | --- |\n| `Room` | `string` | The room name that the client was connected to. |\n| `Region` | `string` | The region the client was connected to. |\n| `AppVersion` | `string` | The app version used in the former connection. |\n| `UserId` | `string` | The user id the client used to connect to the server. |\n| `TimeoutInTicks` | `long` | The timeout after this information is considered to be unusable. Use the `Timeout` property to set and get this value. |\n```\n\n----------------------------------------\n\nTITLE: Authentication Class Reference in Markdown\nDESCRIPTION: Documentation outlining the core authentication concepts, including anonymous users, custom authentication, and various authentication providers in Photon networking.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/connection-and-authentication/authentication/overview-auth.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# overview-auth\n\n_Source: https://doc.photonengine.com/realtime/current/connection-and-authentication/authentication/overview-auth_\n\n# Overview\n\nWhen you start a new project with any Photon SDK, you might notice that users (a.k.a. players) are anonymous. There is no need to login as user and you may notice that each new session gets a random `userId` assigned.\n```\n\n----------------------------------------\n\nTITLE: Message Cost Calculation Table in Markdown\nDESCRIPTION: Table showing the message cost calculations for different Photon operations including Create, Join, Leave, RaiseEvent, and SetProperties with best, average, and worst case scenarios.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/realtime/troubleshooting/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation | Success: Best Case | Success: Average Case | Success: Worst Case |\n| --- | --- | --- | --- |\n| Create | **2**<br>(SuppressRoomEvents=true) | **3**<br>\\+ Join event (SuppressRoomEvents=false, default) | **3** |\n| Join | **2 + k**<br>(SuppressRoomEvents=true)<br>\\+ k \\* cached custom event | **2 + n + k**<br>\\+ n \\* Join event (SuppressRoomEvents=false, default) | **2 + 2 \\* n + k**<br>\\+ n \\* ErroInfo event (HasErrorInfo=true) |\n| Leave | **2**<br>(SuppressRoomEvents=true) | **1 + n**<br>\\+ (n - 1) \\* Leave event (SuppressRoomEvents=false, default) | **2 + (n - 1) \\* 2**<br>\\+ (n - 1) \\* ErroInfo event (HasErrorInfo=true) |\n| RaiseEvent | **1**<br>(no operation response)<br>(target: interest group with no subscribers) | **1 + n**<br>\\+ n \\* custom event<br>(target: all/broadcast) | **2 + 2 \\* n**<br>\\+ n \\* ErroInfo event (HasErrorInfo=true)<br>\\+ Auth event (token refresh) |\n| SetProperties | **2**<br>Broadcast=false | **2 + n**<br>\\+ n \\* PropertiesChanged event (default: Broadcast=true, BroadcastPropertiesChangeToAll=true) | **2 + 2 \\* n**<br>\\+ n \\* ErrorInfo event (HasErrorInfo=true)<br>\\+ 1 in case of CAS or BroadcastPropsChangeToAll |\n```\n\n----------------------------------------\n\nTITLE: EnterRoomParams JSON Configuration\nDESCRIPTION: Example of EnterRoomParams JSON structure including room options and expected users configuration\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/webhooks.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RoomOptions\": {\n    \"IsVisible\": true,\n    \"IsOpen\": true,\n    \"MaxPlayers\": 8,\n    \"PlayerTtl\": null,\n    \"EmptyRoomTtl\": 10000,\n    \"CustomRoomProperties\": {\n      \"Foo\": \"bar\",\n      \"PlayerClass\": 1\n    },\n    \"CustomRoomPropertiesForLobby\": [\n      \"Foo\"\n    ],\n    \"SuppressRoomEvents\": null,\n    \"SuppressPlayerInfo\": null,\n    \"PublishUserId\": null,\n    \"DeleteNullProperties\": null,\n    \"BroadcastPropsChangeToAll\": null,\n    \"CleanupCacheOnLeave\": null,\n    \"CheckUserOnJoin\": null\n  },\n  \"ExpectedUsers\": [\n    \"A\",\n    \"B\",\n    \"C\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unity Package Reference\nDESCRIPTION: Reference to the Multiplayer Play Mode package that needs to be installed via Unity Package Manager.\nSOURCE: https://github.com/xsampedro/quantum3_docs/blob/main/output/quantum3/manual/mppm.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMultiplayer Play Mode\n```"
  }
]