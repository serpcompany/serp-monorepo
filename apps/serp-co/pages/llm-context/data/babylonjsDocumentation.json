[
  {
    "owner": "babylonjs",
    "repo": "documentation",
    "content": "TITLE: Basic Babylon.js HTML Template\nDESCRIPTION: Complete HTML template for setting up a Babylon.js application with necessary scripts and canvas element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_app.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Babylon Template</title>\n\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n\n      #renderCanvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n    </style>\n\n    <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n    <script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n    <script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script>\n  </head>\n\n  <body>\n    <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas>\n    <!-- touch-action=\"none\" for best results from PEP -->\n\n    <script>\n      const canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element\n      const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\n\n      // Add your code here matching the playground format\n\n      const scene = createScene(); //Call the createScene function\n\n      // Register a render loop to repeatedly render the scene\n      engine.runRenderLoop(function () {\n        scene.render();\n      });\n\n      // Watch for browser/canvas resize events\n      window.addEventListener(\"resize\", function () {\n        engine.resize();\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scene Components in Babylon.js\nDESCRIPTION: Creates a basic 3D scene with an ArcRotateCamera, HemisphericLight, and a box mesh. The scene is initialized with essential components required for rendering 3D content.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_scene.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst scene = new BABYLON.Scene(engine);\n\nconst camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 3, new BABYLON.Vector3(0, 0, 0), scene);\ncamera.attachControl(canvas, true);\n\nconst light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", {}, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Babylon.js HTML Template\nDESCRIPTION: This HTML snippet demonstrates the basic structure for a Babylon.js application. It includes essential HTML boilerplate, CSS to make the canvas fill the viewport, inclusion of the Babylon.js library via CDN, and inline JavaScript to initialize the engine, create a simple scene with a camera, light, sphere, and ground, and set up the render loop and resize handling. It relies on the Babylon.js library being accessible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/starterHTML.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <title>Babylon Template</title>\n\n        <style>\n            html, body {\n                overflow: hidden;\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }\n            #renderCanvas {\n                width: 100%;\n                height: 100%;\n                touch-action: none;\n            }\n        </style>\n\n        <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n\n    </head>\n\n   <body>\n\n\t<canvas id=\"renderCanvas\"></canvas>\n\n\t<script>\n        const canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element\n        const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\n        const createScene = function () {\n            // Creates a basic Babylon Scene object\n            const scene = new BABYLON.Scene(engine);\n            // Creates and positions a free camera\n            const camera = new BABYLON.FreeCamera(\"camera1\", \n                new BABYLON.Vector3(0, 5, -10), scene);\n            // Targets the camera to scene origin\n            camera.setTarget(BABYLON.Vector3.Zero());\n            // This attaches the camera to the canvas\n            camera.attachControl(canvas, true);\n            // Creates a light, aiming 0,1,0 - to the sky\n            const light = new BABYLON.HemisphericLight(\"light\", \n                new BABYLON.Vector3(0, 1, 0), scene);\n            // Dim the light a small amount - 0 to 1\n            light.intensity = 0.7;\n            // Built-in 'sphere' shape.\n            const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", \n                {diameter: 2, segments: 32}, scene);\n            // Move the sphere upward 1/2 its height\n            sphere.position.y = 1;\n            // Built-in 'ground' shape.\n            const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", \n                {width: 6, height: 6}, scene);\n            return scene;\n        };\n        const scene = createScene(); //Call the createScene function\n        // Register a render loop to repeatedly render the scene\n        engine.runRenderLoop(function () {\n                scene.render();\n        });\n        // Watch for browser/canvas resize events\n        window.addEventListener(\"resize\", function () {\n                engine.resize();\n        });\n\t</script>\n\n   </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing and Manipulating an External Mesh in Babylon.js (JavaScript)\nDESCRIPTION: This code demonstrates asynchronous loading of an external 3D mesh (such as a .gltf model) using ImportMeshAsync, then scales the imported mesh to a smaller size. You must provide valid mesh asset URLs and filenames through the Assets object. The meshNames parameter is left empty to import all meshes from the file. The 'then' block processes the result, allowing access to the imported mesh array, which is used here to modify the scaling. The visual result is an appropriately sized, externally loaded object appearing within the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/journey/theFirstStep.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(Assets.meshes.Yeti.rootUrl + Assets.meshes.Yeti.filename, scene, { meshNames: \"\" }).then(function (result) {\\n    result.meshes[0].scaling = new BABYLON.Vector3(0.1, 0.1, 0.1);\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scene with Sphere and Ground in Babylon.js\nDESCRIPTION: Creates a basic 3D scene containing a sphere and ground plane using Babylon.js. Sets up a free camera with controls, adds hemispheric lighting, and positions basic geometric shapes. The scene includes a configurable sphere with diameter and segments parameters, and a ground plane with adjustable width and height.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/starterSceneCode.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst createScene = function () {\n    // Creates a basic Babylon Scene object\n    const scene = new BABYLON.Scene(engine);\n    // Creates and positions a free camera\n    const camera = new BABYLON.FreeCamera(\"camera1\", \n        new BABYLON.Vector3(0, 5, -10), \n        scene);\n    // Targets the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n    // Attaches the camera to the canvas\n    camera.attachControl(canvas, true);\n    // Creates a light, aiming 0,1,0\n    const light = new BABYLON.HemisphericLight(\"light\", \n        new BABYLON.Vector3(0, 1, 0), \n        scene);\n    // Dim the light a small amount 0 - 1\n    light.intensity = 0.7;\n    // Built-in 'sphere' shape.\n    const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", \n        {diameter: 2, segments: 32}, \n        scene);\n    // Move sphere upward 1/2 its height\n    sphere.position.y = 1;\n    // Built-in 'ground' shape.\n    const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", \n        {width: 6, height: 6}, \n        scene);\n    return scene;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ground Mesh with MeshBuilder in Babylon.js - JavaScript\nDESCRIPTION: Demonstrates how to create a ground mesh using the MeshBuilder.CreateGround function in Babylon.js. No dependencies beyond importing the Babylon.js library are required. The function accepts a name, options object for customization, and an optional scene; the ground's parameters such as width, height, and subdivisions can be set via the options. Scene is optional and will use the current scene by default. The output is a Mesh object representing the ground.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/ground.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ground = BABYLON.MeshBuilder.CreateGround(\"ground\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Core Module with ES6 Syntax - JavaScript\nDESCRIPTION: Shows the ES6 import statement for importing the entire BABYLON namespace from the babylonjs npm package. Requires the babylonjs package to be installed and compatible project setup (e.g., Babel or a TS compiler that understands ES6 imports). Allows use of all BABYLON classes and functions in the imported namespace.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Babylon.js NullEngine in Node.js with Asset Loading\nDESCRIPTION: This snippet provides a complete example of setting up and running Babylon.js with NullEngine in a Node.js environment. It requires the 'babylonjs', 'babylonjs-loaders', and 'xhr2' npm packages. The code initializes the engine and scene, adds a light and camera, asynchronously loads meshes from both '.babylon' and '.gltf' files using ImportMeshAsync, logs the loaded mesh details, and starts the engine's render loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/serverSide.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar BABYLON = require(\"babylonjs\");\nvar LOADERS = require(\"babylonjs-loaders\");\nglobal.XMLHttpRequest = require(\"xhr2\").XMLHttpRequest;\n\nvar engine = new BABYLON.NullEngine();\nvar scene = new BABYLON.Scene(engine);\n\nvar light = new BABYLON.PointLight(\"Omni\", new BABYLON.Vector3(20, 20, 100), scene);\n\nvar camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, 100, BABYLON.Vector3.Zero(), scene);\n\nBABYLON.ImportMeshAsync(\"https://playground.babylonjs.com/scenes/skull.babylon\", scene).then(function ({ meshes }) {\n  camera.target = meshes[0];\n\n  console.log(\"Meshes loaded from babylon file: \" + meshes.length);\n  for (let index = 0; index < meshes.length; index++) {\n    console.log(meshes[index].toString());\n  }\n\n  BABYLON.ImportMeshAsync(\"https://www.babylonjs.com/assets/DamagedHelmet/glTF/DamagedHelmet.gltf\", scene).then(function ({ meshes }) {\n    console.log(\"Meshes loaded from gltf file: \" + meshes.length);\n    for (let index = 0; index < meshes.length; index++) {\n      console.log(meshes[index].toString());\n    }\n  });\n\n  console.log(\"render started\");\n  engine.runRenderLoop(function () {\n    scene.render();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Babylon.js Scene Creation\nDESCRIPTION: Basic template for creating a Babylon.js scene with camera and lights setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_app.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = function () {\n  var scene = new BABYLON.Scene(engine);\n\n  // Add a camera to the scene and attach it to the canvas\n  // Add a lights to the scene\n\n  //Your Code\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative Camera Access in Babylon.js\nDESCRIPTION: Demonstrates alternative ways to access the helper-created camera from the scenes camera array\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultCamera(true, true, true);\n\nvar helperCamera = scene.cameras[scene.cameras.length - 1];\n\n//OR\n\nvar helperCamera = scene.cameras.pop();\nscene.cameras.push(helperCamera);\n```\n\n----------------------------------------\n\nTITLE: Babylon.js Scene Initialization Example - JavaScript\nDESCRIPTION: This JavaScript example initializes a basic 3D scene using Babylon.js with ES6-style imports. It demonstrates importing from both core and material packages, selecting DOM elements, creating engine, camera, lighting, geometry, and applying materials. Dependencies: @babylonjs/core and @babylonjs/materials must be installed. Key parameters: DOM canvas id, shape definitions, material names. Inputs: None from user; outputs: renders an interactive 3D scene on a canvas. Limitations: Expects an HTML file with a matching canvas. Suitable as a starter template.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FreeCamera } from \"@babylonjs/core/Cameras/freeCamera.js\";\nimport { Engine } from \"@babylonjs/core/Engines/engine.js\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder.js\";\nimport { CreateSphere } from \"@babylonjs/core/Meshes/Builders/sphereBuilder.js\";\nimport { Scene } from \"@babylonjs/core/scene.js\";\n\nimport { GridMaterial } from \"@babylonjs/materials/grid/gridMaterial.js\";\n\n// Get the canvas element from the DOM.\nconst canvas = document.getElementById(\"renderCanvas\");\n\n// Associate a Babylon Engine to it.\nconst engine = new Engine(canvas);\n\n// Create our first scene.\nconst scene = new Scene(engine);\n\n// This creates and positions a free camera (non-mesh)\nconst camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n// This targets the camera to scene origin\ncamera.setTarget(Vector3.Zero());\n\n// This attaches the camera to the canvas\ncamera.attachControl(canvas, true);\n\n// This creates a light, aiming 0,1,0 - to the sky (non-mesh)\nconst light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\n\n// Default intensity is 1. Let's dim the light a small amount\nlight.intensity = 0.7;\n\n// Create a grid material\nconst material = new GridMaterial(\"grid\", scene);\n\n// Our built-in 'sphere' shape.\nconst sphere = CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\n\n// Move the sphere upward 1/2 its height\nsphere.position.y = 2;\n\n// Affect a material\nsphere.material = material;\n\n// Our built-in 'ground' shape.\nconst ground = CreateGround(\"ground1\", { width: 6, height: 6, subdivisions: 2 }, scene);\n\n// Affect a material\nground.material = material;\n\n// Render every frame\nengine.runRenderLoop(() => {\n  scene.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating GUI3DManager in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to create an instance of the GUI3DManager, which manages all 3D GUI controls in a Babylon.js scene. It requires Babylon.js, the GUI extension, and a scene object. The 'manager' object connects GUI controls and manages their utility layer, handling their addition to the scene and providing access to utility functions for layout and scaling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst manager = new BABYLON.GUI.GUI3DManager(scene);\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Configuration for Babylon.js TypeScript Project - JavaScript\nDESCRIPTION: Presents a sample webpack.config.js file for compiling a Babylon.js TypeScript project. Requires Node.js and relevant devDependencies (webpack, webpack-cli, typescript, ts-loader) installed. Establishes entry/output structure, TypeScript extension handling, source maps, and loader for ts/tsx files. Inputs a .ts entry point and outputs bundled JS to dist directory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    entry: {\n        app: './mygame.ts'\n    },\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    resolve: {\n        extensions: ['.ts', '.tsx', '.js']\n    },\n    devtool: 'source-map',\n    plugins: [\n\n    ],\n    module: {\n        rules: [{\n            test: /\\.tsx?$/,\n            loader: 'ts-loader',\n            exclude: /node_modules/\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying WebGL Version in Babylon.js with JavaScript\nDESCRIPTION: This code demonstrates how to determine which version of WebGL is being used by accessing the webGLVersion property on the Babylon.js engine instance. No external dependencies are required beyond Babylon.js itself. The property returns an integer indicating the API version: 1 for WebGL1 or 2 for WebGL2. This value can be used to adjust rendering logic or shader compatibility as needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n`engine.webGLVersion`\n```\n\n----------------------------------------\n\nTITLE: Complete Scene Creation Function in Babylon.js\nDESCRIPTION: Implements a createScene function that initializes and returns a complete 3D scene with camera, light, and box mesh. This format is specifically designed for use in the Babylon.js Playground environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_scene.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst createScene = () => {\n    const scene = new BABYLON.Scene(engine);\n\n    const camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 3, new BABYLON.Vector3(0, 0, 0));\n    camera.attachControl(canvas, true);\n\n    const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0));\n\n    const box = BABYLON.MeshBuilder.CreateBox(\"box\", {});\n\n    return scene;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Lattice Control Points for Deformation - Babylon.js - JavaScript\nDESCRIPTION: Demonstrates how to directly manipulate lattice control points in the lattice's 3D data array to deform a mesh, such as making the mesh pointy at the top. Requires an instantiated lattice with known resolution parameters. Iterates over control points and adjusts their y values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n   // Make it pointy\n    for (x = 0; x < lattice.resolutionX; x++) {\n        for (z = 0; z < lattice.resolutionZ; z++) {\n            const control = lattice.data[x][lattice.resolutionY - 1][z];\n            control.y += 1;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Depth Sensing Options and Types (TypeScript)\nDESCRIPTION: This TypeScript interface defines the configurable options and related types for Babylon.js Depth Sensing. It includes usage and data format preferences, plus advanced flags for performance, visualization, and material usage. Consumers must respect the expected types and optional parameters for correct feature behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WebXRDepthUsage = \\\"cpu\\\" | \\\"gpu\\\";\\nexport type WebXRDepthDataFormat = \\\"ushort\\\" | \\\"float\\\";\\n\\n/**\\n * Options for Depth Sensing feature\\n */\\nexport interface IWebXRDepthSensingOptions {\\n    /**\\n     *  The desired depth sensing usage for the session\\n     */\\n    usagePreference: WebXRDepthUsage[];\\n    /**\\n     * The desired depth sensing data format for the session\\n     */\\n    dataFormatPreference: WebXRDepthDataFormat[];\\n\\n    /**\\n     * Depth sensing will be enabled on all materials per default, if the GPU variant is enabled.\\n     * If you just want to use the texture or the CPU variant instead set this to true.\\n     */\\n    disableDepthSensingOnMaterials?: boolean;\\n\\n    /**\\n     * If set to true the occluded pixels will not be discarded but the pixel color will be changed based on the occlusion factor\\n     * Enabling this will lead to worse performance but slightly better outcome.\\n     * It is possible we will change this in the future to look even better.\\n     */\\n    useToleranceFactorForDepthSensing?: boolean;\\n\\n    /**\\n     * If set to true the texture will be set to be used for visualization.\\n     * In this case it will probably NOT work correctly on the materials.\\n     * So be aware that, for the time being, you can only use one or the other.\\n     */\\n    prepareTextureForVisualization?: boolean;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Animation in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a basic animation in Babylon.js by defining an animation that slides a box along the x-axis. It sets up the animation with a frame rate and animation type, then configures it to loop continuously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_design.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst frameRate = 10;\n\nconst xSlide = new BABYLON.Animation(\"xSlide\", \"position.x\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n```\n\n----------------------------------------\n\nTITLE: Creating Box with MeshBuilder in Babylon.js\nDESCRIPTION: Creates a customizable box mesh using MeshBuilder with various options for size, colors, UV mapping, and orientation. The method allows creating both cubes and cuboids with detailed control over dimensions and appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/box.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Babylon.js Model Import Example\nDESCRIPTION: Complete example showing how to import a 3D model into a Babylon.js scene with camera and lighting setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_app.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Babylon Template</title>\n\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n\n      #renderCanvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n    </style>\n\n    <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n    <script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n    <script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script>\n  </head>\n\n  <body>\n    <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas>\n    <!-- touch-action=\"none\" for best results from PEP -->\n\n    <script>\n      const canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element\n      const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\n\n      // Add your code here matching the playground format\n      const createScene = function () {\n        const scene = new BABYLON.Scene(engine);\n\n        BABYLON.ImportMeshAsync(\"https://assets.babylonjs.com/meshes/box.babylon\");\n\n        const camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));\n        camera.attachControl(canvas, true);\n        const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(1, 1, 0));\n\n        return scene;\n      };\n\n      const scene = createScene(); //Call the createScene function\n\n      // Register a render loop to repeatedly render the scene\n      engine.runRenderLoop(function () {\n        scene.render();\n      });\n\n      // Watch for browser/canvas resize events\n      window.addEventListener(\"resize\", function () {\n        engine.resize();\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic WebXR Scene Setup with TypeScript\nDESCRIPTION: Comprehensive setup of a WebXR-enabled scene using Babylon.js with TypeScript and ES6 modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRDemos.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./style.css\";\n\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { Engine } from \"@babylonjs/core/Engines/engine.js\";\nimport { EnvironmentHelper } from \"@babylonjs/core/Helpers/environmentHelper.js\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder.js\";\nimport { Scene } from \"@babylonjs/core/scene.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { WebXRDefaultExperience } from \"@babylonjs/core/XR/webXRDefaultExperience.js\";\n\n// Required for EnvironmentHelper\nimport \"@babylonjs/core/Materials/Textures/Loaders\";\n\n// Enable GLTF/GLB loader for loading controller models from WebXR Input registry\nimport \"@babylonjs/loaders/glTF\";\n\n// Without this next import, an error message like this occurs loading controller models:\n//  Build of NodeMaterial failed\" error when loading controller model\n//  Uncaught (in promise) Build of NodeMaterial failed: input rgba from block\n//  FragmentOutput[FragmentOutputBlock] is not connected and is not optional.\nimport \"@babylonjs/core/Materials/Node/Blocks\";\n\n// Create a canvas element for rendering\nconst app = document.querySelector<HTMLDivElement>(\"#app\");\nconst canvas = document.createElement(\"canvas\");\napp?.appendChild(canvas);\n\n// Create engine and a scene\nconst babylonEngine = new Engine(canvas, true);\nconst scene = new Scene(babylonEngine);\n\n// Add a basic light\nnew HemisphericLight(\"light1\", new Vector3(0, 2, 0), scene);\n\n// Create a default environment (skybox, ground mesh, etc)\nconst envHelper = new EnvironmentHelper(\n  {\n    skyboxSize: 30,\n    groundColor: new Color3(0.5, 0.5, 0.5),\n  },\n  scene,\n);\n\n// Add a camera for the non-VR view in browser\nconst camera = new ArcRotateCamera(\"Camera\", -(Math.PI / 4) * 3, Math.PI / 4, 10, new Vector3(0, 0, 0), scene);\ncamera.attachControl(true);\n\n// Add a sphere to have something to look at\nconst sphereD = 1.0;\nconst sphere = MeshBuilder.CreateSphere(\"xSphere\", { segments: 16, diameter: sphereD }, scene);\nsphere.position.x = 0;\nsphere.position.y = sphereD * 2;\nsphere.position.z = 0;\nconst rMat = new StandardMaterial(\"matR\", scene);\nrMat.diffuseColor = new Color3(1.0, 0, 0);\nsphere.material = rMat;\n\n// Setup default WebXR experience\n// Use the enviroment floor to enable teleportation\nWebXRDefaultExperience.CreateAsync(scene, {\n  floorMeshes: [envHelper?.ground as Mesh],\n  optionalFeatures: true,\n});\n\n// Run render loop\nbabylonEngine.runRenderLoop(() => {\n  scene.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic WebXR Experience in Babylon.js\nDESCRIPTION: Initializes a basic WebXR experience in a Babylon.js scene using the default XR experience helper.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRDemos.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHelper = await scene.createDefaultXRExperienceAsync();\n```\n\n----------------------------------------\n\nTITLE: Combining positionFunction and vertexFunction in addShape for SPS - Babylon.js - JavaScript\nDESCRIPTION: Shows how to provide both\\_vertexFunction\\_and\\_positionFunction\\_during shape addition. Babylon.js will call both per-vertex and per-particle customization during construction. Useful for maximum customization of both geometry and instance properties simultaneously. Both functions must be previously defined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.addShape(box, 150, {\n  vertexFunction: myVertexFunction,\n  positionFunction: myPositionFunction,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ground with MeshBuilder.CreateGroundFromHeightMap in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a ground mesh using the modern `MeshBuilder` API in Babylon.js. It takes the ground's name, the URL of the height map image, and an options object containing parameters like width, height, subdivisions, min/max height, an optional `onReady` callback, and an `updatable` flag. The `scene` parameter is optional and defaults to the current scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/ground_hmap.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap(\"gdhm\", url_to_height_map, options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Creating a Torus Using MeshBuilder in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a torus mesh using BABYLON.MeshBuilder.CreateTorus(). It allows for specifying various options such as diameter, thickness, and tessellation to customize the torus shape.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/torus.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst torus = BABYLON.MeshBuilder.CreateTorus(\"torus\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Playing Character Animations Based on Keyboard Input in Babylon.js\nDESCRIPTION: Triggers different animations based on which keys are pressed. This code plays the walk animation for 'w', walk backward animation for 's', and a samba animation for 'b', ensuring animations only start when not already animating.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animatedCharacter.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (keydown) {\n  if (!animating) {\n    animating = true;\n    if (inputMap[\"s\"]) {\n      //Walk backwards\n      walkBackAnim.start(true, 1.0, walkBackAnim.from, walkBackAnim.to, false);\n    } else if (inputMap[\"b\"]) {\n      //Samba!\n      sambaAnim.start(true, 1.0, sambaAnim.from, sambaAnim.to, false);\n    } else {\n      //Walk\n      walkAnim.start(true, 1.0, walkAnim.from, walkAnim.to, false);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics in Scene\nDESCRIPTION: Initializes physics engine in the BabylonJS scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.enablePhysics();\n```\n\n----------------------------------------\n\nTITLE: Implementing the Main Render Loop with State Management in Babylon.js (TypeScript/JavaScript)\nDESCRIPTION: This asynchronous `_main` function sets up the application's core loop. It first ensures the initial start scene is ready by awaiting `_goToStart`. Then, it registers the main render loop using `this._engine.runRenderLoop`. Inside the loop, a switch statement checks the current application state (`this._state`) and calls `this._scene.render()` accordingly. This design allows different logic or scenes to be rendered based on the game's state (START, CUTSCENE, GAME, LOSE). It also includes an event listener to handle engine resizing when the browser window is resized.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nprivate async _main(): Promise<void> {\n    await this._goToStart();\n\n    // Register a render loop to repeatedly render the scene\n    this._engine.runRenderLoop(() => {\n        switch (this._state) {\n            case State.START:\n                this._scene.render();\n                break;\n            case State.CUTSCENE:\n                this._scene.render();\n                break;\n            case State.GAME:\n                this._scene.render();\n                break;\n            case State.LOSE:\n                this._scene.render();\n                break;\n            default: break;\n        }\n    });\n\n    //resize if the screen is resized/rotated\n    window.addEventListener('resize', () => {\n        this._engine.resize();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Instantiation of GreasedLineRibbon - Babylon.js (JavaScript)\nDESCRIPTION: Shows the minimum JavaScript code needed to create a GreasedLineRibbon mesh using the BABYLON.CreateGreasedLine builder with ribbonOptions. It assumes the 'points' variable is predefined and ribbonOptions is supplied, resulting in a ribbon geometry being added to the scene. The result is stored in the 'line' variable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_ribbon/greased_line_ribbon.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = BABYLON.CreateGreasedLine(\"name\", { points, ribbonOptions: { } })\n```\n\n----------------------------------------\n\nTITLE: Using Component Observables in WebXR\nDESCRIPTION: Shows how to use observables to monitor button state and axis value changes\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.onButtonStateChangedObservable.add((component) => {\n  // something changed, check the changes object\n});\n\ncomponent.onAxisValueChangedObservable.add((values) => {\n  console.log(values.x, values.y);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Math Operation Nodes - Babylon.js - Markdown/English\nDESCRIPTION: Documents the full set of standard math operation nodes in Babylon.js node materials, specifying operators (Add, Divide, Max, Min, Mod, Multiply, Negate, OneMinus, Reciprocal, Scale, Sign, Sqrt, Subtract) along with their compatible types, required inputs, and variety of outputs depending on incoming data. Each operation is modularly defined for flexible inclusion within visual node graphs, with type handling for common scalar and vector formats.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/availableNodeBlocks.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## Math: Standard\\n\\n### Add\\n\\nAdds the left and right inputs of the same type together.\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Divide\\n\\nDivides the left input by the right input of the same type.\\n\\n        -   Inputs:\\n            -   left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n            -   right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n        -   Outputs:\\n            -   output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Max\\n\\nOutputs the largest value between the left and right inputs of the same type.\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Min\\n\\nOutputs the smallest value between the left and right inputs of the same type.\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Mod\\n\\nOutputs the value of the left input modulo the right input\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Multiply\\n\\nMultiplies the left and right inputs of the same type together.\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Negate\\n\\nMultiplies the input by -1.\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### OneMinus\\n\\nSubtracts each channel of the input value from 1 (1 - input).\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Reciprocal\\n\\nQuotient of 1 divided by the input.\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Scale\\n\\nMultiplies the input channels by a float factor.\\n\\n- Inputs:\\n  - Input: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - Factor: Float\\n- Output:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Sign\\n\\nReturns 1 if the input is positive, 0 if input is equal to 0, or -1 if the input is negative.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Sqrt\\n\\nOutputs the square root of the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Subtract\\n\\nSubtracts the right input from the left input of the same type.\\n\\n- Inputs:\\n  - left: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Bone Rotation in Babylon.js\nDESCRIPTION: Shows how to set a bone to a specific rotation using the setAxisAngle method. This function takes the axis, angle, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbone.setAxisAngle(axis, angle, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button in Babylon.js GUI\nDESCRIPTION: This snippet demonstrates how to create a custom button by manually adding children to the button. It creates a function that builds an ImageButton with text and an icon.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.GUI.Button.CreateMyCustomButton = function (name, text, imageUrl) {\n  const result = new BABYLON.GUI.Button(name);\n\n  // Adding text\n  const textBlock = new BABYLON.GUI.TextBlock(name + \"_button\", text);\n  textBlock.textWrapping = true;\n  textBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\n  textBlock.paddingLeft = \"20%\";\n  result.addControl(textBlock);\n\n  // Adding image\n  const iconImage = new BABYLON.GUI.Image(name + \"_icon\", imageUrl);\n  iconImage.width = \"20%\";\n  iconImage.stretch = BABYLON.GUI.Image.STRETCH_UNIFORM;\n  iconImage.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n  result.addControl(iconImage);\n\n  return result;\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Physics Scene Setup in Babylon.js\nDESCRIPTION: A complete example showing how to set up a physics-enabled scene with a falling sphere and ground plane using Havok physics\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingPhysicsEngine.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = function () {\n  var scene = new BABYLON.Scene(engine);\n  var camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n  camera.setTarget(BABYLON.Vector3.Zero());\n  camera.attachControl(canvas, true);\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n  light.intensity = 0.7;\n  var sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\n  sphere.position.y = 4;\n  var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width: 10, height: 10}, scene);\n  var hk = new BABYLON.HavokPlugin();\n  scene.enablePhysics(new BABYLON.Vector3(0, -9.8, 0), hk);\n  var sphereAggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1, restitution:0.75}, scene);\n  var groundAggregate = new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Sphere with MeshBuilder in Babylon.js (JavaScript)\nDESCRIPTION: Provides a concise example of creating a standard sphere mesh using MeshBuilder in Babylon.js. The code requires the mesh's name, the options object (here shown with segments and diameter), and the optional scene parameter. For non-spherical ellipsoid shapes, additional scaling is required after creation. This snippet presumes BABYLON and a scene are available in the executing scope. The output is a sphere mesh attached to the Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/sphere.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { segments, diameter }, scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Spot Light in Babylon.js\nDESCRIPTION: Creates a new SpotLight instance. Defined by a position, direction, angle (cone size in radians), exponent (decay speed), and the scene. It emits light in a cone shape.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst light = new BABYLON.SpotLight(\"spotLight\", new BABYLON.Vector3(0, 30, -10), new BABYLON.Vector3(0, -1, 0), Math.PI / 3, 2, scene);\n```\n```\n\n----------------------------------------\n\nTITLE: Generic Syntax for Adding Single Value Gradient in Babylon.js\nDESCRIPTION: Illustrates the general method signature for adding a gradient point with a single value for a specific particle property. `<PROPERTY>` should be replaced with the target property name (e.g., Size, Color). `fraction_of_time_period_elapsed` is a value between 0 (start) and 1 (end) of the relevant time period (particle lifetime or system duration). `property_value` is the desired value for the property at that time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.add < PROPERTY > Gradient(fraction_of_time_period_elapsed, property_value); //set a value at given time point\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Classes from Babylon.js Core - JavaScript\nDESCRIPTION: Demonstrates importing only certain classes (Engine, Scene) from the babylonjs npm package using ES6 destructuring syntax. Requires project ES6 import support and the babylonjs package installed. This allows more targeted importing for potentially improved tree shaking/build times.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Engine, Scene } from 'babylonjs';\n```\n\n----------------------------------------\n\nTITLE: Setting Material Colors in Babylon.js\nDESCRIPTION: Configures a material with diffuse, specular, emissive, and ambient colors using BABYLON.Color3. Each color property affects how the material reacts to different types of lighting in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materials_introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMaterial = new BABYLON.StandardMaterial(\"myMaterial\", scene);\n\nmyMaterial.diffuseColor = new BABYLON.Color3(1, 0, 1);\nmyMaterial.specularColor = new BABYLON.Color3(0.5, 0.6, 0.87);\nmyMaterial.emissiveColor = new BABYLON.Color3(1, 1, 1);\nmyMaterial.ambientColor = new BABYLON.Color3(0.23, 0.98, 0.53);\n\nmesh.material = myMaterial;\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js via npm - Bash\nDESCRIPTION: Demonstrates the command to install the Babylon.js package via npm into your project, saving it as a dependency. No prerequisites other than having Node.js and npm installed. Outputs the library and its type definitions to your node_modules folder.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs\n```\n\n----------------------------------------\n\nTITLE: Constructing and Initializing an ArcRotateCamera in Babylon.js (JavaScript)\nDESCRIPTION: This snippet illustrates the creation of a `BABYLON.ArcRotateCamera`, which orbits a target point. It's initialized with a name, rotation angles (`alpha`, `beta`), distance (`radius`), target position (`BABYLON.Vector3`), and the scene. `setPosition` provides an alternative way to set the camera's location, overriding `alpha`, `beta`, and `radius`. `attachControl` enables user input.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters: name, alpha, beta, radius, target position, scene\nconst camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0, 10, new BABYLON.Vector3(0, 0, 0), scene);\n\n// Positions the camera overwriting alpha, beta, radius\ncamera.setPosition(new BABYLON.Vector3(0, 0, 20));\n\n// This attaches the camera to the canvas\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Collision Detection in BabylonJS\nDESCRIPTION: Sets up player collision detection for platform destination and world ground. Includes win condition checking and position reset functionality when player falls through the world.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/collisionsTriggers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.mesh.actionManager.registerAction(\n    new ExecuteCodeAction(\n        {\n            trigger: ActionManager.OnIntersectionEnterTrigger,\n            parameter: this.scene.getMeshByName(\"destination\"),\n        },\n        () => {\n            if (this.lanternsLit == 22) {\n                this.win = true;\n                this._yTilt.rotation = new Vector3(5.689773361501514, 0.23736477827122882, 0);\n                this._yTilt.position = new Vector3(0, 6, 0);\n                this.camera.position.y = 17;\n            }\n        },\n    ),\n);\n\nthis.mesh.actionManager.registerAction(\n    new ExecuteCodeAction(\n        {\n            trigger: ActionManager.OnIntersectionEnterTrigger,\n            parameter: this.scene.getMeshByName(\"ground\"),\n        },\n        () => {\n            this.mesh.position.copyFrom(this._lastGroundPos);\n        },\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js and GUI Dependencies - Bash\nDESCRIPTION: This command installs the main Babylon.js package along with babylonjs-loaders and babylonjs-gui libraries, all as regular dependencies. Required for Babylon.js rendering, advanced model loader support, and GUI components. Run in the root folder to add them to your project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-loaders babylonjs-gui\n```\n\n----------------------------------------\n\nTITLE: Creating WebXR Basic Experience Helper in JavaScript\nDESCRIPTION: Demonstrates how to create a WebXR Basic Experience Helper asynchronously and handle potential errors if XR is not supported.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    const xrHelper = await WebXRExperienceHelper.CreateAsync(scene);\n} catch (e) {\n    // no XR support\n}\n\n// or:\nWebXRExperienceHelper.CreateAsync(scene).then((xrHelper) => {\n    // great success\n}, (error) => {\n    // no xr...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Meshes using MeshBuilder in Babylon.js\nDESCRIPTION: This snippet demonstrates the current recommended way to create a mesh in Babylon.js using the MeshBuilder class. It takes a mesh type, name, options object, and an optional scene parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = BABYLON.MeshBuilder.Create<MeshType>(name, options, scene);\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events in Babylon.js\nDESCRIPTION: This snippet demonstrates how to use the onKeyboardObservable to handle keyboard events in a Babylon.js scene. It logs key down and key up events with their corresponding key or code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/interactWithScenes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onKeyboardObservable.add((kbInfo) => {\n  switch (kbInfo.type) {\n    case BABYLON.KeyboardEventTypes.KEYDOWN:\n      console.log(\"KEY DOWN: \", kbInfo.event.key);\n      break;\n    case BABYLON.KeyboardEventTypes.KEYUP:\n      console.log(\"KEY UP: \", kbInfo.event.code);\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Realistic Gold Material with PBR in Babylon.js\nDESCRIPTION: This code creates a realistic golden material by combining high metallic value with moderate roughness and an environment map for reflections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npbr.baseColor = new BABYLON.Color3(1.0, 0.766, 0.336);\npbr.metallic = 1.0;\npbr.roughness = 0.4;\npbr.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\"/textures/environment.dds\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Skybox in Babylon.js\nDESCRIPTION: Demonstrates the simplified method of creating a skybox using scene helpers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nenvTexture = new BABYLON.CubeTexture(\"/assets/textures/SpecularHDR.dds\", scene);\nscene.createDefaultSkybox(envTexture, true, 1000);\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Babylon.js Scene\nDESCRIPTION: This HTML snippet sets up the basic structure for a Babylon.js scene. It includes a canvas element for rendering and links to the Babylon.js library. The template also contains inline CSS for full-screen rendering and touch input handling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/templates/basicTemplates/basicHTML.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <title>Babylon Template</title>\n\n        <style>\n            html, body {\n                overflow: hidden;\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }\n            #renderCanvas {\n                width: 100%;\n                height: 100%;\n                touch-action: none;\n            }\n        </style>\n\n        <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n\n    </head>\n\n   <body>\n\n\t<canvas id=\"renderCanvas\"></canvas>\n\n\t<script>\n        // JavaScript code here\n\t</script>\n\n   </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Scene Setup in TypeScript\nDESCRIPTION: TypeScript implementation of a basic BabylonJS scene with a sphere and ground plane using grid material. Demonstrates proper module imports, scene setup, and rendering loop configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreeCamera } from \"@babylonjs/core/Cameras/freeCamera.js\";\nimport { Engine } from \"@babylonjs/core/Engines/engine.js\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight.js\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder.js\";\nimport { CreateSphere } from \"@babylonjs/core/Meshes/Builders/sphereBuilder.js\";\nimport { Scene } from \"@babylonjs/core/scene.js\";\n\nimport { GridMaterial } from \"@babylonjs/materials/grid/gridMaterial.js\";\n\nconst canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\nconst engine = new Engine(canvas);\nconst scene = new Scene(engine);\nconst camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\ncamera.setTarget(Vector3.Zero());\ncamera.attachControl(canvas, true);\nconst light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\nlight.intensity = 0.7;\nconst material = new GridMaterial(\"grid\", scene);\nconst sphere = CreateSphere('sphere1', { segments: 16, diameter: 2 }, scene);\nsphere.position.y = 2;\nsphere.material = material;\nconst ground = CreateGround('ground1', { width: 6, height: 6, subdivisions: 2 }, scene);\nground.material = material;\nengine.runRenderLoop(() => {\n  scene.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Real-Time Lattice Animation and Deformation - Babylon.js - JavaScript\nDESCRIPTION: Provides a comprehensive example of animating a lattice and dynamically updating a mesh. Demonstrates lattice instantiation, control point modifications, and per-frame deformation with position updates. Uses a separate buffer to avoid altering original mesh data. This example requires a mesh, lattice, Float32Array for updates, and a render loop handler.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n var sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\nconst positions = sphere.getVerticesData(BABYLON.VertexBuffer.PositionKind);\nconst updates = new Float32Array(positions.length);\n\n// lattice\nvar lattice = new BABYLON.Lattice({ size: new BABYLON.Vector3(2, 2, 2), position: BABYLON.Vector3.Zero()});\n\n// Make it pointy\nfor (x = 0; x < lattice.resolutionX; x++) {\n    for (z = 0; z < lattice.resolutionZ; z++) {\n        const control = lattice.data[x][lattice.resolutionY - 1][z];\n        control.y += 1;\n    }\n}\n\n// Shrink that belly!\nfor (x = 0; x < lattice.resolutionX; x++) {\n    for (z = 0; z < lattice.resolutionZ; z++) {\n        const control = lattice.data[x][1][z];\n        control.x = 0;\n        control.z = 0;\n    }\n}\n\nlet offset = -2;\nscene.onBeforeRenderObservable.add(() => {\n    lattice.position.x = offset;\n    offset += 0.01;\n\n    lattice.deform(positions, updates);\n    sphere.setVerticesData(BABYLON.VertexBuffer.PositionKind, updates, true);\n    sphere.createNormals(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Individual Vertex Normal Variations in Babylon.js\nDESCRIPTION: Presents a Babylon.js Playground example showcasing the variation of individual vertex normals. This helps visualize how changing normal vectors influence the lighting calculations and appearance on a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/vertexNormals.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Babylon.js Playground Example\n// ID: #VKBJN#19\n// Title: Showing Normals Varying\n// Description: Simple example of showing vertex normal variation.\n// (Code loaded dynamically in the Babylon.js Playground)\n```\n\n----------------------------------------\n\nTITLE: Shape Cast Query Implementation\nDESCRIPTION: Implementation of shape cast query to determine collision points when a shape moves from start to end position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhk.shapeCast({\n    shape: shape1,\n    rotation: mesh1.rotationQuaternion,\n    startPosition: castStartPosition,\n    endPosition: castEndPosition,\n    shouldHitTriggers: false,\n}, shapeLocalResult, hitWorldResult);\n```\n\n----------------------------------------\n\nTITLE: Defining the Player Class in TypeScript\nDESCRIPTION: Defines the `Player` class in TypeScript (`characterController.ts`), extending `TransformNode`. This class encapsulates player-related logic, including its mesh, camera, and input handling. The constructor initializes the player, sets up its camera, assigns the provided mesh assets, adds the mesh to a shadow generator, and stores the input controller.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport class Player extends TransformNode {\n    public camera;\n    public scene: Scene;\n    private _input;\n\n    //Player\n    public mesh: Mesh; //outer collisionbox of player\n\n    constructor(assets, scene: Scene, shadowGenerator: ShadowGenerator, input?) {\n        super(\"player\", scene);\n        this.scene = scene;\n        this._setupPlayerCamera();\n\n        this.mesh = assets.mesh;\n        this.mesh.parent = this;\n\n        shadowGenerator.addShadowCaster(assets.mesh); //the player mesh will cast shadows\n\n        this._input = input; //inputs we will get from inputController.ts\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Webpack Configuration with Plugins\nDESCRIPTION: Extended Webpack configuration including HTML plugin and dev server setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gettingSetUp.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst appDirectory = fs.realpathSync(process.cwd());\n\nmodule.exports = {\n    entry: path.resolve(appDirectory, \"src/app.ts\"),\n    output: {\n        filename: \"js/bundleName.js\",\n        clean: true,\n    },\n    resolve: {\n        extensions: [\".tsx\", \".ts\", \".js\"],\n    },\n    devServer: {\n        host: \"0.0.0.0\",\n        port: 8080,\n        static: path.resolve(appDirectory, \"public\"),\n        hot: true,\n        devMiddleware: {\n            publicPath: \"/\",\n        }\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.tsx?$/,\n                use: \"ts-loader\",\n                exclude: /node_modules/,\n            },\n        ],\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            inject: true,\n            template: path.resolve(appDirectory, \"public/index.html\"),\n        })\n    ],\n    mode: \"development\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Positioning a Sphere in Babylon.js Playground (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a basic sphere mesh using the Babylon.js MeshBuilder and position it in the 3D scene. The sphere is assigned a diameter and number of segments, and then positioned so that it rests above the ground plane. Dependencies include the Babylon.js library and an initialized scene object. 'diameter', 'segments', and 'scene' are the key parameters affecting the sphere's appearance and placement. The output is a newly created, visible, and positioned sphere mesh within the Babylon scene. This is typically used as an initial geometry setup before further customization or interaction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/journey/theFirstStep.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Our built-in 'sphere' shape.\\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\\n\\n// Move the sphere upward 1/2 its height\\nsphere.position.y = 1;\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Material in Babylon.js\nDESCRIPTION: Creates a new StandardMaterial instance with a unique name in the specified scene. This is the basic step for setting up a material before applying colors or textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materials_introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMaterial = new BABYLON.StandardMaterial(\"myMaterial\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tube with Mesh.CreateTube in Babylon.js\nDESCRIPTION: This snippet shows how to create a tube using the Mesh.CreateTube method in Babylon.js. It includes both basic and advanced parameter options for tube creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/tube.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet tube = BABYLON.Mesh.CreateTube(\"tube\", path, radius, tesselation, optional radiusFunction, cap, scene);\nlet tube = BABYLON.Mesh.CreateTube(\"tube\", path, radius, tesselation, optional radiusFunction, cap, scene, updatable, sideOrientation, instance); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component with Babylon.js Scene\nDESCRIPTION: A complete React component example that uses the SceneComponent to create a 3D scene with a camera, light, rotating box, and ground. Demonstrates both scene initialization and frame-by-frame rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_ReactJS.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder } from \"@babylonjs/core\";\nimport SceneComponent from \"./SceneComponent\"; // uses above component in same directory\n// import SceneComponent from 'babylonjs-hook'; // if you install 'babylonjs-hook' NPM.\nimport \"./App.css\";\n\nlet box;\n\nconst onSceneReady = (scene) => {\n  // This creates and positions a free camera (non-mesh)\n  const camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(Vector3.Zero());\n\n  const canvas = scene.getEngine().getRenderingCanvas();\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  // Our built-in 'box' shape.\n  box = MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\n\n  // Move the box upward 1/2 its height\n  box.position.y = 1;\n\n  // Our built-in 'ground' shape.\n  MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n};\n\n/**\n * Will run on every frame render.  We are spinning the box on y-axis.\n */\nconst onRender = (scene) => {\n  if (box !== undefined) {\n    const deltaTimeInMillis = scene.getEngine().getDeltaTime();\n\n    const rpm = 10;\n    box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n  }\n};\n\nexport default () => (\n  <div>\n    <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id=\"my-canvas\" />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics Engine in Babylon.js\nDESCRIPTION: Demonstrates how to enable physics in a Babylon.js scene using the Havok physics plugin with gravity settings\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingPhysicsEngine.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = new BABYLON.Scene(engine);\nvar gravityVector = new BABYLON.Vector3(0, -9.81, 0);\nvar physicsPlugin = new BABYLON.HavokPlugin();\nscene.enablePhysics(gravityVector, physicsPlugin);\n```\n\n----------------------------------------\n\nTITLE: Implementing On-Demand Fade Transition Post-Process in Babylon.js\nDESCRIPTION: Creates a fade transition post-process effect that is only applied when transitioning between scenes rather than being active at all times. This optimization registers a custom shader and applies it only during scene transitions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nEffect.RegisterShader(\"fade\", \"precision highp float;\" + \"varying vec2 vUV;\" + \"uniform sampler2D textureSampler; \" + \"uniform float fadeLevel; \" + \"void main(void){\" + \"vec4 baseColor = texture2D(textureSampler, vUV) * fadeLevel;\" + \"baseColor.a = 1.0;\" + \"gl_FragColor = baseColor;\" + \"}\");\n\nlet fadeLevel = 1.0;\nthis._transition = false;\nstartBtn.onPointerDownObservable.add(() => {\n    //fade screen\n    const postProcess = new PostProcess(\"Fade\", \"fade\", [\"fadeLevel\"], null, 1.0, camera);\n    postProcess.onApply = (effect) => {\n        effect.setFloat(\"fadeLevel\", fadeLevel);\n    };\n    this._transition = true;\n    //...other stuff done when startBtn is pressed\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete WebXR Scene with Floor Meshes\nDESCRIPTION: This snippet creates a complete Babylon.js scene with WebXR support and floor mesh configuration. It includes a basic scene setup with a sphere, lighting, and environment, then adds WebXR functionality with the ground designated as a floor mesh for proper movement in VR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = async function () {\n  var scene = new BABYLON.Scene(engine);\n  var camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n  camera.setTarget(BABYLON.Vector3.Zero());\n  camera.attachControl(canvas, true);\n  var light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\n  light.intensity = 0.7;\n  var sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\n  sphere.position.y = 1;\n\n  const env = scene.createDefaultEnvironment();\n\n  // here we add XR support\n  const xr = await scene.createDefaultXRExperienceAsync({\n    floorMeshes: [env.ground],\n  });\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic WebXR Setup with Single Line of Code\nDESCRIPTION: This snippet demonstrates the simplest way to enable WebXR in a Babylon.js scene using a single line of code. This creates a default VR immersive experience with session initialization, input sources, camera setup, and teleportation capabilities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst xr = scene.createDefaultXRExperienceAsync();\n```\n\n----------------------------------------\n\nTITLE: Linking to a Babylon.js Playground for Sprite Action Managers (Markdown)\nDESCRIPTION: This snippet uses a custom `<Playground>` tag, likely processed by a documentation generator, to embed or link to a specific Babylon.js Playground example (#9RUHH#5). The example demonstrates attaching an action manager to a sprite, showcasing a feature available since Babylon.js 2.3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<Playground id=\"#9RUHH#5\" title=\"Sprite Action Manager\" description=\"Simple example of a sprite with an attached action manager.\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Havok Physics with Async/Await\nDESCRIPTION: Async function to initialize the Havok physics engine using ES modules\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingHavok.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport HavokPhysics from \"@babylonjs/havok\";\n\nasync function getInitializedHavok() {\n  return await HavokPhysics();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Anchor at Arbitrary Position and Rotation - JavaScript\nDESCRIPTION: Shows how to asynchronously add an anchor at a specific position and rotation in the AR scene. anchorSystem.addAnchorAtPositionAndRotationAsync is used; it takes position and rotationQuaternion. Returns a promise resolving to a native XRAnchor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { position, rotationQuaternion } = anyRandomMesh;\\nconst anchorPromise = anchorSystem.addAnchorAtPositionAndRotationAsync(position, rotationQuaternion);\n```\n\n----------------------------------------\n\nTITLE: Applying an Animation to a Mesh in Babylon.js\nDESCRIPTION: This snippet shows how to apply a previously created animation to a mesh (in this case, a box) in Babylon.js by pushing the animation to the mesh's animations array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_design.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbox.animations.push(xSlide);\n```\n\n----------------------------------------\n\nTITLE: Enabling Sub-Surface Scattering\nDESCRIPTION: Shows how to enable sub-surface scattering effects in a PBR material for realistic light diffusion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\nscene.enableSubSurfaceForPrePass().metersPerUnit = 0.01;\n\npbr.metallic = 0;\npbr.roughness = 0.2;\n\npbr.subSurface.isScatteringEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Loading Screen for AssetsManager in JavaScript\nDESCRIPTION: This code snippet demonstrates how to prevent the default Babylon.js loading screen from appearing when using the `AssetsManager` to load assets. Setting the `useDefaultLoadingScreen` property of an `AssetsManager` instance to `false` disables this behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nassetsManager.useDefaultLoadingScreen = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultRenderingPipeline in BabylonJS\nDESCRIPTION: Complete example demonstrating how to set up and configure a DefaultRenderingPipeline instance with various post-processing effects including HDR, MSAA, image processing, bloom, chromatic aberration, depth of field, FXAA, glow layer, grain, and sharpen effects. Each effect includes default values and configuration options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n    // https://doc.babylonjs.com/api/classes/babylon.defaultrenderingpipeline\n    var defaultPipeline = new BABYLON.DefaultRenderingPipeline(\n        \"DefaultRenderingPipeline\",\n        true, // is HDR?\n        scene,\n        scene.cameras\n    );\n    if (defaultPipeline.isSupported) {\n        /* MSAA */\n        defaultPipeline.samples = 1; // 1 by default\n        /* imageProcessing */\n        defaultPipeline.imageProcessingEnabled = true; //true by default\n        if (defaultPipeline.imageProcessingEnabled) {\n            defaultPipeline.imageProcessing.contrast = 1; // 1 by default\n            defaultPipeline.imageProcessing.exposure = 1; // 1 by default\n            /* color grading */\n            defaultPipeline.imageProcessing.colorGradingEnabled = false; // false by default\n            if (defaultPipeline.imageProcessing.colorGradingEnabled) {\n                // using .3dl (best) :\n                defaultPipeline.imageProcessing.colorGradingTexture = new BABYLON.ColorGradingTexture(\"textures/LateSunset.3dl\", scene);\n                // using .png :\n                /*\n                var colorGradingTexture = new BABYLON.Texture(\"textures/colorGrade-highContrast.png\", scene, true, false);\n                colorGradingTexture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\n                colorGradingTexture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;                \n                defaultPipeline.imageProcessing.colorGradingTexture = colorGradingTexture;\n                defaultPipeline.imageProcessing.colorGradingWithGreenDepth = false;\n                */\n            }\n            /* color curves */\n            defaultPipeline.imageProcessing.colorCurvesEnabled = false; // false by default\n            if (defaultPipeline.imageProcessing.colorCurvesEnabled) {\n                var curve = new BABYLON.ColorCurves();\n                curve.globalDensity = 0; // 0 by default\n                curve.globalExposure = 0; // 0 by default\n                curve.globalHue = 30; // 30 by default\n                curve.globalSaturation = 0; // 0 by default\n                curve.highlightsDensity = 0; // 0 by default\n                curve.highlightsExposure = 0; // 0 by default\n                curve.highlightsHue = 30; // 30 by default\n                curve.highlightsSaturation = 0; // 0 by default\n                curve.midtonesDensity = 0; // 0 by default\n                curve.midtonesExposure = 0; // 0 by default\n                curve.midtonesHue = 30; // 30 by default\n                curve.midtonesSaturation = 0; // 0 by default\n                curve.shadowsDensity = 0; // 0 by default\n                curve.shadowsExposure = 0; // 0 by default\n                curve.shadowsHue = 30; // 30 by default\n                curve.shadowsDensity = 80;\n                curve.shadowsSaturation = 0; // 0 by default;\n                defaultPipeline.imageProcessing.colorCurves = curve;\n            }\n        }\n        /* bloom */\n        defaultPipeline.bloomEnabled = false; // false by default\n        if (defaultPipeline.bloomEnabled) {\n            defaultPipeline.bloomKernel = 64; // 64 by default\n            defaultPipeline.bloomScale = 0.5; // 0.5 by default\n            defaultPipeline.bloomThreshold = 0.9; // 0.9 by default\n            defaultPipeline.bloomWeight = 0.15; // 0.15 by default\n        }\n        /* chromatic abberation */\n        defaultPipeline.chromaticAberrationEnabled = false; // false by default\n        if (defaultPipeline.chromaticAberrationEnabled) {\n            defaultPipeline.chromaticAberration.aberrationAmount = 30; // 30 by default\n            defaultPipeline.chromaticAberration.adaptScaleToCurrentViewport = false; // false by default\n            defaultPipeline.chromaticAberration.alphaMode = 0; // 0 by default\n            defaultPipeline.chromaticAberration.alwaysForcePOT = false; // false by default\n            defaultPipeline.chromaticAberration.enablePixelPerfectMode = false; // false by default\n            defaultPipeline.chromaticAberration.forceFullscreenViewport = true; // true by default\n        }\n        /* DOF */\n        defaultPipeline.depthOfFieldEnabled = false; // false by default\n        if (defaultPipeline.depthOfFieldEnabled && defaultPipeline.depthOfField.isSupported) {\n            defaultPipeline.depthOfFieldBlurLevel = 0; // 0 by default\n            defaultPipeline.depthOfField.fStop = 1.4; // 1.4 by default\n            defaultPipeline.depthOfField.focalLength = 50; // 50 by default, mm\n            defaultPipeline.depthOfField.focusDistance = 2000; // 2000 by default, mm\n            defaultPipeline.depthOfField.lensSize = 50; // 50 by default\n        }\n        /* FXAA */\n        defaultPipeline.fxaaEnabled = false; // false by default\n        if (defaultPipeline.fxaaEnabled) {\n            defaultPipeline.fxaa.samples = 1; // 1 by default\n            defaultPipeline.fxaa.adaptScaleToCurrentViewport = false; // false by default\n        }\n        /* glowLayer */\n        defaultPipeline.glowLayerEnabled = false;\n        if (defaultPipeline.glowLayerEnabled) {\n            defaultPipeline.glowLayer.blurKernelSize = 16; // 16 by default\n            defaultPipeline.glowLayer.intensity = 1; // 1 by default\n        }\n        /* grain */\n        defaultPipeline.grainEnabled = false;\n        if (defaultPipeline.grainEnabled) {\n            defaultPipeline.grain.adaptScaleToCurrentViewport = false; // false by default\n            defaultPipeline.grain.animated = false; // false by default\n            defaultPipeline.grain.intensity = 30; // 30 by default\n        }\n        /* sharpen */\n        defaultPipeline.sharpenEnabled = false;\n        if (defaultPipeline.sharpenEnabled) {\n            defaultPipeline.sharpen.adaptScaleToCurrentViewport = false; // false by default\n            defaultPipeline.sharpen.edgeAmount = 0.3; // 0.3 by default\n            defaultPipeline.sharpen.colorAmount = 1; // 1 by default\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Cylinder Mesh in Babylon.js\nDESCRIPTION: Creates a basic cylinder mesh with specific height and diameter parameters. Demonstrates the core parameters for cylinder creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/cylinder.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cylinder = BABYLON.MeshBuilder.CreateCylinder(\"cylinder\", {height, diameterTop, diameterBottom, tessellation, subdivisions}, scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering a Sphere Scene - JavaScript\nDESCRIPTION: This TypeScript code initializes a Babylon.js engine and scene, adds a camera, light, and a sphere mesh, and starts the render loop. The scene setup is organized in a createScene function. Dependencies must be imported for Engine, Scene, ArcRotateCamera, HemisphericLight, Vector3, Mesh & MeshBuilder, either via namespace or named ES6 imports. Place this in 'index.ts' and ensure the correct import statements precede it for the classes used.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas: any = document.getElementById(\"renderCanvas\");\\nvar engine: Engine = new Engine(canvas, true);\\n\\nfunction createScene(): Scene {\\n    var scene: Scene = new Scene(engine);\\n\\n    var camera: ArcRotateCamera = new ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), scene);\\n    camera.attachControl(canvas, true);\\n\\n    var light1: HemisphericLight = new HemisphericLight(\"light1\", new Vector3(1, 1, 0), scene);\\n\\n    var sphere: Mesh = MeshBuilder.CreateSphere(\"sphere\", { diameter: 1 }, scene);\\n\\n    return scene;\\n}\\n\\nvar scene: Scene = createScene();\\n\\nengine.runRenderLoop(() => {\\n    scene.render();\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Babylon.js Preview Loaders via CDN (HTML)\nDESCRIPTION: Adds Babylon.js core and loaders scripts to an HTML page using preview CDN links. These are useful for testing changes to loaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://preview.babylonjs.com/babylon.js\"></script>\n<script src=\"https://preview.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Updates with freezeNormals in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to improve performance when updating meshes frequently (e.g., in the render loop) by skipping the recalculation of normals. Call the freezeNormals() method on the mesh instance after creation. This is suitable for meshes that don't require accurate lighting reflections (e.g., using emissive color only). The example uses CreateTube but applies to other updatable meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst tube = BABYLON.Mesh.CreateTube(\"tube\", path, 3, 12, null, BABYLON.Mesh.NO_CAP, scene, true);\ntube.freezeNormals();\n// path update here ...\ntube = BABYLON.Mesh.CreateTube(null, path, 3, null, null, null, null, null, null, tube);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Custom Observable with socket.io - JavaScript\nDESCRIPTION: Demonstrates how to create a custom Observable instance and integrate it with the socket.io-client library to trigger Babylon.js GUI updates based on connection events. Requires Babylon.js and socket.io-client as dependencies. The observable is manually notified when the socket connects, and a GUI text block is updated by an added observer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { io } from \"socket.io-client\";\n\nconst socket = io(\"/admin\");\n\nconst onConnectObservable = new Observable();\nconst text1 = new BABYLON.GUI.TextBlock();\n\nsocket.on(\"connect\", () => {\n  onConnectObservable.notifyObservers();\n});\n\nonConnectObservable.add(() => {\n  text1.text = \"Connected\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sphere Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a sphere particle emitter using `particleSystem.createSphereEmitter`, specifying the radius as a number. Particles are emitted outwards from the sphere's surface along its normals. Requires an existing `particleSystem` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sphereEmitter = particleSystem.createSphereEmitter(1.2);\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Values (Float, Vector3) on ShaderMaterial in Babylon.js\nDESCRIPTION: Shows how to pass non-sampler uniform values to an existing `ShaderMaterial` instance (`myShaderMaterial`). It uses `setFloat` to assign a numeric value to the \"time\" uniform and `setVector3` to assign a `BABYLON.Vector3.Zero()` value to the \"direction\" uniform. The specific `set...` method depends on the uniform's data type declared in the shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderMaterial.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyShaderMaterial.setFloat(\"time\", 0);\nmyShaderMaterial.setVector3(\"direction\", BABYLON.Vector3.Zero());\n```\n\n----------------------------------------\n\nTITLE: Creating Blank Particle System with Snippet Server - Babylon.js JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new blank particle system using the special \\\"_BLANK\\\" snippet ID. It provides a starter system for further customization via Babylon.js Inspector, which can then be saved and versioned on the Snippet Server. Useful for bootstrapping interactive editing workflows. Requires pre-existing scene and emitter mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/particles_and_nme.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ParticleHelper.CreateFromSnippetAsync(\"_BLANK\", scene, false).then((system) => {\n  system.emitter = sphere;\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Babylon.js Camera Types\nDESCRIPTION: A comprehensive list of camera types available in Babylon.js with descriptions of their functionality and use cases. Includes details about first-person, orbital, follow, anaglyph, device-oriented, virtual joystick, and VR cameras.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* _Universal Camera_ - the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. With this camera you can check for collisions and apply gravity.\n* _Arc Rotate Camera_ - which acts like a satellite in orbit around a target and always points towards the target position.\n* _Follow Camera_ - this takes a mesh as a target and follows it as it moves. Both a free camera version _followCamera_ and an arc rotate version _arcFollowCamera_ are available.\n* _Anaglyph Camera_ - extending the use of the Universal and Arc Rotate Cameras for use with red and cyan 3D glasses.\n* _Device Orientation Cameras_ - this is a designed to react to a device being tilted forward or back and left or right.\n* _Virtual Joysticks Camera_ - on-screen 2D graphics that are used to control the camera or other scene items.\n\n* _Virtual Reality Camera_ a range of cameras for VR devices\n```\n\n----------------------------------------\n\nTITLE: Initializing a PhotoDome in Babylon.js (JavaScript)\nDESCRIPTION: Creates a PhotoDome instance. Requires a name, the URL of an equirectangular image source, an options object (which can be empty but is required), and the scene object. Available options include `resolution` (default 32), `size` (default ~half far clip plane), and `useDirectMapping` (default true).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360PhotoDome.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nphotoDome = new BABYLON.PhotoDome(\"testdome\", url, {<options>}, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Advanced Colorify Material Plugin with Uniforms in Babylon.js\nDESCRIPTION: Demonstrates a more complex material plugin with enable/disable controls and uniform handling. The plugin multiplies the final color by a customizable color value and shows how to modify specific parts of shader code using regex patterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materialPlugins.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass ColorifyPluginMaterial extends BABYLON.MaterialPluginBase {\n  // any local variable definitions of the plugin instance.\n  color = new BABYLON.Color3(1.0, 0.0, 0.0);\n\n  // we can add an enabled flag to be able to toggle the plugin on and off.\n  get isEnabled() {\n    return this._isEnabled;\n  }\n\n  set isEnabled(enabled) {\n    if (this._isEnabled === enabled) {\n      return;\n    }\n    this._isEnabled = enabled;\n    // when it's changed, we need to mark the material as dirty so the shader is rebuilt.\n    this.markAllDefinesAsDirty();\n    this._enable(this._isEnabled);\n  }\n\n  _isEnabled = false;\n\n  isCompatible(shaderLanguage) {\n      switch (shaderLanguage) {\n          case BABYLON.ShaderLanguage.GLSL:\n          case BABYLON.ShaderLanguage.WGSL:\n              return true;\n          default:\n              return false;\n      }\n  }\n\n  constructor(material) {\n    // the fourth parameter is a list of #defines in the [GLSL](https://www.khronos.org/opengl/wiki/OpenGL_Shading_Language) code\n    super(material, \"Colorify\", 200, { COLORIFY: false });\n\n    this._varColorName = material instanceof BABYLON.PBRBaseMaterial ? \"finalColor\" : \"color\";\n  }\n\n  // we use the define to enable or disable the plugin.\n  prepareDefines(defines, scene, mesh) {\n    defines.COLORIFY = this._isEnabled;\n  }\n\n  // here we can define any uniforms to be passed to the shader code.\n  getUniforms(shaderLanguage) {\n    if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {\n      // For webgpu we only define the UBO with the correct type and size.\n        return {\n            \"ubo\": [\n            { name: \"myColor\", size: 3, type: \"vec3\" },\n            ]\n        };\n    }\n    return {\n      // first, define the UBO with the correct type and size.\n      ubo: [{ name: \"myColor\", size: 3, type: \"vec3\" }],\n      // now, on the fragment shader, add the uniform itself in case uniform buffers are not supported by the engine\n      fragment: `#ifdef COLORIFY\n                    uniform vec3 myColor;\n                #endif`,\n    };\n  }\n\n  // whenever a material is bound to a mesh, we need to update the uniforms.\n  // so bind our uniform variable to the actual color we have in the instance.\n  bindForSubMesh(uniformBuffer, scene, engine, subMesh) {\n    if (this._isEnabled) {\n      uniformBuffer.updateColor3(\"myColor\", this.color);\n    }\n  }\n\n  getClassName() {\n    return \"ColorifyPluginMaterial\";\n  }\n\n  getCustomCode(shaderType, shaderLanguage) {\n    if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {\n        return shaderType === \"vertex\" ? null : {\n            \"CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\": `\n                #ifdef COLORIFY\n                    ${this._varColorName} = vec4f(${this._varColorName}.rgb * uniforms.myColor, ${this._varColorName}.a);\n                #endif\n            `,\n\n            \"!diffuseBase\\\\+=info\\\\.diffuse\\\\*shadow;\": `\n                diffuseBase += info.diffuse*shadow;\n                diffuseBase += vec3f(0., 0.2, 0.8);\n            `,\n        };\n    }\n    return shaderType === \"vertex\"\n      ? null\n      : {\n          // this is just like before. Multiply the final shader color by\n          // our color. Note that we have access to all shader variables:\n          // we're effectively inserting a piece of code in the shader code.\n          CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR: `\n                #ifdef COLORIFY\n                    ${this._varColorName}.rgb *= myColor;\n                #endif\n            `,\n\n          // we can even use regexes to replace arbitrary parts of the code.\n          // if your key starts with '!' it's parsed as a Regex.\n          \"!diffuseBase\\\\+=info\\\\.diffuse\\\\*shadow;\": `\n                diffuseBase += info.diffuse*shadow;\n                diffuseBase += vec3(0., 0.2, 0.8);\n            `,\n        };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Animated Character Model in BabylonJS\nDESCRIPTION: Demonstrates how to import a 3D character model with skeletal animation using BabylonJS's ImportMeshAsync. The code loads the 'Dude' model, scales it down, and starts its walking animation sequence.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/import_character.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"/scenes/Dude/Dude.babylon\" /* model file */, scene, { meshNames: \"him\" }).then((result) => {\n  var dude = result.meshes[0];\n  dude.scaling = new BABYLON.Vector3(0.25, 0.25, 0.25);\n\n  scene.beginAnimation(result.skeletons[0], 0, 100, true, 1.0);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a SpherePanel and Setting the Radius (Babylon.js, JavaScript)\nDESCRIPTION: This snippet creates a SpherePanel container arranged over the surface of a sphere in the 3D GUI. The 'radius' property is set to define the size of the hosting sphere. SpherePanel automatically arranges its child controls over the sphere's surface. Requires Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst panel = new BABYLON.GUI.SpherePanel();\npanel.radius = 5;\n```\n\n----------------------------------------\n\nTITLE: Importing Named Babylon.js Modules - JavaScript\nDESCRIPTION: This import statement brings in only the specified Babylon.js classes and functions, reducing bundle size and improving tree-shaking. Includes Engine, Scene, ArcRotateCamera, HemisphericLight, Vector3, MeshBuilder, and Mesh. Place this import at the start of files where these Babylon.js entities are required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Engine, Scene, ArcRotateCamera, HemisphericLight, Vector3, MeshBuilder, Mesh } from \"babylonjs\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vertex Data in Babylon.js\nDESCRIPTION: This code demonstrates how to access various vertex attributes from a mesh including positions, normals, colors, UVs, and indices. Each set of data is returned as an array of numbers representing the vertex attributes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/updatingVertices.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\nvar normals = mesh.getVerticesData(BABYLON.VertexBuffer.NormalKind);\nvar colors = mesh.getVerticesData(BABYLON.VertexBuffer.ColorKind);\nvar uvs = mesh.getVerticesData(BABYLON.VertexBuffer.UVKind);\n\nvar indices = mesh.getIndices();\n```\n\n----------------------------------------\n\nTITLE: Triggering Asset Loading in Babylon.js (JavaScript)\nDESCRIPTION: Executes the asset loading process for all registered tasks by invoking 'assetsManager.load()'. This method initiates the asynchronous fetching and processing of all tasks. Ensure all callback handlers are set before calling this method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nassetsManager.load();\n```\n\n----------------------------------------\n\nTITLE: Entering WebXR Session in JavaScript\nDESCRIPTION: Shows how to enter a WebXR session using the experience helper, specifically for immersive VR in local-floor mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sessionManager = await xrHelper.enterXRAsync(\"immersive-vr\", \"local-floor\" /*, optionalRenderTarget */ );\n```\n\n----------------------------------------\n\nTITLE: Including glTF 2.0 File Loader Script in HTML\nDESCRIPTION: HTML script tags for including the Babylon.js core and glTF 2.0 File Loader plugin. This setup only supports glTF 2.0 version.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.js\"></script>\n<script src=\"babylon.glTF2FileLoader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tiled Plane with MeshBuilder in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to create a tiled plane using the MeshBuilder.CreateTiledPlane method in Babylon.js. It shows the basic usage and available options for customizing the plane.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_plane.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tiledPlane = BABYLON.MeshBuilder.CreateTiledPlane(\"plane\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Stopping Default Animation Group in Babylon.js\nDESCRIPTION: Shows how to stop the default animation that plays when loading a model with animation groups. By default, the first animation group is automatically played.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animatedCharacter.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimationGroups[0].stop();\n```\n\n----------------------------------------\n\nTITLE: Creating a Pipe Mesh Using CSG2 Operations - TypeScript\nDESCRIPTION: Implements a function to create a pipe-shaped mesh by subtracting one cylinder mesh from another using CSG2 operations in Babylon.js, written in TypeScript. Requires an initialized Babylon.js scene and CSG2 library. Inputs are inner diameter, outer diameter, height, and the scene, constructing CSG objects from primitive meshes and using subtract, then returning the resulting mesh. All intermediate objects are properly disposed. Outputs a new mesh shaped as a hollow pipe.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/mergeMeshes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createPipe(diamInner: number, diamOuter: number, height: number, scene: BABYLON.Scene): BABYLON.Mesh {\n  // Create the outer wall using a Cylinder mesh\n  const mOuter = BABYLON.MeshBuilder.CreateCylinder(\n    \"mOuter\",\n    {\n      diameter: diamOuter,\n      height: height,\n    },\n    scene,\n  );\n  // Create the inner wall using a Cylinder mesh\n  const mInner = BABYLON.MeshBuilder.CreateCylinder(\n    \"mOuter\",\n    {\n      diameter: diamInner,\n      height: height,\n    },\n    scene,\n  );\n  // Create CSG objects from each mesh\n  const outerCSG = BABYLON.CSG2.FromMesh(mOuter);\n  const innerCSG = BABYLON.CSG2.FromMesh(mInner);\n\n  // Create a new CSG object by subtracting the inner tube from the outer cylinder\n  const pipeCSG = outerCSG.subtract(innerCSG);\n\n  // Create the resulting mesh from the new CSG object\n  const mPipe = pipeCSG.toMesh(\"mPipe\", scene);\n\n  // Dispose of the meshes, no longer needed\n  mInner.dispose();\n  mOuter.dispose();\n\n  outerCSG.dispose();\n  innerCSG.dispose();\n\n  // Return the result\n  return mPipe;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Input Block as Attribute Source in Babylon.js Node Material using JavaScript\nDESCRIPTION: Illustrates assigning an InputBlock to take its value from a mesh attribute, such as a vertex position. The attribute string must correspond to valid vertex attribute names supported by Babylon.js. This enables the block to pass per-vertex data into the shader graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet positionInput = new BABYLON.InputBlock(\"position\");\npositionInput.setAsAttribute(\"position\");\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Reflection Matrix Playground Example\nDESCRIPTION: Demonstrating how to adjust a texture's reflection matrix to transform environment maps for matching scene changes or special effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/reflectionTexture.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#UU7RQ#1631\" title=\"Sphere Reflecting Rotating Skybox\" description=\"A sphere reflecting spinning skybox images\"/>\n```\n\n----------------------------------------\n\nTITLE: Building a House from a 2D Plan with Babylon.js - JavaScript\nDESCRIPTION: Defines a high-level function, 'buildFromPlan', for constructing a 3D house mesh in Babylon.js from a structured 2D plan. This function depends on an extension to 'PolygonMeshBuilder', so it requires a supporting prototype and the Earcut triangulation library for geometry construction. Key parameters include arrays of wall objects (with optional door and window spaces), wall physical properties, and scene settings. The implementation enables customized geometry for walls and placements of doors/windows. Babylon.js and Earcut (via CDN or npm) must be loaded prior to use. Returns the generated house mesh; limitations may include performance constraints for highly complex plans.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar house buildFromPlan(walls, ply, height, options, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sphere with MeshBuilder in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to use Babylon.js's MeshBuilder utility to create a sphere mesh, optionally attaching it to a specific scene. The function accepts a name, an options object for various geometry parameters (such as diameter and segments), and an optional scene that defaults to the current scene if not provided. Inputs include the mesh name (string), options (object with geometry attributes), and the scene (Babylon.js Scene instance). The output is a new sphere mesh instance. No additional dependencies are required if Babylon.js is included in the environment. This snippet assumes Babylon.js is in scope as BABYLON.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/sphere.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Initializing the Game Scene Asynchronously in TypeScript\nDESCRIPTION: Defines the `_initializeGameAsync` function in `app.ts`. This asynchronous function is called after assets are loaded. It sets up scene lighting (a temporary Hemispheric light and a PointLight for shadows), creates a `ShadowGenerator`, and finally instantiates the `Player` class using the loaded assets and the shadow generator.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nprivate async _initializeGameAsync(scene): Promise<void> {\n    //temporary light to light the entire scene\n    var light0 = new HemisphericLight(\"HemiLight\", new Vector3(0, 1, 0), scene);\n\n    const light = new PointLight(\"sparklight\", new Vector3(0, 0, 0), scene);\n    light.diffuse = new Color3(0.08627450980392157, 0.10980392156862745, 0.15294117647058825);\n    light.intensity = 35;\n    light.radius = 1;\n\n    const shadowGenerator = new ShadowGenerator(1024, light);\n    shadowGenerator.darkness = 0.4;\n\n    //Create the player\n    this._player = new Player(this.assets, scene, shadowGenerator); //dont have inputs yet so we dont need to pass it in\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing an Anaglyph ArcRotateCamera in Babylon.js\nDESCRIPTION: Creates an Anaglyph ArcRotateCamera for use with red and cyan 3D glasses. It includes parameters for camera position, target, and eye space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters : name, alpha, beta, radius, target, eyeSpace, scene\nconst camera = new BABYLON.AnaglyphArcRotateCamera(\"aar_cam\", -Math.PI / 2, Math.PI / 4, 20, BABYLON.Vector3.Zero(), 0.033, scene);\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Babylon.js ES6 Packages - JavaScript\nDESCRIPTION: Demonstrates ES6-style import for Babylon.js Engine from the ES6 module namespace and setup of a rendering engine using a canvas HTML element. Requires @babylonjs/core to be installed via npm. This approach enables tree-shaking and other ES module benefits, but should not be mixed with legacy package imports.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Engine } from '@babylonjs/core/Engines/engine'\n\nconst canvas = document.getElementById(\"canvas\");\n\nconst engine = new Engine(canvas, true);\n\n// code continues....\n```\n\n----------------------------------------\n\nTITLE: Creating Emissive Material for Lit Lanterns\nDESCRIPTION: Creates a PBR material with an emissive texture to represent the lit lantern appearance. This material is swapped in when a lantern is lit to create the visual effect of illumination.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n//create emissive material for when lantern is lit\nconst lightmtl = new PBRMetallicRoughnessMaterial(\"lantern mesh light\", this._scene);\nlightmtl.emissiveTexture = new Texture(\"/textures/litLantern.png\", this._scene, true, false);\nlightmtl.emissiveColor = new Color3(0.8784313725490196, 0.7568627450980392, 0.6235294117647059);\nthis._lightmtl = lightmtl;\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Codecs for Cross-Browser Sound Compatibility in Babylon.js (JavaScript)\nDESCRIPTION: Creates a sound asynchronously using `CreateSoundAsync`. The `source` parameter is an array of URLs pointing to the same sound encoded in different formats (`.ac3`, `.ogg`, `.mp3`). Babylon.js attempts to load the files in order, using the first format the browser supports. This allows optimizing for browsers like Safari (using `.ac3`) while providing fallbacks (`.ogg`, `.mp3`) for others. Depends on the Babylon.js library (`BABYLON`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst sound = BABYLON.CreateSoundAsync(\"sound\", [\n    \"https://assets.babylonjs.com/sound/testing/ac3.ac3\",\n    \"https://assets.babylonjs.com/sound/testing/ogg.ogg\",\n    \"https://assets.babylonjs.com/sound/testing/mp3.mp3\",\n]);\n```\n\n----------------------------------------\n\nTITLE: GreasedLineRibbon FacesMode Enum - Babylon.js (JavaScript)\nDESCRIPTION: Enumerates the face creation modes for the ribbon mesh. Single sided mode is default with back-face culling, while options exist for disabling culling and doubling up faces for rendering both sides. This choice affects rendering performance and appearance depending on the visual requirements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_ribbon/greased_line_ribbon.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nFACES_MODE_SINGLE_SIDED = 0,\nFACES_MODE_SINGLE_SIDED_NO_BACKFACE_CULLING = 1,\nFACES_MODE_DOUBLE_SIDED = 2\n```\n\n----------------------------------------\n\nTITLE: Defining and Initializing State Machine with BabylonJS - JavaScript/TypeScript\nDESCRIPTION: Initializes the game application using a class-based structure, defines an enum for state management, and sets up the primary BabylonJS scene, engine, camera, lighting, and event handlers. Handles rendering loops, debug inspector shortcuts, and acts as the entry point for organizing scene transitions. Requires BabylonJS modules (Scene, Engine, ArcRotateCamera, HemisphericLight, MeshBuilder, Vector3) and access to a browser DOM with a canvas. Inputs: none directly, serves as the app initializer. Outputs: renders the main scene loop, manages current state and scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//...imports here\n\n//enum for states\nenum State { START = 0, GAME = 1, LOSE = 2, CUTSCENE = 3 }\n\nclass App {\n    // General Entire Application\n    private _scene: Scene;\n    private _canvas: HTMLCanvasElement;\n    private _engine: Engine;\n\n    //Scene - related\n    private _state: number = 0;\n\n    constructor() {\n        this._canvas = this._createCanvas();\n\n        // initialize babylon scene and engine\n        this._engine = new Engine(this._canvas, true);\n        this._scene = new Scene(this._engine);\n\n        var camera: ArcRotateCamera = new ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), this._scene);\n        camera.attachControl(this._canvas, true);\n        var light1: HemisphericLight = new HemisphericLight(\"light1\", new Vector3(1, 1, 0), this._scene);\n        var sphere: Mesh = MeshBuilder.CreateSphere(\"sphere\", { diameter: 1 }, this._scene);\n\n        // hide/show the Inspector\n        window.addEventListener(\"keydown\", (ev) => {\n            // Shift+Ctrl+Alt+I\n            if (ev.shiftKey && ev.ctrlKey && ev.altKey && ev.keyCode === 73) {\n                if (this._scene.debugLayer.isVisible()) {\n                    this._scene.debugLayer.hide();\n                } else {\n                    this._scene.debugLayer.show();\n                }\n            }\n        });\n\n        // run the main render loop\n        this._engine.runRenderLoop(() => {\n            this._scene.render();\n        });\n    }\n}\nnew App();\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Mesh with Positions and Indices in Babylon.js\nDESCRIPTION: This code demonstrates how to create a custom mesh by defining vertex positions and indices. The positions array contains the x, y, z coordinates for each vertex, while the indices array defines how the vertices connect to form triangular facets.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar customMesh = new BABYLON.Mesh(\"custom\", scene);\n\nvar positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3, 5, 2, 3, 7, -2, 3, 3, -2, 3];\nvar indices = [0, 1, 2, 3, 4, 5];\n\nvar vertexData = new BABYLON.VertexData();\n\nvertexData.positions = positions;\nvertexData.indices = indices;\n\nvertexData.applyToMesh(customMesh);\n```\n\n----------------------------------------\n\nTITLE: Adding an ImageBasedSlider Control with Babylon.js GUI - JavaScript\nDESCRIPTION: This snippet demonstrates how to add an ImageBasedSlider control to a Babylon.js GUI scene. Dependencies include the Babylon.js engine and GUI module. The key properties shown include backgroundImage, valueBarImage, and thumbImage for customizing slider appearance through image files, along with display and orientation options. Expected input includes paths to images for the slider's visual elements, and outputs a fully functional, skinned slider UI element. The control can be customized to act as a standard slider or, by hiding the thumb, as a progress bar. No strict constraints on image format, but correct path and sizing are important for best results.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Playground: #HATGQZ\n// Simple example showing how to add a ImageBasedSlider control to your scene.\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\nvar imageSlider = new BABYLON.GUI.ImageBasedSlider();\nimageSlider.backgroundImage = \"path/to/background.png\";\nimageSlider.valueBarImage = \"path/to/valueBar.png\";\nimageSlider.thumbImage = \"path/to/thumb.png\";\nimageSlider.displayThumb = true;\nimageSlider.isVertical = false;\nadvancedTexture.addControl(imageSlider);\n```\n\n----------------------------------------\n\nTITLE: Enabling Texture Alpha in Babylon.js\nDESCRIPTION: Enables alpha channel support for a texture by setting its hasAlpha property to true. This is used when the texture image contains transparency information that should be respected during rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materials_introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.diffuseTexture.hasAlpha = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Layout in Babylon.js\nDESCRIPTION: Example showing how to create and configure a Grid control with column/row definitions and add child controls to specific cells.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new BABYLON.GUI.Grid();\ngrid.addColumnDefinition(100, true);\ngrid.addColumnDefinition(0.5);\ngrid.addColumnDefinition(0.5);\ngrid.addColumnDefinition(100, true);\ngrid.addRowDefinition(0.5);\ngrid.addRowDefinition(0.5);\n\n// This rect will be on first row and second column\nconst rect = new BABYLON.GUI.Rectangle();\nrect.background = \"green\";\nrect.thickness = 0;\ngrid.addControl(rect, 0, 1);\n\n// This rect will be on second row and third column\nrect = new BABYLON.GUI.Rectangle();\nrect.background = \"red\";\nrect.thickness = 0;\ngrid.addControl(rect, 1, 2);\n```\n\n----------------------------------------\n\nTITLE: Enabling Close Exponential Shadow Map (CESM) in Babylon.js (JavaScript)\nDESCRIPTION: This snippet enables the CESM shadow technique, reducing self-shadowing artifacts and improving accuracy. 'useCloseExponentialShadowMap' should be used in conjunction with properly set 'light.shadowMinZ' and 'light.shadowMaxZ' parameters for optimal results.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.useCloseExponentialShadowMap = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Depth Sensing Feature with Babylon.js WebXR (JavaScript)\nDESCRIPTION: This snippet shows how to enable the WebXR Depth Sensing feature using Babylon.js in JavaScript. It utilizes the featureManager (typically obtained from the base webxr experience helper) to register the depth sensing module, specifying preferred data formats and usage types. The options determine how depth data is retrieved and processed, enabling occlusion and related XR effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// featuresManager from the base webxr experience helper\\nconst depthSensing = featureManager.enableFeature(BABYLON.WebXRFeatureName.DEPTH_SENSING, \\\"latest\\\", {\\n  dataFormatPreference: [\\\"ushort\\\", \\\"float\\\"],\\n  usagePreference: [\\\"cpu\\\", \\\"gpu\\\"],\\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Setting Up Game Assets in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates awaiting the completion of the `_setUpGame` asynchronous function before proceeding. It ensures that game setup tasks, likely including asset loading, are finished before setting the `finishedLoading` flag to true. This pattern is crucial for preventing issues caused by attempting to use assets before they are fully loaded, especially when transitioning between scenes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar finishedLoading = false;\nawait this._setUpGame().then((res) => {\n    finishedLoading = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Depth Rendering in Babylon.js with JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the DepthRenderer in Babylon.js by calling the enableDepthRenderer() method on a scene object. The renderer generates a depth texture that stores scene depth values, which are typically required for advanced material effects or post-processing. The scene must already be created and assigned to the variable 'scene'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/depthValuesDepthRenderer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderer = scene.enableDepthRenderer();\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Rotation Range for Particles - Babylon.js - JavaScript\nDESCRIPTION: This snippet establishes the minimum and maximum angle (in radians) for initial particle rotation. When set, each particle gets an initial rotation value between the supplied range. Babylon.js is required. The values affect the starting orientation of the particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.minInitialRotation = 0;\nparticleSystem.maxInitialRotation = Math.PI / 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring ShaderMaterial with Options in Babylon.js\nDESCRIPTION: Provides a concrete example of instantiating `BABYLON.ShaderMaterial` with a name \"shader\", loading shaders from \"./COMMON_NAME\", and specifying options including required vertex attributes (`position`, `normal`, `uv`), uniforms (`world`, `worldViewProjection`, etc.), texture samplers (`textureSampler`), preprocessor defines (`MyDefine`), and alpha handling flags.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderMaterial.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myShaderMaterial = new BABYLON.ShaderMaterial(\"shader\", scene, \"./COMMON_NAME\",\n{\n  attributes: [\"position\", \"normal\", \"uv\"],\n  uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\", \"time\", \"direction\" ],\n  samplers: [\"textureSampler\"],\n  defines: [\"MyDefine\"],\n  needAlphaBlending: true,\n  needAlphaTesting: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Scenes in Babylon.js Playground\nDESCRIPTION: This code demonstrates how to implement multiple scenes in the Babylon.js Playground. It creates two scenes, stops the default render loop, and sets up a custom render loop to render both scenes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiScenes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = function () {\n  var scene = new BABYLON.Scene(engine);\n\n  //Add camera, light and meshes for scene\n\n  ////////OTHER SCENE////////////////////\n  var scene1 = new BABYLON.Scene(engine);\n\n  //Add camera, light and meshes for scene\n\n  ////////CONTROL ENGINE LOOP///////////\n  setTimeout(function () {\n    engine.stopRenderLoop();\n\n    engine.runRenderLoop(function () {\n      scene.render();\n      scene1.render();\n    });\n  }, 500);\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Fast Rotation Animation in BabylonJS\nDESCRIPTION: Implements a faster rotation animation by increasing the rotation values, resulting in multiple full rotations during the animation cycle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/combineAnimations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst yRot = new BABYLON.Animation(\"yRot\", \"rotation.y\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n\nconst keyFramesR = [];\n\nkeyFramesR.push({\n  frame: 0,\n  value: 0,\n});\n\nkeyFramesR.push({\n  frame: frameRate,\n  value: 4 * Math.PI,\n});\n\nkeyFramesR.push({\n  frame: 2 * frameRate,\n  value: 8 * Math.PI,\n});\n\nyRot.setKeys(keyFramesR);\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a point particle emitter using `particleSystem.createPointEmitter`. This function defines the emission point and the range of initial directions for particles using two `BABYLON.Vector3` arguments (`direction1` and `direction2`). Requires an existing `particleSystem` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointEmitter = particleSystem.createPointEmitter(new BABYLON.Vector3(-7, 8, 3), new BABYLON.Vector3(7, 8, -3));\n```\n\n----------------------------------------\n\nTITLE: Creating a GreasedLine with Multiple Colors in JavaScript\nDESCRIPTION: Creates a GreasedLine with varying colors along its length. This requires setting `useColors` to `true` and providing an array of `Color3` objects in the `colors` option. The colors are typically distributed per segment by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst colors = [BABYLON.Color3.Red(), BABYLON.Color3.Yellow()];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points }, { useColors: true, colors });\n```\n\n----------------------------------------\n\nTITLE: Setting Line Color in Babylon.js\nDESCRIPTION: Shows how to set the color of lines after creation using the color property instead of materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/lines.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlines.color = new BABYLON.Color3(1, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Updating Tube Mesh Path and Radius in Babylon.js\nDESCRIPTION: This snippet shows how to create an updatable tube mesh and subsequently update its path and radius. The tube is first created using `BABYLON.Mesh.CreateTube` with the `updatable` parameter set to `true`. Later, `BABYLON.MeshBuilder.CreateTube` is called with `null` for the name, an options object containing the new `path` (path2) and `radius` (radius2), and the `instance` property set to the existing `tube` mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst path1 = [v1, ..., vN]; //vector3 array : tube axis1\nconst radius1 = 5;\nconst path2 = [u1, ..., uN]; // another vector3 array : tube axis2\nconst radius2 = 8;\nconst tube = BABYLON.Mesh.CreateTube(\"tube\", path1, radius1, 12, null, cap, scene, true);\ntube = BABYLON.MeshBuilder.CreateTube(null, {path: path2, radius: radius2, instance: tube});\n```\n\n----------------------------------------\n\nTITLE: Initializing WebXR Experience in BabylonJS\nDESCRIPTION: Creates a default WebXR experience in a BabylonJS scene, enabling VR immersive mode with built-in features like session initialization, input handling, camera controls, teleportation, and scene interactions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/vr.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xr = scene.createDefaultXRExperienceAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Camera-Specific Highlight Layers\nDESCRIPTION: Shows how to create a HighlightLayer that only applies to a specific camera, optimizing performance in multi-camera setups.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst hl1 = new BABYLON.HighlightLayer(\"hl1\", scene, { camera: camera });\nhl1.addMesh(sphere, BABYLON.Color3.Green());\n```\n\n----------------------------------------\n\nTITLE: Initializing WebXR Session\nDESCRIPTION: Sets up the WebXR session with immersive VR mode\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsessionManager.initializeSessionAsync(\"immersive-vr\" /*, xrSessionInit */);\n```\n\n----------------------------------------\n\nTITLE: Loading New Scene from File (TypeScript)\nDESCRIPTION: Uses LoadSceneAsync to load Babylon.js assets from a file and create a new scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst scene = await BABYLON.LoadSceneAsync(\"path/to/model\", engine);\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Scene with Basic 3D Objects\nDESCRIPTION: This JavaScript snippet creates a basic Babylon.js scene with a sphere and ground. It sets up a camera, light, and renders the scene. The code also handles window resizing to maintain proper rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/templates/basicTemplates/basicHTML.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element\nconst engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\nconst createScene = function () {\n    // This creates a basic Babylon Scene object (non-mesh)\n    const scene = new BABYLON.Scene(engine);\n    // This creates and positions a free camera (non-mesh)\n    const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n    // This targets the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n    // This attaches the camera to the canvas\n    camera.attachControl(canvas, true);\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n    const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n    // Default intensity is 1. Let's dim the light a small amount\n    light.intensity = 0.7;\n    // Our built-in 'sphere' shape.\n    const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\n    // Move the sphere upward 1/2 its height\n    sphere.position.y = 1;\n    // Our built-in 'ground' shape.\n    const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width: 6, height: 6}, scene);\n    return scene;\n};\nconst scene = createScene(); //Call the createScene function\n// Register a render loop to repeatedly render the scene\nengine.runRenderLoop(function () {\n        scene.render();\n});\n// Watch for browser/canvas resize events\nwindow.addEventListener(\"resize\", function () {\n        engine.resize();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon with Mesh Class in Babylon.js\nDESCRIPTION: Creates a polygon mesh using the Mesh class with parameters for shape, holes, updatable status, and side orientation. Provides both basic and extended parameter versions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/polygon.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet polygon = BABYLON.Mesh.CreatePolygon(\"polygon\", shape, scene);\nlet polygon = BABYLON.Mesh.CreatePolygon(\"polygon\", shape, scene, holes, updatable, sideOrientation); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Observing Full AnimationGroup Loop Events in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates attaching a callback to onAnimationGroupLoopObservable, triggering when all animations in the group have completed a loop. Useful for sequencing or handling full-cycle events. Requires AnimationGroup instance. Input: callback; Output: group-level event notification, e.g., via console log.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nanimationGroup1.onAnimationGroupLoopObservable.add(function (group) {\n  console.log(\"Group looped!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Havok Physics with Promise\nDESCRIPTION: Alternative approach to initialize Havok physics using promise chain\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingHavok.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport HavokPhysics from \"@babylonjs/havok\";\nlet initializedHavok;\n\nHavokPhysics().then((havok) => {\n  initializedHavok = havok;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Sub Emitters in Babylon.js ParticleSystem (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to create a BABYLON.SubEmitter, configure it to spawn a sub particle system when the parent particle dies, and attach it to the main particle system via the subEmitters property. It requires Babylon.js 3.2+ as a dependency. Key parameters set include sub emitter type, directional inheritance, and inherited velocity, with the sub emitter(s) added to the main system for use at runtime.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/subEmitters.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create sub emitter\\nvar subEmitter = new BABYLON.SubEmitter(subParticleSystem);\\n// Have the sub emitter spawn the particle system when the particle dies\\nsubEmitter.type = BABYLON.SubEmitterType.END;\\n// Set the +Y direction of the sub emitter equal to the direction the particle is/was heading\\nsubEmitter.inheritDirection = true;\\n// How much of the existing particles speed should be added to the emitter particles\\nsubEmitter.inheritedVelocityAmount = 1;\\n\\nparticleSystem.subEmitters = [subEmitter];\n```\n\n----------------------------------------\n\nTITLE: Creating Polyhedron with MeshBuilder in Babylon.js\nDESCRIPTION: Creates a polyhedron mesh using the MeshBuilder class with configurable options including type, size, colors, and UV mapping. The type parameter accepts values 0-14 representing different polyhedra shapes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/polyhedra_by_numbers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst polyhedron = BABYLON.MeshBuilder.CreatePolyhedron(\"oct\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Creating Morph Target Animation in Babylon.js\nDESCRIPTION: This snippet illustrates how to create a `BABYLON.Animation` object specifically designed to animate the `influence` property of a morph target. The animation targets the \"influence\" property, uses `BABYLON.Animation.ANIMATIONTYPE_FLOAT`, and specifies parameters like name, frame rate, and loop mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAnim = new BABYLON.Animation(name, \"influence\", frames_per_second, BABYLON.Animation.ANIMATIONTYPE_FLOAT, loop_mode);\n```\n\n----------------------------------------\n\nTITLE: Handling onProgress and onFinish with AssetsManager (JavaScript)\nDESCRIPTION: Defines global progress and finish callbacks for the assets manager. The onProgress callback updates a loading UI with the remaining asset count, while onFinish starts the render loop after all tasks are done. Assumes presence of an engine and scene variable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nassetsManager.onProgress = function (remainingCount, totalCount, lastFinishedTask) {\n  engine.loadingUIText = \"We are loading the scene. \" + remainingCount + \" out of \" + totalCount + \" items still need to be loaded.\";\n};\n\nassetsManager.onFinish = function (tasks) {\n  engine.runRenderLoop(function () {\n    scene.render();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Freezing World Matrices in Babylon.js\nDESCRIPTION: Shows how to freeze and unfreeze a mesh's world matrix to improve performance by reducing matrix computations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.freezeWorldMatrix();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.unfreezeWorldMatrix();\n```\n\n----------------------------------------\n\nTITLE: Implementing WebXR Teleportation\nDESCRIPTION: Adds teleportation functionality to WebXR experience by defining floor meshes that users can teleport to.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRDemos.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHelper = await scene.createDefaultXRExperienceAsync({\n  // define floor meshes\n  floorMeshes: [environment.ground],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ground with Mesh.CreateGroundFromHeightMap in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows an alternative method for creating a ground mesh using the `Mesh` class directly in Babylon.js. It requires the ground's name, the path to the height map, dimensions (width, height), subdivision count, minimum and maximum height values, the scene object, an optional `updatable` flag, and an optional `onReadyCallback` function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/ground_hmap.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", heightMapPath, width, height, subdivisions, minHeight, maxHeight, scene, updatable, onReadyCallback);\n```\n\n----------------------------------------\n\nTITLE: Creating a SimpleButton in Babylon.js GUI\nDESCRIPTION: This snippet demonstrates how to create a SimpleButton, which is a button with text only. It uses the BABYLON.GUI.Button.CreateSimpleButton method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = BABYLON.GUI.Button.CreateSimpleButton(\"but\", \"Click Me\");\n```\n\n----------------------------------------\n\nTITLE: Using the Audio Analyser in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create an Analyser, connect it to the audio engine or a specific sound track, and display a debug canvas for real-time frequency analysis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAnalyser = new BABYLON.Analyser(scene);\nBABYLON.Engine.audioEngine.connectToAnalyser(myAnalyser);\nmyAnalyser.drawDebugCanvas();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAnalyser = new BABYLON.Analyser(scene);\nsoundTrack1.connectToAnalyser(myAnalyser);\nmyAnalyser.DEBUGCANVASSIZE.width = 160;\nmyAnalyser.DEBUGCANVASSIZE.height = 100;\nmyAnalyser.DEBUGCANVASPOS.x = 40;\nmyAnalyser.DEBUGCANVASPOS.y = 30;\nmyAnalyser.drawDebugCanvas();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Mesh with UV Mapping in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a custom mesh in Babylon.js, including the definition of vertex positions, indices, UV coordinates, and normals. It also shows how to apply this data to the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar customMesh = new BABYLON.Mesh(\"custom\", scene);\n\nvar positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3];\nvar indices = [0, 1, 2];\nvar uvs = [0, 1, 0, 0, 1, 0];\n\nvar normals = [];\nBABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\nvar vertexData = new BABYLON.VertexData();\n\nvertexData.positions = positions;\nvertexData.indices = indices;\nvertexData.normals = normals;\nvertexData.uvs = uvs;\n\nvertexData.applyToMesh(customMesh);\n```\n\n----------------------------------------\n\nTITLE: Standalone HTML Example with Custom Loading Screen\nDESCRIPTION: This is a complete HTML example demonstrating the implementation of a custom loading screen in Babylon.js. It includes the necessary HTML structure, CSS styling, and JavaScript code to create and use a custom loading screen.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/customLoadingScreen.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n    <title>Babylon.js custom loading screen example</title>\n    <script src=\"https://code.jquery.com/pep/0.4.2/pep.min.js\"></script>\n    <script src=\"https://preview.babylonjs.com/babylon.js\"></script>\n    <script src=\"https://preview.babylonjs.com/loaders/babylonjs.loaders.js\"></script>\n\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n\n      #renderCanvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n\n      #loadingScreen {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        color: white;\n        font-size: 50px;\n        text-align: center;\n        background-color: #bb464bcc;\n        z-index: 9999;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"loadingScreen\">default div text</div>\n    <canvas id=\"renderCanvas\"></canvas>\n    <script>\n      var canvas = document.getElementById(\"renderCanvas\");\n      var engine = new BABYLON.Engine(canvas, true);\n\n      var loadingScreenDiv = window.document.getElementById(\"loadingScreen\");\n\n      function customLoadingScreen() {\n        console.log(\"customLoadingScreen creation\");\n      }\n      customLoadingScreen.prototype.displayLoadingUI = function () {\n        console.log(\"customLoadingScreen loading\");\n        loadingScreenDiv.innerHTML = \"loading\";\n      };\n      customLoadingScreen.prototype.hideLoadingUI = function () {\n        console.log(\"customLoadingScreen loaded\");\n        loadingScreenDiv.style.display = \"none\";\n      };\n      var loadingScreen = new customLoadingScreen();\n      engine.loadingScreen = loadingScreen;\n\n      engine.displayLoadingUI();\n\n      var delayCreateScene = function () {\n        var scene = new BABYLON.Scene(engine);\n        scene.createDefaultCamera(true, true, true);\n        BABYLON.ImportMeshAsync(\"https://models.babylonjs.com/CornellBox/cornellBox.glb\", scene).then(function () {\n          scene.createDefaultCamera(true, true, true);\n          scene.createDefaultEnvironment();\n          scene.activeCamera.alpha = Math.PI / 2;\n\n          engine.hideLoadingUI();\n        });\n        return scene;\n      };\n      var scene = delayCreateScene();\n\n      engine.runRenderLoop(function () {\n        if (scene) {\n          scene.render();\n        }\n      });\n      window.addEventListener(\"resize\", function () {\n        engine.resize();\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core Package with NPM\nDESCRIPTION: Command to install the @babylonjs/core package using NPM package manager. This is the ES6 module version of Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_ReactJS.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Ambient Color in Babylon.js\nDESCRIPTION: Sets the ambient color of the scene, which is necessary for ambient lighting to work with materials. This establishes the environmental background lighting color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materials_introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.ambientColor = new BABYLON.Color3(1, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Text Mesh with MeshBuilder - Babylon.js JavaScript\nDESCRIPTION: This snippet demonstrates how to use Babylon.js's MeshBuilder.CreateText to create a 3D extruded text mesh. It requires loading custom font data in JSON format and depends on the Earcut library for polygon triangulation. The function accepts various options such as size, resolution, and depth for geometry customization, and outputs a mesh with its origin centered on the text.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/text.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontData = await (await fetch(\"./fonts/Droid Sans_Regular.json\")).json(); // Providing you have a font data file at that location\\nconst text = BABYLON.MeshBuilder.CreateText(\\n  \"myText\",\\n  \"Hello World !! @ #$ % é\",\\n  fontData,\\n  {\\n    size: 16,\\n    resolution: 64,\\n    depth: 10,\\n  },\\n  scene,\\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a PBR Metallic Roughness Material in Babylon.js\nDESCRIPTION: This snippet shows how to initialize a basic PBRMetallicRoughnessMaterial instance and assign it to an object in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMetallicRoughnessMaterial(\"pbr\", scene);\n```\n\n----------------------------------------\n\nTITLE: Loading Animation from JSON File in Babylon.js\nDESCRIPTION: Shows how to load an animation from an external JSON file and apply it to a sphere mesh. The animation can be played with specified frame range and looping behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/animationCurveEditor.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\nlet animations = await BABYLON.Animation.ParseFromFileAsync(null, \"https://doc.babylonjs.com/examples/animations.json\");\nsphere.animations = animations;\nscene.beginAnimation(sphere, 0, 100, true);\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Module-based Babylon.js App - HTML\nDESCRIPTION: This HTML template provides a minimal document structure for loading a Babylon.js application bundled by Vite. The <script> tag uses module type and references the TypeScript entry point, 'app.ts', ensuring proper module resolution during development. The file includes standard HTML5 doctype and UTF-8 meta tag. Key parameter is the source path for the script; the output is the browser page presenting the Babylon.js canvas initiated by app.ts. No special constraints, but it is intended to be served by a dev server that supports module imports (e.g., Vite).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/usingVite.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\\\"UTF-8\\\">\n        <title>Title of Your Project</title>\n    </head>\n    <body>\n       <script type=\\\"module\\\" src=\\\"./src/app.ts\\\"></script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing GameRoom Server-Side Physics State\nDESCRIPTION: Server-side code in Colyseus GameRoom class that manages box physics data and handles broadcasting updates to all clients. Includes box position and rotation tracking with target player identification.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport class GameRoom extends Room {\n  maxClients = 8;\n  boxData = {\n    targetId: null,\n    position: null,\n    quaternion: null,\n  };\n  //...\n  onCreate(options) {\n    //...\n    this.onMessage(\"boxUpdate\", (client, message) => {\n      this.boxData = message;\n    });\n  }\n  onUpdate() {\n    this.broadcast(\"boxUpdate\", this.boxData);\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supplying Line Points and Colors and Filling Color Table - Babylon.js - JavaScript\nDESCRIPTION: This example shows how to instantiate a GreasedLine with a points array and a single color in Babylon.js. The engine's function will auto-complete the colors array to match the required segment count, filling missing values with defaults. This approach is useful for quickly generating colored lines without explicitly supplying a full color palette; dependencies are the Babylon.js API and color objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [0, 0, 0, 1, 0, 0, 2, 0, 0];\nconst colors = [BABYLON.Color3.Red()];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points }, { colors });\n// the color table will be filled as [red, white] - white is the default\n```\n\n----------------------------------------\n\nTITLE: Returning a Skeleton to Rest Position in Babylon.js\nDESCRIPTION: A simple method to compute the inverted absolute transform matrix for a skeleton. This is required when creating a skeleton programmatically to ensure proper bone transformations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nskeleton.returnToRest();\n```\n\n----------------------------------------\n\nTITLE: Using Babylon.js WebVR Helper with Optional WebXR Fallback\nDESCRIPTION: Demonstrates setting up a complete Babylon.js scene and initializing the legacy `createDefaultVRExperience` helper with the `useXR: true` flag. This allows the application to leverage WebXR if the browser supports it, while maintaining WebVR as a fallback. Includes scene setup (sphere, environment, lights, camera, shadows), basic animation via `onBeforeRenderObservable`, and GUI interaction (color picker) which works in XR due to pointer events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = function () {\n  // Create scene\n  var scene = new BABYLON.Scene(engine);\n\n  // Create simple sphere\n  var sphere = BABYLON.Mesh.CreateIcoSphere(\n    \"sphere\",\n    {\n      radius: 0.2,\n      flat: true,\n      subdivisions: 1,\n    },\n    scene,\n  );\n  sphere.position.y = 3;\n  sphere.material = new BABYLON.StandardMaterial(\"sphere material\", scene);\n\n  // Lights and camera\n  var light = new BABYLON.DirectionalLight(\"light\", new BABYLON.Vector3(0, -0.5, 1.0), scene);\n  light.position = new BABYLON.Vector3(0, 5, -2);\n  var camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 4, 3, new BABYLON.Vector3(0, 3, 0), scene);\n  camera.attachControl(canvas, true);\n  scene.activeCamera.beta += 0.8;\n\n  // Default Environment\n  var environment = scene.createDefaultEnvironment({\n    enableGroundShadow: true,\n    groundYBias: 2.8,\n  });\n  environment.setMainColor(BABYLON.Color3.FromHexString(\"#74b9ff\"));\n\n  // Shadows\n  var shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\n  shadowGenerator.useBlurExponentialShadowMap = true;\n  shadowGenerator.blurKernel = 32;\n  shadowGenerator.addShadowCaster(sphere, true);\n\n  // Enable VR, use XR when possible\n  var vrHelper = scene.createDefaultVRExperience({\n    createDeviceOrientationCamera: false,\n    useXR: true, // This will enable XR if supported\n    floorMeshes: [environment.ground],\n  });\n\n  // Runs every frame to rotate the sphere\n  scene.onBeforeRenderObservable.add(() => {\n    sphere.rotation.y += 0.0001 * scene.getEngine().getDeltaTime();\n    sphere.rotation.x += 0.0001 * scene.getEngine().getDeltaTime();\n  });\n\n  // GUI\n  var plane = BABYLON.Mesh.CreatePlane(\"plane\", 1);\n  plane.position = new BABYLON.Vector3(0.4, 4, 0.4);\n  var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(plane);\n  var panel = new BABYLON.GUI.StackPanel();\n  advancedTexture.addControl(panel);\n  var header = new BABYLON.GUI.TextBlock();\n  header.text = \"Color GUI\";\n  header.height = \"100px\";\n  header.color = \"white\";\n  header.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\n  header.fontSize = \"120\";\n  panel.addControl(header);\n  var picker = new BABYLON.GUI.ColorPicker();\n  picker.value = sphere.material.diffuseColor;\n  picker.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\n  picker.height = \"350px\";\n  picker.width = \"350px\";\n  // This will work in XR, since we are using native pointer events!\n  picker.onValueChangedObservable.add(function (value) {\n    sphere.material.diffuseColor.copyFrom(value);\n  });\n  panel.addControl(picker);\n\n  vrHelper.onAfterEnteringVRObservable.add(() => {\n    // This callback will still work! Would be better to use the XR native observables.\n  });\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Including ShaderBuilder Extension Script (HTML)\nDESCRIPTION: Shows how to include the ShaderBuilder extension JavaScript file in an HTML document using a `<script>` tag. This makes the `BABYLONX.ShaderBuilder` class available for use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"Babylonx.ShaderBuilder.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Particle Emitter Type (Spray Emitter) in Babylon.js (JavaScript)\nDESCRIPTION: Defines a method to attach a custom SprayParticleEmitter instance to the particle system, setting its radius and height, and assigning it to the 'particleEmitterType' property. This function extends Babylon.js particle system features and requires the user to provide a desired size for the emission region. Returns the SprayParticleEmitter for further configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ParticleSystem.prototype.createSprayEmitter = function (radius, height) {\n  if (radius === void 0) {\n    radius = 0.5;\n  }\n  if (height === void 0) {\n    height = 1;\n  }\n  var particleEmitter = new BABYLON.SprayParticleEmitter(radius, height);\n  this.particleEmitterType = particleEmitter;\n  return particleEmitter;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Point Light in Babylon.js\nDESCRIPTION: Creates a new PointLight instance. A point light emits light in all directions from a single point in world space, defined by a name, position vector, and the scene it belongs to.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst light = new BABYLON.PointLight(\"pointLight\", new BABYLON.Vector3(1, 10, 1), scene);\n```\n```\n\n----------------------------------------\n\nTITLE: Using Promises with Babylon.js Animations\nDESCRIPTION: Demonstrates how to use promises to wait for an animation to complete using the waitAsync() method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst anim = scene.beginAnimation(box1, 0, 100, false);\n\nconsole.log(\"before\");\nawait anim.waitAsync();\nconsole.log(\"after\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing a Reversed Animation in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create an animation and play it in reverse by swapping the start and end frame values in the beginAnimation method. It creates a basic sliding animation for a box and then plays it backwards.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_design.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst startFrame = 0;\nconst endFrame = 10;\nconst frameRate = 10;\n\nconst xSlide = new BABYLON.Animation(\"xSlide\", \"position.x\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n\nconst keyFrames = [];\n\nkeyFrames.push({\n  frame: startFrame,\n  value: 2,\n});\n\nkeyFrames.push({\n  frame: endFrame,\n  value: -2,\n});\n\nxSlide.setKeys(keyFrames);\n\nbox.animations.push(xSlide);\n\n//backwards animation\nscene.beginAnimation(box, endFrame, startFrame, false);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Physics Components in Babylon.js\nDESCRIPTION: Demonstrates how to access individual physics components from an aggregate to make detailed adjustments. In this example, the mass property of the physics body is modified after creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/aggregates.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst aggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1 }, scene);\naggregate.body.setMassProperties({mass: 10});\n```\n\n----------------------------------------\n\nTITLE: Implementing Walking Locomotion with Transform Node\nDESCRIPTION: Shows how to implement walking locomotion using a transform node as the locomotion target.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRMovement.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultXRExperienceAsync({ disableTeleportation: true }).then((xr) => {\n  const xrRoot = new BABYLON.TransformNode(\"xrRoot\", scene);\n  xr.baseExperience.camera.parent = xrRoot;\n  xr.baseExperience.featuresManager.enableFeature(BABYLON.WebXRFeatureName.WALKING_LOCOMOTION, \"latest\", { locomotionTarget: xrRoot });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Event Handling in Babylon.js\nDESCRIPTION: A script component demonstrating collision event handling for game objects like asteroids, enemies, and players. It manages collision detection, object destruction, score updates, and explosion effects using Babylon.js MeshComponent.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/04_CollisionMeshes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class ShotController extends BABYLON.MeshComponent {\n            protected start() :void {\n                // Physcis collision\n                this.onCollisionEvent((collider:BABYLON.AbstractMesh, tag:string) => {\n                    if (tag === \"Asteroid\" || tag === \"Enemy\" || tag === \"Player\") {\n                        const metadata: BABYLON.ObjectMetadata = this.manager.findSceneMetadata(collider);\n                        if (metadata.getProperty<boolean>(\"destroyed\", false) === false) {\n                            metadata.setProperty(\"destroyed\", true);\n                            if (this.shotType === 0) {\n                                // Player shot\n                                if (tag === \"Asteroid\" || tag === \"Enemy\") {\n                                    const points:number = 0;\n                                    if (tag === \"Asteroid\") {\n                                        points = SpaceController.AsteroidPoints;\n                                        this.manager.instantiatePrefab(\"Asteroid_Explosion\", \"Asteroid_Explode_\" + this.shotName, collider.position.clone(), collider.rotation.clone());\n                                    } else if (tag === \"Enemy\") {\n                                        points = SpaceController.EnemyPoints;\n                                        this.manager.instantiatePrefab(\"Enemy_Explosion\", \"Enemy_Explode_\" + this.shotName, collider.position.clone(), collider.rotation.clone());\n                                    }\n\n                                    // Safely destroy game objects\n                                    this.manager.safeDestroy(this.mesh);\n                                    this.manager.safeDestroy(collider);\n                                    SpaceController.Instance.addScore(points);\n                                }\n                            } else if (this.shotType === 1) {\n                                if (tag === \"Player\") {\n                                    this.manager.instantiatePrefab(\"Player_Explosion\", \"Player_Explode_\" + this.shotName, collider.position.clone(), collider.rotation.clone());\n                                    // Safely destroy game objects\n                                    this.manager.safeDestroy(this.mesh);\n                                    this.manager.safeDestroy(collider);\n                                    SpaceController.Instance.gameOver(false);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Babylon.js Scene Structure in JavaScript\nDESCRIPTION: This code snippet illustrates the complete structure of a .babylon file used in Babylon.js. It includes definitions for scene properties, camera, lights, materials, geometries, meshes (including animations), shadow generators, and sound configurations. This structure is used to create and load 3D scenes in Babylon.js applications.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"autoClear\": true,\n    \"clearColor\": [0, 0, 0],\n    \"ambientColor\": [0, 0, 0],\n    \"gravity\": [0, -9.81, 0],\n    \"cameras\": [{\n        \"name\": \"Camera\",\n        \"id\": \"Camera\",\n        \"position\": [7.4811, 5.3437, -6.5076],\n        \"target\": [-0.3174, 0.8953, 0.3125],\n        \"fov\": 0.8576,\n        \"minZ\": 0.1,\n        \"maxZ\": 100,\n        \"speed\": 1,\n        \"inertia\": 0.9,\n        \"checkCollisions\": false,\n        \"applyGravity\": false,\n        \"ellipsoid\": [0.2, 0.9, 0.2]\n    }],\n    \"activeCamera\": \"Camera\",\n    \"lights\": [{\n        \"name\": \"Sun\",\n        \"id\": \"Sun\",\n        \"type\": 1,\n        \"position\": [0.926, 7.3608, 14.1829],\n        \"direction\": [-0.347, -0.4916, -0.7987],\n        \"intensity\": 1,\n        \"diffuse\": [1, 1, 1],\n        \"specular\": [1, 1, 1]\n    }],\n    \"materials\": [{\n        \"name\": \"Material\",\n        \"id\": \"Material\",\n        \"ambient\": [0.8, 0.8, 0.8],\n        \"diffuse\": [0.64, 0.64, 0.64],\n        \"specular\": [0.5, 0.5, 0.5],\n        \"specularPower\": 50,\n        \"emissive\": [0, 0, 0],\n        \"alpha\": 1,\n        \"backFaceCulling\": true,\n        \"diffuseTexture\": {\n            \"name\": \"Metal1.png\",\n            \"level\": 1,\n            \"hasAlpha\": 1,\n            \"coordinatesMode\": 0,\n            \"uOffset\": 0,\n            \"vOffset\": 0,\n            \"uScale\": 1,\n            \"vScale\": 1,\n            \"uAng\": 0,\n            \"vAng\": 0,\n            \"wAng\": 0,\n            \"wrapU\": true,\n            \"wrapV\": true,\n            \"coordinatesIndex\": 0\n        }\n    },\n    {\n        \"name\": \"Material.001\",\n        \"id\": \"Material.001\",\n        \"ambient\": [0.8, 0.8, 0.8],\n        \"diffuse\": [0.64, 0.64, 0.64],\n        \"specular\": [0.5, 0.5, 0.5],\n        \"specularPower\": 50,\n        \"emissive\": [0, 0, 0],\n        \"alpha\": 1,\n        \"backFaceCulling\": true,\n        \"diffuseTexture\": {\n            \"name\": \"concrete5.png\",\n            \"level\": 1,\n            \"hasAlpha\": 1,\n            \"coordinatesMode\": 0,\n            \"uOffset\": 0,\n            \"vOffset\": 0,\n            \"uScale\": 5,\n            \"vScale\": 5,\n            \"uAng\": 0,\n            \"vAng\": 0,\n            \"wAng\": 0,\n            \"wrapU\": true,\n            \"wrapV\": true,\n            \"coordinatesIndex\": 0\n        }\n    }],\n    \"geometries\": {\n        \"vertexData\": [{\n            \"id\": \"CubeGeometry\",\n            \"updatable\": false,\n            \"positions\": [ 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1],\n            \"normals\": [0.5773, -0.5773, 0.5773, 0.5773, -0.5773, -0.5773, -0.5773, -0.5773, 0.5773, 0.5773, 0.5773, 0.5773, -0.5773, 0.5773, 0.5773, 0.5773, 0.5773, -0.5773, 0.5773, 0.5773, 0.5773, 0.5773, -0.5773, -0.5773, 0.5773, -0.5773, -0.5773, 0.5773, 0.5773, -0.5773, -0.5773, -0.5773, -0.5773, -0.5773, -0.5773, -0.5773, -0.5773, 0.5773, -0.5773, -0.5773, -0.5773, 0.5773, 0.5773, 0.5773, 0.5773, 0.5773, -0.5773, 0.5773, -0.5773, 0.5773, 0.5773, -0.5773, -0.5773, -0.5773, -0.5773, 0.5773, -0.5773, 0.5773, 0.5773, 0.5773, 0.5773, 0.5773, -0.5773, 0.5773, -0.5773, -0.5773, 0.5773, 0.5773, -0.5773, -0.5773, 0.5773, -0.5773, -0.5773, 0.5773, 0.5773, -0.5773, -0.5773, 0.5773, 0.5773, -0.5773, 0.5773, -0.5773, -0.5773, 0.5773, -0.5773, 0.5773, 0.5773],\n            \"uvs\": [0.5, 0.5, 0.5, 0, 0, 0.5, 0.5, 1, 0, 1, 0.5, 0.5, 0.5, 1, 0, 0.5, 0.5, 0.5, 0.5, 1, 0, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 1, 1, 1, 0.5, 0.5, 0, 0, 0, 0, 0.5],\n            \"indices\": [0, 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 17, 2, 4, 18, 5, 19, 20, 21, 22, 23, 10, 12, 24, 25, 26, 27, 28]\n        }]\n    },\n    \"meshes\": [{\n        \"name\": \"Plane\",\n        \"id\": \"Plane\",\n        \"materialId\": \"Material.001\",\n        \"position\": [0.0172, -2.9787, -0.5184],\n        \"rotation\": [0, 0, 0],\n        \"scaling\": [87.1479, 0.8635, 87.1479],\n        \"isVisible\": true,\n        \"isEnabled\": true,\n        \"checkCollisions\": false,\n        \"billboardMode\": 0,\n        \"receiveShadows\": true,\n        \"positions\": [-1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, 1],\n        \"normals\": [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n        \"uvs\": [0.0001, 0.0001, 0.9999, 0.0001, 0.0001, 0.9999, 0.9999, 0.9999],\n        \"indices\": [0, 1, 2, 1, 3, 2],\n        \"subMeshes\": [{\n            \"materialIndex\": 0,\n            \"verticesStart\": 0,\n            \"verticesCount\": 4,\n            \"indexStart\": 0,\n            \"indexCount\": 6\n        }]\n    },\n    {\n        \"name\": \"Cube\",\n        \"id\": \"Cube\",\n        \"materialId\": \"Material\",\n        \"geometryId\": \"CubeGeometry\",\n        \"position\": [0, 0, 0],\n        \"rotation\": [0, 0, 0],\n        \"scaling\": [1, 1, 1],\n        \"isVisible\": true,\n        \"isEnabled\": true,\n        \"checkCollisions\": false,\n        \"billboardMode\": 0,\n        \"receiveShadows\": false,\n        \"subMeshes\": [{\n            \"materialIndex\": 0,\n            \"verticesStart\": 0,\n            \"verticesCount\": 29,\n            \"indexStart\": 0,\n            \"indexCount\": 36\n        }],\n        \"animations\": [{\n            \"dataType\": 1,\n            \"framePerSecond\": 30,\n            \"loopBehavior\": 1,\n            \"name\": \"position animation\",\n            \"property\": \"position\",\n            \"keys\": [{\n                \"frame\": 0,\n                \"values\": [0,0,0.0291]\n            },\n            {\n                \"frame\": 1,\n                \"values\": [0,0,0.0291]\n            },\n            {\n                \"frame\": 30,\n                \"values\": [0,0,10]\n            },\n            {\n                \"frame\": 60,\n                \"values\": [0,0,9.975]\n            },\n            {\n                \"frame\": 90,\n                \"values\": [0,0,0]\n            },\n            {\n                \"frame\": 250,\n                \"values\": [0,0,0]\n            }]\n        },\n        {\n            \"dataType\": 1,\n            \"framePerSecond\": 30,\n            \"loopBehavior\": 1,\n            \"name\": \"rotation animation\",\n            \"property\": \"rotation\",\n            \"keys\": [{\n                \"frame\": 0,\n                \"values\": [-0.016, 0, 0]\n            },\n            {\n                \"frame\": 30,\n                \"values\": [-0.016, 0, 0]\n            },\n            {\n                \"frame\": 60,\n                \"values\": [-6.2832, 0, 0]\n            },\n            {\n                \"frame\": 250,\n                \"values\": [-6.2832, 0, 0]\n            }]\n        }],\n        \"autoAnimate\": true,\n        \"autoAnimateFrom\": 0,\n        \"autoAnimateTo\": 250,\n        \"autoAnimateLoop\": true\n    },\n    {\n        \"name\": \"Cube2\",\n        \"id\": \"Cube2\",\n        \"materialId\": \"Material\",\n        \"geometryId\": \"CubeGeometry\",\n        \"position\": [10, 0, 0],\n        \"rotation\": [0, 0, 0],\n        \"scaling\": [1, 1, 1],\n        \"isVisible\": true,\n        \"isEnabled\": true,\n        \"checkCollisions\": false,\n        \"billboardMode\": 0,\n        \"receiveShadows\": false,\n        \"subMeshes\": [{\n            \"materialIndex\": 0,\n            \"verticesStart\": 0,\n            \"verticesCount\": 29,\n            \"indexStart\": 0,\n            \"indexCount\": 36\n        }]\n    }],\n    \"multiMaterials\": [],\n    \"shadowGenerators\": [{\n        \"useVarianceShadowMap\": true,\n        \"mapSize\": 1024,\n        \"lightId\": \"Sun\",\n        \"renderList\": [\"Cube\", \"Cube2\"]\n    }],\n    \"skeletons\": [],\n    \"sounds\": [{\n        \"name\": \"violons11.wav\",\n        \"volume\": 1,\n        \"autoplay\": true,\n        \"loop\": true,\n        \"soundTrackId\": 1,\n        \"spatialSound\": true,\n        \"position\": [0, 0, 0],\n        \"refDistance\": 1.0,\n        \"rolloffFactor\": 1.0,\n        \"maxDistance\": 100,\n        \"distanceModel\": \"linear\",\n        \"panningModel\": \"equalpower\",\n        \"isDirectional\": false,\n        \"coneInnerAngle\": 90,\n        \"coneOuterAngle\": 180,\n        \"coneOuterGain\": 0,\n        \"connectedMeshId\": 0,\n        \"localDirectionToMesh\": [1, 0, 0]\n   }]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple glTF Assets in Parallel with Promise.all in Babylon.js (JavaScript)\nDESCRIPTION: This code sample demonstrates parallel asynchronous loading of multiple glTF 3D assets using Promise.all in Babylon.js. Two assets are imported with BABYLON.ImportMeshAsync and their meshes are positioned and scaled upon load completion. After both loads resolve, the scene adds a default camera or light and modifies the camera angle. Dependencies: Babylon.js, a valid engine and scene, and Internet access for asset URLs. Outputs include a scene with two loaded and transformed meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/promises.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst scene = new BABYLON.Scene(engine);\n\nconst baseUrl = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/\";\n\nPromise.all([\n  BABYLON.ImportMeshAsync(baseUrl + \"BoomBox/glTF/BoomBox.gltf\", scene).then(function (result) {\n    result.meshes[0].position.x = 0.01;\n  }),\n  BABYLON.ImportMeshAsync(baseUrl + \"Avocado/glTF/Avocado.gltf\", scene).then(function (result) {\n    result.meshes[0].position.x = -0.01;\n    result.meshes[0].position.y = -0.01;\n    result.meshes[0].scaling.scaleInPlace(0.25);\n  }),\n]).then(() => {\n  scene.createDefaultCameraOrLight(true, true, true);\n  scene.activeCamera.alpha += Math.PI;\n});\n```\n\n----------------------------------------\n\nTITLE: Default Physics Engine Initialization\nDESCRIPTION: Shows simplified physics engine initialization with default parameters\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingPhysicsEngine.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.enablePhysics();\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints Between Instanced Physics Bodies in Babylon.js\nDESCRIPTION: This snippet shows how to apply constraints between specific instances of physics bodies. It demonstrates adding a constraint between different instances of two bodies as well as between two instances of the same body.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/constraints.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This will add a constraint between the instance in index 3 of body A, and the instance in index 2 of body B\nbodyA.addConstraint(bodyB, constraint, 3, 2);\n// The constraint can also be between two instances in the same body\nbodyA.addConstraint(bodyA, constraint, 4, 7);\n```\n\n----------------------------------------\n\nTITLE: Aligning Mesh Rotation using RotationFromAxis in Babylon.js\nDESCRIPTION: This snippet demonstrates the basic usage of `BABYLON.Vector3.RotationFromAxis` to calculate the Euler angles required to align a mesh's local x, y, and z axes with three provided orthogonal vectors (`axis1`, `axis2`, `axis3`). The resulting orientation vector (containing Euler angles) is then assigned to the mesh's `rotation` property. Requires the Babylon.js library and three `BABYLON.Vector3` instances forming a left-handed orthogonal basis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/target_align.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar orientation = BABYLON.Vector3.RotationFromAxis(axis1, axis2, axis3);\nmesh.rotation = orientation;\n```\n\n----------------------------------------\n\nTITLE: Applying Forces and Impulses to Physics Bodies in Babylon.js\nDESCRIPTION: Demonstrates how to apply forces and impulses to physics bodies in world space. Forces provide continuous effects over time, while impulses apply instantaneous velocity changes. Both methods require specifying the direction/magnitude vector and the application point in world space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/forces.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbody.applyForce(\n    new BABYLON.Vector3(0, 10, 0), // direction and magnitude of the applied force\n    new BABYLON.Vector3(0, 0, 0) // point in WORLD space where the force will be applied    \n);\n\n// .... OR .....\n\nbody.applyImpulse(\n    new BABYLON.Vector3(0, 10, 0), // direction and magnitude of the applied impulse\n    new BABYLON.Vector3(0, 0, 0) // point in WORLD space where the impulse will be applied    \n);\n```\n\n----------------------------------------\n\nTITLE: Complete Shadow Setup in Babylon.js\nDESCRIPTION: Demonstrates the complete setup for shadows in a scene, including creating the shadow generator, adding a shadow caster (dude), and setting the ground as a shadow receiver.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/shadows.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\n\nshadowGenerator.addShadowCaster(dude, true);\n\nground.receiveShadows = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Explosion Particle Systems in Babylon.js\nDESCRIPTION: This code configures the particle system for each explosion fragment. It sets properties like texture, size, color, lifetime, gravity, direction, and emission power to create a realistic firework explosion effect with particles flying outward.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//actual particle system for each exploding piece\nconst particleSys = new ParticleSystem(\"particles\", 500, this._scene);\nparticleSys.particleTexture = new Texture(\"textures/flare.png\", this._scene);\nparticleSys.emitter = gizmo;\nparticleSys.minEmitBox = new Vector3(1, 0, 0);\nparticleSys.maxEmitBox = new Vector3(1, 0, 0);\nparticleSys.minSize = 0.1;\nparticleSys.maxSize = 0.1;\nparticleSys.color1 = color;\nparticleSys.color2 = color;\nparticleSys.colorDead = new Color4(0, 0, 0, 0.0);\nparticleSys.minLifeTime = 1;\nparticleSys.maxLifeTime = 2;\nparticleSys.emitRate = 500;\nparticleSys.gravity = new Vector3(0, -9.8, 0);\nparticleSys.direction1 = direction;\nparticleSys.direction2 = direction;\nparticleSys.minEmitPower = 10;\nparticleSys.maxEmitPower = 13;\nparticleSys.updateSpeed = 0.01;\nparticleSys.targetStopDuration = 0.2;\nparticleSys.disposeOnStop = true;\nparticleSys.start(); //automatically start once created\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Morph Targets to a Sphere in Babylon.js\nDESCRIPTION: This comprehensive example demonstrates creating a main sphere and several other spheres to serve as morph targets. Some target spheres have their vertices scrambled or are scaled and baked. A `MorphTargetManager` is created and assigned to the main sphere. Then, `MorphTarget` objects are created from the modified spheres using `FromMesh` and added to the manager using `addTarget`. Each target is initialized with an influence of 0.25.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst scramble = function (data) {\n  for (index = 0; index < data.length; index++) {\n    data[index] += 0.1 * Math.random();\n  }\n};\n\n// Main sphere\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\n\n// Let's create some targets\nconst sphere2 = BABYLON.MeshBuilder.CreateSphere(\"sphere2\", { segments: 16, diameter: 2 }, scene);\nsphere2.setEnabled(false);\nsphere2.updateMeshPositions(scramble);\n\nconst sphere3 = BABYLON.MeshBuilder.CreateSphere(\"sphere3\", { segments: 16, diameter: 2 }, scene);\nsphere3.setEnabled(false);\n\nsphere3.scaling = new BABYLON.Vector3(2.1, 3.5, 1.0);\nsphere3.bakeCurrentTransformIntoVertices();\n\nconst sphere4 = BABYLON.MeshBuilder.CreateSphere(\"sphere4\", { segments: 16, diameter: 2 }, scene);\nsphere4.setEnabled(false);\nsphere4.updateMeshPositions(scramble);\n\nconst sphere5 = BABYLON.MeshBuilder.CreateSphere(\"sphere5\", { segments: 16, diameter: 2 }, scene);\nsphere5.setEnabled(false);\n\nsphere5.scaling = new BABYLON.Vector3(1.0, 0.1, 1.0);\nsphere5.bakeCurrentTransformIntoVertices();\n\n// Create a manager and affect it to the sphere\nconst manager = new BABYLON.MorphTargetManager();\nsphere.morphTargetManager = manager;\n\n// Add the targets\nconst target0 = BABYLON.MorphTarget.FromMesh(sphere2, \"sphere2\", 0.25);\nmanager.addTarget(target0);\n\nconst target1 = BABYLON.MorphTarget.FromMesh(sphere3, \"sphere3\", 0.25);\nmanager.addTarget(target1);\n\nconst target2 = BABYLON.MorphTarget.FromMesh(sphere4, \"sphere4\", 0.25);\nmanager.addTarget(target2);\n\nconst target3 = BABYLON.MorphTarget.FromMesh(sphere5, \"sphere5\", 0.25);\nmanager.addTarget(target3);\n```\n\n----------------------------------------\n\nTITLE: Setting Specular Lightmap Mode in Babylon.js\nDESCRIPTION: This code sets a light's lightmap mode to LIGHTMAP_SPECULAR, where only the specular lighting and shadows from the light will be applied with the lightmap.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlight.lightmapMode = BABYLON.Light.LIGHTMAP_SPECULAR;\n```\n\n----------------------------------------\n\nTITLE: Creating Hermite Spline - Babylon.js - JavaScript\nDESCRIPTION: This snippet creates a Hermite spline in 3D using BABYLON.Curve3.CreateHermiteSpline with start and end positions and corresponding tangent vectors, and a number of interpolation points. Returns a Curve3 object sampling the Hermite polynomial curve, often used in smooth animation paths or procedural shapes. Prerequisites: BABYLON.Curve3, four Vector3 objects, and nbPoints integer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst hermite = BABYLON.Curve3.CreateHermiteSpline(p1, t1, p2, t2, nbPoints);\n```\n\n----------------------------------------\n\nTITLE: Handling Gamepad Input Events in Babylon.js\nDESCRIPTION: Demonstrates how to set up event listeners for gamepad button presses and joystick movements in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/gamepads.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngamepadManager.onGamepadConnectedObservable.add((gamepad, state)=>{\n    gamepad.onButtonDownObservable.add((button, state)=>{\n        //Button has been pressed\n        console.log(button)\n    })\n    gamepad.onleftstickchanged((values)=>{\n        //Left stick has been moved\n        console.log(values.x+\" \"+values.y)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Mesh using Local Space Methods in Babylon.js - JavaScript\nDESCRIPTION: This snippet shows how to translate a mesh using its local space, where the result depends on the mesh's orientation, in Babylon.js JavaScript. Requires a mesh object and the BABYLON.Vector3 class. 'mesh.translate' and 'mesh.locallyTranslate' move the mesh relative to its local axes; 'mesh.setPositionWithLocalVector' sets its position using a local vector. Inputs: direction/position vectors. Output: mesh position updated according to current rotation. Rotation affects the final world position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/position.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.translate(new BABYLON.Vector3(2, 3, 4), 1, BABYLON.Space.LOCAL);\nmesh.setPositionWithLocalVector(new BABYLON.Vector3(2, 3, 4));\nmesh.locallyTranslate(new BABYLON.Vector3(2, 3. 4));\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript and Webpack Dev Dependencies - Bash\nDESCRIPTION: This snippet installs the core TypeScript and Webpack development dependencies needed for compiling and bundling a TypeScript project. It uses npm to add typescript, webpack, ts-loader, and webpack-cli as dev dependencies. These packages are required for TypeScript code compilation and Webpack's build process. Run this command in the project root to set up the environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript webpack ts-loader webpack-cli\n```\n\n----------------------------------------\n\nTITLE: Setting Keyframes for a Babylon.js Animation\nDESCRIPTION: This code defines the keyframes for an animation in Babylon.js. It creates an array of objects where each object specifies a frame number and the corresponding value for the animated property at that frame, then assigns these keyframes to the animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_design.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst keyFrames = [];\n\nkeyFrames.push({\n  frame: 0,\n  value: 2,\n});\n\nkeyFrames.push({\n  frame: frameRate,\n  value: -2,\n});\n\nkeyFrames.push({\n  frame: 2 * frameRate,\n  value: 2,\n});\n\nxSlide.setKeys(keyFrames);\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Collision Ellipsoid in TypeScript\nDESCRIPTION: Continuing within the character asset loading logic, this snippet sets the `ellipsoid` and `ellipsoidOffset` properties on the outer collision mesh. These properties define the capsule shape used for more accurate physics-based collision detection. It also applies a rotation to orient the mesh correctly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//for collisions\nouter.ellipsoid = new Vector3(1, 1.5, 1);\nouter.ellipsoidOffset = new Vector3(0, 1.5, 0);\n\nouter.rotationQuaternion = new Quaternion(0, 1, 0, 0); // rotate the player mesh 180 since we want to see the back of the player\n```\n\n----------------------------------------\n\nTITLE: Setting the Base URL for Custom Particle Sets in JavaScript\nDESCRIPTION: Illustrates how to configure the base URL from which custom particle set JSON files will be loaded. This static property `BABYLON.ParticleHelper.BaseAssetsUrl` must be set before calling `CreateAsync` with a custom particle set type.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particleHelper.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ParticleHelper.BaseAssetsUrl = “https://yourBaseUrl”;\n```\n\n----------------------------------------\n\nTITLE: Implementing First Contact Detection Between Two Moving Spheres in JavaScript\nDESCRIPTION: This playground demonstrates how to detect when two moving spheres first make contact. It shows their paths and positions at the moment of first contact. The start positions and velocities can be customized on lines 35-38.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Free_Collide.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#A4HZTV\" title=\"First Contact\" description=\"Two moving spheres showing their paths and their positions at first contact.\"/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Hand Meshes in WebXR\nDESCRIPTION: Shows how to disable the default hand meshes in Babylon.js WebXR hand tracking. This allows for custom visualization of hand tracking points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  jointMeshes: {\n    disableDefaultHandMesh: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Pre-Step Update in Babylon.js Physics (JavaScript)\nDESCRIPTION: This snippet demonstrates how to temporarily enable the pre-step synchronization for a physics body in Babylon.js. By setting \"body.disablePreStep\" to false before updating the node's transform, the new position is properly pushed to the physics engine for one frame. After rendering, the handler re-disables the pre-step to regain optimal performance. This pattern avoids unnecessary object allocations and leverages Babylon.js's event observables. Dependencies: Babylon.js scene and physics-enabled bodies. Inputs: the specific body and its transform node. Outputs: an efficiently repositioned physics body. Limitations: changing the transform alone is not enough unless the pre-step is enabled for the update frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/perfTips.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbody.disablePreStep = false;\\n// The position where you want to move the body to\\nbody.transformNode.position.set(1, 2, 3);\\nscene.onAfterRenderObservable.addOnce(() => {\\n    // Turn disablePreStep on again for maximum performance\\n    body.disablePreStep = true;\\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Global Illumination (GI) - Markdown\nDESCRIPTION: Provides a technical definition and context for Global Illumination (GI) as used in 3D computer graphics, useful for documentation and developer onboarding. Explains the difference between direct and indirect illumination, reflections, refractions, and shadows as examples of GI. Suitable for inclusion in markdown-based docs for clear understanding of GI principles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/rsmgi.md#2025-04-23_snippet_0\n\nLANGUAGE: md\nCODE:\n```\nGlobal illumination (GI), or indirect illumination, is a group of algorithms used in 3D computer graphics that are meant to add more realistic lighting to 3D scenes. Such algorithms take into account not only the light that comes directly from a light source (direct illumination), but also subsequent cases in which light rays from the same source are reflected by other surfaces in the scene, whether reflective or not (indirect illumination).\n\nTheoretically, reflections, refractions, and shadows are all examples of global illumination, because when simulating them, one object affects the rendering of another (as opposed to an object being affected only by a direct source of light). In practice, however, only the simulation of diffuse inter-reflection or caustics is called global illumination.\n```\n\n----------------------------------------\n\nTITLE: Calculating UV Coordinates for a Custom Mesh in Babylon.js\nDESCRIPTION: This snippet demonstrates how to calculate UV coordinates for a custom mesh based on its vertex positions. It uses the mesh's bounding dimensions to compute fractional UV values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nu = (x - a) / w and v = (z - b) / h\n```\n\n----------------------------------------\n\nTITLE: Assigning Position and Size Properties in Babylon.js GUI (JavaScript)\nDESCRIPTION: Demonstrates how to set the position and size of Babylon.js GUI controls in JavaScript using pixel or percentage units. Properties such as left, top, width, and height are assigned strings with unit suffixes (e.g., '50px', '50%') or with numbers (interpreted as percentages by default). No external library is necessary beyond Babylon.js GUI support, and parameters are simple string or numeric values. This assignment pattern affects the rendered control layout and supports responsive UI design.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.left = \"50px\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.left = \"50%\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.width = 0.5; // equivalent to control.width = \"50%\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Falloff Exponent in SSR Post-Process for Babylon.js\nDESCRIPTION: This code demonstrates how to adjust the falloff exponent in the Screen Space Reflection post-process. The falloff exponent is used to linearly reduce the reflection's intensities, with a default value of 3.0.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/screenSpaceReflectionsPostProcess.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Reduce more the reflection's intensities\nssr.reflectionSpecularFalloffExponent = 4;\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await for Asynchronous Scene Loading in Babylon.js (JavaScript)\nDESCRIPTION: This snippet uses ES2017 async/await syntax for cleaner asynchronous code in Babylon.js. Inside an async main function, it creates a scene, awaits the XR experience setup, and awaits the appending of a scene asset. Dependencies include Babylon.js, an engine, and ES2017+ or a transpiler/polyfill for browser compatibility. Takes a scene and engine as inputs; output is a promise for further chaining when asset loading is complete.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/promises.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async function () {\n  const scene = new BABYLON.Scene(engine);\n  const xrPromise = await scene.createDefaultXRExperienceAsync();\n  return BABYLON.AppendSceneAsync(\"https://playground.babylonjs.com/scenes/skull.babylon\", scene);\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing a Follow Camera in Babylon.js\nDESCRIPTION: Creates a Follow Camera, sets its properties like radius, height offset, and rotation offset. It also demonstrates how to attach the camera to the canvas and set its target.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters: name, position, scene\nconst camera = new BABYLON.FollowCamera(\"FollowCam\", new BABYLON.Vector3(0, 10, -10), scene);\n\n// The goal distance of camera from target\ncamera.radius = 30;\n\n// The goal height of camera above local origin (centre) of target\ncamera.heightOffset = 10;\n\n// The goal rotation of camera around local origin (centre) of target in x y plane\ncamera.rotationOffset = 0;\n\n// Acceleration of camera in moving from current to goal position\ncamera.cameraAcceleration = 0.005;\n\n// The speed at which acceleration is halted\ncamera.maxCameraSpeed = 10;\n\n// This attaches the camera to the canvas\ncamera.attachControl(canvas, true);\n\n// NOTE:: SET CAMERA TARGET AFTER THE TARGET'S CREATION AND NOTE CHANGE FROM BABYLONJS V 2.5\n// targetMesh created here.\ncamera.target = targetMesh; // version 2.4 and earlier\ncamera.lockedTarget = targetMesh; //version 2.5 onwards\n```\n\n----------------------------------------\n\nTITLE: Custom Post-Process Creation in BabylonJS\nDESCRIPTION: Creates a custom post-process instance with specified parameters including shader path, uniforms, and sampling configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.PostProcess(\"Down sample\", \"./Scenes/Customs/postprocesses/downsample\", [\"screenSize\", \"highlightThreshold\"], null, 0.25, camera);\n```\n\n----------------------------------------\n\nTITLE: Loading and Animating a Skeleton in Babylon.js\nDESCRIPTION: Demonstrates how to load a mesh with a skeleton from a .babylon file and start a skeleton animation. The animation loops from frame 0 to 100 with a speed factor of 1.0.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"scenes/Dude/Dude.babylon\", scene, { meshNames: \"him\" }).then(function (result) {\n  scene.createDefaultCameraOrLight(true, true, true);\n  scene.createDefaultEnvironment();\n\n  scene.beginAnimation(result.skeletons[0], 0, 100, true, 1.0);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Shader Function in GLSL\nDESCRIPTION: This GLSL snippet illustrates the mandatory structure for the main entry point function in both Vertex and Fragment shaders. The function must be named `main`, return `void` (no value), and accept `void` (no parameters). All shader execution begins within this function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/introToShaders.md#2025-04-23_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main(void) {\n\t*code*\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebXR State Changes in JavaScript\nDESCRIPTION: Shows how to use the state observable to track changes in the WebXR session state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nxrHelper.onStateChangedObservable.add((state) => {\n    switch (state) {\n        case WebXRState.IN_XR:\n            // XR is initialized and already submitted one frame\n        case WebXRState.ENTERING_XR:\n            // xr is being initialized, enter XR request was made\n        case WebXRState.EXITING_XR:\n            // xr exit request was made. not yet done.\n        case WebXRState.NOT_IN_XR:\n            // self explanatory - either out or not yet in XR\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Built-in Loaders Dynamically (TypeScript)\nDESCRIPTION: Demonstrates how to register all supported Babylon.js loaders dynamically using NPM package @babylonjs/loaders. This method only loads specific importers when needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerBuiltInLoaders } from \"@babylonjs/loaders/dynamic\";\n...\nregisterBuiltInLoaders();\n```\n\n----------------------------------------\n\nTITLE: Adding Vertex Colors to a Custom Mesh in Babylon.js\nDESCRIPTION: This code snippet shows how to add vertex colors to a custom mesh in Babylon.js. It defines an array of color values and applies them to the mesh's vertex data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar colors = [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1];\n\nvar vertexData.colors = colors;\n```\n\n----------------------------------------\n\nTITLE: Combining Continuous Rotation with Sliding in BabylonJS\nDESCRIPTION: Demonstrates how to combine multiple animations to run simultaneously after an initial animation sequence.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/combineAnimations.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextAnimation = function () {\n  scene.beginDirectAnimation(box, [yRot, xSlide], 0, 2 * frameRate, true);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle Ease Animation in Babylon.js\nDESCRIPTION: Creates a Vector3 animation for a torus using CircleEase function with custom easing mode. Demonstrates animation setup, key frame definition, and easing function application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//Create a Vector3 animation at 30 FPS\nconst animationTorus = new BABYLON.Animation(\"torusEasingAnimation\", \"position\", 30, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n\n// the torus destination position\nconst nextPos = torus.position.add(new BABYLON.Vector3(-80, 0, 0));\n\n// Animation keys\nconst keysTorus = [];\nkeysTorus.push({ frame: 0, value: torus.position });\nkeysTorus.push({ frame: 120, value: nextPos });\nanimationTorus.setKeys(keysTorus);\n\n// Creating an easing function\nconst easingFunction = new BABYLON.CircleEase();\n\n// For each easing function, you can choose between EASEIN (default), EASEOUT, EASEINOUT\neasingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\n\n// Adding the easing function to the animation\nanimationTorus.setEasingFunction(easingFunction);\n\n// Adding animation to my torus animations collection\ntorus.animations.push(animationTorus);\n\n//Finally, launch animations on torus, from key 0 to key 120 with loop activated\nscene.beginAnimation(torus, 0, 120, true);\n```\n\n----------------------------------------\n\nTITLE: Using onHandAddedObservable for Hand Tracking in WebXR with BabylonJS\nDESCRIPTION: Shows the recommended way to handle hand tracking by subscribing to the onHandAddedObservable event. This approach allows responding to hands being detected and accessing their joint positions in real-time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHandFeature = featureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n});\n\nxrHandFeature.onHandAddedObservable.add((newHand) => {\n  // celebrate, we have a new hand!\n  scene.onBeforeRenderObservable.add(() => {\n    // get the real world wrist position on each frame\n    console.log(newHand.trackedMeshes[0].position);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the ICameraInput Interface for Custom Camera Control (TypeScript)\nDESCRIPTION: Specifies the TypeScript interface ICameraInput, which outlines the required structure for new custom camera inputs in Babylon.js, including methods for attaching/detaching, getting names, and optionally updating each frame via checkInputs. All custom input classes should implement this interface for full engine integration. Requires Babylon.js and applies generics for strong type safety to different Camera subclasses.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICameraInput<TCamera extends BABYLON.Camera> {\n  // the input manager will fill the parent camera\n  camera: TCamera;\n\n  //this function must return the class name of the camera, it could be used for serializing your scene\n  getClassName(): string;\n\n  //this function must return the simple name that will be injected in the input manager as short hand\n  //for example \"mouse\" will turn into camera.inputs.attached.mouse\n  getSimpleName(): string;\n\n  //this function must activate your input, event if your input does not need a DOM element\n  attachControl: (noPreventDefault?: boolean) => void;\n\n  //detach control must deactivate your input and release all pointers, closures or event listeners\n  detachControl: () => void;\n\n  //this optional function will get called for each rendered frame, if you want to synchronize your input to rendering,\n  //no need to use requestAnimationFrame. It's a good place for applying calculations if you have to\n  checkInputs?: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Materials in Babylon.js\nDESCRIPTION: Creates three standard materials with different properties to be used in a multi-material. The first has a red diffuse color with a bump texture, the second has a blue diffuse color, and the third has a purple emissive color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/multiMaterials.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst material0 = new BABYLON.StandardMaterial(\"mat0\", scene);\nmaterial0.diffuseColor = new BABYLON.Color3(1, 0, 0);\nmaterial0.bumpTexture = new BABYLON.Texture(\"normalMap.jpg\", scene);\n\nconst material1 = new BABYLON.StandardMaterial(\"mat1\", scene);\nmaterial1.diffuseColor = new BABYLON.Color3(0, 0, 1);\n\nconst material2 = new BABYLON.StandardMaterial(\"mat2\", scene);\nmaterial2.emissiveColor = new BABYLON.Color3(0.4, 0, 0.4);\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Tube Ribbon in Babylon.js\nDESCRIPTION: Generates a tube-shaped ribbon using parameterized equations for x, y, and z, demonstrating how to create a 3D cylindrical surface.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_maths.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst paths = [];\nfor (let t = -6; t <= 6; t++) {\n    const path = [];\n    for (let a = 0; a < 2 * Math.PI; a += Math.PI / 8) {\n        let x = 2 * Math.cos(a);\n        let y = 2 * Math.sin(a);\n        let z = t;\n        path.push(new BABYLON.Vector3(x, y, z))\n    }\n    path.push(path[0]); // close circle\n    paths.push(path)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Compute Shader Support in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to query the Babylon.js engine capabilities using `engine.getCaps().supportComputeShaders` to determine if compute shaders are supported. This check is necessary because compute shaders are exclusively a WebGPU feature in Babylon.js and not available in WebGL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nengine.getCaps().supportComputeShaders\n```\n\n----------------------------------------\n\nTITLE: Loading Node Material from Snippet URL Asynchronously using JavaScript\nDESCRIPTION: Shows JavaScript code to load a Babylon.js Node Material asynchronously using its unique snippet ID (e.g., '2F999G') obtained from the Node Material Editor's saving feature (unique URL). It utilizes `BABYLON.NodeMaterial.ParseFromSnippetAsync`, passing the snippet ID string and the scene object. The resulting promise resolves with the NodeMaterial, which is then assigned to a sphere's material property in this example.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.NodeMaterial.ParseFromSnippetAsync(\"2F999G\", scene).then((nodeMaterial) => {\n  sphere.material = nodeMaterial;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Ammo.js Physics\nDESCRIPTION: Setup code for enabling Ammo.js physics engine, including required async initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Ammo();\nscene.enablePhysics(new BABYLON.Vector3(0,-9.81, 0), new BABYLON.AmmoJSPlugin());\n```\n\n----------------------------------------\n\nTITLE: Configuring WoodProceduralTexture Properties in Babylon.js (JavaScript)\nDESCRIPTION: This example shows how to customize the appearance of a `WoodProceduralTexture` after its creation. It sets the `woodColor` property using a `BABYLON.Color3` object and adjusts the `ampScale` property using a `BABYLON.Vector2`. Assumes the `texture` variable holds a `WoodProceduralTexture` instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/proceduralTextures.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.woodColor = new BABYLON.Color3(0.49, 0.25, 0);\ntexture.ampScale = new BABYLON.Vector2(1.0, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Physics Engine with Cannon.js\nDESCRIPTION: Basic setup code for enabling physics in a Babylon.js scene using the Cannon.js physics plugin. Sets up gravity vector and initializes the physics engine.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = new BABYLON.Scene(engine);\nvar gravityVector = new BABYLON.Vector3(0,-9.81, 0);\nvar physicsPlugin = new BABYLON.CannonJSPlugin();\nscene.enablePhysics(gravityVector, physicsPlugin);\n```\n\n----------------------------------------\n\nTITLE: Applying a PBR Material to a 3D Object in Babylon.js\nDESCRIPTION: This code demonstrates how to apply a previously created PBR material to a 3D object (sphere) in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.material = pbr;\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js GUI Package using NPM - Bash\nDESCRIPTION: This snippet demonstrates how to install the Babylon.js GUI package via NPM. Run this command in your project directory to add @babylonjs/gui as a dependency, which allows the use of advanced GUI features in Babylon.js projects. The command should be executed in a shell or terminal; no additional parameters are required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/gui\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon Havok Plugin\nDESCRIPTION: Example of creating a scene and initializing the Havok plugin in Babylon.js\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingHavok.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createScene() {\n  const havokInstance = await HavokPhysics();\n  const havokPlugin = new BABYLON.HavokPlugin(true, havokInstance);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FXAA PostProcess in Babylon.js\nDESCRIPTION: Applies a full screen anti-aliasing filter to smooth edges.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.FxaaPostProcess(\"fxaa\", 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple GUI Slider in Babylon.js\nDESCRIPTION: Demonstrates how to add a basic GUI slider to a Babylon.js scene using the built-in GUI system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#NGS9AU\" title=\"Simple GUI Slider Example\" description=\"Simple example of adding a GUI slider to your scene.\" image=\"/img/playgroundsAndNMEs/divingDeeperGUI1.jpg\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Particle Function Signature in Babylon.js\nDESCRIPTION: Shows the required signature for a custom function that can be passed as the second parameter to `pcs.addPoints()`. This function allows setting properties like position and color for each particle individually. It receives the particle object, its overall index `i`, and its index within the current addPoints call `s`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar myFunc = function (particle, i, s) {\n  // particle is the current particle, the i-th one in the PCS and the s-th one in its group\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Extra Modules (e.g., Materials) - JavaScript\nDESCRIPTION: Illustrates importing specific exports (e.g., GridMaterial) from Babylon.js extra modules like '@babylonjs/materials'. This sample creates a new instance of GridMaterial for later use in a scene. Dependencies: The module must be installed via npm. Inputs: GridMaterial constructor parameters. Outputs: A new GridMaterial object. Additional required classes must also be imported in actual app code for a working example.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    GridMaterial\n} from '@babylonjs/materials';\n\nlet gridMaterial = new GridMaterial(.....)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Tiled Ground Mesh with Explicit Options in Babylon.js - JavaScript\nDESCRIPTION: This snippet initializes a tiled ground mesh using MeshBuilder with explicit use of option parameters for subdivision and precision. Requires Babylon.js, and that the parameters 'xmin', 'zmin', 'xmax', 'zmax', 'subdivisions', and 'precision' are defined in scope. The returned mesh can be used for any further material or submesh assignments. Inputs: mesh name, a detailed options object, and the Babylon.js scene object. Output: a mesh instance representing the tiled ground.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_ground.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tiledGround = BABYLON.MeshBuilder.CreateTiledGround(\"Tiled Ground\", {xmin, zmin, xmax, zmax, subdivisions, precision}, scene);\n```\n\n----------------------------------------\n\nTITLE: Playing a Simple Sound in Babylon.js\nDESCRIPTION: Shows how to create and play a non-streaming sound. The code creates an audio engine, loads a sound file, waits for the audio engine to be unlocked, and then plays the sound.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst audioEngine = await BABYLON.CreateAudioEngineAsync();\n\nconst gunshot = await BABYLON.CreateSoundAsync(\"gunshot\",\n    \"sounds/gunshot.wav\"\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\ngunshot.play()\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Events in Babylon.js\nDESCRIPTION: Demonstrates how to attach events to specific frames in an animation sequence.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst event1 = new BABYLON.AnimationEvent(\n  50,\n  function () {\n    console.log(\"Yeah!\");\n  },\n  true,\n);\n// Attach your event to your animation\nanimation.addEvent(event1);\n```\n\n----------------------------------------\n\nTITLE: Caching Animation References in Babylon.js for Watch Configuration\nDESCRIPTION: Caches references to all animations in the 3D model and ensures they start in the correct state. This preparation is necessary for later controlling the various animations during watch configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Cache useful animations.\nconst allAnimationGroups = this._scene.animationGroups;\nthis._screenOnOffGroup = allAnimationGroups.find((ag) => ag.name === \"screen_on_off\");\nthis._screenTransitionGroup = allAnimationGroups.find((ag) => ag.name === \"screen_transition\");\nthis._baseToStyleGroup = allAnimationGroups.find((ag) => ag.name === \"base_to_style\");\nthis._styleToColorGroup = allAnimationGroups.find((ag) => ag.name === \"style_to_color\");\nthis._colorToBaseGroup = allAnimationGroups.find((ag) => ag.name === \"color_to_base\");\n\n// Set up animation state.\nthis._screenOnOffGroup!.stop();\nthis._screenTransitionGroup!.stop();\nthis._baseToStyleGroup!.stop();\nthis._styleToColorGroup!.stop();\nthis._colorToBaseGroup!.stop();\n```\n\n----------------------------------------\n\nTITLE: Initializing a Rectangular Area Light in Babylon.js\nDESCRIPTION: Creates a new RectAreaLight instance. This light emits from a rectangular surface defined by its position, width, and height, towards the local -Z direction. It requires a name, position vector, width, height, and the scene. Note: StandardMaterial reflects light based on 'roughness' for this light type, and it currently does not cast shadows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst light = new BABYLON.RectAreaLight(\"areaLight\", new BABYLON.Vector3(0, 1, 0), 2, 2, scene);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Mesh Clones in Babylon.js\nDESCRIPTION: Demonstrates creating a box mesh and its clone with different positions. The clones share geometry but can have independent transformations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/clones.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst box1 = BABYLON.MeshBuilder.CreateBox(\"box1\", {height: 1, width: 0.75, depth: 0.25, updatable: true});\nconst box2 = box1.clone(\"box2\");\nbox1.position.x = -1;\nbox2.position.x = 1;\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing the Babylon.js Audio Engine\nDESCRIPTION: Demonstrates how to create and initialize the Babylon.js audio engine asynchronously. The code creates an audio engine, waits for it to be unlocked (which requires user interaction in most browsers), and then allows for sound playback.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n    const audioEngine = await BABYLON.CreateAudioEngineAsync();\n\n    // Create sounds here, but don't call `play()` on them, yet ...\n\n    // Wait until audio engine is ready to play sounds.\n    await audioEngine.unlockAsync();\n\n    // Start sound playback ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing Scene Optimizer with Basic Options in JavaScript\nDESCRIPTION: Creates a new SceneOptimizer instance with hardware scaling optimization. Demonstrates basic setup with options configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/sceneOptimizer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = new BABYLON.SceneOptimizerOptions();\noptions.addOptimization(new BABYLON.HardwareScalingOptimization(0, 1));\n\n// Optimizer\nvar optimizer = new BABYLON.SceneOptimizer(scene, options);\n```\n\n----------------------------------------\n\nTITLE: Applying Node Material to Mesh\nDESCRIPTION: Demonstrates how to apply a Node Material to a mesh in the scene\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmyMesh.material = nodeMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized Torus Mesh in Babylon.js\nDESCRIPTION: This code snippet shows how to create a torus mesh with specific parameters using BABYLON.MeshBuilder.CreateTorus(). It demonstrates passing options for diameter, thickness, tessellation, updatable status, and side orientation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/torus.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst torus = BABYLON.MeshBuilder.CreateTorus(\"torus\", {diameter, thickness, tessellation, updatable, sideOrientation}, scene);\n```\n\n----------------------------------------\n\nTITLE: Registering InterpolateValueAction on Mesh Pick in Babylon.js\nDESCRIPTION: Shows how to register an action that triggers when a mesh is picked (clicked/touched) using `BABYLON.ActionManager.OnPickTrigger`. This specific example uses `BABYLON.InterpolateValueAction` to animate the `diffuse` property of a `light` object to black (`BABYLON.Color3.Black()`) over a duration of 1000ms. Requires an initialized `actionManager` on the mesh, a `light` object, and the `BABYLON` namespace.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, light, \"diffuse\", BABYLON.Color3.Black(), 1000));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Scene Definition\nDESCRIPTION: TypeScript version of the scene creation code with type annotations\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_1.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst createScene = (canvas: Scene) => {\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic GPU Picking in Babylon.js\nDESCRIPTION: This code demonstrates how to set up and use a GPU picker for efficient mesh selection. It creates a picker, sets a list of meshes to be picked, and handles pointer events to perform asynchronous picking operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar picker = new BABYLON.GPUPicker();\npicker.setPickingList(myMeshes);\n\nscene.onPointerObservable.add(() => {\n  if (picker.pickingInProgress) {\n    return;\n  }\n  picker.pickAsync(scene.pointerX, scene.pointerY, scene, false).then((pickingInfo) => {\n    if (pickingInfo) {\n      console.log(pickingInfo.mesh.name);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fitting Text to an Area with Dynamic Texture in Babylon.js\nDESCRIPTION: Calculates the appropriate font size to fit text within a specified area by creating a dynamic texture sized proportionally to a plane and measuring the text width to determine the optimal font size.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst DTWidth = planeWidth * 60;\nconst DTHeight = planeHeight * 60;\nconst dynamicTexture = new BABYLON.DynamicTexture(\"DynamicTexture\", { width: DTWidth, height: DTHeight }, scene);\n\nconst ctx = dynamicTexture.getContext();\nconst size = 12; //any value will work\nctx.font = size + \"px \" + font_type;\nconst textWidth = ctx.measureText(text).width;\n\nconst ratio = textWidth / size;\n\nconst font_size = Math.floor(DTWidth / ratio);\n\nconst font = font_size + \"px \" + font_type;\ndynamicTexture.drawText(text, null, null, font, \"#000000\", \"#ffffff\", true);\n\nconst mat = new BABYLON.StandardMaterial(\"mat\", scene);\nmat.diffuseTexture = dynamicTexture;\nplane.material = mat;\n```\n\n----------------------------------------\n\nTITLE: Configuring Gamepad Input Sensitivity in Babylon.js\nDESCRIPTION: Example of adding and configuring gamepad input sensitivity for a FreeCamera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FreeCamera(\"sceneCamera\", new BABYLON.Vector3(0, 1, -15), scene);\ncamera.inputs.add(new BABYLON.FreeCameraGamepadInput());\ncamera.inputs.attached.gamepad.gamepadAngularSensibility = 250;\n```\n\n----------------------------------------\n\nTITLE: Creating Height Field Shape in BabylonJS\nDESCRIPTION: Creates a height field shape from a height map, useful for terrain collision. Provides efficient terrain physics simulation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap(\"g\", \"https://image.jpeg\", {\n        subdivisions,\n        width: size,\n        height: size,\n        maxHeight: 5,\n        passHeightBufferInCallback: true,\n        onReady: (mesh, heightBuffer) => {\n            var shape = new BABYLON.PhysicsShapeHeightField(\n                    size,\n                    size,\n                    subdivisions+1,\n                    subdivisions+1,\n                    heightBuffer\n                , scene);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Skeleton Map Shader in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to create a SkeletonMap shader material using the static method `BABYLON.Debug.SkeletonViewer.CreateSkeletonMapShader`. This shader visualizes bone influences across a mesh using unique colors for each bone. It requires an options object and the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet mapShader = BABYLON.Debug.SkeletonViewer.CreateSkeletonMapShader(options, scene);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Babylon.js GUI Layout with Dynamic Attributes (XML)\nDESCRIPTION: This XML snippet shows how to use dynamic attributes via double curly brackets (e.g., {{textWidth}}) for width or event binding, allowing runtime injection from class attributes or global variables. Demonstrates data-driven attributes and event handling for interactive GUIs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\"?>\\n<root>\\n    <Rectangle name=\\\"firstContainer\\\" id=\\\"firstContainer\\\" verticalAlignment=\\\"Control.HORIZONTAL_ALIGNMENT_TOP\\\" background=\\\"blue\\\" id=\\\"popupContainer\\\" width=\\\".8\\\" height=\\\".4\\\" color=\\\"Orange\\\" >\\n        <InputText id=\\\"inputText1\\\" width=\\\"{{textWidth}}\\\" maxWidth=\\\"0.3\\\"  height=\\\"40px\\\" color=\\\"white\\\"/>\\n        <Button id=\\\"helloButton\\\" width=\\\"0.2\\\" verticalAlignment=\\\"Control.VERTICAL_ALIGNMENT_BOTTOM\\\" height=\\\"0.2\\\" name=\\\"helloButton\\\" background=\\\"green\\\" onPointerUpObservable=\\\"storeUsernameEvent\\\" >\\n            <TextBlock  text=\\\"Store Input\\\" color = \\\"white\\\" />\\n        </Button>\\n    </Rectangle>\\n</root>\n```\n\n----------------------------------------\n\nTITLE: Extracting Points and Length from Catmull-Rom Spline - Babylon.js - JavaScript\nDESCRIPTION: This code demonstrates how to sample all points from a Catmull-Rom spline and compute its total length, providing mesh path data for Babylon.js procedural modeling. 'catmullRom' must be a Curve3 Catmull-Rom instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = catmullRom.getPoints();\nconst l = catmullRom.length();\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Position Method\nDESCRIPTION: Method to update a mesh's position by name using Vector3 coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n  setPosition: function(name, x, y, z) {\n    const mesh = this.scene.getMeshByName(name);\n    if (mesh) {\n      mesh.position = new Vector3(x, y, z);\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Opening Node Material in Debug Layer\nDESCRIPTION: Demonstrates how to open the Node Material in the scene's debug layer for editing\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nscene.debugLayer.show();\nscene.debugLayer.select(nodeMaterial);\n```\n\n----------------------------------------\n\nTITLE: Implementing Xbox Live Authentication in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to implement Xbox Live authentication in a Babylon.js project. It includes a TestSceneController class with a method for handling user sign-in, checking if the user is already signed in, and displaying appropriate messages.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/10_WindowsPlatform.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule PROJECT {\n    export class TestSceneController extends BABYLON.MeshComponent {\n        public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {\n            super(owner, scene, tick, propertyBag);\n        }\n        protected onSignInButton() :void {\n            if (BABYLON.SceneManager.IsXboxLivePluginEnabled()) {\n                var player:BABYLON.PlayerNumber.One = BABYLON.PlayerNumber.One;\n                if (!BABYLON.SceneManager.IsXboxLiveUserSignedIn(null, player)) {\n\n                    BABYLON.SceneManager.XboxLiveUserSignIn(player, (result: Microsoft.Xbox.Services.System.SignInResult) => {\n                        var user = BABYLON.SceneManager.GetXboxLiveUser(player);\n                        var msg = \"(\" + user.xboxUserId + \") - \" + user.gamertag;\n                        BABYLON.SceneManager.Alert(msg, \"Xbox Live User Signed In\");\n                    }, (err)=>{\n                        console.log(err);\n                        var msg:string = \"Encountered Sign Error\";\n                        BABYLON.Tools.Warn(msg);\n                        BABYLON.SceneManager.Alert(msg, \"Xbox Live Warning\");\n                    });\n\n                } else {\n                    BABYLON.Tools.Warn(\"Xbox Live User Already Signed In\");\n                    BABYLON.SceneManager.Alert(\"User Already Signed In\", \"Xbox Live Warning\");\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Lottie Animation Playback\nDESCRIPTION: Examples of controlling Lottie animation playback using the lottieAnimation property methods\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/lottieTexture.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet lottieTexture = await LottieTexture.LoadFromUrlAsync(\"name\", \"/lottie.json\", scene, {} /*option*/)\n\nlottieTexture.lottieAnimation.play()\nlottieTexture.lottieAnimation.pause()\nlottieTexture.lottieAnimation.currentFrame()\n//....\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics for Hand Joints in WebXR with BabylonJS\nDESCRIPTION: Demonstrates how to enable physics for all 25 tracked joint points of each hand. This allows hand joints to interact with physical objects in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  jointMeshes: {\n    enablePhysics: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing the AssetsManager in Babylon.js (JavaScript)\nDESCRIPTION: Instantiates a new AssetsManager object, which is the entry point for managing the loading of assets into a Babylon.js scene. Requires an existing 'scene' object as a parameter. No outputs are produced; this manager instance is needed for subsequent asset loading tasks. Dependencies: Babylon.js library and a valid scene instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetsManager = new BABYLON.AssetsManager(scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing GPUParticleSystem with Custom Random Texture Size (JavaScript)\nDESCRIPTION: Shows how to initialize a `BABYLON.GPUParticleSystem` while specifying a custom size for the internal random texture used by the GPU shaders for particle animation randomness. The `randomTextureSize` option is set to 4096, potentially reducing memory usage compared to the default size (16K). This texture compensates for the lack of efficient random number generation on the GPU.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/gpu_particles.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar particleSystem = new BABYLON.GPUParticleSystem(\"particles\", { capacity:1000000, randomTextureSize: 4096 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating WebXR Default Experience in JavaScript\nDESCRIPTION: Shows how to create a WebXR Default Experience using the scene's helper function or the WebXRDefaultExperience class.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar defaultXRExperience = await scene.createDefaultXRExperienceAsync( /* optional configuration options */ );\n\n// or:\n\nvar defaultXRExperience = await WebXRDefaultExperience.CreateAsync(scene, /* optional configuration options */ )\n```\n\n----------------------------------------\n\nTITLE: Starting Direct Animation in Babylon.js\nDESCRIPTION: Applies one or more animations directly to a target without storing them on the target object. This method is useful for one-time animations or for animating objects that don't have an animations array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.beginDirectAnimation(target, animations, from, to, loop);\n```\n\n----------------------------------------\n\nTITLE: Creating and Building a Solid Particle System with Babylon.js (JavaScript)\nDESCRIPTION: This code sample demonstrates how to create a Solid Particle System (SPS) in Babylon.js, add multiple mesh shapes (both spheres and polyhedrons) as particles, and build the final mesh. It assumes that Babylon.js is loaded in the environment and that a scene variable exists. The code also showcases good practice by disposing the temporary mesh instances after use to free up memory. Inputs include mesh models and the number of particles for each type; output is a single updatable mesh that contains all particles at the origin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_intro.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst SPS = new SolidParticleSystem(\"SPS\", scene); // scene is required\\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"s\", {});\\nconst poly = BABYLON.MeshBuilder.CreatePolyhedron(\"p\", { type: 2 }, scene);\\nSPS.addShape(sphere, 20); // 20 spheres\\nSPS.addShape(poly, 120); // 120 polyhedrons\\nSPS.addShape(sphere, 80); // 80 other spheres\\nsphere.dispose(); //free memory\\npoly.dispose(); //free memory\\n\\nconst mesh = SPS.buildMesh(); // finally builds and displays the SPS mesh\n```\n\n----------------------------------------\n\nTITLE: Creating a GreasedLine Using Instance Mode in JavaScript\nDESCRIPTION: Demonstrates creating a second GreasedLine (`line2`) that instances the geometry of an existing line (`line`). This is efficient for drawing the same base line shape multiple times with different positions or potentially materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points });\n\nconst points2 = [-1, 1, 0, 1, 1, 0];\nBABYLON.CreateGreasedLine(\"line\", { instance: line, points: points2 });\n```\n\n----------------------------------------\n\nTITLE: Attaching a Ray Helper to a Mesh in Babylon.js\nDESCRIPTION: Attaches an existing `BABYLON.RayHelper` instance to a mesh (`box`). This makes the ray helper visually represent a ray relative to the mesh's local space, defined by a local origin vector, a local direction vector, and a length. The helper will automatically update its position and orientation as the attached mesh moves or rotates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar localMeshDirection = new BABYLON.Vector3(0, 0, -1);\nvar localMeshOrigin = new BABYLON.Vector3(0, 0, -0.4);\nvar length = 3;\nrayHelper.attachToMesh(box, localMeshDirection, localMeshOrigin, length);\n```\n\n----------------------------------------\n\nTITLE: Adding a Highlight Layer to a Mesh\nDESCRIPTION: Demonstrates how to create a HighlightLayer and add a mesh to it with a specific color. This is the basic usage for highlighting meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Add the highlight layer.\nconst hl = new BABYLON.HighlightLayer(\"hl1\", scene);\nhl.addMesh(sphere, BABYLON.Color3.Green());\n```\n\n----------------------------------------\n\nTITLE: Spreading Mesh Spawning Across Multiple Frames with Babylon.js Coroutines (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a generator function and Babylon.js Observable's runCoroutineAsync method to sequentially spawn three meshes over three render frames. Dependencies include Babylon.js (with scene.onBeforeRenderObservable), JavaScript generator syntax, and appropriately defined spawnTheFirstMesh, spawnTheSecondMesh, and spawnTheThirdMesh functions. It requires an initialized Babylon.js scene variable named scene and sets up code so that each spawn occurs in a separate render cycle. Inputs include no parameters (generator), and outputs are side-effects on the scene (spawned meshes over multiple frames). Limitations: the functions to actually spawn the meshes must be provided elsewhere.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/coroutines.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spawnMeshesCoroutine = function* () {\n  spawnTheFirstMesh();\n  yield;\n  spawnTheSecondMesh();\n  yield;\n  spawnTheThirdMesh();\n};\nscene.onBeforeRenderObservable.runCoroutineAsync(spawnMeshesCoroutine());\n```\n\n----------------------------------------\n\nTITLE: Initializing ShadowGenerator in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript code initializes a ShadowGenerator in Babylon.js with a specified shadow map size and a light source. 'BABYLON.ShadowGenerator' requires the shadow map size as the first parameter (for resolution/quality) and the light object as the second parameter (the source casting shadows). Typically, this precedes configuring which meshes cast or receive shadows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example: Immutable SPS Construction with Custom Particle Initialization - Babylon.js - JavaScript\nDESCRIPTION: A detailed code snippet for creating an immutable SPS of boxes with diverse rotation, position, UV mapping, and randomized vertical scaling via a custom\\_positionFunction\\_. Utilizes BABYLON.MeshBuilder and BABYLON.Vector4 for geometry and UVs. This end-to-end example covers shape creation, custom initialization, adding to SPS, and final mesh building. Requires Babylon.js infrastructure, including a loaded scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBuilder = (particle, i, s) => {\n  // particle is the current particle\n  // i is its global index in the SPS\n  // s is its index in its shape, so here from 0 to 149\n  particle.rotation.y = s / 150;\n  particle.position.x = s - 150;\n  particle.uvs = new BABYLON.Vector4(0, 0, 0.33, 0.33); // first image from an atlas\n  particle.scaling.y = Math.random() + 1;\n};\nconst box = BABYLON.MeshBuilder.CreateBox(\"b\", {}, scene);\nconst SPS = new BABYLON.SolidParticleSystem(\"SPS\", scene, { updatable: false });\nSPS.addShape(box, 150, { positionFunction: myBuilder }); // myBuilder will be called for each of the 150 boxes\nconst mesh = SPS.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: Defining Plane Object Shape - TypeScript\nDESCRIPTION: Details the IWebXRPlane interface describing the properties of XR-detected planes in Babylon.js. Includes id, polygon points, transformation matrix, and reference to native XRPlane. Used for type safety and clarity in observable callbacks and geometry creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IWebXRPlane {\\n  /**\\n   * a babylon-assigned ID for this polygon\\n   */\\n  id: number;\\n  /**\\n   * an array of vector3 points in babylon space. right/left hand system is taken into account.\\n   */\\n  polygonDefinition: Array<Vector3>;\\n  /**\\n   * A transformation matrix to apply on the mesh that will be built using the polygonDefinition\\n   * Local vs. World are decided if worldParentNode was provided or not in the options when constructing the module\\n   */\\n  transformationMatrix: Matrix;\\n  /**\\n   * the native xr-plane object\\n   */\\n  xrPlane: XRPlane;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hit Test Result Handling in Babylon.js WebXR\nDESCRIPTION: This code snippet shows how to handle hit test results in Babylon.js WebXR. It creates a sphere to visualize the hit test point and updates its position based on the hit test results.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// a dot to show in the found position\nconst dot = BABYLON.SphereBuilder.CreateSphere(\n  \"dot\",\n  {\n    diameter: 0.05,\n  },\n  scene,\n);\ndot.isVisible = false;\nhitTest.onHitTestResultObservable.add((results) => {\n  if (results.length) {\n    dot.isVisible = true;\n    results[0].transformationMatrix.decompose(dot.scaling, dot.rotationQuaternion, dot.position);\n  } else {\n    dot.isVisible = false;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Normalizing Animation Timelines in AnimationGroup (JavaScript)\nDESCRIPTION: Illustrates synchronizing the begin and end frames of all animations in a group to a specified range using the normalize method. Ensures all contained animations play over the same timeline for cohesive playback. Requires a populated AnimationGroup. Inputs: beginFrame and endFrame numbers (here 0 and 100); Output: all animations in the group are resampled to the new frame range.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nanimationGroup2.normalize(0, 100);\n```\n\n----------------------------------------\n\nTITLE: Adding and Handling TextFile and BinaryFile Tasks in AssetsManager (JavaScript)\nDESCRIPTION: Demonstrates adding a text file and a binary file loading task to AssetsManager, with corresponding success callbacks. The text task retrieves a text file and logs its content. The binary task fetches binary data from an image file; you can act on 'task.data'. Both require prior instantiation of the AssetsManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst textTask = assetsManager.addTextFileTask(\"text task\", \"msg.txt\");\ntextTask.onSuccess = function (task) {\n  console.log(task.text);\n};\n\nconst binaryTask = assetsManager.addBinaryFileTask(\"binary task\", \"grass.jpg\");\nbinaryTask.onSuccess = function (task) {\n  // Do something with task.data\n};\n```\n\n----------------------------------------\n\nTITLE: Creating the CascadedShadowGenerator in Babylon.js JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a CascadedShadowGenerator in Babylon.js, specifying the shadow map size and a directional light instance. The generator enables advanced CSM-based shadow rendering for large scenes. Ensure WebGL 2+ support is available and that the light parameter is a valid DirectionalLight object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst csmShadowGenerator = new BABYLON.CascadedShadowGenerator(1024, light);\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Groups in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates instantiating AnimationGroup objects to manage multiple animations and meshes as unit groups. Requires Babylon.js library. Creates two AnimationGroup instances, each of which can later be populated with animations/meshes. Inputs: none shown; Outputs: new AnimationGroup objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animationGroup1 = new BABYLON.AnimationGroup(\"Group1\");\nconst animationGroup2 = new BABYLON.AnimationGroup(\"Group2\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Behavior Interface in Babylon.js\nDESCRIPTION: Core interface definition for implementing behaviors in Babylon.js. Behaviors must implement name, init, attach, and detach methods to properly integrate with the framework.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IBehavior {\n  name: string;           // Return the behavior name\n  init(): void;           // Initialize the behavior\n  attach(target): void;   // Attach to target and setup events\n  detach(): void;         // Cleanup resources and unhook events\n\n  static EasingFunction;  // Define animation easing function\n  static EasingMode;      // Define animation easing mode\n}\n```\n\n----------------------------------------\n\nTITLE: IBehaviorAware Interface Methods in Babylon.js\nDESCRIPTION: Interface methods available on objects that can accept behaviors (lights, cameras, meshes). Provides functionality for managing behavior attachment and retrieval.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IBehaviorAware {\n  addBehavior(behavior): void;              // Attach behavior to target\n  removeBehavior(behavior): void;           // Detach behavior from target\n  getBehaviorByName(name: string): IBehavior;  // Get behavior by name\n  readonly behaviors: IBehavior[];           // List of attached behaviors\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animation in Babylon.js\nDESCRIPTION: Initializes a new animation with parameters for name, target property, frames per second, property type, and loop mode. This constructor creates the animation structure that will later be applied to objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAnim = new BABYLON.Animation(name, property, frames_per_second, property_type, loop_mode);\n```\n\n----------------------------------------\n\nTITLE: Creating a StackPanel3D for Vertical Stacking (Babylon.js, JavaScript)\nDESCRIPTION: This snippet creates a StackPanel3D container and configures it to stack controls vertically in the 3D GUI. The 'isVertical' property is set to true for column-like stacking. StackPanel3D manages the arrangement automatically upon control addition. Requires Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst panel = new BABYLON.GUI.StackPanel3D();\npanel.isVertical = true;\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Server via Batch Script in Shell\nDESCRIPTION: This description refers to the action performed by double-clicking `Windows_START.BAT`. The batch script executes `node server.js` within the project directory (`C:\\babylon`). This command starts the Node.js web server defined in `server.js`, making the Babylon.js application accessible locally. Node.js must be installed, and project dependencies should be installed beforehand.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/Running_a_local_webserver_for_BabylonJs.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Using a Texture to Control Anisotropy in Babylon.js PBR Material\nDESCRIPTION: This JavaScript snippet demonstrates using a texture to control both the direction and intensity of the anisotropy effect on a Babylon.js PBR material. After enabling anisotropy, a `texture` is assigned to `anisotropy.texture`. The texture's RG channels define the direction (stored like a tangent-space normal map), and the B channel controls the intensity factor, allowing for complex anisotropic patterns across the surface. Requires `BABYLON.PBRMaterial` and a `BABYLON.Texture` instance (`texture`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.anisotropy.isEnabled = true;\npbr.anisotropy.texture = texture;\n```\n\n----------------------------------------\n\nTITLE: Loading and Manipulating VRM Model in Babylon.js\nDESCRIPTION: This code snippet shows how to load a VRM file, update secondary animation, transform the model, manipulate humanoid bones, and apply blend shapes. It demonstrates the core functionality of working with VRM models in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_VRM.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from \"@babylonjs/core\";\n\n// has side-effect\n// ref. https://webpack.js.org/guides/tree-shaking#mark-the-file-as-side-effect-free\nimport \"babylon-vrm-loader\";\n\n// vrmFile is File object retrieved by <input type=\"file\">.\nconst scene = await BABYLON.LoadSceneAsync(\"file:\" + vrmFile, engine);\nconst vrmManager = scene.metadata.vrmManagers[0];\n\n// Update secondary animation\nscene.onBeforeRenderObservable.add(() => {\n  vrmManager.update(scene.getEngine().getDeltaTime());\n});\n\n// Model Transformation\nvrmManager.rootMesh.translate(new BABYLON.Vector3(1, 0, 0), 1);\n\n// Work with HumanoidBone\nvrmManager.humanoidBone.leftUpperArm.addRotation(0, 1, 0);\n\n// Work with BlendShape(MorphTarget)\nvrmManager.morphing(\"Joy\", 1.0);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options - JavaScript\nDESCRIPTION: This TypeScript configuration file sets compiler options for the project such as the language target, module system, source mapping, and output directory. The 'files' array ensures only 'index.ts' is compiled. Place this JSON object in 'tsconfig.json' at the root to control the TypeScript compilation behavior. Adjust 'outDir' and includes as necessary for your project structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n    \"compilerOptions\": {\\n        \"target\": \"es5\",\\n        \"module\": \"commonjs\",\\n        \"noResolve\": false,\\n        \"noImplicitAny\": false,\\n        \"removeComments\": true,\\n        \"preserveConstEnums\": true,\\n        \"sourceMap\": true,\\n        \"experimentalDecorators\": true,\\n        \"isolatedModules\": false,\\n        \"lib\": [\\n            \"dom\",\\n            \"es2015.promise\",\\n            \"es5\"\\n        ],\\n        \"declaration\": true,\\n        \"outDir\": \"./\"\\n    },\\n    \"files\": [\\n        \"./index.ts\"\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ArcRotateCamera in BabylonJS\nDESCRIPTION: Creates a new ArcRotateCamera instance with specified name, angles, radius and target position parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/camera.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.ArcRotateCamera(\"name\", alpha_angle, beta_angle, radius, target_position);\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Forward Direction Vector in Babylon.js\nDESCRIPTION: Calculates a normalized direction vector pointing forward relative to a mesh's local orientation. It defines a forward vector in local space (0,0,1), transforms it using the mesh's world matrix (via the assumed `vecToLocal` helper function), and then computes the direction by subtracting the mesh's origin from this transformed point, normalizing the result. This is typically used to determine the direction for a ray cast from the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar forward = new BABYLON.Vector3(0, 0, 1);\nforward = vecToLocal(forward, box);\n\nvar direction = forward.subtract(origin);\ndirection = BABYLON.Vector3.Normalize(direction);\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for TypeScript\nDESCRIPTION: Webpack configuration setup for handling TypeScript files in a BabylonJS project. Includes resolver settings and ts-loader configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  resolve: {\n    extensions: [\".ts\", \".js\"],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        loader: \"ts-loader\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Assets Asynchronously with Promises in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to load an asset container asynchronously in Babylon.js using a promise. The BABYLON.LoadAssetContainerAsync function loads a scene file, and upon successful completion, the container is added to the scene in a .then() callback. Dependencies include the Babylon.js library and a valid scene object. Inputs are the asset URL and scene instance; the output is a populated scene after loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/promises.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.LoadAssetContainerAsync(\"https://playground.babylonjs.com/scenes/skull.babylon\", scene).then(function (container) {\n  container.addAllToScene();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ENV Texture for Scene Environment (Babylon.js, JavaScript)\nDESCRIPTION: This snippet illustrates how to assign a custom HDR environment texture to a Babylon.js scene. It creates the cube texture from a provided .env file using CubeTexture.CreateFromPrefilteredData and sets it as the scene's environmentTexture. Requires Babylon.js; the .env file must be created in advance (see Sandbox/IBL tool guidance). 'scene' is your Babylon.js Scene instance. Produces PBR-optimized real-time reflections and lighting from the specified texture; the input path must be valid.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/HDREnvironment.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\"textures/environment.env\", scene);\nscene.environmentTexture = hdrTexture;\n```\n\n----------------------------------------\n\nTITLE: Loading with Detailed glTF Options (TypeScript)\nDESCRIPTION: Demonstrates how to load a glTF file with specific loader options and extension options using LoadAssetContainerAsync.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst assetContainer = await BABYLON.LoadAssetContainerAsync(\"https://raw.githubusercontent.com/BabylonJS/Assets/master/meshes/LevelOfDetail.glb\", scene, {\n  pluginOptions: {\n    gltf: {\n      skipMaterials: false,\n      extensionOptions: {\n        MSFT_lod: {\n          maxLODsToLoad: 1,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Reflector Connection\nDESCRIPTION: Creates a new Reflector instance to connect to a remote debugging session. The code shows how to establish and close a connection to the reflector bridge using specified host and port parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/reflector.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst reflector = new BABYLON.Reflector(scene, \"localhost\", 1234);\n\n// ...\n\nreflector.close();\n```\n\n----------------------------------------\n\nTITLE: Mesh Rotation in Babylon.js\nDESCRIPTION: Shows how to rotate a mesh about a given axis by a specified angle in radians using the rotate method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(axis, angle, BABYLON.Space.LOCAL);\n```\n\n----------------------------------------\n\nTITLE: Creating Distance-Based LOD for a Mesh in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a torus knot with four levels of detail based on distance to the camera. Each level uses progressively lower polygon counts as the distance increases, with the final level removing the mesh from rendering completely.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/LOD.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst knot00 = BABYLON.Mesh.CreateTorusKnot(\"knot0\", 0.5, 0.2, 128, 64, 2, 3, scene);\nconst knot01 = BABYLON.Mesh.CreateTorusKnot(\"knot1\", 0.5, 0.2, 32, 16, 2, 3, scene);\nconst knot02 = BABYLON.Mesh.CreateTorusKnot(\"knot2\", 0.5, 0.2, 24, 12, 2, 3, scene);\nconst knot03 = BABYLON.Mesh.CreateTorusKnot(\"knot3\", 0.5, 0.2, 16, 8, 2, 3, scene);\n\nknot00.addLODLevel(15, knot01);\nknot00.addLODLevel(30, knot02);\nknot00.addLODLevel(45, knot03);\nknot00.addLODLevel(55, null);\n```\n\n----------------------------------------\n\nTITLE: Blocking Material Dirty Mechanism in Babylon.js Scene\nDESCRIPTION: Demonstrates how to block the automatic material update mechanism to improve performance when making batch changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.blockMaterialDirtyMechanism = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Clear Coat in Babylon.js PBR Material\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the clear coat effect on a Babylon.js PBR material. It initializes a PBR material, sets its base metallic and roughness properties, and then enables the clear coat feature (`clearCoat.isEnabled = true`) and sets its intensity (`clearCoat.intensity = 0.5`). Requires an initialized `BABYLON.PBRMaterial` instance (`pbr`) and a `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.metallic = 0.0;\npbr.roughness = 1.0;\n\npbr.clearCoat.isEnabled = true;\npbr.clearCoat.intensity = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a box particle emitter using `particleSystem.createBoxEmitter`. This function defines particle emission directions (`direction1`, `direction2`) and the bounding box (`minEmitBox`, `maxEmitBox`) from which particles originate. All parameters are `BABYLON.Vector3`. Requires an existing `particleSystem` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar boxEmitter = particleSystem.createBoxEmitter(new BABYLON.Vector3(-7, 8, 3), new BABYLON.Vector3(7, 8, -3), new BABYLON.Vector3(-1, 0, 0), new BABYLON.Vector3(1, 0, 0));\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Basic Reflection Probe in Babylon.js\nDESCRIPTION: Demonstrates how to create a reflection probe, add meshes to its render list, and assign the generated cube texture to a material's reflection texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/reflectionProbes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst probe = new BABYLON.ReflectionProbe(\"main\", 512, scene);\nprobe.renderList.push(yellowSphere);\nprobe.renderList.push(greenSphere);\nprobe.renderList.push(blueSphere);\nprobe.renderList.push(mirror);\n\nmainMaterial.reflectionTexture = probe.cubeTexture;\n```\n\n----------------------------------------\n\nTITLE: Importing Meshes from File (TypeScript)\nDESCRIPTION: Uses ImportMeshAsync to load meshes from a file and append them to the existing scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait BABYLON.ImportMeshAsync(\"path/to/model\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Light Intensity Animation in BabylonJS\nDESCRIPTION: This code creates an animation to control the intensity of spotlights. The lights remain off for 7 seconds, then gradually brighten to full intensity by 10 seconds, maintain full brightness until 14 seconds, and then dim back to zero by 15 seconds.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/sequenceAnimations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//for light to brighten and dim\nconst lightDimmer = new BABYLON.Animation(\"dimmer\", \"intensity\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);\n\nconst light_keys = [];\n\nlight_keys.push({\n  frame: 0,\n  value: 0,\n});\n\nlight_keys.push({\n  frame: 7 * frameRate,\n  value: 0,\n});\n\nlight_keys.push({\n  frame: 10 * frameRate,\n  value: 1,\n});\n\nlight_keys.push({\n  frame: 14 * frameRate,\n  value: 1,\n});\n\nlight_keys.push({\n  frame: 15 * frameRate,\n  value: 0,\n});\n\nlightDimmer.setKeys(light_keys);\n```\n\n----------------------------------------\n\nTITLE: Simplified Asynchronous Engine Creation with EngineFactory in Babylon.js (JavaScript)\nDESCRIPTION: Shows a simpler way to create a Babylon.js engine asynchronously using the `BABYLON.EngineFactory.CreateAsync` helper function. This factory method attempts to create a WebGPU engine first if the browser supports it, then falls back to creating a WebGL engine, and finally a null engine if neither is available. It requires the target canvas element as an argument.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUBreakingChanges.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createEngine() {\n  return BABYLON.EngineFactory.CreateAsync(document.getElementById(\"renderCanvas\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Start Delay for a Particle System (Method 2) in Babylon.js\nDESCRIPTION: Configures a delay before the particle system starts emitting when `start()` is called without arguments. The `startDelay` property is set to the desired delay time in milliseconds.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.startDelay = 3000;\n```\n\n----------------------------------------\n\nTITLE: Observing AnimationGroup End Events in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to register a callback to AnimationGroup's onAnimationEndObservable, allowing custom logic (such as changing a mesh's material) when the group's animations finish. Requires a valid AnimationGroup and referenced meshes/materials. Input: a function to execute on animation end; Output: callback execution upon group completion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nanimationGroup1.onAnimationEndObservable.add(function () {\n  mesh2.material = redMaterial;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Snap-to Hotspots in WebXR Teleportation\nDESCRIPTION: Provides an array of Vector3 positions during feature initialization that serve as teleportation hotspots, allowing users to teleport only to specific predefined locations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst interestingSpot = new BABYLON.Vector3(-4, 0, 4);\nconst interestingSpot2 = new BABYLON.Vector3(4, 0, 4);\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  snapPositions: [interestingSpot, interestingSpot2],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Soft Transparent Shadows in Babylon.js\nDESCRIPTION: Enable soft transparent shadows by setting the enableSoftTransparentShadow property to true on the shadow generator. This creates dithering patterns based on fragment alpha values, which may require appropriate filtering methods to avoid visible patterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.enableSoftTransparentShadow = true;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Data Block: FlowGraphArrayIndexBlock (TypeScript)\nDESCRIPTION: Provides a complete example of a custom data block (`FlowGraphArrayIndexBlock`) that extends `FlowGraphBlock`. It defines input connections for an array and an index, an output connection for the selected value, implements the `_updateOutputs` method for logic, includes serialization boilerplate, and registers the block using `RegisterClass`. This block retrieves an element from an array at a specified index.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This simple Util block takes an array as input and selects a single element from it.\n */\nexport class FlowGraphArrayIndexBlock<T = any> extends FlowGraphBlock {\n    /**\n     * Input connection: The array to select from.\n     */\n    public readonly array: FlowGraphDataConnection<T[]>;\n\n    /**\n     * Input connection: The index to select.\n     */\n    public readonly index: FlowGraphDataConnection<FlowGraphInteger>;\n\n    /**\n     * Output connection: The selected element.\n     */\n    public readonly value: FlowGraphDataConnection<T>;\n\n    /**\n     * Construct a FlowGraphArrayIndexBlock.\n     * @param config construction parameters\n     */\n    constructor(public override config: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.array = this.registerDataInput(\"array\", RichTypeAny);\n        this.index = this.registerDataInput(\"index\", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n    }\n\n    /**\n     * @internal\n     */\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const array = this.array.getValue(context);\n        const index = getNumericValue(this.index.getValue(context));\n        if (array && index >= 0 && index < array.length) {\n            this.value.setValue(array[index], context);\n        }\n    }\n\n    /**\n     * Serializes this block (override if needed)\n     * @param serializationObject the object to serialize to\n     */\n    public override serialize(serializationObject?: any): void {\n        super.serialize(serializationObject);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ArrayIndex;\n    }\n}\n\n// register the class in the type registry of the framework\nRegisterClass(FlowGraphBlockNames.ArrayIndex, FlowGraphArrayIndexBlock);\n```\n\n----------------------------------------\n\nTITLE: Disposing Physics Bodies and Shapes in Babylon.js\nDESCRIPTION: Illustrates the proper way to dispose of physics bodies and shapes when they are no longer needed. This helps optimize performance by ensuring the physics engine doesn't process unnecessary elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeSphere(\n  new BABYLON.Vector3(0,0,0), // center of the sphere in local space\n  0.5, // radius of the sphere\n  scene // containing scene\n);\nbody.shape = shape;\nbody2.shape = shape;\nbody3.shape = shape;\n\n// ...\n\n// When disposing of the scene:\nbody.dispose();\nbody2.dispose();\nbody3.dispose();\n\n// Don't forget to also dispose of the shape when it's not needed anymore!\nshape.dispose();\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring ShaderMaterial in JavaScript\nDESCRIPTION: This JavaScript code initializes a `BABYLON.ShaderMaterial`. It links the previously defined vertex (`vertexShaderCode`) and fragment (`fragmentShaderCode`) shader programs (assuming they are defined elsewhere, perhaps in script tags or strings). It specifies the required vertex attributes (`position`, `normal`, `uv`) and standard uniforms (`world`, `worldView`, etc.). Finally, it creates a texture and assigns it to the `textureSampler` uniform used by the fragment shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar shaderMaterial = new BABYLON.ShaderMaterial(\"shader\", scene, {\n\t\tvertexElement: \"vertexShaderCode\",\n\t\tfragmentElement: \"fragmentShaderCode\",\n\t},\n\t{\n\t\tattributes: [\"position\", \"normal\", \"uv\"],\n\t\tuniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\"]\n\t});\n\n\nvar mainTexture = new BABYLON.Texture(\"amiga.jpg\", scene);\n\nshaderMaterial.setTexture(\"textureSampler\", mainTexture);\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Joysticks Camera in Babylon.js\nDESCRIPTION: Demonstrates how to load a scene and switch the default camera to a Virtual Joysticks Camera. It includes scene loading, camera creation, and rendering setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", startGame, false);\nfunction startGame() {\n  if (BABYLON.Engine.isSupported()) {\n    const canvas = document.getElementById(\"renderCanvas\");\n    const engine = new BABYLON.Engine(canvas, true);\n\n    BABYLON.LoadSceneAsync(\"Espilit/Espilit.babylon\", engine).then(function (newScene) {\n\n      const VJC = new BABYLON.VirtualJoysticksCamera(\"VJC\", newScene.activeCamera.position, newScene);\n      VJC.rotation = newScene.activeCamera.rotation;\n      VJC.checkCollisions = newScene.activeCamera.checkCollisions;\n      VJC.applyGravity = newScene.activeCamera.applyGravity;\n\n      // Wait for textures and shaders to be ready\n      newScene.executeWhenReady(function () {\n        newScene.activeCamera = VJC;\n        // Attach camera to canvas inputs\n        newScene.activeCamera.attachControl(canvas);\n        // Once the scene is loaded, just register a render loop to render it\n        engine.runRenderLoop(function () {\n          newScene.render();\n        }),\n      }),\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeGeometry in JavaScript\nDESCRIPTION: Demonstrates the basic instantiation of the BABYLON.NodeGeometry class in JavaScript. This class serves as the main container for the node-based procedural geometry graph. A unique name is provided as an argument.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeGeometry = new BABYLON.NodeGeometry(\"my node geometry\");\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Commerce Certified Settings in Babylon.js\nDESCRIPTION: Applies the 3D Commerce-certified settings to ensure the watch renders correctly according to industry standards. These settings configure PBR (Physically Based Rendering) material properties and environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create default environment with 3D Commerce certified settings\nscene.environmentTexture = CubeTexture.CreateFromPrefilteredData(\"https://playground.babylonjs.com/textures/environment.env\", scene);\nscene.createDefaultSkybox(scene.environmentTexture, true, 1000, 0.1);\n\n// Configure all PBR materials in the scene to use certified settings\nconst setMaterialsToDefaultMode = () => {\n    for (const material of scene.materials) {\n        if (material instanceof PBRMaterial) {\n            material.metallic = 0.0;\n            material.roughness = 0.5;\n        }\n    }\n};\nscene.onNewMaterialAddedObservable.add(()=>{\n    setMaterialsToDefaultMode();\n});\nsetMaterialsToDefaultMode();\n```\n\n----------------------------------------\n\nTITLE: Integrating GUI, Loaders, Inspector in Dev Host - Babylon.js Advanced Scene - JavaScript\nDESCRIPTION: Provides a comprehensive example incorporating Babylon.js GUI, loaders, and the inspector into the dev host setup. Displays advanced camera setup, HDR environment creation, mesh loading via AppendSceneAsync, GUI button creation with event bindings, and inspector invocation. Dependencies include @dev/core, @dev/gui, @dev/loaders, @dev/inspector packages, proper engine and canvas setup, and network access for resource fetching. Outputs a fully equipped scene, integrating asynchronous mesh loading, user interface, and developer tools.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { canvas, engine } from \"./index\";\nimport \"@dev/loaders\";\nimport { Inspector } from \"@dev/inspector\";\nimport { ArcRotateCamera, CubeTexture, Scene, AppendSceneAsync } from \"@dev/core\";\nimport { AdvancedDynamicTexture, Button } from \"@dev/gui\";\n\nexport const createScene = async function () {\n    const scene = new Scene(engine);\n    scene.createDefaultCameraOrLight(true);\n    const hdrTexture = new CubeTexture(\"https://playground.babylonjs.com/textures/SpecularHDR.dds\", scene);\n    scene.createDefaultSkybox(hdrTexture, true, 10000);\n\n    // The first parameter can be used to specify which mesh to import. Here we import all meshes\n    AppendSceneAsync(\"https://assets.babylonjs.com/meshes/webp/webp.gltf\", scene).then((result) => {\n        scene.activeCamera!.attachControl(canvas, false);\n        // scene.activeCamera!.alpha += Math.PI; // camera +180°\n        (scene.activeCamera as ArcRotateCamera).radius = 80;\n    });\n\n    const advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\n    const button1 = Button.CreateSimpleButton(\"but1\", \"Click Me\");\n    button1.width = \"150px\"\n    button1.height = \"40px\";\n    button1.color = \"white\";\n    button1.cornerRadius = 20;\n    button1.background = \"green\";\n    button1.onPointerUpObservable.add(function() {\n        alert(\"you did it!\");\n    });\n    advancedTexture.addControl(button1);\n\n    Inspector.Show(scene, {});\n\n    return scene;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing WebGPU Engine with Dependencies in BabylonJS\nDESCRIPTION: Demonstrates how to configure and initialize a WebGPU engine with glslang and twgsl dependencies. The code shows path configuration for both JavaScript and WebAssembly files, followed by engine creation and initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/CDN.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst glslangOptions = {\n  jsPath: baseUrl + \"/glslang/glslang.js\",\n  wasmPath: baseUrl + \"/glslang/glslang.wasm\",\n};\n\nconst twgslOptions = {\n  jsPath: baseUrl + \"/twgsl/twgsl.js\",\n  wasmPath: baseUrl + \"/twgsl/twgsl.wasm\",\n};\n\nconst options = {\n  // ... webgpu options\n};\n\nconst engine = new BABYLON.WebGPUEngine(window.canvas, options);\nawait engine.initAsync(glslangOptions, twgslOptions);\n```\n\n----------------------------------------\n\nTITLE: Explicit Output-to-Input Block Connection in Babylon.js Node Material using JavaScript\nDESCRIPTION: Facilitates precise connections between specific output and input connection points of blocks, bypassing any automatic output/input resolution. Both connection points must be compatible, and objects must be blocks with connectable endpoints. This low-level control is useful for advanced shader structures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nworldInput.output.connectTo(boneBlock.world);\n```\n\n----------------------------------------\n\nTITLE: Freezing Active Meshes in Babylon.js Scene\nDESCRIPTION: Illustrates how to freeze and unfreeze the list of active meshes in a scene to reduce CPU usage.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.freezeActiveMeshes();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.unfreezeActiveMeshes();\n```\n\n----------------------------------------\n\nTITLE: Chaining Audio Buses for Advanced Routing - Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use an intermediate audio bus in Babylon.js by creating a spatially enabled audio bus, attaching it to a mesh, and routing a sound's output through it. Dependencies include the Babylon.js library, a valid mesh, and accessible sound resources. The 'outBus' property reroutes sound output, supporting additional effects such as 3D spatialization; the code avoids cyclic routing and plays the sound in a loop after unlocking the audio engine. The output is spatialized sound managed via an intermediate bus, allowing scalable audio graphs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst bus = await BABYLON.CreateAudioBusAsync(\"bus\",\n    { spatialEnabled: true }\n);\n\nbus.spatial.attach(mesh);\n\nconst bounce = await BABYLON.CreateSoundAsync(\"bounce\",\n    \"sounds/bounce.wav\",\n);\n\nbounce.outBus = bus;\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\nbounce.play({ loop: true });\n```\n\n----------------------------------------\n\nTITLE: Getting Animation Ratio in Babylon.js Scene\nDESCRIPTION: Shows how to get the animation ratio to compensate for frame rate differences across devices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nscene.getAnimationRatio();\n```\n\n----------------------------------------\n\nTITLE: Transitioning to and Setting Up the Game Scene in Babylon.js (TypeScript/JavaScript)\nDESCRIPTION: This asynchronous function `_goToGame` manages the transition to the main game state. It detaches controls from the current scene, sets up the pre-created `_gamescene` with a background color, an `ArcRotateCamera`, and a fullscreen UI using `AdvancedDynamicTexture`. A sample 'LOSE' button is added to the UI with an event listener to trigger `_goToLose`. Temporary light and sphere objects are added. Finally, it disposes of the previous scene (`this._scene`), updates the application state (`this._state`) to `GAME`, assigns the new scene to `this._scene`, hides the loading UI, and re-attaches controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nprivate async _goToGame(){\n    //--SETUP SCENE--\n    this._scene.detachControl();\n    let scene = this._gamescene;\n    scene.clearColor = new Color4(0.01568627450980392, 0.01568627450980392, 0.20392156862745098); // a color that fit the overall color scheme better\n    let camera: ArcRotateCamera = new ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), scene);\n    camera.setTarget(Vector3.Zero());\n\n    //--GUI--\n    const playerUI = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n    //dont detect any inputs from this ui while the game is loading\n    scene.detachControl();\n\n    //create a simple button\n    const loseBtn = Button.CreateSimpleButton(\"lose\", \"LOSE\");\n    loseBtn.width = 0.2\n    loseBtn.height = \"40px\";\n    loseBtn.color = \"white\";\n    loseBtn.top = \"-14px\";\n    loseBtn.thickness = 0;\n    loseBtn.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n    playerUI.addControl(loseBtn);\n\n    //this handles interactions with the start button attached to the scene\n    loseBtn.onPointerDownObservable.add(() => {\n        this._goToLose();\n        scene.detachControl(); //observables disabled\n    });\n\n    //temporary scene objects\n    var light1: HemisphericLight = new HemisphericLight(\"light1\", new Vector3(1, 1, 0), scene);\n    var sphere: Mesh = MeshBuilder.CreateSphere(\"sphere\", { diameter: 1 }, scene);\n\n    //get rid of start scene, switch to gamescene and change states\n    this._scene.dispose();\n    this._state = State.GAME;\n    this._scene = scene;\n    this._engine.hideLoadingUI();\n    //the game is ready, attach control back\n    this._scene.attachControl();\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Light Intensity in Babylon.js\nDESCRIPTION: Shows how to adjust the brightness of lights using the `intensity` property. The default value is 1. Values less than 1 dim the light, while values greater than 1 brighten it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlight0.intensity = 0.5;\nlight1.intensity = 2.4;\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Animation on Target Object in Babylon.js\nDESCRIPTION: Begins all animations stored in the target object's animations array, specifying start and end frames. This method runs animations that were previously pushed to the target's animations array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.beginAnimation(target, from, to);\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Plane Detector - JavaScript\nDESCRIPTION: Enables the experimental WebXR Plane Detection feature using the featuresManager. Allows device plane detection in AR and exposes detected planes via observables. Requires Babylon.js and a properly configured AR device.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// featuresManager from the base webxr experience helper\\nconst planeDetector = featuresManager.enableFeature(BABYLON.WebXRPlaneDetector, \\\"latest\\\");\n```\n\n----------------------------------------\n\nTITLE: Building and Creating Mesh from NodeGeometry (Babylon.js, JavaScript)\nDESCRIPTION: This snippet adds a one-time observable handler for the NodeGeometry 'onBuildObservable' event and then triggers the build process. When the geometry is built, it creates a mesh in the scene. Dependencies include a properly-set-up NodeGeometry and Babylon.js framework. The inputs are the node geometry object and mesh name; the output is a mesh created in the scene. The sequence ensures meshes are generated only after the geometry is built.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnodeGeometry.onBuildObservable.addOnce(() => {\n    const myGeometry = nodeGeometry.createMesh(\"myGeometry\");\n})\nnodeGeometry.build();\n```\n\n----------------------------------------\n\nTITLE: Internal Pointer Enter Handler\nDESCRIPTION: Internal method to handle pointer enter events. Marked with @ignore for internal use only.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @ignore internal use only\n */\npublic _onPointerEnter(target: Control): boolean {\n    if (!super._onPointerEnter(target)) {\nreturn false;\n    }\n\n    if (this.pointerEnterAnimation) {\nthis.pointerEnterAnimation();\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Camera Input Controls in Babylon.js\nDESCRIPTION: Demonstrates how to disable specific inputs and reattach them later.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FreeCamera(\"sceneCamera\", new BABYLON.Vector3(0, 1, -15), scene);\ncamera.inputs.attached.mouse.detachControl();\ncamera.inputs.addGamepad();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.inputs.attachInput(camera.inputs.attached.mouse);\n```\n\n----------------------------------------\n\nTITLE: Defining Canvas Template for Babylon.js Viewer\nDESCRIPTION: This snippet defines the template for the canvas element in the Babylon.js Viewer. It includes necessary CSS styles and the canvas element with touch-action configuration for cross-browser compatibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"viewer-template\" type=\"text/x-babylon-viewer-template\">\n  <style>\n      viewer {\n          position: relative;\n          overflow: hidden;\n          /* Start stage */\n          z-index: 1;\n          justify-content: center;\n          align-items: center;\n\n          width: 100%;\n          height: 100%;\n      }\n\n      .babylonjs-canvas {\n          flex: 1;\n          width: 100%;\n          height: 100%;\n          /* enable cross-browser pointer events */\n          touch-action: none;\n      }\n  </style>\n\n  <canvas class=\"babylonjs-canvas\" touch-action=\"none\"></canvas>\n\n  <nav-bar></nav-bar>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating DirectionalLight in Babylon.js\nDESCRIPTION: Creates a directional light source that will be used for casting shadows. The light requires a direction vector and optionally a scene parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/shadows.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst  light = new BABYLON.DirectionalLight(\"dir\", direction, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scene Screenshot in Babylon.js\nDESCRIPTION: Demonstrates how to create a basic screenshot of a scene using the CreateScreenshot method within the scene's onReadyObservable to ensure all meshes are drawn.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToPNG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onReadyObservable.add(() => {\n  BABYLON.Tools.CreateScreenshot(engine, camera, size, successCallback, mimeType, forceDownload, quality, useFill);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Lottie Texture to 3D Object\nDESCRIPTION: Example showing how to create a box mesh and apply a Lottie animation as its texture using PBR material\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/lottieTexture.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet box = MeshBuilder.CreateBox(\"box\")\nlet mat = new PBRMaterial(\"pbr\", scene)\nlet lottieTexture = await LottieTexture.LoadFromUrlAsync(\"name\", \"/Aniki Hamster.json\", scene, {} /*option*/)\nmat.albedoTexture = lottieTexture\nbox.material = mat\nmat.unlit = true\n```\n\n----------------------------------------\n\nTITLE: Defining Injection Points in GLSL Shaders for ShadowDepthWrapper\nDESCRIPTION: Specifies custom locations within vertex and fragment shaders for the `ShadowDepthWrapper` to inject its code blocks. Using these `#define` directives overrides the default injection behavior, allowing finer control over shadow generation logic, especially within custom shaders. If not defined, default locations are used, which might vary depending on the material type (`CustomMaterial`, `PBRCustomMaterial`, `ShaderMaterial`). Failure to define `SHADOWDEPTH_NORMALBIAS` or `SHADOWDEPTH_SOFTTRANSPARENTSHADOW` in custom `ShaderMaterial` code will disable normal bias or soft transparent shadows respectively.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_24\n\nLANGUAGE: glsl\nCODE:\n```\n#define SHADOWDEPTH_NORMALBIAS\n```\n\nLANGUAGE: glsl\nCODE:\n```\n#define SHADOWDEPTH_METRIC\n```\n\nLANGUAGE: glsl\nCODE:\n```\n#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW\n```\n\nLANGUAGE: glsl\nCODE:\n```\n#define SHADOWDEPTH_FRAGMENT\n```\n\n----------------------------------------\n\nTITLE: Creating a Refractive Glass Material in PBR\nDESCRIPTION: Demonstrates how to set up a fully refractive glass material with proper environment mapping, linking refraction with transparency, and setting the index of refraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst glass = new BABYLON.PBRMaterial(\"glass\", scene);\nglass.reflectionTexture = hdrTexture;\nglass.refractionTexture = hdrTexture;\nglass.linkRefractionWithTransparency = true;\nglass.indexOfRefraction = 0.52;\nglass.alpha = 0; // Fully refractive material\n```\n\n----------------------------------------\n\nTITLE: Blocking Layout Updates When Adding Multiple Controls to a Panel (Babylon.js, JavaScript)\nDESCRIPTION: This snippet demonstrates how to prevent automatic layout updates when adding multiple controls to a panel, optimizing performance by deferring updates until all controls are added. By setting 'panel.blockLayout' to true, the layout update is disabled temporarily. Once finished, resetting 'blockLayout' to false applies all pending layout changes at once. Requires the Babylon.js GUI extension and a StackPanel3D or another container implementation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npanel.blockLayout = true;\nfor (let index = 0; index < 30; index++) {\n  const button = new BABYLON.GUI.Button3D(\"click me\");\n  panel.addControl(button);\n}\npanel.blockLayout = false;\n```\n\n----------------------------------------\n\nTITLE: Applying a Texture Mask to Particles in Babylon.js\nDESCRIPTION: Applies a color mask to the particle texture using the `textureMask` property. This allows filtering specific color channels or the alpha channel of the texture. A `BABYLON.Color4` object defines the mask values (RGBA).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.textureMask = new BABYLON.Color4(0.1, 0.8, 0.8, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Scale Range - Babylon.js - JavaScript\nDESCRIPTION: This snippet modifies the base shape of particles by setting minimum and maximum scaling values along the X and Y axes. Refining minScaleX/Y and maxScaleX/Y helps create rectangular or non-uniform particle shapes in Babylon.js. Babylon.js must be included. Parameters are numeric and affect the aspect ratio of each particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.minScaleX = 0.1;\nparticleSystem.maxScaleX = 0.5;\n\nparticleSystem.minScaleY = 0.2;\nparticleSystem.maxScaleY = 0.4;\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer Element with Progress Bar\nDESCRIPTION: Example of the HTML3DElement showing a loading progress bar for large model loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/defaultUI.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: Extending BaseCameraPointersInput for Custom Pointer Controls (JavaScript)\nDESCRIPTION: Demonstrates how to subclass Babylon.js BaseCameraPointersInput to create advanced pointer-based controls. Contains method stubs for event handling such as onTouch, onMultiTouch, onDoubleTap, onContextMenu, onButtonDown, onButtonUp, and onLostFocus. Developers should override relevant methods (e.g., onTouch, onMultiTouch) for handling single/multi-touch gestures, while benefiting from built-in pointer and event management. The superclass provides ready-to-use logic for input events, pointer lock, and preventDefault; methods are required or optional as documented in comments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// You need to extend the BaseCameraPointersInput to get the required functionality\nclass YourCustomInputClass extends BABYLON.BaseCameraPointersInput {\n  // This is the constructor.  Unless you have something specific that you need\n  // to do when you create your object, you don't need to implement this. You\n  // must call the super() function though, if you do.\n  // constructor() { super(); }\n\n  // This is exactly the same the function in the previous section and will still need to be\n  // implemented.\n  getClassName() {}\n\n  // This function is the exact same thing as the previous section.  However, it has already\n  // been implemented with a value of \"pointers\" and is technically optional.\n  // getSimpleName() {};\n\n  // This function is already implemented.  If you are planning to use this class, it is\n  // recommened to not override it.\n  // attachControl(noPreventDefault) {};\n\n  // Same thing with detachControl\n  // detachControl() {};\n\n  // This optional function will get called for each rendered frame, if you want to synchronize your\n  // input to rendering, no need to use requestAnimationFrame. It's a good place for applying\n  // calculations if you have to.\n  // Return void.\n  checkInputs() {}\n\n  // This function will fire during a POINTERMOVE event where there is either an active mouse\n  // button down or only one active touch.  \"point\" will contain the coordinates, pointerId,\n  // and pointer type.  The offsets are just the changes in position from the previous point.\n  // This will NOT fire if multiple touches are active.  This method is required.\n  onTouch(point, offsetX, offsetY) {}\n\n  // This function will only fire during a POINTERMOVE event where more than one touch is active.\n  // This function will only support the first two active touches and all others will be ignored.\n  // Points A and B are said touches.  Both previous and current pinch distances and positions are\n  // available to support basic gesture logic, as needed.  As a warning, the previous movement may\n  // be null at the beginning of a multi-touch movement.\n  onMultiTouch(pointA, pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) {}\n\n  // This function will only fire during a POINTERDOUBLETAP event.  The \"type\" parameter\n  // is just the pointer type (mouse, touch, etc.).  This is optional.\n  onDoubleTap(type) {}\n\n  // This function will fire when a contextmenu event occurs (right-click menu).\n  // \"evt\" is the triggering event.  This is optional.\n  onContextMenu(evt) {}\n\n  // This function will fire when a POINTERDOWN event occurs.\n  // \"evt\" is the triggering event.  This is optional.\n  onButtonDown(evt) {}\n\n  // This function will fire when a POINTERUP event occurs (right-click menu).\n  // \"evt\" is the triggering event.  This is optional.\n  onButtonUp(evt) {}\n\n  // This function will fire when the window loses focus (eg. blur event)\n  // This is optional.\n  onLostFocus() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ray Instance in Babylon.js\nDESCRIPTION: Instantiates a `BABYLON.Ray` object. It requires an origin point (Vector3), a normalized direction vector (Vector3), and a maximum length (number) for the raycast.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ray = new BABYLON.Ray(origin, direction, length);\n```\n\n----------------------------------------\n\nTITLE: Declaring Storage Buffer in WGSL\nDESCRIPTION: This WGSL snippet shows how to declare a storage buffer structure and variable for read-write operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_6\n\nLANGUAGE: wgsl\nCODE:\n```\nstruct Buffer {\n    items: array<f32>,\n};\nvar<storage,read_write> storageBuffer : Buffer;\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Feature Availability\nDESCRIPTION: Demonstrates how to check if a specific WebXR feature is available using array methods.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst availableFeatures = WebXRFeaturesManager.GetAvailableFeatures();\nif (availableFeatures.indexOf(WebXRFeatureName.POINTER_SELECTION) !== -1) {\n    // Pointer selection is available\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Anchor Observables - JavaScript\nDESCRIPTION: Sets up listeners for anchor addition, removal, and update events using observables on the anchorSystem. Enables reactive programming patterns for responding to anchor lifecycle changes in AR scenes. Each observable receives the anchor object as an argument.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nanchorSystem.onAnchorAddedObservable.add((anchor) => {\\n  // ... do what you want with the anchor after it was added\\n});\\n\\nanchorSystem.onAnchorRemovedObservable.add((anchor) => {\\n  // ... do what you want with the anchor after it was removed\\n});\\n\\nanchorSystem.onAnchorUpdatedObservable.add((anchor) => {\\n  // ... do what you want with the anchor after it was updated\\n});\n```\n\n----------------------------------------\n\nTITLE: Masking Animations in AnimationGroup with AnimationGroupMask (JavaScript)\nDESCRIPTION: Demonstrates creating inclusion/exclusion masks to selectively play certain animations in an AnimationGroup using AnimationGroupMask and AnimationGroupMaskMode. Requires Babylon.js, mesh objects with name properties, and AnimationGroup. Inputs: array of mesh names, mask mode; Outputs: only masked animations are played, or excluded if using Exclude.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst mask1 = new BABYLON.AnimationGroupMask([sphereA.name, sphereB.name], BABYLON.AnimationGroupMaskMode.Include); // play only animations affecting sphereA and sphereB\nanimGroup.mask = mask1;\nconst mask2 = new BABYLON.AnimationGroupMask([sphereA.name, sphereB.name], BABYLON.AnimationGroupMaskMode.Exclude); // play all animations except those affecting sphereA or sphereB\nanimGroup.mask = mask2;\n```\n\n----------------------------------------\n\nTITLE: Coloring Line Systems in Babylon.js\nDESCRIPTION: Shows how to apply color to a line system after creation using the color property. Colors are set using Babylon's Color3 system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/line_system.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlinesystem.color = new BABYLON.Color3(1, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Events in Babylon.js\nDESCRIPTION: This snippet shows how to use the onPointerObservable to handle various pointer events in a Babylon.js scene. It logs different types of pointer interactions such as down, up, move, wheel, pick, tap, and double-tap.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/interactWithScenes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onPointerObservable.add((pointerInfo) => {\n  switch (pointerInfo.type) {\n    case BABYLON.PointerEventTypes.POINTERDOWN:\n      console.log(\"POINTER DOWN\");\n      break;\n    case BABYLON.PointerEventTypes.POINTERUP:\n      console.log(\"POINTER UP\");\n      break;\n    case BABYLON.PointerEventTypes.POINTERMOVE:\n      console.log(\"POINTER MOVE\");\n      break;\n    case BABYLON.PointerEventTypes.POINTERWHEEL:\n      console.log(\"POINTER WHEEL\");\n      break;\n    case BABYLON.PointerEventTypes.POINTERPICK:\n      console.log(\"POINTER PICK\");\n      break;\n    case BABYLON.PointerEventTypes.POINTERTAP:\n      console.log(\"POINTER TAP\");\n      break;\n    case BABYLON.PointerEventTypes.POINTERDOUBLETAP:\n      console.log(\"POINTER DOUBLE-TAP\");\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a PhysicsBody in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to instantiate a `PhysicsBody` in Babylon.js. It requires a `TransformNode` (like a `Mesh`), a `PhysicsMotionType` (e.g., `DYNAMIC`), a boolean indicating if the body starts in sleep mode, and the `Scene` object. This attaches physics properties to the visual object, enabling it to participate in the physics simulation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\");\nconst body = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling Order Independent Transparency (OIT) in Babylon.js Scene using JavaScript\nDESCRIPTION: Activates the Order Independent Transparency (OIT) feature for the current Babylon.js scene by setting the `useOrderIndependentTransparency` property to `true`. This feature automatically handles the rendering order of transparent objects using the dual depth peeling method, eliminating the need for manual sorting or specific alpha configurations. Note that this feature has performance implications, potential compatibility issues with post-processes and custom materials, and requires WebGL 2 or WebGPU.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/transparent_rendering.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.useOrderIndependentTransparency = true;\n```\n\n----------------------------------------\n\nTITLE: Handling Different Gamepad Types in Babylon.js\nDESCRIPTION: Shows how to handle different types of gamepads, such as Xbox360 controllers and pose-enabled controllers, in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/gamepads.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngamepadManager.onGamepadConnectedObservable.add((gamepad, state)=>{\n    if (gamepad instanceof BABYLON.Xbox360Pad) {\n        gamepad.onButtonDownObservable.add((button, state)=>{\n            console.log(BABYLON.Xbox360Button[button])\n        })\n    }\n    if (gamepad instanceof BABYLON.PoseEnabledController) {\n        gamepad.onMainButtonStateChangedObservable.add((button, state)=>{\n            console.log(button.value)\n        })\n        const position = gamepad.devicePosition\n        const rotation = gamepad.deviceRotationQuaternion\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CSG2 Library for Babylon.js - JavaScript\nDESCRIPTION: Shows usage of the asynchronous function BABYLON.InitializeCSG2Async to initialize the CSG2 (Constructive Solid Geometry) library before performing CSG operations. Dependencies include Babylon.js and the external manifold geometry library. Accepts optional configuration parameters to provide a custom manifold instance or URL. No direct outputs; prepares the environment for subsequent CSG operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/mergeMeshes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait BABYLON.InitializeCSG2Async();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait BABYLON.InitializeCSG2Async({\n  manifoldInstance: ...\n  manifoldMeshInstance: ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait BABYLON.InitializeCSG2Async({\n  manifoldUrl: \"https://unpkg.com/manifold-3d@2.5.1\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Particle Positions in a Solid Particle System with Babylon.js (JavaScript)\nDESCRIPTION: This snippet defines a function assigned to SPS.initParticles, which randomly places each particle within a cube centered at the origin, using BABYLON.Scalar.RandomRange for positions along each axis. It operates on the particles array property of the SPS; prerequisites include having a properly instantiated SPS with particles created and BABYLON.Scalar available. After initialization, this alters only particle positions, not colors or other properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_intro.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// initiate particles function\\nSPS.initParticles = () => {\\n    for (let p = 0; p < SPS.nbParticles; p++) {\\n        const particle = SPS.particles[p];\\n        //Place particles at random positions with a cube\\n      \\tparticle.position.x = BABYLON.Scalar.RandomRange(-50, 50);\\n        particle.position.y = BABYLON.Scalar.RandomRange(-50, 50);\\n        particle.position.z = BABYLON.Scalar.RandomRange(-50, 50);\\n    }\\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Tube Mesh with Radius Function in Babylon.js\nDESCRIPTION: This snippet demonstrates creating an updatable tube using `MeshBuilder.CreateTube` with a `radiusFunction` and updating it later. The initial creation uses `updatable: true`. The update call uses `MeshBuilder.CreateTube` again, providing a potentially new `path` (path2) and a new `radiusFunction` (radiusFunction2) within the options object, along with the `instance` property referencing the original `tube` mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst radiusFunction1 = function(i, distance) { ... };\nconst radiusFunction2 = function(i, distance) { ... };\nlet tube = BABYLON.MeshBuilder.CreateTube(\"tube\", { path: path1, tessellation: 12, radiusFunction: radiusFunction1, cap, updatable: true }, scene);\ntube = BABYLON.MeshBuilder.CreateTube(null, {path: path2, radiusFunction: radiusFunction2, instance: tube});\n```\n\n----------------------------------------\n\nTITLE: Adding Glow Layer Effect in BabylonJS\nDESCRIPTION: Implements a glow effect layer with customizable intensity to enhance visual elements in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/extraFeatures.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new GlowLayer(\"glow\", scene);\ngl.intensity = 0.4;\n```\n\n----------------------------------------\n\nTITLE: Creating a Path3D Instance in Babylon.js (JavaScript)\nDESCRIPTION: Shows the fundamental way to instantiate a `BABYLON.Path3D` object. It requires an array of `BABYLON.Vector3` objects (`points`) representing the points along the path.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/path3D.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [v1, v2, ..., vn];\\u00A0 \\u00A0 \\u00A0\\u00A0 \\u00A0 // array of Vector3\nconst path3d = new BABYLON.Path3D(points);\n```\n\n----------------------------------------\n\nTITLE: Creating Default Environment in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a default HDR environment for a Babylon.js scene using the built-in createDefaultEnvironment function. This function automatically loads a default .env file ('_environmentSpecular.env') from a remote source. No additional dependencies are required beyond Babylon.js. The scene parameter is the Babylon.js Scene instance. No arguments are necessary; expected output is a fully ambient-lit 3D scene configured for PBR materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/HDREnvironment.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultEnvironment();\n```\n\n----------------------------------------\n\nTITLE: Adding and Handling Texture Tasks in AssetsManager (JavaScript)\nDESCRIPTION: Demonstrates creating a texture loading task and responding to its completion. The texture is assigned to a material's diffuseTexture property when loaded. Assumes you have both an assets manager and a material instance ready.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst textureTask = assetsManager.addTextureTask(\"image task\", \"img.jpg\");\ntextureTask.onSuccess = function (task) {\n  material.diffuseTexture = task.texture;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing IGLTFLoaderExtension Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom glTF loader extension by implementing the IGLTFLoaderExtension interface. It includes basic properties and an example of overriding the loadSceneAsync method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/createExtensions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IGLTFLoaderExtension } from \"@babylonjs/loaders/glTF/2.0\";\n\nclass MyCustomExtension implements IGLTFLoaderExtension {\n    public readonly name = \"myCustomExtension\";\n    public enabled = true;\n    public order = 100;\n\n    // Implement any of the optional functions, such as:\n    public loadSceneAsync(): Nullable<Promise<void>> {\n        // Modify the default behavior when loading scenes.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Basic Scene Setup\nDESCRIPTION: TypeScript class for initializing a basic BabylonJS scene with camera, light, and sphere.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gettingSetUp.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@babylonjs/core/Debug/debugLayer\";\nimport \"@babylonjs/inspector\";\nimport \"@babylonjs/loaders/glTF\";\nimport { Engine, Scene, ArcRotateCamera, Vector3, HemisphericLight, Mesh, MeshBuilder } from \"@babylonjs/core\";\n\nclass App {\n    constructor() {\n        var canvas = document.createElement(\"canvas\");\n        canvas.style.width = \"100%\";\n        canvas.style.height = \"100%\";\n        canvas.id = \"gameCanvas\";\n        document.body.appendChild(canvas);\n\n        var engine = new Engine(canvas, true);\n        var scene = new Scene(engine);\n\n        var camera: ArcRotateCamera = new ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), scene);\n        camera.attachControl(canvas, true);\n        var light1: HemisphericLight = new HemisphericLight(\"light1\", new Vector3(1, 1, 0), scene);\n        var sphere: Mesh = MeshBuilder.CreateSphere(\"sphere\", { diameter: 1 }, scene);\n\n        window.addEventListener(\"keydown\", (ev) => {\n            if (ev.shiftKey && ev.ctrlKey && ev.altKey && (ev.key === \"I\" || ev.key === \"i\")) {\n                if (scene.debugLayer.isVisible()) {\n                    scene.debugLayer.hide();\n                } else {\n                    scene.debugLayer.show();\n                }\n            }\n        });\n\n        engine.runRenderLoop(() => {\n            scene.render();\n        });\n    }\n}\nnew App();\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Texture in Babylon.js\nDESCRIPTION: Creates a new VideoTexture and assigns it as the diffuse texture of a material. This example loads a video file to be displayed on a screen object in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/videoTexture.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\necran.material.diffuseTexture = new BABYLON.VideoTexture(\"video\", \"textures/babylonjs.mp4\", scene, true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sphere with NodeGeometry in JavaScript\nDESCRIPTION: Shows how to set up a simple Node Geometry graph in JavaScript to generate a sphere. It involves creating a NodeGeometry object, adding a SphereBlock as the geometry source, defining a GeometryOutputBlock as the final output, and connecting the source block's geometry output to the output block's input.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create node geometry\nvar nodegeo = new BABYLON.NodeGeometry(\"nodegeo\");\n\n// Create source sphere\nvar sphere = new BABYLON.SphereBlock(\"sphere\");\n\n// Create output\nvar output = new BABYLON.GeometryOutputBlock(\"geometryout\");\nnodegeo.outputBlock = output;\nsphere.geometry.connectTo(output.geometry);\n```\n\n----------------------------------------\n\nTITLE: Creating Skybox with CubeTexture in BabylonJS\nDESCRIPTION: Creates a skybox using MeshBuilder and applies a CubeTexture material. The code creates a large box, sets up material properties including backface culling and reflection textures, and configures the texture coordinate mode for proper skybox rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/sky.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", {size:150}, scene);\nconst skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\nskyboxMaterial.backFaceCulling = false;\nskyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"textures/skybox\", scene);\nskyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\nskyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\nskyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\nskybox.material = skyboxMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Scenes in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create multiple scenes in Babylon.js. It shows the basic setup for creating two separate scenes using the BABYLON.Scene constructor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiScenes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene0 = new BABYLON.Scene(engine);\nvar scene1 = new BABYLON.Scene(engine);\n```\n\n----------------------------------------\n\nTITLE: Creating Fullscreen Babylon.js GUI Texture - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize an AdvancedDynamicTexture in fullscreen mode using Babylon.js GUI. The 'CreateFullscreenUI' method creates an overlay that covers the entire rendering area and automatically resizes based on the canvas resolution. The first argument specifies an identifier string for the UI instance. Dependencies: Babylon.js, Babylon.js GUI extension loaded in the environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"myUI\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Emitter with Generators in Babylon.js (JavaScript)\nDESCRIPTION: Creates a custom particle emitter using `BABYLON.CustomParticleEmitter` and defines generator functions for particle starting positions (`particlePositionGenerator`) and destinations (`particleDestinationGenerator`). These functions receive either a particle index (GPU) or a particle object (CPU) and must set the `x`, `y`, `z` properties of the `out` vector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n var customEmitter = new BABYLON.CustomParticleEmitter();\n\n var id = 0;\n customEmitter.particlePositionGenerator = (index, particle, out) => {\n     out.x = Math.cos(id) * 5;\n     out.y = Math.sin(id) * 5;\n     out.z = 0;\n     id += 0.01;\n }\n\n customEmitter.particleDestinationGenerator = (index, particle, out) => {\n     out.x = 0;\n     out.y = 0;\n     out.z = 0;\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Size Range - Babylon.js - JavaScript\nDESCRIPTION: This snippet sets minimum and maximum sizes for particles in a Babylon.js particle system. It controls the random size range assigned to each particle upon emission. Required dependency: Babylon.js. The minSize and maxSize properties expect numeric values; all particles will have sizes between these values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.minSize = 0.1;\nparticleSystem.maxSize = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Forcing Environment Irradiance Calculation in Fragment Shader for PBR Material\nDESCRIPTION: This snippet shows how to force the calculation of environment irradiance (diffuse Image Based Lighting) in the fragment shader for a Babylon.js PBR material. By setting `pbr.forceIrradianceInFragment` to `true`, the calculation can leverage the normal map, leading to more accurate lighting on bumpy surfaces, especially for rough, non-reflective materials, at the cost of performance compared to the default vertex shader calculation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\npbr.forceIrradianceInFragment = true;\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Sheen Effect on PBR Material in Babylon.js\nDESCRIPTION: This snippet demonstrates how to enable the sheen effect on a Babylon.js PBR material and set its intensity. It initializes a PBR material, sets its metallic and roughness properties, and then enables the sheen component and assigns an intensity value (0.5). Sheen is primarily used for simulating fabric materials and is most effective on rough dielectric materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.sheen.isEnabled = true;\npbr.sheen.intensity = 0.5;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Mesh Picking Predicate Function in Babylon.js\nDESCRIPTION: Defines a JavaScript function used as a filter for ray picking operations. This function accepts a mesh object as an argument and should return `true` if the mesh is eligible for picking, and `false` otherwise. In this example, it prevents the ray from picking specific meshes (`box2` and `box`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction predicate(mesh) {\n  if (mesh == box2 || mesh == box) {\n    return false;\n  }\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Directional Light in Babylon.js\nDESCRIPTION: Creates a new DirectionalLight instance. This light is defined by a direction vector and emits parallel light rays from an infinite source, simulating sources like the sun. Requires a name, direction vector, and the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst light = new BABYLON.DirectionalLight(\"DirectionalLight\", new BABYLON.Vector3(0, -1, 0), scene);\n```\n```\n\n----------------------------------------\n\nTITLE: Attaching Spatial Audio Sources to Meshes - Babylon.js (JavaScript)\nDESCRIPTION: This example illustrates creating a spatialized sound in Babylon.js and attaching it to a graphical mesh to track 3D position and orientation. The 'spatialEnabled' flag must be true upon sound creation to avoid initialization delays. The code shows using 'spatial.attach' to bind the sound source to a mesh, requiring a valid mesh object, and playing the sound in a loop after the audio engine is unlocked. Inputs are mesh references and a spatial-enabled sound file; output is positionally tracked 3D audio that moves with the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounce = await BABYLON.CreateSoundAsync(\"bounce\",\n    \"sounds/bounce.wav\",\n    { spatialEnabled: true }\n);\n\nbounce.spatial.attach(mesh);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\nbounce.play({ loop: true });\n```\n\n----------------------------------------\n\nTITLE: Basic Babylon.js Viewer Annotations\nDESCRIPTION: Example showing how to create basic annotations for tracking hotspots in a solar system model, with HTML elements that track hotspots in real-time during animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/hotspots.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<babylon-viewer>\n  <babylon-viewer-annotation hotspot=\"earth\"></babylon-viewer-annotation>\n</babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: Creating a SpriteManager with Pixel-Perfect Rendering in Babylon.js\nDESCRIPTION: Demonstrates how to create a SpriteManager with pixel-perfect rendering enabled using the spriteRendererOptions. This example sets up a player sprite manager with specific dimensions and rendering options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprites_introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst spriteManagerPlayer = new BABYLON.SpriteManager(\n    \"playerManager\",\n    \"sprite_url.png\",\n    3,\n    {\n        width: 32,\n        height: 32,\n    },\n    scene,\n    0.003,\n    undefined,\n    undefined,\n    undefined,\n    {\n        spriteRendererOptions: {\n            pixelPerfect: true\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Offsetting Textures in Babylon.js\nDESCRIPTION: Adjusts the position of a texture on a mesh using uOffset and vOffset properties. This technique allows for precise positioning of textures without modifying UV coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/moreMaterials.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.diffuseTexture.uOffset = 1.5;\nmyMaterial.diffuseTexture.vOffset = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Auto-Disposing Particle System on Stop in Babylon.js\nDESCRIPTION: Configures the particle system to automatically dispose itself (release resources) once it stops emitting particles (e.g., after reaching `targetStopDuration`). This is useful for one-shot particle effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.disposeOnStop = true;\n```\n\n----------------------------------------\n\nTITLE: Chaining Actions with 'then' in Babylon.js\nDESCRIPTION: Illustrates how to chain actions using the `.then()` method after registering an initial action. The first pick triggers an `InterpolateValueAction` on the light's diffuse color. The subsequent pick triggers the chained `SetValueAction` (associated with `BABYLON.ActionManager.NothingTrigger` in this context) to set the mesh material's `wireframe` property to false. Requires an initialized `actionManager`, `light` object, and `mesh` with a material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, light, \"diffuse\", BABYLON.Color3.Black(), 1000)).then(new BABYLON.SetValueAction(BABYLON.ActionManager.NothingTrigger, mesh.material, \"wireframe\", false));\n```\n\n----------------------------------------\n\nTITLE: Applying Forces to Instanced Physics Bodies in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates creating thin instances from a base mesh, associating a single `PhysicsBody` with the instanced mesh, and applying forces. The `applyForce` method can target all instances simultaneously or a specific instance by providing the optional `instanceIndex` parameter. This allows for efficient physics simulation of many similar objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\");\n\n// This generates 3 thin instances based on the sphere mesh\nsphere.thinInstanceAddSelf();\nsphere.thinInstanceAddSelf();\nsphere.thinInstanceAddSelf();\n\nconst body = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\n\n// Apply a vertical force on all the 3 spheres\nbody.applyForce(new BABYLON.Vector3(0, 100, 0), new BABYLON.Vector3(0, 0, 0));\n\n// Apply a horizontal force to the first sphere ONLY\nbody.applyForce(new BABYLON.Vector3(100, 0, 0), new BABYLON.Vector3(0, 0, 0), 0); \n```\n\n----------------------------------------\n\nTITLE: Removing Selectors from Groups in Babylon.js using JavaScript\nDESCRIPTION: This snippet illustrates removing selectors from different groups (`transformGroup`, `colorGroup`, `rotationGroup`) using the `removeSelector` method. Each selector is identified by its zero-based index within its respective group.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntransformGroup.removeSelector(1);\ncolorGroup.removeSelector(0);\nrotationGroup.removeSelector(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshDebugPluginMaterial for TRIANGLES_VERTICES Mode in JavaScript\nDESCRIPTION: This snippet demonstrates configuring the MeshDebugPluginMaterial to display both the mesh wireframe and vertex dots simultaneously. It requires pre-processing the mesh with `PrepareMeshForTrianglesAndVerticesMode`. The plugin is then instantiated with the `mode` set to `TRIANGLES_VERTICES`, and various options like `wireframeVerticesColor`, `wireframeThickness`, `vertexColor`, and `vertexRadius` are set to customize the visualization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/visualizeMeshData.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.MeshDebugPluginMaterial.PrepareMeshForTrianglesAndVerticesMode(mesh);\n\nnew BABYLON.MeshDebugPluginMaterial(mesh.material, {\n    mode: BABYLON.MeshDebugMode.TRIANGLES_VERTICES,\n    wireframeVerticesColor: new BABYLON.Color3(0.8, 0.8, 0.8),\n    wireframeThickness: 0.7,\n    vertexColor: new BABYLON.Color3(0, 0, 0),\n    vertexRadius: 1.2\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Node Material in Babylon.js using JavaScript\nDESCRIPTION: Creates a new NodeMaterial instance attached to a scene, with optional configuration for shader output. Requires Babylon.js to be imported and a scene object defined. The main parameters are the material's name, the scene object, and an options object (e.g., emitComments). The result is a NodeMaterial object ready for node block attachments and further customization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nodeMaterial = new BABYLON.NodeMaterial(\"node material\", scene, { emitComments: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring and Starting a Basic Particle System in Babylon.js\nDESCRIPTION: Demonstrates the minimal setup for a particle system. It assigns a texture using `BABYLON.Texture` and sets the emitter, which can be a `BABYLON.Mesh`, `BABYLON.AbstractMesh`, or a `BABYLON.Vector3` position. Finally, `start()` begins the particle emission.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.particleTexture = new BABYLON.Texture(\"path to texture\");\n\nmyParticleSystem.emitter = mesh; // a mesh or abstract mesh in the scene\n// or\nmyParticleSystem.emitter = point; //a Vector3\n\nmyParticleSystem.start(); //Starts the emission of particles\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Teleportation Feature Manually\nDESCRIPTION: Shows how to manually enable the teleportation feature using the features manager, including specifying input and floor meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst featuresManager = xr.baseExperience.featuresManager; // or any other way to get a features manager\nfeaturesManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\" /* or latest */, {\n  xrInput: xr.input,\n  // add options here\n  floorMeshes: [ground, secondFloor, thirdFloor],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Blank Node Material from Snippet Asynchronously using JavaScript\nDESCRIPTION: Illustrates JavaScript code to create a new, empty Babylon.js Node Material instance asynchronously. It uses `BABYLON.NodeMaterial.ParseFromSnippetAsync` with the special `_BLANK` snippet ID and the scene object. This is useful for programmatically starting a new material definition from scratch, which can then be potentially edited via the Inspector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.NodeMaterial.ParseFromSnippetAsync(\"_BLANK\", scene).then((nodeMaterial) => {\n  sphere.material = nodeMaterial;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing XmlLoader with Class Context in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows initializing the XmlLoader with a JavaScript class context (typically 'this'). This enables mapping between class properties/methods and the observables or dynamic XML attributes defined in GUI layout XML. Used when GUI logic is encapsulated within a class, ensuring correct data binding.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nconst xmlLoader = new BABYLON.GUI.XmlLoader(this);\n```\n\n----------------------------------------\n\nTITLE: Enabling Fluid Renderer and Adding Particle System in JavaScript\nDESCRIPTION: Demonstrates how to enable the fluid renderer component on a Babylon.js scene and add an existing particle system (`ParticleSystem` or `GPUParticleSystem`) to be rendered as a fluid. It returns references (`renderObject`) containing the fluid object (`fluidObject`) and the target renderer (`targetRenderer`) for further customization. Requires an initialized `scene` and a `particleSystem` instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/using_fluid_renderer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fluidRenderer = scene.enableFluidRenderer();\nconst renderObject = fluidRenderer.addParticleSystem(particleSystem);\n\nconst fluidObject = renderObject.object;\nconst targetRenderer = renderObject.targetRenderer;\n```\n\n----------------------------------------\n\nTITLE: Configuring TextBlock for Auto-Resizing in ScrollViewer (JavaScript)\nDESCRIPTION: Explains how to configure a `BABYLON.GUI.TextBlock` to wrap text and automatically resize its height to fit the content when placed inside a `ScrollViewer`. Setting `textWrapping` to `WordWrap` and `resizeToFit` to `true` achieves this, typically resulting in only vertical scrolling being needed. Requires an existing `TextBlock` instance (`myTextBlock`) and the `BABYLON.GUI.TextWrapping` enum.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/scrollViewer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyTextBlock.textWrapping = BABYLON.GUI.TextWrapping.WordWrap;\nmyTextBlock.resizeToFit = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Properties Using Group Index (s) in Babylon.js\nDESCRIPTION: Illustrates using a custom function where the particle's y-position depends on its index `s` within the current `addPoints` call. When called multiple times, this leads to points being vertically positioned based only on the count within each call, creating a denser block compared to using the overall index `i`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar myfunc = function (particle, i, s) {\n  particle.position = new BABYLON.Vector3(0.5 + 0.25 * Math.random(), s / 5000, 0.25 * Math.random());\n  particle.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), Math.random());\n};\npcs.addPoints(10000, myfunc);\npcs.addPoints(10000, myfunc);\n```\n\n----------------------------------------\n\nTITLE: Performing a Raycast with Babylon.js Physics - JavaScript\nDESCRIPTION: This snippet demonstrates how to perform a raycast using Babylon.js's physics engine. It creates a PhysicsRaycastResult instance, defines start and end points, and calls raycastToRef to check for collisions. If a collision is detected (hasHit is true), details of the intersection are logged. Requires Babylon.js to be loaded and a valid physicsEngine object. Parameters: 'start' and 'end' are Vector3 positions defining the ray. Output: logs the collision point if found. The reusable raycastResult object should be passed by reference for efficient repeated calls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/raycast.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar raycastResult = new BABYLON.PhysicsRaycastResult();\nvar start = new BABYLON.Vector3(1, 20, 2);\nvar end = new BABYLON.Vector3(1, -20, 2);\nphysicsEngine.raycastToRef(start, end, raycastResult);\nif (raycastResult.hasHit) {\n    console.log(\"Collision at \", raycastResult.hitPointWorld);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an Animation in Babylon.js\nDESCRIPTION: This code demonstrates how to start an animation in Babylon.js using the beginAnimation method of the scene. It specifies the target object, start frame, end frame, and whether the animation should loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_design.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.beginAnimation(box, 0, 2 * frameRate, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Sounds from a Preloaded Babylon.js Sound Buffer (JavaScript)\nDESCRIPTION: Creates a `soundBuffer` asynchronously using `CreateSoundBufferAsync` from a URL. This buffer is then used as the source parameter when creating two separate sound instances (`bounce1` and `bounce2`) using `CreateSoundAsync`. The second sound instance (`bounce2`) is configured with a `playbackRate` of 2. This approach preloads the audio data once. After unlocking the audio engine, both sounds are played. Requires the Babylon.js library (`BABYLON`) and an initialized `audioEngine`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst soundBuffer = await BABYLON.CreateSoundBufferAsync(\n    \"sounds/bounce.wav\"\n);\n\nconst bounce1 = await BABYLON.CreateSoundAsync(\"bounce1\",\n    soundBuffer\n);\n\nconst bounce2 = await BABYLON.CreateSoundAsync(\"bounce2\",\n    soundBuffer\n    { playbackRate: 2 }\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\nbounce1.play();\nbounce2.play();\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Terrain from a Height Map in JavaScript\nDESCRIPTION: Demonstrates how to generate a terrain from a height map using the DynamicTerrain class. The code downloads a height map image, processes it to create terrain data, and creates a terrain mesh with the generated data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Declare a callback function that will be executed once the heightmap file is downloaded\n// This function is passed the generated data and the number of points on the map depth and width\nconst terrain;\nconst createTerrain = function (mapData, mapSubX, mapSubZ) {\n  const options = {\n    terrainSub: 100, // 100 x 100 quads\n    mapData: mapData, // the generated data received\n    mapSubX: mapSubX,\n    mapSubZ: mapSubZ, // the map number of points per dimension\n  };\n  terrain = new BABYLON.DynamicTerrain(\"dt\", options, scene);\n  terrain.createUVMap(); // compute also the UVs\n  terrain.mesh.material = someMaterial;\n  // etc about the terrain ...\n  // terrain.updateCameraLOD = function(camera) { ... }\n};\n\n// Create the map from the height map and call the callback function when done\nconst hmURL = \"https://www.babylonjs.com/assets/heightMap.png\"; // heightmap file URL\nconst hmOptions = {\n  width: 5000,\n  height: 4000, // map's z-axis depth (not elevation) in the World\n  subX: 1000,\n  subZ: 800, // number of points on map width and depth\n  onReady: createTerrain, // callback function declaration\n};\nconst mapData = new Float32Array(1000 * 800 * 3); // the array that will store the generated data\nBABYLON.DynamicTerrain.CreateMapFromHeightMapToRef(hmURL, hmOptions, mapData, scene);\n```\n\n----------------------------------------\n\nTITLE: Computing Navigation Path\nDESCRIPTION: Calculates a path between two points and creates a visual representation using dashed lines.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/createNavMesh.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pathPoints = navigationPlugin.computePath(crowd.getAgentPosition(agent), navigationPlugin.getClosestPoint(destinationPoint));\npathLine = BABYLON.MeshBuilder.CreateDashedLines(\"ribbon\", { points: pathPoints, updatable: true, instance: pathLine }, scene);\n```\n\n----------------------------------------\n\nTITLE: Using PhysicsHelper for Complex Force Effects in Babylon.js\nDESCRIPTION: Demonstrates how to use the PhysicsHelper utility to create various force phenomena including radial explosions, gravitational fields, updrafts, and vortices. Each method accepts parameters for origin, radius, strength, and additional effect-specific options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/forces.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar physicsHelper = new BABYLON.PhysicsHelper(scene);\n\nvar origin = BABYLON.Vector3(0, 0, 0);\nvar radius = 10;\nvar strength = 20;\nvar falloff = BABYLON.PhysicsRadialImpulseFalloff.Linear; // or BABYLON.PhysicsRadialImpulseFalloff.Constant\n\nvar explosionEvent = physicsHelper.applyRadialExplosionImpulse( // or .applyRadialExplosionForce\n    origin,\n    radius,\n    strength,\n    falloff\n);\n// the second `radius` argument can also act as options: `.applyRadialExplosionImpulse(origin, { radius: radius, strength: strength, falloff: falloff })`\n\n// or\n\nvar gravitationalFieldEvent = physicsHelper.gravitationalField(\n    origin,\n    radius,\n    strength,\n    falloff\n);\n// the second `radius` argument can also act as options: `.gravitationalField(origin, { radius: radius, strength: strength, falloff: falloff })`\ngravitationalFieldEvent.enable(); // need to call, if you want to activate the gravitational field.\nsetTimeout(() => gravitationalFieldEvent.disable(), 3000);\n\n// or\n\nvar updraftEvent = physicsHelper.updraft(\n    origin,\n    radius,\n    strength,\n    height,\n    BABYLON.PhysicsUpdraftMode.Center // or BABYLON.PhysicsUpdraftMode.Perpendicular\n);\n// the second `radius` argument can also act as options: `.updraft(origin, { radius: radius, strength: strength, height: height, updraftMode: PhysicsUpdraftMode.Center })`\nupdraftEvent.enable();\nsetTimeout(() => updraftEvent.disable(), 5000);\n\n// or\n\nvar vortexEvent = physicsHelper.vortex(\n    origin,\n    radius,\n    strength,\n    height\n);\n// the second `radius` argument can also act as options: `.vortex(origin, { radius: radius, strength: strength, height: height, centripetalForceThreshold: 0.7, centripetalForceMultiplier: 5, centrifugalForceMultiplier: 0.5, updraftForceMultiplier: 0.02 })`\nvortexEvent.enable();\nsetTimeout(() => vortexEvent.disable(), 5000);\n```\n\n----------------------------------------\n\nTITLE: Implementing a 3-Second Button Press with Visual Feedback in Babylon.js\nDESCRIPTION: Demonstrates how to create a button that requires a 3-second press to activate, with visual feedback during the press. This example uses setAndStartTimer with pointer events and material color changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst guiButton = // created a GUI button\nconst guiButtonMaterial = ... // get the material\nlet pressed = false;\nscene.onPointerDown = () => {\n    pressed = true;\n    BABYLON.setAndStartTimer({\n        timeout: 2 * 60 * 1000,\n        contextObservable: scene.onBeforeRenderObservable,\n        breakCondition: () => {\n            // break if no longer pressed\n            return !pressed;\n        },\n        onEnded: () {\n            console.log('Button pressed!');\n            // back to a black button\n            guiButtonMaterial.diffuseColor.set(0,0,0);\n         },\n        onTick: (data) => {\n            // turn it slowly green on each call to the registered observer\n            guiButtonMaterial.diffuseColor.set(0,data.completeRate,0);\n        },\n        onAborted: () => {\n            // Aborted, back to a black button\n            guiButtonMaterial.diffuseColor.set(0,0,0);\n        }\n    });\n}\n\nscene.onPointerUp = () => {\n    pressed = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Remote Player Meshes with Network Data - JavaScript\nDESCRIPTION: This snippet updates the positions and rotations of other players' meshes in real time by listening for player position changes from the network. It uses direct snapping when close to the broadcast target to prevent jitter, otherwise interpolates movement via the physics engine and quaternion slerp. Dependencies are Babylon.js and an up-to-date player state structure. Inputs are state changes from the server; output is visually consistent remote player movement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.position.onChange = () => {\n  if (key != room.sessionId) {\n    if (Math.abs(playerViews[key].position.x) < 0.2 && Math.abs(playerViews[key].position.y) < 0.5 && Math.abs(playerViews[key].position.x) < 0.2) {\n      playerViews[key].position = new BABYLON.Vector3(player.position.x, player.position.y, player.position.z);\n    } else {\n      playerViews[key].physicsImpostor.setLinearVelocity(new BABYLON.Vector3((player.position.x - playerViews[key].position.x) * 10, (player.position.y - playerViews[key].position.y) * 10, (player.position.z - playerViews[key].position.z) * 10));\n\n      playerViews[key].rotationQuaternion = BABYLON.Quaternion.Slerp(playerViews[key].rotationQuaternion, new BABYLON.Quaternion(player.quaternion.x, player.quaternion.y, player.quaternion.z, player.quaternion.w), 0.4);\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Babylon.js GUI Layout with XML\nDESCRIPTION: This XML snippet outlines the structure of a simple Babylon.js GUI, including rectangles, buttons, and images, with GUI attributes mapped to Babylon.GUI properties. The XML format is strict about naming conventions and supports hierarchical nesting. Used as layout input for XmlLoader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\"?>\n<root>\n    <Rectangle id=\\\"firstContainer\\\" verticalAlignment=\\\"Control.HORIZONTAL_ALIGNMENT_TOP\\\" background=\\\"yellow\\\" width=\\\".8\\\" height=\\\".4\\\" color=\\\"Orange\\\">\\n        <Button id=\\\"imageButton\\\" name=\\\"imageButton\\\" width=\\\"0.2\\\" background=\\\"red\\\" height=\\\"0.3\\\">\\n                <Image id=\\\"image\\\" source=\\\"assets/icon.png\\\" width=\\\"1\\\" height=\\\"1\\\" name=\\\"image\\\" stretch=\\\"Image.STRETCH_FILL\\\" horizontalAlignment=\\\"Control.HORIZONTAL_ALIGNMENT_LEFT\\\" />\\n        </Button>\\n    </Rectangle>\\n</root>\n```\n\n----------------------------------------\n\nTITLE: Animation Weights Implementation\nDESCRIPTION: Demonstrates how to implement weighted animations for blending multiple animations together with specific weights.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst idleAnim = scene.beginWeightedAnimation(skeleton, 0, 89, 1.0, true);\nconst walkAnim = scene.beginWeightedAnimation(skeleton, 90, 124, 0, true);\nconst runAnim = scene.beginWeightedAnimation(skeleton, 125, 146, 0, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst idleAnim = scene.beginWeightedAnimation(skeleton, 0, 89, 1.0, true);\nconst runAnim = scene.beginWeightedAnimation(skeleton, 125, 146, 0, true);\n\nidleAnim.weight = 0.5;\nrunAnim.weight = 0.5;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Synchronize animations\nidleAnim.syncWith(runAnim);\n```\n\n----------------------------------------\n\nTITLE: Creating URL for Blob in JavaScript\nDESCRIPTION: This code creates a URL pointing to the Blob object in memory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadFromMemory.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetUrl = URL.createObjectURL(assetBlob);\n```\n\n----------------------------------------\n\nTITLE: Loading and Applying a Node Material Procedural Texture in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to load a Node Material definition asynchronously from the Babylon.js snippet server using `ParseFromSnippetAsync`. It then creates a procedural texture from this material using `createProceduralTexture`, applies it as an emissive texture to a standard material, and assigns the material to a newly created ground mesh within a scene. Requires a valid `scene` object and access to the Babylon.js snippet server.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/NMEProceduralTexture.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width: 6, height: 6}, scene);\n\nBABYLON.NodeMaterial.ParseFromSnippetAsync(\"#A7A3UB#1\", scene).then((nodeMaterial) => {\n    const proceduralTexture = nodeMaterial.createProceduralTexture(256);\n\n    let mat = new BABYLON.StandardMaterial();\n\n    mat.emissiveTexture = proceduralTexture;\n\n    ground.material = mat;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Light Projection Matrix Builder in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to override the default projection matrix calculation for a light's shadow generator. This example assigns a function that creates a perspective projection matrix using `BABYLON.Matrix.PerspectiveFovLHToRef`, based on a given angle, aspect ratio (1.0), the active camera's near plane (`activeCamera.minZ`), and the light's shadow far plane (`this.shadowMaxZ`). The resulting matrix is stored in the `result` parameter. This requires an existing `light` object and assumes `angle` and `activeCamera` are defined in the surrounding scope.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlight.customProjectionMatrixBuilder = function(viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) {\n    BABYLON.Matrix.PerspectiveFovLHToRef(angle, 1.0, activeCamera.minZ, this.shadowMaxZ, result);\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Rotation Around Mesh Pivot in Babylon.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates animating the rotation of a mesh (`pilot`) around its defined pivot point. It registers a function to run after each render (`scene.registerAfterRender`), which applies a small incremental rotation using `pilot.rotate` around the specified `axis` in the mesh's local coordinate system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivot.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n/*-------------------Rotation Animation--------------------*/\nvar angle = 0.025;\nscene.registerAfterRender(function () {\n    pilot.rotate(axis, angle, BABYLON.Space.LOCAL);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Values in WebXR\nDESCRIPTION: Demonstrates how to access current frame values, pressed and touched states of controller components\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet value = component.value;\nif (value > 0.8) {\n  // do something nice with this value\n}\nif (component.pressed) {\n  // the component is pressed, meaning value === 1\n}\n\nif (component.touched) {\n  // fingers are on the component, might be half-pressed or moved\n}\n```\n\n----------------------------------------\n\nTITLE: Using glTF Loader Extension Options in Scene Loading\nDESCRIPTION: This snippet shows how to pass custom extension options when loading a glTF asset using the LoadAssetContainerAsync function. It demonstrates setting options for a custom extension within the pluginOptions object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/createExtensions.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait LoadAssetContainerAsync(\"path/to/model\", scene, {\n  pluginOptions: {\n    glTF: {\n      extensionOptions: {\n        myCustomExtension: {\n          option1: \"hello world\",\n          option2: 42,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Specular Anti-Aliasing on PBR Material in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to enable the built-in specular anti-aliasing feature for a Babylon.js PBR material. Setting `pbr.enableSpecularAntiAliasing` to `true` helps reduce visual artifacts like bright, flickering dots (specular aliasing) that can appear on glossy materials, especially with sharp geometry or high-frequency bump maps.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\npbr.enableSpecularAntiAliasing = true;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Facet Depth Sort for Transparent Meshes in Babylon.js\nDESCRIPTION: This snippet shows how to enable facet depth sorting for transparent meshes to solve self-transparency issues. The mesh must be updatable, and updateFacetData() must be called when the mesh or camera position changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// the mesh must be updatable\nconst mesh = BABYLON.MeshBuilder.CreateTorusKnot(\"mesh\", {updatable: true}, scene);\nmesh.material = mat;                         // transparent material\nmesh.mustDepthSortFacets = true;             // enable the depth sort, can be disabled at any time\n\nscene.registerBeforeRender(function() {\nmesh.updateFacetData();     // sort the facets each frame\n```\n\n----------------------------------------\n\nTITLE: Setting Up Trigger Volumes in Babylon.js\nDESCRIPTION: This snippet shows how to create and use trigger volumes, which detect when objects enter or exit a defined area without causing a physical collision response.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/collisionEvents.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nshape.isTrigger = true;\n\n// create a body with that shape\n// const body = new BABYLON.PhysicsBody(node, ...);\n\nconst observable = plugin.onTriggerCollisionObservable;\nconst observer = observable.add((collisionEvent) => {\n  if (collisionEvent.type === \"TRIGGER_ENTERED\") {\n    // do something when the trigger is entered\n  } else {\n    // do something when trigger is exited\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Text Values for Named Nodes from JavaScript (JavaScript)\nDESCRIPTION: This snippet demonstrates assigning text values to GUI elements retrieved by ID via XmlLoader, allowing dynamic content updates of layout-defined text properties from JavaScript logic. Useful for populating iterated GUI elements with data post-load.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nxmlLoader.getNodeById(\"myName\").text = \"john\";\nxmlLoader.getNodeById(\"mySurname\").text = \"smith\";\n```\n\n----------------------------------------\n\nTITLE: Handling Component Changes Between Frames\nDESCRIPTION: Demonstrates how to check and handle changes in component states between frames\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// maybe nothing happened between this and last frame\nif (!component.hasChanges) {\n    return;\n}\nlet changes = component.changes;\nif (changes.pressed) {\n    // pressed state changed\n    const isPressedNow = changes.pressed.current;\n    const wasPressedInLastFrame = changes.pressed.previous;\n}\nif (changes.value) {\n    // value changed! let's get the delta\n    const delta - changes.value.current - changes.value.previous;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling glTF Loader Logging in Babylon.js\nDESCRIPTION: This JavaScript code enables verbose logging for the Babylon.js glTF loader. It uses `OnPluginActivatedObservable` to execute code once a loader plugin is activated. It checks if the activated plugin is the 'gltf' loader and sets its `loggingEnabled` property to `true`. This causes the loader to output detailed information about the loading process to the browser's console, which is helpful for debugging, especially when dealing with complex features like LODs or extensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/progressiveglTFLoad.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.SceneLoader.OnPluginActivatedObservable.addOnce(function (loader) {\n  if (loader.name === \"gltf\") {\n    loader.loggingEnabled = true;\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Loading GLB from Base64 Encoded Data (TypeScript)\nDESCRIPTION: Shows how to load a .glb binary file from a base64 encoded data string and append it to the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst base64_model_content = \"data:;base64,BASE 64 ENCODED DATA...\";\nawait BABYLON.AppendSceneAsync(base64_model_content, scene);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Raw RGB Texture in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to create a new raw RGB texture using `BABYLON.RawTexture.CreateRGBTexture`. Requires a `Uint8Array` (`data`) containing the raw RGB pixel data (3 bytes per pixel), the desired `width` and `height` of the texture, and the Babylon.js `scene` object. This is useful for generating procedural textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/rawTexture.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.RawTexture.CreateRGBTexture(data, width, height, scene);\n```\n\n----------------------------------------\n\nTITLE: Applying a Texture Material to a Mesh in Babylon.js\nDESCRIPTION: Creates a StandardMaterial, sets its diffuse texture to an image, and assigns the material to a mesh. This completes the process of applying different textures to the front and back of a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/frontAndBackUVs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mat = new BABYLON.StandardMaterial(\"\", scene);\nmat.diffuseTexture = new BABYLON.Texture(\"URL to Image File\", scene);\nplane.material = mat;\n```\n\n----------------------------------------\n\nTITLE: Applying a Dynamic Texture as Material in Babylon.js\nDESCRIPTION: Creates a standard material and assigns the dynamic texture as its diffuse texture, then applies the material to a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMaterial = new BABYLON.StandardMaterial(\"Mat\", scene);\nmyMaterial.diffuseTexture = myDynamicTexture;\nmesh.material = myMaterial;\n```\n\n----------------------------------------\n\nTITLE: Disabling WebGL Context Lost Handling at Engine Creation\nDESCRIPTION: Creates a new Babylon.js engine with WebGL context lost handling disabled to reduce memory usage. Must be set during engine initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/reducingMemoryUsage.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar engine = new BABYLON.Engine(canvas, true, {doNotHandleContextLost: true});\n```\n\n----------------------------------------\n\nTITLE: Positioning a Mesh Relative to Another using TransformCoordinates in Babylon.js\nDESCRIPTION: This snippet demonstrates how to position one mesh (mesh_C) relative to another mesh (mesh_P) using coordinate transformation. It first computes the world matrix of mesh_P, defines the desired local position within mesh_P's coordinate system, and then uses `BABYLON.Vector3.TransformCoordinates` to convert this local position into world coordinates, which are then assigned to mesh_C's position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/ref_frame.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst matrix = mesh_P.computeWorldMatrix(true); //true forces a recalculation rather than using cache version\nconst local_position = new BABYLON.Vector3(0, 0.5, ,0); //Required position of C in the local space of P\nconst global_position = BABYLON.Vector3.TransformCoordinates(local_position, matrix); //Obtain the required position of C in World Space\nmesh_C.position = global_position;\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Ragdoll in Babylon.js (JavaScript)\nDESCRIPTION: Creates a new `BABYLON.Ragdoll` instance. This requires the target skeleton, the skinned mesh associated with the skeleton, and the configuration array defining the physics shapes and constraints. Upon instantiation, the ragdoll starts in Kinematic mode, where its movement follows the animation but can interact with other physics bodies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/ragdolls.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ragdoll = new BABYLON.Ragdoll(skeleton, newMeshes[0], config);\n```\n\n----------------------------------------\n\nTITLE: Updating ExtrudeShape Parameters in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to update an existing extruded mesh created with BABYLON.MeshBuilder.ExtrudeShape. The mesh must be initially created with 'updatable: true'. The update is performed by calling ExtrudeShape again with 'null' as the name, providing the new parameters (shape, path, scale, rotation), and passing the original mesh instance via the 'instance' option. Note that the new shape array must have the same number of Vector3 points as the original.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape1 = [s1, s2, ...sN]; // Vector3 array\nconst shape2 = [t1, t2, ...tN]; // another Vector3 array\nconst path1 = [p1, p2, ...pN]; // Vector3 array\nconst path2 = [q1, q2, ...qN]; // another Vector3 array\nconst scale1 = 1;\nconst scale2 = 3;\nconst rotation1 = 0;\nconst rotation2 = 0.2;\n// extrusion\nlet extruded = BABYLON.MeshBuilder.ExtrudeShape(\"ext\", { shape: shape1, path: path1, scale: scale1, rotation: rotation1, cap, updatable: true }, scene);\n// mesh update\nextruded = BABYLON.MeshBuilder.ExtrudeShape(null, { shape: shape2, path: path2, scale: scale2, rotation: rotation2, instance: extruded });\n```\n\n----------------------------------------\n\nTITLE: Creating Physics Impostors\nDESCRIPTION: Creates physics impostors for sphere and ground objects with mass and restitution properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.physicsImpostor = new BABYLON.PhysicsImpostor(sphere, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);\nground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.9 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Obstacle Management API Interface in Babylon.js\nDESCRIPTION: API methods for adding and removing cylinder and box obstacles in the navigation mesh. Includes position, dimension, and angle parameters for obstacle placement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/obstacles.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddCylinderObstacle(position: Vector3, radius: number, height: number): IObstacle;\naddBoxObstacle(position: Vector3, extent: Vector3, angle: number): IObstacle;\nremoveObstacle(obstacle: IObstacle): void;\n```\n\n----------------------------------------\n\nTITLE: Event-Based Sound Playback in Babylon.js\nDESCRIPTION: Implements sound playback triggered by mouse clicks and keyboard events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst gunshot = new BABYLON.Sound(\"gunshot\", \"sounds/gunshot.wav\", scene);\n\nwindow.addEventListener(\"mousedown\", function (evt) {\n  // left click to fire\n  if (evt.button === 0) {\n    gunshot.play();\n  }\n});\n\nwindow.addEventListener(\"keydown\", function (evt) {\n  // Press space key to fire\n  if (evt.keyCode === 32) {\n    gunshot.play();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Instantiation in AssetContainer with Naming and Material Options (JavaScript)\nDESCRIPTION: Shows how to use instantiateModelsToScene with custom parameters: a naming function for generated entities, and a cloneMaterials boolean toggle. When nameFunction is provided, all cloned models' names are determined by it, and when cloneMaterials is true, materials are duplicated rather than shared. Requires an AssetContainer with assets and functions for optional customization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetContainers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = container.instantiateModelsToScene((name) => \"p\" + name, true);\n```\n\n----------------------------------------\n\nTITLE: Vue 3 BabylonJS Scene Component\nDESCRIPTION: A Vue 3 component that creates a canvas element and initializes a BabylonJS scene using the Composition API\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_1.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <canvas ref=\"bjsCanvas\" width=\"500\" height=\"500\" />\n</template>\n\n<script>\nimport { ref, onMounted } from \"@vue/runtime-core\";\nimport { createScene } from \"../scenes/MyFirstScene\";\n\nexport default {\n  name: \"BabylonScene\",\n  setup() {\n    const bjsCanvas = ref(null);\n\n    onMounted(() => {\n      if (bjsCanvas.value) {\n        createScene(bjsCanvas.value);\n      }\n    });\n\n    return {\n      bjsCanvas,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Uniform Vertex Normal Variation in Babylon.js\nDESCRIPTION: Provides a Babylon.js Playground example demonstrating how vertex normals can vary together in unison, affecting the mesh's lighting dynamically. This illustrates the collective impact of normal direction changes on surface appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/vertexNormals.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Babylon.js Playground Example\n// ID: #VKBJN#18\n// Title: Vertex Normals Varying In Unison\n// Description: Simple example of vertex normals varying in unison.\n// (Code loaded dynamically in the Babylon.js Playground)\n```\n\n----------------------------------------\n\nTITLE: Complete Background Material Setup with Reflection\nDESCRIPTION: Comprehensive example showing background material setup with diffuse texture, mirror reflection, and fresnel effects\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbackgroundMaterial = new BABYLON.BackgroundMaterial(\"backgroundMaterial\", scene);\nbackgroundMaterial.diffuseTexture = new BABYLON.Texture(\"https://assets.babylonjs.com/environments/backgroundGround.png\", scene);\nbackgroundMaterial.diffuseTexture.hasAlpha = true;\nbackgroundMaterial.opacityFresnel = false;\nbackgroundMaterial.shadowLevel = 0.4;\n\nmirror = new BABYLON.MirrorTexture(\"mirror\", 512, scene);\nmirror.mirrorPlane = new BABYLON.Plane(0, -1, 0, 0);\nmirror.renderList.push(sphere);\nbackgroundMaterial.reflectionTexture = mirror;\nbackgroundMaterial.reflectionFresnel = true;\nbackgroundMaterial.reflectionStandardFresnelWeight = 0.8;\n\nground.material = backgroundMaterial;\n```\n\n----------------------------------------\n\nTITLE: Implementing ISceneLoaderPluginAsync Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom file importer by implementing the ISceneLoaderPluginAsync interface. It includes the basic structure with methods for importing meshes, loading data into a scene, and loading data into an AssetContainer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/createImporters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ISceneLoaderPluginAsync } from \"@babylonjs/core/Loading/sceneLoader\";\n\nclass MyCustomImporter implements ISceneLoaderPluginAsync {\n  public readonly name = \"myCustomImporter\";\n\n  public readonly extensions = \".myCustomExtension\";\n\n  public async importMeshAsync(...) {\n    // Load specified meshes into the Scene\n  }\n\n  public async loadAsync(...) {\n    // Load all data into the Scene\n  }\n\n  public async loadAssetContainerAsync(...) {\n    // Load all data into an AssetContainer\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Setup Configuration\nDESCRIPTION: Initializes animation settings by stopping existing animations, configuring loop states, and setting initial animation states.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/animations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.scene.stopAllAnimations();\nthis._run.loopAnimation = true;\nthis._idle.loopAnimation = true;\nthis._currentAnim = this._idle;\nthis._prevAnim = this._land;\n```\n\n----------------------------------------\n\nTITLE: Creating a CylinderPanel and Setting the Radius (Babylon.js, JavaScript)\nDESCRIPTION: This example initializes a CylinderPanel to arrange controls along the surface of a cylinder in a 3D GUI layout. The 'radius' parameter sets the cylinder's size, controlling the curvature of the panel. Used for curved, ring-like 3D interfaces. Requires Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst panel = new BABYLON.GUI.CylinderPanel();\npanel.radius = 5;\n```\n\n----------------------------------------\n\nTITLE: Creating Ambient Sound in Babylon.js\nDESCRIPTION: Demonstrates how to create and autoplay an ambient sound or music track in a Babylon.js scene with looping enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = new BABYLON.Sound(\"Music\", \"music.wav\", scene, null, {\n  loop: true,\n  autoplay: true\n});\n```\n\n----------------------------------------\n\nTITLE: Linking to a General Babylon.js Playground for Actions (Markdown)\nDESCRIPTION: This snippet uses a custom `<Playground>` tag to embed or link to a Babylon.js Playground (ID #J19GYK#0). This specific playground serves as a general environment for users to experiment with various actions available within the Babylon.js framework. It includes attributes for title, description, and an associated image.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n<Playground id=\"#J19GYK#0\" title=\"Play with Actions\" description=\"Simple examples of actions in a scene.\" image=\"/img/playgroundsAndNMEs/divingDeeperActions1.jpg\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Screen Text in JavaScript\nDESCRIPTION: This code sets the text displayed on the Babylon.js loading screen. By assigning a string value to the `loadingUIText` property of the engine instance, you can customize the message shown to the user during loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nengine.loadingUIText = \"text\";\n```\n\n----------------------------------------\n\nTITLE: Setting Separate Rotations (Passenger) in Babylon.js (JavaScript)\nDESCRIPTION: Sets the rotation for the `carriage` and its `contents` independently using quaternions derived from separate rotation matrices (`track.carriageRotations[i]` and `track.passengerRotations[i]`). This allows the contents (passenger) to have a different orientation from the carriage, enabling effects like looking around.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncarriage.rotationQuaternion = BABYLON.Quaternion.FromRotationMatrix(track.carriageRotations[i]);\ncontents.rotationQuaternion = BABYLON.Quaternion.FromRotationMatrix(track.passengerRotations[i]);\n```\n\n----------------------------------------\n\nTITLE: Setting Light Intensity Modes in Babylon.js\nDESCRIPTION: This snippet shows how to set the intensity mode for a light source in Babylon.js, allowing conversion between different physical light units. It demonstrates setting the `light.intensityMode` property to various constants like `BABYLON.Light.INTENSITYMODE_AUTOMATIC`, `INTENSITYMODE_LUMINOUSPOWER` (Lumens), `INTENSITYMODE_LUMINOUSINTENSITY` (Candela), `INTENSITYMODE_ILLUMINANCE` (Lux), and `INTENSITYMODE_LUMINANCE` (Nits). This helps in setting up analytical lights based on real-world measurements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// Default automatic mode best fitting with the light type.\nlight.intensityMode = BABYLON.Light.INTENSITYMODE_AUTOMATIC;\n// Lumen (lm)\nlight.intensityMode = BABYLON.Light.INTENSITYMODE_LUMINOUSPOWER;\n// Candela (lm/sr)\nlight.intensityMode = BABYLON.Light.INTENSITYMODE_LUMINOUSINTENSITY;\n// Lux (lm/m^2)\nlight.intensityMode = BABYLON.Light.INTENSITYMODE_ILLUMINANCE;\n// Nit (cd/m^2)\nlight.intensityMode = BABYLON.Light.INTENSITYMODE_LUMINANCE;\n```\n```\n\n----------------------------------------\n\nTITLE: Projecting Hotspot to 2D Coordinates in Babylon.js\nDESCRIPTION: This snippet illustrates how to project a world space hotspot to 2D screen coordinates in Babylon.js. It calculates the viewport dimensions and uses Vector3.ProjectToRef to perform the projection.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/hotspot.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderWidth = engine.getRenderWidth();\nconst renderHeight = engine.getRenderHeight();\n\nconst viewportWidth = camera.viewport.width * renderWidth;\nconst viewportHeight = camera.viewport.height * renderHeight;\nconst viewport = new BABYLON.Viewport(0, 0, viewportWidth, viewportHeight);\n\nlet screenPosition = new BABYLON.Vector3();\n\nBABYLON.Vector3.ProjectToRef(worldPosition, BABYLON.Matrix.Identity(), scene.getTransformMatrix(), viewport, screenPosition);\nline.x2 = screenPosition.x;\nline.y2 = screenPosition.y;\n```\n\n----------------------------------------\n\nTITLE: Initializing WebXR Hand Tracking with Default Experience Helper\nDESCRIPTION: Sets up WebXR hand tracking using the default experience helper in Babylon.js. This snippet demonstrates how to configure hand support options when initializing the XR experience.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHelper = scene.createDefaultXRExperienceAsync({\n  handSupportOptions: {\n    // options you want to change\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Fog Uniforms for ShaderMaterial in Babylon.js - JavaScript\nDESCRIPTION: This JavaScript snippet sets up the ShaderMaterial's onBind callback to update shader fog uniforms at draw time. It retrieves the effect object, then passes the necessary fog parameters (mode, start, end, density) and fog color from the scene to the current shader. Inputs are the shaderMaterial and the current scene; output is updated shader uniforms. Dependencies: Babylon.js Scene, ShaderMaterial, and correct shader uniform declarations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nshaderMaterial.onBind = function () {\n  const effect = shaderMaterial.getEffect();\n  effect.setFloat4(\"vFogInfos\", scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\n  effect.setColor3(\"vFogColor\", scene.fogColor);\n};\n```\n\n----------------------------------------\n\nTITLE: Assigning Materials Per-Particle in SPS Initialization (JavaScript)\nDESCRIPTION: This example illustrates how to assign specific materials to individual particles during SPS initialization. It uses a `positionFunction` (`initParticle`, defined previously as `initFunction` in the code) within `addShape` to set the `particle.materialIndex` based on a condition (particle's y-position), overriding the material inherited from the source shape. This requires `useModelMaterial: true` or `enableMultiMaterial: true` and is shown here for an immutable (`updatable: false`) SPS. The material index corresponds to the order in which shapes/materials are defined (0, 1, 2...).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_material.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar initParticle = function(particle, i) {\n  particle.position.x = areaSize * (Math.random() - 0.5);\n  particle.position.y = areaSize * (Math.random() - 0.5);\n  particle.position.z = areaSize * (Math.random() - 0.5);\n  // above a given altitude, it's given the material 1\n  // whatever the initial shape material\n  if (particle.position.y > areaSize * 0.1) {\n    particle.materialIndex = 1;\n  }\n};\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, {\n  useModelMaterial: true,\n  updatable: false\n});\nsps.addShape(model1, 300, { positionFunction: initFunction });\nsps.addShape(model2, 300, { positionFunction: initFunction });\nsps.addShape(model3, 300, { positionFunction: initFunction });\nsps.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: Animating Parent and Child Meshes (Satellite Example) in Babylon.js\nDESCRIPTION: Demonstrates continuous animation within a `scene.registerAfterRender` callback for a parent 'box' and its child 'small' mesh. The parent 'box' rotates locally on its Y and X axes and translates in world space. The child 'small' mesh translates along its own local Y-axis, inheriting the parent's transformations, effectively moving relative to the parent's orientation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/parent.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nscene.registerAfterRender(function () {\n    box.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);\n    box.rotate(BABYLON.Axis.X, Math.PI / 200, BABYLON.Space.LOCAL);\n    box.translate(new BABYLON.Vector3(-1, -1, -1).normalize(), 0.001, BABYLON.Space.WORLD);\n    y += 0.001;\n    small.translate(BABYLON.Axis.Y, 0.001, BABYLON.Space.LOCAL);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Code to Babylon.js Render Loop\nDESCRIPTION: This snippet demonstrates how to add custom code to the render loop using the onBeforeRenderObservable. The code inside this function will run before each frame renders, typically about 60 times per second, allowing for dynamic animation through small property changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/render_frame_animation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onBeforeRenderObservable.add(() => {\n  //Your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Base PostProcess Constructor in Babylon.js\nDESCRIPTION: Constructor definition for creating a base post process effect in Babylon.js, specifying name, fragment URL, parameters, samplers, ratio, camera, sampling mode, engine, and reusability.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.PostProcess = function (name, fragmentUrl, parameters, samplers, ratio, camera, samplingMode, engine, reusable)\n```\n\n----------------------------------------\n\nTITLE: Using a Diffuse Texture for Light Color in Volumetric Light Scattering - Babylon.js - JavaScript\nDESCRIPTION: Sets the useDiffuseColor property to false (default), and assigns a new texture to the mesh's material.diffuseTexture for colored light scattering. The diffuse texture is used if present, falling back to the color if not. This configuration expects a valid texture path or object and a mesh with material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvls.useDiffuseColor = false; // False as default\nvls.mesh.material.diffuseTexture= new BABYLON.Texture(...);\n```\n\n----------------------------------------\n\nTITLE: Checking Grounded Status Using Raycast in Babylon.js (JavaScript)\nDESCRIPTION: Determines if the character is currently on the ground by calling the `_floorRaycast` function. It performs a raycast from the character's center downwards with a length of 0.6 units. If the raycast hits something (returns a non-zero vector), the function returns `true`, otherwise `false`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nif (this._floorRaycast(0, 0, 0.6).equals(Vector3.Zero())) {\n    return false;\n} else {\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cubic Bezier Curve - Babylon.js - JavaScript\nDESCRIPTION: This snippet generates a cubic Bezier curve defined by four Vector3 points (origin, control1, control2, destination) using BABYLON.Curve3.CreateCubicBezier, with a given number of subdivided points. Useful for creating smooth spline paths for modeling or animation. Prerequisites: BABYLON.Curve3, four Vector3 instances, integer nb_of_points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bezier3 = BABYLON.Curve3.CreateCubicBezier(origin, control1, control2, destination, nb_of_points);\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera-based LOD for Dynamic Terrain in JavaScript\nDESCRIPTION: This snippet demonstrates how to override the updateCameraLOD method to dynamically adjust terrain detail based on camera altitude. The LOD value increases as the camera moves higher, reducing terrain detail for distant views.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Terrain camera LOD: custom function\nterrain.updateCameraLOD = function (terrainCamera) {\n  // LOD value increases with camera altitude\n  const camLOD = Math.abs((terrainCamera.globalPosition.y / 16.0) | 0);\n  return camLOD;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Conditional Action with PredicateCondition in Babylon.js\nDESCRIPTION: Demonstrates adding a condition to an action using `BABYLON.PredicateCondition`. An `InterpolateValueAction` animates the `camera.alpha` property upon picking the mesh (`OnPickTrigger`), but only executes if the provided predicate function (checking if `light.diffuse` is red) returns true. Requires an initialized `actionManager`, `camera`, `light`, and the `BABYLON` namespace.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager.registerAction(\n  new BABYLON.InterpolateValueAction(\n    BABYLON.ActionManager.OnPickTrigger,\n    camera,\n    \"alpha\",\n    0,\n    500,\n    new BABYLON.PredicateCondition(mesh.actionManager, function () {\n      return light.diffuse.equals(BABYLON.Color3.Red());\n    }),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Render Cycle for Solid Particle Animation in Babylon.js\nDESCRIPTION: Code to reset and draw solid particles on each render frame using the scene's onBeforeRenderObservable. This is necessary for any particle animation since particles need to be updated every frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_animate.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onBeforeRenderObservable.add(() => {\n    SPS.setParticles();\n})\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader with Fog Support for Babylon.js - GLSL\nDESCRIPTION: This full fragment shader example for Babylon.js shows how to declare varyings, a texture sampler, fog declarations, and use a helper for pixel-perfect UV sampling. After computing the texture color, it applies fog by including the Babylon.js fog fragment function. Inputs are interpolated UVs and a sampler2D; outputs are fragment colors affected by fog.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_7\n\nLANGUAGE: glsl\nCODE:\n```\nBABYLON.Effect.ShadersStore['myFragmentShader'] = `\nvarying vec2 vUV;\n\nuniform sampler2D tex;\n#include<fogFragmentDeclaration>\n\nvec2 uvPixelPerfect(vec2 uv) {\n    vec2 res = vec2(textureSize(tex, 0));\n    \n    uv = uv * res;\n    vec2 seam = floor(uv + 0.5);\n    uv = seam + clamp((uv-seam) / fwidth(uv), -0.5, 0.5);\n    return uv / res;\n}\n\nvoid main() {\n    vec4 color = texture2D(tex,vUV);\n    gl_FragColor = color;\n    #include<fogFragment>(color,gl_FragColor)\n}`\n```\n\n----------------------------------------\n\nTITLE: Creating Directional 3D Sound in BabylonJS\nDESCRIPTION: Shows how to create a directional spatial sound attached to a mesh with cone configuration and direction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = new BABYLON.Sound(\"Violons\", \"violons11.wav\", scene, null, {\n  loop: true,\n  autoplay: true,\n});\nmusic.setDirectionalCone(90, 180, 0);\nmusic.setLocalDirectionToMesh(new BABYLON.Vector3(1, 0, 0));\nmusic.attachToMesh(box);\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics Prestep (Teleport Mode) via Property in Babylon.js (JavaScript)\nDESCRIPTION: This snippet enables the physics prestep feature for a physics aggregate's body by setting the `disablePreStep` property to `false`. This activates the \"Teleport\" mode by default, which updates the physics body's position/orientation from the scene transform node before the physics tick, with limited interaction during the update.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/prestep.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naggregate.body.disablePreStep = false;\n```\n\n----------------------------------------\n\nTITLE: Adding an Observer to a Scene Observable for Real-Time Updates - JavaScript\nDESCRIPTION: Illustrates how to add an observer to the Babylon.js scene's onBeforeRenderObservable. Each frame, the observer updates a sphere's scaling based on a calculation. No dependencies besides Babylon.js. The alpha variable is incremented per frame, driving a scaling animation in the Y direction. Suitable for frame-based state updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst alpha = 0;\nscene.onBeforeRenderObservable.add(function () {\n  sphere.scaling.y = Math.cos(alpha);\n\n  alpha += 0.01;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Array for Custom Objects in Babylon.js\nDESCRIPTION: Creates an animations array for objects that don't have one by default, enabling animation of properties on any object the engine can reach, even other animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyAnimation.animations = [];\nmyAnimation.animations.push(weightAnimation);\n```\n\n----------------------------------------\n\nTITLE: Attaching User Input Control to a Babylon.js Camera in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach user input controls (like mouse, keyboard, touch) to a Babylon.js camera instance. It requires an existing camera object and the HTML canvas element. The optional second parameter, set to `true` here, allows the default canvas event actions to proceed; `false` (default) prevents them.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Rotating Cloth Mesh in Babylon.js\nDESCRIPTION: Demonstrates how to rotate a cloth mesh to change its orientation in 3D space, affecting the position of anchor points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncloth.rotate.x = -Math.PI / 2;\n```\n\n----------------------------------------\n\nTITLE: Generating Circular Path Points - Babylon.js - JavaScript\nDESCRIPTION: This snippet creates a set of points arranged in a circle in the XY plane using Babylon.js. It increments the angle theta in steps of deltaTheta, computing each point via cosine and sine and stores as BABYLON.Vector3. The resulting path can be used with Babylon.js mesh creation methods to generate circular curves or shapes. Prerequisites: BABYLON.Vector3 and definition of radius and deltaTheta.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = [];\nfor(let theta = 0; theta < 2 * Math.PI; theta +=deltaTheta ) {\n    path.push(new BABYLON.Vector3(radius * Math.cos(theta), radius * Math.sin(theta), 0));\n\n```\n\n----------------------------------------\n\nTITLE: Setting Tint Color in PBR\nDESCRIPTION: Shows how to set the tint color for a refractive PBR material to control its subsurface color appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\npbr.metallic = 0;\npbr.roughness = 0;\n\npbr.subSurface.isRefractionEnabled = true;\npbr.subSurface.indexOfRefraction = 1.5;\npbr.subSurface.tintColor = BABYLON.Color3.Teal();\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiview in WebXR Layers\nDESCRIPTION: Shows how to enable multiview rendering in WebXR layers for improved performance. Multiview allows scene rendering using a single render call and enables antialiasing support in compatible browsers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRLayers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst featuresManager = xr.baseExperience.featuresManager; // or any other way to get a features manager\nfeaturesManager.enableFeature(WebXRFeatureName.LAYERS, \"stable\" /* or latest */, {\n  preferMultiviewOnInit: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing LOD Levels in Babylon.js\nDESCRIPTION: This snippet shows how to remove specific LOD levels from a mesh. The first line removes a specific mesh LOD, while the second removes the null LOD level that was previously set to disable rendering at a certain distance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/LOD.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknot00.removeLODLevel(knot02);\nknot00.removeLODLevel(null);\n```\n\n----------------------------------------\n\nTITLE: EquiRectangularCubeTextureAssetTask Constructor and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Lists the constructor signature and result property for tasks that load equirectangular cube textures. Accepts size, mipmap, and gamma configurations. Produces an EquiRectangularCubeTexture assigned to the public texture property upon loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, url: string, size: number, noMipmap = false, useInGammaSpace = true)\n\npublic texture: EquiRectangularCubeTexture;\n```\n\n----------------------------------------\n\nTITLE: Loading Video Texture in Babylon.js\nDESCRIPTION: This JavaScript snippet demonstrates creating a `BABYLON.VideoTexture` in Babylon.js. It requires a unique name for the texture, the path or URL to the video file (e.g., `.mp4`, `.webm`), and the current `scene` object. This allows video content to be applied as a texture to meshes within the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.VideoTexture(\"name\", \"textures/video.ext\", scene);\n```\n\n----------------------------------------\n\nTITLE: Applying Bias to Depth in Shadow Map Shader (GLSL/WGSL)\nDESCRIPTION: This shader code snippet demonstrates how the bias (`biasAndScaleSM.x`) is applied to the z-coordinate (`gl_Position.z`) during shadow map generation when using PCF or PCSS filtering (`SM_DEPTHTEXTURE == 1`). It accounts for reverse depth buffer (`SM_USE_REVERSE_DEPTHBUFFER`) by negating the bias and adjusts the bias scaling by a factor of 0.5 based on the NDC Z range (`IS_NDC_HALF_ZRANGE`). The bias is multiplied by `gl_Position.w` to ensure a constant offset after the GPU's perspective division.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#if SM_DEPTHTEXTURE == 1\n    #ifdef IS_NDC_HALF_ZRANGE\n        #define BIASFACTOR 0.5\n    #else\n        #define BIASFACTOR 1.0\n    #endif\n\n    #if SM_USE_REVERSE_DEPTHBUFFER == 1\n        gl_Position.z -= biasAndScaleSM.x * gl_Position.w * BIASFACTOR;\n    #else\n        gl_Position.z += biasAndScaleSM.x * gl_Position.w * BIASFACTOR;\n    #endif\n#endif\n```\n\n----------------------------------------\n\nTITLE: Real-Time Filtering using Render Loop in JavaScript\nDESCRIPTION: Illustrates how to achieve real-time filter effects by using the engine's render loop (`engine.runRenderLoop`). Inside the loop, custom uniform values are updated each frame (e.g., based on time), and the filter is applied using `customFilter.render()` for better performance compared to `filter()` in continuous updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Rely on the underlying engine render loop to update the filter result every frame.\nengine.runRenderLoop(() => {\n  // Only render if the custom texture is ready (the default one is\n  // checked for you by the render function)\n  if (!otherTexture.isReady()) {\n    return;\n  }\n\n  // Sets the custom values.\n  time += engine.getDeltaTime() / 1000;\n  customEffectWrapper.effect.setTexture(\"otherTexture\", otherTexture);\n  customEffectWrapper.effect.setFloat3(\"colorOffset\", Math.cos(time) * 0.5 + 0.5, 0, Math.sin(time) * 0.5 + 0.5);\n\n  // Render. Please note we are using render instead of filter to improve\n  // performances of real time filter. filter is creating a promise and will therefore\n  // generate some lags and garbage.\n  customFilter.render(mainTexture, customEffectWrapper);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Bloom and Black & White with Babylon.js Node Render Graph - JavaScript\nDESCRIPTION: This snippet showcases how to set up a Babylon.js Node Render Graph to streamline post-processing with modular graph-based editing. A pass post-process is used to render the scene to a texture, which is linked as an 'External' input in the Node Render Graph. Automatic graph rebuild on window resize is disabled to manually update the texture of the 'Texture' block before rebuilding the node graph. Execution of the graph is tied to the scene's after-render observable. Dependencies include Babylon.js core, NodeRenderGraph API, a valid snippet ID, a properly configured scene and camera, and texture initialization from a PassPostProcess.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphInAdditionToRenderLoop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst passPostProcess = new BABYLON.PassPostProcess(\"pass\", 1, camera);\n\npassPostProcess.samples = 4;\npassPostProcess.resize(engine.getRenderWidth(), engine.getRenderHeight(), scene.activeCamera);\n\nconst nrg = await BABYLON.NodeRenderGraph.ParseFromSnippetAsync(\"#FAPQIH#1\", scene, {\n    rebuildGraphOnEngineResize: false\n});\n\nconst frameGraph = nrg.frameGraph;\n\npassPostProcess.onSizeChangedObservable.add(() => {\n    nrg.getBlockByName(\"Texture\").value = passPostProcess.inputTexture.texture;\n    nrg.build();\n});\n\nnrg.getBlockByName(\"Texture\").value = passPostProcess.inputTexture.texture;\n\nnrg.build();\n\nawait nrg.whenReadyAsync();\n\nscene.onAfterRenderObservable.add(() => {\n    frameGraph.execute();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating WebXR Color Picker GUI\nDESCRIPTION: Implements a color picker GUI panel in WebXR that allows changing a sphere's color in real-time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRDemos.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// GUI\nvar plane = BABYLON.Mesh.CreatePlane(\"plane\", 1);\nplane.position = new BABYLON.Vector3(1.4, 1.5, 0.4);\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(plane);\nvar panel = new BABYLON.GUI.StackPanel();\nadvancedTexture.addControl(panel);\nvar header = new BABYLON.GUI.TextBlock();\nheader.text = \"Color GUI\";\nheader.height = \"100px\";\nheader.color = \"white\";\nheader.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\nheader.fontSize = \"120\";\npanel.addControl(header);\nvar picker = new BABYLON.GUI.ColorPicker();\npicker.value = sphere.material.diffuseColor;\npicker.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\npicker.height = \"350px\";\npicker.width = \"350px\";\npicker.onValueChangedObservable.add(function (value) {\n  sphere.material.diffuseColor.copyFrom(value);\n});\npanel.addControl(picker);\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Loading Screen Visibility in JavaScript\nDESCRIPTION: These methods allow for manual control over the Babylon.js loading screen. Call `engine.displayLoadingUI()` on the engine instance to show the loading UI, and `engine.hideLoadingUI()` to hide it. This is useful for custom loading scenarios.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nengine.displayLoadingUI();\nengine.hideLoadingUI();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Inspectable Properties in BabylonJS Inspector\nDESCRIPTION: Demonstrates how to configure custom inspectable properties for a BabylonJS node. The code shows different types of custom properties including checkbox, color3, quaternion, slider, string, vector3, tab, options, and button fields. Each property is defined with a label, property name, and specific type from BABYLON.InspectableType.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmyNode.inspectableCustomProperties = [\n  {\n    label: \"My boolean field\",\n    propertyName: \"myBooleanField\",\n    type: BABYLON.InspectableType.Checkbox,\n  },\n  {\n    label: \"My color field\",\n    propertyName: \"myColor3Field\",\n    type: BABYLON.InspectableType.Color3,\n  },\n  {\n    label: \"My quaternion field\",\n    propertyName: \"myQuaternionField\",\n    type: BABYLON.InspectableType.Quaternion,\n  },\n  {\n    label: \"My numeric range field\",\n    propertyName: \"myRangeField\",\n    type: BABYLON.InspectableType.Slider,\n    min: 0.5,\n    max: 5.0,\n    step: 0.1,\n  },\n  {\n    label: \"My string field\",\n    propertyName: \"myStringField\",\n    type: BABYLON.InspectableType.String,\n  },\n  {\n    label: \"My vector field\",\n    propertyName: \"myVector3Field\",\n    type: BABYLON.InspectableType.Vector3,\n  },\n  {\n    label: \"My tab field\",\n    type: BABYLON.InspectableType.Tab,\n  },\n  {\n      label: \"My options field\",\n      propertyName: \"myOptionsField\",\n      options: [\n          { label: \"options1\", value: 1 },\n          { label: \"options2\", value: 2 }\n      ],\n      callback: (option)=>{\n      \n      },\n      type: BABYLON.InspectableType.Options,\n\n  },\n  {\n      label: \"My button field\",\n      propertyName: \"myButtonField\",\n      callback: ()=>{\n      \n      },\n      type: BABYLON.InspectableType.Button,\n\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Face UV Coordinates for Box Mesh in Babylon.js\nDESCRIPTION: Creates an array of Vector4 coordinates to map specific portions of a texture to different faces of a box mesh. Each Vector4 represents the UV coordinates for one face, specifying which part of the texture image should be applied.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/face_material.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst faceUV = [];\nfaceUV[0] = new BABYLON.Vector4(0.5, 0.0, 0.75, 1.0); //rear face\nfaceUV[1] = new BABYLON.Vector4(0.0, 0.0, 0.25, 1.0); //front face\nfaceUV[2] = new BABYLON.Vector4(0.25, 0, 0.5, 1.0); //right side\nfaceUV[3] = new BABYLON.Vector4(0.75, 0, 1.0, 1.0); //left side\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to NodeGeometry Blocks (Babylon.js, JavaScript)\nDESCRIPTION: This code demonstrates updating specific input blocks within a NodeGeometry graph before building the geometry. It assigns a vector value and a mesh reference to blocks identified by name. Dependencies include a parsed NodeGeometry object and any mesh to be attached. Inputs are the block names and values or meshes; no value is returned, but internal graph state is updated. This must be executed before calling nodeGeometry.build() for changes to apply.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnodeGeometry.getBlockByName(\"my_vector\").value = new BABYLON.Vector3(1.0, 0.0, 1.0);\nnodeGeometry.getBlockByName(\"my_mesh\").mesh = myLoadedMesh;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Thin Instance Attributes at Once\nDESCRIPTION: Shows how to set attribute values for multiple thin instances in a single call by providing continuous data for sequential instances. This approach offers better performance than setting attributes individually.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsphere.thinInstanceRegisterAttribute(\"color\", 4);\n\nsphere.thinInstanceSetAttributeAt(\"color\", 0, [1, 1, 0, 1, 1, 0, 0, 1]);\n```\n\n----------------------------------------\n\nTITLE: Initializing ActionManager for a Mesh in Babylon.js\nDESCRIPTION: Demonstrates how to create and attach a `BABYLON.ActionManager` instance to a specific mesh object within a Babylon.js scene. This step is necessary before any actions can be registered for that mesh. Requires an existing `mesh` object and the current `scene`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager = new BABYLON.ActionManager(scene);\n```\n\n----------------------------------------\n\nTITLE: Updating Vertex Data in Babylon.js\nDESCRIPTION: This code shows how to update the vertex data of a mesh after modifying the data arrays. The mesh must have been created with the updatable parameter set to true. This allows dynamic modification of mesh geometry during runtime.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/updatingVertices.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.updateVerticesData(BABYLON.VertexBuffer.PositionKind, positions);\nmesh.updateVerticesData(BABYLON.VertexBuffer.NormalKind, normals);\nmesh.updateVerticesData(BABYLON.VertexBuffer.ColorKind, colors);\nmesh.updateVerticesData(BABYLON.VertexBuffer.UVKind, uvs);\n```\n\n----------------------------------------\n\nTITLE: Customizing Particle Update Function in Babylon.js (JavaScript)\nDESCRIPTION: Modifies the default update function, called each frame for all particles, to handle aging, recycling, color and alpha adjustments, angular and directional motion, and gravity effects. Assigned to the particle system, it manages the particle lifecycle array and uses Babylon.js vector/math methods. Key input is an array of particle objects, with outputs affecting rendering, position, color, and validity per frame. Reimplementation can impact performance and is recommended to remain efficient.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nupdateFunction = function (particles) {\n  for (let index = 0; index < particles.length; index++) {\n    var particle = particles[index];\n    particle.age += this._scaledUpdateSpeed;\n\n    if (particle.age >= particle.lifeTime) {\n      // Recycle\n      particles.splice(index, 1);\n      this._stockParticles.push(particle);\n      index--;\n      continue;\n    } else {\n      particle.colorStep.scaleToRef(this._scaledUpdateSpeed, this._scaledColorStep);\n      particle.color.addInPlace(this._scaledColorStep);\n\n      if (particle.color.a < 0) particle.color.a = 0;\n\n      particle.angle += particle.angularSpeed * this._scaledUpdateSpeed;\n\n      particle.direction.scaleToRef(this._scaledUpdateSpeed, this._scaledDirection);\n      particle.position.addInPlace(this._scaledDirection);\n\n      this.gravity.scaleToRef(this._scaledUpdateSpeed, this._scaledGravity);\n      particle.direction.addInPlace(this._scaledGravity);\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WebXR Default Experience for AR in JavaScript\nDESCRIPTION: Shows how to configure the WebXR Default Experience for AR sessions using uiOptions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar defaultXRExperience = await scene.createDefaultXRExperienceAsync({\n    uiOptions: {\n        sessionMode: 'immersive-ar'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading NodeGeometry from Snippet Server - Babylon.js (JavaScript)\nDESCRIPTION: This code asynchronously loads a NodeGeometry instance from Babylon.js's snippet server using the ParseFromSnippetAsync static method. Dependency is Babylon.js with network access. Input: snippet server ID string. Output: a loaded and parsed NodeGeometry object, resolved as a Promise. Network failures or invalid IDs are potential limitations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst geometry = await BABYLON.NodeGeometry.ParseFromSnippetAsync(\\\"IJA02K#11\\\");\n```\n\n----------------------------------------\n\nTITLE: Testing Particle-Mesh Intersection with AABB in Babylon.js - JavaScript\nDESCRIPTION: This example checks if a particle intersects a given mesh using its axis-aligned bounding box (AABB). The intersectsMesh method returns a boolean, allowing developers to trigger property changes or reactions when a collision occurs. The check runs per particle and is appropriate when collision detection is needed within a point cloud system. This operation may have performance implications and should only be used when necessary.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (particle.intersectsMesh(anyMesh)) { \n  // change properties of particle\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sphere Shape in BabylonJS\nDESCRIPTION: Creates a physics sphere shape with a center point and radius. This is the simplest shape for physics simulation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeSphere(\n    new BABYLON.Vector3(0, 0, 0),   // center of the sphere\n    1,                              // radius of the sphere\n    scene                           // scene of the shape\n);\n```\n\n----------------------------------------\n\nTITLE: Constructing and Initializing a UniversalCamera in Babylon.js (JavaScript)\nDESCRIPTION: This code shows how to create a `BABYLON.UniversalCamera`, suitable for first-person perspectives. It takes the camera name, initial position (`BABYLON.Vector3`), and the scene as constructor arguments. `setTarget` directs the camera's view (here, to the scene origin), and `attachControl` enables user input via the specified canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters : name, position, scene\nconst camera = new BABYLON.UniversalCamera(\"UniversalCamera\", new BABYLON.Vector3(0, 0, -10), scene);\n\n// Targets the camera to a particular position. In this case the scene origin\ncamera.setTarget(BABYLON.Vector3.Zero());\n\n// Attach the camera to the canvas\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Baking a Transformation Matrix into Mesh Vertices in Babylon.js\nDESCRIPTION: This snippet demonstrates how to use the `bakeTransformIntoVertices` method on a Babylon.js mesh object. It applies the geometric transformation defined by the provided `matrix` directly to the mesh's vertex data, effectively modifying the mesh's geometry. The mesh's world matrix remains unchanged after this operation. This requires a Babylon.js mesh instance and a `BABYLON.Matrix` object defining the transformation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.bakeTransformIntoVertices(matrix);\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Callbacks in Babylon.js\nDESCRIPTION: This snippet demonstrates how to enable collision callbacks on a physics body and set up observers for collision events. It shows both body-specific and world-wide callback approaches.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/collisionEvents.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// player is a PhysicsBody\nplayer.setCollisionCallbackEnabled(true);\n\n// You have two options:\n// Body-specific callback\nconst observable = player.getCollisionObservable();\nconst observer = observable.add((collisionEvent) => {\n  // Process collisions for the player\n});\n\n// OR\n\n// world callback\nconst observable = plugin.onCollisionObservable;\nconst observer = observable.add((collisionEvent) => {\n  // Check if the player is involved in the collision\n  if (collisionEvent.collider === player || collisionEvent.collidedAgainst === player) {\n    // Process collisions for the player\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Shader Code Using IncludesShadersStore (JavaScript)\nDESCRIPTION: Shows how to store a reusable piece of GLSL code (like functions, structs, or uniforms) in the `BABYLON.Effect.IncludesShadersStore`. This allows the named code block ('includeName') to be injected into other shaders using the `#include` directive.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Effect.IncludesShadersStore[\"includeName\"] = \"...\";\n```\n\n----------------------------------------\n\nTITLE: Initializing ActionManager for Mesh Visibility Experiment in Babylon.js\nDESCRIPTION: Sets up the `BABYLON.ActionManager` on a target mesh as the initial step in an example scenario. This prepares the mesh to have actions registered on it, specifically for controlling its visibility based on user interaction in the following steps. Requires an existing `mesh` and the `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager = new BABYLON.ActionManager(scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a BabylonJS Scene with FPS Callback\nDESCRIPTION: This code creates a BabylonJS scene with three colored cubes and implements an FPS callback mechanism. The scene includes a rotating green cube and passes the current frames-per-second value to a callback function provided as a parameter, which can then be used by Vue components.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Engine, Scene, FreeCamera, Vector3, MeshBuilder, StandardMaterial, Color3, HemisphericLight } from \"@babylonjs/core\";\nconst createScene = (canvas, fpsCallback) => {\n  const engine = new Engine(canvas);\n  const scene = new Scene(engine);\n\n  const camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n  camera.setTarget(Vector3.Zero());\n  camera.attachControl(canvas, true);\n\n  new HemisphericLight(\"light\", Vector3.Up(), scene);\n\n  const boxRed = MeshBuilder.CreateBox(\"box-red\", { size: 1 }, scene);\n  const materialRed = new StandardMaterial(\"box-red-material\", scene);\n  materialRed.diffuseColor = Color3.Red();\n  boxRed.material = materialRed;\n  boxRed.position.x = -2;\n\n  const boxBlue = MeshBuilder.CreateBox(\"box-yellow\", { size: 1 }, scene);\n  const materialYellow = new StandardMaterial(\"box-blue-material\", scene);\n  materialYellow.diffuseColor = Color3.Yellow();\n  boxBlue.material = materialYellow;\n\n  const boxGreen = MeshBuilder.CreateBox(\"box-green\", { size: 1 }, scene);\n  const materialGreen = new StandardMaterial(\"box-green-material\", scene);\n  materialGreen.diffuseColor = Color3.Green();\n  boxGreen.material = materialGreen;\n  boxGreen.position.x = 2;\n\n  engine.runRenderLoop(() => {\n    scene.render();\n\n    boxGreen.rotation.y += 0.01;\n\n    if (fpsCallback) {\n      fpsCallback(engine.getFps().toFixed());\n    }\n  });\n};\n\nexport { createScene };\n```\n\n----------------------------------------\n\nTITLE: Detecting Point Intersection with Mesh in Babylon.js\nDESCRIPTION: This snippet shows how to check if a specific point intersects with a mesh using the intersectsPoint() function. It changes the emissive color of the mesh if an intersection is detected.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/mesh_intersect.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pointToIntersect = new BABYLON.Vector3(10, -5, 0);\nif (balloon3.intersectsPoint(pointToIntersect)){\n  balloon3.material.emissiveColor = new BABYLON.Color4(1, 0, 0, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GreasedLine with Multiple Widths in JavaScript\nDESCRIPTION: Creates a GreasedLine where the width varies along its path. An array of widths is provided, where each pair of width values corresponds to a segment start and end point. Note: The original code snippet contains a typo `CreateGreaseLine` instead of `CreateGreasedLine`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, -0.5, 0, 0, 0, 0, 0, 0.5, 0, 0, 1, 0, 0];\nconst widths = [1, 1, 2, 2, 3, 3, 2, 2];\nconst line = BABYLON.CreateGreaseLine(\"line\", { points }, [widths]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Physics Joint in Babylon.js\nDESCRIPTION: Demonstrates how to create a standard physics joint between two impostors in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/joints.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar joint = new BABYLON.PhysicsJoint(\n  BABYLON.PhysicsJoint.TYPE_OF_JOINT,\n  jointData\n);\n\nmainImpostor.addJoint(connectedImpostor, joint);\n```\n\n----------------------------------------\n\nTITLE: Assigning a Generated ENV Texture (Babylon.js, JavaScript)\nDESCRIPTION: This code demonstrates how to assign a .env environment texture that has been generated (e.g., via the Babylon Sandbox 'Generate .env' tool) to the scene's environmentTexture. Requires Babylon.js and a valid .env texture file. 'scene' references a Babylon.js Scene. Input is the path to the generated .env file. Effect is to enable high-quality, prefiltered lighting and reflections in the 3D scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/HDREnvironment.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.environmentTexture = new BABYLON.CubeTexture(\"environment.env\", scene);\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Scene Creation\nDESCRIPTION: Basic scene setup code that creates a 3D scene with a camera, light, and a blue box using BabylonJS core functionality\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_1.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Engine, Scene, FreeCamera, Vector3, MeshBuilder, StandardMaterial, Color3, HemisphericLight } from \"@babylonjs/core\";\nconst createScene = (canvas) => {\n  const engine = new Engine(canvas);\n  const scene = new Scene(engine);\n\n  const camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n  camera.setTarget(Vector3.Zero());\n  camera.attachControl(canvas, true);\n\n  new HemisphericLight(\"light\", Vector3.Up(), scene);\n\n  const box = MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\n  const material = new StandardMaterial(\"box-material\", scene);\n  material.diffuseColor = Color3.Blue();\n  box.material = material;\n\n  engine.runRenderLoop(() => {\n    scene.render();\n  });\n};\n\nexport { createScene };\n```\n\n----------------------------------------\n\nTITLE: Attaching Gizmo to Mesh in Babylon.js\nDESCRIPTION: Shows how to attach a gizmo to a mesh, making it active and visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngizmo.attachedMesh = sphere;\n```\n\n----------------------------------------\n\nTITLE: Loading a Custom Particle Set Asynchronously in JavaScript\nDESCRIPTION: Example of loading a custom particle set named \"tornado\" using `BABYLON.ParticleHelper.CreateAsync`. This assumes `BaseAssetsUrl` has been set previously, and a `tornado.json` file exists at the location `yourBaseUrl/systems/tornado.json`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particleHelper.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myParticleSet = new BABYLON.ParticleHelper.CreateAsync(\"tornado\", scene).then(function(set) {\n    set.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Parent for Pivot Positioning in Babylon.js (JavaScript)\nDESCRIPTION: This snippet illustrates positioning a pivot point using a parent mesh (`sphere`). The sphere is placed at the desired center of rotation (`CoR_At`), the target mesh (`pilot`) is parented to it, and `setPivotMatrix` is used on the pilot (relative to the parent's origin). Rotation is then applied directly to the `pilot` mesh in world space, rotating it around the parent's position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivot.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nsphere.position = CoR_At;\n\npilot.parent = sphere;\npilot.setPivotMatrix(BABYLON.Matrix.Translation(pilotTranslate.x, pilotTranslate.y, pilotTranslate.z));\n\npilot.rotate(axis, angle, BABYLON.Space.WORLD);\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Loading Screen in JavaScript\nDESCRIPTION: This snippet shows how to implement a custom loading screen in plain JavaScript. It defines a constructor and the required methods for displaying and hiding the loading UI.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/customLoadingScreen.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomLoadingScreen(/* variables needed, for example:*/ text) {\n  //init the loader\n  this.loadingUIText = text;\n}\nCustomLoadingScreen.prototype.displayLoadingUI = function () {\n  alert(this.loadingUIText);\n};\nCustomLoadingScreen.prototype.hideLoadingUI = function () {\n  alert(\"Loaded!\");\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Wireframe Mode on Materials in Babylon.js\nDESCRIPTION: Sets a material to display as a wireframe by setting its wireframe property to true. This renders the mesh edges as lines while preserving material properties like color and alpha.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materials_introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmaterialSphere1.wireframe = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Door Opening Animation in BabylonJS\nDESCRIPTION: This snippet defines an animation for a door to open and close by rotating around the Y-axis. The animation uses keyframes at specific times to control when the door remains closed, opens to a specific angle, stays open, and then closes again.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/sequenceAnimations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//for door to open and close\nconst sweep = new BABYLON.Animation(\"sweep\", \"rotation.y\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);\n\nconst sweep_keys = [];\n\nsweep_keys.push({\n  frame: 0,\n  value: 0,\n});\n\nsweep_keys.push({\n  frame: 3 * frameRate,\n  value: 0,\n});\n\nsweep_keys.push({\n  frame: 5 * frameRate,\n  value: Math.PI / 3,\n});\n\nsweep_keys.push({\n  frame: 13 * frameRate,\n  value: Math.PI / 3,\n});\n\nsweep_keys.push({\n  frame: 15 * frameRate,\n  value: 0,\n});\n\nsweep.setKeys(sweep_keys);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Flow Graph for Console Logging in JavaScript\nDESCRIPTION: This snippet demonstrates the basic setup of a Babylon.js Flow Graph. It creates a coordinator, a graph, and a context. It then adds a `FlowGraphSceneReadyEventBlock` to trigger execution when the scene loads and a `FlowGraphConsoleLogBlock` to output 'Hello, world!' to the console. The `done` output of the scene ready block is connected to the `in` input of the log block, establishing the execution flow. Finally, `coord.start()` activates the graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphExamples.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst coord = new FlowGraphCoordinator({ scene });\n\nconst graph = coord.createGraph();\n\nconst ctx = graph.createContext();\n\nconst sceneReady = new FlowGraphSceneReadyEventBlock();\ngraph.addEventBlock(sceneReady);\n\nconst log = new FlowGraphConsoleLogBlock();\nlog.message.setValue(\"Hello, world!\", ctx);\nsceneReady.done.connectTo(log.in);\n\ncoord.start();\n```\n\n----------------------------------------\n\nTITLE: Creating Default Light in Babylon.js\nDESCRIPTION: Creates a default light in the scene using the helper method\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultLight();\n```\n\n----------------------------------------\n\nTITLE: Calculating and Applying Player Rotation in Babylon.js (JavaScript)\nDESCRIPTION: Calculates the target rotation angle based on input axes and the camera's Y rotation (`this._camRoot.rotation.y`). It then uses `Quaternion.Slerp` (Spherical Linear Interpolation) to smoothly rotate the player's mesh (`this.mesh.rotationQuaternion`) towards the target quaternion (`targ`) over time, controlled by `this._deltaTime` for frame-rate independence.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//rotation based on input & the camera angle\nlet angle = Math.atan2(this._input.horizontalAxis, this._input.verticalAxis);\nangle += this._camRoot.rotation.y;\nlet targ = Quaternion.FromEulerAngles(0, angle, 0);\nthis.mesh.rotationQuaternion = Quaternion.Slerp(this.mesh.rotationQuaternion, targ, 10 * this._deltaTime);\n```\n\n----------------------------------------\n\nTITLE: Animating Mesh Position with Interpolation Blocks in JavaScript Flow Graph\nDESCRIPTION: This snippet demonstrates animating a mesh's position using Flow Graph blocks. It sets up a `FlowGraphInterpolationBlock` configured for `Vector3` animation over 1 second, targeting the 'position' property. The target end position `(1, 2, 3)` is set on the block. A `FlowGraphGetAssetBlock` retrieves the first mesh in the scene. A `FlowGraphPlayAnimationBlock` connects the retrieved mesh and the generated animation. The animation is triggered when the `sceneReady` event occurs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphExamples.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst coord = new FlowGraphCoordinator({ scene });\nconst graph = coord.createGraph();\nconst context = graph.createContext();\nconst sceneReady = new FlowGraphSceneReadyEventBlock();\ngraph.addEventBlock(sceneReady);\n\nconst interpolationBlock = new FlowGraphInterpolationBlock({\n  animationType: Constants.ANIMATIONTYPE_VECTOR3,\n  duration: 1,\n  propertyName: \"position\",\n});\ninterpolationBlock.endValue.setValue(new Vector3(1, 2, 3), context);\n\nconst assetToWorkOn = new FlowGraphGetAssetBlock({\n  type: FlowGraphAssetType.Mesh,\n  index: 0,\n});\n\nconst playAnimation = new FlowGraphPlayAnimationBlock();\nplayAnimation.object.connectTo(assetToWorkOn.value);\nplayAnimation.animation.connectTo(interpolationBlock.animation);\n\nsceneReady.done.connectTo(playAnimation.in);\n\ncoord.start();\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Material in Babylon.js (JavaScript)\nDESCRIPTION: This code shows how to instantiate a standard material using `BABYLON.StandardMaterial`. This material can then have textures assigned to its properties (like diffuseTexture) and be applied to a mesh. Requires an initialized Babylon.js scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/proceduralTextures.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst material = new BABYLON.StandardMaterial(\"material\", scene);\n```\n\n----------------------------------------\n\nTITLE: Importing Models with Scene Helpers in Babylon.js\nDESCRIPTION: Demonstrates how to import a 3D model asynchronously and apply default scene helpers in the callback. Creates a default camera and environment after the model is loaded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.AppendSceneAsync(\"https://www.babylonjs.com/assets/DamagedHelmet/glTF/\", \"DamagedHelmet.gltf\", scene).then(function ({ meshes }) {\n  scene.createDefaultCameraOrLight(true, true, true);\n  scene.createDefaultEnvironment();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Axes Data in WebXR Controllers\nDESCRIPTION: Shows how to access and use axes data from controller components\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet axes = component.axes;\nif (axes.x > 0.8) {\n  // do something nice with the x-axis value\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Actions for Mesh Fade-Out/Fade-In on Pick in Babylon.js\nDESCRIPTION: Expands on the visibility example by chaining a second `InterpolateValueAction` using `.then()`. The first pick triggers the fade-out (visibility to 0.2). The subsequent pick triggers the chained action, which interpolates the `mesh.visibility` back to 1.0 (fully opaque) over 1000ms, creating a toggle effect. Requires an initialized `actionManager` on the `mesh`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, mesh, \"visibility\", 0.2, 1000)).then(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, mesh, \"visibility\", 1.0, 1000));\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TypeScript and Babylon.js - JavaScript\nDESCRIPTION: This webpack configuration file specifies entry/output paths, enables TypeScript support through ts-loader, and sets the build mode to development. It ensures that Webpack can correctly process .ts files, bundle the output to the dist folder, and supports ES module resolution. Key parameters include 'entry', 'output', 'resolve', and 'module'. Place this code in 'webpack.config.js' at the project root.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\\n\\nmodule.exports = {\\n    entry: './index.ts',\\n    output: {\\n        filename: 'index.js',\\n        path: path.resolve(__dirname, 'dist')\\n    },\\n    resolve: {\\n        extensions: [\".ts\"]\\n    },\\n    module: {\\n        rules: [\\n            { test: /\\\\.tsx?$/, loader: \"ts-loader\" }\\n        ]\\n    },\\n    mode: \"development\"\\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Pointer Move Events for Babylon.js GUI on Mesh - JavaScript\nDESCRIPTION: This snippet shows how to create an AdvancedDynamicTexture in texture mode with pointer move event support disabled. The fourth boolean argument (false) prevents tracking pointer move events, which can improve performance on complex meshes. Parameters: the mesh, width, height, and a boolean (false to disable pointer move events). Dependencies: Babylon.js mesh and the GUI package.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst advancedTexture2 = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(myPlane, 1024, 1024, false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Ground Following in BabylonJS\nDESCRIPTION: Sets up camera movement to follow terrain height by updating camera position on each frame render using getHeightFromMap method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/DTExamples.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst camElevation = 2.0;\nconst camAltitude = 0.0;\nscene.registerBeforeRender(function () {\n  camAltitude = terrain.getHeightFromMap(camera.position.x, camera.position.z) + camElevation;\n  camera.position.y = camAltitude;\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Scene Rendering with GUI in Babylon.js\nDESCRIPTION: Shows how to set up multi-scene rendering to handle GUI separately from main scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nguiScene.autoClear = false;\nengine.runRenderLoop(function () {\n  mainScene.render();\n  guiScene.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle System Pre-warming in Babylon.js\nDESCRIPTION: Sets up pre-warming for a particle system. `preWarmCycles` defines the number of simulation frames to run before the first render, and `preWarmStepOffset` multiplies the time step during pre-warming to speed it up. This initializes the system to a visually populated state immediately upon starting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsystem.preWarmCycles = 100;\nsystem.preWarmStepOffset = 5;\nsystem.start();\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Position in Babylon.js\nDESCRIPTION: Demonstrates how to get the position of a bone using the getPosition method. It takes space (world or local) and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst pos = bone.getPosition(BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyboard Input Listener in Babylon.js (JavaScript)\nDESCRIPTION: This snippet sets up a keyboard event listener using `scene.onKeyboardObservable.add`. It defines a callback function that triggers on keyboard events. Inside the callback, it checks if the event type is `BABYLON.KeyboardEventTypes.KEYDOWN` (a key press) and uses a switch statement based on the pressed key (`kbInfo.event.key.toLowerCase()`) to handle specific key actions. Requires the Babylon.js library and a `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onKeyboardObservable.add((kbInfo) => {\n  switch (kbInfo.type) {\n    case BABYLON.KeyboardEventTypes.KEYDOWN:\n      switch (kbInfo.event.key.toLowerCase()) {\n      }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tonemap PostProcess in Babylon.js\nDESCRIPTION: Applies tone mapping with configurable operators and exposure adjustment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.TonemapPostProcess(\"tonemap\", BABYLON.TonemappingOperator.Hable, 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Freezing Material Shaders in Babylon.js\nDESCRIPTION: Demonstrates how to freeze and unfreeze material shaders to reduce shader overhead for static materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.freeze();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.unfreeze();\n```\n\n----------------------------------------\n\nTITLE: Defining a Triangle Predicate for Ray Picking in Babylon.js\nDESCRIPTION: Defines a callback function for `scene.pick` (or potentially other picking methods accepting it) to filter individual triangles of a mesh during ray intersection tests. This example filters out triangles whose normals point away from the ray's direction (back-face culling relative to the ray), accepting only triangles potentially facing the ray's origin. The predicate receives the three vertices (p0, p1, p2) of the triangle and the ray.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.pick(scene.pointerX, scene.pointerY, null, false, null, (p0, p1, p2, ray) => {\n  var p0p1 = p0.subtract(p1);\n  var p2p1 = p2.subtract(p1);\n  var normal = BABYLON.Vector3.Cross(p0p1, p2p1);\n  return BABYLON.Vector3.Dot(ray.direction, normal) < 0;\n});\n```\n\n----------------------------------------\n\nTITLE: Picking with a Ray Using a Predicate Filter in Babylon.js\nDESCRIPTION: Performs a ray picking operation using `scene.pickWithRay`, but includes an optional predicate function as the second argument. The ray will only consider intersecting meshes for which the predicate function returns `true`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.pickWithRay(ray, predicate);\n```\n\n----------------------------------------\n\nTITLE: Creating Ground Plane in Babylon.js Scene (TypeScript)\nDESCRIPTION: This client-side Babylon.js code creates a ground plane mesh named \"ground\". It uses `MeshBuilder.CreatePlane` with a size of 500x500 units. The plane is positioned slightly below the origin (y = -15) and rotated 90 degrees around the X-axis to make it horizontal. Requires `BABYLON.MeshBuilder` and a `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Create the ground\nvar ground = BABYLON.MeshBuilder.CreatePlane(\"ground\", { size: 500 }, scene);\nground.position.y = -15;\nground.rotation.x = Math.PI / 2;\n```\n\n----------------------------------------\n\nTITLE: Multi-Camera Setup with Layer Masks\nDESCRIPTION: Shows how to set up multiple cameras with specific layer masks for selective mesh visibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/layerMasksAndMultiCam.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (scene.activeCameras.length === 0){\n    scene.activeCameras.push(scene.activeCamera);\n}\nconst secondCamera = new Babylon.Camera(...);\nsecondCamera.layerMask = 0x10000000;\nscene.activeCameras.push(secondCamera);\n\nconst Button = new BABYLON.Mesh(...);\nButton.layerMask = 0x10000000;\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Lines with Mesh API in JavaScript\nDESCRIPTION: This usage snippet shows how to create dashed lines with the legacy Mesh API by specifying parameters like line name, array of Vector3 points, dash size, gap size, number of dashes, the scene, and optionally updatable or instance flags. The function returns a dashed line mesh. Prerequisites include a Babylon.js scene and a Vector3 array for the path. The output is a mesh object representing dashed lines.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/dashed.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dashedlines = BABYLON.Mesh.CreateDashedLines(\"dashedLines\", vector3 array, dashSize, gapSize, dashNb, scene);\nconst dashedlines = BABYLON.Mesh.CreateDashedLines(\"dashedLines\", vector3 array, dashSize, gapSize, dashNb, scene, updatable, instance); //optional parameters after scene\n\n```\n\n----------------------------------------\n\nTITLE: Initializing TAA Rendering Pipeline in Babylon.js\nDESCRIPTION: Creates and configures a Temporal Anti-Aliasing rendering pipeline with sample count and enables it for the scene. The samples parameter controls accumulation quality while isEnabled toggles the effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/taaRenderingPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst taaRenderPipeline = new BABYLON.TAARenderingPipeline(\"taa\", scene, [camera]);\n\ntaaRenderPipeline.isEnabled = true;\ntaaRenderPipeline.samples = 8;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Box Mesh Vertex Normals in Babylon.js\nDESCRIPTION: Contains a Babylon.js Playground example demonstrating the vertex normals calculated for a standard box mesh. This example helps visualize the default normal calculation, typically averaging normals at shared vertices for a smoother appearance compared to flat shading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/vertexNormals.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Babylon.js Playground Example\n// ID: #1H7L5C#113\n// Title: Box Normals\n// Description: Simple example of box normals.\n// (Code loaded dynamically in the Babylon.js Playground)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Node Material Structure\nDESCRIPTION: Example showing how to create a basic Node Material with position inputs, world transformations, and color output\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeMaterial = new BABYLON.NodeMaterial(\"node material\", scene, { emitComments: true });\nconst positionInput = new BABYLON.InputBlock(\"position\");\npositionInput.setAsAttribute(\"position\");\n\nconst worldInput = new BABYLON.InputBlock(\"world\");\nworldInput.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);\n\nconst worldPos = new BABYLON.TransformBlock(\"worldPos\");\npositionInput.connectTo(worldPos);\nworldInput.connectTo(worldPos);\n\nconst viewProjectionInput = new BABYLON.InputBlock(\"viewProjection\");\nviewProjectionInput.setAsSystemValue(BABYLON.NodeMaterialSystemValues.ViewProjection);\n\nconst worldPosdMultipliedByViewProjection = new BABYLON.TransformBlock(\"worldPos * viewProjectionTransform\");\nworldPos.connectTo(worldPosdMultipliedByViewProjection);\nviewProjectionInput.connectTo(worldPosdMultipliedByViewProjection);\n\nconst vertexOutput = new BABYLON.VertexOutputBlock(\"vertexOutput\");\nworldPosdMultipliedByViewProjection.connectTo(vertexOutput);\n\n// Pixel\nconst pixelColor = new BABYLON.InputBlock(\"color\");\npixelColor.value = new BABYLON.Color4(0.8, 0.8, 0.8, 1);\n\nconst fragmentOutput = new BABYLON.FragmentOutputBlock(\"fragmentOutput\");\npixelColor.connectTo(fragmentOutput);\n\n// Add to nodes\nnodeMaterial.addOutputNode(vertexOutput);\nnodeMaterial.addOutputNode(fragmentOutput);\n```\n\n----------------------------------------\n\nTITLE: Initializing SPS with Model Materials in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to create a Solid Particle System (SPS) in Babylon.js that automatically uses the materials assigned to the source meshes (`model1`, `model2`, `model3`). Setting `useModelMaterial: true` during SPS construction enables this behavior, creating a MultiMaterial internally and sorting particles to minimize draw calls. The materials from the source models are used for the corresponding particles added via `addShape`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_material.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// model1, model2 and model3 are meshes with already set materials at this step\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, {\n  useModelMaterial: true\n});\nsps.addShape(model1, 300);\nsps.addShape(model2, 300);\nsps.addShape(model3, 300);\nsps.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: Using a Texture to Control Iridescence Intensity/Thickness in Babylon.js\nDESCRIPTION: This JavaScript snippet demonstrates using a texture to control the iridescence effect's thickness variation on a Babylon.js PBR material. After enabling iridescence, an `intensityTexture` is assigned to `iridescence.texture`. The texture's R channel value interpolates between the material's `minimumThickness` and `maximumThickness` properties to determine the local thickness. Requires `BABYLON.PBRMaterial` and a `BABYLON.Texture` instance (`intensityTexture`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.albedoColor = new BABYLON.Color3(0.1, 0.1, 0.1);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.iridescence.isEnabled = true;\npbr.iridescence.texture = intensityTexture;\n```\n\n----------------------------------------\n\nTITLE: Creating a Ground Mesh from a Height Map in Babylon.js\nDESCRIPTION: This JavaScript snippet demonstrates how to generate a 3D ground mesh using a height map texture in Babylon.js. It first creates a standard material with a diffuse texture representing the land's appearance. Then, it utilizes `BABYLON.MeshBuilder.CreateGroundFromHeightMap` to construct the terrain, specifying the mesh name, the path to the height map image ('textures/heightMap.png'), and options defining the ground's dimensions (width, height), detail level (subdivisions), and elevation range (maxHeight, minHeight). Finally, it assigns the created material to the generated ground mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/height_map.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a material with our land texture.\nlet groundMaterial = new BABYLON.StandardMaterial(\"ground\", scene);\ngroundMaterial.diffuseTexture = new BABYLON.Texture(\"Earth__land.jpg\", scene);\n\n// Use CreateGroundFromHeightMap to create a height map of 20 units by 20\n// And a height of to\n// units, with 250 subdivisions in each of the `x` and `z` directions, for a\n// total of 62,500 divisions.\nconst ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap(\"gdhm\", \"textures/heightMap.png\", {\n    width: 20, height: 20, subdivisions: 250, maxHeight: 10, minHeight: 2\n});\n\n// Bind our material to our mesh\nground.material = groundMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating a Physics Character Controller with Capsule Shape in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a physics character controller with a capsule shape in Babylon.js. It creates both a visual representation (display capsule) and the physics character controller at a specified position with defined dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/characterController.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet h = 1.8;\nlet r = 0.6;\nlet displayCapsule = BABYLON.MeshBuilder.CreateCapsule(\"CharacterDisplay\", { height: h, radius: r }, scene);\nlet characterPosition = new BABYLON.Vector3(3, 0.3, -8);\nlet characterController = new BABYLON.PhysicsCharacterController(characterPosition, { capsuleHeight: h, capsuleRadius: r }, scene);\n```\n\n----------------------------------------\n\nTITLE: Playing Morph Target Animation in Babylon.js\nDESCRIPTION: This snippet demonstrates how to play a previously created morph target animation. The animation (`myAnim`) is added to the `animations` array of the mesh that owns the `MorphTargetManager`. Then, `scene.beginAnimation` is called, targeting the specific `morphTarget` whose influence should be animated, along with the start frame, end frame, and loop parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.animations.push(myAnim);\nscene.beginAnimation(morphTarget, from, to, true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Plane with MeshBuilder in Babylon.js\nDESCRIPTION: Creates a plane mesh using `BABYLON.MeshBuilder.CreatePlane`. Takes a name, an options object (specifying properties like size, width, height, updatable, sideOrientation, sourcePlane, frontUVs, backUVs), and optionally a scene object. This method allows for creating rectangular planes and offers more configuration options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/plane.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst plane = BABYLON.MeshBuilder.CreatePlane(\"plane\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Gun Sight Crosshair Implementation\nDESCRIPTION: Complete implementation of a gun sight crosshair using orthographic camera and layer masks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/layerMasksAndMultiCam.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addGunSight(scene) {\n  if (scene.activeCameras.length === 0) {\n    scene.activeCameras.push(scene.activeCamera);\n  }\n  const secondCamera = new BABYLON.FreeCamera(\"GunSightCamera\", new BABYLON.Vector3(0, 0, -50), scene);\n  secondCamera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;\n  secondCamera.layerMask = 0x20000000;\n  scene.activeCameras.push(secondCamera);\n\n  meshes = [];\n  const h = 250;\n  const w = 250;\n\n  const y = BABYLON.MeshBuilder.CreateBox(\"y\", { size: h * 0.2 }, scene);\n  y.scaling = new BABYLON.Vector3(0.05, 1, 1);\n  y.position = new BABYLON.Vector3(0, 0, 0);\n  meshes.push(y);\n\n  const x = BABYLON.MeshBuilder.CreateBox(\"x\", { size: h * 0.2 }, scene);\n  x.scaling = new BABYLON.Vector3(1, 0.05, 1);\n  x.position = new BABYLON.Vector3(0, 0, 0);\n  meshes.push(x);\n\n  const lineTop = BABYLON.MeshBuilder.CreateBox(\"lineTop\", { size: w * 0.8 }, scene);\n  lineTop.scaling = new BABYLON.Vector3(1, 0.005, 1);\n  lineTop.position = new BABYLON.Vector3(0, h * 0.5, 0);\n  meshes.push(lineTop);\n\n  const lineBottom = BABYLON.MeshBuilder.CreateBox(\"lineBottom\", { size: w * 0.8 }, scene);\n  lineBottom.scaling = new BABYLON.Vector3(1, 0.005, 1);\n  lineBottom.position = new BABYLON.Vector3(0, h * -0.5, 0);\n  meshes.push(lineBottom);\n\n  const lineLeft = BABYLON.MeshBuilder.CreateBox(\"lineLeft\", { size: h }, scene);\n  lineLeft.scaling = new BABYLON.Vector3(0.01, 1, 1);\n  lineLeft.position = new BABYLON.Vector3(w * -0.4, 0, 0);\n  meshes.push(lineLeft);\n\n  const lineRight = BABYLON.MeshBuilder.CreateBox(\"lineRight\", { size: h }, scene);\n  lineRight.scaling = new BABYLON.Vector3(0.01, 1, 1);\n  lineRight.position = new BABYLON.Vector3(w * 0.4, 0, 0);\n  meshes.push(lineRight);\n\n  const gunSight = BABYLON.Mesh.MergeMeshes(meshes);\n  gunSight.name = \"gunSight\";\n  gunSight.layerMask = 0x20000000;\n  gunSight.freezeWorldMatrix();\n\n  const mat = new BABYLON.StandardMaterial(\"emissive mat\", scene);\n  mat.checkReadyOnlyOnce = true;\n  mat.emissiveColor = new BABYLON.Color3(0, 1, 0);\n\n  gunSight.material = mat;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Sphere Physics Aggregate to Bowling Ball in Babylon.js (JavaScript)\nDESCRIPTION: This snippet creates a physics aggregate for the `bowlingBall` mesh using `BABYLON.PhysicsAggregate`. It specifies a spherical physics shape (`BABYLON.PhysicsShapeType.SPHERE`) appropriate for the ball, assigns a mass of 1, and a restitution (bounciness) of 0.25. Requires the `bowlingBall` mesh object, the Babylon.js library, and the `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ballAggregate = new BABYLON.PhysicsAggregate(bowlingBall, BABYLON.PhysicsShapeType.SPHERE, { mass: 1, restitution: 0.25 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Defining lil-gui Type Declarations for Babylon.js\nDESCRIPTION: This code block declares types for the lil-gui library to be used within the Babylon.js environment. It defines a namespace 'lil' with types for GUI and Controller.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let lil: any;\n\nnamespace lil {\n    export type GUI = any;\n    export type Controller = any;\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Post Process Effects in Babylon.js\nDESCRIPTION: Creates a combined effect that applies black and white followed by blur processing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/postProcessRenderPipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar blackAndWhiteThenBlur = new BABYLON.PostProcessRenderEffect(engine, \"blackAndWhiteThenBlur\", function() { return [blackAndWhite, horizontalBlur] });\nstandardPipeline.addEffect(blackAndWhiteThenBlur);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Angular Speed Range - Babylon.js - JavaScript\nDESCRIPTION: Defines a random range for particle angular speeds (rotation per second) in radians. minAngularSpeed and maxAngularSpeed are set to numeric values (0 to PI). Babylon.js is required. This affects how quickly each particle spins as it moves.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.minAngularSpeed = 0;\nparticleSystem.maxAngularSpeed = Math.PI;\n```\n\n----------------------------------------\n\nTITLE: Terrain Coordinate Validation in BabylonJS\nDESCRIPTION: Shows how to check if coordinates are within terrain bounds and get height data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nif (terrain.contains(x, z)) {\n  // do stuff\n}\n\nconst y = terrain.getHeightFromMap(x, z);\n\nconst normal = BABYLON.Vector3.Zero();\ny = terrain.getHeightFromMap(x, z, normal);\n```\n\n----------------------------------------\n\nTITLE: Building the Frame Graph and Handling Resizing in Babylon.js\nDESCRIPTION: Sets up an event listener using `engine.onResizeObservable` to rebuild the frame graph whenever the engine resizes, ensuring textures are recreated with correct dimensions. It then performs an initial build of the graph and uses `await frameGraph.whenReadyAsync()` to ensure all resources are ready before the first execution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nengine.onResizeObservable.add(() => {\n    frameGraph.build();\n});\n\nframeGraph.build();\n\nawait frameGraph.whenReadyAsync();\n```\n\n----------------------------------------\n\nTITLE: Applying Gravity When Player is Not Grounded in Babylon.js (JavaScript)\nDESCRIPTION: This snippet updates the character's gravity vector when they are not grounded. It calls `_isGrounded()` and if it returns false, it increases the downward gravity (`this._gravity`) by scaling `Vector3.Up()` with `this._deltaTime` and a constant `Player.GRAVITY`. It also sets the `_grounded` flag to false.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (!this._isGrounded()) {\n    this._gravity = this._gravity.addInPlace(Vector3.Up().scale(this._deltaTime * Player.GRAVITY));\n    this._grounded = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using GPU Multi-picking Interface in Babylon.js\nDESCRIPTION: Interface definition for GPU multi-picking in Babylon.js. It defines the structure of the response object returned by the multiPickAsync method, including arrays for picked meshes and thin instance indexes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IGPUMultiPickingInfo {\n    /**\n     * Picked mesh\n     */\n    meshes: Nullable<AbstractMesh>[];\n    /**\n     * Picked thin instance index\n     */\n    thinInstanceIndexes?: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Smooth vs. Flat Shading on Spheres in Babylon.js\nDESCRIPTION: Offers a Babylon.js Playground example comparing a sphere with default (smooth) shading (shared, averaged normals pointing outwards from the center) and a flat-shaded sphere created using `convertToFlatShadedMesh` (normals perpendicular to each facet). This highlights the visual difference between smooth and faceted appearances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/vertexNormals.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Babylon.js Playground Example\n// ID: #1H7L5C#38\n// Title: Comparing Shading of Spheres\n// Description: Simple example comparing shading of spheres.\n// (Code loaded dynamically in the Babylon.js Playground)\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Timing in Chrome for WebGPU\nDESCRIPTION: Command-line flags to enable GPU timing and developer features in Chrome for WebGPU development. These flags allow for timestamp queries and more precise timing in the Babylon.js Inspector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUStatus.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--enable-dawn-features=allow_unsafe_apis --enable-webgpu-developer-features\n```\n\n----------------------------------------\n\nTITLE: Adding Anchors to Cloth in Babylon.js\nDESCRIPTION: Demonstrates how to add anchor points to a cloth soft body, attaching it to a rigid body impostor with specified parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncloth.physicsImpostor.addAnchor(box.physicsImpostor, 0, 1);\ncloth.physicsImpostor.addAnchor(box.physicsImpostor, 1, 1, 0.8);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Size Gradient Over Lifetime (Single Values) in Babylon.js\nDESCRIPTION: Demonstrates how to use `addSizeGradient` to define the size of particles at the beginning (time fraction 0) and end (time fraction 1) of their individual lifetimes. The size will interpolate between these values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addSizeGradient(0, 0.5); //size at start of particle lifetime\nparticleSystem.addSizeGradient(1, 3); //size at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Implementing Particle Update and Recycling Logic in SPS updateParticle using JavaScript\nDESCRIPTION: This code defines the `updateParticle` function for a Solid Particle System (SPS). It updates a particle's state (decrementing `velocity`) and checks a condition (`velocity < 0`). If the condition is met, it marks the particle as not `alive` and calls the user-defined `SPS.recycleParticle` function to handle its recycling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.updateParticle = function (particle) {\n  particle.velocity--;\n  if (particle.velocity < 0) {\n    particle.alive = false;\n    SPS.recycleParticle(particle); // call to your own recycle function\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Impostor with Ignored Parent in Babylon.js\nDESCRIPTION: This code shows how to create a physics impostor for a child mesh while ignoring its parent using the ignoreParent flag. This is useful when you want independent physics behavior for a child object within a hierarchy.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsphere2.physicsImpostor = new BABYLON.PhysicsImpostor(sphere2, BABYLON.PhysicsImpostor.SphereImpostor, {ignoreParent: true, mass: 2, restitution: 0.8});\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Engine with Stencil Support\nDESCRIPTION: Creates a Babylon.js engine with stencil buffer enabled, which is required for the HighlightLayer to function properly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = new BABYLON.Engine(canvas, true, { stencil: true });\n```\n\n----------------------------------------\n\nTITLE: Capping Gravity and Moving Player Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Limits the downward velocity caused by gravity to a maximum value (`-Player.JUMP_FORCE`) to prevent infinite acceleration during falls. It then applies the combined movement vector (player's intended direction `_moveDirection` plus the current `_gravity`) to the character mesh using `moveWithCollisions`, which handles collision detection and response.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n//limit the speed of gravity to the negative of the jump power\nif (this._gravity.y < -Player.JUMP_FORCE) {\n    this._gravity.y = -Player.JUMP_FORCE;\n}\nthis.mesh.moveWithCollisions(this._moveDirection.addInPlace(this._gravity));\n```\n\n----------------------------------------\n\nTITLE: Applying Impulse for Rolling (W Key) in Babylon.js (JavaScript)\nDESCRIPTION: This snippet adds a case for the 'w' key within the `KEYDOWN` switch statement. When 'w' is pressed, it applies an impulse to the bowling ball's physics body (`ballAggregate.body`) using `applyImpulse`. The impulse is directed along the positive Z-axis (towards the pins) with a magnitude of 20 (`new BABYLON.Vector3(0, 0, 20)`), and it's applied at the ball's current absolute position (`bowlingBall.getAbsolutePosition()`). Requires the `ballAggregate`, `bowlingBall`, Babylon.js library (`BABYLON.Vector3`), and the keyboard listener structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncase \"w\":\n    ballAggregate.body.applyImpulse(new BABYLON.Vector3(0, 0, 20), bowlingBall.getAbsolutePosition());\n    break;\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Gizmos in GizmoManager\nDESCRIPTION: Demonstrates how to access internal gizmos through the GizmoManager and add event listeners for drag events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngizmoManager.gizmos.scaleGizmo;\ngizmoManager.gizmos.rotationGizmo;\ngizmoManager.gizmos.positionGizmo;\n\ngizmoManager.gizmos.positionGizmo.xGizmo.dragBehavior.onDragStartObservable.add(() => {\n  console.log(\"Position gizmo's x axis started to be dragged\");\n});\ngizmoManager.gizmos.positionGizmo.xGizmo.dragBehavior.onDragEndObservable.add(() => {\n  console.log(\"Position gizmo's x axis drag was ended\");\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Asset from Memory URL in Babylon.js\nDESCRIPTION: This snippet loads the asset into the Babylon.js scene from the memory URL. It specifies the plugin extension as '.glb' to ensure the correct loader is used for the binary data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadFromMemory.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait BABYLON.AppendSceneAsync(assetUrl, scene, {\n    pluginExtension: \".glb\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Blur Exponential Shadow Map Filtering (JavaScript)\nDESCRIPTION: This code activates the blurred exponential shadow map filter to produce even softer shadows. By setting 'useBlurExponentialShadowMap' to true, the shadow generator will apply additional blur, which may degrade performance but enhances visual smoothness. Advanced control is available via properties like 'blurScale', 'blurBoxOffset', and 'useKernelBlur'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.useBlurExponentialShadowMap = true;\n```\n\n----------------------------------------\n\nTITLE: Constructing a FlyCamera in Babylon.js\nDESCRIPTION: Creates a FlyCamera that imitates free movement in 3D space. It includes options for roll correction, banked turns, and attaches the camera to the canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters: name, position, scene\nconst camera = new BABYLON.FlyCamera(\"FlyCamera\", new BABYLON.Vector3(0, 5, -10), scene);\n\n// Airplane like rotation, with faster roll correction and banked-turns.\n// Default is 100. A higher number means slower correction.\ncamera.rollCorrect = 10;\n// Default is false.\ncamera.bankedTurn = true;\n// Defaults to 90° in radians in how far banking will roll the camera.\ncamera.bankedTurnLimit = Math.PI / 2;\n// How much of the Yawing (turning) will affect the Rolling (banked-turn.)\n// Less than 1 will reduce the Rolling, and more than 1 will increase it.\ncamera.bankedTurnMultiplier = 1;\n\n// This attaches the camera to the canvas\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Yaw, Pitch, and Roll for Bones in Babylon.js\nDESCRIPTION: Demonstrates how to set the yaw, pitch, and roll of a bone using the setYawPitchRoll method. It takes yaw, pitch, roll, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbone.setYawPitchRoll(yaw, pitch, roll, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Defining Color Map Items for Skeleton Map Shader in Babylon.js (JavaScript)\nDESCRIPTION: This snippet illustrates the required format for items within the `colorMap` array used in the Skeleton Map shader options. Each item specifies a `BABYLON.Color3` and its corresponding `location` (0 to 1) on the color gradient. The array must be sorted by location in ascending order.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet colorMapItem = {\n  color: BABYLON.Color3, //The Color to use\n  location: number, // Where on the gradient it is. Between 0-1\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Navigation Mesh Component in Babylon.js\nDESCRIPTION: This example demonstrates how to create a NavMeshComponent that handles point-and-click navigation for an agent on a navigation mesh. The component picks points on the navigation mesh and uses SceneManager to find and follow paths.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/09_NavigationMesh.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class NavMeshComponent extends BABYLON.MeshComponent {\n            private navmesh:BABYLON.AbstractMesh = null;\n            public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {\n                super(owner, scene, tick, propertyBag);\n            }\n            protected start() :void {\n                this.navmesh = this.manager.getNavigationMesh();\n                if (this.navmesh) {\n                    const minimoi = BABYLON.MeshBuilder.CreateBox(\"MiniMoi\", {size: 0.5}, this.scene);\n                    minimoi.material = new BABYLON.StandardMaterial(\"MoiMaterial\", this.scene);\n                    (<BABYLON.StandardMaterial>minimoi.material).diffuseColor = new BABYLON.Color3(1., 0., 0);\n                    minimoi.position = new BABYLON.Vector3(0, 0.25, 0);\n\n                    // Setup point and click demo navigation\n                    const canvas = document.getElementById(\"cvs\");\n                    canvas.addEventListener('click', (evt)=> {\n                        const pickingInfo = this.scene.pick(this.scene.pointerX, this.scene.pointerY, (mesh) => { return (mesh === this.navmesh); });\n                        if (pickingInfo.hit) {\n                            const navpoint = pickingInfo.pickedPoint;\n                            const path = this.manager.findNavigationPath(minimoi.position, navpoint);\n                            if (path != null) {\n                                this.manager.moveNavigationAgent(minimoi, path, 5.0);\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout for Mobile Controls\nDESCRIPTION: Sets up a grid system for positioning mobile control buttons using BabylonJS GUI grid layout functionality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/crossPlatform.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst actionGrid = new Grid();\nactionGrid.addColumnDefinition(0.5);\nactionGrid.addColumnDefinition(0.5);\nactionGrid.addRowDefinition(0.5);\nactionGrid.addRowDefinition(0.5);\nactionContainer.addControl(actionGrid);\n```\n\n----------------------------------------\n\nTITLE: Implementing Looping Playback in Babylon.js\nDESCRIPTION: Demonstrates three different ways to create looping sound playback: setting the loop option when creating the sound, setting the loop property before playing, or using the loop option in the play method. All approaches result in indefinite sound looping.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounce = await BABYLON.CreateSoundAsync(\"bounce\",\n    \"sounds/bounce.wav\",\n    { loop: true }\n);\n\nbounce.play();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounce = await BABYLON.CreateSoundAsync(\"bounce\",\n    \"sounds/bounce.wav\"\n);\n\nbounce.loop = true;\nbounce.play();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounce = await BABYLON.CreateSoundAsync(\"bounce\",\n    \"sounds/bounce.wav\"\n);\n\nbounce.play({ loop: true });\n```\n\n----------------------------------------\n\nTITLE: Initializing GUIColor Constructor in BabylonJS\nDESCRIPTION: Constructor method for creating a new GUIColor element. Takes parameters for ID, options object, GUI manager instance, optional callback function, and optional append flag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiColor.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUIColor(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Applying an IES Light Profile to a SpotLight in Babylon.js\nDESCRIPTION: This code demonstrates how to apply an IES light profile to a SpotLight. IES profiles control how light falls off according to the IES specification, creating more realistic lighting effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlight.iesProfileTexture = new BABYLON.Texture(\"https://assets.babylonjs.com/meshes/EXT_lights_ies/LightProfile.ies\");\n```\n\n----------------------------------------\n\nTITLE: Converting Meshes to Greased Lines in Babylon.js\nDESCRIPTION: Demonstrates how to convert a mesh to Greased Lines, creating a wireframe effect. It uses the MeshesToLines function from GreasedLineTools.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { segments: 32, diameter: 2 }, scene);\nconst sphereLines = BABYLON.CreateGreasedLine(\"sphereLines\", { points: BABYLON.GreasedLineTools.MeshesToLines([sphere]) });\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Skybox Mesh and Material in Babylon.js\nDESCRIPTION: Creates a basic skybox mesh using MeshBuilder and configures its StandardMaterial with disabled backface culling and lighting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 100.0 }, scene);\nconst skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\nskyboxMaterial.backFaceCulling = false;\nskyboxMaterial.disableLighting = true;\nskybox.material = skyboxMaterial;\n```\n\n----------------------------------------\n\nTITLE: Merging Meshes Using a Custom Function - JavaScript\nDESCRIPTION: Provides a custom implementation for merging multiple meshes into a new BABYLON.Mesh by manually combining vertex positions, normals, UVs, colors, indices, and other attributes. Dependencies include Babylon.js and the mesh objects to be merged. Inputs are the name of the new mesh, an array of mesh objects, and the Babylon.js scene. Returns a new merged mesh instance, handling attribute presence and updating world matrices. Outputs a merged mesh; attributes are manually validated and copied.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/mergeMeshes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mergeMeshes = function (meshName, arrayObj, scene) {\n  const arrayPos = [];\n  const arrayNormal = [];\n  const arrayUv = [];\n  const arrayUv2 = [];\n  const arrayColor = [];\n  const arrayMatricesIndices = [];\n  const arrayMatricesWeights = [];\n  const arrayIndice = [];\n  const savedPosition = [];\n  const savedNormal = [];\n  const newMesh = new BABYLON.Mesh(meshName, scene);\n  const UVKind = true;\n  const UV2Kind = true;\n  const ColorKind = true;\n  const MatricesIndicesKind = true;\n  const MatricesWeightsKind = true;\n\n  for (let i = 0; i != arrayObj.length; i++) {\n    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.UVKind])) UVKind = false;\n    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.UV2Kind])) UV2Kind = false;\n    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.ColorKind])) ColorKind = false;\n    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.MatricesIndicesKind])) MatricesIndicesKind = false;\n    if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.MatricesWeightsKind])) MatricesWeightsKind = false;\n  }\n\n  for (let i = 0; i != arrayObj.length; i++) {\n    const ite = 0;\n    const iter = 0;\n    arrayPos[i] = arrayObj[i].getVerticesData(BABYLON.VertexBuffer.PositionKind);\n    arrayNormal[i] = arrayObj[i].getVerticesData(BABYLON.VertexBuffer.NormalKind);\n    if (UVKind) arrayUv = arrayUv.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.UVKind));\n    if (UV2Kind) arrayUv2 = arrayUv2.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.UV2Kind));\n    if (ColorKind) arrayColor = arrayColor.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.ColorKind));\n    if (MatricesIndicesKind) arrayMatricesIndices = arrayMatricesIndices.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.MatricesIndicesKind));\n    if (MatricesWeightsKind) arrayMatricesWeights = arrayMatricesWeights.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.MatricesWeightsKind));\n\n    const maxValue = savedPosition.length / 3;\n\n    arrayObj[i].computeWorldMatrix(true);\n    const worldMatrix = arrayObj[i].getWorldMatrix();\n\n    for (let ite = 0; ite != arrayPos[i].length; ite += 3) {\n      const vertex = BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(arrayPos[i][ite], arrayPos[i][ite + 1], arrayPos[i][ite + 2]), worldMatrix);\n      savedPosition.push(vertex.x);\n      savedPosition.push(vertex.y);\n      savedPosition.push(vertex.z);\n    }\n\n    for (let iter = 0; iter != arrayNormal[i].length; iter += 3) {\n      const vertex = BABYLON.Vector3.TransformNormal(new BABYLON.Vector3(arrayNormal[i][iter], arrayNormal[i][iter + 1], arrayNormal[i][iter + 2]), worldMatrix);\n      savedNormal.push(vertex.x);\n      savedNormal.push(vertex.y);\n      savedNormal.push(vertex.z);\n    }\n\n    const tmp = arrayObj[i].getIndices();\n    for (let it = 0; it != tmp.length; it++) {\n      arrayIndice.push(tmp[it] + maxValue);\n    }\n    arrayIndice = arrayIndice.concat(tmp);\n\n    arrayObj[i].dispose(false);\n  }\n\n  newMesh.setVerticesData(BABYLON.VertexBuffer.PositionKind, savedPosition, false);\n  newMesh.setVerticesData(BABYLON.VertexBuffer.NormalKind, savedNormal, false);\n  if (arrayUv.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.UVKind, arrayUv, false);\n  if (arrayUv2.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.UV2Kind, arrayUv, false);\n  if (arrayColor.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.ColorKind, arrayUv, false);\n  if (arrayMatricesIndices.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.MatricesIndicesKind, arrayUv, false);\n  if (arrayMatricesWeights.length > 0) newMesh.setVerticesData(BABYLON.VertexBuffer.MatricesWeightsKind, arrayUv, false);\n\n  newMesh.setIndices(arrayIndice);\n  return newMesh;\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Combined World Bounding Box for All Child Meshes in Babylon.js (JavaScript)\nDESCRIPTION: Iterates through an array of child meshes (`childMeshes`). In each iteration, it gets the world-space bounding box corners (`meshMin`, `meshMax`) for the current child mesh and updates the overall `min` and `max` vectors using `BABYLON.Vector3.Minimize` and `BABYLON.Vector3.Maximize`. This process finds the bounding box that encompasses all child meshes in world coordinates. Requires `childMeshes` array, initialized `min`/`max` vectors, and `BABYLON.Vector3`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfor(let i=0; i<childMeshes.length; i++){\n        let meshMin = childMeshes[i].getBoundingInfo().boundingBox.minimumWorld;\n        let meshMax = childMeshes[i].getBoundingInfo().boundingBox.maximumWorld;\n\n        min = BABYLON.Vector3.Minimize(min, meshMin);\n        max = BABYLON.Vector3.Maximize(max, meshMax);\n    }\n```\n\n----------------------------------------\n\nTITLE: Bloom Effect Post-Process Chain Implementation\nDESCRIPTION: Creates a chain of post-processes to achieve a bloom effect, including down-sampling, blur, and final composition.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar blurWidth = 1.0;\n\nvar postProcess0 = new BABYLON.PassPostProcess(\"Scene copy\", 1.0, camera);\nvar postProcess1 = new BABYLON.PostProcess(\"Down sample\", \"./Scenes/Customs/postprocesses/downsample\", [\"screenSize\", \"highlightThreshold\"], null, 0.25, camera, BABYLON.Texture.BILINEAR_SAMPLINGMODE);\npostProcess1.onApply = function (effect) {\n  effect.setFloat2(\"screenSize\", postProcess1.width, postProcess1.height);\n  effect.setFloat(\"highlightThreshold\", 0.9);\n};\nvar postProcess2 = new BABYLON.BlurPostProcess(\"Horizontal blur\", new BABYLON.Vector2(1.0, 0), blurWidth, 0.25, camera);\nvar postProcess3 = new BABYLON.BlurPostProcess(\"Vertical blur\", new BABYLON.Vector2(0, 1.0), blurWidth, 0.25, camera);\nvar postProcess4 = new BABYLON.PostProcess(\"Final compose\", \"./Scenes/Customs/postprocesses/compose\", [\"sceneIntensity\", \"glowIntensity\", \"highlightIntensity\"], [\"sceneSampler\"], 1, camera);\npostProcess4.onApply = function (effect) {\n  effect.setTextureFromPostProcess(\"sceneSampler\", postProcess0);\n  effect.setFloat(\"sceneIntensity\", 0.5);\n  effect.setFloat(\"glowIntensity\", 0.4);\n  effect.setFloat(\"highlightIntensity\", 1.0);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a SpriteMap in Babylon.js\nDESCRIPTION: Illustrates how to create a SpriteMap for rendering thousands of animated sprites efficiently. It requires a name, JSON atlas, spritesheet texture, options, and a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprites_introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySpriteMap = new BABYLON.SpriteMap(name, atlasJSON, spriteSheetTexture, options, scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring Exponential Sound Attenuation in BabylonJS\nDESCRIPTION: Example of creating a spatial sound with exponential distance attenuation model and custom rolloff factor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = new BABYLON.Sound(\"music\", \"music.wav\", scene, null, {\n  loop: true,\n  autoplay: true,\n  spatialSound: true,\n  distanceModel: \"exponential\",\n  rolloffFactor: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Input Variables in a WGSL Compute Shader\nDESCRIPTION: Example WGSL code demonstrating the declaration of input variables using `@group` and `@binding` decorators. This snippet defines a writable storage texture (`dest`), a texture sampler (`srcSampler`), and a readable texture (`src`), specifying their resource binding locations within the WebGPU pipeline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_3\n\nLANGUAGE: wgsl\nCODE:\n```\n@group(0) @binding(0) var dest : texture_storage_2d<rgba8unorm, write>;\n@group(0) @binding(1) var srcSampler : sampler;\n@group(0) @binding(2) var src : texture_2d<f32>;\n```\n\n----------------------------------------\n\nTITLE: Setting Light Range for Point and Spot Lights in Babylon.js\nDESCRIPTION: Demonstrates setting the maximum distance a point or spot light's influence reaches using the `range` property. This helps control the light's falloff and potential performance impact.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlight.range = 100;\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Speed Limit Gradient Over Lifetime (Value Ranges) in Babylon.js\nDESCRIPTION: Demonstrates using `addLimitVelocityGradient` with three arguments to define a range for the speed limit at different points in the particle's lifetime. The actual speed limit will be randomly chosen within the specified range at each time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addLimitVelocityGradient(0, 9, 10); //speed limit range at start of particle lifetime\nparticleSystem.addLimitVelocityGradient(0.4, 2, 3); //speed limit range at 2/5 of duration of particle system\nparticleSystem.addLimitVelocityGradient(1.0, 0.1, 0.2); //speed limit range at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Initializing Camera Controls in Babylon.js\nDESCRIPTION: Basic camera control setup showing how to set the active camera and attach it to the canvas. Demonstrates both detailed and simplified approaches.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//First, set the scene's activeCamera... to be YOUR camera.\nscene.activeCamera = myCamera;\n// Then attach the activeCamera to the canvas.\n//Parameters: canvas, noPreventDefault\nscene.activeCamera.attachControl(canvas, true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyCamera.attachControl(canvas);\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Custom Extrusions with MeshBuilder (JavaScript)\nDESCRIPTION: Demonstrates creating a custom extruded shape using `BABYLON.MeshBuilder.ExtrudeShapeCustom` with an options object. Requires `shape` (Vector3 array with z=0) and `path` (Vector3 array) defining the extrusion axis. Allows dynamic scaling and rotation along the path via `scaleFunction` and `rotationFunction`, which accept index and distance parameters. Also shows how to update the mesh by providing the existing mesh instance in the `options` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/custom_extrude.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst options = {\n  shape: myPoints, //vec3 array with z = 0,\n  path: myPath, //vec3 array\n  rotationFunction: rotFn,\n  scaleFunction: scaleFn,\n  updatable: true,\n};\n\nlet extruded = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"ext\", options, scene); //scene is optional and defaults to the current scene\n\n// Update\noptions.shape = newShape;\noptions.path = newPath;\noptions.instance = extruded;\noptions.rotationFunction = newRotFn;\noptions.scaleFunction = newScaleFn;\nextruded = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"ext\", options); //No scene parameter when using instance\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Reusing Physics Shapes in Babylon.js\nDESCRIPTION: Demonstrates how to create a physics shape (sphere) and reuse it for multiple bodies. This approach improves performance when multiple bodies share similar geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeSphere(\n  new BABYLON.Vector3(0,0,0), // center of the sphere in local space\n  0.5, // radius of the sphere\n  scene // containing scene\n);\nbody.shape = shape;\nbody2.shape = shape;\nbody3.shape = shape;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Building Babylon.js Project with Vite\nDESCRIPTION: Commands to build and preview a Babylon.js project using Vite. This process creates a bundled version of the project in the 'dist' folder, ready for deployment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/usingVite.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Creating Mesh Instances in Babylon.js\nDESCRIPTION: Demonstrates how to import a mesh and create multiple instances of it. The root mesh is made invisible while 100 instances are created with unique names. Each instance can have different position, rotation, and scaling properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/instances.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In this case we're loading our mesh from an external source.\nBABYLON.ImportMeshAsync(\"https://www.babylonjs.com/assets/Tree/tree.babylon\", scene).then(function (result) {\n  var mesh = result.meshes[0];\n  // Make the \"root\" mesh not visible. The instanced versions of it that we\n  // create below will be visible.\n  mesh.isVisible = false;\n  for (let index = 0; index < 100; index++) {\n    var newInstance = mesh.createInstance(\"i\" + index);\n    // Here you could change the properties of your individual instance,\n    // for example to form a diagonal line of instances:\n    //  newInstance.position.x = index;\n    //  newInstance.position.z = index;\n    // See below for more details on what can be changed.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking WebXR Session Support\nDESCRIPTION: Demonstrates two methods to check if WebXR and specific session modes are supported by the browser\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Static:\nconst supported = await WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\");\nif (supported) {\n  // xr available, session supported\n}\n\n// or:\n\nconst supported = await sessionManager.isSessionSupportedAsync(\"immersive-vr\");\nif (supported) {\n  // xr available, session supported\n}\n```\n\n----------------------------------------\n\nTITLE: Building PCS Mesh Asynchronously with Surface Points\nDESCRIPTION: Demonstrates how to add surface points to a PCS, build it asynchronously, and properly dispose of the source mesh after completion. Shows the pattern for safe resource management when working with PCS construction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npcs.addSurfacePoints(box, 10000, BABYLON.PointColor.Color);\npcs.addPoints(10000, myFunc);\npcs.buildMeshAsync().then(() => box.dispose());\n```\n\n----------------------------------------\n\nTITLE: Creating ShaderMaterial from Script Tags in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates creating a `BABYLON.ShaderMaterial` by referencing shader code embedded in HTML `<script>` tags. Instead of shader names, it uses `vertexElement` and `fragmentElement` properties pointing to the `id` attributes of the corresponding script tags. Attributes and uniforms are declared similarly to the `ShadersStore` method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst shaderMaterial = new BABYLON.ShaderMaterial(\n  \"shader\",\n  scene,\n  {\n    vertexElement: \"vertexShaderCode\",\n    fragmentElement: \"fragmentShaderCode\",\n  },\n  {\n    attributes: [\"position\", \"normal\", \"uv\"],\n    uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\"],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Translucency in PBR\nDESCRIPTION: Shows how to enable and configure translucency effects in a PBR material for dense mediums like milk.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\npbr.metallic = 0;\npbr.roughness = 0;\n\npbr.subSurface.isTranslucencyEnabled = true;\npbr.subSurface.translucencyIntensity = 0.8;\n```\n\n----------------------------------------\n\nTITLE: Making a Custom Mesh Updatable in Babylon.js\nDESCRIPTION: This snippet shows how to make a custom mesh updatable by passing a second parameter with value 'true' when applying vertex data. This allows the mesh to be modified after creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvertexData.applyToMesh(customMesh, true);\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Key Press Events in Babylon.js\nDESCRIPTION: Implementing an action manager to handle multiple key presses simultaneously for car steering. The code tracks the state of keys A, D, and Space using an associative array created from a map object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Driven.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  var map ={}; //object for multiple key presses\n  scene.actionManager = new BABYLON.ActionManager(scene);\n\n  scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {\n    map[evt.sourceEvent.key] = evt.sourceEvent.type == \"keydown\";\n  }));\n\n  scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {\n    map[evt.sourceEvent.key] = evt.sourceEvent.type == \"keydown\";\n  }));\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Attaching a WebVR Camera - Babylon.js JavaScript\nDESCRIPTION: Creates a WebVRFreeCamera at a designated position in the scene, attaches it to the rendering canvas, and enables user controls. Utilizes Babylon.js camera APIs and expects a valid canvas and scene object. The camera provides six-degrees-of-freedom (6DoF) movement and is compatible with VR hardware that supports WebVR. Input parameters are camera ID, position, and scene. Output is a VR-capable camera object, attached and ready for control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/vr_game.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar camera = new BABYLON.WebVRFreeCamera(\"Camera\", new BABYLON.Vector3(0, 1, 0), scene);\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Constructing Exterior Wall Geometry in Babylon.js\nDESCRIPTION: This snippet builds the exterior wall geometry, including positions, indices, and UVs. It handles wall corners, door openings, and window placements. The code also calculates UV coordinates based on exterior UV settings and wall dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwallData.positions = [];\n\nwallData.positions.push(outerBaseCorners[w].x, outerBaseCorners[w].y, outerBaseCorners[w].z);\nwallData.positions = wallData.positions.concat(doorData);\t\t\t\nwallData.positions.push(outerBaseCorners[w + 1].x, outerBaseCorners[w + 1].y, outerBaseCorners[(w + 1) % nbWalls].z);\nwallData.positions.push(outerTopCorners[w + 1].x, outerTopCorners[w + 1].y, outerTopCorners[(w + 1) % nbWalls].z);\nwallData.positions.push(outerTopCorners[w].x, outerTopCorners[w].y, outerTopCorners[w].z);\nwallData.positions = wallData.positions.concat(windowData);\n\npolygonTriangulation._points.elements.forEach(function (p)  {\n\tif (p.x == 0) {\n\t\tuvx = exteriorUV.x;\n\t}\n\telse if (wallLength - p.x < 0.000001) {\n\t\tuvx = exteriorUV.x + (wallDiff + p.x) * (exteriorUV.z - exteriorUV.x) / (maxL + wallDiff)\n\t}\n\telse {\n\t\tuvx = exteriorUV.x + (0.5 * wallDiff + p.x) * (exteriorUV.z - exteriorUV.x) / (maxL + wallDiff);\n\t}\n\tuvy = exteriorUV.y + p.y * (exteriorUV.w - exteriorUV.y) / height;\n\tuvs.push(uvx, uvy);\t\t\t\t\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scene with Babylon.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic 3D scene using Babylon.js. It sets up a scene with a free camera, hemispheric light, a sphere, and a ground plane. The scene includes camera controls and positioning of objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/templates/basicTemplates/basicJSPG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst createScene = function () {\n    // Creates a basic Babylon Scene object\n    const scene = new BABYLON.Scene(engine);\n    // Creates and positions a free camera\n    const camera = new BABYLON.FreeCamera(\"camera1\", \n        new BABYLON.Vector3(0, 5, -10), \n        scene);\n    // Targets the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n    // Attaches the camera to the canvas\n    camera.attachControl(canvas, true);\n    // Creates a light, aiming 0,1,0\n    const light = new BABYLON.HemisphericLight(\"light\", \n        new BABYLON.Vector3(0, 1, 0), \n        scene);\n    // Dim the light a small amount 0 - 1\n    light.intensity = 0.7;\n    // Built-in 'sphere' shape.\n    const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", \n        {diameter: 2, segments: 32}, \n        scene);\n    // Move phere upward 1/2 its height\n    sphere.position.y = 1;\n    // Built-in 'ground' shape.\n    const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", \n        {width: 6, height: 6}, \n        scene);\n    return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing an Immutable Solid Particle System in Babylon.js - JavaScript\nDESCRIPTION: Creates an immutable Solid Particle System (SPS) by setting the\\_updatable\\_option to false in the constructor. This disables further updates of the mesh and prevents caching of particle data. Prerequisites: Babylon.js library, scene and model objects set up. Input parameters are the name (string), scene (BABYLON.Scene), and an options object. The resulting SPS does not require calls to\\_setParticles()\\_or\\_initParticles()\\_and only needs initialization once before rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar SPS = new BABYLON.SolidParticleSystem(name, scene, { updatable: false });\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Texture in Babylon.js\nDESCRIPTION: Creates a new dynamic texture with specified name, size options, and scene. The options parameter can be a canvas, an object with width and height properties, or a single number for both dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myDynamicTexture = new BABYLON.DynamicTexture(name, option, scene);\n```\n\n----------------------------------------\n\nTITLE: Quick Animation Creation Example\nDESCRIPTION: Shows how to create a simple animation using the CreateAndStartAnimation helper function to scale a box.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Animation.CreateAndStartAnimation(\"boxscale\", box1, \"scaling.x\", 30, 120, 1.0, 1.5);\n```\n\n----------------------------------------\n\nTITLE: Animating VRM Model in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to animate different parts of a VRM model using quaternion rotations. It manipulates shoulders, upper legs, and lower legs to create a walking-like animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_VRM.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// example code\nvrmManager.humanoidBone.leftShoulder.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin((Math.PI / 4) * (elapsedTime / 200)), 0, Math.PI / 3.5);\nvrmManager.humanoidBone.rightShoulder.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin(Math.PI + (Math.PI / 4) * (elapsedTime / 200)), 0, -Math.PI / 3.5);\nvrmManager.humanoidBone.leftUpperLeg.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin((Math.PI / 4) * (elapsedTime / 200)), 0, 0);\nvrmManager.humanoidBone.rightUpperLeg.rotationQuaternion = Quaternion.FromEulerAngles(Math.sin(Math.PI + (Math.PI / 4) * (elapsedTime / 200)), 0, 0);\nvrmManager.humanoidBone.leftLowerLeg.rotationQuaternion = Quaternion.FromEulerAngles(-Math.PI / 6, 0, 0);\nvrmManager.humanoidBone.rightLowerLeg.rotationQuaternion = Quaternion.FromEulerAngles(-Math.PI / 6, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Mesh with Custom Dimensions in Babylon.js\nDESCRIPTION: Creates a box mesh with specific width, height, and depth using the CreateBox method from MeshBuilder. This approach sets the dimensions during creation rather than scaling afterward.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/placement.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", {width: 2, height: 1.5, depth: 3})\n```\n\n----------------------------------------\n\nTITLE: Using MeshExploder with Babylon.js Viewer and onModelLoadedObservable - JavaScript\nDESCRIPTION: This sample shows how to integrate MeshExploder functionality within the Babylon.js Viewer context. By listening to the onModelLoadedObservable, it responds when models finish loading, instantiates MeshExploder for the loaded mesh group, and immediately explodes the meshes. The code depends on BabylonViewer.viewerManager and assumes the model provides both a rootMesh and a meshes array. Intended for web viewer customizations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/meshExploder.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBabylonViewer.viewerManager.getViewerPromiseById(\"babylon-viewer\").then(function (viewer) {\n  viewerObservables(viewer);\n});\nlet newExplosion;\nfunction viewerObservables(viewer) {\n  viewer.onModelLoadedObservable.add(function (model) {\n    model.rootMesh.getScene().executeWhenReady(function () {\n      newExplosion = new BABYLON.MeshExploder(model.meshes, model.meshes[0]);\n      newExplosion.explode(2);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Spark Effects in BabylonJS\nDESCRIPTION: Animation loop that updates the dashOffset property of multiple spark lines to create moving spark effects. Uses scene animation ratio for smooth movement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_advanced/examples.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onBeforeRenderObservable.add(() => {\n    const animRatio = scene.getAnimationRatio()\n    for (let i = 0; i < sparkCount; i++) {\n        sparks[i].line.greasedLineMaterial.dashOffset += sparks[i].speed * animRatio\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Billboard Rendering in Babylon.js ParticleSystem - JavaScript\nDESCRIPTION: Sets the isBillboardBased property to false so that particles no longer always face the camera. Instead, they will align according to their own velocity direction, which can be useful for more physically accurate or stylized effects. This property applies globally to all particles in the system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/ramps_and_blends.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.isBillboardBased = false;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Material Setup with Multiple Fresnel Parameters in Babylon.js\nDESCRIPTION: Configures a StandardMaterial with reflection, emissive, and opacity Fresnel parameters for creating a realistic glass-like effect. This example shows how to combine multiple Fresnel parameters to achieve complex visual effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/fresnelParameters.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.reflectionTexture = new BABYLON.CubeTexture(\"Scenes/Customs/skybox/TropicalSunnyDay\", scene);\nmaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\nmaterial.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\nmaterial.alpha = 0.2;\nmaterial.specularPower = 16;\n\n// Fresnel\nmaterial.reflectionFresnelParameters = new BABYLON.FresnelParameters();\nmaterial.reflectionFresnelParameters.bias = 0.1;\n\nmaterial.emissiveFresnelParameters = new BABYLON.FresnelParameters();\nmaterial.emissiveFresnelParameters.bias = 0.6;\nmaterial.emissiveFresnelParameters.power = 4;\nmaterial.emissiveFresnelParameters.leftColor = BABYLON.Color3.White();\nmaterial.emissiveFresnelParameters.rightColor = BABYLON.Color3.Black();\n\nmaterial.opacityFresnelParameters = new BABYLON.FresnelParameters();\nmaterial.opacityFresnelParameters.leftColor = BABYLON.Color3.White();\nmaterial.opacityFresnelParameters.rightColor = BABYLON.Color3.Black();\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Background Color using new Color3 in Babylon.js\nDESCRIPTION: This snippet demonstrates how to set the background color of a Babylon.js scene using the `clearColor` property. It creates a new `BABYLON.Color3` object with specific RGB values (0.5, 0.8, 0.5) to define the color. This property only affects the visual background and is not used in lighting calculations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/environment_introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.clearColor = new BABYLON.Color3(0.5, 0.8, 0.5);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Particle Velocity Updates by Reusing Objects in Babylon.js (JavaScript)\nDESCRIPTION: Provides an optimized version of the velocity update that reuses a pre-allocated Vector3, preventing excessive object creation. Enhances runtime performance and minimizes garbage collection interruptions when updating large numbers of particles. Assumes 'pcs' is a valid Babylon.js particle system object and 'accel' remains constant for all updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar accel = new BABYLON.Vector3(0, 0.5, 0);\\npcs.updateParticle = function (particle) {\\n    particle.velocity.addInPlace(accel);\\n    // ...\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Spritesheet Cell Properties for Particle Animation - Babylon.js JavaScript\nDESCRIPTION: Sets parameters on the ParticleSystem to specify individual cell dimensions and ID range for animation, as well as the frame change speed. spriteCellHeight and spriteCellWidth define the size of each sprite, startSpriteCellID and endSpriteCellID set which cells to use, and spriteCellChangeSpeed alters how quickly the animation frames advance per particle. Assumes the ParticleSystem and its texture are already initialized, and values should match the actual spritesheet layout.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/animation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.spriteCellHeight = 64;\nparticleSystem.spriteCellWidth = 64;\nparticleSystem.startSpriteCellID = 0;\nparticleSystem.endSpriteCellID = 9;\nparticleSystem.spriteCellChangeSpeed = 4; // default is one\n```\n\n----------------------------------------\n\nTITLE: Initializing WebXR Camera in Babylon.js\nDESCRIPTION: Creates a new WebXR camera instance that requires an XR Session Manager. The camera's initial position is determined by real-world information from the first frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRCamera.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrCamera = new WebXRCamera(\"nameOfCamera\", scene, xrSessionManager);\n```\n\n----------------------------------------\n\nTITLE: Creating Submesh Octree for Collision and Picking Optimization in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create or update an octree for submeshes of a complex mesh. This optimization can speed up collision detection and picking for meshes with many vertices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeOctrees.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.createOrUpdateSubmeshesOctree(capacity, maxDepth)\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Bounding Info from Min/Max Vectors in Babylon.js (JavaScript)\nDESCRIPTION: Updates the bounding information of the 'sphere' mesh by creating a new `BABYLON.BoundingInfo` object using the calculated combined minimum (`newMin`) and maximum (`newMax`) vectors. This effectively resizes the sphere's conceptual bounding box to encompass both the original sphere and the ground mesh based on the previous calculations. Requires 'sphere' to be a mesh object and `newMin`, `newMax` to be `BABYLON.Vector3` instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.setBoundingInfo(new BABYLON.BoundingInfo(newMin, newMax));\n```\n\n----------------------------------------\n\nTITLE: Adding a Mesh Task to AssetsManager in Babylon.js (JavaScript)\nDESCRIPTION: Adds a mesh loading task to the assets manager, configuring it to load a specific mesh file. The parameters include a task name, mesh names to import, the root URL, and the file name. Dependencies: Babylon.js, an AssetsManager instance. On completion, loaded mesh data becomes accessible through the task.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst meshTask = assetsManager.addMeshTask(\"skull task\", \"\", \"scenes/\", \"skull.babylon\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Blur PostProcess in Babylon.js\nDESCRIPTION: Creates a directional blur effect using kernel-based blur with configurable parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.BlurPostProcess(\"Horizontal blur\", new BABYLON.Vector2(1.0, 0), kernel, 0.25, camera);\n```\n\n----------------------------------------\n\nTITLE: Creating an Octree for Scene Optimization in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create or update a selection octree for a scene. The function accepts two parameters: capacity (maximum number of meshes per leaf) and maxDepth (maximum sub-levels of the octree).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeOctrees.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar octree = scene.createOrUpdateSelectionOctree(capacity, maxDepth)\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Rendering Pipeline in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create an instance of the StandardRenderingPipeline in Babylon.js. It includes parameters for the pipeline name, scene, rendering ratio, original post-process, and cameras to be attached.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipeline = new BABYLON.StandardRenderingPipeline(\n    \"standard\", // The name of the pipeline\n    scene, // The scene instance\n    1.0, // The rendering pipeline ratio\n    null, // The original post-process that the pipeline will be based on\n    [camera] // The list of cameras to be attached to\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Mesh Vertex Positions with updateMeshPositions in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates using the updateMeshPositions method to modify the vertex positions of an existing mesh (e.g., a Box) after creation. The mesh must be created with 'updatable: true'. This method takes a 'positionFunction' callback, which receives the mesh's vertex position array and should modify it directly, and a boolean 'computeNormals' to indicate whether normals should be recalculated after the update.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", { size: 5.0, updatable: true }, scene);\nconst positionFunction = function (positions) {\n  // modify positions array values here\n};\nbox.updateMeshPositions(positionFunction, true);\n```\n\n----------------------------------------\n\nTITLE: Creating an Updatable SPS with Multi-Material Support in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create an updatable Solid Particle System with multi-material support, set materials, update particle properties, and compute submeshes for material application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_material.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, {\n  enableMultiMaterial: true\n});\nsps.addShape(model1, 300);\nsps.addShape(model2, 300);\nsps.addShape(model3, 300);\nsps.buildMesh();\n\n// mat0, mat1, mat2 are Material objects\nsps.setMultiMaterial([mat0, mat1, mat2]);\n\n// the particle materialIndex are set in the call to updateParticle\n// while the mesh and the multimaterial are already built\nsps.updateParticle = initFunction;\nsps.setParticles(); // updates the particle positions\nsps.computeSubMeshes(); // actually computes the submeshes and materials\n```\n\n----------------------------------------\n\nTITLE: Implementing Mesh Movement with Collisions in Babylon.js\nDESCRIPTION: Demonstrates how to move a mesh with collision detection, including gravity and character movement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst speedCharacter = 8;\nconst gravity = 0.15;\nconst character = Your mesh;\n\ncharacter.ellipsoid = new BABYLON.Vector3(0.5, 1.0, 0.5);\ncharacter.ellipsoidOffset = new BABYLON.Vector3(0, 1.0, 0);\n\nconst forwards = new BABYLON.Vector3(parseFloat(Math.sin(character.rotation.y)) / speedCharacter, gravity, parseFloat(Math.cos(character.rotation.y)) / speedCharacter);\nforwards.negate();\ncharacter.moveWithCollisions(forwards);\n// or\nconst backwards = new BABYLON.Vector3(parseFloat(Math.sin(character.rotation.y)) / speedCharacter, -gravity, parseFloat(Math.cos(character.rotation.y)) / speedCharacter);\ncharacter.moveWithCollisions(backwards);\n```\n\n----------------------------------------\n\nTITLE: Creating an SPS with Particle Intersection Support in JavaScript\nDESCRIPTION: Initializes a Solid Particle System with particle intersection enabled. This is necessary for detecting collisions between particles, as the SPS is physics agnostic by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_physics.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar SPS = new SolidParticleSystem(\"sps\", scene, { particleIntersection: true });\n```\n\n----------------------------------------\n\nTITLE: Enabling Scene and Camera Collisions in Babylon.js\nDESCRIPTION: Activates collision detection for both the scene and camera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.collisionsEnabled = true;\ncamera.checkCollisions = true;\n```\n\n----------------------------------------\n\nTITLE: Creating a PBR Specular Glossiness Material in Babylon.js\nDESCRIPTION: This code demonstrates setting up a PBRSpecularGlossinessMaterial with diffuse color, specular color, glossiness, and environment map for reflections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRSpecularGlossinessMaterial(\"pbr\", scene);\npbr.diffuseColor = new BABYLON.Color3(1.0, 0.766, 0.336);\npbr.specularColor = new BABYLON.Color3(1.0, 0.766, 0.336);\npbr.glossiness = 0.4;\npbr.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\"/textures/environment.dds\", scene);\n```\n\n----------------------------------------\n\nTITLE: Customizing the Babylon.js Audio Engine Unmute Button with CSS (JavaScript)\nDESCRIPTION: Initializes the Babylon.js audio engine asynchronously. It then creates a `<style>` HTML element dynamically using JavaScript's DOM manipulation methods. CSS rules targeting the `#babylonUnmuteButton` ID are added to this style element to change its position (bottom left), size (scaled by 2), and hover effect (scaled by 2.5). Finally, the style element is appended to the document's `<head>`, applying the custom styles. Depends on the Babylon.js library (`BABYLON`), an initialized `audioEngine`, and standard browser DOM APIs (`document.createElement`, `document.createTextNode`, `appendChild`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst audioEngine = await BABYLON.CreateAudioEngineAsync();\n\nconst unmuteButtonStyle = document.createElement(\"style\");\n\nunmuteButtonStyle.appendChild(\n    document.createTextNode(`\n        #babylonUnmuteButton {\n            top: unset;\n            bottom: 35px;\n            margin-left: 50px;\n            transform: scale(2);\n        }\n        #babylonUnmuteButton:hover {\n            transform: scale(2.5);\n        }\n    `)\n);\n\ndocument.head.appendChild(unmuteButtonStyle);\n```\n\n----------------------------------------\n\nTITLE: Creating a Lathe Mesh with MeshBuilder in Babylon.js\nDESCRIPTION: Demonstrates the recommended method for creating a lathe mesh using `BABYLON.MeshBuilder.CreateLathe`. It takes a name, an options object specifying parameters like shape (required), radius, tessellation, arc, cap, etc., and an optional scene object (defaults to the current scene). The options object allows detailed configuration of the resulting mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/lathe.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lathe = BABYLON.MeshBuilder.CreateLathe(\"lathe\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Opening URL in Current Window\nDESCRIPTION: Navigates to a URL in the current browser window when triggered by an event in Babylon.js by setting window.location.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/OpenUrl.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.location = URL\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing XmlLoader with Babylon.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate an AdvancedDynamicTexture for fullscreen rendering and initialize the XML loader (XmlLoader) for Babylon.js GUIs. Dependencies include the Babylon.js and Babylon.GUI libraries. The advancedTexture is necessary to display GUI controls, and XmlLoader is used to parse and create GUI elements from XML definitions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nconst xmlLoader = new BABYLON.GUI.XmlLoader();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Collision-Induced Speed Increase in Babylon.js\nDESCRIPTION: Babylon.js Playground demonstrating how sequential collisions, based on Newtonian physics for elastic particles, can cause a particle's speed to increase significantly, potentially exceeding the threshold for reliable collision detection. Uses four sets of particles to illustrate the additive effect on velocity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Slow_Collide.md#2025-04-23_snippet_0\n\nLANGUAGE: babylonjs-playground\nCODE:\n```\n<Playground id=\"#1DJ7RH\" title=\"Collision Increases Speed\" description=\"Shows how collsions increase speed.\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying and Customizing Images with Babylon.js GUI Image Control - JavaScript\nDESCRIPTION: This snippet outlines adding and customizing an Image control in a Babylon.js GUI context, including properties for source image manipulation, stretch modes, and sprite sheet animation. Required dependencies are the Babylon GUI library and an accessible image file (JPG, PNG, or SVG for advanced usage). Parameters such as stretch, sourceLeft, sourceTop, sourceWidth, and sourceHeight define how the image is fit and cropped. Enabling autoScale adjusts control size to the image. When working with animation sheets, cellId, cellWidth, and cellHeight are used for frame-based animation, and detectPointerOnOpaqueOnly toggles alpha-based pointer interaction. Outputs are dynamic, interactive image elements, with potential constraints based on image format and browser compatibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Playground: #XCPP9Y#7\n// Simple example showing how to add an Image control to your scene.\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nvar image = new BABYLON.GUI.Image(\"myImage\", \"path/to/myimage.jpg\");\nimage.stretch = BABYLON.GUI.Image.STRETCH_FILL; // or STRETCH_NONE / STRETCH_UNIFORM / STRETCH_EXTEND / STRETCH_NINE_PATCH\nimage.autoScale = true;\nimage.sourceLeft = 0;\nimage.sourceTop = 0;\nimage.sourceWidth = 100;\nimage.sourceHeight = 100;\nadvancedTexture.addControl(image);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Playground: #K60448#10\n// Example using a sprite sheet with Image control.\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nvar spriteImage = new BABYLON.GUI.Image(\"sprite\", \"path/to/sprite.png\");\nspriteImage.cellId = 0;\nspriteImage.cellWidth = 64;\nspriteImage.cellHeight = 64;\nspriteImage.stretch = BABYLON.GUI.Image.STRETCH_FILL;\nadvancedTexture.addControl(spriteImage);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Playground: #E3F1B8\n// Using detectPointerOnOpaqueOnly to trigger pointer events only on opaque pixels.\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nvar img = new BABYLON.GUI.Image(\"opaqueImg\", \"path/to/transparent.png\");\nimg.detectPointerOnOpaqueOnly = true;\nadvancedTexture.addControl(img);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Playground: #E5CARD\n// Example showing batch loading of SVG icons from an icon sheet.\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nvar svgImage = new BABYLON.GUI.Image(\"icon\", \"path/to/icons.svg#icon-id\");\nsvgImage.onSVGAttributesComputedObservable.add(function() {\n    // Handle attribute changes after SVG icon loaded\n});\nadvancedTexture.addControl(svgImage);\n```\n\n----------------------------------------\n\nTITLE: Defining Default VirtualKeyboard Layout via addKeysRow in Babylon.js (JavaScript)\nDESCRIPTION: This code shows the equivalent implementation of the `CreateDefaultLayout` static method. It involves multiple calls to `addKeysRow` to define the standard rows of a QWERTY-like keyboard, including numbers, letters, punctuation, and special keys like backspace (\\u2190), enter (\\u21B5), shift (\\u21E7), and a wider spacebar.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\naddKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\naddKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\naddKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\naddKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\naddKeysRow([\" \"], [{ width: \"200px\" }]);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a VR Reticle Mesh - Babylon.js JavaScript\nDESCRIPTION: Creates a sphere mesh to serve as a VR reticle in the scene. Utilizes Babylon.js MeshBuilder and StandardMaterial APIs to generate a small, non-pickable, color-indicating mesh anchored in front of the camera. Dependencies include Babylon.js core, a valid scene object, and access to MeshBuilder and StandardMaterial. Parameters include geometry (segments and diameter) and material properties affecting visibility and responsiveness. Input is a scene; output is a mesh positioned at z=2, not interactable, with emissive red color by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/vr_game.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*Sphere reticle*/\nvar reticle = BABYLON.MeshBuilder.CreateSphere(\"reticle\", { segments: 10, diameter: 0.03 }, scene);\nvar retmat = new BABYLON.StandardMaterial(\"reticalmaterial\", scene);\nretmat.emissiveColor = BABYLON.Color3.Red();\nretmat.specularColor = BABYLON.Color3.Black();\nreticle.material = retmat;\nreticle.isPickable = false;\nreticle.position.z = 2;\n```\n\n----------------------------------------\n\nTITLE: Creating Flat-Shaded Sphere and Applying Shader Material in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates creating a sphere mesh using `BABYLON.MeshBuilder.CreateSphere` within a Babylon.js `scene`. Crucially, `convertToFlatShadedMesh()` is called to ensure each facet has unique normals, which is necessary for the vertex shader's expansion logic. A pre-defined `shaderMaterial` (containing the custom vertex and fragment shaders) is then assigned to the sphere's material property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing2.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 10 }, scene);\nsphere.convertToFlatShadedMesh();\n\nsphere.material = shaderMaterial;\n```\n\n----------------------------------------\n\nTITLE: Applying Textures to Materials in Babylon.js\nDESCRIPTION: Sets diffuse, specular, emissive, and ambient textures on a StandardMaterial. Textures are created from image files and can be applied to different aspects of the material's appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materials_introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMaterial = new BABYLON.StandardMaterial(\"myMaterial\", scene);\n\nmyMaterial.diffuseTexture = new BABYLON.Texture(\"PATH TO IMAGE\", scene);\nmyMaterial.specularTexture = new BABYLON.Texture(\"PATH TO IMAGE\", scene);\nmyMaterial.emissiveTexture = new BABYLON.Texture(\"PATH TO IMAGE\", scene);\nmyMaterial.ambientTexture = new BABYLON.Texture(\"PATH TO IMAGE\", scene);\n\nmesh.material = myMaterial;\n```\n\n----------------------------------------\n\nTITLE: Defining Fresnel Parameters in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Specifies how to represent Fresnel parameters for materials in Babylon.js using JSON. Fields govern the effect of lighting and angles on surface appearance. Expected input is a JSON object with boolean and float/color fields, used as a sub-object of materials. There are no external dependencies other than being referenced by a valid material object. Fields must be present to control all parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"isEnabled\\\": boolean,\\n\\t\\\"leftColor\\\": color3,\\n\\t\\\"rightColor\\\": color3,\\n\\t\\\"bias\\\": float,\\n\\t\\\"power\\\": float\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inner and Outer Glow for Highlights\nDESCRIPTION: Shows how to enable or disable inner and outer glow effects on different HighlightLayers, allowing for more control over the highlight appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Add the highlight layer.\nconst hl1 = new BABYLON.HighlightLayer(\"hl1\", scene);\nhl1.addMesh(sphere, BABYLON.Color3.White());\nhl1.outerGlow = false;\n\nconst hl2 = new BABYLON.HighlightLayer(\"hl2\", scene);\nhl2.addMesh(ground, BABYLON.Color3.Red());\nhl2.innerGlow = false;\n```\n\n----------------------------------------\n\nTITLE: Creating Box Shape in BabylonJS\nDESCRIPTION: Creates a physics box shape with center point, rotation, and dimensions. Suitable for flat objects and regular geometric shapes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeBox(\n    new BABYLON.Vector3(0, 0, 0),        // center of the box\n    new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\n    new BABYLON.Vector3(1, 1, 1),        // dimensions of the box\n    scene                                // scene of the shape\n);\n```\n\n----------------------------------------\n\nTITLE: Forcing Use of Diffuse Color in Volumetric Light Scattering - Babylon.js - JavaScript\nDESCRIPTION: Configures the effect to render using the mesh's diffuse color instead of its diffuse texture by setting useDiffuseColor to true, then sets the mesh material's diffuseColor. Expects the mesh material to exist. Applies the specified color (e.g., green) for light scattering, overriding the texture if present. Used for cases when material.diffuseTexture is absent or color is preferred.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvls.useDiffuseColor = true; // False as default\nvls.mesh.material.diffuseColor = new BABYLON.Color3(0.0, 1.0, 0.0);\n```\n\n----------------------------------------\n\nTITLE: PolygonMeshBuilder Wall Construction Method\nDESCRIPTION: Implementation of wallBuilder method for PolygonMeshBuilder class that generates wall geometry based on two wall points. Handles position calculation and triangulation using earcut algorithm.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.PolygonMeshBuilder.prototype.wallBuilder = function (w0, w1) {\n\tvar positions = [];\n\tvar iuvs = [];\n\tvar euvs = [];\n\tvar icolors = [];\n\tvar ecolors = [];\n\tvar direction = w1.corner.subtract(w0.corner).normalize();\n\tvar angle = Math.acos(direction.x);\n\tif(direction.z !=0) {\n\t\tangle *= direction.z/Math.abs(direction.z);\n\t}\t\n\tthis._points.elements.forEach(function (p) {\n\t\tpositions.push(p.x * Math.cos(angle) + w0.corner.x, p.y, p.x * Math.sin(angle) + w0.corner.z);\n\t});\n\tvar indices = [];\t\t\n\tvar res = earcut(this._epoints, this._eholes, 2);\n\tfor (let i = res.length; i > 0; i--) {\n\t\tindices.push(res[i - 1]);\n\t};\t\t\t\n\treturn {positions: positions, indices: indices};\n};\n```\n\n----------------------------------------\n\nTITLE: Increasing Mesh Vertices for Soft Body\nDESCRIPTION: Method to increase the number of vertices in a mesh to improve soft body deformation simulation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.increaseVertices(n);\n```\n\n----------------------------------------\n\nTITLE: Injecting Shadow Depth Code Early in CustomMaterial Fragment Shader (JavaScript/GLSL)\nDESCRIPTION: Demonstrates injecting the shadow depth fragment code early within a Babylon.js `CustomMaterial`'s fragment shader using `Fragment_MainBegin`. The GLSL code snippet inside the template literal performs custom discard logic and then uses `#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW` and `#define SHADOWDEPTH_FRAGMENT` to trigger the injection of shadow code at that specific point. This optimizes rendering by executing shadow logic and returning early, skipping potentially expensive lighting and color calculations that follow.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nmat.Fragment_MainBegin(`\n    float n = texture2D( noise, vUv ).x - dissolve;\n    if (n < 0.0) { discard; }\n    #define SHADOWDEPTH_SOFTTRANSPARENTSHADOW\n    #define SHADOWDEPTH_FRAGMENT\n`);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for BabylonJS\nDESCRIPTION: Basic TypeScript configuration for a BabylonJS project, specifying module system and target JavaScript version.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"module\": \"esNext\",\n        \"target\": \"es5\",\n        \"moduleResolution\": \"node\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Ray Module in BabylonJS\nDESCRIPTION: Instructions for importing the Ray module and initializing it by calling the AddRayExtensions function. This function extends the Camera and Scene prototypes with new ray-related methods.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AddRayExtensions } from \"core/Culling/ray.core\";\n\nAddRayExtensions(sceneClass, cameraClass);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Screen Coverage-Based LOD Levels in Babylon.js\nDESCRIPTION: This snippet shows how to configure multiple LOD levels using screen coverage ratios. Note that with screen coverage, larger values mean higher detail (opposite of distance-based LOD), with 0.7 being the highest detail and 0.01 the lowest.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/LOD.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nknot00.addLODLevel(0.7, knot01);\nknot00.addLODLevel(0.1, knot02);\nknot00.addLODLevel(0.01, knot03);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Attributes and Texture Arrays in Babylon.js Material Plugins (TypeScript/GLSL/WGSL)\nDESCRIPTION: Illustrates how to use a custom vertex attribute (`texIndices`) and a texture array (`sampler2DArray`) within a material plugin. It implements `getSamplers` for the texture array, `getAttributes` to register the custom attribute, and `getCustomCode` for both vertex and fragment shaders in WGSL and GLSL. The vertex shader defines the attribute and passes it to the fragment shader via a varying. The fragment shader defines the texture array sampler and uses the varying (`texIndex`) to sample the correct texture slice, replacing the standard diffuse texture lookup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materialPlugins.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetSamplers(samplers) {\n    samplers.push(\"arrayTex\");\n}\n\ngetAttributes(attributes) {\n    attributes.push('texIndices');\n}\n\ngetCustomCode(shaderType, shaderLanguage) {\n  if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {\n    if (shaderType === \"vertex\") return {\n      \"CUSTOM_VERTEX_DEFINITIONS\": `\n          attribute texIndices: f32;\n          varying texIndex: f32;\n      `,\n\n      \"CUSTOM_VERTEX_MAIN_BEGIN\": `\n          vertexOutputs.texIndex = input.texIndices;\n      `,\n    }\n    if (shaderType === \"fragment\") return {\n        \"CUSTOM_FRAGMENT_DEFINITIONS\": `\n            uniform highp sampler2DArray arrayTex;\n            varying texIndex: f32;\n        `,\n\n        \"!baseColor\\\\=texture2D\\\\(diffuseSampler,vDiffuseUV\\\\+uvOffset\\\\);\":\n            `baseColor = texture(arrayTex, vec3(vDiffuseUV, texIndex));`,\n    }\n  }\n\n  if (shaderType === \"vertex\") return {\n      \"CUSTOM_VERTEX_DEFINITIONS\": `\n          attribute float texIndices;\n          varying float texIndex;\n      `,\n\n      \"CUSTOM_VERTEX_MAIN_BEGIN\": `\n          texIndex = texIndices;\n      `,\n  }\n  if (shaderType === \"fragment\") return {\n      \"CUSTOM_FRAGMENT_DEFINITIONS\": `\n          uniform highp sampler2DArray arrayTex;\n          varying float texIndex;\n      `,\n\n      \"!baseColor\\\\=texture2D\\\\(diffuseSampler,vDiffuseUV\\\\+uvOffset\\\\);\":\n          `baseColor = texture(arrayTex, vec3(vDiffuseUV, texIndex));`,\n  }\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Drag Behavior to Gizmos in Babylon.js\nDESCRIPTION: Shows how to add a drag behavior observer to a gizmo for custom actions during dragging.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngizmo.dragBehavior.onDragObservable.add(() => {\n  console.log(\"drag\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing AssetManager to Load NodeGeometry File (Babylon.js, JavaScript)\nDESCRIPTION: This snippet initializes Babylon.js's AssetManager, adds a TextFileAssetTask for a NodeGeometry JSON file, and starts the loading process. It is a prerequisite for scene asset management and enables asynchronous loading of geometry data. Make sure Babylon.js is loaded, a scene is initialized, and the required JSON file is accessible. The inputs include the scene context and asset filename; the output is the preparation for async task completion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetsManager = new BABYLON.AssetsManager(scene);\nconst nodeGeometryFile = assetsManager.addTextFileTask(\"load my node geometry\", \"nodeGeometry.json\");\n\n// load all tasks\nassetsManager.load();\n```\n\n----------------------------------------\n\nTITLE: Applying a Noise Texture to Perturbate Particles in Babylon.js\nDESCRIPTION: Uses a noise texture to alter the direction of particles. A `BABYLON.NoiseProceduralTexture` is created and configured, then assigned to the `noiseTexture` property of the particle system. `noiseStrength` (a `BABYLON.Vector3`) controls the intensity of the perturbation along each axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar noiseTexture = new BABYLON.NoiseProceduralTexture(\"perlin\", 256, scene);\nnoiseTexture.animationSpeedFactor = 5;\nnoiseTexture.persistence = 2;\nnoiseTexture.brightness = 0.5;\nnoiseTexture.octaves = 2;\n\nparticleSystem.noiseTexture = noiseTexture;\nparticleSystem.noiseStrength = new BABYLON.Vector3(100, 100, 100);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Controlling Babylon.js TrailMesh in JavaScript\nDESCRIPTION: Demonstrates the basic instantiation of a BABYLON.TrailMesh object using various configuration options (diameter, length, segments, etc.) stored in an `options` object. It also shows how to programmatically start and stop the trail generation using the `start()` and `stop()` methods. This requires a generator mesh and the Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/trailMesh.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet options = {\n    diameter: 1.5,\n    length: 100,\n    segments: 10,\n    sections: 4,\n    doNotTaper: false,\n    autoStart: true\n};\nconst trail = new BABYLON.TrailMesh(name, generator, scene, options);\n\ntrail.start(); // Starts the trailing mesh.\ntrail.stop(); // Stops the trailing mesh.\n```\n\n----------------------------------------\n\nTITLE: Storing CYOS Shader Code in Babylon.js ShadersStore (JavaScript)\nDESCRIPTION: Demonstrates how shader code downloaded from the Babylon.js CYOS tool is typically stored within the `BABYLON.Effect.ShadersStore`. This makes the vertex and fragment shaders available by name ('customVertexShader', 'customFragmentShader') for later use with `ShaderMaterial`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Effect.ShadersStore[\"customVertexShader\"] =\n  \"\\r\\n\" +\n  \"precision highp float;\\r\\n\" +\n  \"// Attributes\\r\\n\" +\n  \"attribute vec3 position;\\r\\n\" +\n  \"attribute vec2 uv;\\r\\n\" +\n  \"// Uniforms\\r\\n\" +\n  \"uniform mat4 worldViewProjection;\\r\\n\" +\n  \"// Varying\\r\\n\" +\n  \"varying vec2 vUV;\\r\\n\" +\n  \"void main(void) {\\r\\n\" +\n  \"    gl_Position = worldViewProjection * vec4(position, 1.0);\\r\\n\" +\n  \"    vUV = uv;\\r\\n\" +\n  \"}\\r\\n\";\n\nBABYLON.Effect.ShadersStore[\"customFragmentShader\"] = \"\\r\\n\" + \"precision highp float;\\r\\n\" + \"varying vec2 vUV;\\r\\n\" + \"uniform sampler2D textureSampler;\\r\\n\" + \"void main(void) {\\r\\n\" + \"    gl_FragColor = texture2D(textureSampler, vUV);\\r\\n\" + \"}\\r\\n\";\n```\n\n----------------------------------------\n\nTITLE: Updating Thin Instance Matrices\nDESCRIPTION: Shows how to update a thin instance by setting a new matrix at a specific index. This allows for dynamically changing the position, rotation, or scale of individual thin instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar matrix2 = BABYLON.Matrix.Translation(2, 1, 0);\nsphere.thinInstanceSetMatrixAt(idx2, matrix2);\n```\n\n----------------------------------------\n\nTITLE: Defining SubMeshes for Multi-Material Application in Babylon.js\nDESCRIPTION: Creates multiple submeshes to specify which parts of the mesh use specific materials from the multi-material. This allows different materials to be applied to different sections of the same mesh based on vertex indices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/multiMaterials.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.subMeshes = [];\nconst verticesCount = sphere.getTotalVertices();\n\nnew BABYLON.SubMesh(0, 0, verticesCount, 0, 900, sphere);\nnew BABYLON.SubMesh(1, 0, verticesCount, 900, 900, sphere);\nnew BABYLON.SubMesh(2, 0, verticesCount, 1800, 2088, sphere);\n```\n\n----------------------------------------\n\nTITLE: Implementing Particle Picking Interaction in Babylon.js\nDESCRIPTION: Demonstrates how to handle mouse picking events to interact with solid particles. The example shows initialization of a pickable SPS, handling pointer events, accessing picked particle data, and visually modifying the picked particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/picking_sps.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar SPS = new BABYLON.SolidParticleSystem(\"SPS\", scene, { isPickable: true });\n// add shapes, build the mesh, init particles, etc\nSPS.setParticles(); // initial SPS draw\nSPS.refreshVisibleSize(); // force the BBox recomputation\nscene.onPointerDown = function(evt, pickResult) {\n  var meshFaceId = pickResult.faceId; // get the mesh picked face\n  if (meshFaceId == -1) {\n    return;\n  } // return if nothing picked\n  var picked = SPS.pickedParticle(pickResult); // get the picked particle data : idx and faceId\n  var idx = picked.idx;                         \n  var p = SPS.particles[idx];                   // get the actual picked particle\n  p.color.r = 1; // turn it red\n  p.color.b = 0;\n  p.color.g = 0;\n  p.velocity.y = -1; // drop it\n  SPS.setParticles();\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Lens Flare System in Babylon.js\nDESCRIPTION: Creates a new lens flare system with a specified emitter (camera, light, or mesh) in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/lenseFlare.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lensFlareSystem = new BABYLON.LensFlareSystem(\"lensFlareSystem\", myEmitter, scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling Transparent Instances Sorting in Babylon.js\nDESCRIPTION: Shows how to enable back-to-front sorting for transparent instanced meshes to reduce rendering artifacts. This feature, available since Babylon.js 5.0, requires disabling the master mesh for optimal results.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/instances.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.INSTANCEDMESH_SORT_TRANSPARENT = true;\n```\n\n----------------------------------------\n\nTITLE: Loading babylon-mmd in Babylon.js Playground\nDESCRIPTION: TypeScript code for loading babylon-mmd dynamically in a Babylon.js Playground. This approach creates a script tag and waits for it to load before proceeding.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/mmdLoader.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const BABYLONMMD: any;\n\nawait new Promise((resolve) => {\n    const babylonMmdScript = document.createElement(\"script\");\n    babylonMmdScript.src = \"https://www.unpkg.com/babylon-mmd/umd/babylon.mmd.min.js\";\n    document.head.appendChild(babylonMmdScript);\n    babylonMmdScript.onload = resolve;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MorphTargetManager in Babylon.js\nDESCRIPTION: This snippet shows how to initialize morph targets for a mesh. It creates an instance of `BABYLON.MorphTargetManager` and assigns it to the `morphTargetManager` property of a mesh object (e.g., `sphere`). This manager will hold and control all morph targets associated with the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst manager = new BABYLON.MorphTargetManager();\nsphere.morphTargetManager = manager;\n```\n\n----------------------------------------\n\nTITLE: Exiting WebXR Session in JavaScript\nDESCRIPTION: Demonstrates how to exit a WebXR session using the experience helper.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait xrHelper.exitXRAsync();\n```\n\n----------------------------------------\n\nTITLE: Appending Scene from File (TypeScript)\nDESCRIPTION: Uses AppendSceneAsync to load Babylon.js assets from a file and append them to the existing scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait BABYLON.AppendSceneAsync(\"path/to/model\", scene);\n```\n\n----------------------------------------\n\nTITLE: Handling New Player Connection in Colyseus Room (TypeScript)\nDESCRIPTION: This server-side code snippet shows the implementation of the `onJoin` method within a Colyseus Room (`MyRoom.ts`). When a client joins, it logs the event, creates a new `Player` instance (defined in `MyRoomState.ts`), assigns it random initial x/z coordinates within a defined floor size, and adds it to the `players` map in the room's state, using the client's unique `sessionId` as the key. This action triggers state synchronization to all connected clients. Requires `Client` type from Colyseus and the custom `Player` schema.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// MyRoom.ts\n// ...\n    onJoin(client: Client, options: any) {\n        console.log(client.sessionId, \"joined!\");\n\n        // create Player instance\n        const player = new Player();\n\n        // place Player at a random position\n        const FLOOR_SIZE = 500;\n        player.x = -(FLOOR_SIZE/2) + (Math.random() * FLOOR_SIZE);\n        player.y = -1;\n        player.z = -(FLOOR_SIZE/2) + (Math.random() * FLOOR_SIZE);\n\n        // place player in the map of players by its sessionId\n        // (client.sessionId is unique per connection!)\n        this.state.players.set(client.sessionId, player);\n    }\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Fire Material in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a fire material, set its textures, and apply it to a plane mesh in Babylon.js. It uses diffuse, distortion, and opacity textures to create the fire effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/fireMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fireMaterial = new BABYLON.FireMaterial(\"fireMaterial\", scene);\nfireMaterial.diffuseTexture = new BABYLON.Texture(\"diffuse.png\", scene);\nfireMaterial.distortionTexture = new BABYLON.Texture(\"distortion.png\", scene);\nfireMaterial.opacityTexture = new BABYLON.Texture(\"opacity.png\", scene);\n\nvar plane = BABYLON.Mesh.CreatePlane(\"fireplane\", 1.0, scene);\nplane.material = fireMaterial;\n```\n\n----------------------------------------\n\nTITLE: Rendering MultiLine Controls Connecting Meshes and Points with Babylon.js GUI - JavaScript\nDESCRIPTION: This snippet demonstrates adding a MultiLine control to connect multiple GUI points, meshes, or controls in a Babylon.js scene. Dependencies are the Babylon.js engine and GUI library, with optional Babylon.js mesh/control inputs. The snippet covers adding, pushing, and removing MultiLinePoint objects, each referencing a mesh, control, or coordinate pair. Parameters like dash and lineWidth control appearance. The expected usage is to visually link disparate GUI or 3D scene elements. Input should be meshes, controls, or coordinate objects, and output is a multi-segment line drawn on the GUI. Limitations include ensuring referenced meshes and controls exist at runtime.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Playground: #H03KNW#2\n// Simple example showing how to add a MultiLine control to your scene.\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nvar multiLine = new BABYLON.GUI.MultiLine();\n\n// Add a mesh, a control, and a point\nmultiLine.add(mesh1, control1, {x:200, y:100});\nmultiLine.lineWidth = 3;\nmultiLine.dash = [4, 3]; // Optional for dashed lines\nadvancedTexture.addControl(multiLine);\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization for RenderTargetTexture in Babylon.js\nDESCRIPTION: This snippet demonstrates performance optimization techniques for using RenderTargetTexture, including creating clones of materials and freezing them to improve rendering speed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/renderTargetTextureMultiPass.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet rttMaterials = [];\nconst getCausticMaterial = () => {\n    let c = rttMaterial.clone();\n    c.freeze(); // freeze because we'll only update uniforms\n    rttMaterials.push(c);\n    return c;\n};\n\nvar grass0 = new BABYLON.StandardMaterial(\"grass0\", scene);\ngrass0.diffuseTexture = new BABYLON.Texture(\"textures/grass.png\", scene);\ngrass0.freeze();\n\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width: 6, height: 6}, scene);\nground.material = grass0;\nrenderTarget.setMaterialForRendering(ground, getCausticMaterial());\nrenderTarget.renderList.push(ground);\n\nscene.onBeforeRenderObservable.add(() => {\n    // ... \n    rttMaterials.forEach((c) => c.setFloat('time', timeDiff));\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Particles Externally During SPS Creation in JavaScript\nDESCRIPTION: Shows how to use the `storage` option within the `addShape()` method when creating an expandable SPS. This creates particles based on `model1` but stores them in the provided external array (`stock`) instead of adding them directly to the active particle pool. The SPS itself must be initialized with at least one particle to function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/expandable_sps.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar stock = []; // the array to store the particles\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, { expandable: true });\nsps.addShape(model1, 1); // the SPS needs at least one particle\nsps.addShape(model1, 100, { storage: stock }); // stores 100 particles from model1 in the stock array\nsps.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Screen Background Color in JavaScript\nDESCRIPTION: This snippet demonstrates how to change the background color of the Babylon.js loading screen. Assigning a valid CSS color string (like \"red\" or \"#FF0000\") to the `loadingUIBackgroundColor` property of the engine instance modifies the background.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nengine.loadingUIBackgroundColor = \"red\";\n```\n\n----------------------------------------\n\nTITLE: Adding Screen Coverage-Based LOD Level in Babylon.js\nDESCRIPTION: This snippet demonstrates how to add a single LOD level using screen coverage. The parameter value (0.1) represents the screen coverage ratio threshold (between 0 and 1) at which this LOD level activates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/LOD.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknot00.addLODLevel(0.1, knot01);\n```\n\n----------------------------------------\n\nTITLE: Using Scene Optimizer Helper Method in JavaScript\nDESCRIPTION: Shows how to use the static OptimizeAsync helper method for simple scene optimization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/sceneOptimizer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneOptimizer.OptimizeAsync(scene),\n```\n\n----------------------------------------\n\nTITLE: Translating a Relative Mesh Position using TransformCoordinates in Babylon.js\nDESCRIPTION: This snippet shows how to translate a mesh (mesh_C) relative to another mesh (mesh_P) after initially positioning it. It calculates the world matrix of mesh_P, defines an initial local position, adds a translation vector (1, 1, 1) to this local position using `addInPlace`, and then transforms the resulting local position to world coordinates using `BABYLON.Vector3.TransformCoordinates`. The final world position is assigned to mesh_C.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/ref_frame.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst matrix = mesh_P.computeWorldMatrix(true);\nconst local_position = new BABYLON.Vector3(0, 0.5, 0);\nlocal_position.addInPlace(new BABYLON.Vector3(1, 1, 1));\nconst global_position = BABYLON.Vector3.TransformCoordinates(local_position, matrix);\nmesh_C.position = global_position;\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Depth Sensing Feature with Babylon.js WebXR (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates enabling the Depth Sensing feature via featureManager with strict option typing. Type assertions help ensure the options object conforms to BABYLON.IWebXRDepthSensingOptions and that the resulting feature is treated as BABYLON.WebXRDepthSensing. Developers gain type safety and code completion for configuration parameters, such as usage and data format preferences.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// featuresManager from the base webxr experience helper\\nconst depthSensing = featureManager.enableFeature(BABYLON.WebXRFeatureName.DEPTH_SENSING, \\\"latest\\\", {\\n  dataFormatPreference: [\\\"ushort\\\", \\\"float\\\"],\\n  usagePreference: [\\\"cpu\\\", \\\"gpu\\\"],\\n} as BABYLON.IWebXRDepthSensingOptions) as BABYLON.WebXRDepthSensing;\n```\n\n----------------------------------------\n\nTITLE: Using DOM Element Shader with CustomProceduralTexture in JavaScript\nDESCRIPTION: Illustrates creating a `BABYLON.CustomProceduralTexture` using a shader stored in an HTML `<script>` tag (DOM Element). An object with the `fragmentElement` property set to the script tag's ID (\"LinesPixelShader\") is passed as the shader source.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst linesShader = { fragmentElement: \"LinesPixelShader\" };\nconst customProcText = new BABYLON.CustomProceduralTexture(\"customtext\", linesShader, 1024, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Texture from WebCam in Babylon.js\nDESCRIPTION: Creates a VideoTexture connected to the user's default webcam with optional constraints for width and height of the camera resolution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/videoTexture.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.VideoTexture.CreateFromWebCam(scene, function (videoTexture) {}, { maxWidth: 256, maxHeight: 256 });\n```\n\n----------------------------------------\n\nTITLE: Computing Final Vertex Matrix with Bone Influences in Babylon.js\nDESCRIPTION: Shows how the final transformation matrix is computed for each vertex based on bone influences. This calculation combines the world matrix with weighted bone matrices using up to 4 bone influences per vertex.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfinalMatrix = worldMatrix * (bonesMatrices[index0] * weight0 + bonesMatrices[index1] * weight1 + bonesMatrices[index2] * weight2 + bonesMatrices[index3] * weight3);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Gravity in Babylon.js Physics Engines\nDESCRIPTION: Shows how to access and modify the gravity settings in a physics engine after it has been initialized. Each engine requires its own initialization but uses the same interface for gravity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/forces.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*Get and set gravity*/\nvar physicsEngine = scene.enablePhysics(null, new BABYLON.CannonJSPlugin());\nvar physicsEngine = scene.enablePhysics(null, new BABYLON.OimoJSPlugin());\n\nawait Ammo();\nvar physicsEngine = scene.enablePhysics(null, new BABYLON.AmmoJSPlugin());\n\n//Get gravity\nvar gravity = physicsEngine.gravity;\n\n//Set gravity\nphysicsEngine.setGravity(new BABYLON.Vector3(0, -5, 0));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Registering Spatial Sound - Babylon.js JavaScript\nDESCRIPTION: Initializes a 3D spatial sound effect using Babylon.js, attaches it to the target mesh, and defines an action to play the sound when the mesh is picked. Relies on BABYLON.Sound and ActionManager classes, with a dependency on a sound file and the mesh blubox. Key parameters include sound file path, sound options (e.g., maxDistance and spatialSound), and event trigger type. Expects a valid scene and mesh reference; output is spatial audio playback upon interaction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/vr_game.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*Spatial Sound Effect*/\nvar SFX = new BABYLON.Sound(\"gunshot\", \"sounds/gunshot.wav\", scene, null, { maxDistance: 50, loop: false, autoplay: false, spatialSound: true }); //no need to set spatialSound if attaching to a mesh\n\nSFX.attachToMesh(blubox);\n\nblubox.actionManager.registerAction(new BABYLON.PlaySoundAction(BABYLON.ActionManager.OnPickTrigger, SFX));\n```\n\n----------------------------------------\n\nTITLE: Creating Catmull-Rom Spline - Babylon.js - JavaScript\nDESCRIPTION: This snippet sets up a Catmull-Rom spline that interpolates through a list of Vector3 control points, spacing subdivisions in nbPoints, and optionally closing the curve. Returns a Curve3 instance for sampling. Catmull-Rom splines provide natural interpolation through given points for lines and tubes in 3D. Requires: BABYLON.Curve3, control points array, nbPoints integer, and optional closed boolean.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nbPoints = 20;                     // the number of points between each Vector3 control points\nconst points = [vec1, vec2, ..., vecN];  // an array of Vector3 the curve must pass through : the control points\nconst closed = true;                     // closes the curve when true\nconst catmullRom = BABYLON.Curve3.CreateCatmullRomSpline(points, nbPoints, closed);\n```\n\n----------------------------------------\n\nTITLE: Complete Delta System Example in Babylon.js\nDESCRIPTION: Comprehensive example showing scene creation, recording changes, and applying deltas including mesh creation, light adjustments, and position changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/deltaFiles.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = new BABYLON.Scene(engine);\nvar camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\ncamera.setTarget(BABYLON.Vector3.Zero());\ncamera.attachControl(canvas, true);\n\nvar light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\nlight.intensity = 0.7;\n\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\nsphere.position.y = 1;\n\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n\n// Instantiate the recorder\nvar recorder = new BABYLON.SceneRecorder();\n\nrecorder.track(scene);\n\n// Let's make some changes\nsphere.position.y = 0;\nscene.clearColor.r = 1;\n\nlight.intensity = 0;\n\nvar light2 = new BABYLON.HemisphericLight(\"light2\", new BABYLON.Vector3(0, 1, 0), scene);\n\nground.dispose();\n\n// Now we can get the delta file\nlet delta = recorder.getDelta();\n\n// Just to see the changes, we are updating the value so we can see what the delta is doing\nground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\nlight2.dispose();\nsphere.position.y = 2;\nscene.clearColor.r = 0;\nlight.intensity = 1.0;\n\n// Apply the delta\nBABYLON.SceneRecorder.ApplyDelta(delta, scene);\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Controls and Core with npm (bash)\nDESCRIPTION: Demonstrates how to use npm to install the '@babylonjs/controls' library and its peer dependency '@babylonjs/core'. These packages must be included in your project to leverage Babylon.js timeline functionality. This step is a prerequisite for all subsequent usage in JavaScript/TypeScript code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/controls\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Default Animation Interpolation Functions\nDESCRIPTION: Shows the default interpolation functions used for different types of animation values including floats, quaternions, and vector3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Animation.prototype.floatInterpolateFunction = function (startValue, endValue, gradient) {\n  return startValue + (endValue - startValue) * gradient;\n};\n\nBABYLON.Animation.prototype.quaternionInterpolateFunction = function (startValue, endValue, gradient) {\n  return BABYLON.Quaternion.Slerp(startValue, endValue, gradient);\n};\n\nBABYLON.Animation.prototype.vector3InterpolateFunction = function (startValue, endValue, gradient) {\n  return BABYLON.Vector3.Lerp(startValue, endValue, gradient);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Textured Wheels in Babylon.js\nDESCRIPTION: This snippet creates a wheel using a cylinder with custom materials. It applies a texture to the flat faces and sets the tread to black. The wheel is then rotated to align properly for the car.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar wheelMaterial = new BABYLON.StandardMaterial(\"wheel_mat\", scene);\nvar wheelTexture = new BABYLON.Texture(\"https://i.imgur.com/ZUWbT6L.png\", scene);\nwheelMaterial.diffuseTexture = wheelTexture;\n\n//Set color for wheel tread as black\nvar faceColors = [];\nfaceColors[1] = new BABYLON.Color3(0, 0, 0);\n\n//set texture for flat face of wheel\nvar faceUV = [];\nfaceUV[0] = new BABYLON.Vector4(0, 0, 1, 1);\nfaceUV[2] = new BABYLON.Vector4(0, 0, 1, 1);\n\nvar wheel = BABYLON.MeshBuilder.CreateCylinder(\"wheel\", { diameter: 3, height: 1, tessellation: 24, faceColors: faceColors, faceUV: faceUV }, scene);\nwheel.material = wheelMaterial;\n\n//rotate wheel so tread in xz plane\nwheel.rotation.x = Math.PI / 2;\n```\n\n----------------------------------------\n\nTITLE: Initializing GizmoManager in Babylon.js\nDESCRIPTION: Creates a new GizmoManager instance for the scene, which provides a default gizmo setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst gizmoManager = new BABYLON.GizmoManager(scene);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Particles to Fluid Renderer using TypeScript\nDESCRIPTION: Shows the TypeScript signature for the `addCustomParticles` method of the fluid renderer. This method allows rendering raw particle data (positions, optionally colors) as a fluid, requiring a `buffers` object with at least a 'position' buffer (and 'color' if `generateDiffuseTexture` is true), the number of particles, and optional parameters for diffuse texture generation, specific target renderer, and camera. It returns an `IFluidRenderingRenderObject` interface.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/using_fluid_renderer.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic addCustomParticles(\n    buffers: { [key: string]: FloatArray },\n    numParticles: number,\n    generateDiffuseTexture?: boolean,\n    targetRenderer?: FluidRenderingTargetRenderer,\n    camera?: Camera\n): IFluidRenderingRenderObject\n```\n\n----------------------------------------\n\nTITLE: Constructing a Device Orientation Camera in Babylon.js\nDESCRIPTION: Creates a Device Orientation Camera that reacts to device orientation events. It sets the camera target, sensitivity to movement and rotation, and attaches it to the canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters : name, position, scene\nconst camera = new BABYLON.DeviceOrientationCamera(\"DevOr_camera\", new BABYLON.Vector3(0, 0, 0), scene);\n\n// Targets the camera to a particular position\ncamera.setTarget(new BABYLON.Vector3(0, 0, -10));\n\n// Sets the sensitivity of the camera to movement and rotation\ncamera.angularSensibility = 10;\ncamera.moveSensibility = 10;\n\n// Attach the camera to the canvas\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Removing a Parent Mesh in Babylon.js\nDESCRIPTION: Shows three JavaScript methods to detach a child mesh (meshC) from its parent (meshP). Method 1 (`.parent = null`) removes the parent and resets any transformations inherited from the parent, potentially causing visible changes. Methods 2 (`.setParent(null)`) and 3 (`.removeChild()`) remove the relationship but preserve the transformations applied via the parent up to that point, avoiding visible changes upon removal.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/parent.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nmeshC.parent = null; // 1\nmeshC.setParent(null); // 2\nmeshP.removeChild(meshC); // 3\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Meshes Asynchronously using ImportMeshAsync in JavaScript\nDESCRIPTION: Shows how to use the asynchronous BABYLON.ImportMeshAsync method to load meshes from a file. It demonstrates both promise-based and await-based usage of the function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// The first parameter can be set to null to load all meshes and skeletons\nconst importPromise = BABYLON.ImportMeshAsync(\"./duck.gltf\", scene, { meshNames: [\"myMesh1\", \"myMesh2\"] });\nimportPromise.then((result) => {\n  //// Result has meshes, particleSystems, skeletons, animationGroups and transformNodes\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// The first parameter can be set to null to load all meshes and skeletons\nconst result = await BABYLON.ImportMeshAsync(\"./duck.gltf\", scene, { meshNames: [\"myMesh1\", \"myMesh2\"] });\n// Result has meshes, particleSystems, skeletons, animationGroups and transformNodes\n```\n\n----------------------------------------\n\nTITLE: Getting Canvas Context from Dynamic Texture in Babylon.js\nDESCRIPTION: Retrieves the HTML5 Canvas context from a dynamic texture, allowing access to all canvas drawing methods for pixel manipulation and custom drawing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = myDynamicTexture.getContext();\n```\n\n----------------------------------------\n\nTITLE: Creating a Hemispheric Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a hemispheric particle emitter using `particleSystem.createHemisphericEmitter`, specifying the radius as a number. Particles are emitted outwards from the hemisphere's surface along its normals. Requires an existing `particleSystem` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar hemisphericEmitter = particleSystem.createHemisphericEmitter(1.2);\n```\n\n----------------------------------------\n\nTITLE: Activating Percentage Closer Filtering (PCF) for Shadows (JavaScript)\nDESCRIPTION: This code enables Percentage Closer Filtering (PCF) on Babylon.js shadow generators, using modern WebGL2 hardware features for smoother shadow edges. If WebGL2 is unavailable, it automatically reverts to Poisson sampling. No extra configuration is needed but performance may vary based on device capabilities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.usePercentageCloserFiltering = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Contact Hardening Shadows (PCSS) in Babylon.js (JavaScript)\nDESCRIPTION: This snippet enables Contact Hardening Shadows (PCSS) for more realistic shadow rendering, which produces softer, variable-width edges depending on distance from the caster. 'useContactHardeningShadow' should be used with configured 'light.shadowMinZ', 'shadowMaxZ', and optionally, 'contactHardeningLightSizeUVRatio' for better control. Note PCSS is performance intensive and best for powerful desktops.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.useContactHardeningShadow = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Tree with SPS Generator in Babylon.js\nDESCRIPTION: Function call to create a procedural tree using the SPS Tree Generator. Takes multiple parameters to control the tree's appearance including trunk properties, branching behavior, leaf characteristics, and materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/treeGenerators/spsTreeGenerator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = createTree(trunkHeight, trunkTaper, trunkSlices, trunkMaterial, boughs, forks, forkAngle, forkRatio, branches, branchAngle, bowFreq, bowHeight, leavesOnBranch, leafWHRatio, leafMaterial, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding a Distance Constraint Between Two Physics Bodies in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a distance constraint between two dynamic physics bodies. The constraint keeps the bodies at a maximum distance of 10 units from each other while allowing free rotation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/constraints.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bodyA = new BABYLON.PhysicsBody(objectA, BABYLON.PhysicsMotionType.DYNAMIC, scene);\nconst bodyB = new BABYLON.PhysicsBody(objectB, BABYLON.PhysicsMotionType.DYNAMIC, scene);\n\nconst constraint = new BABYLON.DistanceConstraint(\n  10, // max distance between the two bodies\n  scene\n);\n\nbodyA.addConstraint(bodyB, constraint);\n```\n\n----------------------------------------\n\nTITLE: Setting ArcRotateCamera Collision Radius in Babylon.js\nDESCRIPTION: Configures collision radius for ArcRotateCamera using a Vector3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.collisionRadius = new BABYLON.Vector3(0.5, 0.5, 0.5);\n```\n\n----------------------------------------\n\nTITLE: Instantiating ShaderMaterial in Babylon.js\nDESCRIPTION: Demonstrates the basic constructor syntax for creating a new instance of `BABYLON.ShaderMaterial`. It requires a name (string), the current scene, a route to the shader code (object or string path), and an optional options object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderMaterial.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myShaderMaterial = new BABYLON.ShaderMaterial(name, scene, route, options);\n```\n\n----------------------------------------\n\nTITLE: Bundling with Webpack via Local CLI - Bash\nDESCRIPTION: This command runs the locally installed webpack executable to bundle the project, processing TypeScript and dependencies as defined in the webpack config. Generates the final 'dist/index.js' bundle. Run from the project root whenever you wish to re-bundle after source changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/webpack\n```\n\n----------------------------------------\n\nTITLE: Setting and Displaying Bounding Box on Parent Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Sets the bounding information for the 'parent' mesh using the previously calculated combined minimum (`newMin`) and maximum (`newMax`) vectors (derived from sphere and ground local bounds). It then enables the visualization of this bounding box directly on the 'parent' mesh. Requires 'parent' to be a mesh object and `newMin`, `newMax` to be `BABYLON.Vector3` instances representing the combined local bounds.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nparent.setBoundingInfo(new BABYLON.BoundingInfo(newMin, newMax));\n    \nparent.showBoundingBox = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup K in Babylon.js Physics\nDESCRIPTION: Parameter setup with offset pivots and different axis orientations. The main axis is on the Z-axis while the connected axis is on the X-axis, requiring the main body to rotate for axis alignment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(10, 0, 0), //set main body position\nconnectedPivot: new BABYLON.Vector3(0, 5, 0), //adjust main body position and radius of rotation\nmainAxis: new BABYLON.Vector3(0, 0, 1), //different axes will rotate main body so stated axes align.\nconnectedAxis: new BABYLON.Vector3(1, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Importing Animations using ImportAnimationsAsync in JavaScript\nDESCRIPTION: Shows how to use BABYLON.ImportAnimationsAsync to load animations from a file and merge them into an existing scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportAnimationsAsync(\"./Elf_run.gltf\", scene);\n```\n\n----------------------------------------\n\nTITLE: Setting AnimationGroup Speed Ratio in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to control playback speed for all animations in a group by adjusting the speedRatio property. Requires initialized AnimationGroups. Inputs: float speed ratios (here 0.25 and 3); Outputs: modifies playback speed accordingly for each group; lower values slow down, higher values speed up.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nanimationGroup1.speedRatio = 0.25;\nanimationGroup2.speedRatio = 3;\n```\n\n----------------------------------------\n\nTITLE: Implementing FluidRendererGUI Class for Babylon.js\nDESCRIPTION: This class creates a GUI for interacting with the fluid renderer in Babylon.js. It manages the visibility of the GUI, initializes controls, and handles user interactions for various fluid rendering parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass FluidRendererGUI {\n    private _gui: BABYLON.Nullable<lil.GUI>;\n    private _visible: boolean;\n    private _scene: BABYLON.Scene;\n    private _showGeneralMenu: boolean;\n    private _onKeyObserver: BABYLON.Nullable<BABYLON.Observer<BABYLON.KeyboardInfo>>;\n    private _targetRendererIndex: number;\n    private _targetRenderersGUIElements: lil.Controller[];\n    private _renderObjectIndex: number;\n    private _renderObjectsGUIElements: lil.Controller[];\n\n    // ... (constructor and methods)\n\n    private async _initialize() {\n        this.dispose();\n\n        if (typeof lil === \"undefined\") {\n            await LoadLiLGUI();\n        }\n\n        this._gui = new lil.GUI({ title: \"Fluid Rendering\" });\n        this._gui.domElement.style.marginTop = \"60px\";\n        this._gui.domElement.id = domElementName;\n\n        this._setupKeyboard();\n\n        if (this._showGeneralMenu) {\n            this._makeMenuGeneral();\n        }\n        this._makeMenuTargetRenderers();\n        this._makeMenuRenderObjects();\n    }\n\n    // ... (other methods)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Clear Coat over a Bump Map in Babylon.js PBR Material\nDESCRIPTION: This JavaScript code shows how to use a clear coat effect on top of a bump map in a Babylon.js PBR material. It sets up the material, forces irradiance computation per fragment (`forceIrradianceInFragment`) to ensure the bump map is visible under the clear coat, applies a bump texture (`bumpTexture`), and then enables the clear coat (`clearCoat.isEnabled = true`). Requires `BABYLON.PBRMaterial`, `BABYLON.Texture`, and a `scene`. The `forceIrradianceInFragment` setting is crucial for the intended effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\n// Ensures irradiance is computed per fragment to make the\n// Bump visible\npbr.forceIrradianceInFragment = true;\npbr.bumpTexture = new BABYLON.Texture(\"textures/floor_bump.png\", scene);\npbr.metallic = 0.0;\npbr.roughness = 1.0;\n\npbr.clearCoat.isEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Adding and Handling Image Tasks in AssetsManager (JavaScript)\nDESCRIPTION: Shows how to add an image file task to the assets manager and handle its successful load event. The loaded image is exposed as an HTMLImageElement via 'task.image', allowing you to access its properties like width. Assumes 'assetsManager' is already instantiated.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst imageTask = assetsManager.addImageTask(\"image task\", \"img.jpg\");\nimageTask.onSuccess = function (task) {\n  console.log(task.image.width);\n};\n```\n\n----------------------------------------\n\nTITLE: Transforming from Non-VR Camera in Babylon.js WebXR\nDESCRIPTION: Demonstrates different ways to copy transformation from a non-VR camera to the WebXR camera, with options to reset the XR reference space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRCamera.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nxrCamera.setTransformationFromNonVRCamera();\n\nxrCamera.setTransformationFromNonVRCamera(otherCamera);\n\nxrCamera.setTransformationFromNonVRCamera(otherCamera, true);\n```\n\n----------------------------------------\n\nTITLE: Adding RenderTargetTexture to Camera's Custom Render Targets\nDESCRIPTION: Shows how to ensure a RenderTargetTexture is included in the scene's render list when active meshes are frozen.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.customRenderTargets.push(renderTargetTexture);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babylon.js NullEngine Options in JavaScript\nDESCRIPTION: This snippet shows how to configure the NullEngine during instantiation by passing an options object. The `renderWidth` and `renderHeight` parameters define the dimensions of the virtual canvas, while `textureSize` sets the default size for textures created within the NullEngine environment (which will be black).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/serverSide.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = new BABYLON.NullEngine({\n    renderWidth: 512,\n    renderHeight: 256,\n    textureSize: 512\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Mesh from Assets Library in Babylon.js\nDESCRIPTION: Example of loading a mesh from the Assets Library using a scene method. The rootUrl parameter uses the Asset Librarian format Assets.meshes.meshname.rooturl, and the filename uses Assets.meshes.meshname.filename.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableMeshes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneLoader.ImportMesh(\"\", Assets.meshes.alien.rootUrl, Assets.meshes.alien.filename, scene, function (meshes) {\n    // Mesh loaded successfully\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a SpotLight with Projection Texture in Babylon.js\nDESCRIPTION: This snippet shows how to create a SpotLight with a projection texture that simulates effects like light passing through stained glass. The texture is applied as the diffuse color of the light.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst spotLight = new BABYLON.SpotLight(\"spot02\", new BABYLON.Vector3(30, 40, 30), new BABYLON.Vector3(-1, -2, -1), 1.1, 16, scene);\nspotLight.projectionTexture = new BABYLON.Texture(\"textures/stainedGlass.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Applying Texture to ShaderMaterial in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to set a texture uniform for a `ShaderMaterial`. A new `BABYLON.Texture` is created and then assigned to the `textureSampler` uniform within the fragment shader using the `setTexture` method of the `ShaderMaterial`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainTexture = new BABYLON.Texture(\"amiga.jpg\", scene);\nshaderMaterial.setTexture(\"textureSampler\", mainTexture);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tile ID in Babylon.js\nDESCRIPTION: Demonstrates how to create a tile ID using a Vector2 object to specify the tile's position in the grid.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_tiles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntileID = new Vector2(2, 6);\n```\n\n----------------------------------------\n\nTITLE: Enabling Sprite Picking\nDESCRIPTION: Basic setup to enable picking for sprite managers and individual sprites.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/picking_sprites.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmySpriteManager.isPickable = true;\nmySpritePackedManager.isPickable = true;\nmySprite.isPickable = true;\n```\n\n----------------------------------------\n\nTITLE: Manually Starting Video Playback on User Interaction in Babylon.js\nDESCRIPTION: Sets up a one-time pointer down event handler to start video playback on user interaction, which is required by most browsers to play video with audio.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/videoTexture.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onPointerDown = function () {\n    videoTexture.video.play();\n    scene.onPointerDown = null;\n};\n```\n\n----------------------------------------\n\nTITLE: Sharing Depth Buffer Between Render Targets\nDESCRIPTION: Code snippet showing how to share the depth buffer between the scene's render target and the thickness texture render target in Babylon.js. This is a key optimization in the fluid rendering pipeline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/implementation_details.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfirstPostProcess.inputTexture._shareDepth(thicknessRT) ;\n```\n\n----------------------------------------\n\nTITLE: Loading Gaussian Splatting File in Babylon.js\nDESCRIPTION: Demonstrates how to asynchronously load a Gaussian Splatting file (.splat or .PLY) in Babylon.js. The loaded mesh is then accessible for further manipulation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gaussianSplatting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"https://assets.babylonjs.com/splats/gs_Skull.splat\", scene).then((result) =>{\n    const gaussianSplattingMesh = result.meshes[0]; });\n```\n\n----------------------------------------\n\nTITLE: Converting Geodesic Data to Goldberg Data (Dual) in JavaScript\nDESCRIPTION: The `GDtoGP` function converts Geodesic Polyhedron data (`GDdata`) into its dual, Goldberg Polyhedron data (`GPdata`). It first builds a map to find all faces adjacent to each vertex in the `GDdata`. Then, for each vertex `m` in `GDdata`, it uses `setOrder` to find the ordered sequence of adjacent faces; this sequence defines face `m` in the `GPdata`. The vertices of the `GPdata` are calculated as the centroids of the corresponding faces in the `GDdata`. The function returns the `GPdata` object containing vertex and face information.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n//convert geodesic to Goldberg by forming the dual\n const GDtoGP = function(GDdata) {\n     const GPdata = {};\n     GPdata.name = \"GD dual\";\n     GPdata.category = [\"Goldberg\"];\n     GPdata.vertex = [];\n     GPdata.face = [];\n     verticesNb = GDdata.vertex.length;\n     const map = new Array(verticesNb);\n     for (let v = 0; v < verticesNb; v++) {\n         map[v] = new Set();\n     }\n     for (let f = 0; f < GDdata.face.length; f++) {\n         for (let i = 0; i < 3; i++) {\n             map[GDdata.face[f][i]].add(f);\n         }\n     }\n     let cx = 0;\n     let cy = 0;\n     let cz = 0;\n     let face = [];\n     let vertex = [];\n     for(let m = 0; m < map.length; m++) {\n         GPdata.face[m] = setOrder(m, Array.from(map[m]), GDdata);\n         map[m].forEach((el) => {\n             cx = 0;\n             cy = 0;\n             cz = 0;\n             face = GDdata.face[el];\n             for(let i = 0; i < 3; i++) {\n                 vertex = GDdata.vertex[face[i]];\n                 cx += vertex[0];\n                 cy += vertex[1];\n                 cz += vertex[2];\n             }\n             GPdata.vertex[el] = [cx / 3, cy / 3, cz / 3];  \n         });\n     }\n     return GPdata;\n };\n```\n\n----------------------------------------\n\nTITLE: Applying Opacity Maps in Babylon.js\nDESCRIPTION: Creates transparency effects by applying an opacity texture to a material. This technique allows for varied transparency across a mesh surface based on the opacity map's values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/moreMaterials.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMaterial = new BABYLON.StandardMaterial(\"myMaterial\", scene);\nmyMaterial.opacityTexture = new BABYLON.Texture(\"PATH TO OPACITY MAP\", scene);\n```\n\n----------------------------------------\n\nTITLE: Disabling WebGL Context Lost Handling After Engine Creation\nDESCRIPTION: Disables WebGL context lost handling after engine creation but before creating any resources, reducing memory consumption.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/reducingMemoryUsage.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nengine.doNotHandleContextLost = true;\n```\n\n----------------------------------------\n\nTITLE: Running Timeline Render Loop with Video Synchronization Callback (javascript)\nDESCRIPTION: Demonstrates passing a custom callback function to the timeline's runRenderLoop method, enabling synchronized updates each frame. The callback checks the main video's playback state and updates the timeline's current time accordingly, ensuring timeline thumbnails correspond visually to the video. This integration requires access to both the Timeline instance and the video element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    timeline.runRenderLoop(() => {\n        // Sync the timeline with a playing video\n        if (!mainVideo.paused) {\n            timeline.setCurrentTime(mainVideo.currentTime);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Scene and 2D Line Mesh Generation Function in Babylon.js (Javascript)\nDESCRIPTION: This Javascript code defines a `createScene` function for Babylon.js. Within it, an orthographic camera and a hemispheric light are set up. It also defines a nested function `line2D` which generates the geometry (vertices, indices, normals, UVs) for a 2D line mesh with a specified width, based on an array of Vector3 points (`path`). The function handles calculations for both open and closed paths and supports standard or segment-based UV mapping. It returns a `BABYLON.Mesh` object. Dependencies include the Babylon.js library.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = function() {\n  var scene = new BABYLON.Scene(engine);\n\n\t// Camera\n    camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 0, -10), this.scene);\n    camera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;\n    var canvas = document.getElementById(\"renderCanvas\");\n    let ratio = canvas.width / canvas.height ;\n    let zoom = 30;\n    let width = zoom * ratio;\n    camera.orthoTop = zoom;\n    camera.orthoLeft = -width;\n    camera.orthoRight = width;\n    camera.orthoBottom = -zoom;\n\n\tvar light = new BABYLON.HemisphericLight(\"hemiLight\", new BABYLON.Vector3(5, 10, 0), scene);\n\t\n\t\n\tvar line2D = function(name, options, scene) {\n\t\n\t\t//Arrays for vertex positions and indices\n\t\tvar positions = [];\n\t\tvar indices = [];\n        var normals = [];\n        var uvs = [];\n\n        var width = options.width / 2 || 0.5;\n        var path = options.path;\n\t\tvar closed = options.closed || false;\n\t\tif(options.standardUV === undefined) {\n\t\t\tstandardUV = true;\n\t\t}\n\t\telse {\n\t\t\tstandardUV = options.standardUV;\n\t\t}\n\t\n\t\tvar angle = 0;\n\t\t\n\t\tvar nbPoints = path.length;\n\t\tvar line = BABYLON.Vector3.Zero();\n\t\tvar nextLine = BABYLON.Vector3.Zero();\n\n\t\tif(nbPoints > 2 && closed) {\n            path[0].subtractToRef(path[nbPoints - 1], line);\t    \n\t\t\tfor(let p = 0; p < nbPoints; p++) {\n                path[(p + 1) % nbPoints].subtractToRef(path[p], nextLine);    \n\t\t\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            \n\t\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().z;                \n\t\t\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\t\tline.normalize();\n                const in0 = path[p].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\t\tconst out0 = path[p].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\t\tline = nextLine.clone();\n                path[(p + 2) % nbPoints].subtractToRef(path[(p + 1) % nbPoints], nextLine);\n                angle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            \n\t\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().z;                \n\t\t\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\t\tline.normalize();\n                const in1 = path[(p + 1) % nbPoints].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\t\tconst out1 = path[(p + 1) % nbPoints].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));        \n\t\t\t\tpositions.push(in0.x, in0.y, in0.z, out0.x, out0.y, out0.z);\n                positions.push(in1.x, in1.y, in1.z, out1.x, out1.y, out1.z);\n                uvs.push(0, 0, 0, 1, 1, 0, 1, 1);\n                indices.push(4 * p + 2, 4 * p + 3, 4 * p + 1, 4 * p + 2, 4 * p + 1, 4 * p);\n                path[(p + 1) % nbPoints].subtractToRef(path[p], line);     \n\t\t\t}\n\t\t}\n\t\telse {\n            path[1].subtractToRef(path[0], line);\n            lineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\tline.normalize();\t\t\n\t\t\tconst in0 = path[0].subtract(lineNormal.scale(width));\n\t\t\tconst out0 = path[0].add(lineNormal.scale(width));\n            positions.push(in0.x, in0.y, in0.z, out0.x, out0.y, out0.z);\n            uvs.push(0, 0, 0, 1);\n            indices.push(2, 3, 1);\n            for(let p = 1; p < nbPoints - 1; p++) {\n                path[p + 1].subtractToRef(path[p], nextLine);\n                angle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            \n\t\t\t    direction = BABYLON.Vector3.Cross(line, nextLine).normalize().z;\n\t\t\t    lineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\t    line.normalize();\t\t\n\t\t\t    const in1 = path[p].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\t    const out1 = path[p].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));        \n                positions.push(in1.x, in1.y, in1.z, out1.x, out1.y, out1.z);\n                uvs.push(1, 0, 1, 1);\n                indices.push(4 * (p - 1) + 2, 4 * (p - 1) + 1, 4 * (p - 1));\n                const in0 = in1;\n\t\t\t    const out0 = out1;        \n\t\t\t    positions.push(in0.x, in0.y, in0.z, out0.x, out0.y, out0.z);\n                uvs.push(0, 0, 0, 1);\n                indices.push(4 * p + 2, 4 * p + 3, 4 * p + 1);\n                line = nextLine.clone();\n            }                \n\t\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\tline.normalize();\n            const in1 = path[nbPoints - 1].subtract(lineNormal.scale(width));\n\t\t\tconst out1 = path[nbPoints - 1].add(lineNormal.scale(width));\n            positions.push(in1.x, in1.y, in1.z, out1.x, out1.y, out1.z);\n            uvs.push(1, 0, 1, 1);\n            indices.push(4 * (nbPoints - 2) + 2, 4 * (nbPoints - 2) + 1, 4 * (nbPoints - 2));\n        }\n\t\t\n\t\t//Create a custom mesh\n        BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\t\tBABYLON.VertexData._ComputeSides(BABYLON.Mesh.DOUBLESIDE, positions, indices, normals, uvs);  \t\n \n\t\tvar customMesh = new BABYLON.Mesh(\"custom\", scene);\n\n\t\t//Create a vertexData object\n\t\tvar vertexData = new BABYLON.VertexData();\n\n\t\t//Assign positions and indices to vertexData\n\t\tvertexData.positions = positions;\n\t\tvertexData.indices = indices;\n\t\tvertexData.normals = normals;\n\t\tvertexData.uvs = uvs;\n\n\t\t//Apply vertexData to custom mesh\n\t\tvertexData.applyToMesh(customMesh);\n\t\t\n\t\treturn customMesh;\n\t\t\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Mesh Facet Density in BabylonJS\nDESCRIPTION: Function that increases the number of facets in a mesh by adding points to each side of existing facets. The number of facets increases by (n + 1)² where n is the number of points added per side. Maintains UV mapping and normal vectors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction increasedFacets(mesh, pps) {\n  //pps points per side\n  var gaps = pps + 1;\n  var n = gaps + 1;\n  var fvs = [];\n  for (let i = 0; i < n; i++) {\n    fvs[i] = [];\n  }\n  var A, B;\n  var d = { x: 0, y: 0, z: 0 };\n  var u = { x: 0, y: 0 };\n  var indices = [];\n  var vertexIndex = [];\n  var side = [];\n  var uvs = mesh.getVerticesData(BABYLON.VertexBuffer.UVKind);\n  var meshIndices = mesh.getIndices();\n  var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n  var normals = [];\n\n  for (let i = 0; i < meshIndices.length; i += 3) {\n    vertexIndex[0] = meshIndices[i];\n    vertexIndex[1] = meshIndices[i + 1];\n    vertexIndex[2] = meshIndices[i + 2];\n    for (let j = 0; j < 3; j++) {\n      A = vertexIndex[j];\n      B = vertexIndex[(j + 1) % 3];\n      if (side[A] === undefined && side[B] === undefined) {\n        side[A] = [];\n        side[B] = [];\n      } else {\n        if (side[A] === undefined) {\n          side[A] = [];\n        }\n        if (side[B] === undefined) {\n          side[B] = [];\n        }\n      }\n      if (side[A][B] === undefined && side[B][A] === undefined) {\n        side[A][B] = [];\n        d.x = (positions[3 * B] - positions[3 * A]) / gaps;\n        d.y = (positions[3 * B + 1] - positions[3 * A + 1]) / gaps;\n        d.z = (positions[3 * B + 2] - positions[3 * A + 2]) / gaps;\n        u.x = (uvs[2 * B] - uvs[2 * A]) / gaps;\n        u.y = (uvs[2 * B + 1] - uvs[2 * A + 1]) / gaps;\n        side[A][B].push(A);\n        for (let k = 1; k < gaps; k++) {\n          side[A][B].push(positions.length / 3);\n          positions.push(positions[3 * A] + k * d.x, positions[3 * A + 1] + k * d.y, positions[3 * A + 2] + k * d.z);\n          uvs.push(uvs[2 * A] + k * u.x, uvs[2 * A + 1] + k * u.y);\n        }\n        side[A][B].push(B);\n        side[B][A] = [];\n        l = side[A][B].length;\n        for (let a = 0; a < l; a++) {\n          side[B][A][a] = side[A][B][l - 1 - a];\n        }\n      } else {\n        if (side[A][B] === undefined) {\n          side[A][B] = [];\n          l = side[B][A].length;\n          for (let a = 0; a < l; a++) {\n            side[A][B][a] = side[B][A][l - 1 - a];\n          }\n        }\n        if (side[B][A] === undefined) {\n          side[B][A] = [];\n          l = side[A][B].length;\n          for (let a = 0; a < l; a++) {\n            side[B][A][a] = side[A][B][l - 1 - a];\n          }\n        }\n      }\n    }\n    fvs[0][0] = meshIndices[i];\n    fvs[1][0] = side[meshIndices[i]][meshIndices[i + 1]][1];\n    fvs[1][1] = side[meshIndices[i]][meshIndices[i + 2]][1];\n    for (let k = 2; k < gaps; k++) {\n      fvs[k][0] = side[meshIndices[i]][meshIndices[i + 1]][k];\n      fvs[k][k] = side[meshIndices[i]][meshIndices[i + 2]][k];\n      d.x = (positions[3 * fvs[k][k]] - positions[3 * fvs[k][0]]) / k;\n      d.y = (positions[3 * fvs[k][k] + 1] - positions[3 * fvs[k][0] + 1]) / k;\n      d.z = (positions[3 * fvs[k][k] + 2] - positions[3 * fvs[k][0] + 2]) / k;\n      u.x = (uvs[2 * fvs[k][k]] - uvs[2 * fvs[k][0]]) / k;\n      u.y = (uvs[2 * fvs[k][k] + 1] - uvs[2 * fvs[k][0] + 1]) / k;\n      for (let j = 1; j < k; j++) {\n        fvs[k][j] = positions.length / 3;\n        positions.push(positions[3 * fvs[k][0]] + j * d.x, positions[3 * fvs[k][0] + 1] + j * d.y, positions[3 * fvs[k][0] + 2] + j * d.z);\n        uvs.push(uvs[2 * fvs[k][0]] + j * u.x, uvs[2 * fvs[k][0] + 1] + j * u.y);\n      }\n    }\n    fvs[gaps] = side[meshIndices[i + 1]][meshIndices[i + 2]];\n\n    indices.push(fvs[0][0], fvs[1][0], fvs[1][1]);\n    for (let k = 1; k < gaps; k++) {\n      for (let j = 0; j < k; j++) {\n        indices.push(fvs[k][j], fvs[k + 1][j], fvs[k + 1][j + 1]);\n        indices.push(fvs[k][j], fvs[k + 1][j + 1], fvs[k][j + 1]);\n      }\n      indices.push(fvs[k][j], fvs[k + 1][j], fvs[k + 1][j + 1]);\n    }\n  }\n\n  var vertexData = new BABYLON.VertexData();\n  vertexData.positions = positions;\n  vertexData.indices = indices;\n  vertexData.uvs = uvs;\n\n  BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n  vertexData.normals = normals;\n  mesh.dispose();\n  var newmesh = new BABYLON.Mesh(\"newmesh\", scene);\n  vertexData.applyToMesh(newmesh);\n\n  return newmesh;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Events with WebXR Hand Tracking\nDESCRIPTION: Demonstrates how to handle pointer events in WebXR hand tracking, including retrieving the associated hand object from a pointer event. This is useful for implementing hand-based interactions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nconst xrHandFeature = featureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n});\n\n// ... at a later point\n\nscene.onPointerObservable.add((evt) => {\n  const pointerId = evt.event.pointerId;\n  const xrController = xrHelper.pointerSelection.getXRControllerByPointerId(pointerId);\n  const webxrHandObject = xrHandFeature.getHandByControllerId(xrController.uniqueId);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Lava Material to Unlit in Babylon.js\nDESCRIPTION: This code snippet shows how to set the Lava Material to unlit mode, which makes it ignore scene lighting. This can be useful for achieving certain visual effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/lavaMat.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmaterial.unlit = true;\n```\n\n----------------------------------------\n\nTITLE: Loading ENV Cube Texture in Babylon.js\nDESCRIPTION: This snippet shows how to load an environment map stored in the `.env` file format as a `BABYLON.CubeTexture`. The constructor takes the path to the `.env` file and the current `scene` object as arguments. `.env` files are a Babylon.js specific format often used for efficient storage of environment maps.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.CubeTexture(\"textures/filename\", scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Enabling Typed Ammo.js Physics (JavaScript)\nDESCRIPTION: Asynchronously initializes the typed `Ammo` library and enables physics on the scene using the `AmmoJSPlugin`, providing the initialized typed Ammo instance. This follows the setup using `ammojs-typed`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst ammo = await Ammo();\nscene.enablePhysics(new Vector3(0, -9.81, 0), new AmmoJSPlugin(true, ammo));\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to BoundingBoxGizmo in Babylon.js\nDESCRIPTION: Demonstrates how to add event listeners for scale and rotation drag events on a BoundingBoxGizmo.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngizmo.onScaleBoxDragObservable.add(() => {\n  console.log(\"scaleDrag\");\n});\ngizmo.onScaleBoxDragEndObservable.add(() => {\n  console.log(\"scaleEnd\");\n});\ngizmo.onRotationSphereDragObservable.add(() => {\n  console.log(\"rotDrag\");\n});\ngizmo.onRotationSphereDragEndObservable.add(() => {\n  console.log(\"rotEnd\");\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Particle System Loading and Parsing in AssetsManager Callback (JavaScript)\nDESCRIPTION: Combines the previous steps within the `AssetsManager.onFinish` callback. It first parses the loaded text file (accessed via `particleFile.text`) into a JSON object (`particleJSON`). Then, it uses `BABYLON.ParticleSystem.Parse` to create the particle system instance from the JSON data, providing the `scene`, an empty `rootURL` (assuming textures are colocated or embedded), setting `doNotStart` to `false` (allowing auto-start unless overridden in JSON), and setting a `capacity` of 1000.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_loadFromFile.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nassetsManager.onFinish = function (task) {\n    console.log(\"task successful\", task);\n\n    // prepare to parse particle system files\n    const particleJSON = JSON.parse(particleFile.text);\n    const myParticleSystem = BABYLON.ParticleSystem.Parse(particleJSON, scene, \"\", false, 1000);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing WebXR Session Manager\nDESCRIPTION: Creates a new WebXR session manager instance for a Babylon.js scene\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sessionManager = new WebXRSessionManager(scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Shadows with WebXR Light Estimation\nDESCRIPTION: Code example showing how to set up shadows using the directional light source created by the Light Estimation feature. This allows for realistic shadow casting in AR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst le = defaultXRExperience.baseExperience.featuresManager.enableFeature(BABYLON.WebXRFeatureName.LIGHT_ESTIMATION, \"latest\", {\n  createDirectionalLightSource: true,\n});\nconst shadowGenerator = new BABYLON.ShadowGenerator(512, le.directionalLight);\nshadowGenerator.useBlurExponentialShadowMap = true;\nshadowGenerator.setDarkness(0.1);\nshadowGenerator.getShadowMap().renderList.push(meshesToAdd);\n```\n\n----------------------------------------\n\nTITLE: Enabling Blur Close Exponential Shadow Map Filtering (JavaScript)\nDESCRIPTION: This code enables blurred close exponential shadow maps by setting 'useBlurCloseExponentialShadowMap' to true, combining CESM's accuracy with blurred edges for higher visual fidelity shadows in Babylon.js. Fine control can be achieved using related blur properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.useBlurCloseExponentialShadowMap = true;\n```\n\n----------------------------------------\n\nTITLE: Specifying Attachable Meshes for GizmoManager\nDESCRIPTION: Sets the meshes that can have gizmos attached to them using the GizmoManager's attachableMeshes property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngizmoManager.attachableMeshes = [mesh1, mesh2, mesh3];\n```\n\n----------------------------------------\n\nTITLE: Bone Matrix Handling in BabylonJS\nDESCRIPTION: Internal implementation details of bone matrix operations showing how BabylonJS handles different matrix types (_matrix, _localMatrix) and computation of absolute matrices. Demonstrates matrix calculation order and bone hierarchy relationships.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/boneInternals.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBone.computeAbsoluteMatrices() // Updates absolute matrix and children\nBone.setBindMatrix() // Recalculates absolute bind and inverse bind matrices\nBone._updateAbsoluteBindMatrices() // Internal update of bind matrices\nSkeleton._computeTransformMatrices // Calculates final matrices\nSkeleton.sortBones() // Ensures correct bone hierarchy order\n```\n\n----------------------------------------\n\nTITLE: Animating the ShaderMaterial Time Uniform in JavaScript\nDESCRIPTION: This JavaScript snippet sets up the animation loop using `scene.registerBeforeRender`. In each frame, it increments a `time` variable and passes its current value to the `time` uniform of the `shaderMaterial` associated with the `boxes` mesh. This continuous update of the `time` uniform drives the wave animation in the vertex shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = 0;\nscene.registerBeforeRender(function() {\n    boxes.material.setFloat(\"time\", time);\n    time +=0.1;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IBL Shadow Pipeline Properties\nDESCRIPTION: Configuration properties for the IBL shadow pipeline, including general settings, voxel properties, and screen-space shadow properties. These control shadow opacity, sample directions, resolution, and various rendering parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/IBLShadowsRenderingPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // General Properties\n  shadowOpacity: number; // 0.0 to 1.0\n  sampleDirections: number;\n  shadowRemanence: number; // 0.0 to 1.0\n  shadowRenderSizeFactor: number; // default 1.0\n\n  // Voxel Properties\n  resolutionExp: number;\n  triPlanarVoxelization: boolean;\n\n  // Screen-space Shadow Properties\n  ssShadowsEnabled: boolean;\n  ssShadowSampleCount: number;\n  ssShadowStride: number;\n  ssShadowDistanceScale: number;\n  ssShadowThicknessScale: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing GroundMesh with Octrees in Babylon.js\nDESCRIPTION: This code shows how to optimize a GroundMesh for rendering, picking, and collisions by creating an internal octree. The chunkSize parameter defines the number of submeshes to create.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeOctrees.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngroundMesh.optimize(chunkSize)\n```\n\n----------------------------------------\n\nTITLE: Mapping a Single Sprite to a Specific Box Face in Babylon.js\nDESCRIPTION: This snippet demonstrates how to map just one sprite from a texture atlas to a single face of a box. It targets only face 1 with a specific sprite from column 3, row 0.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = 6; // 6 columns\nconst rows = 4; // 4 rows\n\nconst faceUV = new Array(6);\n\nfaceUV[1] = new BABYLON.Vector4(3 / columns, 0, (3 + 1) / columns, 1 / rows);\n```\n\n----------------------------------------\n\nTITLE: Creating a Mesh Impostor in Babylon.js\nDESCRIPTION: This snippet shows how to create a Mesh Impostor in Babylon.js. The MeshImpostor wraps a complex mesh with a physics body for exact collision detection, available with the Cannon.js physics engine and primarily collides with spheres.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.MeshImpostor, {mass: 0});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tri-Planar Material with Diffuse Textures in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a tri-planar material and set its diffuse textures for each axis. It shows that different textures can be used for different axes, or the same texture can be shared.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/triPlanarMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar triPlanarMaterial = new BABYLON.TriPlanarMaterial(\"triplanar\", scene);\n\n// The 3 diffuse textures must be set, even if they share the same texture reference\ntriPlanarMaterial.diffuseTextureX = new BABYLON.Texture(\"rock.png\", scene);\ntriPlanarMaterial.diffuseTextureY = new BABYLON.Texture(\"grass.png\", scene);\ntriPlanarMaterial.diffuseTextureZ = triPlanarMaterial.diffuseTextureX;\n```\n\n----------------------------------------\n\nTITLE: Combining Textures and Colors for Mesh Faces in Babylon.js\nDESCRIPTION: This code demonstrates how to combine both UV mapping for textures and color assignment for a single mesh face, allowing both texture and color to be applied simultaneously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[f] = ((c * 1) / 6, (r * 1) / 4, ((c + 1) * 1) / 6, ((r + 1) * 1) / 4);\nfaceColors[f] = new BABYLON.Color4(r, g, b, a);\n```\n\n----------------------------------------\n\nTITLE: Instantiating NoiseProceduralTexture in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to create an instance of the built-in `BABYLON.NoiseProceduralTexture`. It requires a name, the texture size (resolution), and the scene. This texture generates Perlin noise patterns and has configurable properties like brightness, octaves, persistence, and animation speed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/proceduralTextures.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst noiseTexture = new BABYLON.NoiseProceduralTexture(\"perlin\", 256, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Ground Mesh with Specified Options in Babylon.js - JavaScript\nDESCRIPTION: Shows usage of MeshBuilder.CreateGround with specific options for width, height, and subdivisions, and demonstrates usage of the optional 'updatable' parameter. Babylon.js is required as a dependency. The first line builds a ground mesh with given sizing and subdivision, while the second allows for the ground mesh to be created as updatable by passing an additional parameter. Both return a ground mesh instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/ground.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions }, scene);\nconst ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions }, scene, updatable); //one optional parameter after scene\n```\n\n----------------------------------------\n\nTITLE: Using Parent Mesh as Center of Rotation in Babylon.js (JavaScript)\nDESCRIPTION: This code demonstrates using a parent mesh (`sphere`) to define the center of rotation. The parent sphere is positioned at `CoR_At`, the target mesh (`pilot`) is parented to the sphere and positioned relative to it (`pilotStart`), and then the parent sphere is rotated, causing the child pilot mesh to rotate around it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivot.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nsphere.position = CoR_At;\n\npilot.parent = sphere;\npilot.position = pilotStart;\n\nsphere.rotate(axis, angle, BABYLON.Space.WORLD);\n```\n```\n\n----------------------------------------\n\nTITLE: Selective Raycast Filtering with Membership Masks - Babylon.js Physics - JavaScript\nDESCRIPTION: This code demonstrates setting up filter membership masks for shapes, and conducting raycast queries with different collideWith values to selectively test against specific objects. It shows how to assign binary mask values to shapes and use them in raycastToRef calls for fine-grained collision control. Dependencies: Babylon.js with PhysicsShape and physicsEngine instances. Inputs: filterMembershipMask for each shape, collideWith mask in raycast options. Outputs: raycast results are filtered to only objects matching the collideWith mask. Useful for games or simulations needing selective collision filtering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/raycast.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar shapeA = new PhysicsShape(...);\nvar shapeB = new PhysicsShape(...);\n\nshapeA.filterMembershipMask = 1; // 01 in binary\nshapeB.filterMembershipMask = 2; // 10 in binary\n\n/**\n *  EXAMPLE 1: will test only for shape A \n */\nphysicsEngine.raycastToRef(start, end, raycastResult, {collideWith: 1});\n\n/**\n *  EXAMPLE 2: will test only for shape B \n */\nphysicsEngine.raycastToRef(start, end, raycastResult, {collideWith: 2});\n\n/**\n *  EXAMPLE 3: will test for shape A AND shape B (as 3 is 11 in binary)\n */\nphysicsEngine.raycastToRef(start, end, raycastResult, {collideWith: 3});\n```\n\n----------------------------------------\n\nTITLE: Creating Hermite Quaternion Spline in BabylonJS\nDESCRIPTION: Function that generates a Curve3 within a unit sphere representing a Hermite quaternion spline in 3D space. Takes quaternion points and tangents as input and returns normalized vectors along the spline path.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst hermiteQuarternionSpline = (p1, t1, p2, t2, nbPoints) => {\n  const hermite = new Array();\n  const step = 1.0 / nbPoints;\n  for (let i = 0; i <= nbPoints; i++) {\n    const q = BABYLON.Quaternion.Hermite(p1, t1, p2, t2, i * step);\n    q.normalize();\n    if (q.w < 0) {\n      q.scaleInPlace(-1);\n    }\n    const v = new BABYLON.Vector3(q.x / (1 + q.w), q.y / (1 + q.w), q.z / (1 + q.w));\n    hermite.push(v);\n  }\n  return new BABYLON.Curve3(hermite);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scene Clearing for Multiple Scenes in Babylon.js\nDESCRIPTION: This snippet illustrates how to configure scene clearing when rendering multiple scenes. It sets the autoClear property to false for the top scene to prevent it from erasing the previous scene's rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiScenes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene0 = new BABYLON.Scene(engine);\nvar scene1 = new BABYLON.Scene(engine);\nscene1.autoClear = false;\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading a Particle System from the Snippet Server - Babylon.js JavaScript\nDESCRIPTION: This snippet defines an asynchronous function to set up a scene and loads a particle system configuration using its snippet ID from Babylon.js’s Snippet Server. It uses async/await for asynchronous asset loading, and the loaded system is associated with the previously created emitter. Dependencies include Babylon.js’s ParticleHelper and NodeMaterial modules. It requires the 'engine', 'canvas', and the specified snippet IDs, and outputs a ready-to-render scene object. Limitations: internet access is required for snippet retrieval.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/particles_and_nme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst createScene = async function () {\n  const scene = new BABYLON.Scene(engine);\n\n  const camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, 10, BABYLON.Vector3.Zero(), scene);\n  camera.attachControl(canvas, true);\n\n  // Create a random emitter\n  const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 0.01, segments: 4 }, scene);\n\n  // Load the previously setup particle system (it was setup with the inspector)\n  let system = await BABYLON.ParticleHelper.CreateFromSnippetAsync(\"T54JV7#13\", scene, false);\n  system.emitter = sphere;\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Animation Method in BabylonJS Scene\nDESCRIPTION: This code snippet shows how to implement an asynchronous animation method in a BabylonJS scene. It creates a Promise-based function that animates the visibility of a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_3.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync animateMeshVisibility(name, from, to, speed) {\n    return new Promise((resolve, reject) => {\n      const m = this.scene.getMeshByName(name);\n      if (!m) {\n        reject(\"No mesh\");\n      }\n\n      const visibilityAnimation = new Animation(\n        \"anim\",\n        \"visibility\",\n        60,\n        Animation.ANIMATIONTYPE_FLOAT\n      );\n      const keys = [];\n\n      const frames = 60;\n      keys.push({\n        frame: 0,\n        value: from,\n      });\n\n      keys.push({\n        frame: frames,\n        value: to,\n      });\n\n      visibilityAnimation.setKeys(keys);\n\n      m.animations = [visibilityAnimation];\n      this.scene.beginAnimation(m, 0, frames, false, speed, () => {\n        resolve();\n      });\n    });\n  },\n```\n\n----------------------------------------\n\nTITLE: Defining the Mesh Simplify Function Signature in Babylon.js (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript signature for the `simplify` method available on `BABYLON.Mesh` objects. It details the parameters: `settings` (an array of ISimplificationSettings), `parallelProcessing` (boolean), `type` (SimplificationType), and an optional `successCallback` function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/simplifyingMeshes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npublic simplify(settings: Array<ISimplificationSettings>,\n                parallelProcessing: boolean = true,\n                type: SimplificationType = SimplificationType.QUADRATIC,\n                successCallback?: () => void);\n```\n\n----------------------------------------\n\nTITLE: Creating a Center of Transformation with TransformNode in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to create a TransformNode and set it as the parent of a mesh to act as a central point for transformations. Requires the Babylon.js library, with correct initialization (scene, objects). The mesh (in this case a box) is parented to the newly created TransformNode ('CoT'), so subsequent transformations (position, rotation, scaling) applied to the TransformNode will affect all its children relative to its own local frame. No rendered geometry is added by the TransformNode itself.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//create a Center of Transformation\nvar CoT = new BABYLON.TransformNode(\"root\");\nbox.parent = CoT; //apply to Box\n```\n\n----------------------------------------\n\nTITLE: Setting Up Player Camera Hierarchy in Babylon.js\nDESCRIPTION: Creates a hierarchical camera system with a root transform node, a tilt node for vertical rotation, and a UniversalCamera for player following. This structure allows for smooth camera movement and positioning behind the player character.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/playerCamera.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _setupPlayerCamera(): UniversalCamera {\n    //root camera parent that handles positioning of the camera to follow the player\n    this._camRoot = new TransformNode(\"root\");\n    this._camRoot.position = new Vector3(0, 0, 0); //initialized at (0,0,0)\n    //to face the player from behind (180 degrees)\n    this._camRoot.rotation = new Vector3(0, Math.PI, 0);\n\n    //rotations along the x-axis (up/down tilting)\n    let yTilt = new TransformNode(\"ytilt\");\n    //adjustments to camera view to point down at our player\n    yTilt.rotation = Player.ORIGINAL_TILT;\n    this._yTilt = yTilt;\n    yTilt.parent = this._camRoot;\n\n    //our actual camera that's pointing at our root's position\n    this.camera = new UniversalCamera(\"cam\", new Vector3(0, 0, -30), this.scene);\n    this.camera.lockedTarget = this._camRoot.position;\n    this.camera.fov = 0.47350045992678597;\n    this.camera.parent = yTilt;\n\n    this.scene.activeCamera = this.camera;\n    return this.camera;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Edge Rendering in Babylon.js\nDESCRIPTION: This snippet demonstrates how to enable edge rendering on a box mesh, set the edge width, and define the edge color. It uses the enableEdgesRendering method and sets edgesWidth and edgesColor properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/edgeRenderer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box1\", { size: 2 }, scene);\nbox.enableEdgesRendering();\nbox.edgesWidth = 4.0;\nbox.edgesColor = new BABYLON.Color4(0, 0, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Mesh Indices with Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of BABYLON.Mesh's optimizeIndices function to reorder a mesh's indices for potential performance improvements. It executes a callback after reordering, which can be used for additional custom operations. This method alters the index order directly and may affect mesh attributes such as UV mapping. Requires a Babylon.js mesh instance. Input is a function as a callback; no direct output except internal mesh optimization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/simplifyingMeshes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.optimizeIndices(function () {\n  //do whatever you want here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring an Input Block as System Value in Babylon.js Node Material using JavaScript\nDESCRIPTION: Demonstrates creating an InputBlock and setting it as a system-defined value, specifically viewProjection. Requires access to the BABYLON.NodeMaterialSystemValues enum. This connection injects automatic engine-driven data into the shader graph, such as view-projection matrices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst viewProjectionInput = new BABYLON.InputBlock(\"viewProjection\");\nviewProjectionInput.setAsSystemValue(BABYLON.NodeMaterialSystemValues.ViewProjection);\n```\n\n----------------------------------------\n\nTITLE: Adding Targeted Animations to Animation Groups in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to add specific animation/mesh pairs into AnimationGroups using addTargetedAnimation, thereby linking which animation affects which mesh within each group. Requires previously created Animation, Mesh, and AnimationGroup objects. Inputs: animation and mesh references; Outputs: animations linked to groups for batch control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanimationGroup1.addTargetedAnimation(animation1, mesh1);\nanimationGroup1.addTargetedAnimation(animation3, mesh1);\nanimationGroup1.addTargetedAnimation(animation2, mesh2);\n\nanimationGroup2.addTargetedAnimation(animation2, mesh3);\nanimationGroup2.addTargetedAnimation(animation1, mesh4);\nanimationGroup2.addTargetedAnimation(animation2, mesh4);\nanimationGroup2.addTargetedAnimation(animation3, mesh4);\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Ambient Color in Babylon.js\nDESCRIPTION: This snippet sets the scene's ambient color using the `ambientColor` property and a `BABYLON.Color3` object. Unlike `clearColor`, the `ambientColor` influences the final color of materials, particularly `StandardMaterial.ambientColor`. By default, `scene.ambientColor` is black (0,0,0), effectively disabling material ambient colors until a scene ambient color is set.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/environment_introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.ambientColor = new BABYLON.Color3(0.3, 0.3, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Removing a Mesh from Highlight Layer\nDESCRIPTION: Shows how to remove a previously highlighted mesh from the HighlightLayer, stopping the highlight effect on that mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Add the highlight layer.\nconst hl = new BABYLON.HighlightLayer(\"hl1\", scene);\nhl.addMesh(sphere, BABYLON.Color3.Green());\nhl.removeMesh(sphere);\n```\n\n----------------------------------------\n\nTITLE: Setting Bone Rotation with Vector3 in Babylon.js\nDESCRIPTION: Shows how to set the rotation of a bone using a Vector3 with the setRotation method. It takes a rotation vector, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbone.setRotation(rotation, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complex Game Logic Loop with Babylon.js Coroutines (JavaScript)\nDESCRIPTION: This advanced snippet implements a complete game flow using coroutines, combining conditionals, loops, nested coroutines, and Promise-based async steps. Dependencies: Babylon.js scene, working versions of displayGameLogo, enterKeyPressed, escapeKeyPressed, loadTheSceneAsync, spawnTheFirstMesh, spawnTheSecondMesh, spawnTheThirdMesh, jumpButtonPressed, saveGameStateAsync, showGoodbyeMessage, and a mutable playerCharacter object. The playGame generator handles different game phases, pauses for user keypresses and animations, waits for scene load, manages jump animation via a nested coroutine, and saves on exit. Inputs: none. Outputs: side-effects on the game state, rendering, and potentially UI. Limitations: all helper functions must be available, and input polling must happen correctly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/coroutines.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst playGame = function* () {\n  displayGameLogo();\n\n  while (!enterKeyPressed() && !escapeKeyPressed()) {\n    yield;\n  }\n\n  if (escapeKeyPressed()) {\n    return;\n  }\n\n  yield loadTheSceneAsync();\n\n  spawnTheFirstMesh();\n  yield;\n  spawnTheSecondMesh();\n  yield;\n  spawnTheThirdMesh();\n  yield;\n\n  while (!escapeKeyPressed()) {\n    if (jumpButtonPressed()) {\n      // 30 frame uninterruptable parametric jump animation\n      const jump = function* () {\n        for (let t = 0; t <= Math.PI; t += Math.PI / 30) {\n          playerCharacter.y = Math.sin(t);\n          yield;\n        }\n      };\n      // Suspend game logic until jump animation is complete\n      // (Nonsensical thing to do, just for demonstration purposes)\n      yield scene.onBeforeRenderObservable.runCoroutineAsync(jump());\n    }\n\n    yield;\n  }\n\n  yield saveGameStateAsync();\n\n  showGoodbyeMessage();\n};\nscene.onBeforeRenderObservable.runCoroutineAsync(playGame());\n```\n\n----------------------------------------\n\nTITLE: Attaching a Mesh to a WebVR Controller in JavaScript\nDESCRIPTION: Demonstrates how to attach a Babylon.js mesh to a WebVR controller using the `controller.attachToMesh(mesh)` method in JavaScript. This links the mesh's transform (position and rotation) to the controller's movements, effectively making the mesh represent the controller in the virtual space. Note that this operation assigns a new quaternion to the target mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncontroller.attachToMesh(mesh);\n```\n\n----------------------------------------\n\nTITLE: Setting Full Mass Properties on a PhysicsBody in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to explicitly set all mass properties (`mass`, `centerOfMass`, `inertia`, `inertiaOrientation`) on a `PhysicsBody` using `setMassProperties`. This provides precise control over the body's physical behavior but requires accurate values for realistic simulation. Incorrect values can lead to unnatural rotation or movement. Requires an existing `PhysicsBody`, `BABYLON.Vector3`, and `BABYLON.Quaternion`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Setting the full mass properties. ONLY DO THIS IF YOU KNOW WHAT YOU'RE DOING!\nconst body = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\nbody.setMassProperties({\n  mass: 1,\n  centerOfMass: new BABYLON.Vector3(0, 1, 0),\n  inertia: new BABYLON.Vector3(1, 1, 1),\n  inertiaOrientation: new BABYLON.Quaternion(0, 0, 0, 1)\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PBR Material with Texture-Based Metallic and Roughness in Babylon.js\nDESCRIPTION: This snippet demonstrates using a metallic-roughness texture to control surface properties per-pixel. The texture provides precise control with metallic in the B channel and roughness in the G channel.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npbr.baseColor = new BABYLON.Color3(1.0, 0.766, 0.336);\npbr.metallic = 1.0; // set to 1 to only use it from the metallicRoughnessTexture\npbr.roughness = 1.0; // set to 1 to only use it from the metallicRoughnessTexture\npbr.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\"/textures/environment.dds\", scene);\npbr.metallicRoughnessTexture = new BABYLON.Texture(\"/textures/mr.jpg\", scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Map Shader Options in Babylon.js (JavaScript)\nDESCRIPTION: This snippet defines the structure of the `options` object required by `CreateSkeletonMapShader`. It must contain the target `skeleton`. An optional `colorMap` array can be provided to customize the color gradient used to represent different bones.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet options = {\n   skeleton : BABYLON.Skeleton,\n   colorMap? : any[]\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Components with @fromScene Decorator in TypeScript\nDESCRIPTION: This example demonstrates using the @fromScene decorator to retrieve components by traversing the entire scene. It shows a component class accessing a DirectionalLight named \"sun\" from anywhere in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/gettingComponents.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\n\nimport { fromScene } from \"../decorators\";\n\nexport default class MyMeshComponent extends Mesh {\n    @fromScene(\"sun\")\n    private _sun: DirectionalLight;\n\n    public onStart(): void {\n        this._sun.intensity = 10;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Physics Pre-Step Computation in Babylon.js (JavaScript)\nDESCRIPTION: This code sets the `disablePreStep` property of the bowling ball's physics body (`ballAggregate.body`) to `false`. This prevents Babylon.js from performing its default pre-step physics calculations (like updating position/velocity based on external forces), allowing for direct manual control of the ball's motion via keyboard input without interference. Requires the `ballAggregate` object created previously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nballAggregate.body.disablePreStep = false;\n```\n\n----------------------------------------\n\nTITLE: Applying CubeTexture to Skybox in Babylon.js\nDESCRIPTION: Configures the skybox material with a CubeTexture and sets appropriate coordinates mode for skybox rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nskyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"textures/skybox\", scene);\nskyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n```\n\n----------------------------------------\n\nTITLE: Assigning Particle Parent by Index in Babylon.js - JavaScript\nDESCRIPTION: This code assigns a parent to each particle by updating the parentId property to reference the previous particle in the array (lower index). The check ensures that the first particle (idx = 0) does not attempt to assign a non-existent parent. Parenting enables relative transformations within the PCS, so when a particle has a parent, its position and rotation are calculated in the parent's local space. This logic requires that the .idx and .parentId fields are present on the particle object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (particle.idx > 0) {\n    particle.parentId = particle.idx - 1; // the previous particle becomes the parent of the current one\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating File-Based CustomProceduralTexture in JavaScript\nDESCRIPTION: Demonstrates how to create an instance of `BABYLON.CustomProceduralTexture` in JavaScript for a file-based texture. It requires a name, the relative path to the folder containing `config.json` and `custom.fragment.fx`, the desired texture size, and the scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst texture = new BABYLON.CustomProceduralTexture(\"texture\", \"./pathtotexture\", 1024, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Pivot Matrix for Mesh - Babylon.js (JavaScript)\nDESCRIPTION: Updates the mesh pivot using a transformation matrix. mesh.setPivotMatrix is called with a translation matrix generated by BABYLON.Matrix.Translation. This is an alternative to setPivotPoint and allows finer control over local transforms. Input parameter: a Vector3 for the translation. Output: mesh's pivot and local transform are updated. Dependencies: Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotMatrix(BABYLON.Matrix.Translation(Vector3));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotMatrix(BABYLON.Matrix.Translation(-x, -y, -z));\n```\n\n----------------------------------------\n\nTITLE: Duplicating Models Using AssetContainer.instantiateModelsToScene in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates how to clone all models stored in an AssetContainer into the active scene, returning an entries object containing lists of rootNodes, skeletons, and animationGroups created. Requires a filled AssetContainer. This process does not reload resources from disk and clones references as needed. No parameters are required for default cloning; result is a grouped entries object for further manipulation or disposal.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetContainers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet entries = container.instantiateModelsToScene();\n```\n\n----------------------------------------\n\nTITLE: Frame Maker Implementation in Babylon.js\nDESCRIPTION: Complete implementation of the frameMaker function that creates customizable frames using paths and profiles. Handles corner calculations and mesh generation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Frame.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar frameMaker = function(name, options, scene) {\t\n\n\tvar path = options.path;\n\tvar profile = options.profile;\n\t\n\tvar originX = Number.MAX_VALUE;\n\t\n\tfor(let m = 0; m < profile.length; m++) {\n\t\toriginX = Math.min(originX, profile[m].x);\n\t}\n\n\tvar innerData = [];\n        var outerData = [];\n\tvar angle = 0;\n\tvar extrusion = 0;\n\tvar width = 0;\n\tvar cornerProfile = [];\n\t\n\tvar nbPoints = path.length;\n\tvar line = BABYLON.Vector3.Zero();\n\tvar nextLine = BABYLON.Vector3.Zero();\n\tpath[1].subtractToRef(path[0], line);\n\tpath[2].subtractToRef(path[1], nextLine);    \n\t\n\tfor(let p = 0; p < nbPoints; p++) {    \n\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            \n\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().z;                \n\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\tline.normalize();\n\t\textrusionLength = line.length();\n\t\tcornerProfile[(p + 1) % nbPoints] = [];\n\t\t//local profile\n\t\tfor(m = 0; m < profile.length; m++) {\n\t\t\twidth = profile[m].x - originX;\n\t\t\tcornerProfile[(p + 1) % nbPoints].push(path[(p + 1) % nbPoints].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2))));   \n\t\t}   \n\t\t\n\t\tline = nextLine.clone();        \n\t\tpath[(p + 3) % nbPoints].subtractToRef(path[(p + 2) % nbPoints], nextLine);    \n\t}\n\t\n\tvar frame = [];\n\tvar extrusionPaths = []\n\t\n\tfor(let p = 0; p < nbPoints; p++) {\n\t\textrusionPaths = [];\n\t\tfor(let m = 0; m < profile.length; m++) {\n\t\t\textrusionPaths[m] = [];\n\t\t\textrusionPaths[m].push(new BABYLON.Vector3(cornerProfile[p][m].x, cornerProfile[p][m].y, profile[m].y));\n\t\t\textrusionPaths[m].push(new BABYLON.Vector3(cornerProfile[(p + 1) % nbPoints][m].x, cornerProfile[(p + 1) % nbPoints][m].y, profile[m].y));\n\t\t}\n\t\t\n\t\tframe[p] = BABYLON.MeshBuilder.CreateRibbon(\"frameLeft\", {pathArray: extrusionPaths, sideOrientation: BABYLON.Mesh.DOUBLESIDE, updatable: true, closeArray: true}, scene);\n\t}\n\t\n\treturn BABYLON.Mesh.MergeMeshes(frame, true).convertToFlatShadedMesh();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Capsule with MeshBuilder in Babylon.js\nDESCRIPTION: Creates a capsule mesh using BABYLON.MeshBuilder.CreateCapsule method. Supports various options including orientation, subdivisions, tessellation, height, radius, and cap customization. Requires Babylon.js version 4.2+.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/capsule.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst capsule = BABYLON.MeshBuilder.CreateCapsule(\"ribbon\", options, scene);  //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Frame Graph Object Rendering Task\nDESCRIPTION: Sets up the main rendering task using `FrameGraphObjectRendererTask`. It defines a list of objects to render (meshes from the scene). The task's target color and depth textures are linked to the output textures of the preceding `clearTask`. The scene's camera is assigned, and the task is added to the frame graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst rlist = {\n    meshes: scene.meshes,\n    particleSystems: []\n}\n\nconst renderTask = new BABYLON.FrameGraphObjectRendererTask(\"renderObjects\", frameGraph, scene);\n\nrenderTask.targetTexture = clearTask.outputTexture;\nrenderTask.depthTexture = clearTask.outputDepthTexture;\nrenderTask.objectList = rlist;\nrenderTask.camera = camera;\n\nframeGraph.addTask(renderTask);\n```\n\n----------------------------------------\n\nTITLE: Creating MorphTarget Manually in Babylon.js\nDESCRIPTION: This snippet illustrates creating a `BABYLON.MorphTarget` instance directly, providing a name and initial influence. Vertex data like positions and normals must be set manually using methods like `setPositions()` and `setNormals()`. This approach is useful when the target shape is defined programmatically rather than from an existing mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = new BABYLON.MorphTarget(name, influence);\ntarget.setPositions(...);\ntarget.setNormals(...);\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Controls for Jump and Dash\nDESCRIPTION: Adds keyboard input handling for jump and dash actions using the input controller. Maps the Shift key for dashing and Space key for jumping.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt2.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.inputMap[\"Shift\"]) {\n  this.dashing = true;\n} else {\n  this.dashing = false;\n}\n\nif (this.inputMap[\" \"]) {\n  this.jumpKeyDown = true;\n} else {\n  this.jumpKeyDown = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a Button3D Control in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates the instantiation of a Button3D control, assignment of 2D GUI content (a TextBlock), and customization of button text, color, and font size. This pattern is central to embedding information or prompts in VR/AR scenes. Dependencies include Babylon.js GUI classes (Button3D, TextBlock) and proper scene setup. Input includes button and text parameters; output is a Button3D with assigned content. Limitations: content must be 2D GUI compatible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = new BABYLON.GUI.Button3D(\"reset\");\n\nconst text = new BABYLON.GUI.TextBlock();\ntext.text = \"reset\";\ntext.color = \"white\";\ntext.fontSize = 24;\nbutton.content = text;\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Rotation as Quaternion in Babylon.js\nDESCRIPTION: Demonstrates how to get the rotation of a bone as a Quaternion using the getRotationQuaternion method. It takes space (world or local) and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst rotationQuaternion = bone.getRotationQuaternion(BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Including Specific Meshes in GlowLayer in Babylon.js\nDESCRIPTION: Shows how to include only specific meshes in the glow effect using the addIncludedOnlyMesh function. This switches the GlowLayer to only render the included meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/glowLayer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new BABYLON.GlowLayer(\"glow\", scene);\ngl.addIncludedOnlyMesh(mesh);\n```\n\n----------------------------------------\n\nTITLE: Assigning Depth Map Texture to a Material in Babylon.js with JavaScript\nDESCRIPTION: This snippet illustrates how to assign the depth map generated by the DepthRenderer as the emissive texture of a standard material. It leverages the getDepthMap() function to retrieve the depth texture. This is useful for applying depth-based effects to meshes; 'scene' should reference an existing Babylon.js scene configured with a depth renderer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/depthValuesDepthRenderer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mat = new BABYLON.StandardMaterial(\"mat01\", scene);\nmat.emissiveTexture = renderer.getDepthMap();\n```\n\n----------------------------------------\n\nTITLE: Optional _executeOnTick Method Override for AsyncExecutionBlock\nDESCRIPTION: Example of an optional _executeOnTick method override that can be implemented for frame-by-frame updates. This method allows blocks to perform continuous updates rather than just responding to signals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npublic override _executeOnTick(_context: FlowGraphContext): void {\n    // this function is called on each frame, and can be used to update the block's logic\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Size Gradient Over Lifetime (Value Ranges) in Babylon.js\nDESCRIPTION: Demonstrates using `addSizeGradient` with three arguments to define a range of possible sizes at different points in the particle's lifetime. The actual size will be randomly chosen within the specified range at each time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addSizeGradient(0, 0.5, 0.8); //size range at start of particle lifetime\nparticleSystem.addSizeGradient(0.4, 1, 2); //size range at 2/5 of duration of particle system\nparticleSystem.addSizeGradient(1.0, 3, 4); //size range at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Setting Pivot Point Using World Space Position - Babylon.js (JavaScript)\nDESCRIPTION: Calculates and sets the pivot point of a mesh based on a position in world space by subtracting the mesh position from the desired world coordinate. Uses BABYLON.Vector3's subtract method. Input: mesh at (xc, yc, zc), target world space (xp, yp, zp). Output: pivot set at correct world-aligned location. Dependencies: Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotPoint(BABYLON.Vector3(xp - xc, yp - yc, zp - z));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pivotAt = new BABYLON.Vector3(1, 1, 1);\nconst relativePosition = pivotAt.subtract(box.position)\nbox.setPivotPoint(relativePosition);\n```\n\n----------------------------------------\n\nTITLE: Registering DecalMap Material Plugin Globally in Babylon.js (ES6/Tree Shaking) - JavaScript\nDESCRIPTION: This snippet illustrates how to globally register a material plugin for decal maps in Babylon.js when using ES6 modules and Tree Shaking, ensuring all materials can access decal map support without individual updates. It requires importing the proper dependency (`Meshes/abstractMesh.decalMap`) and Babylon.js core. The `RegisterMaterialPlugin` function adds a new DecalMapConfiguration to each material, enabling decal functionality. The function accepts each material as a parameter and returns its associated configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/decals.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nBABYLON.RegisterMaterialPlugin(\"DecalMap\", (material) => {\n    material.decalMap = new BABYLON.DecalMapConfiguration(material);\n    material.decalMap.isEnabled = true;\n    return material.decalMap;\n}) ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Animations in BabylonJS\nDESCRIPTION: Shows how to chain animations using the beginDirectAnimation method with a callback function for the next animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/combineAnimations.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.beginDirectAnimation(box, [yRot], 0, 2 * frameRate, false, 1, nextAnimation);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextAnimation = function () {\n  scene.beginDirectAnimation(box, [xSlide], 0, 2 * frameRate, true);\n};\n```\n\n----------------------------------------\n\nTITLE: Using TransformNode as Center of Rotation in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to use a `BABYLON.TransformNode` as a center of rotation. It creates a `TransformNode`, positions it at the desired center (`CoR_At`), parents the target mesh (`pilot`) to it, sets the mesh's position relative to the pivot (`pilotStart`), and then rotates the `TransformNode` itself around the specified `axis` by `angle` in world space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivot.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar pivot = new BABYLON.TransformNode(\"root\");\npivot.position = CoR_At;\n\npilot.parent = pivot;\npilot.position = pilotStart;\n\npivot.rotate(axis, angle, BABYLON.Space.WORLD);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Lamp Shape for Extrusion\nDESCRIPTION: Creates a circular shape outline using Vector3 points in the x,y plane for lamp post extrusion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/lights.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lampShape = [];\n    for(let i = 0; i < 20; i++) {\n        lampShape.push(new BABYLON.Vector3(Math.cos(i * Math.PI / 10), Math.sin(i * Math.PI / 10), 0));\n    }\nlampShape.push(lampShape[0]); //close shape\n```\n\n----------------------------------------\n\nTITLE: Configuring SkeletonViewer Construction Options in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows the structure of the optional `options` object passed to the `SkeletonViewer` constructor. It allows controlling animation pausing during construction, forcing rest pose, specifying computation mode (CPU/GPU), including all bones, setting the display mode, and providing display-mode-specific visual parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet options {\n   pauseAnimations?: boolean, //True or False flag to pause the animations while trying to construct the debugMesh. Default: True\n   returnToRest?: boolean, //Flag to force the skeleton back into its restPose before constructing the debugMesh. Default: False\n   computeBonesUsingShaders?: boolean, //Tell the debugMesh to use or not use the GPU for its calculations, if you ever want to do picking on the mesh this will need to be False. Default: True\n   useAllBones?: boolean, //Visualize all bones or skip the ones with no influence.\n   displayMode?: number //A value that controls which display mode to use. (SkeletonViewer.DISPLAY_LINES = 0, SkeletonViewer.DISPLAY_SPHERES = 1, SkeletonViewer.DISPLAY_SPHERE_AND_SPURS = 2). Default = 0.\n   displayOptions?: any //The visual parameters for the debugMeshes.\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Black and White Material Plugin in Babylon.js\nDESCRIPTION: Demonstrates how to create a basic material plugin that converts rendered objects to grayscale. The plugin extends MaterialPluginBase and modifies the fragment shader to calculate and apply luminance values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materialPlugins.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Extend from MaterialPluginBase to create your plugin.\n */\nclass BlackAndWhitePluginMaterial extends BABYLON.MaterialPluginBase {\n  constructor(material) {\n    // the second parameter is the name of this plugin.\n    // the third one is a priority, which lets you define the order multiple plugins are run. Lower numbers run first.\n    // the fourth one is a list of defines used in the shader code.\n    super(material, \"BlackAndWhite\", 200, { BLACKANDWHITE: false });\n\n    // let's enable it by default\n    this._enable(true);\n  }\n\n  // Also, you should always associate a define with your plugin because the list of defines (and their values)\n  // is what triggers a recompilation of the shader: a shader is recompiled only if a value of a define changes.\n  prepareDefines(defines, scene, mesh) {\n    defines[\"BLACKANDWHITE\"] = true;\n  }\n\n  getClassName() {\n    return \"BlackAndWhitePluginMaterial\";\n  }\n\n  // This is used to inform the system which language is supported\n  isCompatible(shaderLanguage) {\n    switch (shaderLanguage) {\n        case BABYLON.ShaderLanguage.GLSL:\n        case BABYLON.ShaderLanguage.WGSL:\n            return true;\n        default:\n            return false;\n    }\n  }\n\n  getCustomCode(shaderType, shaderLanguage) {\n      if (shaderType === \"fragment\") { \n        // we're adding this specific code at the end of the main() function\n        if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {\n            return {\n                CUSTOM_FRAGMENT_MAIN_END: `\n                            var luma = fragmentOutputs.color.r*0.299 + fragmentOutputs.color.g*0.587 + fragmentOutputs.color.b*0.114;\n                            fragmentOutputs.color = vec4f(luma, luma, luma, 1.0);\n                        `,\n            };\n        }\n         \n        return {\n            CUSTOM_FRAGMENT_MAIN_END: `\n                        float luma = gl_FragColor.r*0.299 + gl_FragColor.g*0.587 + gl_FragColor.b*0.114;\n                        gl_FragColor = vec4(luma, luma, luma, 1.0);\n                    `,\n        };\n    }\n    // for other shader types we're not doing anything, return null\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning ShadowDepthWrapper with Remapped Variables for Node Materials in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to parse a NodeMaterial from a snippet asynchronously, retrieve the variable name associated with the final world position, and configure the material's shadowDepthWrapper with a remapped variable. This setup is necessary for accurate per-material shadow depth computations when using NodeMaterials in Babylon.js v4.2+. It ensures that the shadow mapping logic references the correct world position during shadow map generation. The snippet assumes the variable is named 'worldPosFinal', but this may differ per node material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nBABYLON.NodeMaterial.ParseFromSnippetAsync(\"XXXXXX\", scene).then((nodeMaterial) => {\n  const worldPosVarName = nodeMaterial.getBlockByName(\"worldPosFinal\").output.associatedVariableName;\n\n  mesh.material = nodeMaterial;\n  mesh.material.shadowDepthWrapper = new BABYLON.ShadowDepthWrapper(nodeMaterial, scene, {\n    remappedVariables: [\"worldPos\", worldPosVarName],\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ImageProcessing PostProcess in Babylon.js\nDESCRIPTION: Implements comprehensive image processing effects including color grading, curves, contrast, and vignette.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.ImageProcessingPostProcess(\"processing\", 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity with Reflection in PBR Materials\nDESCRIPTION: Example showing how to set up a glass material with opacity while maintaining reflections. This allows for effects like seeing reflections on transparent surfaces such as windows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nglass.reflectionTexture = hdrTexture;\nglass.alpha = 0.5;\n```\n\n----------------------------------------\n\nTITLE: XRService Configuration Options Type Definition\nDESCRIPTION: TypeScript type definition for the XRService initialization options. Defines configuration parameters including the immersive mode, features, UI settings, floor configurations, collision settings, and debug options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/webxrextension.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TXRServiceOptions = {\n\tmode: 'immersive-vr' | 'immersive-ar';\n\tfeatures?: TXRFeaturesConfig;\n\tneedBabylonUIEnterButton?: boolean;\n\tfloors?: string[];\n\tenableColliding?: boolean;\n\tdebugConfig?: TClickLoggerOptions & {\n\t\toutSlotName: string;\n\t\tisLoggerDeactivated?: boolean;\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Forces to Physics Objects in Babylon.js\nDESCRIPTION: Demonstrates how to apply continuous forces to physics objects over time. Forces are applied for the duration of a frame interval and require direction, magnitude, and contact point parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/forces.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//Force Settings\nvar forceDirection = new BABYLON.Vector3(1, 0, 0);\nvar forceMagnitude = 50;\nvar contactLocalRefPoint = BABYLON.Vector3.Zero();\n\nimpostor.applyForce(forceDirection.scale(forceMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n```\n\n----------------------------------------\n\nTITLE: Creating Heightmap From Square Ribbon in Babylon.js\nDESCRIPTION: This code generates a heightmap from a square ribbon using mathematical functions to create paths. The snippet defines an exponential path function, creates an array of paths, and then builds a ribbon mesh with a HeightmapImpostor for physics interactions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar exponentialPath = function (p) {\n    var path = [];\n    for (let i = -50; i <= 50; i++) {\n        path.push(new BABYLON.Vector3(p-50, (Math.sin(p / 3) * 10 * Math.exp((i - p) / 100) + i / 3), i));\n    }\n    return path;\n};\n// let's populate arrayOfPaths with all these different paths\nvar arrayOfPaths = [];\nfor (let p = 0; p <= 100; p++) {\n    arrayOfPaths[p] = exponentialPath(p);\n\n}\n\nvar mesh = BABYLON.Mesh.CreateRibbon(\"ribbon\", arrayOfPaths, false, false, 0, scene);\nmesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.HeightmapImpostor, { mass: 0, friction:1, restitution: 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Creating a Reflective Metallic Material with PBR in Babylon.js\nDESCRIPTION: This code configures a highly reflective PBR material by setting metallic to maximum and roughness to zero, creating a perfect mirror-like surface.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npbr.baseColor = new BABYLON.Color3(1.0, 0.766, 0.336);\npbr.metallic = 1.0;\npbr.roughness = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating an Extruded Polygon with MeshBuilder in Babylon.js\nDESCRIPTION: Demonstrates the usage of `BABYLON.MeshBuilder.ExtrudePolygon` to create an extruded polygon mesh. This method requires a `shape` (an array of Vector3 defining the polygon in the xz plane) and a `depth` (the extrusion amount along the y-axis). Optional parameters allow defining holes, face colors, UV mapping, texture wrapping, updatability, and side orientation. This method depends on the Earcut library for concave polygons.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/extrude_polygon.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst extrudedPolygon = BABYLON.MeshBuilder.ExtrudePolygon(\"polygon\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation States Through User Input in Babylon.js\nDESCRIPTION: This example demonstrates a TestPlayerController class that connects user input to animation parameters. The controller retrieves vertical and horizontal input values and passes them to the AnimationState component, which controls character animations based on these values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/06_AnimationState.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class TestPlayerController extends BABYLON.MeshComponent {\n            private animator:BABYLON.AnimationState = null;\n            protected start() :void {\n                this.animator = this.getComponent(\"BABYLON.AnimationState\");\n            }\n            protected update() :void {\n                const vertical:number = this.manager.getUserInput(BABYLON.UserInputAxis.Vertical, BABYLON.PlayerNumber.One);\n                const horizontal:number = this.manager.getUserInput(BABYLON.UserInputAxis.Horizontal, BABYLON.PlayerNumber.One);\n                // ..\n                if (this.animator != null) {\n                    this.animator.setFloat(\"Forward\", vertical);\n                    this.animator.setFloat(\"Strafe\", horizontal);\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Physics Compound Shapes for a Character Mesh\nDESCRIPTION: This code demonstrates how to approximate a complex character mesh using a compound of simple physics shapes - a sphere for the head and a box for the body. It creates transform nodes for positioning, adds physics shapes, and combines them in a PhysicsShapeContainer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/compounds.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMesh = BABYLON.ImportMeshAsync(...);\n\nconst headNode = new BABYLON.TransformNode(\"headNode\");\nheadNode.position.y = 3;\nheadNode.parent = myMesh;\nconst bodyNode = new BABYLON.TransformNode(\"bodyNode\");\nbodyNode.parent = myMesh;\n\nconst boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0, 0, 0), new BABYLON.Quaternion(0, 0, 0, 1), new BABYLON.Vector3(1, 2, 1), scene);\nconst sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0, 0, 0), 1, scene);\n\nconst parentShape = new BABYLON.PhysicsShapeContainer(scene);\n\nparentShape.addChildFromParent(myMesh, boxShape, bodyNode);\nparentShape.addChildFromParent(myMesh, sphereShape, headNode);\n\nconst body = new BABYLON.PhysicsBody(myMesh, scene);\nbody.shape = parentShape;\n```\n\n----------------------------------------\n\nTITLE: Extending Block Factory for Internal Blocks in BabylonJS Flow Graph (JavaScript)\nDESCRIPTION: This snippet shows how to add a new block to the blockFactory function in flowGraphBlockFactory.ts. It demonstrates the async-oriented approach for lazy loading of blocks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport function blockFactory(blockName: FlowGraphBlockNames | string): () => Promise<typeof FlowGraphBlock> {\n  switch (blockName) {\n    case FlowGraphBlockNames.PlayAnimation:\n      return async () => (await import(\"./Execution/Animation/flowGraphPlayAnimationBlock\")).FlowGraphPlayAnimationBlock;\n    // ...\n    // add this before the last default case\n    case FlowGraphBlockNames.MyNewBlock:\n      // async-return the right file and the right class\n      return async () => (await import(\"./MyNewBlock\")).FlowGraphMyNewBlock;\n    //...\n    default:\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Shared Vertices for Soft Body Mesh\nDESCRIPTION: Method to ensure mesh vertices are properly shared between adjacent facets to prevent soft body tearing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.forceSharedVertices();\n```\n\n----------------------------------------\n\nTITLE: Adding Mesh and Light to Utility Layer Scene - Babylon.js JavaScript\nDESCRIPTION: Creates a mesh (box) and a hemispheric light in the utility layer's overlay scene. This snippet demonstrates adding objects that appear only in the overlay, setting their positioning, and configuring lighting independently from the main scene. Requires MeshBuilder and utility layer scene context, and outputs created mesh and light objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create an overlay box\nconst overlayBox = BABYLON.MeshBuilder.CreateBox(\"box\", { size: 1 }, utilLayer.utilityLayerScene);\noverlayBox.position.z = 0.5;\noverlayBox.position.y = 3.5;\n// Create a different light for the overlay scene\nconst overlayLight = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 0, 1), utilLayer.utilityLayerScene);\noverlayLight.intensity = 0.7;\n```\n\n----------------------------------------\n\nTITLE: Per-Letter UV Mapping for 3D Text - Babylon.js JavaScript\nDESCRIPTION: This snippet utilizes the perLetterFaceUV callback parameter to apply distinct UV mapping for each letter of a 3D text mesh. By calculating UV regions based on the letter index, it enables individualized texturing across the mesh. It requires the same prerequisites as other MeshBuilder.CreateText usages and is useful for advanced per-letter effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/text.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst letterCount = 10;\\n    const step = 1 / letterCount;\\n    var myText = BABYLON.MeshBuilder.CreateText(\"myText\", \"HELLO WORLD\", fontData, {\\n        size: 16,\\n        resolution: 64,\\n        depth: 10,\\n        perLetterFaceUV: (index) => {\\n            const startX = index * step;\\n            return [\\n                new BABYLON.Vector4(startX, 0, startX + step, 1),\\n                new BABYLON.Vector4(startX, 0, startX + step, 1),\\n                new BABYLON.Vector4(startX, 0, startX + step, 1),\\n            ];\\n        }\\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Pivot Point at Relative Position - Babylon.js (JavaScript)\nDESCRIPTION: Sets the pivot point of a mesh at a specific position relative to its local origin using setPivotPoint and a BABYLON.Vector3 value. This updates the rotation and scale center for the mesh. Dependencies: Babylon.js core classes. Parameters: x, y, z specify the offset from the local origin. Output: mesh pivot moved to specified coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotPoint(new BABYLON.Vector3(x, y, z));\n```\n\n----------------------------------------\n\nTITLE: Initializing WebGPU Engine in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to initialize a WebGPU engine in Babylon.js. It creates a new WebGPUEngine instance and asynchronously initializes it. This initialization process is the main difference when migrating existing WebGL applications to WebGPU.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = new BABYLON.WebGPUEngine(canvas);\nawait engine.initAsync();\n```\n\n----------------------------------------\n\nTITLE: Loading Character Model and Playing Animation in Babylon.js\nDESCRIPTION: Demonstrates how to import a GLB model with animations into a Babylon.js scene and play a specific animation group. The code loads the character, scales it, attaches the camera to it, and plays the Samba animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animatedCharacter.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Load hero character and play animation\nBABYLON.ImportMeshAsync(\"https://assets.babylonjs.com/meshes/HVGirl.glb\", scene).then(function (result) {\n  var hero = result.meshes[0];\n\n  //Scale the model down\n  hero.scaling.scaleInPlace(0.1);\n\n  //Lock camera on the character\n  camera1.target = hero;\n\n  //Get the Samba animation Group\n  const sambaAnim = scene.getAnimationGroupByName(\"Samba\");\n\n  //Play the Samba animation\n  sambaAnim.start(true, 1.0, sambaAnim.from, sambaAnim.to, false);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing GlowLayer in Babylon.js\nDESCRIPTION: Creates a new GlowLayer instance to make all emissive parts of a scene glow. This is the basic setup for adding a glow effect to meshes in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/glowLayer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new BABYLON.GlowLayer(\"glow\", scene);\n```\n\n----------------------------------------\n\nTITLE: Converting ArrayBuffer to Blob in JavaScript\nDESCRIPTION: This snippet converts the loaded ArrayBuffer into a Blob object in memory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadFromMemory.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetBlob = new Blob([assetArrayBuffer]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Controller Definitions\nDESCRIPTION: Shows how to import and prioritize local controller definitions over online repository\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// import the ones you want to use\nimport { WebXRMicrosoftMixedRealityController } from \"@babylonjs/core/XR/motionController/webXRMicrosoftMixedRealityController\";\n\n// prioritize the local classes (but use online if controller not found)\nWebXRMotionControllerManager.PrioritizeOnlineRepository = false;\n// or disable the online repository\nWebXRMotionControllerManager.UseOnlineRepository = false;\n\n// now, if loading a microsoft motion controller it will use the local class\n```\n\n----------------------------------------\n\nTITLE: Handling Character Movement Based on Keyboard Input in Babylon.js\nDESCRIPTION: Updates character position and rotation based on keyboard inputs in the rendering loop. This code moves the character forward with 'w', backward with 's', and rotates left or right with 'a' and 'd' respectively.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animatedCharacter.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (inputMap[\"w\"]) {\n  hero.moveWithCollisions(hero.forward.scaleInPlace(heroSpeed));\n  keydown = true;\n}\nif (inputMap[\"s\"]) {\n  hero.moveWithCollisions(hero.forward.scaleInPlace(-heroSpeedBackwards));\n  keydown = true;\n}\nif (inputMap[\"a\"]) {\n  hero.rotate(BABYLON.Vector3.Up(), -heroRotationSpeed);\n  keydown = true;\n}\nif (inputMap[\"d\"]) {\n  hero.rotate(BABYLON.Vector3.Up(), heroRotationSpeed);\n  keydown = true;\n}\nif (inputMap[\"b\"]) {\n  keydown = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LOD with Mesh Instances in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create multiple instances of a mesh with LOD levels. The root mesh defines the LOD levels, and all instances automatically inherit them without requiring additional configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/LOD.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = 3;\nconst scale = 4;\n\nconst knot00 = BABYLON.Mesh.CreateTorusKnot(\"knot0\", 0.5, 0.2, 128, 64, 2, 3, scene);\nconst knot01 = BABYLON.Mesh.CreateTorusKnot(\"knot1\", 0.5, 0.2, 32, 16, 2, 3, scene);\nconst knot02 = BABYLON.Mesh.CreateTorusKnot(\"knot2\", 0.5, 0.2, 24, 12, 2, 3, scene);\nconst knot03 = BABYLON.Mesh.CreateTorusKnot(\"knot3\", 0.5, 0.2, 16, 8, 2, 3, scene);\n\nknot00.setEnabled(false);\n\nknot00.addLODLevel(15, knot01);\nknot00.addLODLevel(30, knot02);\nknot00.addLODLevel(45, knot03);\nknot00.addLODLevel(55, null);\n\nfor (let x = -count; x <= count; x++) {\n    for (let y = -count; y <= count; y++) {\n        for (let z = 5; z < 10; z++) {\n            const knot = knot00.createInstance(\"knotI\"),\n            knot.position = new BABYLON.Vector3(x * scale, y * scale, z * scale);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Detail Maps in Babylon.js\nDESCRIPTION: Applies a detail map texture to add fine details to materials when viewed up close. The detail map can contain albedo, normal, and roughness information to enhance the material's appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/moreMaterials.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.detailMap.texture = new BABYLON.Texture(\"textures/detailmap.png\", scene);\nmyMaterial.detailMap.isEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Initializing Ammo.js Plugin with Webpack 5 (JavaScript)\nDESCRIPTION: Imports the `ammo.js` library, asynchronously initializes it using `await ammo()`, and then creates an instance of the `AmmoJSPlugin` for Babylon.js, passing the initialized Ammo object. This setup is typical for Webpack 5 environments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport ammo from \"ammo.js\";\nconst Ammo = await ammo();\n...\nconst ammoPlugin = new AmmoJSPlugin(true, Ammo);\n```\n\n----------------------------------------\n\nTITLE: Advanced Fresnel Parameters with Power Adjustment in Babylon.js\nDESCRIPTION: Creates a center-focused reflection with increased power value. Setting power to 4 makes the transition between edge and center more pronounced, creating a sharper reflection effect toward the center.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/fresnelParameters.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.reflectionFresnelParameters = new BABYLON.FresnelParameters();\nmaterial.reflectionFresnelParameters.leftColor = BABYLON.Color3.Black();\nmaterial.reflectionFresnelParameters.rightColor = BABYLON.Color3.White();\nmaterial.reflectionFresnelParameters.power = 4;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Detail Map Strength in Babylon.js\nDESCRIPTION: Controls the intensity of detail map effects by setting blend levels for diffuse, bump, and roughness components. These parameters allow fine-tuning how much the detail map affects each aspect of the material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/moreMaterials.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.detailMap.diffuseBlendLevel = 0.1; // between 0 and 1\nmyMaterial.detailMap.bumpLevel = 1; // between 0 and 1\nmyMaterial.detailMap.roughnessBlendLevel = 0.25; // between 0 and 1\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Basic ScrollViewer in JavaScript\nDESCRIPTION: Demonstrates how to create a new instance of the `BABYLON.GUI.ScrollViewer` control, either anonymously or with a specific name. This is the first step in using a scroll viewer and requires the `BABYLON.GUI` module.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/scrollViewer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myScrollViewer = new BABYLON.GUI.ScrollViewer();\n// OR\nconst myScrollViewer = new BABYLON.GUI.ScrollViewer(\"name\");\n```\n\n----------------------------------------\n\nTITLE: Simplifying a Height Map Ground Mesh on Ready in Babylon.js (JavaScript)\nDESCRIPTION: This code shows how to simplify a ground mesh created using `BABYLON.MeshBuilder.CreateGroundFromHeightMap`. Simplification is initiated within the `onReady` callback to ensure the mesh is fully generated from the height map image before simplification starts.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/simplifyingMeshes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ground = BABYLON.MeshBuilder.CreateGroundFromHeightMap(\"ground\", \"textures/heightmap.png\", {width: 20, height: 20, subdivisions: 100, onReady: (readyMesh) => {\n    //Simplify mesh here\n    readyMesh.simplify([{quality: 0.1, distance: 10}]);\n    ...\n}}, scene);\n```\n\n----------------------------------------\n\nTITLE: Importing ES6 WebXR Feature\nDESCRIPTION: Shows how to import and enable a specific WebXR feature using ES6 modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    WebXRControllerPhysics\n} from '@babylonjs/core/XR/features/WebXRControllerPhysics';\n\nfm.enableFeature(WebXRControllerPhysics.Name, \"latest\");\n```\n\n----------------------------------------\n\nTITLE: Defining the setParticles Update Cycle in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates the canonical loop for updating particles within a PCS in Babylon.js, outlining the invocation order for hooks such as before and after particle updates. Demonstrates the internal call structure for per-frame behavior customization. No external dependencies beyond Babylon.js; 'nbParticles', 'particles', and the update functions are assumed accessible from the calling scope.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setParticles() {\\n    beforeUpdateParticles();\\n    for (let p = 0; p < nbParticles; p++) {\\n        updateParticles(particles[p]);\\n    }\\n    afterUpdateParticles();\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fire Procedural Texture in Babylon.js\nDESCRIPTION: Creates a fire procedural texture and applies it to a standard material. The texture is used for both diffuse and opacity mapping to create a realistic fire effect. The texture size is set to 256x256 pixels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/proceduralTexturesLibrary/fire.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fireMaterial = new BABYLON.StandardMaterial(\"fireMat\", scene);\nvar fireTexture = new BABYLON.FireProceduralTexture(\"fireTex\", 256, scene);\nfireMaterial.diffuseTexture = fireTexture;\nfireMaterial.opacityTexture = fireTexture;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a HolographicSlate in Babylon.js (JavaScript)\nDESCRIPTION: Shows the process of creating a GUI3DManager, adding a HolographicSlate, setting properties (title, minDimensions, dimensions, titleBarHeight), and assigning its content after addition with a new Image. Allows interactive dragging, rotation, and scaling of the slate. Dependencies: Babylon.js GUI3DManager, HolographicSlate, Image, Vector2. Inputs: customization of slate/title bar, textures; output: interactive, draggable holographic slate.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the 3D UI manager\nconst manager = new BABYLON.GUI.GUI3DManager(scene);\n\n// Let's add a slate\nconst slate = new BABYLON.GUI.HolographicSlate(\"down\");\nslate.title = \"Checkers\";\nslate.minDimensions = new BABYLON.Vector(5, 5);\nslate.dimensions = new BABYLON.Vector2(10, 10);\nslate.titleBarHeight = 1.5;\nmanager.addControl(slate);\n// Must be done AFTER addControl in order to overwrite the default content\nslate.content = new BABYLON.GUI.Image(\"checkers\", \"./textures/Checker_Albedo.png\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Sphere Ribbon in Babylon.js\nDESCRIPTION: Generates a sphere-shaped ribbon using spherical coordinates, demonstrating how to create complex 3D surfaces with parametric equations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_maths.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst paths = [];\nfor (let t = 0; t < Math.PI; t += Math.PI / 32) {\n    const path = [];\n    for (let a = 0; a < 2 * Math.PI; a += Math.PI / 32) {\n        let x = 4 * Math.cos(a) * Math.sin(t);\n        let y = 4 * Math.sin(a) * Math.sin(t);\n        let z = 4 * Math.cos(t);\n        path.push(new BABYLON.Vector3(x, y, z))\n    }\n    path.push(path[0]); // close circle\n    paths.push(path)\n}\n```\n\n----------------------------------------\n\nTITLE: TextFileAssetTask Constructor and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Shows the type signature and main output fields for tasks that load text files asynchronously. Provides the file url and, after loading, the raw text data. Used for generic textual content fetches.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, url: string)\n\npublic url: string;\npublic text: string;\n```\n\n----------------------------------------\n\nTITLE: Observing AnimationGroup Loop Events in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates listening for individual animation loops within a group using onAnimationLoopObservable. Logs the name of the looping animation to the console. Requires Babylon.js; AnimationGroup with animations assigned. Input: callback function; Output: log output on each animation loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nanimationGroup1.onAnimationLoopObservable.add(function (targetAnimation) {\n  console.log(targetAnimation.animation.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Illumination Manager with RSMs in Babylon.js - JavaScript\nDESCRIPTION: Shows how to initialize the GIRSMManager object which coordinates GI computation using multiple RSMs. Assumes Babylon.js is available with an Engine 'engine' and Scene 'scene', and that GI RSMs have been constructed. The code determines appropriate texture dimensions, instantiates GI manager, and attaches RSMs and materials for GI-enabled rendering. Adjusting the defaultGITextureRatio allows tuning performance versus quality. Outputs a GI manager instance that handles GI processing for the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/rsmgi.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputDimensions = {\n    width: engine.getRenderWidth(true),\n    height: engine.getRenderHeight(true),\n};\n\nconst defaultGITextureRatio = 2;\n\nconst giTextureDimensions = {\n    width: Math.floor(engine.getRenderWidth(true) / defaultGITextureRatio),\n    height: Math.floor(engine.getRenderHeight(true) / defaultGITextureRatio),\n};\n\nconst giRSMMgr = new BABYLON.GIRSMManager(scene, outputDimensions, giTextureDimensions, 2048);\n\ngiRSMMgr.addGIRSM(giRSMs);\ngiRSMMgr.addMaterial(); // no specific material transmitted to addMaterial, so all materials in the scene will be configured to render with GI\n```\n\n----------------------------------------\n\nTITLE: Creating a Worker and Sending Offscreen Canvas in JavaScript\nDESCRIPTION: This code creates a new Web Worker and sends the offscreen canvas to it using postMessage. The offscreen canvas is transferred, not copied, to the worker.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/offscreenCanvas.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar worker = new Worker(\"worker.js\");\nworker.postMessage({ canvas: offscreen }, [offscreen]);\n```\n\n----------------------------------------\n\nTITLE: Adding Alpha Remap Gradients to Babylon.js ParticleSystem - JavaScript\nDESCRIPTION: Applies addAlphaRemapGradient to map alpha values throughout a particle’s lifetime in a Babylon.js ParticleSystem. This alters the index used for gradient lookup based on alpha, affecting particle transparency evolution. Assumes an existing particleSystem setup. The inputs are the life fraction (0 to 1) and the corresponding minimum and maximum remap values for alpha.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/ramps_and_blends.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.addAlphaRemapGradient(0, 0, 0.1);\nparticleSystem.addAlphaRemapGradient(1.0, 0.1, 0.8);\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js GUI Module - JavaScript\nDESCRIPTION: This snippet shows how to import the Babylon.js GUI module into a JavaScript project after installing it via NPM. Importing '* as GUI' from '@babylonjs/gui' provides access to all GUI components and controls for subsequent usage within your application scripts. Dependencies: '@babylonjs/gui' (installed via NPM). The import should be placed at the top of your JavaScript or TypeScript file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as GUI from '@babylonjs/gui'\n```\n\n----------------------------------------\n\nTITLE: Enabling Physics with Default and Custom Gravity in Babylon.js\nDESCRIPTION: Demonstrates how to enable physics in a Babylon.js scene with either default gravity or custom gravity values. Shows implementation for all three supported physics engines.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/forces.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*When physics is enabled use default gravity*/\nscene.enablePhysics(null, new BABYLON.CannonJSPlugin());\nscene.enablePhysics(null, new BABYLON.OimoJSPlugin());\n\nawait Ammo();\nscene.enablePhysics(null, new BABYLON.AmmoJSPlugin());\n\n//set gravity\nscene.enablePhysics(new BABYLON.Vector3(0, -5, 0), new BABYLON.CannonJSPlugin());\nscene.enablePhysics(new BABYLON.Vector3(0, -5, 0), new BABYLON.OimoJSPlugin());\nscene.enablePhysics(new BABYLON.Vector3(0, -5, 0), new BABYLON.AmmoJSPlugin());\n```\n\n----------------------------------------\n\nTITLE: Starting Asset Loading and Using onFinish Callback (JavaScript)\nDESCRIPTION: Invokes the texture task's 'load' method to begin loading. The onFinish callback is registered to initialize the render loop once all assets are loaded. The '_this.engine.runRenderLoop' ensures continuous scene rendering after successful completion. Be mindful to set up tasks before calling 'load()'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntextureTask.load();\n\ntextureTask.onFinish = (tasks) => {\n  // do render stuff\n  _this.engine.runRenderLoop(() => {\n    _this.scene.render();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching a Mesh to a Bone in Babylon.js\nDESCRIPTION: Shows how to attach a mesh to a specific bone in a skeleton. This is useful for attaching objects like weapons to character bones. The example attaches a sword to the 34th bone of a character's skeleton.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsword.attachToBone(skeleton.bones[34], character);\n```\n\n----------------------------------------\n\nTITLE: Enabling Depth Sorting for SPS Transparency in Babylon.js\nDESCRIPTION: This code demonstrates how to create a Solid Particle System with depth sorting enabled to handle transparency issues. The snippet shows how to initialize an SPS with enableDepthSort, and how to toggle depth sorting on or off using the depthSortParticles property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_transparency.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// create a particle depth sort enabled SPS\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, {\n  enableDepthSort: true\n});\n\n// then later, only do ...\nsps.setParticles(); // and the particle are depth sorted each call\n\n// We can skip the sorting at any time (or reactive it) : sps and camera not moving anymore\nsps.depthSortParticles = false; // true by default when enableDepthSort is set to true\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Texture with Spritesheet - Babylon.js JavaScript\nDESCRIPTION: Shows how to assign a spritesheet texture to the ParticleSystem.particleTexture property. The BABYLON.Texture constructor receives the path to the image file, the rendering scene, and flags for noMipMaps and invertY, affecting how the sheet is read. Requires a valid spritesheet image, a previously created Babylon.js scene, and the BABYLON module.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/animation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.particleTexture = new BABYLON.Texture(\"textures/player.png\", scene, true, false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Grain Effect in Babylon.js Pipeline\nDESCRIPTION: Enables and configures grain effect with controls for intensity and animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.grainEnabled = true;\npipeline.grain.intensity = 10;\npipeline.grain.animated = value;\n```\n\n----------------------------------------\n\nTITLE: Configuring Depth of Field in Babylon.js Pipeline\nDESCRIPTION: Sets up depth of field effect with customizable focus distance, focal length, and f-stop parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.depthOfFieldEnabled = true;\npipeline.depthOfFieldBlurLevel = BABYLON.DepthOfFieldEffectBlurLevel.Low;\npipeline.depthOfField.focusDistance  = 2000;\npipeline.depthOfField.focalLength  = 50;\npipeline.depthOfField.fStop  = 1.4;\n```\n\n----------------------------------------\n\nTITLE: Modifying Output Signals for SequenceBlock in BabylonJS\nDESCRIPTION: This snippet illustrates how to change the number of output signals for a SequenceBlock after it has been created. This method allows for dynamic adjustment of the block's behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsequence.setNumberOfOutputSignals(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Directional Light Shadow Properties in Babylon.js\nDESCRIPTION: Control directional light shadow behavior by adjusting properties like autoUpdateExtends, shadowOrthoScale, and shadowFrustumSize. These properties determine the projection window size and optimization for the shadow map.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlight.autoUpdateExtends = false; // Turn off automatic extent updates\nlight.shadowOrthoScale = 0.1; // 10% increase from optimal size\nlight.shadowFrustumSize = 0; // Specify a value to define square frustum size\n```\n\n----------------------------------------\n\nTITLE: Instantiating Babylon.js Timeline with Custom Thumbnail Callback (javascript)\nDESCRIPTION: Provides a full example of constructing a Timeline object on an HTML canvas, specifying essential options like totalDuration, thumbnail sizing, a loading image URI, and a getThumbnailCallback function to asynchronously generate thumbnails. The callback implementation demonstrates dynamic video element creation for thumbnail extraction at specific times, but warns that this is intended for demonstration only and may create excessive video elements in production. Inputs include a reference to a canvas and an options object; output is an initialized Timeline instance ready for rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeline = new Timeline(timelineCanvas, {\n        totalDuration: 60,\n        thumbnailWidth: 128,\n        thumbnailHeight: 120,\n        loadingTextureURI: \"./assets/loading.png\",\n        getThumbnailCallback: (time: number, done: (input: any) => void) => {\n            // This is strictly for demo purpose and should not be used in prod as it creates as many videos\n            // as there are thumbnails all over the timeline.\n            const hiddenVideo = document.createElement(\"video\");\n            document.body.append(hiddenVideo);\n            hiddenVideo.style.display = \"none\";\n\n            hiddenVideo.setAttribute(\"playsinline\", \"\");\n            hiddenVideo.muted = true;\n            hiddenVideo.autoplay = navigator.userAgent.indexOf(\"Edge\") > 0 ? false : true;\n            hiddenVideo.loop = false;\n\n            hiddenVideo.onloadeddata = () => {\n                if (time === 0) {\n                    done(hiddenVideo);\n                }\n                else {\n                    hiddenVideo.onseeked = () => {\n                        done(hiddenVideo);\n                    }\n                    hiddenVideo.currentTime = time;\n                }\n            }\n\n            hiddenVideo.src = \"./assets/test.mp4?\" + time;\n            hiddenVideo.load();\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Support in Maya for Babylon.js Export\nDESCRIPTION: This code snippet outlines the light features supported in the Babylon.js Maya exporter. It includes different light types, inclusion/exclusion lists, light properties like intensity and color, as well as animation and custom attribute support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Maya.md#2025-04-23_snippet_4\n\nLANGUAGE: plain\nCODE:\n```\n- _Lights_\n      \\* Point / spot / directional / ambient\n  - Inclusion / exclusion lists\n        * Position / direction\n        * Intensity\n        * Diffuse\n        * Specular\n    _ Animations: Position, direction\n    _ Custom attributes\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Sound Tracks in Babylon.js\nDESCRIPTION: This snippet shows how to create a SoundTrack object and add sounds to it. It also demonstrates how sounds can be moved between different tracks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst soundTrack = new BABYLON.SoundTrack(scene);\nsoundTrack.addSound(cellolong);\nsoundTrack.addSound(violons11);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst soundTrack1 = new BABYLON.SoundTrack(scene);\nsoundTrack1.addSound(cellolong);\nsoundTrack1.addSound(violons11);\n\nconst soundTrack2 = new BABYLON.SoundTrack(scene);\nsoundTrack2.addSound(violons11);\n```\n\n----------------------------------------\n\nTITLE: Instantiating ImageFilter with a Custom Engine in JavaScript\nDESCRIPTION: Demonstrates creating an ImageFilter instance using a manually instantiated Babylon.js Engine. This allows for more specific engine configurations or sharing a WebGL context with other Babylon.js controls or scenes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = new Engine(filterCanvas);\nconst imageFilter = new ImageFilter(engine);\n```\n\n----------------------------------------\n\nTITLE: Enabling Fluid Rendering for a Particle System in Babylon.js\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the fluid rendering effect for a standard Babylon.js particle system. It first gets or creates the fluid renderer instance for the scene using `scene.enableFluidRenderer()` and then adds the specified `particleSystem` to be rendered as a fluid using `fluidRenderer.addParticleSystem()`. This requires both a `scene` and a `particleSystem` object to be defined beforehand.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/demos.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fluidRenderer = scene.enableFluidRenderer() ;\nfluidRenderer.addParticleSystem(particleSystem);\n```\n\n----------------------------------------\n\nTITLE: Building Walls with Doors and Windows Using buildFromPlan - Babylon.js - JavaScript\nDESCRIPTION: These code snippets demonstrate the use of the buildFromPlan function in Babylon.js to generate a custom 3D mesh of house walls with doors and windows from a 2D floor plan. The buildFromPlan function accepts a list of wall definitions, mesh thickness, height, configuration options (such as colors and UV mappings), and a Babylon.js scene, and returns a mesh object ready for rendering. To use these snippets, dependencies include an initialized Babylon.js scene, proper wall, door, and window objects as described in documentation, and supporting types such as Color4 and Vector4 from Babylon.js. Key parameters configure geometry, material colors, and texture coordinates, and outputs are flat-shaded, color-customizable, properly triangulated meshes. Limitations include the need for clockwise/counterclockwise ordering of polygon points and compatibility with Babylon.js for proper function execution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbuildFromPlan(walls, 0.3, 2, {}, scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuildFromPlan(walls, 1, 10, { interiorColor: new BABYLON.Color4(1, 0, 0, 1), exteriorColor: new BABYLON.Color4(0, 0.5, 1, 1) }, scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbuildFromPlan(walls, 0.87, 6.21, { interiorUV: new BABYLON.Vector4(0, 0, 0.5, 1), exteriorUV: new BABYLON.Color4(0.5, 1, 1, 1) }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Simple GLSL Fragment Shader for Procedural Texture\nDESCRIPTION: A basic GLSL fragment shader (`custom.fragment.fx`) that sets every pixel of the procedural texture to a fixed gray color (`vec3(0.9, 0.9, 0.9)`). It defines the `main` function which is executed for each pixel and sets the output `gl_FragColor`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    void main(void) {\n     vec3 color = vec3(0.9, 0.9, 0.9);\n     gl_FragColor = vec4(color, 1.0);\n    }\n```\n\n----------------------------------------\n\nTITLE: Controlling Firework Lifecycle Logic in BabylonJS (JavaScript)\nDESCRIPTION: This JavaScript code snippet manages the state progression of a firework effect within the _startFirework function in BabylonJS. It handles an initial delay, launches the rocket particle system, moves it upwards, triggers an explosion upon reaching a specific height, and cleans up resources like the emitter and rocket trail system. It depends on pre-existing BabylonJS particle systems (_rocket, _emitter), an explosion function (_explosions), and related state variables (_started, _exploded, _height, _delay).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nif (this._started) {\n  //if it's started, rocket flies up to height & then explodes\n  if (this._emitter.position.y >= this._height && !this._exploded) {\n    //transition to the explosion particle system\n    this._exploded = !this._exploded; // don't allow for it to explode again\n    this._explosions(this._emitter.position);\n    this._emitter.dispose();\n    this._rocket.stop();\n  } else {\n    //move the rocket up\n    this._emitter.position.y += 0.2;\n  }\n} else {\n  //use its delay to know when to shoot the firework\n  if (this._delay <= 0) {\n    this._started = true;\n    //start particle system\n    this._rocket.start();\n  } else {\n    this._delay--;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Binding Custom Texture Sampler in Babylon.js Compute Shader (JavaScript)\nDESCRIPTION: Shows how to use a custom `BABYLON.TextureSampler` with a compute shader. The sampler variable (\"srcSampler\") must be included in the `bindingsMapping` during `ComputeShader` instantiation. A `TextureSampler` instance is created, configured using `setParameters()`, and then bound to the shader using `setTextureSampler()` with the corresponding variable name.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cs1 = new BABYLON.ComputeShader(\"myCompute\", engine, { computeSource: copyTextureComputeShader }, { bindingsMapping:\n    {\n        \"dest\": { group: 0, binding: 0 },\n        \"srcSampler\": { group: 0, binding: 1 },\n        \"src\": { group: 0, binding: 2 }\n    }\n});\nconst sampler = new BABYLON.TextureSampler().setParameters();\ncs1.setTextureSampler(\"samplerSrc\", sampler);\n```\n\n----------------------------------------\n\nTITLE: Defining Shader Material using ShaderBuilder in JavaScript\nDESCRIPTION: This JavaScript code demonstrates an alternative way to create the shader material using `BABYLONX.ShaderBuilder`. It initializes the builder, sets basic properties like solid color (though overridden by map), declares the `box_spacing` uniform, applies a texture map, and injects the custom vertex shader logic inline to calculate the vertical wave offset. Finally, it builds the material for the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLONX.ShaderBuilder.InitializeEngine();\n\t\t\nvar shaderMaterial =   new BABYLONX.ShaderBuilder()             \n\t.Solid({ b: 1 })\n\t.SetUniform('box_spacing', 'float')\n    .Map({path:'amiga.jpg'  }) \n\t.VertexShader(\n        ' float bn = pos.x/box_spacing;\\\n          result = vec4( pos.x, pos.y + sin(time + bn/4.0), pos.z  ,1.);')\n\t.BuildMaterial(scene);\n```\n\n----------------------------------------\n\nTITLE: Loading Node Material from File Asynchronously using JavaScript\nDESCRIPTION: Provides JavaScript code to asynchronously load a Babylon.js Node Material from a JSON file previously saved from the Node Material Editor. It uses `BABYLON.NodeMaterial.ParseFromFileAsync`, requiring a name for the shader, the URL pointing to the saved JSON file, and the current Babylon.js scene object. The function returns a promise that resolves to the loaded NodeMaterial instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet nodeMaterial = await BABYLON.NodeMaterial.ParseFromFileAsync(\"Name For Your Shader\", \"URL To Your Saved Shader\", scene);\n```\n\n----------------------------------------\n\nTITLE: Handling Raycast Hit Results for Ground Detection in Babylon.js (JavaScript)\nDESCRIPTION: Checks the result of the `pickWithRay` operation. If the ray hit a mesh (`pick.hit` is true), it returns the coordinates of the intersection point (`pick.pickedPoint` as a `Vector3`). If the ray did not hit anything, it returns `Vector3.Zero()` to indicate that no ground was detected within the ray's length.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (pick.hit) {\n    return pick.pickedPoint;\n} else {\n    return Vector3.Zero();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Dashed Lines in Babylon.js with JavaScript\nDESCRIPTION: This snippet demonstrates how to set the color of a Babylon.js dashed line mesh directly using a Color3 object, bypassing the need for a material. The primary parameter is the 'color' property, which can be set with a Color3 instance representing RGB values. Input is an existing mesh and a Color3; output is a visually colored dashed line.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/dashed.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndashedlines.color = new BABYLON.Color3(1, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Using BoneIKController in Babylon.js\nDESCRIPTION: Shows how to use the BoneIKController for Inverse Kinematics. It requires creating target and pole target meshes, and setting up the controller with the character mesh, target bone, and various options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = BABYLON.MeshBuilder.CreateSphere(\"\", { diameter: 5 }, scene);\nconst poleTarget = BABYLON.MeshBuilder.CreateSphere(\"\", { diameter: 2.5 }, scene);\n\npoleTarget.parent = characterMesh;\n\nconst ikCtrl = new BABYLON.BoneIKController(characterMesh, forearmBone, { targetMesh: target, poleTargetMesh: poleTarget, poleAngle: Math.PI });\n\nscene.registerBeforeRender(function () {\n  ikCtrl.update();\n});\n\ntarget.setEnabled(false);\npoleTarget.setEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Extracting Points and Length from Cubic Bezier - Babylon.js - JavaScript\nDESCRIPTION: This code returns the array of sampled points and length of the cubic Bezier curve, useful for path construction and metrics. The bezier3 variable comes from the Curve3.CreateCubicBezier factory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = bezier3.getPoints();\nconst l = bezier3.length();\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Casters in Babylon.js (JavaScript)\nDESCRIPTION: This snippet adds a mesh (in this case, 'torus') to the shadow map's render list, designating it as a shadow caster. The method 'getShadowMap().renderList.push' specifies which meshes will cast shadows computed by the ShadowGenerator. Additional meshes can be included as needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.getShadowMap().renderList.push(torus);\n```\n\n----------------------------------------\n\nTITLE: Setting Ideal Resolution and Adaptive Scaling in Babylon.js GUI (JavaScript)\nDESCRIPTION: Describes how to enable adaptive scaling by specifying idealWidth or idealHeight on an AdvancedDynamicTexture in Babylon.js. When set, all pixel values are scaled in accordance with the specified ideal resolution; further controls for rendering at ideal size and toggling between width and height scaling are available. These assignments help build responsive UIs and optimize performance for dynamic canvas sizes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyAdvancedDynamicTexture.idealWidth = 600;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyAdvancedDynamicTexture.idealHeight = 400;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyAdvancedDynamicTexture.renderAtIdealSize = true;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyAdvancedDynamicTexture.useSmallestIdeal = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Lines with MeshBuilder in Babylon.js\nDESCRIPTION: Demonstrates how to create and update line meshes using MeshBuilder.CreateLines(). Shows usage of basic options including points array and updatable flag, as well as instance updating.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/lines.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  points: myPoints, //vec3 array,\n  updatable: true,\n};\n\nlet lines = BABYLON.MeshBuilder.CreateLines(\"lines\", options, scene); //scene is optional and defaults to the current scene\n\n// Update\noptions.points[0].x += 6;\noptions.instance = lines;\nlines = BABYLON.MeshBuilder.CreateLines(\"lines\", options); //No scene parameter when using instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Tinted Clear Coat in Babylon.js PBR Material\nDESCRIPTION: This JavaScript code configures the tint properties of the clear coat layer on a Babylon.js PBR material. It enables tinting (`clearCoat.isTintEnabled`), sets the tint color (`tintColor`), defines the color depth reference (`tintColorAtDistance`), and specifies the coating thickness (`tintThickness`), simulating colored coatings based on Beer-Lambert's law. Assumes `pbr` is an existing `BABYLON.PBRMaterial` instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\npbr.clearCoat.isTintEnabled = true;\npbr.clearCoat.tintColor = BABYLON.Color3.Teal();\npbr.clearCoat.tintColorAtDistance = 1;\npbr.clearCoat.tintThickness = 1.5;\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Mass Properties on a PhysicsBody in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates setting only the `mass` property for a `PhysicsBody` using the `setMassProperties` method. The physics engine (like Havok) can often automatically compute other related properties (center of mass, inertia) based on the body's shape and the provided mass. Requires an existing `PhysicsBody` instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Setting only the basic mass properties\nconst body = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\nbody.setMassProperties({\n  mass: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Water Material in Babylon.js\nDESCRIPTION: Basic setup of water material with ground mesh creation and bump texture assignment. Creates a ground mesh and applies water material with essential bump texture for proper rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/waterMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 512, height: 512, subdivisions: 32 }, scene);\n\nvar waterMaterial = new BABYLON.WaterMaterial(\"water_material\", scene);\nwaterMaterial.bumpTexture = new BABYLON.Texture(\"bump.png\", scene); // Set the bump texture\n\nground.material = waterMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Ribbons with MeshBuilder in Babylon.js\nDESCRIPTION: Demonstrates how to create and update a ribbon mesh using MeshBuilder. Shows options configuration including pathArray, updatable property, and instance updating.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    pathArray: myPaths, //[vector3 array, vector3 array, vector3 array......]\n    updatable: true\n}\n\nlet ribbon = BABYLON.MeshBuilder.CreateRibbon(\"ribbon\", options, scene); //scene is optional and defaults to the current scene\n\noptions.pathArray: myNewPaths; //The length must equal the length of myPaths and myNewPaths[i].length === myPaths[i] for all i\noptions.instance = true;\n\n// updates the existing instance of ribbon : no need for the parameter scene\nribbon = BABYLON.MeshBuilder.CreateRibbon(\"ribbon\", {pathArray: myNewPath, instance: ribbon});\n```\n\n----------------------------------------\n\nTITLE: Checking Ray Intersection Using Ray.intersectsMesh in Babylon.js\nDESCRIPTION: Checks for intersection between a `BABYLON.Ray` (`myRay`) and a specific mesh (`box`) using the `intersectsMesh` method of the Ray class. This method requires the ray to be transformed into the mesh's local coordinate system beforehand for accurate results. It returns `PickingInfo` if an intersection occurs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// check to see if the ray intersects the mesh and capture the pick information\nlet pickingInfo = myRay.intersectsMesh(box);\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Particle System Set Asynchronously in JavaScript\nDESCRIPTION: Shows how to create a GPU-accelerated particle system set using `BABYLON.ParticleHelper.CreateAsync`. This is achieved by passing `true` as the third argument to the function, indicating that GPU particles should be used if available.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particleHelper.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ParticleHelper.CreateAsync(\"sun\", scene, true).then((set) => {\n    set.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a 6DoF (Six Degrees of Freedom) Constraint in Babylon.js\nDESCRIPTION: This example shows how to create and configure a 6DoF constraint with specific limitations on translational and rotational axes. It sets a minimum and maximum distance between bodies and limits rotation around the Y-axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/constraints.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This will constraint the bodies to mantain a distance of at least 1 and at most 2, and to rotate at most 1.58 rad along the perpendicular axis\nlet constraint = new BABYLON.Physics6DoFConstraint({\n    pivotA: new BABYLON.Vector3(0, -0.5, 0),\n    pivotB: new BABYLON.Vector3(0, 0.5, 0),\n    perpAxisA: new BABYLON.Vector3(1, 0, 0),\n    perpAxisB: new BABYLON.Vector3(1, 0, 0),\n}, [\n    {axis: BABYLON.PhysicsConstraintAxis.LINEAR_DISTANCE, minLimit: 1, maxLimit: 2},\n    {axis: BABYLON.PhysicsConstraintAxis.ANGULAR_Y, minLimit: 0, maxLimit: 1.58}\n], scene);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hand Animation Playback with AnimatedHand\nDESCRIPTION: Example demonstrating how to play back hand animations using the AnimatedHand class, including data loading and playback configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/handsAnimation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Upload a data file or get the data in another way\nconst animationData = animationDataProvider.get('conduct_an_orchestra');\n\n// 2. Create an AnimatedHand instance (or two if we have animation for both hands)\nconst handR = new AnimatedHand('right', scene);\n\n// 3. Here setup the instance (set material, mesh, positions, etc)\n\n// 4. Start playback\n// It possible use it in async-await or in callback style\nawait handR.play(\n    animationData,\n    true,\n    showProgressFunction\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Combined Bounding Box Min/Max from Two Vectors in Babylon.js (JavaScript)\nDESCRIPTION: Calculates the overall minimum and maximum corner coordinates required to encompass two separate bounding boxes. It uses the static methods `BABYLON.Vector3.Minimize` and `BABYLON.Vector3.Maximize` to compare the respective min/max vectors (`sphereMin`, `groundMin`, `sphereMax`, `groundMax`) obtained from the individual meshes. Requires the input variables to be `BABYLON.Vector3` instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet newMin = BABYLON.Vector3.Minimize(sphereMin, groundMin);\nlet newMax = BABYLON.Vector3.Maximize(sphereMax, groundMax);\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Callback in BabylonJS\nDESCRIPTION: Demonstrates how to register a collision callback between two physics impostors. The example changes an object's color when it collides with the ground.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsphereImpostor.registerOnPhysicsCollide(groundImpostor, function(main, collided) {\n    main.object.material.diffuseColor = new BABYLON.Color3(Math.random(), Math.random(), Math.random());\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Shapes on Dynamic Texture in Babylon.js\nDESCRIPTION: Demonstrates transforming a rectangle on a dynamic texture by translating the canvas context to a center point and rotating it before drawing. Uses save() and restore() to maintain context state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst texSize = 512;\n\nctx.save();\n\n// define position and size of rectangle\nconst left = texSize * 0.5 - (texSize * 0.125);\nconst top = texSize * 0.5 - (texSize * 0.125);\nconst width = 0.25 * texSize;\nconst height = 0.25 * texSize;\n\n// translate context to center rotation of rectangle\nconst rotationCenterU = width * 0.5 + left;\nconst rotationCenterV = height * 0.5 + top;\nctx.translate(rotationCenterU, rotationCenterV);\n\n// rotate context before drawing\nctx.rotate(Math.PI/4);\n\n// draw rectangle\nctx.fillStyle = \"Red\";\nctx.fillRect(-width * 0.5, -height * 0.5, width, height);\n\nctx.restore();\n```\n\n----------------------------------------\n\nTITLE: Creating Goldberg Polyhedron with MeshBuilder\nDESCRIPTION: Creates a Goldberg polyhedron mesh using MeshBuilder with configurable options including size and orientation parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst goldbergPoly = BABYLON.MeshBuilder.CreateGoldberg(\"goldberg\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Loading GUI from JSON URL in Babylon.js\nDESCRIPTION: Creates a fullscreen UI texture and loads a GUI layout from a JSON file URL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/guiEditor.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"GUI\", true, scene);\nlet loadedGUI = await advancedTexture.parseFromURLAsync(\"https://doc.babylonjs.com/examples/ColorPickerGui.json\");\n```\n\n----------------------------------------\n\nTITLE: Applying Filter and Getting Output as Texture in JavaScript\nDESCRIPTION: Demonstrates using the `getFilteredTexture` method to apply a filter to an input source (`imageToResize`) and retrieve the result as a Babylon.js Texture object instead of rendering to the canvas. Requires specifying the desired output texture dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst texture = imageFilter.getFilteredTexture(imageToResize, { width: 128, height: 100 }, filter);\n```\n\n----------------------------------------\n\nTITLE: Loading Game Assets Sequentially in BabylonJS\nDESCRIPTION: Demonstrates proper asset loading order with environment loading before character assets.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/importMeshes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//--LOAD ASSETS--\nawait this._environment.load(); //environment assets\n//...loading character asset\n```\n\n----------------------------------------\n\nTITLE: Setting Physics Substeps in Babylon.js\nDESCRIPTION: This code demonstrates how to configure physics substeps to run physics calculations at a different frequency than the frame rate. In this example, physics is computed at 10 times per second rather than the default 60 FPS.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar physicsEngine = scene.getPhysicsEngine();\nphysicsEngine.setSubTimeStep(100);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scene Elements in Babylon.js\nDESCRIPTION: Creates default camera, light and environment settings for a basic scene setup\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultCameraOrLight(true, true, true);\nscene.createDefaultEnvironment();\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Reflection with Fresnel Parameters in Babylon.js\nDESCRIPTION: Sets colors to apply reflection on the edges of an object. White color on the left (edges) and black on the right (center) creates a reflection effect that appears strongest at the edges of the object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/fresnelParameters.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.reflectionFresnelParameters.leftColor = BABYLON.Color3.White();\nmaterial.reflectionFresnelParameters.rightColor = BABYLON.Color3.Black();\n```\n\n----------------------------------------\n\nTITLE: Creating a Physics Aggregate with a Sphere in Babylon.js\nDESCRIPTION: Creates a sphere mesh and associates it with a physics aggregate using the SPHERE shape type. This basic example demonstrates how to add physics to a mesh with minimal code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/aggregates.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.Mesh.CreateSphere(\"sphere\", 16, 2, scene);\nconst aggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Player Animation State Management\nDESCRIPTION: Controls player animation states based on input conditions and movement states for running, jumping, falling, and idle animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/animations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (!this._dashPressed && !this._isFalling && !this._jumped \n    && (this._input.inputMap[\"ArrowUp\"]\n    || this._input.inputMap[\"ArrowDown\"] \n    || this._input.inputMap[\"ArrowLeft\"]\n    || this._input.inputMap[\"ArrowRight\"])) {\n\n    this._currentAnim = this._run;\n} else if (this._jumped && !this._isFalling && !this._dashPressed) {\n    this._currentAnim = this._jump;\n} else if (!this._isFalling && this._grounded) {\n    this._currentAnim = this._idle;\n} else if (this._isFalling) {\n    this._currentAnim = this._land;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Arc Rotate Camera in Babylon.js\nDESCRIPTION: Creates an arc rotate camera with specified parameters for camera control and replacement options\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultCamera(true, true, true);\n```\n\n----------------------------------------\n\nTITLE: Physics Collision Handler\nDESCRIPTION: Implementation of collision detection and physics authority transfer between players. When a collision occurs, the box's physics authority is transferred to the colliding player.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (key === room.sessionId) {\n  //...\n  box.physicsImpostor.registerOnPhysicsCollide(playerViews[sessionId].physicsImpostor, function (main, collided) {\n    room.send(\"boxUpdate\", {\n      targetId: sessionId,\n      position: { x: box.position.x, y: box.position.y, z: box.position.z },\n      quaternion: { x: box.rotationQuaternion.x, y: box.rotationQuaternion.y, z: box.rotationQuaternion.z, w: box.rotationQuaternion.w },\n    });\n  });\n} else {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Glowing Greased Lines in Babylon.js\nDESCRIPTION: Illustrates how to create a glowing Greased Line using a GlowLayer. It sets the line color to null and uses the emissive color for the glow effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst points1 = [-6, 0, 0, 6, 0, 0];\nconst line1 = BABYLON.CreateGreasedLine(\"line1\", { points: points1 }, { width: 1 });\nline1.greasedLineMaterial.color = null;\nline1.material.emissiveColor = BABYLON.Color3.Red();\n\nconst gl = new BABYLON.GlowLayer(\"glow\", scene, {\n  blurKernelSize: 32,\n});\ngl.intensity = 1.8;\ngl.referenceMeshToUseItsOwnMaterial(line1);\n```\n\n----------------------------------------\n\nTITLE: Return Environment Assets in BabylonJS\nDESCRIPTION: Returns the environment mesh objects including the root and all child meshes for further processing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/importMeshes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  env: env, //reference to our entire imported glb (meshes and transform nodes)\n  allMeshes: allMeshes, // all of the meshes that are in the environment\n};\n```\n\n----------------------------------------\n\nTITLE: Loading and Playing Sounds from a .babylon File in Babylon.js\nDESCRIPTION: This snippet demonstrates how to load a .babylon scene file containing sounds, access a specific sound using getSoundByName(), and play it on a keypress event.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst canvas = document.getElementById(\"renderCanvas\");\nconst engine = new BABYLON.Engine(canvas, true);\nBABYLON.LoadSceneAsync(\"TestScene/testsound.babylon\", engine).then(function (newScene) {\n  newScene.executeWhenReady(function () {\n    newScene.activeCamera.attachControl(canvas);\n\n    const gunshotSound = newScene.getSoundByName(\"gunshot-1.wav\");\n    window.addEventListener(\"keydown\", function (evt) {\n      if (evt.keyCode === 32 && gunshotSound) {\n        gunshotSound.play();\n      }\n    });\n\n    engine.runRenderLoop(function () {\n      newScene.render();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Closed Curve with Hermite Spline in BabylonJS\nDESCRIPTION: Example of creating a smooth closed curve by joining Bezier curves with a Hermite spline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst cubicA = BABYLON.Curve3.CreateCubicBezier(vA0, vA1, vA2, vA3, 50);\nconst cubicB = BABYLON.Curve3.CreateCubicBezier(vB0, vB1, vB2, vB3, 50);\nconst continued = cubicA.continue(cubicB);\n\nconst t = continued.length() / 2;\nconst points = continued.getPoints();\nconst p1 = points[points.length - 1];\nconst t1 = p1.subtract(points[points.length - 2]).scale(t);\nconst p2 = points[0];\nconst t2 = points[1].subtract(p2).scale(t);\n\nconst hermite = BABYLON.Curve3.CreateHermiteSpline(p1, t1, p2, t2, 50);\ncontinued = continued.continue(hermite);\n\nconst closedCurve = BABYLON.MeshBuilder.CreateLines(\"closed\", { points: continued.getPoints() }, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Colors - Babylon.js - JavaScript\nDESCRIPTION: This snippet assigns start, end, and dead colors to particles, using BABYLON.Color4 objects. color1 and color2 are blended during the particle's lifetime, and colorDead sets the color just before the particle disappears. Dependencies: Babylon.js and BABYLON.Color4. All color parameters accept RGBA values as floating-point numbers between 0 and 1.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.color1 = new BABYLON.Color4(0.7, 0.8, 1.0, 1.0);\nparticleSystem.color2 = new BABYLON.Color4(0.2, 0.5, 1.0, 1.0);\nparticleSystem.colorDead = new BABYLON.Color4(0, 0, 0.2, 0.0);\n```\n\n----------------------------------------\n\nTITLE: Applying a Material Plugin to a Single Material in Babylon.js\nDESCRIPTION: Shows how to instantiate a plugin directly with a specific material instead of registering it globally. This approach is useful for applying plugins to individual materials or for dynamic loading scenarios.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materialPlugins.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPlugin = new BlackAndWhitePluginMaterial(material);\n```\n\n----------------------------------------\n\nTITLE: Adding Physics Joints in BabylonJS\nDESCRIPTION: Shows two methods for adding physics joints between impostors. Joints can be added directly or created with specific joint types and data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimpostor.addJoint(otherImpostor, joint);\n//or\nimpostor.createJoint(otherImpostor, jointType, jointData);\n```\n\n----------------------------------------\n\nTITLE: Assigning Reflectivity Texture for PBR Material in Babylon.js\nDESCRIPTION: This snippet demonstrates how to assign a reflectivity texture to a PBR material in Babylon.js, which is required for enabling reflections on the object when using the SSR post-process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/screenSpaceReflectionsPostProcess.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// For a BABYLON.PBRMaterial\nmyMaterial.reflectivityTexture = new BABYLON.Texture(\"textures/reflectivity.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Basic GreasedLines in JavaScript\nDESCRIPTION: Creates multiple GreasedLine segments from an array of point arrays in a single call. All lines will share the same default material settings (StandardMaterial, default width, default color).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [\n  [-1, 0, 0, 1, 0, 0],\n  [-1, 1, 0, 1, 1, 0],\n];\nconst lines = BABYLON.CreateGreasedLine(\"lines\", { points });\n```\n\n----------------------------------------\n\nTITLE: Creating Car Body Outline with Vector3 Points\nDESCRIPTION: Defines the outline points for a car body shape using Vector3 coordinates. Creates base points and generates curved front using a loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/polycar.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//base\nconst outline = [\n    new BABYLON.Vector3(-0.3, 0, -0.1),\n    new BABYLON.Vector3(0.2, 0, -0.1),\n]\n\n//curved front\nfor (let i = 0; i < 20; i++) {\n    outline.push(new BABYLON.Vector3(0.2 * Math.cos(i * Math.PI / 40), 0, 0.2 * Math.sin(i * Math.PI / 40) - 0.1));\n}\n\n//top\noutline.push(new BABYLON.Vector3(0, 0, 0.1));\noutline.push(new BABYLON.Vector3(-0.3, 0, 0.1));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sound Attenuation in BabylonJS\nDESCRIPTION: Demonstrates how to create and apply a custom attenuation function for spatial sound with distance-based volume calculation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Create and load the sound async\nconst music = new BABYLON.Sound(\"Music\", \"music.wav\", scene, null, {\n  loop: true,\n  autoplay: true,\n  useCustomAttenuation: true,\n});\n\n// Creating custom attenuation function. Near the object, volume is almost 0.\n// The farest, the louder\nmusic.setAttenuationFunction(function (currentVolume, currentDistance, maxDistance, refDistance, rolloffFactor) {\n  return (currentVolume * currentDistance) / maxDistance;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DrawCalls Strategy in TypeScript\nDESCRIPTION: Shows implementation of a draw calls tracking strategy using scene observers. The strategy monitors engine draw calls and provides cleanup functionality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/performanceProfiler.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic static DrawCallsStrategy(): PerfStrategyInitialization {\n    return (scene) => {\n        let drawCalls = 0;\n        const onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\n            scene.getEngine()._drawCalls.fetchNewFrame();\n        });\n\n        const onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\n            drawCalls = scene.getEngine()._drawCalls.current;\n        });\n\n        return {\n            id: \"draw calls\",\n            getData: () => drawCalls,\n            dispose: () => {\n                scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\n                scene.onAfterRenderObservable.remove(onAfterRenderObserver);\n            },\n        };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching LensRenderingPipeline to Camera Separately in Babylon.js\nDESCRIPTION: Creates a LensRenderingPipeline and separately attaches it to a camera using the postProcessRenderPipelineManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/dofLenseEffects.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar lensEffect = new BABYLON.LensRenderingPipeline('lensEffects', parameters, scene, 1.0);\n// ...\nscene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline('lensEffects', camera);\n```\n\n----------------------------------------\n\nTITLE: Initializing Frame Graph in Babylon.js\nDESCRIPTION: Creates a new FrameGraph instance associated with the Babylon.js scene. The second parameter enables the creation of debugging textures, viewable in the inspector. The frame graph is then assigned to the scene, and the camera for pointer interactions is specified.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst frameGraph = new BABYLON.FrameGraph(scene, true);\n\nscene.frameGraph = frameGraph;\nscene.cameraToUseForPointers = camera;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fullscreen GUI and Start Button with BabylonJS GUI - JavaScript\nDESCRIPTION: Creates a fullscreen AdvancedDynamicTexture for GUI, adds a styled 'PLAY' button, and sets up an observable to call the cutscene transition function on click. The GUI is configured to stick to a 720-pixel virtual height and positions the button towards the bottom. Depends on BabylonJS GUI modules (AdvancedDynamicTexture, Button, Control) and a context with a valid scene and method like '_goToCutScene'. Inputs: none directly; outputs a rendered GUI for the user to interact with.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//... scene setup\n\n//create a fullscreen ui for all of our GUI elements\nconst guiMenu = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nguiMenu.idealHeight = 720; //fit our fullscreen ui to this height\n\n//create a simple button\nconst startBtn = Button.CreateSimpleButton(\"start\", \"PLAY\");\nstartBtn.width = 0.2;\nstartBtn.height = \"40px\";\nstartBtn.color = \"white\";\nstartBtn.top = \"-14px\";\nstartBtn.thickness = 0;\nstartBtn.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\nguiMenu.addControl(startBtn);\n\n//this handles interactions with the start button attached to the scene\nstartBtn.onPointerDownObservable.add(() => {\n    this._goToCutScene();\n    scene.detachControl(); //observables disabled\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tube with MeshBuilder in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a tube using the MeshBuilder.CreateTube method in Babylon.js. It shows the basic options and how to update an existing tube.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/tube.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    path: myPath, //vec3 array,\n    updatable: true\n}\n\nlet tube = BABYLON.MeshBuilder.CreateTube(\"tube\", options, scene);  //scene is optional and defaults to the current scene\n\n// Update\noptions.path[0].x +=6; \noptions.instance = tube;\ntube = BABYLON.MeshBuilder.CreateTube(\"tube\", options); //No scene parameter when using instance\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Speed Gradient Over Lifetime (Single Values) in Babylon.js\nDESCRIPTION: Demonstrates how to use `addVelocityGradient` to define the magnitude of the particle's velocity (speed factor or applied power) at the beginning (time fraction 0) and end (time fraction 1) of its lifetime. This factor modifies the initial emission velocity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addVelocityGradient(0, 0.5); //applied power at start of particle lifetime\nparticleSystem.addVelocityGradient(1, 3); //applied power at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Chaining Mesh Rotations Using addRotation on Rotation Property - Babylon.js JavaScript\nDESCRIPTION: Shows chaining addRotation calls directly on a mesh's rotation property for cumulative transformations in Babylon.js. Requires a mesh with a rotation property compatible with chaining and Babylon.js loaded. Each call applies a new rotation in Y, X, Z order, with parameters in radians. Demonstrates compact, fluent-style rotation sequencing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/add_rotations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotation.addRotation(Math.PI / 2, 0, 0).addRotation(0, 0, Math.PI / 3).addRotation(0, Math.PI / 8);\n```\n\n----------------------------------------\n\nTITLE: Customizing Particle Start Position Function in Babylon.js (JavaScript)\nDESCRIPTION: Implements a custom start position function to determine where each new particle originates, using randomized coordinates within a specified bounding box, and transforms them into world space. Assigned to the particleSystem, this method makes use of Babylon.js Vector3 and Matrix for position computation. Main parameters are the world matrix, position update reference, the particle, and local/global mode. The function outputs particle world positions and is used in creating custom emitter types.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.startPositionFunction = (worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void => {\n  var randX = randomNumber(this.minEmitBox.x, this.maxEmitBox.x);\n  var randY = randomNumber(this.minEmitBox.y, this.maxEmitBox.y);\n  var randZ = randomNumber(this.minEmitBox.z, this.maxEmitBox.z);\n\n  Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a GUITextarea Component in Babylon.js\nDESCRIPTION: Constructor for creating a new GUITextarea component which provides a text area input element in the GUI system. It requires an ID, options object, GUI manager instance, and optional append parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextarea.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUITextarea(id, options, guimanager, append)\n```\n\n----------------------------------------\n\nTITLE: Setting Reflection Probe Refresh Rate in Babylon.js\nDESCRIPTION: Shows different options for configuring the update frequency of a reflection probe, from rendering once to every frame or custom intervals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/reflectionProbes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprobe.refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n// or\nprobe.refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME;\n// or\nprobe.refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES;\n// or\nprobe.refreshRate = 3;\n```\n\n----------------------------------------\n\nTITLE: Creating Tiled Ground Mesh with MeshBuilder in Babylon.js - JavaScript\nDESCRIPTION: This snippet shows how to instantiate a tiled ground mesh in Babylon.js using MeshBuilder. Dependencies include the Babylon.js library. The function 'BABYLON.MeshBuilder.CreateTiledGround' creates the mesh with the specified name, option parameters for the tiling dimensions and mesh details, and attaches it to the provided scene. Expected inputs: string for mesh name, options object detailing minimum/maximum x/z values, subdivisions, precision, and Boolean for updatable, and the scene context. The function returns a tiled ground mesh object ready for further customization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_ground.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar tiledGround = BABYLON.MeshBuilder.CreateTiledGround(\"tiled ground\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing Facebook Instant Games with Babylon.js\nDESCRIPTION: This JavaScript code initializes the Facebook Instant Game framework and then creates a new game. It retrieves user locale, platform, SDK version, and player ID after successful initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Instant_Games.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFBInstant.initializeAsync()\n  .then(() => {\n    // Many properties will be null until the initialization completes.\n    // This is a good place to fetch them:\n    let locale = FBInstant.getLocale(); // 'en_US' 'fr_FR'...\n    let platform = FBInstant.getPlatform(); // 'IOS', 'ANDROID' or 'WEB'\n    let sdkVersion = FBInstant.getSDKVersion(); // '3.0'\n    let playerID = FBInstant.player.getID();\n\n    console.log(locale, platform, sdkVersion, playerID);\n\n    // The game is created here\n    new Game(\"gameCanvas\");\n  })\n  .catch((e) => {\n    console.log(e);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Rope Soft Body with Extruded Shape in Babylon.js\nDESCRIPTION: Demonstrates creating a rope soft body using an extruded shape mesh, including setting up the physics impostor with shape and path parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar rope = BABYLON.MeshBuilder.ExtrudeShape(\"ext\", { shape: myShape, path: myPoints }, scene);\nrope.material = ropeMat;\n\nrope.physicsImpostor = new BABYLON.PhysicsImpostor(rope, BABYLON.PhysicsImpostor.RopeImpostor, { mass: 2, shape: myShape, path: myPoints }, scene);\nrope.physicsImpostor.velocityIterations = 20;\nrope.physicsImpostor.positionIterations = 20;\nrope.physicsImpostor.stiffness = 1;\n```\n\n----------------------------------------\n\nTITLE: Assigning CubeTexture to Skybox Material in Babylon.js (JavaScript)\nDESCRIPTION: This snippet assigns a cube texture to the skybox material, which is required for rendering the environment. The texture should reside in a directory named 'skybox' and be compatible with cube mapping. Dependencies include Babylon.js and access to the appropriate texture assets. The reflectionTexture property enables the background to display the selected cube environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nsky.reflectionTexture = new BABYLON.CubeTexture(\"textures/skybox\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Parametric Meshes with Mesh Class in Babylon.js\nDESCRIPTION: This snippet shows an alternative method to create parametric meshes using the Mesh class in Babylon.js. It demonstrates the syntax for both Create and Extrude methods, which require specific parameters and an optional scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = BABYLON.Mesh.Create<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);\nconst mesh = BABYLON.Mesh.Extrude<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Data into a Babylon.js Particle System (JavaScript)\nDESCRIPTION: Shows the signature of the static `BABYLON.ParticleSystem.Parse` method. It takes the parsed JSON object (`json`), the target `scene`, a `rootURL` for dependencies (like textures), an optional boolean `doNotStart` to override auto-start behavior, and an optional `capacity` override to create a `BABYLON.ParticleSystem` instance. Dependencies include a valid parsed JSON object representing a particle system and the Babylon.js library.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_loadFromFile.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst myParticleSystem = BABYLON.ParticleSystem.Parse(json, scene, rootURL, doNotStart, capacity);\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Character Assets After Environment\nDESCRIPTION: Shows the point in the `_setUpGame` function (in `app.ts`) where the character assets should be loaded. This is done *after* the environment assets are loaded by awaiting the `_loadCharacterAssets` function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//..loaded environment\nawait this._loadCharacterAssets(scene); //character\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Loading Screen for SceneLoader in JavaScript\nDESCRIPTION: This snippet shows how to disable the loading screen that appears by default when loading a scene using `BABYLON.SceneLoader`. Setting the static property `ShowLoadingScreen` to `false` prevents the loading UI from being displayed during scene loading operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneLoader.ShowLoadingScreen = false;\n```\n\n----------------------------------------\n\nTITLE: Customizing Particle Direction Function in Babylon.js (JavaScript)\nDESCRIPTION: Defines a custom start direction function for each new particle by randomizing the direction vector within specified bounds, transforming it by the provided world matrix. Dependencies include Babylon.js core classes such as Vector3 and Matrix. This function is assigned directly to the particleSystem and determines the initial travel direction of new particles; key parameters are the world matrix, direction reference, particle object, and a boolean flag for local space. Outputs an updated direction vector for each particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.startDirectionFunction = (worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean) {\n    var randX = randomNumber(this.direction1.x, this.direction2.x);\n    var randY = randomNumber(this.direction1.y, this.direction2.y);\n    var randZ = randomNumber(this.direction1.z, this.direction2.z);\n\n    Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n}\n```\n\n----------------------------------------\n\nTITLE: TextureAssetTask Constructor and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Lists the constructor signature for loading a 2D texture via the asset manager. Optional parameters allow toggling mipmaps, Y-axis inversion, and setting the sampling mode. The resulting texture is a Babylon.js Texture object assigned to 'public texture'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, url: string, noMipmap?: boolean, invertY?: boolean, samplingMode: number = BABYLON.Texture.TRILINEAR_SAMPLINGMODE)\n\npublic texture: Texture;\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Components\nDESCRIPTION: Demonstrates various methods for accessing and working with controller components, including getting component IDs and specific component types.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ids = motionController.getComponentIds();\n// ids = [\"a-button\", \"b-button\", \"xr-standard-trigger\", .....]\n```\n\n----------------------------------------\n\nTITLE: Calculating Front Position in Babylon.js WebXR\nDESCRIPTION: Calculates a position at a specified distance in front of the WebXR camera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRCamera.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst frontPosition = xrCamera.getFrontPosition(2);\n```\n\n----------------------------------------\n\nTITLE: Integrating Controls and Ground Detection Updates in Babylon.js (JavaScript)\nDESCRIPTION: Shows the structure of the `_beforeRenderUpdate` method, typically called once per frame before rendering. It orchestrates character updates by calling `_updateFromControls` to handle input and rotation, and `_updateGroundDetection` to manage gravity application and ground checks, ensuring movement is calculated correctly considering collisions and gravity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _beforeRenderUpdate(): void {\n    this._updateFromControls();\n    this._updateGroundDetection();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Babylon.js Texture to Non-Blocking using JavaScript\nDESCRIPTION: Shows how to set the `isBlocking` property of a Babylon.js texture to `false`. This allows the associated material to render the mesh even if the texture hasn't fully loaded yet, preventing rendering stalls. Unloaded textures will temporarily appear as a 1x1 black texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/work.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.isBlocking = false;\n```\n\n----------------------------------------\n\nTITLE: Game State Management with Asset Loading in BabylonJS\nDESCRIPTION: Handles game state transition after ensuring all assets are properly loaded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/importMeshes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait this._setUpGame().then((res) => {\n  finishedLoading = true;\n  this._goToGame();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the Main Physics Character Controller Update Loop in Babylon.js\nDESCRIPTION: This snippet shows the main update loop for a physics character controller in Babylon.js. It demonstrates checking support surfaces, setting desired velocity based on character state, integrating physics, and retrieving the updated position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/characterController.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst support = characterController.checkSupport(dt, down);\nconst desiredLinearVelocity = getDesiredVelocity(dt, support, characterCurrentOrientation, characterCurrentVelocity);\ncharacterController.setVelocity(desiredLinearVelocity);\ncharacterController.integrate(dt, support, characterGravity);\nconst newPosition = characterController.getPosition();\n```\n\n----------------------------------------\n\nTITLE: Initializing WebVR Camera in Babylon.js\nDESCRIPTION: Creates and initializes a basic WebVR camera with position vector in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.WebVRFreeCamera(\"camera1\", new BABYLON.Vector3(0, 0, 0), scene);\n```\n\n----------------------------------------\n\nTITLE: Loading Mesh from Playground Scenes Folder in Babylon.js\nDESCRIPTION: Example of loading a mesh from the Playground scenes folder using a scene method. The rootUrl parameter uses the format 'scenes/' or 'scenes/folder/', and the filename is as listed in the documentation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableMeshes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneLoader.ImportMesh(\"\", \"scenes/\", \"Alien.gltf\", scene, function (meshes) {\n    // Mesh loaded successfully\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WebXR Teleportation Parabolic Ray\nDESCRIPTION: Demonstrates how to disable the parabolic (indirect) teleportation ray and adjust its check radius for longer-distance teleportation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// disable the parabolic (indirect) teleportation ray\nteleportation.parabolicRayEnabled = false;\n\nteleportation.parabolicCheckRadius = 10;\n```\n\n----------------------------------------\n\nTITLE: Handling Progress Events During Babylon.js Asset Loading\nDESCRIPTION: This code shows how to implement a progress callback using `BABYLON.AppendSceneAsync`. The `onProgress` function receives a ProgressEvent object. It calculates the download percentage if the total length is computable (`event.lengthComputable`). It handles different loading stages: ignoring the small GLB header (when `event.total === 20`), displaying general glTF loading progress, and showing progress for specific LODs by referencing external variables (`lodNext`, `lodNames`). This is useful for providing feedback to the user during potentially long downloads.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/progressiveglTFLoad.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.AppendSceneAsync(url, scene, {\n  pluginExtension: \".glb\",\n  onProgress: function (event) {\n    // Compute the percentage for each stage unless the length is not computable.\n    // The lengthComputable is often false when serving content that is gzipped.\n    const percentage = event.lengthComputable ? \" \" + Math.floor((event.loaded / event.total) * 100) + \"%\" : \"\";\n\n    // Check if an LOD is loading yet.\n    if (lodNext === null) {\n      // Ignore GLB header progress.\n      if (event.total === 20) return;\n\n      // Show that the glTF is downloading.\n      bottomLine.text = \"Loading glTF...\" + percentage;\n    } else {\n      // Show that the LOD is downloading.\n      bottomLine.text = \"Loading '\" + lodNames[lodNext] + \"' LOD...\" + percentage;\n    }\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Twins for Accessibility in Babylon.js\nDESCRIPTION: Shows how to use HTMLTwinRenderer.Render() to generate HTML elements that represent accessible content in a Babylon.js scene. This allows screen readers to interpret the 3D scene structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/accessibility/screenReaders.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nACCESSIBILITY.HTMLTwinRenderer.Render(scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Reflective Material with PBR in Babylon.js\nDESCRIPTION: This snippet sets up a non-reflective PBR material by configuring base color with zero metallic value (non-metal) and maximum roughness, eliminating specular reflections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npbr.baseColor = new BABYLON.Color3(1.0, 0.766, 0.336);\npbr.metallic = 0;\npbr.roughness = 1.0;\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone ShadowDepthWrapper for Optimization in JavaScript\nDESCRIPTION: Creates a `ShadowDepthWrapper` instance with the `standalone: true` option. This indicates that the wrapper manages a dedicated `ShaderMaterial` used exclusively for depth rendering, rather than modifying a copy of the mesh's main material. This approach optimizes performance by using a potentially much simpler shader for depth passes, avoiding the overhead (uniforms, samplers, code complexity) of the main material (like `CustomMaterial` or `PBRMaterial`) and reducing JavaScript-side checks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst shadowDepthWrapper = new BABYLON.ShadowDepthWrapper(shaderMaterial, scene, {\n  standalone: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Precompiling a Babylon.js Material using JavaScript\nDESCRIPTION: Demonstrates how to explicitly trigger the compilation of a Babylon.js material's shaders for a given mesh using the `forceCompilation` method. This is useful for pre-warming the shader cache and ensuring smoother rendering by avoiding compilation delays during runtime. The function takes an optional callback that executes once the compilation is finished.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/work.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.forceCompilation(mesh, function() {\n    // Do something when material is compiled\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GreasedLine with Defaults in JavaScript\nDESCRIPTION: Creates a simple GreasedLine using a single array of points. It uses the default StandardMaterial, default width, and default color (White).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points });\n```\n\n----------------------------------------\n\nTITLE: Filtering Skinned Meshes by Skeleton\nDESCRIPTION: Code that filters loaded meshes to find all skinned meshes that reference a specific skeleton, useful for identifying potential meshes to use with bone transform methods.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst skinnedMeshes = meshes.filter(function (mesh) {\n  return mesh.skeleton === skeletons[0];\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Complex Models with Submeshes and Skeletons in Babylon.js\nDESCRIPTION: Demonstrates how to clone complex models that contain submeshes. The example creates multiple clones of the 'Dude' model, each with random positions and their own skeleton animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"Dude/dude.babylon\", scene, { meshNames: \"him\" }).then(function (result) {\n  result.meshes[0].position = new BABYLON.Vector3(0, 0, 5); // The original dude\n  scene.beginAnimation(result.skeletons[0], 0, 120, 1.0, true);\n\n  dudes = [];\n\n  for (i = 0; i < 10; i++) { // 10 clones\n    const xrand = Math.floor(Math.random() * 501) - 250;\n    const zrand = Math.floor(Math.random() * 501) - 250;\n\n    const c = [];\n\n    for (j = 1; j < result.meshes.length; j++) {\n      c[j] = result.meshes[j].clone(\"c\" + j);\n      c[j].position = new BABYLON.Vector3(xrand, 0, zrand);\n      c[j].skeleton = result.meshes[j].skeleton.clone();\n      scene.beginAnimation(c[j].skeleton, 0, 120, 1.0, true);\n    }\n    dudes[i] = c;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Line Systems in Babylon.js\nDESCRIPTION: Demonstrates how to create a new line system and update an existing one using MeshBuilder. The lines parameter is required and consists of an array of Vector3 arrays representing individual lines.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/line_system.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// creates an instance of a line system\nlet lineSystem = BABYLON.MeshBuilder.CreateLineSystem(\"lineSystem\", {lines: myArray}, scene);\n\n// updates the existing instance of lineSystem : no need for the parameter scene here\nlineSystem = BABYLON.MeshBuilder.CreateLineSystem(\"lineSystem\", {lines: myArray, instance: lineSystem});\n```\n\n----------------------------------------\n\nTITLE: Manually Attaching Gizmo to Mesh in Babylon.js\nDESCRIPTION: Shows how to manually attach a gizmo to a specific mesh and disable the default pointer behavior for gizmo attachment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngizmoManager.usePointerToAttachGizmos = false;\ngizmoManager.attachToMesh(mesh);\n```\n\n----------------------------------------\n\nTITLE: Registering Instanced Buffers in Babylon.js\nDESCRIPTION: Demonstrates how to register a custom instanced buffer for color and apply unique color values to both the root mesh and each instance. This approach allows for per-instance property customization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/instances.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.registerInstancedBuffer(\"color\", 4); // 4 is the stride size eg. 4 floats here\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbox.instancedBuffers.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), 1);\nlet instance = box.createInstance(\"box1\");\ninstance.instancedBuffers.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), 1);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Light Frustum Extent Updates in Babylon.js (JavaScript)\nDESCRIPTION: Sets the `autoUpdateExtends` property of a `light` object to `false`. This prevents Babylon.js from automatically computing the light's orthographic projection extents (left, right, top, bottom) based on the scene's shadow casters. This is often used in conjunction with setting the shadow map refresh rate to `RENDER_ONCE` for static scenes or when manually controlling the frustum size. Requires an existing `light` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlight.autoUpdateExtends = false;\n```\n\n----------------------------------------\n\nTITLE: Creating Default Free Camera in Babylon.js\nDESCRIPTION: Creates a free camera with specified parameters for camera control and replacement options\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultCamera(false, true, true);\n```\n\n----------------------------------------\n\nTITLE: Initializing RecastJSPlugin for Navigation\nDESCRIPTION: Creates a new instance of the RecastJSPlugin for navigation mesh functionality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/createNavMesh.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet navigationPlugin = new BABYLON.RecastJSPlugin();\n```\n\n----------------------------------------\n\nTITLE: Coloring Goldberg Polyhedron Faces\nDESCRIPTION: Shows how to color specific faces or groups of faces on a Goldberg polyhedron using color arrays.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorArray = [\n  [18, 18, new BABYLON.Color4(1, 0, 0, 1)], // color face 18 red\n  [26, 37, new BABYLON.Color4(0, 1, 0, 1)], //color faces 26 to 37 inclusive green\n];\n```\n\n----------------------------------------\n\nTITLE: BinaryFileAssetTask Constructor and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Defines the structure for binary file loading tasks, including constructor parameters and data property. The loaded data is an ArrayBuffer, suitable for processing binary formats like images or model files. Requires Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, url: string)\n\npublic url: string;\npublic data: ArrayBuffer;\n```\n\n----------------------------------------\n\nTITLE: Loading GLB from Base64 Encoded Data in JavaScript\nDESCRIPTION: Demonstrates how to load a .glb binary file from a base64 encoded data string using BABYLON.AppendSceneAsync. It also shows the allowed mime types for the data string.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst base64_model_content = \"data:;base64,BASE 64 ENCODED DATA...\";\nBABYLON.AppendSceneAsync(base64_model_content, scene).then(function () {\n  // do something with the scene\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst base64_model_content = \"data:application/octet-stream;base64,-BASE 64 ENCODED DATA-\";\nconst base64_model_content = \"data:model/gltf-binary;base64,-BASE 64 ENCODED DATA-\";\n```\n\n----------------------------------------\n\nTITLE: Setting and Incrementally Updating Mesh Position in Babylon.js - JavaScript\nDESCRIPTION: This group of snippets demonstrates how to directly set a mesh's position and how to incrementally adjust its coordinates with Babylon.js in JavaScript. Dependencies include Babylon.js (BABYLON namespace) and its Vector3 class. Inputs are mesh objects with accessible 'position' and use Vector3 objects for specifying new positions or deltas. The output is an updated mesh position; ensure that mesh is initialized before use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/position.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.position = new Vector3(2, 3, 4);//(2, 3, 4)\nmesh.position.addInPlace(new Vector3(2, 3, 4)); //(-1 + 2, 2 + 3, 1 + 4) = (1, 5, 5)\nmesh.translate(new BABYLON.Vector3(2, 3, 4), 1, BABYLON.Space.WORLD); //(-1 + 2, 2 + 3, 1 + 4) = (1, 5, 5)\n```\n\n----------------------------------------\n\nTITLE: Defining Math: Vector Nodes - Babylon.js - Markdown/English\nDESCRIPTION: Lists and describes vector math nodes available in Babylon.js node materials. Operations like Cross, Derivative, Distance, Dot, Fresnel, Length, Reflect, Refract, and Rotate2D are specified with their distinct input requirements and output types. Documentation supports proper connection and configuration of these nodes for advanced mathematical computations in node graphs and shaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/availableNodeBlocks.md#2025-04-23_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## Math: Vector\\n\\n### Cross\\n\\nOutputs a vector that is perpendicular to two input vectors.\\n\\n- Inputs:\\n  - left: Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Vector2, Vector3, Vector4, Color3, or Color4.\\n- Output:\\n  - output: Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on left and right input types.\\n\\n### Derivative\\n\\nFRAGMENT SHADER ONLY. Provides the rate of change for an input on a given axis (x,y).\\n\\n- Inputs:\\n  - input: Float, Vector2, Vector3, Vector4, Color3, or Color4.\\n- Output:\\n  - dx: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on left and right input types.\\n  - dy: Float, Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on left and right input types.\\n\\n### Distance\\n\\nProvides a distance vector based on the left and right input vectors.\\n\\n- Inputs:\\n  - left: Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Dot\\n\\nOutputs the cos of the angle between two vectors.\\n\\n- Inputs:\\n  - left: Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Vector2, Vector3, Vector4, Color3, or Color4.\\n- Output:\\n  - output: Float\\n\\n### Fresnel\\n\\nOutputs the grazing angle of the surface of the mesh, relative to a camera influenced by the bias and power inputs.\\n\\n- Input:\\n  - worldNormal: Vector4\\n  - viewDirection: Vector3\\n  - bias: Float\\n  - power: Float\\n- Output:\\n  - fresnel: Float\\n\\n### Length\\n\\nOutputs the length of an input vector.\\n\\n- Inputs:\\n  - left: Vector2, Vector3, Vector4, Color3, or Color4.\\n  - right: Vector2, Vector3, Vector4, Color3, or Color4.\\n- Outputs:\\n  - output: Vector2, Vector3, Vector4, Color3, or Color4. Output varies based on input types.\\n\\n### Reflect\\n\\nOutputs the direction of the input vector reflected across the surface normal.\\n\\n- Inputs:\\n  - incident: Vector3\\n  - normal: Vector3\\n- Outputs:\\n  - output: Vector3\\n\\n### Refract\\n\\nOutputs a direction simulating a deflection of the input vector.\\n\\n- Inputs:\\n  - incident: Vector3\\n  - normal: Vector3\\n  - ior: Float\\n- Outputs:\\n  - output: Vector3\\n\\n### Rotate2D\\n\\nRotates UV coordinates around the W axis.\\n\\n- Inputs:\\n  - input: Vector2\\n  - angle: Float\\n- Outputs:\\n  - output: Vector2\\n\n```\n\n----------------------------------------\n\nTITLE: Setting VolumeBasedPanel Rows Property (Babylon.js, JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the 'rows' property of a VolumeBasedPanel, allowing the panel to automatically determine the number of columns needed for the given controls. Useful for organizing items by row. Works with any VolumeBasedPanel subclass. Requires Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\npanel.rows = 5; // The panel will automatically compute the number of columns based on number of child controls\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Clipping Behavior in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to adjust the clipping behavior of a Babylon.js GUI Container. Setting `clipChildren` to `false` allows child controls to render outside the container's bounds. Setting `clipContent` to `true` ensures the container's own background and border are still clipped to its boundaries. It's noted that using `clipChildren = false` might interfere with `adt.useInvalidateRectOptimization`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\ncontainer.clipChildren = false;\ncontainer.clipContent = true;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Babylon.js Scene\nDESCRIPTION: Creates a basic Babylon.js scene with a free camera, lighting, and canvas control. This serves as the foundation for the bowling scene without including any physics or bowling-specific elements yet.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = function () {\n  // This creates a basic Babylon Scene object (non-mesh)\n  var scene = new BABYLON.Scene(engine);\n\n  // This creates and positions a free camera (non-mesh)\n  var camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(BABYLON.Vector3.Zero());\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Scale in Babylon.js\nDESCRIPTION: Demonstrates how to get the current scale of a bone using the getScale method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst scale = bone.getScale();\n```\n\n----------------------------------------\n\nTITLE: Removing Particle Size Gradient Point in Babylon.js\nDESCRIPTION: Shows how to use `removeSizeGradient` to remove a specific gradient point previously added for particle size. The argument specifies the time fraction (e.g., 0.4) of the gradient point to remove.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeSizeGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Removing Particle Color Gradient Point in Babylon.js\nDESCRIPTION: Shows how to use `removeColorGradient` to remove a specific gradient point previously added for particle color. The argument specifies the time fraction (e.g., 0.4) of the gradient point to remove.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeColorGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Initializing Particle System in BabylonJS\nDESCRIPTION: Creates a new particle system with 5000 particles in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst particleSystem = new BABYLON.ParticleSystem(\"particles\", 5000, scene);\n```\n\n----------------------------------------\n\nTITLE: Referencing Sound Components with @fromSounds Decorator in TypeScript\nDESCRIPTION: This example shows how to use the @fromSounds decorator to reference sound components. In Babylon.JS, the sound name is its path, which can be copied from the Assets Browser by right-clicking the sound file and selecting 'Copy Path'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/gettingComponents.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Sound } from \"@babylonjs/core/Audio/sound\";\n\nimport { fromSounds } from \"../decorators\";\n\nexport default class MyMeshComponent extends Mesh {\n    @fromSounds(\"sounds/6sounds.mp3\")\n    private _sound: Sound;\n\n    public onStart(): void {\n        this._sound.play();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Wheels in Babylon.js\nDESCRIPTION: Applies the same animation to all four wheels of the car by calling scene.beginAnimation() for each wheel mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/animation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.beginAnimation(wheelRF, 0, 30, true);\nscene.beginAnimation(wheelLB, 0, 30, true);\nscene.beginAnimation(wheelLF, 0, 30, true);\n```\n\n----------------------------------------\n\nTITLE: Creating an Updatable Ribbon Mesh in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create an initial ribbon mesh using `BABYLON.Mesh.CreateRibbon`. It defines a path function to generate individual paths and then loops to create a `pathArray`. Crucially, the `updatable` parameter (the one before `sideO`) is set to `true` to allow for future dynamic updates to the mesh geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// path function\nconst pathFunction = function (k) {\n  const path = [];\n  for (let i = 0; i < 60; i++) {\n    const x = i - 30;\n    const y = 0;\n    const z = k;\n    path.push(new BABYLON.Vector3(x, y, z));\n  }\n  return path;\n};\n// ribbon creation\nconst sideO = BABYLON.Mesh.BACKSIDE;\nconst pathArray = [];\nfor (let i = -20; i < 20; i++) {\n  pathArray.push(pathFunction(i * 2));\n}\nconst mesh = BABYLON.Mesh.CreateRibbon(\"ribbon\", pathArray, false, false, 0, scene, true, sideO);\n```\n\n----------------------------------------\n\nTITLE: Customizing Selection Panel Colors in JavaScript\nDESCRIPTION: Demonstrates how to customize the appearance of a `SelectionPanel` by setting various color properties. This includes the overall color (`color`), background (`background`), separator bar color (`barColor`), header text color (`headerColor`), selector button color (`buttonColor`), selector button background (`buttonBackground`), and label text color (`labelColor`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nselectBox.color = \"blue\";\nselectBox.background = \"#FFFF99\";\nselectBox.barColor = \"#4F7DF2\";\nselectBox.headerColor = \"blue\";\nselectBox.buttonColor = \"orange\";\nselectBox.buttonBackground = \"#684502\";\nselectBox.labelColor = \"brown\";\n```\n\n----------------------------------------\n\nTITLE: Adding Shapes with Custom Initialization using positionFunction in SPS - Babylon.js - JavaScript\nDESCRIPTION: Demonstrates how to add multiple shapes (particles) to the SPS with a custom\\_positionFunction\\_. The function is executed once per particle and can utilize the particle object and two indices to differentiate individual instances. Prerequisites: An instantiated SPS, a model and corresponding number of particles. This method allows for granular control over the initial state of each particle and is optimal for immutable systems.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.addShape(model, number_of_particles, { positionFunction: myCustomFunction });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Controller Components by ID and Type\nDESCRIPTION: Shows different methods for retrieving controller components using either their ID or type, including getting single or multiple components.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst triggerComponent = motionController.getComponent(\"xr-standard-trigger\");\nif (triggerComponent) {\n  // found, do something with it.\n}\n\nconst squeezeComponent = motionController.getComponentOfType(\"squeeze\");\n\n// get the first registered button component\nconst buttonComponent = motionController.getComponentOfType(\"button\");\n\n// get all button components\nconst buttonComponents = motionController.getAllComponentsOfType(\"button\");\nif (buttonComponents.length) {\n  // some were found\n}\n\nconst mainComponent = motionController.getMainComponent();\n// mainComponent always exists!\n```\n\n----------------------------------------\n\nTITLE: Configuring Babylon.js XML Layouts to Repeat Controls via dataSource (XML)\nDESCRIPTION: This XML snippet demonstrates using the dataSource attribute to dynamically repeat a control/container for each item in an object or array. Useful for auto-generating panels from application data structures, with dynamic property binding inside each repeated block.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<StackPanel background=\\\"#ffffff\\\" width=\\\"300px\\\" top=\\\"100px\\\" left=\\\"200px\\\" id=\\\"panel\\\" dataSource=\\\"text in {objTexts}\\\">\\n       <Container  width=\\\"1\\\" height=\\\"40px\\\" >\\n           <TextBlock id=\\\"myImage\\\" height=\\\"1\\\" text=\\\"{{text.name}}\\\" color=\\\"red\\\" resizeToFit=\\\"true\\\" fontSize=\\\"24\\\"/>\\n           <TextBlock left=\\\"50px\\\" height=\\\"1\\\" text=\\\"{{text.surname}}\\\" color=\\\"black\\\" resizeToFit=\\\"true\\\" fontSize=\\\"24\\\"/>\\n       </Container>\\n</StackPanel>\n```\n\n----------------------------------------\n\nTITLE: Modifying Anisotropy Direction in Babylon.js PBR Material\nDESCRIPTION: This JavaScript code shows how to change the direction of the anisotropic reflections on a Babylon.js PBR material. After enabling anisotropy, the `anisotropy.direction` vector (a `BABYLON.Vector2`) is modified to control the orientation of the elongated highlights relative to the mesh's tangent space (default is along the tangent). Requires an initialized `BABYLON.PBRMaterial` instance (`pbr`) with anisotropy enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.anisotropy.isEnabled = true;\npbr.anisotropy.direction.x = 0.5;\npbr.anisotropy.direction.y = 1;\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Vertex Data in Babylon.js\nDESCRIPTION: Removes cached vertex data from CPU memory when collision detection, picking, geometry editing, or physics features are not needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/reducingMemoryUsage.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.clearCachedVertexData();\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Floor Meshes for WebXR Teleportation\nDESCRIPTION: Shows how to dynamically add and remove floor meshes for teleportation after the feature has been enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nteleportation.addFloorMesh(ground2);\n\nteleportation.removeFloorMesh(ground2);\n```\n\n----------------------------------------\n\nTITLE: Auto-Adapt Lattice to Mesh Size - Babylon.js - JavaScript\nDESCRIPTION: Illustrates the use of the autoAdaptToMesh option in lattice construction to automatically size and position the lattice based on a given mesh. Requires Babylon.js and a mesh instance. The lattice will compute appropriate dimensions to fit the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar lattice = new BABYLON.Lattice({\n    autoAdaptToMesh: mesh\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Mesh Properties in BabylonJS\nDESCRIPTION: Configures collision detection and shadow receiving for all environment meshes after loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/importMeshes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst assets = await this._loadAsset();\n//Loop through all environment meshes that were imported\nassets.allMeshes.forEach((m) => {\n  m.receiveShadows = true;\n  m.checkCollisions = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Box Along the Rotating TransformNode’s X Axis in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates updating a mesh position property (here, a box) so that the movement occurs along the local, potentially rotated, x axis of its parent TransformNode. Requires Babylon.js setup and scene render loop. The line 'box.position.x += 0.01;' incrementally moves the box along its x axis, with the actual world direction determined by the current orientation of the TransformNode in the hierarchy.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbox.position.x += 0.01;\n```\n\n----------------------------------------\n\nTITLE: Excluding Meshes from Highlight Layer\nDESCRIPTION: Demonstrates how to exclude specific meshes from the highlight generation process, which can be useful for fixing rendering issues with transparent objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nhl.addExcludedMesh(skybox1);\n```\n\n----------------------------------------\n\nTITLE: Applying Stereo Pan to Sounds - Babylon.js (JavaScript)\nDESCRIPTION: This code snippet sets up a Babylon.js audio engine and demonstrates playing a sound exclusively through the left speaker by configuring the stereo pan. Prerequisites include enabling the 'stereoEnabled' property on sound creation to prevent delays, and providing a valid sound file. Key properties are 'stereo.pan', which ranges from -1 (full left) to 1 (full right), and the ability to adjust after stereo has been enabled. The output is a sound played panned fully to the left in stereo-enabled environments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst audioEngine = await BABYLON.CreateAudioEngineAsync();\naudioEngine.volume = 0.5;\n\nconst gunshot = await BABYLON.CreateSoundAsync(\"gunshot\",\n    \"sounds/gunshot.wav\",\n    { stereoEnabled: true }\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\ngunshot.stereo.pan = -1;\ngunshot.play()\n```\n\n----------------------------------------\n\nTITLE: Validating Connection Compatibility in Babylon.js Node Material using JavaScript\nDESCRIPTION: Checks whether a connection between two block connection points is permitted before actually making the connection. Prevents runtime errors and ensures data types are compatible. Returns a boolean indicating viability. Must have both output and input connection points available.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (worldInput.output.canConnectTo(boneBlock.world)) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Impulses to Physics Objects in Babylon.js\nDESCRIPTION: Demonstrates how to apply impulses to physics imposters, which change the linear and/or angular velocity of a body instantaneously. Shows impulse application at center of mass and at local reference points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/forces.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimposter.applyImpulse(impluse_vector, contact_vector);\n\nlet localRefPoint = new BABYLON.Vector3(x, y, z);\n\nimposter.applyImpulse(ImpulseVector, mesh.getAbsolutePosition()); //impulse at center of mass\n\nimposter.applyImpulse(ImpulseVector, mesh.getAbsolutePosition().add(localRefPoint)); //impulse at a local point\n```\n\n----------------------------------------\n\nTITLE: Enabling Depth Texture Generation in Post-Processing\nDESCRIPTION: Code that enables the generation of depth texture on the first post-processing RTT and handles browser resize events. This allows reusing the depth buffer when generating the thickness texture for fluid rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/implementation_details.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstPostProcess = camera._getFirstPostProcess() ;\nif (!firstPostProcess) {\n    return ;\n}\n\nfirstPostProcess.onSizeChangedObservable.add(() => {\n    if (!firstPostProcess.inputTexture.depthStencilTexture) {\n        firstPostProcess.inputTexture.createDepthStencilTexture(\n            0,\n            true,\n            this._engine.isStencilEnable,\n        ) ;\n    }\n}) ;\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Scene Message Registration\nDESCRIPTION: Shows how to register message handlers in the BabylonJS scene to respond to commands sent from Vue. This maps message types to specific functions that will be executed when the message is received.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Image does not show full code, but indicates the registration of message handlers\n```\n\n----------------------------------------\n\nTITLE: Recording Completion Detection\nDESCRIPTION: Demonstrates how to detect when a recording has completed using the promise returned by startRecording.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToVideo.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (BABYLON.VideoRecorder.IsSupported(engine)) {\n    var recorder = new BABYLON.VideoRecorder(engine);\n    recorder.startRecording().then(() => {\n        alert(\"done\");\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Fireworks with Observable in Babylon.js\nDESCRIPTION: This code sets up a scene observable to check before each render if fireworks should be started. When the _startFireworks flag is true, it triggers the _startFirework method on each firework object in the array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nthis._scene.onBeforeRenderObservable.add(() => {\n  this._fireworkObjs.forEach((f) => {\n    if (this._startFireworks) {\n      f._startFirework();\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Babylon.js Procedural Texture from NodeMaterial (JavaScript)\nDESCRIPTION: Demonstrates creating a BABYLON.ProceduralTexture instance from an existing NodeMaterial object using the `createProceduralTexture` method. Requires a pre-defined `nodeMaterial` object of type BABYLON.NodeMaterial. The argument (e.g., 256) sets the texture's resolution (width and height).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/NMEProceduralTexture.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst proceduralTexture = nodeMaterial.createProceduralTexture(256);\n```\n\n----------------------------------------\n\nTITLE: Picking the First Mesh Hit by a Ray in Babylon.js\nDESCRIPTION: Uses the `scene.pickWithRay` method to cast a predefined ray into the scene and detect intersections with meshes. It returns a `PickingInfo` object containing details about the first mesh hit by the ray along its path, or null if no mesh is hit within the ray's length.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar hit = scene.pickWithRay(ray);\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Engine and Sound Volume - Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates initializing the Babylon.js audio engine, setting its master volume, creating a sound, adjusting the sound's volume independently, and playing it. Dependencies include Babylon.js runtime with audio support and an accessible sound file at the specified path. The main parameters are the audio engine volume (0.5), and the sound volume (0.75) for a 'gunshot' effect; 'CreateAudioEngineAsync', 'CreateSoundAsync', and 'unlockAsync' are used asynchronously. Output is audible playback of the configured sound, while volume values above 1 can produce boosted/louder-than-normal results.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst audioEngine = await BABYLON.CreateAudioEngineAsync();\naudioEngine.volume = 0.5;\n\nconst gunshot = await BABYLON.CreateSoundAsync(\"gunshot\",\n    \"sounds/gunshot.wav\"\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\ngunshot.volume = 0.75;\ngunshot.play()\n```\n\n----------------------------------------\n\nTITLE: Constructing Circular Track Points (Babylon.js, JavaScript)\nDESCRIPTION: Illustrates generating an array of Vector3 points forming a closed circular path using a for-loop and trigonometric functions. 'n' controls the number of subdivisions and 'r' the radius. These points are used as input for both visualization and track creation. Outputs an array ready for path rendering or advanced animation operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = [];\nvar n = 400; // number of points\nvar r = 20; //radius\nfor (let i = 0; i < n; i++) {\n  points.push(new BABYLON.Vector3(r * Math.cos((i * 2 * Math.PI) / n), 0, r * Math.sin((i * 2 * Math.PI) / n)));\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Single Mesh Bounding Box in Babylon.js (JavaScript)\nDESCRIPTION: Enables the visualization of the bounding box for a specific mesh object named 'sphere'. This assumes 'sphere' is a pre-existing and valid Babylon.js mesh object in the scene. Setting `showBoundingBox` to true makes the wireframe representation of the mesh's bounds visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.showBoundingBox = true;\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line Control with Babylon.js GUI - JavaScript\nDESCRIPTION: This snippet shows how to add a Line control to the Babylon.js scene. The Line draws a connection between two specified points (x1, y1) and (x2, y2) on the UI. Dependencies include the Babylon.js GUI module. Dash styling and lineWidth can be set to customize the appearance. The expected input consists of numeric coordinates for the endpoints, and output is the visual line as part of the GUI. Constraints include using pixel-based coordinates and positive line width values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Playground: #XCPP9Y#6\n// Simple example showing how to add a Line control to your scene.\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\nvar line = new BABYLON.GUI.Line();\nline.x1 = 0;\nline.y1 = 0;\nline.x2 = 100;\nline.y2 = 100;\nline.lineWidth = 2;\nline.dash = [5, 2]; // Optional - creates dashed lines\nadvancedTexture.addControl(line);\n```\n\n----------------------------------------\n\nTITLE: Creating a Disc/Polygon using Mesh.CreateDisc in Babylon.js (JavaScript)\nDESCRIPTION: Shows the usage of the older `BABYLON.Mesh.CreateDisc` method for creating disc or polygon meshes. It takes `radius` and `tessellation` as required parameters, with optional parameters for `scene`, `updatable`, and `sideOrientation` passed sequentially after the required ones.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/disc.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst disc = BABYLON.Mesh.CreateDisc(\"disc\", radius, tessellation, scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst disc = BABYLON.Mesh.CreateDisc(\"disc\", radius, tessellation, scene, updatable, sideOrientation); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Loading Assets from Github using jsdelivr\nDESCRIPTION: Shows how to load 3D models using the jsDelivr CDN service with Github repositories.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/externalPGAssets.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"https://cdn.jsdelivr.net/gh/myGithubUserName/myRepository@2bd79648e08709145cd9575e6679b2ea360f12f6/myFile.babylon\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating SSR Rendering Pipeline in Babylon.js\nDESCRIPTION: Demonstrates how to create an instance of the SSRRenderingPipeline class in Babylon.js. This snippet shows the constructor parameters including scene, cameras, and texture type options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssr = new BABYLON.SSRRenderingPipeline(\n  \"ssr\", // The name of the pipeline\n  scene, // The scene to which the pipeline belongs\n  [scene.activeCamera], // The list of cameras to attach the pipeline to\n  false, // Whether or not to use the geometry buffer renderer (default: false, use the pre-pass renderer)\n  BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE, // The texture type used by the SSR effect (default: TEXTURETYPE_UNSIGNED_BYTE)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Extruded Shapes with MeshBuilder in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates creating an extruded mesh using Babylon.js's MeshBuilder.ExtrudeShape function. The options object must include 'shape' (an array of Vector3 for profile), and 'path' (an array of Vector3 along which to extrude). Optional parameters include 'updatable', 'scale', 'rotation', and 'instance' for updating the mesh. Updating an existing extrusion involves changing the underlying data and re-calling ExtrudeShape with the 'instance' property set. Requires Babylon.js library, a scene object, and appropriate Vector3 arrays as input. The output is a Mesh that represents the extruded geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/extrude_shape.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    shape: myPoints, //vec3 array with z = 0,\n    path: myPath, //vec3 array\n    updatable: true\n}\n\nlet extruded = BABYLON.MeshBuilder.ExtrudeShape(\"ext\", options, scene);  //scene is optional and defaults to the current scene\n\n// Update\noptions.shape = newShape;\noptions.path = newPath;\noptions.instance = extruded;\nextruded = BABYLON.MeshBuilder.ExtrudeShape(\"ext\", options); //No scene parameter when using instance\n```\n\n----------------------------------------\n\nTITLE: Keyboard Input Processing in BabylonJS\nDESCRIPTION: Updates character movement values based on keyboard input states. Uses lerping for smooth transitions and tracks both movement values and axis directions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _updateFromKeyboard(): void {\n    if (this.inputMap[\"ArrowUp\"]) {\n        this.vertical = Scalar.Lerp(this.vertical, 1, 0.2);\n        this.verticalAxis = 1;\n\n    } else if (this.inputMap[\"ArrowDown\"]) {\n        this.vertical = Scalar.Lerp(this.vertical, -1, 0.2);\n        this.verticalAxis = -1;\n    } else {\n        this.vertical = 0;\n        this.verticalAxis = 0;\n    }\n\n    if (this.inputMap[\"ArrowLeft\"]) {\n        this.horizontal = Scalar.Lerp(this.horizontal, -1, 0.2);\n        this.horizontalAxis = -1;\n\n    } else if (this.inputMap[\"ArrowRight\"]) {\n        this.horizontal = Scalar.Lerp(this.horizontal, 1, 0.2);\n        this.horizontalAxis = 1;\n    }\n    else {\n        this.horizontal = 0;\n        this.horizontalAxis = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Pivot Point in Babylon.js (JavaScript)\nDESCRIPTION: This snippet initializes the pivot point for a mesh (`pilot`). It defines the desired center of rotation (`CoR_At`) and the mesh's absolute position (`pilotStart`), calculates the offset vector between them, and uses `setPivotMatrix` with a translation matrix based on this offset to define the pivot relative to the mesh's local origin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivot.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar CoR_At = new BABYLON.Vector3(1, 3, 2);\nvar pilotStart = new BABYLON.Vector3(3, 6, 6);\n\npilot.position = pilotStart;\n\nvar pivotTranslate = pilotStart.subtract(CoR_At);\npilot.setPivotMatrix(BABYLON.Matrix.Translation(pivotTranslate.x, pivotTranslate.y, pivotTranslate.z));\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-LOD Settings with SimplificationSettings Class in Babylon.js (JavaScript/TypeScript)\nDESCRIPTION: This snippet illustrates creating simplification settings using the `BABYLON.SimplificationSettings` class, suitable for both JavaScript and TypeScript. It shows how to instantiate settings objects with quality and distance, and add them to an array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/simplifyingMeshes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings: Array<ISimplificationSettings> = []; //in JS: const settings = [];\nsettings.push(new BABYLON.SimplificationSettings(0.8, 60));\nsettings.push(new BABYLON.SimplificationSettings(0.4, 150));\n```\n\n----------------------------------------\n\nTITLE: Instantiating a MorphTargetsBlock with Babylon.js Node Material in JavaScript\nDESCRIPTION: Initializes a MorphTargetsBlock, which handles morph target transformations for mesh deformation within the Node Material's node graph. Requires a block name and uses the BABYLON namespace. The created block can be connected to other shader blocks to contribute morphing capabilities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst morphTargets = new BABYLON.MorphTargetsBlock(\"morphTargets\");\n```\n\n----------------------------------------\n\nTITLE: Generating Procedural Texture from Node Material in JavaScript\nDESCRIPTION: Shows how to asynchronously parse a Babylon.js Node Material from a snippet ID using `BABYLON.NodeMaterial.ParseFromSnippetAsync`. Once the Node Material is loaded, a procedural texture is generated from it using its `createProceduralTexture` method, specifying the texture size.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.NodeMaterial.ParseFromSnippetAsync(\"#A7A3UB#1\", scene).then((nodeMaterial) => {\n  const proceduralTexture = nodeMaterial.createProceduralTexture(256);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Cylinder Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a cylinder particle emitter using `particleSystem.createCylinderEmitter`. Parameters include radius (Number), height (Number), radiusRange (Number, 0=surface only, 1=full radius), and directionRandomizer (Number, 0=no randomization). Particles emit outwards along surface normals. Requires an existing `particleSystem` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar cylinderEmitter = particleSystem.createCylinderEmitter(1,1,0,0);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Mesh Rotation Sequences in Babylon.js (JavaScript)\nDESCRIPTION: This set of code snippets shows alternative orders for setting Euler angle rotations in Babylon.js. Regardless of the sequence in which the rotation.x, rotation.y, and rotation.z properties are set, the final mesh orientation is the same due to Babylon.js using local mesh space for rotations. Each snippet requires a mesh object and the Babylon.js library. Alpha, beta, and gamma represent angles in radians. No special constraints exist beyond these requirements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmesh.rotation = new BABYLON.Vector3(alpha, beta, gamma);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmesh.rotation.x  =  alpha;\nmesh.rotation.y  =  beta;\nmesh.rotation.z  =  gamma;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmesh.rotation.z  =  gamma;\nmesh.rotation.x  =  alpha;\nmesh.rotation.y  =  beta;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmesh.rotation.y  =  beta;\nmesh.rotation.z  =  gamma;\nmesh.rotation.x  =  alpha;\n```\n\n----------------------------------------\n\nTITLE: Pre-computing Normals for Multiple Data Sets in JavaScript\nDESCRIPTION: This code snippet demonstrates how to pre-compute normals for multiple data sets using the static method ComputeNormalsFromMapToRef. This is useful when working with several data sets intended for use as data maps.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst map1 = someFloat32Array;\nconst map2 = someOtherFloat32Array;\nconst map3 = someOtherFloat32Array;\nconst normal1 = new Float32Array(map1.length);\nconst normal2 = new Float32Array(map2.length);\nconst normal3 = new Float32Array(map3.length);\n// let's precompute the normals of all the maps\nBABYLON.DynamicTerrain.ComputeNormalsFromMapToRef(map1, subX1, subY1, normal1);\nBABYLON.DynamicTerrain.ComputeNormalsFromMapToRef(map2, subX2, subY2, normal2);\nBABYLON.DynamicTerrain.ComputeNormalsFromMapToRef(map3, subX3, subY3, normal3);\n```\n\n----------------------------------------\n\nTITLE: Enabling DOM Overlay in WebXR\nDESCRIPTION: This code demonstrates how to enable DOM overlay in WebXR using Babylon.js. It shows how to initialize the feature with a DOM element and check for its support status when entering AR mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst featuresManager = xr.baseExperience.featuresManager;\nconst domOverlayFeature = featuresManager.enableFeature(BABYLON.WebXRDomOverlay, \"latest\", { element: \".dom-overlay-container\" }, undefined, false);\n\nxr.baseExperience.onStateChangedObservable.add((webXRState) => {\n  switch (webXRState) {\n    case BABYLON.WebXRState.ENTERING_XR:\n    case BABYLON.WebXRState.IN_XR:\n      // domOverlayType will be null when not supported.\n      console.log(\"overlay type:\", domOverlayFeature.domOverlayType);\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Background Remover - JavaScript\nDESCRIPTION: Shows how to enable the Background Remover feature with the featuresManager for Babylon.js WebXR. Removes or disables specified background/environment meshes when entering AR mode, either automatically or per configuration. Useful for creating AR scenes that hide skyboxes or ground meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrBackgroundRemover = featuresManager.enableFeature(BABYLON.WebXRBackgroundRemover);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebXR Hit Test Feature\nDESCRIPTION: Shows how to configure the Hit Test feature with specific options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fm = xr.baseExperience.featuresManager;\n\nconst xrHitTestLatest = fm.enableFeature(WebXRFeatureName.HIT_TEST, \"latest\", {\n    testOnPointerDownOnly: true\n});\n\nconst xrHitTest1 = fm.enableFeature(WebXRFeatureName.HIT_TES, 1);\n```\n\n----------------------------------------\n\nTITLE: Scaling Bones in Babylon.js\nDESCRIPTION: Demonstrates how to scale a bone on its local axes using the scale method. It takes scaleX, scaleY, and scaleZ as parameters. The scaleChildren parameter is optional and defaults to false.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nbone.scale(scaleX, scaleY, scaleZ);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Customizing Volumetric Lights in Standard Rendering Pipeline\nDESCRIPTION: These snippets show how to enable volumetric lights and customize their parameters in the Standard Rendering Pipeline. It requires WebGL 2 support and a shadow map from the source light.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable Volumetric Lights computation in the pipeline\npipeline.VLSEnabled = true;\n\n// First, give the source light to the pipeline which must be a spot light or a directional light\n// The volumetric lights post-process needs a shadow map in order to work: it is used to test obstacles for the light rays\n// Then, the source light mush have a shadows generator:\npipeline.sourceLight = <SpotLight> scene.getLightByName(\"spotLight\");\n\n// This represents the intensity of fog in the air. In other words, the light rays intensity in the shadow\npipeline.volumetricLightPower = 4;\n\n// This represents the overall quality of the volumetric lights post-process in interval [0, 100].\n// The default value is 50.0 and is enough for a good result\npipeline.volumetricLightStepsCount = 50;\n```\n\n----------------------------------------\n\nTITLE: Creating a Cylinder Mesh with Babylon.js MeshBuilder in JavaScript\nDESCRIPTION: This snippet demonstrates creating a 3D cylinder mesh using the `BABYLON.MeshBuilder.CreateCylinder` method. It defines the cylinder's properties like height, diameters, tessellation, and subdivisions, and adds it to the specified scene. Requires an initialized Babylon.js scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/proceduralTextures.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cylinder = BABYLON.MeshBuilder.CreateCylinder(\"mycylinder\", { height: 7, diameterTop: 2, diameterBottom: 2, tessellation: 12, subdivisions: 1 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Attaching Wheels to the Car Body in Babylon.js\nDESCRIPTION: This code creates multiple wheel instances and attaches them to the car body. The wheels are positioned at the four corners of the car and are set up as child meshes of the car body to ensure they move with it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar wheelFI = BABYLON.MeshBuilder.CreateCylinder(\"wheelFI\", { diameter: 3, height: 1, tessellation: 24, faceColors: faceColors, faceUV: faceUV }, scene);\nwheelFI.material = wheelMaterial;\n\nwheelFI.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.WORLD);\nwheelFI.parent = carBody;\n\nvar wheelFO = wheelFI.createInstance(\"FO\");\nwheelFO.parent = carBody;\nwheelFO.position = new BABYLON.Vector3(-4.5, -2, 2.8);\n\nvar wheelRI = wheelFI.createInstance(\"RI\");\nwheelRI.parent = carBody;\nwheelRI.position = new BABYLON.Vector3(2.5, -2, -2.8);\n\nvar wheelRO = wheelFI.createInstance(\"RO\");\nwheelRO.parent = carBody;\nwheelRO.position = new BABYLON.Vector3(2.5, -2, 2.8);\n\nwheelFI.position = new BABYLON.Vector3(-4.5, -2, -2.8);\n```\n\n----------------------------------------\n\nTITLE: Loading Texture Package from JSON in Babylon.js\nDESCRIPTION: Loads texture package data into an existing, typically empty, `TexturePacker` instance (`pack`) from a JSON string (`jsonString`). The `updateFromJSON` method performs the loading asynchronously and returns a Promise, requiring success and error handling via `.then(success)` and `.catch(error)`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/texturePackage.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npack.updateFromJSON(jsonString).then(success).catch(error);\n```\n\n----------------------------------------\n\nTITLE: Testing Particle-Mesh Intersection with Bounding Sphere in Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to perform collision detection between a particle and mesh using the mesh's bounding sphere rather than the default AABB. By passing true as the second parameter to intersectsMesh, the method checks based upon the bounding sphere, which may be faster or more appropriate for some shapes. The function returns true if the particle intersects, suitable for triggering responses or changing properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (particle.intersectsMesh(mesh, true) {\n    // change properties of particle\n}; \n```\n\n----------------------------------------\n\nTITLE: Basic Mesh Intersection Detection in BabylonJS\nDESCRIPTION: Demonstrates how to check if two meshes are intersecting using the intersectsMesh method. This basic collision detection returns true if the bounding boxes of two meshes overlap.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap4/mesh_intersect.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh1.intersectsMesh(mesh2);\n```\n\n----------------------------------------\n\nTITLE: Growing Particle Size Based on Age in Babylon.js (JavaScript)\nDESCRIPTION: Customizes particle growth during update by increasing its size as a function of its age, targeting the final size at 35% of lifetime. Placed in the update function's 'else' section, this code depends on the existence of a 'finalSize' property and proper initialization. The main inputs are particle age, lifetime, and size properties; output is a smoothly scaling particle up to a threshold.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (particle.age < particle.lifeTime * 0.35) {\n  particle.size = (particleSystem.finalSize * particle.age) / (particle.lifeTime * 0.35);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Occlusion Query Extensions in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the required imports for enabling occlusion query functionality in Babylon.js. The first import adds support for WebGL query objects, while the second enables rendering of bounding boxes, a visual aid for debugging occlusion. These imports are prerequisites for applying occlusion-related properties on meshes; they must be included before using occlusion features. No parameters or variable declarations are present, and the snippet only sets up dependencies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/occlusionQueries.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@babylonjs/core/Engines/Extensions/engine.query';\nimport '@babylonjs/core/Rendering/boundingBoxRenderer';\n```\n\n----------------------------------------\n\nTITLE: Detecting Mesh Intersection in Babylon.js\nDESCRIPTION: This snippet demonstrates how to check for intersections between two meshes using the intersectsMesh() function. It changes the emissive color of the mesh based on whether an intersection is detected.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/mesh_intersect.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (balloon1.intersectsMesh(plan1, false)) {\n  balloon1.material.emissiveColor = new BABYLON.Color4(1, 0, 0, 1);\n} else {\n  balloon1.material.emissiveColor = new BABYLON.Color4(1, 1, 1, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Object List for Frame Graphs in Babylon.js (TypeScript)\nDESCRIPTION: This TypeScript class defines the structure of an object list to be used as an external input in the node render graph. It includes nullable arrays for meshes and particle systems, both of which can be provided by the user after loading the graph. Dependencies include AbstractMesh, IParticleSystem, and Nullable types from the Babylon.js framework. The class expects the programmer to supply actual mesh and particle system instances, and future support for sprites is anticipated.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBlocks/frameGraphBlocksDescription.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class FrameGraphObjectList {\n    /**\n     * The meshes in the object list.\n     */\n    meshes: Nullable<AbstractMesh[]>;\n    /**\n     * The particle systems in the object list.\n     */\n    particleSystems: Nullable<IParticleSystem[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Particle Lifetime Over Duration in Babylon.js\nDESCRIPTION: This code demonstrates how to change the lifetime of particles over the duration of a particle system. It sets a target stop duration and adds lifetime gradients at the start and end of the system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.targetStopDuration = 8;\n\nparticleSystem.addLifeTimeGradient(0, 0.5); //lifetime at start of particle system\nparticleSystem.addLifeTimeGradient(1, 0); //lifetime at end of particle system\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Gravity in Babylon.js\nDESCRIPTION: Defines gravity vector for the scene using BABYLON.Vector3, setting the direction and speed of gravitational force.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.gravity = new BABYLON.Vector3(0, -0.15, 0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup D in Babylon.js Physics\nDESCRIPTION: Parameter setup with different pivot positions and different axes orientations. The main axis is on the X-axis while the connected axis is on the Y-axis, causing the main body to reorient to align these axes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(10, 0, 0),\nconnectedPivot: new BABYLON.Vector3(0, 5, 0),\nmainAxis: new BABYLON.Vector3(1, 0, 0), //different axes will orientate main body to align axes.\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Initializing FlowGraphCoordinator in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to instantiate a new FlowGraphCoordinator tied to a specific Babylon.js scene. The coordinator acts as the root controller, responsible for graph creation and event distribution. Requires that a Babylon.js Scene object is available via the variable 'scene'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst coordinator = new FlowGraphCoordinator({ scene });\n```\n\n----------------------------------------\n\nTITLE: Updating ExtrudeShapeCustom Parameters in Babylon.js (JavaScript)\nDESCRIPTION: Shows updating an extruded mesh created with BABYLON.Mesh.ExtrudeShapeCustom, specifically modifying the shape, path, scaleFunction, and rotationFunction. The mesh must be initially created with 'updatable: true'. The update uses BABYLON.MeshBuilder.ExtrudeShapeCustom with 'null' as the name and the original mesh passed via the 'instance' option.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// path and shape const declared before ...\nconst myScale1 = function(i, distance) { ... };\nconst myScale2 = function(i, distance) { ... };\nconst myRotation1 = function(i, distance) { ... };\nconst myRotation2 = function(i, distance) { ... };\n// extrusion\nlet ext = BABYLON.Mesh.ExtrudeShapeCustom(\"ext\", { shape: shape1, path: path1, scaleFunction: myScale1, rotationFunction: myRotation1, updatable: true, cap }, scene);\n// mesh update\next = BABYLON.MeshBuilder.ExtrudeShapeCustom(null,{shape: shape2, path: path2, scaleFunction: myScale2, rotationFunction: myRotation2, instance: ext});\n```\n\n----------------------------------------\n\nTITLE: Applying Properties to Sprites in Babylon.js\nDESCRIPTION: Demonstrates how to apply various properties to a sprite, such as width, height, position, angle, and reflection.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/packed_manager.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.width = 0.3;\nsprite.height = 0.4;\nsprite.position =new BABYLON.Vector3(1, 1, 1);\nsprite.angle = Math.PI/4;\nsprite.invertU = true; //vertical reflection\nsprite.invertV = true; //horizontal reflection\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Keyframes in Babylon.js\nDESCRIPTION: Defines the keyframes for the wheel animation. Creates an array with two keyframes: one at frame 0 with rotation value 0, and another at frame 30 with rotation value of 2π (a full rotation).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/animation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst wheelKeys = [];\n\n//At the animation key 0, the value of rotation.y is 0\nwheelKeys.push({\n  frame: 0,\n  value: 0,\n});\n\n//At the animation key 30, (after 1 sec since animation fps = 30) the value of rotation.y is 2PI for a complete rotation\nwheelKeys.push({\n  frame: 30,\n  value: 2 * Math.PI,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Properties Override in Babylon.js\nDESCRIPTION: Demonstrates how to use AnimationPropertiesOverride to specify general properties for all child animations of a mesh or skeleton. These properties will override local animation settings for enableBlending, blendingSpeed, and loopMode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst overrides = new BABYLON.AnimationPropertiesOverride();\n\noverrides.enableBlending = true;\noverrides.blendingSpeed = 0.1;\n\nskeleton.animationPropertiesOverride = overrides;\n```\n\n----------------------------------------\n\nTITLE: Creating Plane with Fitted Text using Dynamic Texture in BabylonJS\nDESCRIPTION: Demonstrates the complete process of creating a plane mesh with properly sized dynamic texture for text rendering. Includes calculations for maintaining aspect ratio, creating the texture, applying material, and rendering the text.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst planeHeight = 3;\nconst DTHeight = 256; //or set as wished\nconst ratio = planeHeight / DTHeight;\nconst planeWidth = DTWidth * ratio;\n\nconst dynamicTexture = new BABYLON.DynamicTexture(\"DynamicTexture\", { width: DTWidth, height: DTHeight }, scene, false);\nconst mat = new BABYLON.StandardMaterial(\"mat\", scene);\nmat.diffuseTexture = dynamicTexture;\ndynamicTexture.drawText(text, null, null, font, \"#000000\", \"#ffffff\", true); //use of null, null centers the text\n\nconst plane = BABYLON.MeshBuilder.CreatePlane(\"plane\", { width: planeWidth, height: planeHeight }, scene);\nplane.material = mat;\n```\n\n----------------------------------------\n\nTITLE: Applying Lattice Deformation to Vertex Data - Babylon.js - JavaScript\nDESCRIPTION: Shows how to deform a mesh by applying a lattice directly to its vertex position array. Requires creation of a mesh, retrieval of vertex data, and use of the 'deform' function. After deformation, mesh data is updated and normals are recalculated. Inputs: mesh, vertex position array. Outputs: deformed mesh geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\nconst positions = sphere.getVerticesData(BABYLON.VertexBuffer.PositionKind);\nlattice.deform(positions);\nsphere.setVerticesData(BABYLON.VertexBuffer.PositionKind, positions, true);\nsphere.createNormals(true);\n```\n\n----------------------------------------\n\nTITLE: Reusing Sound Buffers in Babylon.js for Efficient Sound Creation (JavaScript)\nDESCRIPTION: Creates the first sound (`bounce1`) asynchronously from a URL. It then creates a second sound (`bounce2`) asynchronously, using the `buffer` property of `bounce1` as the source. This avoids re-downloading and re-decoding the audio data. The second sound is configured with a `playbackRate` of 2. Finally, it unlocks the audio engine and plays both sounds. Depends on the Babylon.js library (`BABYLON`) and an initialized `audioEngine`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounce1 = await BABYLON.CreateSoundAsync(\"bounce1\",\n    \"sounds/bounce.wav\"\n);\n\nconst bounce2 = await BABYLON.CreateSoundAsync(\"bounce2\",\n    bounce1.buffer,\n    { playbackRate: 2 }\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\nbounce1.play();\nbounce2.play();\n```\n\n----------------------------------------\n\nTITLE: Configuring MeshDebugPluginMaterial with Multiply Disabled and Custom Shading in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the MeshDebugPluginMaterial with the `multiply` option set to `false`. This replaces the original material's appearance with the plugin's built-in Phong shading (unless in VERTEXCOLORS mode). The example shows customizing this default shading by setting `shadedDiffuseColor`, `shadedSpecularColor`, and `shadedSpecularPower` options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/visualizeMeshData.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nnew BABYLON.MeshDebugPluginMaterial(mesh.material, {\n    mode: // any mode\n    multiply: false,\n    shadedDiffuseColor: new BABYLON.Color3(1, 1, 1),\n    shadedSpecularColor: new BABYLON.Color3(.8, .8, .8),\n    shadedSpecularPower: 10\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating HTML GUI for Babylon.js\nDESCRIPTION: Illustrates how to use HTML and CSS to create a GUI overlay for a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#1AHPN5\" title=\"HTML GUI Example\" description=\"Simple example of using HTML GUI elements in your scene.\" image=\"/img/playgroundsAndNMEs/divingDeeperGUI4.jpg\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hand Meshes in WebXR\nDESCRIPTION: Illustrates how to provide custom hand meshes and bone mappings for WebXR hand tracking in Babylon.js. This allows for personalized hand representations like gloves.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst rightHandMesh = getRightHandMesh(); // get it any way you want\nconst leftHandMesh = getLeftHandMesh(); // get it any way you want\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  jointMeshes: {\n    disableDefaultHandMesh: true,\n    handMeshes: {\n      right: rightHandMesh,\n      left: leftHandMesh,\n    },\n    rigMapping: {\n      right: [\n        //... mapping for the right hand mesh\n      ],\n      left: [\n        //... mapping for the left hand mesh\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Motor on a Hinge Joint in Babylon.js\nDESCRIPTION: This code demonstrates how to create and configure a hinge joint with a motor in Babylon.js. The joint connects two physics impostors and the motor allows circular movement around the specified axis with defined force and maximum force values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar joint1 = new BABYLON.HingeJoint({\n    mainPivot: new BABYLON.Vector3(0, 0, 0), // Pivot on the main mesh\n    connectedPivot: new BABYLON.Vector3(0, 0, 0), // pivot (connecting point) on the connected pivot\n    mainAxis: new BABYLON.Vector3(0, 0, -1), // the hinge will turn on the Z axis\n    connectedAxis: new BABYLON.Vector3(0, 0, -1) // Same as above - Z axis on the connected mesh\n});\nholder.physicsImpostor.addJoint(wheel.physicsImpostor, joint1); // attach holder (main) and wheel using the defined hinge joint\n\njoint1.setMotor(3, 20); // start turning!\n```\n\n----------------------------------------\n\nTITLE: Setting Particle System Update Speed in Babylon.js\nDESCRIPTION: Adjusts the update speed of the particle system using the `updateSpeed` property. This value acts as a multiplier for the time delta in the update loop, affecting particle movement speed and lifetime progression. A smaller value slows down the system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.updateSpeed = 0.01;\n```\n\n----------------------------------------\n\nTITLE: Enabling Anchors with Persistent Option - JavaScript\nDESCRIPTION: Enables the Anchor System with the option to not remove anchors upon session end. Useful for persistent AR objects across sessions. Passes the options object as the third parameter to enableFeature. Requires Babylon.js and appropriate type declarations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst anchorSystem = featuresManager.enableFeature(BABYLON.WebXRAnchorSystem, \\\"latest\\\", { doNotRemoveAnchorsOnSessionEnded: true });\n```\n\n----------------------------------------\n\nTITLE: Applying a Preloaded JSON Configuration Payload to BabylonJS Viewer - HTML\nDESCRIPTION: This snippet demonstrates how to embed a JSON configuration as a payload directly into the BabylonJS Viewer HTML element to configure it without downloading a file. The 'configuration.payload' attribute accepts a JSON object as a string, and the default configuration mapper converts it to a Viewer configuration. Other model parameters (title, subtitle, thumbnail, URL), initial camera behavior, and UI template settings are shown as example attributes. This approach is ideal when configuration data is already loaded in the app and avoids an additional network request. No custom mapper is necessary for JSON payloads.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<babylon\n  configuration.payload='{\"scene\": {\"debug\": true}}'\n  model.title=\"Damaged Helmet\"\n  model.subtitle=\"BabylonJS\"\n  model.thumbnail=\"https://www.babylonjs.com/img/favicon/apple-icon-144x144.png\"\n  model.url=\"https://www.babylonjs.com/assets/DamagedHelmet/glTF/DamagedHelmet.gltf\"\n  camera.behaviors.auto-rotate=\"0\"\n  templates.nav-bar.params.disable-on-fullscreen=\"true\"\n></babylon>\n```\n\n----------------------------------------\n\nTITLE: Assigning Materials to Meshes\nDESCRIPTION: Demonstrates how to assign the created materials to mesh objects by setting their material property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/material.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nroof.material = roofMat;\nbox.material = boxMat;\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashed GreasedLine in JavaScript\nDESCRIPTION: Creates a GreasedLine rendered with dashes. The `useDash: true` option enables dashing, `dashCount` sets the number of dash repetitions along the line, and `dashRatio` controls the proportion of the line that is drawn versus empty space within each dash cycle (0.5 means half drawn, half empty).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points }, { useDash: true, dashCount: 4, dashRatio: 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Implementing HammerJS Camera Input in Babylon.js\nDESCRIPTION: Example of implementing HammerJS-based touch controls for ArcRotateCamera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// remove mouse input\ncamera.inputs.removeByType(\"ArcRotateCameraPointersInput\");\n\n// add hammer js input\nconst hammerJsInput = new ArcRotateCameraHammerJsInput();\n// now you can set the parameters you like\n// let's double the zoomSensitivity (default is 1)\nhammerJsInput.zoomSensitivity = 2;\n// add the input to the camera\ncamera.inputs.add(hammerJsInput);\n```\n\n----------------------------------------\n\nTITLE: Creating a Mesh Decal - Babylon.js JavaScript\nDESCRIPTION: This snippet demonstrates how to create a mesh decal using the MeshBuilder.CreateDecal method in Babylon.js, attaching a decal to a specified mesh with custom position parameters. The method requires the target mesh, the desired position for the decal, and optionally accepts other parameters such as size, normal, and angle. The key dependencies are Babylon.js and an existing mesh; inputs are the mesh and an options object, and outputs a new mesh representing the decal. The function is flexible and allows fine-tuning through the options parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/decals.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst decal = BABYLON.MeshBuilder.CreateDecal(\"decal\", mesh, { position: myPos }, scene);\n```\n\n----------------------------------------\n\nTITLE: Incrementally Adjusting Mesh Position Components in Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to increment the x, y, and z components of a mesh's position in Babylon.js JavaScript. The mesh object must have a position vector; adding values directly to mesh.position.x/y/z updates each axis individually. Inputs are numeric increments. The output is an updated mesh position reflecting the applied changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/position.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.position.x += 2; //(-1 + 2, 2, 1) = (1, 2, 1)\nmesh.position.y += 3; //(1, 2 + 3, 1) = (1, 5, 1)\nmesh.position.z += 4; //(1, 5, 1 + 4) = (1, 5, 5)\n```\n\n----------------------------------------\n\nTITLE: Checking Multiview Capability in Babylon.js\nDESCRIPTION: Code to check if multiview rendering capability is supported in the current browser environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/multiViewsPart1.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.getEngine().getCaps().multiview;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keyboard Rotate Input for Babylon.js FreeCamera (JavaScript)\nDESCRIPTION: Defines a constructor function FreeCameraKeyboardRotateInput that sets up state variables for tracking left/right key codes and a rotation sensitivity value. This is part of a custom camera input system and forms the basis for new keyboard-controlled rotation logic. No dependencies beyond a Babylon.js-compatible project; the developer should adjust keysLeft, keysRight, and sensibility as needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst FreeCameraKeyboardRotateInput = function () {\n  this._keys = [];\n  this.keysLeft = [37];\n  this.keysRight = [39];\n  this.sensibility = 0.01;\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting to GLTF Format\nDESCRIPTION: Code snippet showing how to export a Babylon.js scene to GLTF format and download the resulting files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/glTFExporter.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nGLTF2Export.GLTFAsync(scene, \"fileName\").then((gltf) => {\n  gltf.downloadFiles();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Ammo.js Plugin with Webpack < 5 (JavaScript)\nDESCRIPTION: Imports `ammo.js`, asynchronously initializes it using `await ammo.default()`, and creates the `AmmoJSPlugin`. The use of `.default()` is characteristic of how modules might be handled in older Webpack/CommonJS interop scenarios.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ammo from \"ammo.js\";\nconst Ammo = await ammo.default();\n...\nconst ammoPlugin = new AmmoJSPlugin(true, Ammo);\n```\n\n----------------------------------------\n\nTITLE: Converting Yaw, Pitch, Roll (YXZ Local) to Quaternion in JavaScript\nDESCRIPTION: Creates a Babylon.js `Quaternion` directly from yaw, pitch, and roll Euler angles. This function assumes the YXZ rotation order in local space, consistent with the `mesh.rotation` property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst yprQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, pitch, roll);\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Culling Strategy in Babylon.js\nDESCRIPTION: Example showing how to set different culling strategies for meshes to optimize rendering performance based on specific needs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* Possible values : \n         * - BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD  \n         * - BABYLON.AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY  \n         * - BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION  \n         * - BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY  \n*/\n\nmesh.cullingStrategy = oneOfThePossibleValues;\n```\n\n----------------------------------------\n\nTITLE: Creating a Box with Custom Face Textures in Babylon.js\nDESCRIPTION: This code creates a box with custom face textures using MeshBuilder and applies a material with the texture atlas. The faceUV option maps different parts of the texture to each face of the box.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  width: 10,\n  height: 3,\n  depth: 5,\n  faceUV: faceUV,\n};\n\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", options, scene);\n\nconst mat = new BABYLON.StandardMaterial(\"mat\", scene);\nconst texture = new BABYLON.Texture(\"URL of Texture Atlas\", scene);\nmat.diffuseTexture = texture;\nbox.material = mat;\n```\n\n----------------------------------------\n\nTITLE: Mapping Texture Atlas Sprite to Mesh Face in JavaScript\nDESCRIPTION: This snippet demonstrates how to map a specific sprite from a texture atlas to a particular face of a mesh. It shows the calculation for bottom left and top right UV coordinates based on column and row position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[f] = ((c * 1) / 6, (r * 1) / 4, ((c + 1) * 1) / 6, ((r + 1) * 1) / 4);\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Rotation Properties in Babylon.js (JavaScript)\nDESCRIPTION: These code snippets demonstrate how to set the rotation of a mesh in Babylon.js using the rotation property or its individual axis properties. The recommended approach is to assign a BABYLON.Vector3 initialized with alpha, beta, and gamma (Euler angles in radians) to the mesh.rotation property, or to set rotation.x, rotation.y, and rotation.z individually. Dependencies include the Babylon.js library and a mesh instance. Inputs are rotation angles in radians, and the result is the immediate reorientation of the mesh in local space. These techniques require the mesh to be instantiated and attached to a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n mesh.rotation = new BABYLON.Vector3(alpha, beta, gamma); //alpha, beta, gamma in radians\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmesh.rotation.x  =  alpha; //rotation around x axis\nmesh.rotation.y  =  beta;  //rotation around y axis\nmesh.rotation.z  =  gamma; //rotation around z axis\n```\n\n----------------------------------------\n\nTITLE: Merging Meshes with Native Babylon.js Function - JavaScript\nDESCRIPTION: Demonstrates the usage of the static MergeMeshes method from the BABYLON.Mesh class to merge multiple meshes into a single mesh. Requires Babylon.js and expects an array of meshes, with various options for source disposal, index sizing, mesh subclassing, and handling of multi-materials. Inputs include the array of meshes and several optional boolean/configuration parameters. Outputs a new merged mesh object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/mergeMeshes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst newMesh = BABYLON.Mesh.MergeMeshes(arrayOfMeshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials);\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Filter with Pixelate Effect in JavaScript\nDESCRIPTION: Demonstrates how to programmatically create a Smart Filter with a pixelate effect, including setting up input blocks for texture and intensity, and connecting the nodes together in the filter graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst smartFilter = new SmartFilter(\"Default\");\n\nconst pixelateBlock = new PixelateBlock(smartFilter, \"Pixelate\");\n\nconst textureInputBlock = new InputBlock(smartFilter, \"Texture\", ConnectionPointType.Texture, null);\ntextureInputBlock.editorData = {\n  url: \"/assets/logo.png\",\n  urlTypeHint: \"image\",\n  flipY: true,\n  anisotropicFilteringLevel: null,\n  forcedExtension: null,\n};\n\nconst intensityInputBlock = new InputBlock(smartFilter, \"Intensity\", ConnectionPointType.Float, 0.5);\nintensityInputBlock.editorData = {\n  animationType: null,\n  valueDeltaPerMs: null,\n  min: 0.0,\n  max: 1.0,\n};\n\ntextureInputBlock.output.connectTo(pixelateBlock.input);\nintensityInputBlock.output.connectTo(pixelateBlock.intensity);\npixelateBlock.output.connectTo(smartFilter.output);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Angular Speed Gradient Over Lifetime (Single Values) in Babylon.js\nDESCRIPTION: Demonstrates how to use `addAngularSpeedGradient` to define the rotational speed of particles at the beginning (time fraction 0) and end (time fraction 1) of their lifetimes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addAngularSpeedGradient(0, 0.5); //angular speed at start of particle lifetime\nparticleSystem.addAngularSpeedGradient(1, 3); //angular speed at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Evaluating Raycast Collision Masks with Bitwise AND - JavaScript\nDESCRIPTION: This short JavaScript snippet shows the logic used to determine if a ray and a shape collide based on their membership and collideWith bitmasks. The operation combines bitwise AND and logical AND to filter objects that should respond to the raycast. Intended for use within raycast filters in Babylon.js physics. Inputs: ray.membership, shape.collideWith, shape.membership, ray.collideWith. Output: boolean 'doesCollide'. Requires bitwise understanding and is most useful when dealing with complex collision filtering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/raycast.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbool doesCollide = (ray.membership & shape.collideWith) && (shape.membership & ray.collideWith)\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Keyboard Rotate Input to Babylon.js Camera (JavaScript)\nDESCRIPTION: Instantiates the FreeCameraKeyboardRotateInput and adds it to the camera's input manager, activating the custom keyboard-based rotation controls. This step is performed after the input object is fully defined and signals to Babylon.js that it should use this new input alongside (or instead of) existing inputs. The camera variable must reference an initialized FreeCamera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.inputs.add(new FreeCameraKeyboardRotateInput());\n```\n\n----------------------------------------\n\nTITLE: Creating Convex Hull Shape in BabylonJS\nDESCRIPTION: Creates a physics convex hull shape from a mesh. Provides good performance while closely matching visual geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeConvexHull(\n    mesh,   // mesh from which to produce the convex hull\n    scene   // scene of the shape\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing MeshButton3D Pointer Animations in Babylon.js (JavaScript)\nDESCRIPTION: Details the assignment of pointer animation callbacks to a MeshButton3D, modifying the mesh's material properties on pointer enter and out events. This pattern creates dynamic visual feedback on user interaction. Dependencies: Babylon.js, a mesh with a material, and color definitions. Inputs: color values for hover and idle states; Output: runtime color changes. Ensure mesh materials are PBR for albedoColor support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npushButton.pointerEnterAnimation = () => {\n  mesh.material.albedoColor = hoverColor;\n};\npushButton.pointerOutAnimation = () => {\n  mesh.material.albedoColor = new BABYLON.Color3(0.5, 0.19, 0);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Mesh Position for Volumetric Light Scattering Post Process - Babylon.js - JavaScript\nDESCRIPTION: Enables and assigns a custom position for the internal light source mesh, typically used when the light source is from an unconventional position (e.g., the floor). Requires the VolumetricLightScatteringPostProcess instance, sets useCustomMeshPosition to true, and assigns a new 3D vector position. The position parameter expects a BABYLON.Vector3 object. May produce distortion if the custom position is far from the actual light source.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvls.useCustomMeshPosition = true;\nvls.setCustomMeshPosition(new BABYLON.Vector3(5.0, 0.0, 5.0));\n```\n\n----------------------------------------\n\nTITLE: Adding a Colored Standard Material to Ground in Babylon.js (JavaScript)\nDESCRIPTION: This code snippet shows how to create a new StandardMaterial, set its diffuse color to red using Babylon.js's Color3 helper, and assign the material to an existing ground mesh. Requires both a scene object and an initialized ground mesh. The key parameters include the material name, color, and the mesh to which it's applied. The result is a ground plane visibly recolored to red, providing a visual basis for further material or texture work.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/journey/theFirstStep.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst groundMaterial = new BABYLON.StandardMaterial(\"Ground Material\", scene);\\ngroundMaterial.diffuseColor = BABYLON.Color3.Red();\\nground.material = groundMaterial;\n```\n\n----------------------------------------\n\nTITLE: Starting Babylon Tools Package - npm Shell Commands - Shell\nDESCRIPTION: This command template illustrates how to serve any Babylon tool package locally using npm. By replacing 'package-name' with the desired tool (e.g., playground, sandbox), developers can launch the corresponding tool server on their local machine. The '-w @tools/package-name' parameter targets the appropriate workspace package. This approach requires proper tool installation and workspace configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve -w @tools/package-name\n```\n\n----------------------------------------\n\nTITLE: Interceptor Node Implementation in Node Geometry Editor\nDESCRIPTION: The Interceptor node serves as a code insertion point in the node tree, allowing custom code execution during geometry calculations to extend and modify node functionality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Interceptor Node\n// Allows custom code injection into the node graph\n```\n\n----------------------------------------\n\nTITLE: Setting Previous Particle as Parent in SPS using JavaScript\nDESCRIPTION: This snippet demonstrates how to establish a parent-child relationship between particles in a Solid Particle System (SPS). It checks if the current particle's index (`particle.idx`) is greater than 0 and, if so, sets its `parentId` property to the index of the preceding particle, making the previous particle its parent.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (particle.idx > 0) {\n  particle.parentId = particle.idx - 1; // the previous particle becomes the parent of the current one\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating WoodProceduralTexture in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates creating an instance of `BABYLON.WoodProceduralTexture`. It requires a name for the texture, the desired resolution (size) for the generated texture, and the scene it belongs to. This creates a texture that programmatically generates a wood pattern.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/proceduralTextures.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst texture = new BABYLON.WoodProceduralTexture(\"texture\", 1024, scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Engine in Web Worker with Offscreen Canvas\nDESCRIPTION: This worker code listens for the offscreen canvas message, then initializes a Babylon.js engine using the received canvas. It's ready for scene setup after engine creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/offscreenCanvas.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nonmessage = function (evt) {\n  canvas = evt.data.canvas;\n  var engine = new BABYLON.Engine(canvas, true);\n\n  // Your scene setup here\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Polygon Mesh in Babylon.js\nDESCRIPTION: Creates a basic polygon mesh using an array of Vector2 points. The mesh is constructed through triangulation of the provided points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/polyMeshBuilder.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst polygon_triangulation = new BABYLON.PolygonMeshBuilder(\"name\", vector2 array, scene);\nconst polygon = polygon_triangulation.build();\n```\n\n----------------------------------------\n\nTITLE: Applying Sprite to One Face While Leaving Others Blank in Babylon.js\nDESCRIPTION: This code shows how to apply a sprite to only one face of a box while leaving all other faces blank. It sets all faceUV values to (0,0,0,0) first, then sets the desired face with proper UV coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = 6; // 6 columns\nconst rows = 4; // 4 rows\n\nconst faceUV = new Array(6);\n\n//set all values to zero\nfor (let i = 0; i < 6; i++) {\n  faceUV[i] = new BABYLON.Vector4(0, 0, 0, 0);\n}\n\n//overwrite wanted face with sprite coordinates\nfaceUV[1] = new BABYLON.Vector4(3 / columns, 0, (3 + 1) / columns, 1 / rows);\n```\n\n----------------------------------------\n\nTITLE: Applying Procedural Texture to Material and Mesh in Babylon.js (JavaScript)\nDESCRIPTION: This code illustrates how to assign a previously created procedural texture (`texture`) to the `diffuseTexture` property of a standard material (`material`). Subsequently, it applies this configured material to a mesh (`cylinder`). Assumes `texture`, `material`, and `cylinder` variables are already defined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/proceduralTextures.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.diffuseTexture = texture;\ncylinder.material = material;\n```\n\n----------------------------------------\n\nTITLE: Implementing _execute Method in AsyncExecutionBlock\nDESCRIPTION: Implementation of the _execute method for an async execution block, showing how to handle cancellation and preparation of pending tasks. This method is crucial for both synchronous flow and initializing asynchronous operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npublic _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\n    if (callingSignal === this.cancel) {\n        this._cancelPendingTasks(context);\n        return;\n    } else {\n        this._preparePendingTasks(context);\n        // trigger out to act as proxy. This is important for chaining! Further nodes can be executed on the same frame right after this one.\n        this.out._activateSignal(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing XML-Defined GUI Nodes and State (JavaScript)\nDESCRIPTION: Shows how to interact with loaded GUI nodes via XmlLoader methods: retrieving nodes by ID, retrieving all parsed nodes, and checking if a layout is loaded. These utilities streamline post-load customization and validation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nxmlLoader.getNodeById(\"helloButton\"); // Gets a node by ID. Similar to how DOM elements are retrieved.\nxmlLoader.getNodes(); // Gets all parsed nodes.\nxmlLoader.isLoaded(); // Returns true or false depending whether the layout has finished loading.\n```\n\n----------------------------------------\n\nTITLE: Initializing Terrain Material in Babylon.js\nDESCRIPTION: Creates a terrain mesh using heightmap and applies terrain material with multiple textures. The material uses three diffuse textures, three bump textures, and a mixmap texture to control blending between the diffuse textures using RGB channels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/terrainMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar terrain = BABYLON.Mesh.CreateGroundFromHeightMap(\"terrain\", \"heightMap.png\", 100, 100, 100, 0, 10, scene, false);\n\nvar terrainMaterial = new BABYLON.TerrainMaterial(\"terrainMaterial\", scene);\nterrainMaterial.mixTexture = new BABYLON.Texture(\"mixMap.png\", scene);\nterrainMaterial.diffuseTexture1 = new BABYLON.Texture(\"grass.png\", scene);\nterrainMaterial.diffuseTexture2 = new BABYLON.Texture(\"rock.png\", scene);\nterrainMaterial.diffuseTexture3 = new BABYLON.Texture(\"floor.png\", scene);\n\nterrainMaterial.bumpTexture1 = new BABYLON.Texture(\"grassn.png\", scene);\nterrainMaterial.bumpTexture2 = new BABYLON.Texture(\"rockn.png\", scene);\nterrainMaterial.bumpTexture3 = new BABYLON.Texture(\"floor_bump.png\", scene);\n\nterrain.material = terrainMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating Icosphere with MeshBuilder in Babylon.js\nDESCRIPTION: Creates an icosphere mesh using BABYLON.MeshBuilder with configurable options including radius, subdivisions, and face normals. The icosphere is based on an icosahedron with 20 triangular faces that can be subdivided.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/icosphere.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst icosphere = BABYLON.MeshBuilder.CreateIcoSphere(\"icosphere\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Loading Textures from Imgur\nDESCRIPTION: Shows how to use Imgur for hosting and loading textures in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/externalPGAssets.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = new BABYLON.Texture(\"https://i.imgur.com/yn98ktz.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Compute Shader in Babylon.js (JavaScript)\nDESCRIPTION: Shows the creation of a `BABYLON.ComputeShader` instance. It requires a unique name, the Babylon engine instance, an object specifying the shader source (using `computeSource` for WGSL code), and an options object defining the `bindingsMapping` which maps shader variable names to their explicit group and binding indices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cs1 = new BABYLON.ComputeShader(\"myCompute\", engine, { computeSource: copyTextureComputeShader }, { bindingsMapping:\n    {\n        \"dest\": { group: 0, binding: 0 },\n        \"src\": { group: 0, binding: 2 }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hemispheric Light in Babylon.js\nDESCRIPTION: Creates a new HemisphericLight instance. This light simulates ambient environment light, defined by a direction (typically upwards). It requires a name, direction vector, and the scene. Color properties like `diffuse`, `specular`, and `groundColor` are used to achieve the desired effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst light = new BABYLON.HemisphericLight(\"HemiLight\", new BABYLON.Vector3(0, 1, 0), scene);\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling a Light in Babylon.js\nDESCRIPTION: Demonstrates how to toggle a light's effect in the scene using the `setEnabled` method. Passing `false` turns the light off, and passing `true` turns it on.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlight.setEnabled(false);\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlight.setEnabled(true);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Babylon.js Player Meshes on Colyseus State Change (TypeScript)\nDESCRIPTION: This client-side code demonstrates reacting to new players joining the Colyseus room by creating corresponding visual objects in the Babylon.js scene. Inside the `room.state.players.onAdd` callback, it creates a sphere mesh using `BABYLON.MeshBuilder.CreateSphere`, naming it uniquely with the player's `sessionId`. It then sets the sphere's initial position using the synchronized `x`, `y`, and `z` coordinates received from the server (`player` object). The `playerEntities` object is intended to store references to these spheres, keyed by `sessionId`. Requires `BABYLON.MeshBuilder`, a Colyseus `room` object, and a `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// (...)\n\n// we will assign each player visual representation here\n// by their `sessionId`\nvar playerEntities = {};\n\ncolyseusSDK.joinOrCreate(\"my_room\").then(function (room) {\n  // listen for new players\n  room.state.players.onAdd(function (player, sessionId) {\n    // create player Sphere\n    var sphere = BABYLON.MeshBuilder.CreateSphere(`player-${sessionId}`, {\n      segments: 8,\n      diameter: 40,\n    });\n\n    // set player spawning position\n    sphere.position.set(player.x, player.y, player.z);\n  });\n});\n\n// (...)\n```\n\n----------------------------------------\n\nTITLE: Enabling Snapping on Single Axis Gizmos in Babylon.js\nDESCRIPTION: Shows how to enable snapping on single axis gizmos and add an observer for snap events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngizmo.snapDistance = 0.3;\ngizmo.onSnapObservable.add((event) => {\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Drag Gradient Over Lifetime (Single Values) in Babylon.js\nDESCRIPTION: Demonstrates using `addDragGradient` to define the drag factor (simulating air friction) applied to particles at the beginning (time fraction 0) and end (time fraction 1) of their lifetimes. Drag is applied against the particle's velocity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addDragGradient(0, 0.1); //drag at start of particle lifetime\nparticleSystem.addDragGradient(1, 0.8); //drag at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Modifying Vertex Positions Randomly with NodeGeometry in JavaScript\nDESCRIPTION: Illustrates how to modify vertex data within a Node Geometry graph in JavaScript. This example uses a `SetPositionsBlock` to override the positions of vertices from a `SphereBlock`. The new positions are generated by a `RandomBlock`, configured with minimum (Zero) and maximum (One) vectors using `GeometryInputBlock`s. The resulting geometry is then built into a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create node geometry\nvar nodegeo = new BABYLON.NodeGeometry(\"nodegeo\");\n\n// Create source sphere\nvar sphere = new BABYLON.SphereBlock(\"sphere\");\n\nvar setPositions = new BABYLON.SetPositionsBlock(\"set positions\");\nsphere.geometry.connectTo(setPositions.geometry);\n\nvar getRnd = new BABYLON.RandomBlock(\"random\");\nvar rndMin = new BABYLON.GeometryInputBlock(\"rndMin\", BABYLON.NodeGeometryBlockConnectionPointTypes.Vector3);\nrndMin.value = BABYLON.Vector3.Zero();\nvar rndMax = new BABYLON.GeometryInputBlock(\"rndMax\", BABYLON.NodeGeometryBlockConnectionPointTypes.Vector3);\nrndMax.value = BABYLON.Vector3.One();\nrndMin.output.connectTo(getRnd.min);\nrndMax.output.connectTo(getRnd.max);\ngetRnd.output.connectTo(setPositions.positions);\n\n// Create output\nvar output = new BABYLON.GeometryOutputBlock(\"geometryout\");\nnodegeo.outputBlock = output;\nsetPositions.output.connectTo(output.geometry);       \n\n// Build and instantiate mesh\nnodegeo.onBuildObservable.addOnce(() => {\n    var mesh = nodegeo.createMesh(\"nodegeomesh\");\n})\nnodegeo.build();\n```\n\n----------------------------------------\n\nTITLE: Positioning Mesh and Bone Transform\nDESCRIPTION: Code that demonstrates moving a mesh along the x-axis and creating a box that follows bone position and rotation. The mesh is passed as an argument to getPosition and getRotation methods to ensure correct absolute transforms.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = scene.getMeshByName(\" / 3\");\nmesh.position = new BABYLON.Vector3(30, 0, 0);\n\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", { size: 3 }, scene);\nconst bone = scene.getBoneByName(\"bone30\");\nscene.onBeforeRenderObservable.add(() => {\n  box.position.copyFrom(bone.getPosition(BABYLON.Space.WORLD, mesh));\n  box.rotation.copyFrom(bone.getRotation(BABYLON.Space.WORLD, mesh));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Mesh Clipping Planes Using Observables\nDESCRIPTION: Demonstrates how to apply clipping planes to specific meshes using onBeforeRenderObservable and onAfterRenderObservable. The clip plane is set before rendering the mesh and removed after rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/clipPlanes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.onBeforeRenderObservable.add(function() {\n    scene.clipPlane = new BABYLON.Plane(1, 0, 0, 0);\n});\n\nsphere.onAfterRenderObservable.add(function() {\n    scene.clipPlane = null;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Closed Textured Ribbon\nDESCRIPTION: Creates a ribbon mesh with manually closed paths by adding the first path to the end of the paths array for proper texture stretching.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_extra.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npaths.push(paths[0]);\nvar ribbon = BABYLON.MeshBuilder.CreateRibbon(\"ribbon\", { pathArray: paths }, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Parent in BabylonJS\nDESCRIPTION: Demonstrates how to establish a parent-child relationship between meshes. When a parent-child relationship is established, any transformations (position, scaling, rotation) applied to the parent will affect the child. Child positions are set in parent space, while rotations and scaling occur in local space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/parent.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmeshChild.parent = meshParent\n```\n\n----------------------------------------\n\nTITLE: Connecting Babylon.js Client to Colyseus Room (TypeScript)\nDESCRIPTION: This code, typically placed within a Babylon.js scene creation function, instantiates the Colyseus `Client` targeting the local server endpoint (`ws://localhost:2567`). It then attempts to join or create a room named \"my_room\" using `joinOrCreate`. The promise resolves with the `room` object upon successful connection, logging the room ID, or rejects and logs an error if the connection fails. Requires the Colyseus SDK to be loaded and the server to be running.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar createScene = function () {\n  // (...)\n\n  //\n  // Create the Colyseus Client.\n  //\n  var colyseusSDK = new Colyseus.Client(\"ws://localhost:2567\");\n\n  //\n  // Connect with Colyseus server\n  //\n  colyseusSDK\n    .joinOrCreate(\"my_room\")\n    .then(function (room) {\n      console.log(\"Connected to roomId: \" + room.roomId);\n    })\n    .catch(function (error) {\n      console.log(\"Couldn't connect.\");\n    });\n\n  // (...)\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling WebGL2 Support via HTML Data Setup\nDESCRIPTION: JSON configuration to disable WebGL2 support for compatibility with all platforms through HTML initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": { \"threeSixty\": { \"disableWebGL2Support\": true } }\n```\n\n----------------------------------------\n\nTITLE: Instantiating a MeshButton3D Control in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to create a MeshButton3D control that uses a mesh from the current scene for visualization. The MeshButton3D constructor takes a mesh and an optional name. This enables turning any mesh into an interactive GUI button. Requires an existing Babylon.js mesh and the GUI library. Output is a MeshButton3D bound to the given mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst pushButton = new BABYLON.GUI.MeshButton3D(mesh, \"pushButton\");\n```\n\n----------------------------------------\n\nTITLE: Customizing Edge Detection Parameters in Babylon.js\nDESCRIPTION: Demonstrates how to customize the edge detection effect by adjusting width, intensity, and color properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/edgeDetectionPP.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Creates the post process with custom width, intensity, color\nedgeDetectionPostProcess.edgeWidth = 1; // default is 1.0 \nedgeDetectionPostProcess.edgeIntensity = 1;\nedgeDetectionPostProcess.edgeColor = BABYLON.Color3.Red();\n```\n\n----------------------------------------\n\nTITLE: Updating Particle Position Using Velocity and Acceleration in Babylon.js - JavaScript\nDESCRIPTION: This example defines an updateParticle method to animate each particle's position frame-by-frame. It first updates the velocity with the current acceleration and then moves the position by the updated velocity. The function is automatically called by setParticles within the render loop after the mesh has been built, enabling real-time animation. The code expects that velocity and acceleration properties are already present on the particle objects and leverages the Babylon.js scene render loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npcs.updateParticle = function(particle) {\n  particle.velocity.addInPlace(particle.acceleration);\n  particle.position.addInPlace(particle.velocity);\n}\n\nscene.registerBeforeRender(() => {\n  pcs.setParticles();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Boundary Check to Prevent Particle Escape in Babylon.js\nDESCRIPTION: Babylon.js Playground demonstrating a method to prevent particles from escaping boundaries. It reverses a particle's velocity component perpendicular to a wall if its displacement from the wall is less than its radius. This method catches particles passing through the wall but may result in visible wall breaches. Includes adjustable speed parameters (lines 21-23) and a single red particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Slow_Collide.md#2025-04-23_snippet_4\n\nLANGUAGE: babylonjs-playground\nCODE:\n```\n<Playground id=\"#MYGV6#4\" title=\"Particles Stopped from Escaping\" description=\"Reverse velocity if displacement from wall is negative.\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting GreasedLine Visibility in JavaScript\nDESCRIPTION: Creates a GreasedLine where only a portion of it is visible. The `visibility` option takes a value between 0 (completely invisible) and 1 (fully visible). Here, 50% of the line is shown.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points }, { visibility: 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Creating a HolographicButton and Overwriting its Content in Babylon.js (JavaScript)\nDESCRIPTION: Describes how to instantiate a HolographicButton, add it to a panel, and subsequently replace its default content using a TextBlock. The new content is assigned after the button has been added to the container via addControl, which is a necessary order of operations. Dependencies: Babylon.js GUI package, a valid container (panel), and 2D GUI elements. Inputs include button configuration, text content properties; output is a panel with a customized HolographicButton.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = new BABYLON.GUI.HolographicButton(\"reset\");\npanel.addControl(button);\n\n// Must be done AFTER addControl in order to overwrite the default content\nconst text1 = new BABYLON.GUI.TextBlock();\ntext1.text = \"Reset\";\ntext1.color = \"Red\";\ntext1.fontSize = 48;\nbutton.content = text1;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Filtering Quality in Babylon.js (JavaScript)\nDESCRIPTION: This snippet sets the shadow filtering quality level, optimizing the tradeoff between performance and shadow smoothness. Assigning 'filteringQuality' to 'BABYLON.ShadowGenerator.QUALITY_LOW' is preferred for resource-constrained environments like mobile devices. Other values are available for higher quality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.filteringQuality = BABYLON.ShadowGenerator.QUALITY_LOW;\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple Sub Emitters Arrays to Particle System (JavaScript)\nDESCRIPTION: This snippet shows how to set the subEmitters property to an array of arrays, enabling random selection of sub emitter groups for each spawned particle. It relies on prior instantiation of SubEmitter(s) and an existing Babylon.js particle system. This approach allows chaining and randomization, with each inner array's sub emitters simultaneously attached to a newly emitted particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/subEmitters.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.subEmitters = [[subEmitter],[subEmitter, subEmitter2, subEmitter3], [subEmitter4]];\n```\n\n----------------------------------------\n\nTITLE: Lantern Class Constructor in Babylon.js\nDESCRIPTION: Initializes a lantern object with a light material, mesh, scene, and position. Creates an invisible sphere to represent the lantern's area of illumination and sets up the lantern mesh with proper scaling and positioning.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(lightmtl: PBRMetallicRoughnessMaterial, mesh: Mesh, scene: Scene, position: Vector3, animationGroups?: AnimationGroup) {\n    this._scene = scene;\n    this._lightmtl = lightmtl;\n\n    //create the lantern's sphere of illumination\n    const lightSphere = MeshBuilder.CreateSphere(\"illum\", {segments: 4, diameter:20}, this._scene);\n    lightSphere.scaling.y = 2;\n    lightSphere.setAbsolutePosition(position);\n    lightSphere.parent = this.mesh;\n    lightSphere.isVisible = false;\n    lightSphere.isPickable = false;\n    this._lightSphere = lightSphere;\n\n    //load the lantern mesh\n    this._loadLantern(mesh, position);\n}\n```\n\n----------------------------------------\n\nTITLE: Physics Joint Types in BabylonJS\nDESCRIPTION: Enumerates the available physics joint types in BabylonJS, including distance, hinge, ball and socket, wheel, and slider joints.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.PhysicsJoint.DistanceJoint;\nBABYLON.PhysicsJoint.HingeJoint;\nBABYLON.PhysicsJoint.BallAndSocketJoint;\nBABYLON.PhysicsJoint.WheelJoint;\nBABYLON.PhysicsJoint.SliderJoint;\nBABYLON.PhysicsJoint.Hinge2Joint = BABYLON.PhysicsJoint.WheelJoint;\nBABYLON.PhysicsJoint.PointToPointJoint = BABYLON.PhysicsJoint.BallAndSocketJoint;\nBABYLON.PhysicsJoint.SpringJoint;\n```\n\n----------------------------------------\n\nTITLE: Calculating Distances Along Path3D in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to use the `getDistances()` method on a `Path3D` instance (`path3d`). It returns an array of numbers, where each element represents the total distance from the start of the path to the corresponding point. The first element is always 0.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/path3D.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst distances = path3d.getDistances();\n```\n\n----------------------------------------\n\nTITLE: Enabling Framing Behavior for ArcRotateCamera in BabylonJS\nDESCRIPTION: Enables automatic positioning of an ArcRotateCamera relative to its target mesh. Includes configuration options for framing mode, radius scale, position scale, and elevation properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/cameraBehaviors.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.useFramingBehavior = true;\n```\n\n----------------------------------------\n\nTITLE: Checking Individual SPS Particle Frustum Visibility in JavaScript\nDESCRIPTION: Demonstrates how to check if an individual Solid Particle System particle is within the camera's view frustum. It requires forcing the scene's transform matrix update to get current frustum planes, then calling `particle.isInFrustum()` with these planes. This example conditionally sets a particle's `alive` property based on the frustum check, but notes this check is primarily for custom logic optimization, not rendering culling, due to performance costs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_visibility.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.updateTransformMatrix(); // force the plane computation once\nvar frustumPlanes = scene.frustumPlanes;\n// then in some loop ...\nif (!particle.isInFrustum(frustumePlanes)) {\n  p.alive = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Fragment Shader in Babylon.js\nDESCRIPTION: Demonstrates how to assign a fragment shader to the shader store and create a custom effect. The shader name must have 'FragmentShader' appended.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Effect.ShadersStore[\"myParticleFragmentShader\"] = [...]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar customEffect = engine.createEffectForParticles(\"myParticle\", [...]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Disc/Polygon using MeshBuilder in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates creating a disc or regular polygon mesh using the `BABYLON.MeshBuilder.CreateDisc` method. It accepts an options object to configure properties like `radius`, `tessellation` (number of sides), `arc` (for sectors), `updatable`, and `sideOrientation`. The `scene` parameter is optional and defaults to the current scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/disc.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst disc = BABYLON.MeshBuilder.CreateDisc(\"disc\", options, scene); //scene is optional and defaults to the current scene \n```\n\n----------------------------------------\n\nTITLE: Configuring BoundingBoxGizmo Rotation Axis in Babylon.js\nDESCRIPTION: Demonstrates how to customize the enabled rotation axis for a BoundingBoxGizmo.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// only enable rotation on x and y axis\ngizmo.setEnabledRotationAxis(\"xy\");\n```\n\n----------------------------------------\n\nTITLE: Loading DDS CubeTexture in Babylon.js\nDESCRIPTION: Demonstrates loading a DDS file as a CubeTexture for the skybox material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nskyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"/assets/textures/SpecularHDR.dds\", scene);\n```\n\n----------------------------------------\n\nTITLE: Modifying Ribbon Path Data for Morphing in Babylon.js\nDESCRIPTION: This snippet shows how to modify the coordinate data within an existing `pathArray` used to define a ribbon mesh. The `updatePath` function iterates through the points in a single path and updates their `y` coordinate based on a sine function. The outer loop then applies this function to every path within the `pathArray`. This prepares the data for updating the ribbon mesh geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst updatePath = function (path) {\n  for (let i = 0; i < path.length; i++) {\n    const x = path[i].x;\n    const z = path[i].z;\n    const y = 20 * Math.sin(i / 10);\n    path[i].x = x;\n    path[i].y = y;\n    path[i].z = z;\n  }\n};\n\n// update pathArray\nfor (let p = 0; p < pathArray.length; p++) {\n  updatePath(pathArray[p]);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Texture to a Material in Babylon.js (JavaScript)\nDESCRIPTION: This snippet creates a Babylon.js Texture from a specified asset path, then assigns the resulting texture to the diffuseTexture property of a StandardMaterial. This overlays a given image (here a checkerboard) atop any color previously set. Dependencies include the presence of the Assets object with the required texture (checkerboard_basecolor_png) and a scene instance. The texture's visibility is immediate upon rerunning the scene, replacing or blending with the existing diffuse color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/journey/theFirstStep.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet groundTexture = new BABYLON.Texture(Assets.textures.checkerboard_basecolor_png.path, scene);\\ngroundMaterial.diffuseTexture = groundTexture;\n```\n\n----------------------------------------\n\nTITLE: Defining HandTracking Interface in TypeScript\nDESCRIPTION: Interface definition for hand tracking feature environment that handles gesture recognition and combination management. Includes core functionality for managing gesture repositories and recognition control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/gestureRecognition.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IHandTrackingXRFeatEnv extends IXRFeatEnv<WebXRHandTracking> {\n\t// Repository of gestures (Handshapes)\n\treadonly gesturesRepo:IGesturesRepo;\n\t\n\t// Repository of combinations\n\treadonly combinationsReposMap:Map<string, ICombinationsRepo>;\n\t\n\t// Combinations flow\n\treadonly combinations$:Observable<TCombinationInfo>;\n\t\n\t// Start \\ stop recognition\n\tstartRecognize(combinationsRepoName?:string):void;\n\tstopRecognize(combinationsRepoName?:string):TFigureRecognizeReport | undefined;\n\t\n\t// Options setters\n\tsetRecognizeOptions(options:Partial<TGestureMatchOptions>):void;\n\t\n\t// ... other functions\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Mesh\nDESCRIPTION: Generates a navigation mesh from multiple scene meshes using the configured parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/createNavMesh.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigationPlugin.createNavMesh([groundMesh, wallMesh1, wallMesh2, stair1, stair2], parameters);\n```\n\n----------------------------------------\n\nTITLE: Applying a Simple Custom Shader using ImageFilter in JavaScript\nDESCRIPTION: Demonstrates creating and applying a custom fragment shader using EffectWrapper with ImageFilter. The example shader samples the input texture and swizzles the red and blue color channels. `vUV` varying and `textureSampler` uniform are available by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst customEffectWrapper = new EffectWrapper({\n  name: \"Custom\",\n  engine: customFilter.engine,\n  fragmentShader: `\n        // Samplers\n        varying vec2 vUV;\n        uniform sampler2D textureSampler;\n        \n        void main(void) \n        {\n            gl_FragColor = texture2D(textureSampler, vUV);\n\n            // Swizzle channels\n            float r = gl_FragColor.r;\n            gl_FragColor.r = gl_FragColor.b;\n            gl_FragColor.b = r;\n        }\n    `,\n  samplerNames: [\"textureSampler\"],\n});\ncustomFilter.filter(imageToProcess, customEffectWrapper);\n```\n\n----------------------------------------\n\nTITLE: Drawing Curves on Dynamic Texture in Babylon.js\nDESCRIPTION: Uses HTML5 Canvas methods to draw a quadratic curve path on a dynamic texture. After drawing operations, the texture must be updated to display changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nctx.beginPath();\nctx.moveTo(75, 25);\nctx.quadraticCurveTo(25, 25, 25, 62.5);\nctx.quadraticCurveTo(25, 100, 50, 100);\nctx.quadraticCurveTo(50, 120, 30, 125);\nctx.quadraticCurveTo(60, 120, 65, 100);\nctx.quadraticCurveTo(125, 100, 125, 62.5);\nctx.quadraticCurveTo(125, 25, 75, 25);\nctx.stroke();\n```\n\n----------------------------------------\n\nTITLE: Rotating Environment Texture Reflection (Babylon.js, JavaScript)\nDESCRIPTION: This snippet shows how to rotate the environment texture for a Babylon.js scene using a specified angle in degrees. The code leverages setReflectionTextureMatrix and Matrix.RotationY, applying a rotation transform to the texture. Dependencies: Babylon.js, particularly the BABYLON.Matrix and BABYLON.Tools namespaces; scene and environmentTexture must exist. Accepts a numeric angle in degrees. Resulting reflections in the scene appear rotated by the specified amount. This is useful for scene alignment or artistic control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/HDREnvironment.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst hdrRotation = 10; // in degrees\nscene.environmentTexture.setReflectionTextureMatrix(BABYLON.Matrix.RotationY(BABYLON.Tools.ToRadians(hdrRotation)));\n```\n\n----------------------------------------\n\nTITLE: Creating Camera Movement Animation in BabylonJS\nDESCRIPTION: This code creates a Vector3 animation for camera position to move the camera from outside a building to inside, with specific keyframes defining the position at different times. The animation uses constant loop mode and runs at the defined frame rate.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/sequenceAnimations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//for camera move forward\nconst movein = new BABYLON.Animation(\"movein\", \"position\", frameRate, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);\n\nconst movein_keys = [];\n\nmovein_keys.push({\n  frame: 0,\n  value: new BABYLON.Vector3(0, 5, -30),\n});\n\nmovein_keys.push({\n  frame: 3 * frameRate,\n  value: new BABYLON.Vector3(0, 2, -10),\n});\n\nmovein_keys.push({\n  frame: 5 * frameRate,\n  value: new BABYLON.Vector3(0, 2, -10),\n});\n\nmovein_keys.push({\n  frame: 8 * frameRate,\n  value: new BABYLON.Vector3(-2, 2, 3),\n});\n\nmovein.setKeys(movein_keys);\n\n//for camera to sweep round\nconst rotate = new BABYLON.Animation(\"rotate\", \"rotation.y\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);\n\nconst rotate_keys = [];\n\nrotate_keys.push({\n  frame: 0,\n  value: 0,\n});\n\nrotate_keys.push({\n  frame: 9 * frameRate,\n  value: 0,\n});\n\nrotate_keys.push({\n  frame: 14 * frameRate,\n  value: Math.PI,\n});\n\nrotate.setKeys(rotate_keys);\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Light Estimation with Directional Light Source\nDESCRIPTION: Example of enabling the WebXR Light Estimation feature with a directional light source that will update automatically based on the real environment lighting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightEstimationFeature = featuresManager.enableFeature(BABYLON.WebXRFeatureName.LIGHT_ESTIMATION, \"latest\", {\n  createDirectionalLightSource: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Rotating a Babylon.js Mesh Using the rotate Method (JavaScript)\nDESCRIPTION: This code demonstrates rotating a Babylon.js mesh around a custom axis vector using the mesh.rotate() method, specifying the axis, angle in radians, and world space. The subsequent console.log statements print out each component of the mesh's rotationQuaternion to verify the result. Dependencies include an initialized Babylon.js scene and a mesh object; the mesh variable must reference a valid mesh. Expected input includes the axis as a BABYLON.Vector3, the angle as a number, and the space as BABYLON.Space. Outputs are the modified rotationQuaternion and console output revealing its values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_quaternions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(new BABYLON.Vector3(1, 0 -1), Math.PI / 3, BABYLON.Space.WORLD);\nconsole.log(mesh.rotationQuaternion.x);\nconsole.log(mesh.rotationQuaternion.y);\nconsole.log(mesh.rotationQuaternion.z);\nconsole.log(mesh.rotationQuaternion.w);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Babylon.js Particle System\nDESCRIPTION: Creates a new instance of the Babylon.js ParticleSystem. Requires a unique name string and a capacity number defining the maximum number of particles alive simultaneously. The scene parameter is optional and defaults to the current scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myParticleSystem = new BABYLON.ParticleSystem(\"particles\", capacity, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Restricting WebXR Teleportation to Snap Points Only\nDESCRIPTION: Configures the teleportation feature to limit user movement exclusively to predefined snap points, preventing free movement elsewhere in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst interestingSpot = new BABYLON.Vector3(-4, 0, 4);\nconst interestingSpot2 = new BABYLON.Vector3(4, 0, 4);\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  snapPositions: [interestingSpot, interestingSpot2],\n  snapToPositionRadius: 1.2,\n  snapPointsOnly: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Babylon.js Scene with Vite - TypeScript\nDESCRIPTION: This TypeScript code creates a Babylon.js application that generates a demo scene with a camera, light, and sphere. It makes use of module imports for Babylon.js core and Inspector, and dynamically creates a canvas element, attaching it to the page and initializing the rendering engine. The code sets up keyboard shortcuts to toggle the Babylon.js Inspector (Shift+Ctrl+Alt+I) and executes the render loop. Dependencies include @babylonjs/core, @babylonjs/inspector, and Vite for local development. Input is user interaction via the browser; output is a rendered 3D scene. The application expects to be bundled by a module-aware system like Vite, with ECMAScript module syntax enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/usingVite.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@babylonjs/core/Debug/debugLayer\";\nimport \"@babylonjs/inspector\";\nimport { Engine, Scene, ArcRotateCamera, Vector3, HemisphericLight, Mesh, MeshBuilder } from \"@babylonjs/core\";\n\nclass App {\n    constructor() {\n        // create the canvas html element and attach it to the webpage\n        var canvas = document.createElement(\"canvas\");\n        canvas.style.width = \"100%\";\n        canvas.style.height = \"100%\";\n        canvas.id = \"gameCanvas\";\n        document.body.appendChild(canvas);\n\n        // initialize babylon scene and engine\n        var engine = new Engine(canvas, true);\n        var scene = new Scene(engine);\n\n        var camera: ArcRotateCamera = new ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), scene);\n        camera.attachControl(canvas, true);\n        var light1: HemisphericLight = new HemisphericLight(\"light1\", new Vector3(1, 1, 0), scene);\n        var sphere: Mesh = MeshBuilder.CreateSphere(\"sphere\", { diameter: 1 }, scene);\n\n        // hide/show the Inspector\n        window.addEventListener(\"keydown\", (ev) => {\n            // Shift+Ctrl+Alt+I\n            if (ev.shiftKey && ev.ctrlKey && ev.altKey && ev.keyCode === 73) {\n                if (scene.debugLayer.isVisible()) {\n                    scene.debugLayer.hide();\n                } else {\n                    scene.debugLayer.show();\n                }\n            }\n        });\n\n        // run the main render loop\n        engine.runRenderLoop(() => {\n            scene.render();\n        });\n    }\n}\nnew App();\n```\n\n----------------------------------------\n\nTITLE: Creating Box with Basic Mesh in Babylon.js\nDESCRIPTION: Creates a basic cube mesh with limited customization options. Only supports creating perfect cubes, requiring scaling for cuboid shapes. Includes parameters for size, updatable status, and side orientation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/box.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", { size, updatable, sideOrientation}, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Rendering Auto-Clear for Depth and Stencil in Babylon.js\nDESCRIPTION: Shows how to configure automatic clearing of depth and stencil buffers for specific rendering groups.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nscene.setRenderingAutoClearDepthStencil(renderingGroupIdx, autoClear, depth, stencil);\n```\n\n----------------------------------------\n\nTITLE: Yielding Promises in Babylon.js Coroutines for Asynchronous Pausing (JavaScript)\nDESCRIPTION: This example highlights the ability to pause a Babylon.js coroutine until a yielded Promise has resolved. It features both an async function and a generator coroutine that uses yield to wait for asynchronous completion (here, a delay). Dependencies: Babylon.js scene, BABYLON.Tools.DelayAsync, JavaScript generator and async function syntax. The coroutine prints 'A' and 'B' on separate frames, yields to await asynchronousFunc (which awaits a Promise), then continues to print 'C' and 'D' over two more frames. No parameters are required. Outputs are console logs in sequence, spread over frames and after a delay. All referenced functions/scene variables must be available in scope.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/coroutines.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst asynchronousFunc = async function () {\n  await BABYLON.Tools.DelayAsync(1000);\n};\n\nconst coroutineFunc = function* () {\n  console.log(\"A\");\n  yield;\n  console.log(\"B\");\n  yield asynchronousFunc();\n  console.log(\"C\");\n  yield;\n  console.log(\"D\");\n};\n\nscene.onBeforeRenderObservable.runCoroutineAsync(coroutineFunc());\n```\n\n----------------------------------------\n\nTITLE: Configuring LayerMask for GUI and PostProcesses\nDESCRIPTION: Example of setting up layer masks to prevent postprocesses from affecting GUI elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera2 = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, 100, BABYLON.Vector3.Zero(), scene);\ncamera2.layerMask = 2;\n\n// GUI - simply set advancedTexture layerMask to 2\nconst advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nadvancedTexture.layer.layerMask = 2;\n```\n\n----------------------------------------\n\nTITLE: Initializing a GPUParticleSystem in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates the basic creation of a GPU particle system using the `BABYLON.GPUParticleSystem` constructor. It takes a name (\"particles\"), an options object specifying the maximum particle capacity (1,000,000 in this example), and the scene instance as arguments. This leverages WebGL2 for performance gains.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/gpu_particles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar particleSystem = new BABYLON.GPUParticleSystem(\"particles\", { capacity:1000000 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Including glTF File Loader Scripts in HTML\nDESCRIPTION: HTML script tags for including the Babylon.js core and glTF File Loader plugin. This setup supports both glTF 1.0 and 2.0 versions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.js\"></script>\n<script src=\"babylon.glTFFileLoader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Lantern Object Instances in Babylon.js\nDESCRIPTION: Instantiates a new Lantern object for each cloned mesh. Each instance is configured with the light material, mesh, scene, position, and animation group, then added to the lantern objects array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//Create the new lantern object\nlet newLantern = new Lantern(\n  this._lightmtl,\n  lanternInstance,\n  this._scene,\n  assets.env\n    .getChildTransformNodes(false)\n    .find((m) => m.name === \"lantern \" + i)\n    .getAbsolutePosition(),\n  animGroupClone,\n);\nthis._lanternObjs.push(newLantern);\n```\n\n----------------------------------------\n\nTITLE: Configuring Billboard Modes in Babylon.js ParticleSystem - JavaScript\nDESCRIPTION: Adjusts the billboardMode property for a Babylon.js ParticleSystem to control whether particles are fully billboarding, restricted to the Y axis, or stretched along a direction. Requires a Babylon.js scene and properly initialized ParticleSystem. Mode constants like BILLBOARDMODE_Y and BILLBOARDMODE_STRETCHED allow advanced orientation effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/ramps_and_blends.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.billboardMode = BABYLON.ParticleSystem.BILLBOARDMODE_Y;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.billboardMode = BABYLON.ParticleSystem.BILLBOARDMODE_STRETCHED;\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Thickness\nDESCRIPTION: Demonstrates how to set up thickness mapping for a PBR material using a texture and thickness range values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\npbr.metallic = 0;\npbr.roughness = 0;\n\npbr.subSurface.isRefractionEnabled = true;\npbr.subSurface.indexOfRefraction = 1.5;\npbr.subSurface.tintColor = BABYLON.Color3.Teal();\n\npbr.subSurface.thicknessTexture = texture;\npbr.subSurface.minimumThickness = 1;\npbr.subSurface.maximumThickness = 10;\n```\n\n----------------------------------------\n\nTITLE: Loading Sprite Manager from Snippet Server in Babylon.js\nDESCRIPTION: This code demonstrates how to load a sprite manager from a saved snippet on the Babylon.js snippet server. It uses the CreateFromSnippetAsync method, which takes a snippet ID and a scene as parameters. After loading, it shows the debug layer and selects the manager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_snippets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar spriteManagerPlayer = BABYLON.SpriteManager.CreateFromSnippetAsync(snippetID, scene).then(manager => {\n        scene.debugLayer.show();\n        scene.debugLayer.select(manager);\n });\n```\n\n----------------------------------------\n\nTITLE: Using RenderTargetTexture as a Material Texture in Babylon.js\nDESCRIPTION: This code snippet shows how to use the rendered image from a RenderTargetTexture as a texture for a material in the main scene render.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/renderTargetTextureMultiPass.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar mat = new BABYLON.StandardMaterial(\"RTT mat\", scene);\nmat.diffuseTexture = renderTarget;\n```\n\n----------------------------------------\n\nTITLE: Converting a Quaternion to Euler Angles (JavaScript)\nDESCRIPTION: This code converts a rotation quaternion to Euler angles by invoking the toEulerAngles() method on a quaternion object. This is useful when wanting to switch between quaternion and Euler angle representations in Babylon.js. It requires an initialized quaternion object named rotation_quaternion, and returns the equivalent Euler angles as a BABYLON.Vector3. The output can then be used for mesh.rotation or other visualization purposes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_quaternions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst euler = rotation_quaternion.toEulerAngles();\n```\n\n----------------------------------------\n\nTITLE: Accessing Quadratic Error Simplification for Mesh Decimation (JavaScript)\nDESCRIPTION: This snippet shows how to instantiate the QuadraticErrorSimplification class with a target mesh, enabling advanced decimation controls for mesh simplification. Users can set parameters like decimationIterations, aggressiveness, and syncIterations to control the simplification process, and then call simplify with specific settings and a callback. Dependencies include Babylon.js and a valid mesh object. Inputs are the mesh and configuration options; output is the decimated mesh passed to the callback.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/simplifyingMeshes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst decimator = new QuadraticErrorSimplification(meshToDecimate);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsimplify(settings, successCallback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transparent Shadows in Babylon.js\nDESCRIPTION: Set the transparencyShadow property to true on the shadow generator to allow transparent objects to cast shadows. For more advanced effects, enableSoftTransparentShadow can be used to create soft transparent shadows with dithering patterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.transparencyShadow = true;\n```\n\n----------------------------------------\n\nTITLE: Applying Lattice Deformation Directly to Mesh - Babylon.js - JavaScript\nDESCRIPTION: Uses the deformMesh method to apply lattice deformation to a mesh instance. Less manual than direct vertex data manipulation. Requires a mesh, a lattice, and a call to createNormals to fix normal vectors. Outputs a deformed mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\nlattice.deformMesh(sphere);\nsphere.createNormals(true);\n```\n\n----------------------------------------\n\nTITLE: Self-Removing Observer During Babylon.js Render Loop - JavaScript\nDESCRIPTION: Shows how an observer function can remove itself from the observable during the render cycle, typically based on a runtime condition. Requires Babylon.js. This approach checks if observers exist and that alpha exceeds a threshold before removing itself, allowing for temporary or conditional observer logic based on scene state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst alpha = 0;\nconst observer = scene.onBeforeRenderObservable.add(function () {\n  sphere.scaling.y = Math.cos(alpha);\n\n  alpha += 0.01;\n\n  if (scene.onBeforeRenderObservable.hasObservers && alpha > 3) {\n    scene.onBeforeRenderObservable.remove(observer);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Viewports in Babylon.js\nDESCRIPTION: Shows how to set up viewports for multiple cameras, defining the screen space each camera will render to using normalized coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/multiViewsPart2.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 1.0);\ncamera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Creating Physics Impostor with Mass in Babylon.js\nDESCRIPTION: Creates a physics impostor for a mesh with a specified mass of 2. Mass defines the amount of matter in the body and should be zero for static bodies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/forces.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 2 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Point Light for Lit Lanterns\nDESCRIPTION: Creates a point light at the lantern's position when it's lit. The light has specific intensity, radius, and color properties to create the desired illumination effect in the surrounding environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst light = new PointLight(\"lantern light\", this.mesh.getAbsolutePosition(), this._scene);\nlight.intensity = 30;\nlight.radius = 2;\nlight.diffuse = new Color3(0.45, 0.56, 0.8);\nthis._findNearestMeshes(light);\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Simultaneous Lights for a Material in Babylon.js\nDESCRIPTION: Defines the maximum number of lights that can simultaneously affect a single material. The default is 4. Increasing this allows more lights but may impact performance and shader complexity. This example sets the limit to 6 for a StandardMaterial.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst material = new BABYLON.StandardMaterial(\"mat\", scene);\nmaterial.maxSimultaneousLights = 6;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Colyseus Room State Schema (TypeScript)\nDESCRIPTION: This server-side TypeScript code defines the structure of the shared room state using Colyseus Schema. It defines a `Player` schema with `x`, `y`, `z` number properties, decorated with `@type` for synchronization. The main `MyRoomState` schema contains a `MapSchema` named `players`, which will hold `Player` instances keyed by their session IDs. This structure enables automatic state synchronization between the server and clients. Requires `@colyseus/schema` package.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// MyRoomState.ts\nimport { MapSchema, Schema, type } from \"@colyseus/schema\";\n\nexport class Player extends Schema {\n  @type(\"number\") x: number;\n  @type(\"number\") y: number;\n  @type(\"number\") z: number;\n}\n\nexport class MyRoomState extends Schema {\n  @type({ map: Player }) players = new MapSchema<Player>();\n}\n```\n\n----------------------------------------\n\nTITLE: Using onTasksDoneObservable with AssetsManager (JavaScript)\nDESCRIPTION: Handles the event when all asset tasks (successful or failed) have completed execution. This observer filters the results into successful and errored tasks. This code is typically used for batch post-processing or error reporting after all assets have loaded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nassetsManager.onTasksDoneObservable.add(function (tasks) {\n  const errors = tasks.filter(function (task) {\n    return task.taskState === BABYLON.AssetTaskState.ERROR;\n  });\n  const successes = tasks.filter(function (task) {\n    return task.taskState !== BABYLON.AssetTaskState.ERROR;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Properties in Babylon.js\nDESCRIPTION: Demonstrates how to set various sprite properties including position, angle, and reflection.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_manager.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.position =new BABYLON.Vector3(1, 1, 1);\nsprite.angle = Math.PI/4;\nsprite.invertU = true; //vertical reflection\nsprite.invertV = true; //horizontal reflection\n```\n\n----------------------------------------\n\nTITLE: Creating Container Shape in BabylonJS\nDESCRIPTION: Creates a physics container that can hold multiple child shapes. Useful for complex objects that need multiple collision shapes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeContainer(\n    scene   // scene of the shape\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Assets into AssetContainer (TypeScript)\nDESCRIPTION: Uses LoadAssetContainerAsync to load Babylon.js assets from a file into an AssetContainer without appending them to the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = await BABYLON.LoadAssetContainerAsync(\"path/to/model\", scene);\n```\n\n----------------------------------------\n\nTITLE: Moving Controls by World Coordinates in Babylon.js GUI (JavaScript)\nDESCRIPTION: Shows how to move Babylon.js GUI controls to specific 3D positions using the 'moveToVector3' method, which takes a Vector3 coordinate as input. This function sets the overlayed GUI control to a new location in the scene, but does not update the position if the vector changes post-assignment. Requires Babylon.js and a 3D Vector3 object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.moveToVector3(position);\n```\n\n----------------------------------------\n\nTITLE: Calculating Vertices and Tile Indices Length for Tiled Ground in Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to extract the total vertex count and determine the number of indices per tile in a tiled ground mesh. Dependencies include an initialized Babylon.js mesh assigned to 'tiledGround', and the 'subdivisions' parameter defined in the options. 'getTotalVertices' returns the count of all vertices in the mesh. 'getIndices' returns the mesh's indices array; dividing its length by the total number of tiles derives tile index count. Key inputs: 'tiledGround' mesh and valid 'subdivisions.w' and 'subdivisions.h'. Outputs are two constants for use when constructing submeshes or materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_ground.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst verticesCount = tiledGround.getTotalVertices();\nconst tileIndicesLength = tiledGround.getIndices().length / (subdivisions.w * subdivisions.h);\n```\n\n----------------------------------------\n\nTITLE: Modifying Reference Space\nDESCRIPTION: Example of manually adjusting the reference space to move the player position\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// move the player 2 units (meters) up:\n\n// height change - move the reference space negative 2 units (up two units):\nconst heightChange = new XRRigidTransform({\n  x: 0,\n  y: -2,\n  z: 0,\n});\n// get a new reference space object using the current reference space\nconst newReferenceSpace = xrSession.referenceSpace.getOffsetReferenceSpace(heightChange);\n// update the session manager to start using the new space:\nxrSession.referenceSpace = newReferenceSpace;\n```\n\n----------------------------------------\n\nTITLE: Creating Parametric Meshes with MeshBuilder in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create parametric meshes using the MeshBuilder class in Babylon.js. It shows two methods: Create and Extrude, both of which accept a name, options object, and an optional scene parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = BABYLON.MeshBuilder.Create<MeshType>(name, options, scene);\nconst mesh = BABYLON.MeshBuilder.Extrude<MeshType>(name, options, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Cylinder Shape in BabylonJS\nDESCRIPTION: Creates a physics cylinder shape defined by two points and a radius. Ideal for objects like barrels and wheels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeCylinder(\n    new BABYLON.Vector3(0, -0.5, 0),    // starting point of the cylinder segment\n    new BABYLON.Vector3(0,  0.5, 0),    // ending point of the cylinder segment\n    1,                                  // radius of the cylinder\n    scene                               // scene of the shape\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Mirror Surface with Dynamic Reflection in BabylonJS\nDESCRIPTION: Demonstrates how to create a reflective mirror surface using MirrorTexture in BabylonJS. The code creates a plane mesh, positions it in 3D space, applies a reflective material, and sets up the mirror plane using the mesh's normal vector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/reflectionTexture.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create, position, and rotate a flat mesh surface.\nconst mesh = BABYLON.MeshBuilder.CreatePlane(\"mirrorMesh\", {width: 5, height: 5}, scene);\nmesh.position = new BABYLON.Vector3(0, 0, 4);\nmesh.rotation = new BABYLON.Vector3(Math.PI/4, Math.PI/6, Math.PI/8);\n\n// Create the reflective material for the mesh.\nmesh.material = new BABYLON.StandardMaterial(\"mirrorMaterial\", scene);\nmesh.material.reflectionTexture = new BABYLON.MirrorTexture(\"mirrorTexture\", 512, scene, true);\n\n// Get a normal vector from the mesh and invert it to create the mirror plane.\nmesh.material.reflectionTexture.mirrorPlane = BABYLON.Plane.FromPositionAndNormal(\n    mesh.position, mesh.getFacetNormal(0).scale(-1));\nmesh.material.reflectionTexture.renderList = [... list of meshes ...];\n```\n\n----------------------------------------\n\nTITLE: Applying Delta Changes to Babylon.js Scene\nDESCRIPTION: Demonstrates how to apply previously recorded delta changes to a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/deltaFiles.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneRecorder.ApplyDelta(delta, scene);\n```\n\n----------------------------------------\n\nTITLE: Reusing Physics Shapes - V2 Implementation\nDESCRIPTION: Example of reusing physics shapes in V2 to optimize memory usage when multiple objects share the same collision properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/migrateFromV1.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst complexModel = await BABYLON.ImportMeshAsync(...);\nconst body = new BABYLON.PhysicsBody(complexModel, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\nbody.shape = sphereShape;\nbody.setMassProperties({mass: complexModelMass});\n```\n\n----------------------------------------\n\nTITLE: Using the Physics Debug Viewer for Constraints in Babylon.js\nDESCRIPTION: This snippet demonstrates how to visualize physics constraints for debugging purposes. It creates a PhysicsViewer, adds a hinge constraint between two bodies, and shows how to display and hide the constraint visualization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/constraints.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nphysicsViewer = new BABYLON.Debug.PhysicsViewer(scene, visualizationSizeFactor);\nlet joint = new BABYLON.HingeConstraint(\n    new BABYLON.Vector3(0, 0, -0.5),\n    new BABYLON.Vector3(0, 0, 0.5),\n    undefined,\n    undefined,\n    scene\n);\nagg1.body.addConstraint(agg2.body, joint);\n  \nphysicsViewer.showConstraint(joint);\nphysicsViewer.hideConstraint(joint);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gizmo Update Behavior in Babylon.js\nDESCRIPTION: Demonstrates how to configure the gizmo to update its rotation and position based on the attached mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Keep the gizmo fixed to world rotation\ngizmo.updateGizmoRotationToMatchAttachedMesh = false;\ngizmo.updateGizmoPositionToMatchAttachedMesh = true;\n```\n\n----------------------------------------\n\nTITLE: Creating ShaderMaterial from ShadersStore in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates the creation of a `BABYLON.ShaderMaterial` instance. It references the shader code previously stored in `ShadersStore` using the base name 'custom'. It also specifies the required vertex attributes (`position`, `normal`, `uv`) and standard uniforms (`world`, `worldView`, etc.) that Babylon.js should provide to the shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst shaderMaterial = new BABYLON.ShaderMaterial(\n  \"shader\",\n  scene,\n  {\n    vertex: \"custom\",\n    fragment: \"custom\",\n  },\n  {\n    attributes: [\"position\", \"normal\", \"uv\"],\n    uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\"],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Applying a Multi-Material to a Mesh in Babylon.js\nDESCRIPTION: Creates a sphere mesh and assigns the multi-material to it. This demonstrates how to apply a multi-material to a mesh, though by default the mesh will only use the first submaterial.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/multiMaterials.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"Sphere0\", { segments: 16, diameter: 3 }, scene);\nsphere.material = multimat;\n```\n\n----------------------------------------\n\nTITLE: Adding Reflection and Refraction in Water Material\nDESCRIPTION: Demonstrates how to add meshes to the water material's render list for reflection and refraction effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/waterMat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwaterMaterial.addToRenderList(skybox);\nwaterMaterial.addToRenderList(mesh1);\nwaterMaterial.addToRenderList(mesh2);\n// ... etc.\n```\n\n----------------------------------------\n\nTITLE: Creating Screen Space Reflection Post-Process in Babylon.js\nDESCRIPTION: This code creates an instance of the ScreenSpaceReflectionPostProcess in Babylon.js, specifying the name, scene, ratio, and camera to which the post-process should be attached.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/screenSpaceReflectionsPostProcess.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ssr = new BABYLON.ScreenSpaceReflectionPostProcess(\n    \"ssr\", // The name of the post-process\n    scene, // The scene where to add the post-process\n    1.0, // The ratio of the post-process\n    camera // To camera to attach the post-process\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Bone Rotation with Matrix in Babylon.js\nDESCRIPTION: Shows how to set the rotation of a bone using a rotation matrix with the setRotationMatrix method. It takes a rotation matrix, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbone.setRotationMatrix(rotMat, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Adding Android platform to Ionic project\nDESCRIPTION: Command to add Android platform to the Ionic project using Capacitor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nionic capacitor add android\n```\n\n----------------------------------------\n\nTITLE: Implementing goToLose State Scene Function with BabylonJS - JavaScript\nDESCRIPTION: Defines an asynchronous method to initialize the 'Lose' state: sets up a loading UI, creates a new scene and camera, adds a GUI with a 'MAIN MENU' button that returns to the start state, and disposes and replaces the current scene once loading is complete. Requires BabylonJS Engine, Scene, FreeCamera, Color4, Vector3, and BabylonJS GUI modules. Primary inputs/outputs are managed via class variables and async scene flow rather than function arguments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprivate async _goToLose(): Promise<void> {\n    this._engine.displayLoadingUI();\n\n    //--SCENE SETUP--\n    this._scene.detachControl();\n    let scene = new Scene(this._engine);\n    scene.clearColor = new Color4(0, 0, 0, 1);\n    let camera = new FreeCamera(\"camera1\", new Vector3(0, 0, 0), scene);\n    camera.setTarget(Vector3.Zero());\n\n    //--GUI--\n    const guiMenu = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n    const mainBtn = Button.CreateSimpleButton(\"mainmenu\", \"MAIN MENU\");\n    mainBtn.width = 0.2;\n    mainBtn.height = \"40px\";\n    mainBtn.color = \"white\";\n    guiMenu.addControl(mainBtn);\n    //this handles interactions with the start button attached to the scene\n    mainBtn.onPointerUpObservable.add(() => {\n        this._goToStart();\n    });\n\n    //--SCENE FINISHED LOADING--\n    await scene.whenReadyAsync();\n    this._engine.hideLoadingUI(); //when the scene is ready, hide loading\n    //lastly set the current state to the lose state and set the scene to the lose scene\n    this._scene.dispose();\n    this._scene = scene;\n    this._state = State.LOSE;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Setting Custom Attributes for Thin Instances in TypeScript\nDESCRIPTION: Demonstrates how to register custom attributes for thin instances and set values for individual instances. This example registers a color attribute and assigns different colors to separate instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsphere.thinInstanceRegisterAttribute(\"color\", 4);\n\nsphere.thinInstanceSetAttributeAt(\"color\", idx, [1, 1, 0, 1]);\nsphere.thinInstanceSetAttributeAt(\"color\", idx2, [1, 0, 0, 1]);\n```\n\n----------------------------------------\n\nTITLE: Defining Track Sections and Creating Track (Babylon.js, JavaScript)\nDESCRIPTION: Defines multiple sectionData objects for distinct path intervals, collects them in an array, and initializes a track object. Section indices should partition the points array as intended. This pattern supports open or closed tracks and allows rich configuration via options per segment. Used after path-point creation and possible visualization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar section0 = new sectionData(0, options0);\nvar section1 = new sectionData(125, options1);\nvar section2 = new sectionData(250, options2);\nvar section3 = new sectionData(375, options3);\n\nvar sections = [section0, section1, section2, section3];\n\nvar track = createTrack(points, sections);\n```\n\n----------------------------------------\n\nTITLE: Initializing Boxes with Solid Particle System (SPS) in JavaScript\nDESCRIPTION: This JavaScript code sets up a Babylon.js Solid Particle System (SPS) to efficiently manage and display a large number of identical boxes. It defines parameters like the number of boxes, size, and spacing. A positioning function (`set_boxes`) arranges the boxes linearly along the x-axis. The SPS is then built into a single mesh for performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//Create SPS of Boxes\nvar boxes = 101; //odd number\nvar box_size = 0.25; // must be float\nvar box_gap = box_size/2;\nvar box_spacing = box_size + box_gap;\nvar box = BABYLON.MeshBuilder.CreateBox(\"box\", {size:box_size}, scene);\n\nvar boxes_SPS = new BABYLON.SolidParticleSystem(\"boxesSPS\", scene, {updatable: false});\n    \n//function to position boxes\nvar set_boxes = function(particle, i, s) {   \n    var mid_point = Math.floor(boxes/2);\n    particle.position.x = (i - mid_point) * box_spacing + box_size/2;\n}\n\nboxes_SPS.addShape(box, boxes, {positionFunction:set_boxes});  \nvar boxes = boxes_SPS.buildMesh(); // mesh of leaves\nbox.dispose();\n```\n\n----------------------------------------\n\nTITLE: Loading lil-gui Library for Babylon.js Fluid Renderer\nDESCRIPTION: This function asynchronously loads the lil-gui library script for use in the fluid renderer GUI. It uses Babylon.js Tools to load the script from a CDN.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function LoadLiLGUI(): Promise<void> {\n    return BABYLON.Tools.LoadScriptAsync(\"https://cdn.jsdelivr.net/npm/lil-gui@0.17.0/dist/lil-gui.umd.min.js\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Earth-like Gravity in Babylon.js\nDESCRIPTION: Calculates and applies Earth-like gravity using frames per second approximation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst assumedFramesPerSecond = 60;\nconst earthGravity = -9.81;\nscene.gravity = new BABYLON.Vector3(0, earthGravity / assumedFramesPerSecond, 0);\n```\n\n----------------------------------------\n\nTITLE: Width Configuration Example\nDESCRIPTION: Example showing how to configure line widths with distribution settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [0, 0, 0, 1, 0, 0];\nconst widths = [2, 2];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points, widths });\n// the width table will be filled as [2, 2, 1, 1]\n```\n\n----------------------------------------\n\nTITLE: Ground and Slope Physics Update\nDESCRIPTION: Updates character physics based on ground and slope detection, handling gravity and movement accordingly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt2.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (!this._isGrounded()) {\n  if (this._checkSlope() && this._gravity.y <= 0) {\n    this._gravity.y = 0;\n    this._jumpCount = 1;\n    this._grounded = true;\n  } else {\n    this._gravity = this._gravity.addInPlace(Vector3.Up().scale(this._deltaTime * Player.GRAVITY));\n    this._grounded = false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mesh Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a particle emitter that uses the surface of a given mesh (`sphere` in the example) for particle emission points using the `BABYLON.MeshParticleEmitter` constructor. Requires an existing `BABYLON.Mesh` object. Note that this emitter type is not supported by GPU particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n var meshEmitter = new BABYLON.MeshParticleEmitter(sphere);\n```\n\n----------------------------------------\n\nTITLE: Managing Sound Instances with maxInstances in Babylon.js\nDESCRIPTION: Shows how to limit the number of concurrent playback instances for a sound using the maxInstances option. The example creates a sound with maxInstances set to 2, then demonstrates how the oldest instance is stopped when a third instance is played.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sound = await BABYLON.CreateSoundAsync(\"sound\",\n    \"https://assets.babylonjs.com/sound/alarm-1.mp3\",\n    { maxInstances: 2 }\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\nsound.play(); // Instance #1.\n\nsetTimeout(() => {\n    sound.playbackRate = 2;\n    sound.play(); // Instance #2.\n    sound.pitch = 100;\n    sound.play(); // Instance #3.\n}, 4000);\n```\n\n----------------------------------------\n\nTITLE: Enabling Texture Alpha Blending for SPS Material in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable alpha blending for the material applied to a Solid Particle System (SPS) mesh by setting the `hasAlpha` property of its diffuse texture to `true`. This requires the SPS mesh to have a material with a diffuse texture assigned.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.mesh.material.diffuseTexture.hasAlpha = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Functions for CloudBis Procedural Texture in GLSL\nDESCRIPTION: This snippet contains helper functions used in the CloudBis procedural texture shader. It includes rand() for random number generation, noise() for creating a simple noise pattern, and fbm() (fractional Brownian motion) for generating cloud-like patterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/proceduralTextureForTexLibrary.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nfloat rand(vec2 n) {\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 1.0;\n\tfor (int i = 0; i < 4; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn += n;\n\t\tamplitude *= 0.5;\n\t}\n\treturn total;\n}\n```\n\n----------------------------------------\n\nTITLE: Raycasting for Reticle Feedback - Babylon.js JavaScript\nDESCRIPTION: Implements a castRay function, called before each render, to perform forward raycasting from the camera and dynamically set reticle color based on intersection with pickable meshes. Requires Babylon.js scene, camera, and the reticle mesh set up previously. Key parameters include hit testing results and reticle material. Inputs are the current camera pose and scene contents; outputs are visual changes in reticle color (green if pickable object is hit, otherwise red). Should be called within scene.registerBeforeRender for frame updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/vr_game.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*The function that runs to determine the behavior of the reticle.*/\nfunction castRay() {\n    var ray = camera.getForwardRay();\n\n    var hit = scene.pickWithRay(ray);\n\n    if (hit.pickedMesh) {\n        reticle.material.emissiveColor = BABYLON.Color3.Green();\n    } else {\n        reticle.material.emissiveColor = BABYLON.Color3.Red();\n    }\n}\n\nscene.registerBeforeRender(function () {\n    castRay();\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Anisotropy in Babylon.js PBR Material\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the anisotropy effect on a Babylon.js PBR material to simulate elongated highlights, typical of brushed metal or vinyl discs. It initializes a PBR material suitable for showing the effect (high metallic, low roughness), then enables anisotropy (`anisotropy.isEnabled = true`) and sets its intensity (`anisotropy.intensity`). Requires `BABYLON.PBRMaterial` and a `scene`. Note that well-defined mesh tangents are important for this effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.anisotropy.isEnabled = true;\npbr.anisotropy.intensity = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Extracting Lantern Mesh from Import Root\nDESCRIPTION: Extracts the actual lantern mesh from the root node of the imported glTF file. The parent reference is removed and the root node is disposed since only the mesh itself is needed for cloning.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//extract the actual lantern mesh from the root of the mesh that's imported, dispose of the root\nlet lantern = res.meshes[0].getChildren()[0];\nlantern.parent = null;\nres.meshes[0].dispose();\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Processing in Babylon.js Pipeline\nDESCRIPTION: Enables the image processing effect in the rendering pipeline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.imageProcessingEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Visualizing and Finalizing a Closed Track (Babylon.js, JavaScript)\nDESCRIPTION: Demonstrates how to close a path by appending the first point for visualization, create a polyline mesh with MeshBuilder, then remove the duplicate before extracting track data. This ensures the drawn path is closed while keeping the data structure compatible with track creation. Input is the points array; output is a visual mesh and a ready points array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npoints.push(points[0]); // push to close path\nvar lines = BABYLON.MeshBuilder.CreateLines(\"lines\", { points: points }, scene); //draw path of track\npoints.pop(); // remove before track creation\n```\n\n----------------------------------------\n\nTITLE: Streaming a Sound in Babylon.js\nDESCRIPTION: Demonstrates how to create and play a streaming sound, which is memory-efficient for longer audio files. Streaming sounds keep only a small portion of the audio in memory while playing, making them ideal for background music or narration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst narration = await BABYLON.CreateStreamingSoundAsync(\"narration\",\n    \"https://assets.babylonjs.com/sound/testing/60-count.mp3\"\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\nnarration.play()\n```\n\n----------------------------------------\n\nTITLE: Creating a Babylon.js Post Process from Node Material (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a new `BABYLON.PostProcess` instance directly from a `NodeMaterial` object that has been configured in 'Post Process' mode within the Node Material Editor. The `createPostProcess` method requires a `camera` object to attach the post process to.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/NMEPostProcesses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst postProcess = nodeMaterial.createPostProcess(camera);\n```\n\n----------------------------------------\n\nTITLE: Implementing Spherical Panning Camera Behavior in Babylon.js\nDESCRIPTION: A complete implementation of a spherical panning camera behavior for Babylon.js. This function adds Facebook/Google Maps-style 360° rotation to a scene with inertial movement and singularity handling at the poles. It uses quaternion math and requires Babylon.js versions after v3.3.0.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/SphericalPanning.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar addSphericalPanningCameraToScene = function (scene, canvas) {\n    // Set cursor to grab.\n    scene.defaultCursor = \"grab\";\n\n    // Add the actual camera to the scene.  Since we are going to be controlling it manually,\n    // we don't attach any inputs directly to it.\n    // NOTE: We position the camera at origin in this case, but it doesn't have to be there.\n    // Spherical panning should work just fine regardless of the camera's position.\n    var camera = new BABYLON.FreeCamera(\"camera\", BABYLON.Vector3.Zero(), scene);\n\n    // Ensure the camera's rotation quaternion is initialized correctly.\n    camera.rotationQuaternion = BABYLON.Quaternion.Identity();\n\n    // The spherical panning math has singularities at the poles (up and down) that cause\n    // the orientation to seem to \"flip.\"  This is undesirable, so this method helps reject\n    // inputs that would cause this behavior.\n    var isNewForwardVectorTooCloseToSingularity = v => {\n        const TOO_CLOSE_TO_UP_THRESHOLD = 0.99;\n        return Math.abs(BABYLON.Vector3.Dot(v, BABYLON.Vector3.Up())) > TOO_CLOSE_TO_UP_THRESHOLD;\n    }\n\n    // Local state variables which will be used in the spherical pan method; declared outside \n    // because they must persist from frame to frame.\n    var ptrX = 0;\n    var ptrY = 0;\n    var inertiaX = 0;\n    var inertiaY = 0;\n\n    // Variables internal to spherical pan, declared here just to avoid reallocating them when\n    // running.\n    var priorDir = new BABYLON.Vector3();\n    var currentDir = new BABYLON.Vector3();\n    var rotationAxis = new BABYLON.Vector3();\n    var rotationAngle = 0;\n    var rotation = new BABYLON.Quaternion();\n    var newForward = new BABYLON.Vector3();\n    var newRight = new BABYLON.Vector3();\n    var newUp = new BABYLON.Vector3();\n    var matrix = new BABYLON.Matrix.Identity();\n\n    // The core pan method.\n    // Intuition: there exists a rotation of the camera that brings priorDir to currentDir.\n    // By concatenating this rotation with the existing rotation of the camera, we can move\n    // the camera so that the cursor appears to remain over the same point in the scene, \n    // creating the feeling of smooth and responsive 1-to-1 motion.\n    var pan = (currX, currY) => {\n        // Helper method to convert a screen point (in pixels) to a direction in view space.\n        var getPointerViewSpaceDirectionToRef = (x, y, ref) => {\n            BABYLON.Vector3.UnprojectToRef(\n                new BABYLON.Vector3(x, y, 0), \n                canvas.width, \n                canvas.height,\n                BABYLON.Matrix.Identity(),\n                BABYLON.Matrix.Identity(), \n                camera.getProjectionMatrix(),\n                ref);\n            ref.normalize();\n        }\n\n        // Helper method that computes the new forward direction.  This was split into its own\n        // function because, near the singularity, we may to do this twice in a single frame\n        // in order to reject inputs that would bring the forward vector too close to vertical.\n        var computeNewForward = (x, y) => {\n            getPointerViewSpaceDirectionToRef(ptrX, ptrY, priorDir);\n            getPointerViewSpaceDirectionToRef(x, y, currentDir);\n\n            BABYLON.Vector3.CrossToRef(priorDir, currentDir, rotationAxis);\n\n            // If the magnitude of the cross-product is zero, then the cursor has not moved\n            // since the prior frame and there is no need to do anything.\n            if (rotationAxis.lengthSquared() > 0) {\n                rotationAngle = BABYLON.Vector3.GetAngleBetweenVectors(priorDir, currentDir, rotationAxis);\n                BABYLON.Quaternion.RotationAxisToRef(rotationAxis, -rotationAngle, rotation);\n\n                // Order matters here.  We create the new forward vector by applying the new rotation \n                // first, then apply the camera's existing rotation.  This is because, since the new\n                // rotation is computed in view space, it only makes sense for a camera that is\n                // facing forward.\n                newForward.set(0, 0, 1);\n                newForward.rotateByQuaternionToRef(rotation, newForward);\n                newForward.rotateByQuaternionToRef(camera.rotationQuaternion, newForward);\n\n                return !isNewForwardVectorTooCloseToSingularity(newForward);\n            }\n\n            return false;\n        }\n\n        // Compute the new forward vector first using the actual input, both X and Y.  If this results\n        // in a forward vector that would be too close to the singularity, recompute using only the\n        // new X input, repeating the Y input from the prior frame.  If either of these computations\n        // succeeds, construct the new rotation matrix using the result.\n        if (computeNewForward(currX, currY) || computeNewForward(currX, ptrY)) {\n            // We manually compute the new right and up vectors to ensure that the camera \n            // only has pitch and yaw, never roll.  This dependency on the world-space\n            // vertical axis is what causes the singularity described above.\n            BABYLON.Vector3.CrossToRef(BABYLON.Vector3.Up(), newForward, newRight);\n            BABYLON.Vector3.CrossToRef(newForward, newRight, newUp);\n\n            // Create the new world-space rotation matrix from the computed forward, right, \n            // and up vectors.\n            matrix.setRowFromFloats(0, newRight.x, newRight.y, newRight.z, 0);\n            matrix.setRowFromFloats(1, newUp.x, newUp.y, newUp.z, 0);\n            matrix.setRowFromFloats(2, newForward.x, newForward.y, newForward.z, 0);\n\n            BABYLON.Quaternion.FromRotationMatrixToRef(matrix.getRotationMatrix(), camera.rotationQuaternion);\n        }\n    };\n\n    // The main panning loop, to be run while the pointer is down.\n    var sphericalPan = () => {\n        pan(scene.pointerX, scene.pointerY);\n\n        // Store the state variables for use in the next frame.\n        inertiaX = scene.pointerX - ptrX;\n        inertiaY = scene.pointerY - ptrY;\n        ptrX = scene.pointerX;\n        ptrY = scene.pointerY;\n    }\n\n    // The inertial panning loop, to be run after the pointer is released until inertia\n    // runs out, or until the pointer goes down again, whichever happens first.  Essentially\n    // just pretends to provide a decreasing amount of input based on the last observed input,\n    // removing itself once the input becomes negligible.\n    const INERTIA_DECAY_FACTOR = 0.9;\n    const INERTIA_NEGLIGIBLE_THRESHOLD = 0.5;\n    var inertialPanObserver;\n    var inertialPan = () => {\n        if (Math.abs(inertiaX) > INERTIA_NEGLIGIBLE_THRESHOLD || Math.abs(inertiaY) > INERTIA_NEGLIGIBLE_THRESHOLD) {\n            pan(ptrX + inertiaX, ptrY + inertiaY);\n\n            inertiaX *= INERTIA_DECAY_FACTOR;\n            inertiaY *= INERTIA_DECAY_FACTOR;\n        }\n        else {\n            scene.onBeforeRenderObservable.remove(inertialPanObserver);\n        }\n    };\n\n    // Enable/disable spherical panning depending on click state.  Note that this is an \n    // extremely simplistic way to do this, so it gets a little janky on multi-touch.\n    var sphericalPanObserver;\n    var pointersDown = 0;\n    scene.onPointerDown = () => {\n        pointersDown += 1;\n        if (pointersDown !== 1) {\n            return;\n        }\n\n        // Disable inertial panning.\n        scene.onBeforeRenderObservable.remove(inertialPanObserver);\n\n        // Switch cursor to grabbing.\n        scene.defaultCursor = \"grabbing\";\n\n        // Store the current pointer position to clean out whatever values were left in\n        // there from prior iterations.\n        ptrX = scene.pointerX;\n        ptrY = scene.pointerY;\n        \n        // Enable spherical panning.\n        sphericalPanObserver = scene.onBeforeRenderObservable.add(sphericalPan);\n    }\n    scene.onPointerUp = () => {\n        pointersDown -= 1;\n        if (pointersDown !== 0) {\n            return;\n        }\n\n        // Switch cursor to grab.\n        scene.defaultCursor = \"grab\";\n\n        // Disable spherical panning.\n        scene.onBeforeRenderObservable.remove(sphericalPanObserver);\n\n        // Enable inertial panning.\n        inertialPanObserver = scene.onBeforeRenderObservable.add(inertialPan);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Sheen Color on PBR Material in Babylon.js\nDESCRIPTION: This code snippet shows how to apply a specific color tint to the sheen effect on a Babylon.js PBR material. It creates a PBR material, sets it to be non-metallic and rough, enables the sheen component, and sets the sheen color to red using `BABYLON.Color3.Red()`. This allows for simulating multi-colored fabric materials like certain types of satin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.metallic = 0.0;\npbr.roughness = 0.5;\n\npbr.sheen.isEnabled = true;\npbr.sheen.color = BABYLON.Color3.Red();\n```\n```\n\n----------------------------------------\n\nTITLE: Morphing ExtrudeShape using ExtrudeShapeCustom in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates creating a standard extruded shape using BABYLON.Mesh.ExtrudeShape and then updating or morphing it using BABYLON.Mesh.ExtrudeShapeCustom. This allows applying more complex transformations (like scaleFunction and rotationFunction) to a shape initially created with simpler parameters. The original mesh must be updatable, and the update call uses 'null' for the name and passes the original instance as the last parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet ext = BABYLON.Mesh.ExtrudeShape(\"ext\", shape1, path1, scale1, rotation1, cap, scene, true);\n// mesh update\next = BABYLON.Mesh.ExtrudeShapeCustom(null, shape2, path2, myScale2, myRotation2, null, null, null, null, null, null, ext);\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed-Point Cloth Physics\nDESCRIPTION: Implementation of a cloth physics impostor with fixed corner points to prevent movement at specified vertices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncloth.physicsImpostor =  new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.ClothImpostor, {margin, 0.2, fixedPoints: 3}, scene);\ncloth.physicsImpostor.velocityIterations = 10;\ncloth.physicsImpostor.positionIterations = 10;\ncloth.physicsImpostor.stiffness = 1;\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Controls via GUI Block - Babylon.js - JavaScript\nDESCRIPTION: This example details how to retrieve a GUI block by name from the frame graph and add a button control programmatically to its GUI. The snippet utilizes Babylon.js's AdvancedDynamicTexture API for GUI creation and attachment. It assumes the existence of the nrg instance, a named GUI block, the Babylon.js GUI module (BABYLON.GUI), and a scene reference. Users interact with the button to trigger frame graph editing via the onPointerClickObservable event.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBlocks/frameGraphBlocksDescription.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst guiBlock = nrg.getBlockByName(\"<name of the GUI block>\");\\nconst gui = guiBlock.gui;\\n\\nconst button = BABYLON.GUI.Button.CreateSimpleButton(\"button\", \"Edit Frame Graph\");\\n\\nbutton.onPointerClickObservable.add(() => {\\n    nrg.edit({\\n        nodeRenderGraphEditorConfig: {\\n            hostScene: scene,\\n        }\\n    });\\n});\\n\\ngui.addControl(button);\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Bone Weight Shader in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a BoneWeight shader material using `BABYLON.Debug.SkeletonViewer.CreateBoneWeightShader`. This shader visualizes the influence weight of a single, specific bone on the mesh vertices using a color gradient. It requires an options object and the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet boneWeightShader = BABYLON.Debug.SkeletonViewer.CreateBoneWeightShader(options, scene);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring VRDeviceOrientationFreeCamera with Multiview\nDESCRIPTION: Setup code for enabling multiview with VRDeviceOrientationFreeCamera, including metrics configuration and camera creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/multiViewsPart1.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable multiview\nconst multiviewMetrics = BABYLON.VRCameraMetrics.GetDefault();\nmultiviewMetrics.multiviewEnabled = true;\n// Create camera\nconst multiviewCamera = new BABYLON.VRDeviceOrientationFreeCamera(\"\", new BABYLON.Vector3(-10, 5, 0), scene, undefined, multiviewMetrics);\n```\n\n----------------------------------------\n\nTITLE: Registering KeyUp Trigger Action for Specific Key ('r') in Babylon.js\nDESCRIPTION: Shows how to register an action on the scene's `actionManager` that triggers when a specific key is released (`OnKeyUpTrigger`). The `parameter` value \"r\" ensures the action only fires when the 'r' key (case-insensitive by default comparison with `event.sourceEvent.key`) is released. An `ExecuteCodeAction` is used to log a message to the console. Requires `scene.actionManager` and `BABYLON.ExecuteCodeAction`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.actionManager.registerAction(\n  new BABYLON.ExecuteCodeAction(\n    {\n      trigger: BABYLON.ActionManager.OnKeyUpTrigger,\n      parameter: \"r\",\n    },\n    function () {\n      console.log(\"r button was pressed\");\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Radiance and Specular Over Alpha in PBR Materials\nDESCRIPTION: Shows how to turn off the effect where reflections and specular highlights appear on top of transparent areas of a material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseRadianceOverAlpha = false;\nuseSpecularOverAlpha = false;\n```\n\n----------------------------------------\n\nTITLE: Constructing a Flow Graph with Blocks and Connections in Babylon.js\nDESCRIPTION: Illustrates the process of creating various blocks (data and execution), connecting them with data and signal connections, and adding an event block to start the graph execution. This example uses a cooking process as an analogy.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// data blocks\nconst getVegetableBlock = new GetVariableBlock({ variableName: \"vegetable\" });\nconst getCutTypeBlock = new GetVariableBlock({ variableName: \"cutType\" });\n\n// execution blocks\nconst rinseBlock = new RinseBlock();\nrinseBlock.vegetableToRinse.connectTo(getVegetableBlock);\n// using a value directly, on each of the contexts\nrinseBlock.useSoap.setValue(true, potatoContext);\nrinseBlock.useSoap.setValue(false, carrotContext);\n\nconst cutBlock = new CutBlock();\ncutBlock.rinsedVegetable.connectTo(rinseBlock.rinsedVegetable); // connect the two blocks using a data connection\ncutBlock.cutType.connectTo(getCutTypeBlock);\n// trigger cut when done rinsing\nrinseBlock.doneRinsing.connectTo(cutBlock.startCutting);\n\nconst fryBlock = new FryBlock();\nfryBlock.cutVegetable.connectTo(cutBlock.cutVegetable); // connect the two blocks using a data connection\n\n// now the event block\nconst startCookingBlock = new StartCookingBlock();\ngraph.addEventBlock(startCookingBlock);\n\ngraph.start();\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Test Environment to JSDOM in JavaScript\nDESCRIPTION: Demonstrates how to configure the Jest test environment to `jsdom` using a comment block at the beginning of a test file. This overrides the default 'node' environment, making browser-specific objects like `window` and `document` available within the unit test scope.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n```\n\n----------------------------------------\n\nTITLE: Dynamic Terrain Color Map Generation in BabylonJS\nDESCRIPTION: Demonstrates creation of terrain data and color maps with noise generation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapSubX = 1000;\nconst mapSubZ = 800;\nconst seed = 0.3;\nnoise.seed(seed);\nconst mapData = new Float32Array(mapSubX * mapSubZ * 3);\nconst mapColors = new Float32Array(mapSubX * mapSubZ * 3);\nfor (const l = 0; l < mapSubZ; l++) {\n  for (const w = 0; w < mapSubX; w++) {\n    const x = (w - mapSubX * 0.5) * 5.0;\n    const z = (l - mapSubZ * 0.5) * 2.0;\n    const y = noise.simplex2(x, z);\n\n    mapData[3 * (l * mapSubX + w)] = x;\n    mapData[3 * (l * mapSubX + w) + 1] = y;\n    mapData[3 * (l * mapSubX + w) + 2] = z;\n\n    mapColors[3 * (l * mapSubX + w)] = 0.5 + Math.random() * 0.2;\n    mapColors[3 * (l * mapSubX + w) + 1] = 0.5 + Math.random() * 0.4;\n    mapColors[3 * (l * mapSubX + w) + 2] = 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Physics Debug Viewer Implementation\nDESCRIPTION: Shows how to implement the physics debug viewer to visualize physics bodies in the scene\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingPhysicsEngine.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nphysicsViewer = new BABYLON.Debug.PhysicsViewer();\nfor (const mesh of scene.rootNodes) {\n    if (mesh.physicsBody) {\n        const debugMesh = physicsViewer.showBody(mesh.physicsBody);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Wood Procedural Texture in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a Wood Procedural Texture, set its amplitude scale, and apply it to a standard material in Babylon.js. The texture is created with a size of 1024x1024 pixels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/proceduralTexturesLibrary/wood.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar woodMaterial = new BABYLON.StandardMaterial(\"woodMat\", scene);\nvar woodTexture = new BABYLON.WoodProceduralTexture(\"woodTex\", 1024, scene);\nwoodTexture.ampScale = 80.0;\nwoodMaterial.diffuseTexture = woodTexture;\n```\n\n----------------------------------------\n\nTITLE: Loading Particle System from Snippet Server using Babylon.js\nDESCRIPTION: Demonstrates loading a pre-saved particle system from the Babylon.js snippet server using `BABYLON.ParticleHelper.ParseFromSnippetAsync`. It requires a valid snippet ID (e.g., \"T54JV7\") and a scene instance. The loaded system is then configured to use a newly created sphere mesh as its emitter. This relies on the Babylon.js core library.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_snippets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 0.2, segments: 32}, scene);\nBABYLON.ParticleHelper.ParseFromSnippetAsync(\"T54JV7\", scene, false).then(system => {\n    system.emitter = sphere;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Debug UI for Testing 3D Watch States\nDESCRIPTION: Implements a debug user interface using Babylon.js GUI to allow testing different states of the 3D watch experience. This provides a way to control the app during development before integrating with the actual e-commerce frontend.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _createDebugUI() {\n    // Create GUI\n    const gui = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\n    // Create a panel for state buttons\n    const panel = new StackPanel();\n    panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n    panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n    gui.addControl(panel);\n\n    // Add buttons for each state\n    const states = Object.keys(State).filter(key => isNaN(Number(key)));\n    states.forEach(stateName => {\n        const stateValue = State[stateName as keyof typeof State];\n        const button = Button.CreateSimpleButton(stateName, stateName);\n        button.width = \"150px\";\n        button.height = \"40px\";\n        button.color = \"white\";\n        button.background = \"green\";\n        button.onPointerClickObservable.add(() => {\n            this.setState(stateValue);\n        });\n        panel.addControl(button);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Colyseus Server Project (Shell)\nDESCRIPTION: This command uses `npm init` with the `colyseus-app` template to scaffold a new Colyseus server project in the specified directory (`./babylonjs-multiplayer-server`). It sets up the basic file structure and dependencies for a Colyseus application. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init colyseus-app ./babylonjs-multiplayer-server\n```\n\n----------------------------------------\n\nTITLE: Creating ShadowGenerator in Babylon.js\nDESCRIPTION: Initializes a shadow generator with a specified shadow map size and light source for creating shadows in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/shadows.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Mesh Copies Using Solid Particle System\nDESCRIPTION: Demonstrates how to create multiple copies of a mesh using the Solid Particle System in Babylon.js. The code creates a tetrahedron, adds multiple copies to the SPS, and initializes their positions, scales, and rotations randomly within specified ranges. The SPS combines all copies into a single mesh for efficient rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/sps_as_clone.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSPS = new BABYLON.SolidParticleSystem(\"SPS\", scene);  //create the SPS\nconst tetra = BABYLON.MeshBuilder.CreatePolyhedron(\"tetra\", {}); //create the mesh\nSPS.addShape(tetra, 1500);      // add as many copies as you want to the SPS\ntetra.dispose(); //dispose of the original mesh\nconst spsMesh = SPS.buildMesh();  //builds the SPS mesh\n\n//Set the function to initialise the particle properties\nSPS.initParticles = () => {\n    for (let p = 0; p < SPS.nbParticles; p++) {\n        const particle = SPS.particles[p]  \n        particle.position.x = BABYLON.Scalar.RandomRange(-50, 50);\n        particle.position.y = BABYLON.Scalar.RandomRange(-50, 50);\n        particle.position.z = BABYLON.Scalar.RandomRange(-50, 50);\n    \n        const scale = BABYLON.Scalar.RandomRange(0.5, 1.5);\n        particle.scale.x = scale;\n        particle.scale.y = scale;\n        particle.scale.z = scale;\n\n\t        particle.rotation.x = BABYLON.Scalar.RandomRange(0, Math.PI);\n\t        particle.rotation.y = BABYLON.Scalar.RandomRange(0, Math.PI);\n\t        particle.rotation.z = BABYLON.Scalar.RandomRange(0, Math.PI);\n    }\n} ;\n\n\nSPS.initParticles(); //call the initialising function\nSPS.setParticles(); //apply the properties and display the mesh\n```\n\n----------------------------------------\n\nTITLE: Implementing Babylon Viewer in HTML\nDESCRIPTION: Basic HTML implementation showing how to add the Babylon Viewer to a webpage using CDN. The viewer is used to display a .glb 3D model from the Babylon.js playground.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_viewer.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n    <body>\n        <script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@babylonjs/viewer@preview/dist/babylon-viewer.esm.min.js\"></script>\n        <babylon-viewer source=\"https://playground.babylonjs.com/scenes/BoomBox.glb\"></babylon-viewer>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading Prefiltered DDS Cube Texture in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a Babylon.js CubeTexture from prefiltered DDS data. It utilizes the `BABYLON.CubeTexture.CreateFromPrefilteredData` static method, requiring the path to the `.dds` file and the current scene object as parameters. This is typically used for environment maps in PBR workflows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.CubeTexture.CreateFromPrefilteredData(\"textures/filename\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Effect for Particle Shaders in Babylon.js (JavaScript)\nDESCRIPTION: Provides the method for creating a custom BABYLON.Effect to be used as a custom shader for particles. The method belongs to the Babylon.js Engine instance and accepts a fragment shader name or ID, an array of uniform variable names, and an array of sampler textures. Outputs an Effect object to control rendering, requiring shaders to be present in either the store or DOM, and matching uniforms/samplers. Used with advanced particle customization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar customEffect = engine.createEffectForParticles(fragment, uniforms, samplers);\n```\n\n----------------------------------------\n\nTITLE: Installing WebXR Extension Package via NPM\nDESCRIPTION: Command to install the @clickon/xr-extension package using npm package manager. This is the first step to use the WebXR extension features in your project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/webxrextension.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @clickon/xr-extension\n```\n\n----------------------------------------\n\nTITLE: Setting Pivot in World Space with Pivot Matrix - Babylon.js (JavaScript)\nDESCRIPTION: Sets a mesh's pivot using a translation matrix computed from the difference between the mesh position (xc, yc, zc) and the desired pivot world coordinates (xp, yp, zp). Ensures the pivot is located at the correct world position. Includes both single-line and multi-step computation examples. Input: mesh, target world position. Output: mesh pivot aligned in world space. Depends on BABYLON.Matrix and BABYLON.Vector3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotMatrix(BABYLON.Matrix.Translation(xc - xp, yc - yp, zc - zp));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pivotAt = new BABYLON.Vector3(1, 1, 1);\nconst translation = box.position.subtract(pivotAt)\nbox.setPivotMatrix(BABYLON.Matrix.Translation(translation.x, translation.y, translation.z));\n```\n\n----------------------------------------\n\nTITLE: Rotating Bones in Babylon.js\nDESCRIPTION: Demonstrates how to rotate a bone around an axis using the rotate function. The method takes the axis, angle, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbone.rotate(axis, angle, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Clear Coat Index of Refraction in Babylon.js\nDESCRIPTION: This JavaScript code modifies the Index of Refraction (IOR) for the clear coat layer on a Babylon.js PBR material using the `clearCoat.indexOfRefraction` property. Changing the IOR affects the Fresnel effect, influencing how light reflects off the coating, allowing simulation of different coating materials like polyurethane (default is ~1.5). Assumes `pbr` is an existing `BABYLON.PBRMaterial` with clear coat enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\npbr.clearCoat.isTintEnabled = true;\npbr.clearCoat.indexOfRefraction = 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring BackgroundMaterial for Ground Projection in Babylon.js (JavaScript)\nDESCRIPTION: This snippet creates and configures a BackgroundMaterial to enable ground projection on the skybox. It activates the ground projection feature and sets the radius and height to define the appearance and placement of the simulated ground. Dependencies are Babylon.js and an active scene. Key parameters include enableGroundProjection (activates projection), projectedGroundRadius (controls disc size), and projectedGroundHeight (ground elevation). The configured material is then assigned to the skybox mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sky = new BABYLON.BackgroundMaterial(\"skyMaterial\", scene);\nsky.enableGroundProjection = true;\nsky.projectedGroundRadius = 20;\nsky.projectedGroundHeight = 3;\nskydome.material = sky;\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Occlusion State of a Mesh in Babylon.js (JavaScript)\nDESCRIPTION: This snippet sets the initial occlusion state of a mesh by explicitly marking it as occluded. When set to true, Babylon.js defers the render/no-render decision for the mesh until the asynchronous occlusion query result is available. This approach helps prevent premature drawing or hiding, especially if the object is initially obscured. This property should be set alongside proper occlusion query configuration, and requires Babylon.js and relevant occlusion query extensions. No parameters are involved beyond the mesh instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/occlusionQueries.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.isOccluded = true;\n```\n\n----------------------------------------\n\nTITLE: New Light Callback Implementation\nDESCRIPTION: Implementation of the callback function for handling layer masks on newly added lights.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/layerMasksAndMultiCam.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nonNewLight = function (newLight, positionInArray, scene) {\n  newLight.excludeWithLayerMask = 0x10000000;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Left/Right Movement (A/D Keys) in Babylon.js (JavaScript)\nDESCRIPTION: This code snippet extends the `KEYDOWN` switch statement from the keyboard observable. It adds cases for the 'a' and 'd' keys. Pressing 'a' increments the `bowlingBall`'s x-position by 0.1 (moving right relative to the initial view, assuming standard coordinate setup), and pressing 'd' decrements it by 0.1 (moving left). This provides aiming control. Requires the `bowlingBall` object and the keyboard listener structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncase \"a\":\n    bowlingBall.position.x += 0.1;\n    break\ncase \"d\":\n    bowlingBall.position.x -= 0.1;\n    break\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable from a Promise with Observable.FromPromise - JavaScript\nDESCRIPTION: Shows how to use Observable.FromPromise to create an Observable based on an asynchronous HTTP request using axios. When the promise resolves, the observer receives the server response and updates the GUI element. Requires Babylon.js and axios. Input is an HTTP GET request; output is updating GUI text on completion. Useful for integrating async workflows into the Observable system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onStatusObservable = Observable.FromPromise(axios(\"/ping\").then((response) => response.statusText));\n\nonStatusObservable.add((statusText) => {\n  text1.text = \"Server status: \" + statusText;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting PhotoDome Image Mode in Babylon.js (JavaScript)\nDESCRIPTION: Configures the PhotoDome to correctly interpret different 360 image formats. Set the `imageMode` property to `BABYLON.PhotoDome.MODE_MONOSCOPIC` for standard panoramic images, `BABYLON.PhotoDome.MODE_SIDEBYSIDE` for stereoscopic images where left and right eye views are adjacent horizontally, or `BABYLON.PhotoDome.MODE_TOPBOTTOM` for stereoscopic images where views are stacked vertically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360PhotoDome.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nphotoDome.imageMode = BABYLON.PhotoDome.MODE_MONOSCOPIC;\n// or\nphotoDome.imageMode = BABYLON.PhotoDome.MODE_SIDEBYSIDE;\n// or\nphotoDome.imageMode = BABYLON.PhotoDome.MODE_TOPBOTTOM;\n```\n\n----------------------------------------\n\nTITLE: Applying Color to Specific Mesh Face in Babylon.js\nDESCRIPTION: This snippet shows how to apply a specific color to a face of a mesh using the Color4 class. This approach doesn't require a material and allows setting RGBA values for each face.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfaceColors[f] = new BABYLON.Color4(r, g, b, a);\n```\n\n----------------------------------------\n\nTITLE: Applying Material Properties to Physics Shapes in Babylon.js\nDESCRIPTION: Shows how to create a physics material with friction and restitution properties, and apply it to a physics shape. These properties affect how objects interact during collisions and sliding.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0,0,0), 0.5, scene);\nconst material = {friction: 0.2, restitution: 0.3};\nshape.material = material;\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Terrain Map Data\nDESCRIPTION: JavaScript code demonstrating how to change the terrain's map data on the fly based on camera position, useful for implementing dynamic map loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// change the terrain map on the fly\nif (camera.position.z > someLimit) {\n  terrain.mapData = map2;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying YXZ Local Rotations Sequentially in JavaScript\nDESCRIPTION: Demonstrates applying yaw, pitch, and roll rotations sequentially to a mesh using the `rotate` method with local space coordinates. This sequence (Y-axis, then X-axis, then Z-axis in local space) corresponds to the Babylon.js `mesh.rotation` property convention.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(BABYLON.Axis.Y, yaw, BABYLON.Space.LOCAL);\nmesh.rotate(BABYLON.Axis.X, pitch, BABYLON.Space.LOCAL);\nmesh.rotate(BABYLON.Axis.Z, roll, BABYLON.Space.LOCAL);\n```\n\n----------------------------------------\n\nTITLE: Initializing Physics Impostors for Compound Bodies in Babylon.js\nDESCRIPTION: This snippet shows how to properly initialize physics impostors for compound bodies. Child impostors must be initialized before the parent impostor, and the mass of all parts will be accumulated in the compound body.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsphere2.physicsImpostor = new BABYLON.PhysicsImpostor(sphere2, BABYLON.PhysicsImpostor.SphereImpostor, {mass: 2, restitution: 0.8});\nsphere.physicsImpostor = new BABYLON.PhysicsImpostor(sphere, BABYLON.PhysicsImpostor.SphereImpostor, {mass: 2, restitution: 0.8});\n```\n\n----------------------------------------\n\nTITLE: Creating Softbody with Full Options\nDESCRIPTION: Example of creating a softbody physics impostor with all available configuration options including mass, friction, pressure, and iterations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n    mass: 15,\n    friction: 0.2,\n    restitution: 0.3,\n    pressure: 3500,\n    velocityIterations: 10,\n    positionIterations: 10,\n    stiffness: 1,\n    margin: 0.1,\n    damping: 0.05\n}\n\nnew BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.SoftbodyImpostor, options, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Crowd in Babylon.js\nDESCRIPTION: Initializes a new crowd with specified maximum agents and radius parameters. Takes three parameters: maximum number of agents, maximum agent radius, and the scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/crowdAgents.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst crowd = navigationPlugin.createCrowd(10, 0.1, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Screenshot Using RenderTarget in Babylon.js\nDESCRIPTION: Shows how to create a screenshot using a RenderTargetTexture, which offers additional configuration options including custom texture modification, anti-aliasing, and sprite rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToPNG.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Tools.CreateScreenshotUsingRenderTarget(engine, camera, size, successCallback, mimeType, samples, antialiasing, fileName, renderSprites, enableStencilBuffer, useLayerMask, quality, customizeTexture);\n```\n\n----------------------------------------\n\nTITLE: Creating Bouncing Animation for Solid Particles in Babylon.js\nDESCRIPTION: Uses a cosine function to create a bouncing effect for particles by varying their height over time. This produces a y-position that oscillates between 0 and 2h based on the angle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_animate.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet y = h * (1 + Math.cos(angle))\n```\n\n----------------------------------------\n\nTITLE: Creating Cloth Physics Impostor\nDESCRIPTION: Example of creating a cloth physics impostor with specific configuration for damping, iterations, and stiffness.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncloth.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.ClothImpostor, { margin: 0.25, damping: 0.01 }, scene);\ncloth.physicsImpostor.velocityIterations = 10;\ncloth.physicsImpostor.positionIterations = 10;\ncloth.physicsImpostor.stiffness = 1;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Sound Frequencies in Real-time with Babylon.js Analyzer (JavaScript)\nDESCRIPTION: Creates a Babylon.js sound asynchronously from a `.wav` file, ensuring the analyzer is enabled via the `analyzerEnabled: true` option. It waits for the audio engine to be unlocked, plays the sound looped, and then adds an observer to the scene's `onBeforeRenderObservable`. This observer retrieves the sound's frequency data using `analyzer.getByteFrequencyData()` on every frame and updates visualization elements (represented by `columns`). Dependencies include the Babylon.js library (`BABYLON`) and an initialized `audioEngine` and `scene`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/playingSoundsMusic.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounce = await BABYLON.CreateSoundAsync(\"bounce\",\n    \"sounds/bounce.wav\",\n    { analyzerEnabled: true }\n);\n\n// Wait until audio engine is ready to play sounds.\nawait audioEngine.unlockAsync();\n\nbounce.play({ loop: true });\n\n// Get the audio analyzer frequency data on every frame.\nscene.onBeforeRenderObservable.add(() => {\n    const frequencies = bounce.analyzer.getByteFrequencyData();\n    for (let i = 0; i < 16; i++) {\n        columns[i].value = frequencies[i] / 255;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Raycast Predicate and Picking in Babylon.js (JavaScript)\nDESCRIPTION: Defines a predicate function to filter meshes for the raycast, ensuring only pickable and enabled meshes are considered (useful for ignoring invisible collision helpers). It then executes the raycast against the scene (`this.scene`) using `pickWithRay`, passing the ray and the predicate to get the picking results.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet predicate = function (mesh) {\n    return mesh.isPickable && mesh.isEnabled();\n}\nlet pick = this.scene.pickWithRay(ray, predicate);\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Dashed Lines with MeshBuilder in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and update dashed lines in Babylon.js by configuring the required 'points' parameter, optionally enabling 'updatable' meshes, and handling instance updating for dynamic lines. It highlights that the 'scene' parameter is optional during creation but omitted when updating an instance. Dependencies include Babylon.js, with key parameters like 'points' for line paths, and optional 'updatable' and 'instance' for mesh modification. Inputs are 'options' and possibly a Babylon.js scene; outputs are dashed line mesh objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/dashed.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    points: myPoints, //vec3 array,\n    updatable: true\n}\n\nlet dashedlines = BABYLON.MeshBuilder.CreateDashedLines(\"dashedlines\", options, scene);  //scene is optional and defaults to the current scene\n\n// Update\noptions.points[0].x +=6; \noptions.instance = lines;\nlines = BABYLON.MeshBuilder.CreateDashedLines(\"dashedlines\", options); //No scene parameter when using instance\n\n```\n\n----------------------------------------\n\nTITLE: Handling Autoplay Policy Restrictions in Babylon.js\nDESCRIPTION: Uses the onUserActionRequestedObservable to detect when browser autoplay policies prevent automatic playback, then sets up user interaction to start the video.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/videoTexture.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntexture.onUserActionRequestedObservable.add(() => {\n    scene.onPointerDown = function () {\n        videoTexture.video.play();\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Loading a Particle System from Snippet Server with Promises - Babylon.js JavaScript\nDESCRIPTION: This snippet loads a Babylon.js particle system by snippet ID using a Promise-based approach rather than async/await. It demonstrates how to retrieve a system asynchronously and set its emitter mesh. The scene and emitter (sphere) must already exist. It is ideal for environments where async/await is not available.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/particles_and_nme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ParticleHelper.CreateFromSnippetAsync(\"T54JV7#13\", scene, false).then((system) => {\n  system.emitter = sphere;\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on a Dynamic Texture in Babylon.js\nDESCRIPTION: Uses the drawText method to write text directly onto a dynamic texture. Parameters include text content, position, font, colors, orientation settings, and update flag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyDynamicTexture.drawText(text, x, y, font, color, canvas color, invertY, update);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Glow Layer by Limiting Affected Meshes in Babylon.js\nDESCRIPTION: Reduces draw calls by configuring the glow layer to only include specific meshes (lanterns) rather than affecting all scene objects. This optimization is applied when setting up the glow layer in the game environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis._environment._lanternObjs.forEach((lantern) => {\n    gl.addIncludedOnlyMesh(lantern.mesh);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon with MeshBuilder in Babylon.js\nDESCRIPTION: Creates a polygon mesh using MeshBuilder with configurable options including shape, holes, updatable status, and side orientation. The shape must be defined in the xz plane using Vector3 coordinates in counter-clockwise order.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/polygon.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst polygon = BABYLON.MeshBuilder.CreatePolygon(\"polygon\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Animating Highlight Blur Size\nDESCRIPTION: Demonstrates how to dynamically change the blur size of the highlight effect over time, creating an animated glow effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Add the highlight layer.\nconst hl2 = new BABYLON.HighlightLayer(\"hl2\", scene);\nhl2.addMesh(ground, BABYLON.Color3.Red());\n\nconst alpha = 0;\nscene.registerBeforeRender(() => {\n  alpha += 0.06;\n\n  hl2.blurHorizontalSize = 0.3 + Math.cos(alpha) * 0.6 + 0.6;\n  hl2.blurVerticalSize = 0.3 + Math.sin(alpha / 3) * 0.6 + 0.6;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Layers with Features Manager\nDESCRIPTION: Code snippet demonstrating how to enable WebXR layers using the features manager. This enables the WebXR layers module and creates the initial projection layer automatically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRLayers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst featuresManager = xr.baseExperience.featuresManager; // or any other way to get a features manager\nfeaturesManager.enableFeature(WebXRFeatureName.LAYERS, \"stable\" /* or latest */, {});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Loading Screen in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom loading screen class in TypeScript, implementing the ILoadingScreen interface. It includes a constructor and methods for displaying and hiding the loading UI.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/customLoadingScreen.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomLoadingScreen implements ILoadingScreen {\n  //optional, but needed due to interface definitions\n  public loadingUIBackgroundColor: string\n  constructor(public loadingUIText: string) {}\n  public displayLoadingUI() {\n    alert(this.loadingUIText);\n  }\n\n  public hideLoadingUI() {\n    alert(\"Loaded!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Input Change Events in JavaScript\nDESCRIPTION: Shows how to use an event-based system to handle input changes for keyboards and pointers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/deviceSourceManager.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndeviceSourceManager.getDeviceSource(BABYLON.DeviceType.Keyboard).onInputChangedObservable.add((eventData) => {\n  // eventData will contain the event data that you'd find in something like a PointerEvent or KeyboardEvent\n  // eventData also has an additional value inputIndex\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling All Pointer Events - Babylon.js JavaScript\nDESCRIPTION: Enables full pointer event processing, including events beyond pointer up/down/move, by setting processAllEvents to true. Used for features like mouse wheel handling on the utility layer. Set on the UtilityLayerRenderer instance to broaden interaction capabilities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nutilLayer.processAllEvents = true;\n```\n\n----------------------------------------\n\nTITLE: Applying Transformations to a GreasedLine in JavaScript\nDESCRIPTION: Shows how to apply standard mesh transformations (position, rotation, scaling) to a GreasedLine instance just like any other Babylon.js mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points });\n\nline.position.x = 2;\nline.rotation.z = Math.PI / 2;\nline.scaling = new BABYLON.Vector3(2, 2, 2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Attach and Detach Methods for Custom Keyboard Input (JavaScript)\nDESCRIPTION: Implements attachControl and detachControl on FreeCameraKeyboardRotateInput to handle keyboard event listeners and manage camera rotation via arrow keys. These methods handle DOM event binding/unbinding, update the internal pressed-keys array, and ensure input is only active when needed. They also register/unregister focus-blur handlers using the BABYLON.Tools utility, requiring the camera to be initialized and the relevant DOM/canvas elements present.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nFreeCameraKeyboardRotateInput.prototype.attachControl = function (noPreventDefault) {\n  const _this = this;\n  const engine = this.camera.getEngine();\n  const element = engine.getInputElement();\n  if (!this._onKeyDown) {\n    element.tabIndex = 1;\n    this._onKeyDown = function (evt) {\n      if (_this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1) {\n        const index = _this._keys.indexOf(evt.keyCode);\n        if (index === -1) {\n          _this._keys.push(evt.keyCode);\n        }\n        if (!noPreventDefault) {\n          evt.preventDefault();\n        }\n      }\n    };\n    this._onKeyUp = function (evt) {\n      if (_this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1) {\n        const index = _this._keys.indexOf(evt.keyCode);\n        if (index >= 0) {\n          _this._keys.splice(index, 1);\n        }\n        if (!noPreventDefault) {\n          evt.preventDefault();\n        }\n      }\n    };\n\n    element.addEventListener(\"keydown\", this._onKeyDown, false);\n    element.addEventListener(\"keyup\", this._onKeyUp, false);\n    BABYLON.Tools.RegisterTopRootEvents(canvas, [{ name: \"blur\", handler: this._onLostFocus }]);\n  }\n};\n\nFreeCameraKeyboardRotateInput.prototype.detachControl = function () {\n  const engine = this.camera.getEngine();\n  const element = engine.getInputElement();\n  if (this._onKeyDown) {\n    element.removeEventListener(\"keydown\", this._onKeyDown);\n    element.removeEventListener(\"keyup\", this._onKeyUp);\n    BABYLON.Tools.UnregisterTopRootEvents(canvas, [{ name: \"blur\", handler: this._onLostFocus }]);\n    this._keys = [];\n    this._onKeyDown = null;\n    this._onKeyUp = null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Morph Target Influence in Babylon.js\nDESCRIPTION: This snippet shows how to retrieve a specific morph target object from the `MorphTargetManager` using the `getTarget` method with its index (`key`). Once retrieved, properties of the target, such as its `influence`, can be accessed or modified.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyInfluence = mesh.morphTargetManager.getTarget(key);\n```\n\n----------------------------------------\n\nTITLE: Testing Asset Host Model Loading with 3D Commerce Sandbox - URL Example - text\nDESCRIPTION: This example provides a direct URL for loading a 3D model hosted locally into the Babylon.js 3D Commerce-conformant Sandbox using the assetUrl query parameter. It is used to verify that the asset host is correctly serving the 3D model file (watch_original.glb) before deploying assets for web-wide access. Replace the IP and filename to match your local or testing setup as needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearViewer.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://3dcommerce.babylonjs.com/?assetUrl=http://127.0.0.1:8181/watch_original.glb\n```\n\n----------------------------------------\n\nTITLE: Initializing Particle Properties in Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize custom properties for every particle in a Babylon.js Point Cloud System (PCS) using the initParticles method. It sets the velocity to zero and calculates acceleration based on position for each particle. The pattern requires iterating over the total number of particles (nbParticles) and updating the particles array directly. This initialization should be followed by a call to setParticles() to apply the changes, and relies on the BABYLON.Vector3 class from the Babylon.js API.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npcs.initParticles = function() {\n   for (let p = 0; p < pcs.nbParticles; p++) {\n       pcs.particles[p].velocity = BABYLON.Vector3.Zero();\n       pcs.particles[p].acceleration = pcs.particles[p].position.scale(0.01);\n   }\n}\n\npcs.addSurfacePoints(model, 10000, BABYLON.PointColor.Color);\npcs.buildMeshAsync().then(() => {\n  model.dispose()\n  pcs.initParticles();\n  pcs.setParticles();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Identification Methods to Custom Camera Input (JavaScript)\nDESCRIPTION: Adds getClassName and getSimpleName prototype methods to FreeCameraKeyboardRotateInput. These methods return strings used for serialization and for the input manager to refer to this custom input, as required by Babylon.js input conventions. This enables integration with the engine’s input system and scene serialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nFreeCameraKeyboardRotateInput.prototype.getClassName = function () {\n  return \"FreeCameraKeyboardRotateInput\";\n};\nFreeCameraKeyboardRotateInput.prototype.getSimpleName = function () {\n  return \"keyboardRotate\";\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Recast-Detour NPM Module\nDESCRIPTION: Demonstrates async loading of the Recast-Detour NPM module for versions 1.4.0 and above.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/createNavMesh.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst recast = await Recast();\n```\n\n----------------------------------------\n\nTITLE: Using Particle Group ID for Positioning in Babylon.js\nDESCRIPTION: Shows how to use the `particle.groupId` property within the custom function passed to `addPoints`. This allows differentiating particle properties based on which group (from separate `addPoints` calls) they belong to, here used to displace the second group along the x-axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar myfunc = function (particle, i, s) {\n  particle.position = new BABYLON.Vector3(particle.groupId * 0.5 + 0.25 * Math.random(), i / 5000, 0.25 * Math.random());\n  particle.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), Math.random());\n};\npcs.addPoints(10000, myfunc);\npcs.addPoints(10000, myfunc);\n```\n\n----------------------------------------\n\nTITLE: Setting Parent-Child Relationship in Babylon.js (JavaScript)\nDESCRIPTION: Establishes a parent-child relationship between two scene objects (`contents` and `carriage`). Transformations applied to the parent (`carriage`) will also affect the child (`contents`). This is used here to link the contents of a carriage to the carriage itself.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncontents.parent = carriage;\n```\n\n----------------------------------------\n\nTITLE: Implementing a SprayParticleEmitter Custom Emitter Class in Babylon.js (JavaScript)\nDESCRIPTION: Implements a custom SprayParticleEmitter class, defining both the start direction and start position logic for complex emission patterns. Designed for use as a particleEmitterType, it handles directional randomization inside a cylindrical volume, using Babylon.js math utilities and Vector3 transformation helpers. Input parameters include emission geometry (radius, height, randomization factor); outputs are world-space direction and position for each particle initiated by the emitter. Can be extended for advanced use cases by modifying its methods.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar SprayParticleEmitter = (function () {\n  function SprayParticleEmitter(radius, height, directionRandomizer) {\n    if (radius === void 0) {\n      radius = 0.5;\n    }\n    if (height === void 0) {\n      height = 1;\n    }\n    if (directionRandomizer === void 0) {\n      directionRandomizer = 0;\n    }\n    this.height = height;\n    this.directionRandomizer = directionRandomizer;\n    this.radius = radius;\n  }\n\n  SprayParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle) {\n    var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\n    var randX = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\n    var randY = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\n    var randZ = BABYLON.Scalar.RandomRange(0, this.directionRandomizer);\n    if (direction.x * direction.x + direction.z * direction.z > 0.1 * this.radius && Math.abs(direction.y) > (0.1 * this.height) / 2) {\n      direction.x += randX;\n      direction.y = randY;\n      direction.z += randZ;\n    } else {\n      direction.x += randX;\n      direction.y += randY;\n      direction.z += randZ;\n    }\n    direction.normalize();\n    BABYLON.Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\n  };\n\n  SprayParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle) {\n    var s = BABYLON.Scalar.RandomRange(0, Math.PI * 2);\n    var h = BABYLON.Scalar.RandomRange(-0.5, 0.5);\n    var radius = BABYLON.Scalar.RandomRange(0, this.radius);\n    var randX = radius * Math.sin(s);\n    var randZ = radius * Math.cos(s);\n    var randY = h * this.height;\n    BABYLON.Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\n  };\n  return SprayParticleEmitter;\n})();\nBABYLON.SprayParticleEmitter = SprayParticleEmitter;\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshDebugPluginMaterial for UV0 Mode in JavaScript\nDESCRIPTION: This snippet shows how to use the MeshDebugPluginMaterial to visualize the first UV set (UV0) of a mesh using a checkerboard pattern. It instantiates the plugin, setting the `mode` to `UV0`. It also configures the appearance of the checkerboard grid using `uvPrimaryColor`, `uvSecondaryColor`, and `uvScale` options. This mode does not require calling `PrepareMeshForTrianglesAndVerticesMode`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/visualizeMeshData.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nnew BABYLON.MeshDebugPluginMaterial(mesh.material, {\n    mode: BABYLON.MeshDebugMode.UV0,\n    uvPrimaryColor: new BABYLON.Color3(1, 1, 1),\n    uvSecondaryColor: new BABYLON.Color3(0.5, 0.5, 0.5),\n    uvScale: 20\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Thin Instances in JavaScript\nDESCRIPTION: Basic example showing how to create a thin instance by adding a translation matrix to a sphere. The first snippet creates a thin instance at the specified position, while the second shows how to include the original mesh in the rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar matrix = BABYLON.Matrix.Translation(-2, 2, 0);\nvar idx = sphere.thinInstanceAdd(matrix);\n```\n\n----------------------------------------\n\nTITLE: Clearing and Removing Camera Inputs in Babylon.js\nDESCRIPTION: Shows how to clear all inputs and selectively remove specific inputs by instance or type.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FreeCamera(\"sceneCamera\", new BABYLON.Vector3(0, 1, -15), scene);\ncamera.inputs.clear();\ncamera.inputs.addMouse();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FreeCamera(\"sceneCamera\", new BABYLON.Vector3(0, 1, -15), scene);\n// remove by instance\ncamera.inputs.remove(camera.inputs.attached.mouse);\n// remove by type\ncamera.inputs.removeByType(\"FreeCameraKeyboardMoveInput\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Camera Input Manager in Babylon.js\nDESCRIPTION: Shows how to access the input manager through the camera's inputs property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FreeCamera(\"sceneCamera\", new BABYLON.Vector3(0, 1, -15), scene);\nconst inputManager = camera.inputs;\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty TexturePacker for Loading in Babylon.js\nDESCRIPTION: Instantiates an empty BABYLON.TexturePacker object. This is typically done as the first step when preparing to load texture package data from a previously saved JSON file. It requires the scene context.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/texturePackage.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet pack = new BABYLON.TexturePacker(\"\", [], {}, scene);\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Position with Reference in Babylon.js\nDESCRIPTION: Shows how to get the position of a bone using the getPositionToRef method. It takes space (world or local), mesh, and a reference Vector3 as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst pos = BABYLON.Vector3.Zero();\n\nbone.getPositionToRef(BABYLON.Space.WORLD, mesh, pos);\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Lightmap Texture in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a lightmap texture and apply it to a material in Babylon.js. The lightmap stores precalculated lighting information to improve performance by reducing runtime lighting calculations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightmap = new BABYLON.Texture(\"lightmap.png\", scene);\nconst material = new BABYLON.StandardMaterial(\"material\", scene);\nmaterial.lightmapTexture = lightmap;\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js WebXR Modules with ES6\nDESCRIPTION: Demonstrates the necessary ES6 import statements for utilizing the `WebXRDefaultExperience` and enabling the GLTF/GLB loader required for controller models fetched from the WebXR Input registry. It also includes an import for NodeMaterial Blocks to prevent potential build errors when loading these models.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebXRDefaultExperience } from '@babylonjs/core/XR/webXRDefaultExperience.js'\n\n// Enable GLTF/GLB loader for loading controller models from WebXR Input registry\nimport '@babylonjs/loaders/glTF'\n\n// Without this next import, an error message like this occurs loading controller models:\n//  Build of NodeMaterial failed\" error when loading controller model\n//  Uncaught (in promise) Build of NodeMaterial failed: input rgba from block\n//  FragmentOutput[FragmentOutputBlock] is not connected and is not optional.\nimport '@babylonjs/core/Materials/Node/Blocks'\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Texture Buffers in Babylon.js\nDESCRIPTION: Removes internal texture buffer cache used for serialization and rebuilding, freeing up memory when these features aren't required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/reducingMemoryUsage.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.cleanCachedTextureBuffer();\n```\n\n----------------------------------------\n\nTITLE: Simple GreasedLine Creation\nDESCRIPTION: Basic example of creating a GreasedLine with minimal configuration using points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = BABYLON.CreateGreasedLine(\"name\", { points });\n```\n\n----------------------------------------\n\nTITLE: Configuring Bloom in Babylon.js Pipeline\nDESCRIPTION: Enables and configures bloom effect parameters including threshold, weight, kernel size, and scale.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.bloomEnabled = true;\npipeline.bloomThreshold = 0.8;\npipeline.bloomWeight = 0.3;\npipeline.bloomKernel = 64;\npipeline.bloomScale = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Setting UV Coordinates for Texture Atlas Mapping\nDESCRIPTION: Demonstrates how to map specific regions of a texture atlas to a particle by setting its uvs property. The coordinates represent the lower left and upper right corners of the region as fractions of the texture dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparticle.uvs.x = 0.2; //the coordinate of lower left corner given by 20% of image width\nparticle.uvs.y = 0.1; //the coordinate of lower left corner given by 10% of image height\nparticle.uvs.z = 0.6; //the coordinate of upper right corner given by 60% of image width\nparticle.uvs.w = 0.3; //the coordinate of upper right corner given by 30% of image height\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing a TouchHolographicButton in Babylon.js (JavaScript)\nDESCRIPTION: Explains how to create a TouchHolographicButton, add it to a panel, and override its content with a TextBlock after adding. This control enables near interactions (e.g., Hololens hand tracking). Dependencies include Babylon.js GUI, appropriate panel/container, and any required assets. Input: configuration for button and text content; output: panel with advanced-interaction TouchHolographicButton.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = new BABYLON.GUI.TouchHolographicButton(\"reset\");\npanel.addControl(button);\n\n// Must be done AFTER addControl in order to overwrite the default content\nconst text1 = new BABYLON.GUI.TextBlock();\ntext1.text = \"Reset\";\ntext1.color = \"Red\";\ntext1.fontSize = 48;\nbutton.content = text1;\n```\n\n----------------------------------------\n\nTITLE: Configuring PBR Material with Reflection Probe in Babylon.js\nDESCRIPTION: Shows how to set up real-time filtering for PBR materials using reflection probes and adjust the filtering quality for optimal performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/reflectionProbes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmainMaterial.reflectionTexture = probe.cubeTexture;\nmainMaterial.realTimeFiltering = true;\n\nmainMaterial.realTimeFilteringQuality = BABYLON.Constants.TEXTURE_FILTERING_QUALITY_MEDIUM;\n```\n\n----------------------------------------\n\nTITLE: Resetting Gravity and Updating State When Grounded in Babylon.js (JavaScript)\nDESCRIPTION: This code executes when the character is determined to be grounded (`_isGrounded()` is true). It resets the vertical component of gravity (`this._gravity.y`) to zero, sets the `_grounded` flag to true, and records the current position (`this.mesh.position`) as the last known safe grounded position (`_lastGroundPos`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nif (this._isGrounded()) {\n    this._gravity.y = 0;\n    this._grounded = true;\n    this._lastGroundPos.copyFrom(this.mesh.position);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Lines and DashedLines Meshes in Babylon.js\nDESCRIPTION: This snippet illustrates how to create and update Lines and DashedLines meshes in Babylon.js. Both are initially created with `updatable: true`. To update their shape, new point data (`points2`) is provided, and the respective `MeshBuilder.CreateLines` or `MeshBuilder.CreateDashedLines` function is called with `null` for the name and an options object containing the new `points` array and the existing mesh passed via the `instance` property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst points1 = [v1, v2, ..., vN]; // vector3 array\nlet lines = BABYLON.MeshBuilder.CreateLines(\"lines\", {points: points1, updatable: true}, scene, true);\nlet dashedLines = BABYLON.Mesh.CreateDashedLines(\"lines\", points1, dashSize, gapSize, nb, scene, true);\n\nlines = BABYLON.MeshBuilder.CreateLines(null, {points: points2, instance: lines});\ndashedLines = BABYLON.MeshBuilder.CreateDashedLines(null, {points: points2, instance: dashedLines});\n```\n\n----------------------------------------\n\nTITLE: Creating an ImageButton in Babylon.js GUI\nDESCRIPTION: This snippet demonstrates how to create an ImageButton, which is a button made with an image and text. It uses the BABYLON.GUI.Button.CreateImageButton method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = BABYLON.GUI.Button.CreateImageButton(\"but\", \"Click Me\", \"textures/grass.png\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Scenes in a Custom Babylon.js Project\nDESCRIPTION: This snippet shows how to implement multiple scenes in a custom Babylon.js project. It defines separate creation functions for each scene and renders them in the engine's runRenderLoop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiScenes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene0 = function () {\n  var scene0 = new BABYLON.Scene(engine);\n\n  //Add camera, light and meshes for scene0\n\n  return scene0;\n};\n\nvar createScene1 = function () {\n  var scene1 = new BABYLON.Scene(engine);\n\n  //Add camera, light and meshes for scene1\n\n  return scene1;\n};\n\n//Any other code\nvar scene0 = createScene0();\nvar scene1 = createScene1();\n\nengine.runRenderLoop(function () {\n  scene0.render();\n  scene1.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio Engine in Babylon.js\nDESCRIPTION: Creates and unlocks the Babylon.js audio engine within an async function. The audio engine must be created and unlocked before any sounds can be played in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/sound.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function initAudio() {\n  const audioEngine = await BABYLON.CreateAudioEngineAsync();\n  await audioEngine.unlockAsync();\n\n  // Audio engine is ready to play sounds ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Right-Handed Coordinate System in JavaScript\nDESCRIPTION: JavaScript code to enable the right-handed coordinate system in a Babylon.js scene. This is important for correctly loading glTF models that use a right-handed system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.useRightHandedSystem = true;\n```\n\n----------------------------------------\n\nTITLE: Customizing Glow Color per Mesh in Babylon.js\nDESCRIPTION: Demonstrates how to override the default glow color selection on a per-mesh basis using a custom callback function. This allows for unique glow colors for specific meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/glowLayer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new BABYLON.GlowLayer(\"glow\", scene);\ngl.customEmissiveColorSelector = function(mesh, subMesh, material, result) {\n  if (mesh.name === \"lightsaber\") {\n    result.set(1, 0, 1, 1);\n  } else {\n    result.set(0, 0, 0, 0);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Intersection Trigger Action with Precise Check in Babylon.js\nDESCRIPTION: Shows how to register an action triggered by mesh intersection using `BABYLON.ActionManager.OnIntersectionEnterTrigger`. It uses a parameter object to specify the `otherMesh` to check against and explicitly enables precise intersection detection with `usePreciseIntersection: true`. When the intersection occurs, a `SetValueAction` scales the target `mesh`. Requires `actionManager`, `mesh`, `otherMesh`, and `BABYLON.Vector3`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager.registerAction(\n  new BABYLON.SetValueAction(\n    {\n      trigger: BABYLON.ActionManager.OnIntersectionEnterTrigger,\n      parameter: {\n        mesh: otherMesh,\n        usePreciseIntersection: true,\n      },\n    },\n    mesh,\n    \"scaling\",\n    new BABYLON.Vector3(1.2, 1.2, 1.2),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Manual Rendering Control - Babylon.js JavaScript\nDESCRIPTION: Disables automatic rendering of the utility layer after the main scene, and manually triggers its rendering. By setting shouldRender to false, developers can synchronize the overlay's rendering with custom logic or events. Calls to render() must be made manually; assumes utility layer has been set up.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nutilLayer.shouldRender = false;\nutilLayer.render();\n```\n\n----------------------------------------\n\nTITLE: Basic Mesh Combination in Babylon.js\nDESCRIPTION: Simple example of combining meshes using the MergeMeshes method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/combine.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combined = BABYLON.Mesh.MergeMeshes(Array_of_Meshes_to_Combine)\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization of Ascii Art Post-Process\nDESCRIPTION: This snippet demonstrates advanced customization of the Ascii Art Post-Process, including font, character set, and mixing options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/asciiArtPP.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Creates the post process\nvar postProcess = new BABYLON.AsciiArtPostProcess(\"AsciiArt\", camera, \n    {\n        font: \"20px Monospace\",\n        characterSet: \" -+@\",\n        mixToNormal: 0.5,\n        mixToTile: 0.5        \n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Snap Points After WebXR Teleportation Feature Initialization\nDESCRIPTION: Adds additional snap-to points to the teleportation feature after it has been initialized, providing flexibility to dynamically update teleportation hotspots.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nteleportation.addSnapPoint(new BABYLON.Vector3(0, 0, 6));\n```\n\n----------------------------------------\n\nTITLE: Defining Roof Plane Structures in JavaScript\nDESCRIPTION: This snippet defines the structure of the roof by creating an array `planes`. Each element in `planes` is an array representing a single roof plane, specified by the labels of its vertices (corners 'C#' and apexes 'A#') in counter-clockwise order. This structure dictates how the roof mesh will be constructed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar planes = [\n\t[\"C0\", \"C1\", \"A0\"],\n\t[\"C1\", \"C2\", \"A0\"],\n\t[\"C2\", \"C3\", \"A0\"],\n\t[\"C3\", \"A1\", \"A0\"],\n\t[\"C3\", \"C4\", \"A3\", \"A1\"],\n\t[\"C4\", \"C5\", \"A3\"],\n\t[\"C5\", \"C6\", \"A1\", \"A3\"],\n\t[\"C6\", \"C7\", \"A2\", \"A1\"],\n\t[\"C7\", \"C8\", \"A2\"],\n\t[\"C8\", \"C0\", \"A0\", \"A2\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Processing TexturePacker in Babylon.js\nDESCRIPTION: Creates a new TexturePacker instance and immediately initiates the asynchronous texture packing process. The constructor takes the package name (string), an array of source meshes (`targetMeshes`), configuration `options` (object), and the Babylon.js `scene`. The `processAsync` method returns a Promise that resolves upon successful completion or rejects on error.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/texturePackage.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet pack = new BABYLON.TexturePacker(name, targetMeshes, options, scene);\npack.processAsync().then(success).catch(error);\n```\n\n----------------------------------------\n\nTITLE: Creating root node for BabylonJS objects in CesiumJS integration\nDESCRIPTION: Sets up a root node in BabylonJS to simplify object positioning relative to CesiumJS coordinates. Demonstrates adding meshes to the root node.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_CesiumJS.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst root_node = new BABYLON.TransformNode(\"BaseNode\", scene);\nroot_node.lookAt(base_point_up.subtract(base_point));\nroot_node.addRotation(Math.PI / 2, 0, 0);\n\n// Then you can add your meshes to root_node.\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", {size: 10}, scene);\nconst material = new BABYLON.StandardMaterial(\"Material\", scene);\nmaterial.emissiveColor = new BABYLON.Color3(1, 0, 0);\nmaterial.alpha = 0.5;\nbox.material = material;\nbox.parent = root_node;\n\nconst ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {\n    width: 100,\n    height: 100\n}, scene);\nground.material = material;\nground.parent = root_node;\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties Using FlowGraphGetPropertyBlock - JavaScript\nDESCRIPTION: This example demonstrates how to use FlowGraphGetPropertyBlock to retrieve a nested property (e.g., position.x) from a mesh or object in Babylon.js. Inputs propertyName and object are set via setValue with the relevant context, after which the .value output can be wired to subsequent blocks. Users must ensure mesh and ctx are correctly initialized. The block is particularly useful for modular access to properties in node-based or visual graph logic.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst getProperty = new FlowGraphGetPropertyBlock();\ngetProperty.object.setValue(mesh, ctx);\ngetProperty.propertyName.setValue(\"position.x\", ctx);\n// now connect .value with any input somewhere else\n```\n\n----------------------------------------\n\nTITLE: Vertex Shader with Bone and Instance Support in Babylon.js\nDESCRIPTION: This GLSL vertex shader includes support for bone animations and instances, demonstrating how to handle these effects when replacing materials with custom shaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/renderTargetTextureMultiPass.md#2025-04-23_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\nprecision highp float;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 view;\nuniform mat4 projection;\nuniform mat4 worldViewProjection;\n\nvarying vec2 vUV;\n\n#include<bonesDeclaration>\n#include<instancesDeclaration>\n\nvoid main() {\n    vec3 positionUpdated = position;\n\n    #include<instancesVertex>\n    #include<bonesVertex>\n\n    vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);\n\n    vUV = uv;\n\n    gl_Position = projection * view * worldPos;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Target\nDESCRIPTION: Assigns the mesh that the camera will follow.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.lockedTarget = targetMesh;\n```\n\n----------------------------------------\n\nTITLE: Camera Control Interaction Table in Markdown\nDESCRIPTION: Markdown table documenting the various input methods (mouse, touch, keyboard) and their corresponding camera control behaviors in the Babylon.js Viewer. Includes interactions for rotation, panning, zooming, target setting, and camera reset.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/cameraControls.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Mouse                      | Touch                    | Keyboard                        | Behavior                                                                                 |\n| -------------------------- | ------------------------ | ------------------------------- | ---------------------------------------------------------------------------------------- |\n| Left click + drag          | One finger + drag        | Arrow keys                      | Rotate the camera around the target                                                      |\n| Right click + drag         | Two fingers + drag       | Ctrl + Shift + arrow keys       | Pan the camera (move the target)                                                         |\n| Wheel                      | Pinch                    | Alt/Option + up/down arrow keys | Zoom the camera                                                                          |\n| Double click on model      | Double tap on model      | N/A                             | Raycast to set a new target (e.g. the camera will rotate around this point on the model) |\n| Double click off the model | Double tap off the model | N/A                             | Reset the camera to its original pose                                                    |\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Utility Layers - Babylon.js JavaScript\nDESCRIPTION: Demonstrates how to access the default utility layers in Babylon.js for overlays, such as gizmos or occluded bounding boxes. These default layers are exposed as static properties and typically used for object manipulation tools. No dependencies are required beyond Babylon.js itself. Outputs the default utility layer instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUtilityLayerRenderer.DefaultUtilityLayer; // for overlays like position/scale gizmos\nUtilityLayerRenderer.DefaultKeepDepthUtilityLayer; // for occluded gizmos like bounding box)\n```\n\n----------------------------------------\n\nTITLE: Implementing Refraction Post-Process in BabylonJS\nDESCRIPTION: Creates a refraction post-process effect with customizable texture, color, and depth settings. The refraction map's luminance determines refraction levels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.RefractionPostProcess(\"Refraction\", \"refMap.jpg\", new BABYLON.Color3(1.0, 1.0, 1.0), 0.5, 0.5, 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Disabling IndexedDB Asset Caching in Babylon.js\nDESCRIPTION: Turns off the default behavior of saving assets in IndexedDB, which reduces memory usage but may increase network calls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/reducingMemoryUsage.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nengine.enableOfflineSupport = false;\n```\n\n----------------------------------------\n\nTITLE: Playing MMD Animations in Babylon.js\nDESCRIPTION: TypeScript code for playing MMD animations using the MmdRuntime class. This registers the runtime with the scene, creates a model, adds animation data, and sets the active animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/mmdLoader.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst mmdRuntime = new MmdRuntime();\nmmdRuntime.register(scene);\nconst mmdModel = mmdRuntime.createMmdModel(mmdMesh);\nmmdModel.addAnimation(modelMotion);\nmmdModel.setAnimation(\"model_motion_1\");\n```\n\n----------------------------------------\n\nTITLE: Setting a World Offset for Particle System in Babylon.js\nDESCRIPTION: Applies a global position offset to the entire particle system using the `worldOffset` property. This shifts the rendering position of all particles by the specified `BABYLON.Vector3` value. It's often used in large worlds to maintain precision by keeping the camera near the origin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.worldOffset = new BABYLON.Vector3(100, 20, -453);\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh as Updatable in Babylon.js\nDESCRIPTION: When creating a custom mesh, this code shows how to make it updatable by passing true as the second parameter to applyToMesh. This allows the mesh to be modified after creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/updatingVertices.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvertexData.applyToMesh(customMesh, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Rotation Using YXZ Euler Angles in JavaScript\nDESCRIPTION: Assigns a new rotation to a mesh using a `BABYLON.Vector3`. The components (x, y, z) correspond to pitch, yaw, and roll respectively, following the YXZ local space Euler angle convention used by Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotation = new BABYLON.Vector3(pitch, yaw, roll);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle System Size Properties for Growth Animation in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to initialize particle system size parameters to zero and introduce a custom property 'finalSize', preparing particles to grow from invisible to a set size. This block is typically placed in the main setup code and requires modification of the Babylon.js particle system object. Inputs are user-defined; outputs are property changes affecting subsequent particle instantiation and rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.minSize = 0;\nparticleSystem.maxSize = 0;\n\nparticleSystem.finalSize = 1;\n```\n\n----------------------------------------\n\nTITLE: Applying MeshExploder to Imported Meshes with AssetsManager - Babylon.js JavaScript\nDESCRIPTION: This example illustrates usage of MeshExploder with meshes dynamically loaded via Babylon.js's AssetsManager. After asynchronously loading a .gltf model, it constructs a MeshExploder instance with the loaded meshes and explodes them on scene readiness. Prerequisites include a valid scene, BABYLON.AssetsManager, and appropriate assets. The code assumes loadedMeshes is available when calling MeshExploder.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/meshExploder.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetsManager = new BABYLON.AssetsManager(scene);\nconst meshTask = assetsManager.addMeshTask(\"model\", \"\", \"./\", \"model.gltf\");\n\nlet meshes;\n\nmeshTask.onSuccess = function(task) {\n    meshes = task.loadedMeshes;\n}\nassetsManager.load();\nconst newExplosion;\nscene.executeWhenReady(function() {\n    newExplosion = new BABYLON.MeshExploder(meshes);\n    newExplosion.explode(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function Implementation in Babylon.js\nDESCRIPTION: Creates a custom easing function by extending the base EasingFunction class with custom easing logic.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst FunnyEase = (function (_super) {\n  __extends(FunnyEase, _super);\n  function FunnyEase() {\n    _super.apply(this, arguments);\n  }\n  FunnyEase.prototype.easeInCore = function (gradient) {\n    // Here is the core method you should change to make your own Easing Function\n    // Gradient is the percent of value change\n    return Math.pow(Math.pow(gradient, 4), gradient);\n  };\n  return FunnyEase;\n})(BABYLON.EasingFunction);\n```\n\n----------------------------------------\n\nTITLE: Creating a Torus Knot with Specific Parameters in Babylon.js\nDESCRIPTION: This snippet shows how to create a torus knot mesh with explicitly defined parameters using the MeshBuilder.CreateTorusKnot method in Babylon.js. It demonstrates setting custom values for radius, tube, radialSegments, tubularSegments, p, and q.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/torus_knot.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst knot = BABYLON.MeshBuilder.CreateTorusKnot(\"knot\", {radius, tube, radialSegments, tubularSegments, p, q}, scene);\n```\n\n----------------------------------------\n\nTITLE: Optimizing SSR Performance Settings\nDESCRIPTION: Recommended settings for optimizing SSR performance including step size, max steps, max distance, and downsampling parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Optimal SSR settings\nstep: <larger value>\nmaxSteps: <smaller value>\nmaxDistance: <smaller value>\nenableSmoothReflections: false\nenableAutomaticThicknessComputation: false\nblurDownsample: <larger value>\nssrDownsample: <larger value>\n```\n\n----------------------------------------\n\nTITLE: Disabling Texture Storage for Bone Matrices in Babylon.js\nDESCRIPTION: By default, Babylon.js stores bone matrices in a texture for performance. This snippet shows how to force the use of shader uniforms instead of texture storage for bone matrices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nskeleton.useTextureToStoreBoneMatrices = false;\n```\n\n----------------------------------------\n\nTITLE: Creating a GUIProgress Component in Babylon.js\nDESCRIPTION: Constructor for creating a new GUIProgress element with specified parameters. Requires an ID, options object, and a GUIManager instance. Optional parameters include a callback function and an append flag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiProgress.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUIProgress(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Initializing WebXR Features Manager\nDESCRIPTION: Creates a new Features Manager instance by providing an XR session manager object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fm = new FeaturesManager(xrSessionManager);\n```\n\n----------------------------------------\n\nTITLE: Cloning Skeleton in Babylon.js\nDESCRIPTION: Demonstrates how to clone a skeleton for a mesh clone when independent skeleton control is needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/clones.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclone.skeleton = mesh.skeleton.clone();\n```\n\n----------------------------------------\n\nTITLE: Enabling Near Interactions for WebXR Hand Tracking\nDESCRIPTION: Shows how to enable near-field interactions for meshes or GUI elements in WebXR hand tracking. This allows for direct interaction with objects close to the hands.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.isNearPickable = true;\n```\n\n----------------------------------------\n\nTITLE: Creating a New FlowGraph in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates creating a new FlowGraph instance using the coordinator's 'createGraph' method. Each graph is stateless and can execute blocks in response to events. Requires an instantiated FlowGraphCoordinator stored in 'coordinator'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst graph = coordinator.createGraph();\n```\n\n----------------------------------------\n\nTITLE: Registering Intersection Trigger Action (Simplified Parameter) in Babylon.js\nDESCRIPTION: Demonstrates an alternative, simpler way to register an intersection trigger (`OnIntersectionEnterTrigger`) by passing the target mesh (`otherMesh`) directly as the value of the `parameter` property. This implies non-precise intersection checking (using bounding boxes). When the `mesh` intersects with `otherMesh`, its scaling is set using `SetValueAction`. Requires `actionManager`, `mesh`, `otherMesh`, and `BABYLON.Vector3`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager.registerAction(\n  new BABYLON.SetValueAction(\n    {\n      trigger: BABYLON.ActionManager.OnIntersectionEnterTrigger,\n      parameter: otherMesh,\n    },\n    mesh,\n    \"scaling\",\n    new BABYLON.Vector3(1.2, 1.2, 1.2),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Lightmap Mode in Babylon.js\nDESCRIPTION: This code sets a light's lightmap mode to LIGHTMAP_DEFAULT, which causes the lightmap texture to be blended after the lighting from this light is applied.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlight.lightmapMode = BABYLON.Light.LIGHTMAP_DEFAULT;\n```\n\n----------------------------------------\n\nTITLE: Creating Cylinder with MeshBuilder in Babylon.js\nDESCRIPTION: Creates a cylinder mesh using MeshBuilder with configurable options. The scene parameter is optional and defaults to the current scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/cylinder.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cone = BABYLON.MeshBuilder.CreateCylinder(\"cone\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring Joint Mesh Visibility in WebXR Hand Tracking\nDESCRIPTION: Shows how to configure visibility options for joint meshes in WebXR hand tracking, including keeping the original mesh visible and making instanced meshes invisible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  jointMeshes: {\n    disableDefaultHandMesh: true,\n    invisible: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Hit Testing in Babylon.js WebXR\nDESCRIPTION: This code snippet demonstrates how to enable hit testing feature in Babylon.js WebXR. It shows both JavaScript and TypeScript versions of enabling the feature.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// featuresManager from the base webxr experience helper\nconst hitTest = featuresManager.enableFeature(BABYLON.WebXRHitTest, \"latest\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// featuresManager from the base webxr experience helper\nconst hitTest = featuresManager.enableFeature(BABYLON.WebXRHitTest, \"latest\") as BABYLON.WebXRHitTest;\n```\n\n----------------------------------------\n\nTITLE: Loading and Using a Node Render Graph from Snippet ID\nDESCRIPTION: Demonstrates loading a Node Render Graph (NRG) configuration asynchronously from a snippet ID using `NodeRenderGraph.ParseFromSnippetAsync`. After parsing, it builds the graph, waits for it to be ready, and then assigns the NRG's underlying `frameGraph` to the scene's `frameGraph` property to activate it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst nrg = await BABYLON.NodeRenderGraph.ParseFromSnippetAsync(\"#CCDXLX\", scene);\n\nnrg.build();\n\nawait nrg.whenReadyAsync();\n\nscene.frameGraph = nrg.frameGraph;\n```\n\n----------------------------------------\n\nTITLE: Activating Multiple Cameras in Babylon.js\nDESCRIPTION: Demonstrates how to add multiple cameras to the scene's active cameras array to enable multi-view rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/multiViewsPart2.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.activeCameras.push(camera);\nscene.activeCameras.push(camera2);\n```\n\n----------------------------------------\n\nTITLE: Initializing Volumetric Light Scattering Post Process in Babylon.js - JavaScript\nDESCRIPTION: Initializes a new VolumetricLightScatteringPostProcess instance, attaching it to a specified camera and light source mesh. Requires Babylon.js engine, target camera, light source mesh, number of samples for quality, and sampling mode. Inputs include the effect name, rendering ratio, camera, lightSourceMesh, optional sample count, sampling mode, engine, and a boolean for reusability. Outputs a new post-process instance ready for configuration and use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vls = new BABYLON.VolumetricLightScatteringPostProcess(\"vls\", 1.0, camera, lightSourceMesh, samplesNum, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, false);\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated TrailMesh Example in Babylon.js (JavaScript)\nDESCRIPTION: Provides a complete example demonstrating the creation and animation of a TrailMesh. It initializes a cube mesh as the generator, configures the TrailMesh with specific options (diameter, length, etc.), applies a material to the trail, and uses the scene's render loop (`onBeforeRenderObservable`) to continuously update the generator's position and rotation, causing the TrailMesh to follow its path. This showcases a practical application of TrailMesh in a dynamic scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/trailMesh.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet alpha = Math.PI;\n// Create a mesh for the trail to follow.\nconst cube = BABYLON.MeshBuilder.CreateBox(\"cube\", {}, scene);\ncube.scaling.y = 2;\ncube.bakeCurrentTransformIntoVertices();\ncube.position.x = Math.sin(alpha) * 10;\ncube.position.z = Math.cos(alpha) * 10;\ncube.computeWorldMatrix(true);\n\n// Trail options\nlet options = {\n    diameter: 1.5,\n    length: 100,\n    segments: 10,\n    sections: 4,\n    doNotTaper: false,\n    autoStart: true\n};\nconst trail = new BABYLON.TrailMesh(\"new\", cube, scene, options);\n\nconst sourceMat = new BABYLON.StandardMaterial(\"sourceMat\", scene);\nsourceMat.emissiveColor = sourceMat.diffuseColor = new BABYLON.Color3.Red();\nsourceMat.specularColor = new BABYLON.Color3.Black();\n\ntrail.material = sourceMat;\n\nconst observer = scene.onBeforeRenderObservable.add(animate);\nfunction animate() {\n  alpha += Math.PI / 120;\n  cube.position.x = Math.sin(alpha) * 10;\n  cube.position.z = Math.cos(alpha) * 10;\n  cube.rotation.x = (Math.PI * alpha) / 2;\n  cube.rotation.y = alpha;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Mesh to the Shadow Render List in Babylon.js JavaScript\nDESCRIPTION: This snippet adds a mesh (e.g., 'torus') to the render list of a CascadedShadowGenerator instance, making it a shadow caster. This step is required so the mesh contributes to shadow map generation. The renderList is an array of meshes whose shadows will be computed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.getShadowMap().renderList.push(torus);\n```\n\n----------------------------------------\n\nTITLE: Adding a ScrollViewer to the AdvancedDynamicTexture in JavaScript\nDESCRIPTION: Shows how to add a previously created `ScrollViewer` instance to a `BABYLON.GUI.AdvancedDynamicTexture`. This makes the scroll viewer part of the visible user interface. Requires an existing `AdvancedDynamicTexture` (e.g., `myAdvancedTexture`) and a `ScrollViewer` instance (e.g., `myScrollViewer`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/scrollViewer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAdvancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\nmyAdvancedTexture.addControl(myScrollViewer);\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning a ShadowDepthWrapper for Per-Material Shadow Mapping in Babylon.js (JavaScript)\nDESCRIPTION: This snippet illustrates the creation of a ShadowDepthWrapper for a given material to enable custom shadow rendering for that material in Babylon.js. Assigning the wrapper to material.shadowDepthWrapper activates the customized behavior for shadow depth calculation, useful when materials use custom vertex/fragment transformations. This requires Babylon.js v4.2 or higher. The material can be a CustomMaterial, PBRCustomMaterial, ShaderMaterial, or NodeMaterial.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst shadowDepthWrapper = new BABYLON.ShadowDepthWrapper(material, scene);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmaterial.shadowDepthWrapper = shadowDepthWrapper;\n```\n\n----------------------------------------\n\nTITLE: Modifying and Downloading Gaussian Splatting Data in Babylon.js\nDESCRIPTION: Illustrates how to access, modify, and download Gaussian Splatting data. This function translates the first 30,000 splats, updates the mesh, and allows downloading the modified data as a .splat file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gaussianSplatting.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction modifyMesh(gs) {\n    // Get GS data\n    const arrayBuffer = gs.splatsData;\n    // Make a float32 access. A splat is 32bytes (8floats)\n    var positions = new Float32Array(arrayBuffer);\n    // Do a change to the first 30000 splats\n    for (let i = 0; i < 30000; i++) {\n        // Translate splats a little. GS shown here is upside down\n        positions[i * 8 + 1] -= 2.0;\n    }\n    // Make that change visible\n    gs.updateData(arrayBuffer);\n    // Create a blob with array buffer and download it. It can be used directly with the sandbox\n    const blob = new Blob([arrayBuffer], { type: 'application/octet-stream' });\n    BABYLON.Tools.DownloadBlob(blob, \"newGSplat.splat\");\n}\n```\n\n----------------------------------------\n\nTITLE: Loading an XML Layout File without Attaching to Texture (JavaScript)\nDESCRIPTION: This snippet shows how to load an XML layout without immediately attaching it to an AdvancedDynamicTexture, by passing null as the second parameter. Useful when GUI elements should be configured or manipulated before adding to a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nxmlLoader.loadLayout(\"layouts/testgui.xml\", null);\n```\n\n----------------------------------------\n\nTITLE: Calculating Normalized Depth Metric in Shadow Map Shader (GLSL/WGSL)\nDESCRIPTION: This shader code calculates a normalized depth metric (`vDepthMetricSM`) ranging from 0 to 1, used when not directly relying on depth textures (e.g., non-PCF/PCSS modes or historical reasons like WebGL1 support). It transforms `gl_Position.z` using uniform values `depthValuesSM.x` (offset) and `depthValuesSM.y` (range scale) and applies a bias (`biasAndScaleSM.x`). The calculation negates `gl_Position.z` if the reverse depth buffer (`SM_USE_REVERSE_DEPTHBUFFER`) is enabled before applying the offset and scaling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#if SM_USE_REVERSE_DEPTHBUFFER == 1\n    vDepthMetricSM = (-gl_Position.z + depthValuesSM.x) / depthValuesSM.y + biasAndScaleSM.x;\n#else\n    vDepthMetricSM = (gl_Position.z + depthValuesSM.x) / depthValuesSM.y + biasAndScaleSM.x;\n#endif\n```\n\n----------------------------------------\n\nTITLE: Implementing render loop for CesiumJS and BabylonJS integration\nDESCRIPTION: Defines the render loop that updates CesiumJS, synchronizes BabylonJS camera, and renders BabylonJS scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_CesiumJS.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nengine.runRenderLoop(() => {\n    viewer.render();\n    moveBabylonCamera();\n    scene.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Random Sprite Start Cell for Particles - Babylon.js JavaScript\nDESCRIPTION: Illustrates enabling randomized starting sprite cells for particles by setting spriteRandomStartCell to true, so each particle begins its animation on a random cell between startSpriteCellID and endSpriteCellID. This feature is available from Babylon.js v3.3 onward and requires previously configured sprite cell ID range and a ParticleSystem instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/animation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.spriteRandomStartCell = true;\n```\n\n----------------------------------------\n\nTITLE: Elbow Node Implementation in Node Geometry Editor\nDESCRIPTION: The Elbow node is a passthrough node for organizing and routing wires in the graph. Supports Float, Int, Vector2, Vector3, Vector4, Matrix, and Geometry types without impacting performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Elbow Node\ninput: Float | Int | Vector2 | Vector3 | Vector4 | Matrix | Geometry\noutput: input type (passthrough)\n```\n\n----------------------------------------\n\nTITLE: Jump Input Detection and Force Application\nDESCRIPTION: Handles jump mechanics by checking jump input and remaining jump count. Applies vertical force when jump conditions are met.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt2.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (this._input.jumpKeyDown && this._jumpCount > 0) {\n  this._gravity.y = Player.JUMP_FORCE;\n  this._jumpCount--;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing NodeGeometry from a Serialized JSON Object - Babylon.js (JavaScript)\nDESCRIPTION: This snippet uses Babylon.js to load NodeGeometry from an existing JSON object via the parseSerializedObject method. Dependency: Babylon.js with NodeGeometry API. Input: a serialized JSON object describing the geometry graph. Output: updates the NodeGeometry instance in-place. Limitations: invalid or mismatched JSON may result in errors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnodeGeometry.parseSerializedObject(json);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Lens Flares in Babylon.js\nDESCRIPTION: Demonstrates creating multiple lens flares with different sizes, positions, colors, and textures within a lens flare system. Each flare is configured with specific parameters for visual effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/lenseFlare.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst flare00 = new BABYLON.LensFlare(\n  0.1, // size\n  0, // position\n  new BABYLON.Color3(1, 1, 1), // color\n  \"textures/flare.png\", // texture\n  lensFlareSystem, // lens flare system\n);\nconst flare01 = new BABYLON.LensFlare(0.075, 0.5, new BABYLON.Color3(0.8, 0.56, 0.72), \"textures/flare3.png\", lensFlareSystem);\nconst flare02 = new BABYLON.LensFlare(0.1, -0.15, new BABYLON.Color3(0.71, 0.8, 0.95), \"textures/Flare2.png\", lensFlareSystem);\nconst flare03 = new BABYLON.LensFlare(0.15, 0.25, new BABYLON.Color3(0.95, 0.89, 0.71), \"textures/flare.png\", lensFlareSystem);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup E in Babylon.js Physics\nDESCRIPTION: Parameter setup with pivots at the origin but different axis orientations. The main axis is on the Z-axis while the connected axis is on the X-axis, causing the main body to reorient for axis alignment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(0, 0, 0), //set main body position\nconnectedPivot: new BABYLON.Vector3(0, 0, 0), //adjust main body position and radius of rotation\nmainAxis: new BABYLON.Vector3(0, 0, 1), //different axes will orientate main body to align axes.\nconnectedAxis: new BABYLON.Vector3(1, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Removing Particles from an Expandable SPS in JavaScript\nDESCRIPTION: Illustrates how to remove particles from an expandable Solid Particle System using the `removeParticles(start, end)` method, specifying the start and end indices of the particles to remove. The method returns an array containing the removed particles. `buildMesh()` and `setParticles()` must be called afterwards to update the SPS state. The SPS must contain at least one particle after removal.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/expandable_sps.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, { expandable: true });\nsps.addShape(model1, 1000); // adds 1000 particles from model1\nsps.buildMesh();\n\n// ... further in the code, when needed\nvar removed1 = sps.removeParticles(700, 999); // removes the last 300 particles\nvar removed2 = sps.removeParticles(0, 9); // removes the first 10\nsps.buildMesh(); // update the SPS mesh geometry from the last particle additions\nsps.setParticles();\n```\n\n----------------------------------------\n\nTITLE: Attaching Sound to Mesh in BabylonJS\nDESCRIPTION: Shows how to attach a sound to a mesh, automatically converting it to spatial 3D sound that follows the mesh's position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = new BABYLON.Sound(\"Violons\", \"sounds/violons11.wav\", scene, null, {\n  loop: true,\n  autoplay: true,\n});\n\n// Sound will now follow the box mesh position\nmusic.attachToMesh(box);\n```\n\n----------------------------------------\n\nTITLE: Using BoneLookController in Babylon.js\nDESCRIPTION: Demonstrates how to use the BoneLookController to make a bone look toward a point in space. It requires the character mesh, the bone to control, a target position, and optional adjustment angles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = BABYLON.MeshBuilder.createSphere();\nconst lookCtrl = new BABYLON.BoneLookController(characterMesh, headBone, target.position, { adjustYaw: Math.PI * 0.5, adjustPitch: Math.PI * 0.5, adjustRoll: Math.PI });\n\nscene.registerBeforeRender(function () {\n  lookCtrl.update();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Canvas Resize in Worker Thread for Offscreen Canvas\nDESCRIPTION: This worker code listens for resize messages from the main thread and updates the canvas dimensions accordingly. It assumes the engine variable is already defined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/offscreenCanvas.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar engine;\nonmessage = function (evt) {\n  if (evt.data.width) {\n    canvas.width = evt.data.width;\n    canvas.height = evt.data.height;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshPickEventBlock in JavaScript\nDESCRIPTION: This example creates a FlowGraphMeshPickEventBlock, configured to listen for pick events on a specific 'mesh' object passed during construction. The 'done' execution output is connected to 'nextBlock.in', triggering 'nextBlock' whenever the specified mesh is picked by the user.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst meshPick = new FlowGraphMeshPickEventBlock({ targetMesh: mesh });\n// notify an execution block that a mesh was picked\nmeshPick.done.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Randomizing Particle Color During Update in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to assign a random RGBA color to each particle on every frame by setting the color property with a new Color4 instance using random numbers. This line, intended for the particle update function's 'else' branch, leverages Babylon.js Color4 and standard JavaScript Math.random. It requires the update function context to reference a valid particle object and modifies visual appearance frame-by-frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nparticle.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), 1);\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Static Instance Buffer for Physics in Babylon.js (JavaScript)\nDESCRIPTION: Shows the required usage of `thinInstanceSetBuffer` when utilizing thin instances with the Babylon.js physics engine. The final argument must be set to `false` to mark the instance buffers as non-static, which permits the physics engine to modify the instance transforms during the simulation. Requires an instanced mesh (`box`) and the corresponding matrix data (`matricesData`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/rigidBodies.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n box.thinInstanceSetBuffer(\"matrix\", matricesData, 16, false);\n```\n\n----------------------------------------\n\nTITLE: Assigning Sprites to Grid Tiles\nDESCRIPTION: Loop that assigns sprites to specific grid positions using frameIDs from the sprite atlas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor(let i = 0; i < 4; i++){\n    background.changeTiles(0, new BABYLON.Vector2(i % 2, Math.floor(i / 2)), 9 * i + 9)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Antialiasing in Babylon.js Pipeline\nDESCRIPTION: Sets up MSAA and FXAA antialiasing options in the rendering pipeline. MSAA samples can be adjusted and FXAA can be enabled/disabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.samples = 4;\npipeline.fxaaEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Export BezierSurface Class Declaration\nDESCRIPTION: Modified class declaration with export keyword for use in the Babylon.js repository.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/usingThePlaygroundForBJSDev.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class BezierSurface {\n```\n\n----------------------------------------\n\nTITLE: Disabling Physical Light Falloff for PBR Material in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to disable the physically accurate inverse square light falloff for a PBR material in Babylon.js. Setting `pbr.usePhysicalLightFalloff` to `false` reverts the light falloff behavior to be compatible with the standard Babylon.js material, using the light's range property instead.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\npbr.usePhysicalLightFalloff = false;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Blur Depth Menu in BabylonJS Fluid Renderer\nDESCRIPTION: Sets up the Blur Depth menu folder with various GUI controls for adjusting depth blur parameters in the fluid renderer. Creates controls for enabling blur, adjusting size divisor, filter size, iterations, max filter size and depth scale.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst menuBlurDepth = targetRenderers.addFolder(\"Blur Depth\");\nmenuBlurDepth.$title.style.fontStyle = \"italic\";\n\nthis._targetRenderersGUIElements.push(this._addCheckbox(menuBlurDepth, params, \"targets_enableBlurDepth\", \"Enable\"));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthSizeDivisor\", \"Size divisor\", 1, 10, 1));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthFilterSize\", \"Filter size\", 1, 20, 1));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthNumIterations\", \"Num iterations\", 1, 10, 1));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthMaxFilterSize\", \"Max filter size\", 1, 100, 1));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthDepthScale\", \"Depth scale\", 0, 100, 0.01));\n```\n\n----------------------------------------\n\nTITLE: Adjusting Sky Material Camera Offset\nDESCRIPTION: Code to maintain the horizon's position relative to the camera elevation, useful for flying games or scenarios with variable camera height.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/skyMat.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nskyMaterial.cameraOffset.y = scene.activeCamera.globalPosition.y;\n```\n\n----------------------------------------\n\nTITLE: Using Utility Layer for WebXR Teleportation Target Zone\nDESCRIPTION: Configures the teleportation feature to use a utility layer for rendering the target zone, optionally specifying a custom utility layer scene for advanced rendering control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  useUtilityLayer: true,\n  // optional\n  customUtilityLayerScene: customScene, // a different utility layer scene to use. If not the default utility layer scene will be used\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Ribbon Mesh using MeshBuilder in Babylon.js\nDESCRIPTION: This snippet presents an alternative method for updating an existing ribbon mesh using `BABYLON.MeshBuilder.CreateRibbon`. Instead of positional parameters, it uses an options object. The `pathArray` property provides the updated path data, and the `instance` property is set to the existing `mesh` object to indicate that it should be updated rather than creating a new mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh = BABYLON.MeshBuilder.CreateRibbon(null, { pathArray: pathArray, instance: mesh });\n```\n\n----------------------------------------\n\nTITLE: Path Animation Track Setup in Babylon.js\nDESCRIPTION: Sets up a track array defining turn angles and distances for path animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst slide = function (turn, dist) { //after covering dist apply turn\n    this.turn = turn;\n    this.dist = dist;\n}\nconst track = [];\ntrack.push(new slide(Math.PI / 2, 4));  //first side length 4\ntrack.push(new slide(3 * Math.PI / 4, 8)); //at finish of second side distance covered is 4 + 4\ntrack.push(new slide(3 * Math.PI / 4, 8 + 4 * Math.sqrt(2))); //all three sides cover the distance 4 + 4 + 4 * sqrt(2)\n```\n\n----------------------------------------\n\nTITLE: Setting and Configuring Friction in Babylon.js Physics\nDESCRIPTION: Shows how to set friction during physics imposter creation and how to get or modify friction values during runtime. Friction provides a continuous force between two bodies in contact.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/forces.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 2, friction: 0.4 }, scene); //on creation\n\nvar friction = imposter.friction; // get friction;\nimposter.friction = 0.1; //set friction.\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshDebugPluginMaterial for VERTICES Mode (Example Code) in JavaScript\nDESCRIPTION: This snippet, located in the 'Vertices Mode' section, shows preparing a mesh and applying the MeshDebugPluginMaterial. It calls `PrepareMeshForTrianglesAndVerticesMode` first. The code then instantiates the plugin, setting the `mode` to `TRIANGLES` (note: the surrounding text describes VERTICES mode, suggesting a possible typo in the example code's mode setting) and configuring options typically associated with VERTICES mode: `vertexColor` and `vertexRadius` to customize the appearance of vertex dots.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/visualizeMeshData.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.MeshDebugPluginMaterial.PrepareMeshForTrianglesAndVerticesMode(mesh);\n\nnew BABYLON.MeshDebugPluginMaterial(mesh.material, {\n    mode: BABYLON.MeshDebugMode.TRIANGLES,\n    vertexColor: new BABYLON.Color3(0, 0, 0),\n    vertexRadius: 1.2\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Fog Start and End for Linear Mode in Babylon.js\nDESCRIPTION: This snippet configures the start and end distances for fog when the `fogMode` is set to `BABYLON.Scene.FOGMODE_LINEAR`. The `fogStart` property defines the distance from the camera where the fog begins, and `fogEnd` defines the distance where the fog reaches maximum density (becomes fully opaque).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/environment_introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.fogStart = 20.0;\nscene.fogEnd = 60.0;\n```\n\n----------------------------------------\n\nTITLE: Linking Node Material to Particle System - Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to assign a custom NodeMaterial to a Babylon.js ParticleSystem instance using the createEffectForParticles method. Dependencies include Babylon.js (version 4.2 or later) and an instantiated NodeMaterial and ParticleSystem. The key parameter is the particleSystem, which receives the node-based shader effect. The input is a valid NodeMaterial and ParticleSystem; the output is the particle system rendering with the updated shader effect. Only fragment shaders can be customized; the vertex shader remains fixed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/NMEParticleShaders.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnodeMaterial.createEffectForParticles(particleSystem);\n```\n\n----------------------------------------\n\nTITLE: Removing a Group from a Selection Panel in Babylon.js using JavaScript\nDESCRIPTION: This snippet demonstrates how to remove a specific group from a `selectBox` object using the `removeGroup` method. The group to be removed is identified by its zero-based index (2 in this case). Removing a group causes the indices of subsequent groups to decrease.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nselectBox.removeGroup(2);\n```\n\n----------------------------------------\n\nTITLE: Checking Particle to Particle Intersection in JavaScript\nDESCRIPTION: Demonstrates how to check if a particle intersects with another particle. This can be used within the updateParticle function to implement collision responses.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_physics.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// for instance, in your SPS.updateParticle(p) function : particle / particle\nif (p.intersectsMesh(otherParticle)) { // change p velocity vector }\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Path3D Object in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates the `update()` method of a `Path3D` object (`path3d`). This allows reusing the existing object instance with a new array of `Vector3` points (`points2`), which is useful for performance optimization, especially within render loops. Tangents, normals, and binormals are recalculated automatically for the new path defined by `points2`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/path3D.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst points1 = [v1, v2, ..., vn];\\u00A0 \\u00A0 \\u00A0\\u00A0 \\u00A0 // array of Vector3\nconst path3d = new BABYLON.Path3D(points1);\nconst points2 = [u1, u2, ..., un];\\u00A0 \\u00A0 \\u00A0\\u00A0 \\u00A0 // another array of Vector3\npath3D.update(points2);\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Sprite Maps\nDESCRIPTION: Methods for exporting and importing sprite map configurations using tilemaps files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmySpriteMap.saveTileMaps()\nspriteMap.loadTileMaps(url); //url is the location of the .tilemaps file\n```\n\n----------------------------------------\n\nTITLE: Setting Billboard Mode in BabylonJS\nDESCRIPTION: Demonstrates how to set a billboard mode on a mesh object. The value 7 represents BILLBOARDMODE_ALL, which makes the mesh face the camera on all axes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/billboard.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbox.billboardMode = 7;\n```\n\n----------------------------------------\n\nTITLE: Assigning Light Depth Remapping Values in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates assignment of depth remapping parameters for Babylon.js light sources, using their getDepthMinZ and getDepthMaxZ methods with the active camera. The dependencies are a light object and a camera; both methods should provide the near and far Z distances for use in the shadow depth normalization routines. The returned values, depthValues.x and depthValues.y, are subsequently fed into shader uniforms for depth metric calculations. Inputs are a light and camera reference; outputs are values (numeric) assigned to the depthValues object used in shaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndepthValues.x = light.getDepthMinZ(camera);\ndepthValues.y = light.getDepthMinZ(camera) + light.getDepthMaxZ(camera);\n```\n\n----------------------------------------\n\nTITLE: Connecting Shader Blocks in Babylon.js Node Material using JavaScript\nDESCRIPTION: Shows how to connect multiple shader blocks together to form a computational graph. Each connectTo call attempts to connect outputs/inputs based on block compatibility. Requires valid block objects (e.g., InputBlock, TransformBlock) already instantiated. Connections define data flow within the shader logic.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst positionInput = new BABYLON.InputBlock(\"position\");\npositionInput.setAsAttribute(\"position\");\n\nconst worldInput = new BABYLON.InputBlock(\"world\");\nworldInput.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);\n\nconst worldPos = new BABYLON.TransformBlock(\"worldPos\");\npositionInput.connectTo(worldPos);\nworldInput.connectTo(worldPos);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Clear Behavior in Babylon.js Scene\nDESCRIPTION: Demonstrates how to disable automatic clearing of color, depth, and stencil buffers to reduce gl.clear() calls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscene.autoClear = false; // Color buffer\nscene.autoClearDepthAndStencil = false; // Depth and stencil, obviously\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom VSCode Keybindings (JSON)\nDESCRIPTION: This JSON configuration defines custom keyboard shortcuts for Visual Studio Code. It maps specific key combinations (like Ctrl+Shift+Alt+S) to common VSCode commands (like saving all files, terminating tasks, running tests, showing logs, and running tasks) to speed up development workflows. These bindings should be added to the `keybindings.json` file, accessible via File > Preferences > Keyboard Shortcuts.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/vsCode.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Place your key bindings in this file to overwrite the defaults\n[\n    { \"key\": \"ctrl+shift+alt+s\", \"command\": \"workbench.action.files.saveFiles\" },\n    { \"key\": \"ctrl+shift+alt+k\", \"command\": \"workbench.action.tasks.terminate\" },\n    { \"key\": \"ctrl+shift+alt+t\", \"command\": \"workbench.action.tasks.test\" },\n    { \"key\": \"ctrl+shift+alt+l\", \"command\": \"workbench.action.tasks.showLog\" },\n    { \"key\": \"ctrl+shift+alt+r\", \"command\": \"workbench.action.tasks.runTask\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Emit Rate Range Over Duration in Babylon.js Particle System\nDESCRIPTION: This code shows how to set a range of emit rates over the duration of a particle system. It defines different emit rate ranges at the start, middle, and end of the system's lifecycle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.targetStopDuration = 8;\n\nparticleSystem.addEmitRateGradient(0, 10, 20); //emit rate range at start of particle system\nparticleSystem.addEmitRateGradient(0.4, 200, 250); //emit rate range at 2/5 of duration of particle system\nparticleSystem.addEmitRateGradient(1, 500, 600); //emit rate range at end of particle system\n```\n\n----------------------------------------\n\nTITLE: Defining HandTracking Interface for WebXR Animation Capture\nDESCRIPTION: TypeScript interface definition for hand tracking feature environment that enables animation capture. Includes method for capturing hand animations with configurable frames and modes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/handsAnimation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IHandTrackingXRFeatEnv extends IXRFeatEnv<WebXRHandTracking> {\n\ncaptureHandsAnimation(\n\tframes:number,\n\tmode:TRecordMode,\n\tdelayMS?:number\n):Promise<THandsAnimationData | undefined>;\n\t\n// ... other functions\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Animating a Car Model in Babylon.js\nDESCRIPTION: Imports a pre-built car model using ImportMeshAsync(), retrieves references to the wheel meshes by name, and applies the wheel animations to all four wheels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/animation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"url to model car\" + \"car.babylon\").then(() => {\n  const wheelRB = scene.getMeshByName(\"wheelRB\");\n  const wheelRF = scene.getMeshByName(\"wheelRF\");\n  const wheelLB = scene.getMeshByName(\"wheelLB\");\n  const wheelLF = scene.getMeshByName(\"wheelLF\");\n\n  scene.beginAnimation(wheelRB, 0, 30, true);\n  scene.beginAnimation(wheelRF, 0, 30, true);\n  scene.beginAnimation(wheelLB, 0, 30, true);\n  scene.beginAnimation(wheelLF, 0, 30, true);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Skybox with Custom Texture in Babylon.js\nDESCRIPTION: Creates a skybox using a cube texture with PBR material and custom scale. The method takes a texture, a boolean to specify PBR or standard material, and a scale value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar texture = new BABYLON.CubeTexture(\"/assets/textures/SpecularHDR.dds\", scene);\nscene.createDefaultSkybox(texture, true, 100);\n```\n\n----------------------------------------\n\nTITLE: Loading Sounds with BabylonJS AssetsManager\nDESCRIPTION: Demonstrates how to load multiple sound files using the BabylonJS AssetsManager with loading screen support. Includes success callbacks and sound synchronization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet music1, music2, music3;\n\n// Assets manager\nconst assetsManager = new BABYLON.AssetsManager(scene);\n\nconst binaryTask = assetsManager.addBinaryFileTask(\"Violons18 task\", \"sounds/violons18.wav\");\nbinaryTask.onSuccess = function (task) {\n  music1 = new BABYLON.Sound(\"Violons18\", task.data, scene, soundReady, {\n    loop: true,\n  });\n};\n\nconst binaryTask2 = assetsManager.addBinaryFileTask(\"Violons11 task\", \"sounds/violons11.wav\");\nbinaryTask2.onSuccess = function (task) {\n  music2 = new BABYLON.Sound(\"Violons11\", task.data, scene, soundReady, {\n    loop: true,\n  });\n};\n\nconst binaryTask3 = assetsManager.addBinaryFileTask(\"Cello task\", \"sounds/cellolong.wav\");\nbinaryTask3.onSuccess = function (task) {\n  music3 = new BABYLON.Sound(\"Cello\", task.data, scene, soundReady, {\n    loop: true,\n  });\n};\n\nconst soundsReady = 0;\n\nfunction soundReady() {\n  soundsReady++;\n  if (soundsReady === 3) {\n    music1.play();\n    music2.play();\n    music3.play();\n  }\n}\n\nassetsManager.load();\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Optimizer Options in JavaScript\nDESCRIPTION: Shows how to create custom SceneOptimizerOptions with specific target framerate and check rate.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/sceneOptimizer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// With a target framerate of 50fps and a check|rate of 500ms\nlet optimizerOptions = new BABYLON.SceneOptimizerOptions(50, 500);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Extrusions with Mesh.ExtrudeShapeCustom (JavaScript)\nDESCRIPTION: Shows the legacy method `BABYLON.Mesh.ExtrudeShapeCustom` for creating custom extruded shapes using positional arguments. Requires `shape` and `path` (Vector3 arrays), and accepts functions for scaling (`scaleFunction`) and rotation (`rotateFunction`). Optional parameters include closing options (`ribbonCloseArray`, `ribbonClosePath`), capping (`cap`), scene, updateability, side orientation, and instance for updates. Includes an example demonstrating constant scale (1) and zero rotation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/custom_extrude.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet extrusion = BABYLON.Mesh.ExtrudeShapeCustom(\"extrusion\", shape, path, scaleFunction, rotateFunction, ribbonCloseArray, ribbonClosePath, cap, scene);\nlet extrusion = BABYLON.Mesh.ExtrudeShapeCustom(\"extrusion\", shape, path, scaleFunction, rotateFunction, ribbonCloseArray, ribbonClosePath, cap, scene, updatable, sideOrientation, instance); //optional parameters after scene\n\n// fixed unit scale and zero rotation\nlet extrusion = BABYLON.Mesh.ExtrudeShapeCustom(\n  \"extrusion\",\n  shape,\n  path,\n  () => {\n    return 1;\n  },\n  () => {\n    return 0;\n  },\n  ribbonCloseArray,\n  ribbonClosePath,\n  cap,\n  scene,\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Limiting Particle System Duration in Babylon.js\nDESCRIPTION: Sets a target duration for how long the particle system should run before automatically stopping emission. The duration is specified in seconds using the `targetStopDuration` property. The actual stop time depends on the `updateSpeed`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.targetStopDuration = 5;\n```\n\n----------------------------------------\n\nTITLE: Getting All Facet Indexes at Local Coordinates in Babylon.js\nDESCRIPTION: Demonstrates retrieving an array of facet indexes within the logical partition block containing the specified local coordinates (x, y, z) using `mesh.getFacetsAtLocalCoordinates`. If successful (returns non-null), it also shows how to get the world position of the first facet found using `mesh.getFacetPosition`. Returns `null` if the coordinates are outside the partitioned area or the block contains no facets.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst indexes = mesh.getFacetsAtLocalCoordinates(x, y, z); // returns an array containing the facet indexes\nif (indexes != null) {\n  const worldPos = mesh.getFacetPosition(indexes[0]); // the world position of the first facet in the block\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Device Connection Events in JavaScript\nDESCRIPTION: Demonstrates how to use observables to handle device connection and disconnection events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/deviceSourceManager.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nonDeviceConnectedObservable.add((device) => {\n  // You can get the device type by using device.deviceType\n  // You can also get the device slot by using device.deviceSlot (default is 0 for keyboard and 1 for mouse)\n  // \"device\" is of Type DeviceSource do you can also access the getInput function or add an observable for onInputChangedObservable\n});\n\nonDeviceDisconnectedObservable.add((device) => {\n  // You can get the device type by using device.deviceType\n  // You can also get the device slot by using device.deviceSlot (default is 0 for keyboard and 1 for mouse)\n  // \"device\" is of Type DeviceSource\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing updateParticleVertex Function in Babylon.js SPS\nDESCRIPTION: This example demonstrates how to implement the updateParticleVertex function for a Solid Particle System. The function is called for each vertex of each particle, allowing per-vertex manipulation of position, color, and UV mapping based on particle properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_vertices.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.computeParticleVertex = true; // false by default for performance reason\nSPS.updateParticleVertex = function(particle, vertex, v) {\n  // particle : the current particle object\n  // vertex : the current vertex, a solidParticleVertex object\n  // the index of the current vertex in the particle shape\n  // example :\n  if (particle.shapeID == 1) {\n    vertex.position.x *= Math.random() + 1;\n    vertex.position.y *= Math.random() + 1;\n    vertex.position.z *= Math.random() + 1;\n    vertex.color.r = Math.abs(Math.sin(v));\n    vertex.color.g = 1 - vertex.color.r\n    vertex.uv.x = particle.idx + v;\n    vertex.uv.y = vertex.uv.x;\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Selector Callback Functions in JavaScript\nDESCRIPTION: Provides example callback functions (`toSize`, `toPlace`) for checkbox selectors. Each function receives a boolean `isChecked` parameter indicating the checkbox state and modifies scene object properties (scaling, position) accordingly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst toSize = function (isChecked) {\n  if (isChecked) {\n    box.scaling = new BABYLON.Vector3(0.5, 0.5, 0.5);\n  } else {\n    box.scaling = new BABYLON.Vector3(1, 1, 1);\n  }\n};\n\nconst toPlace = function (isChecked) {\n  if (isChecked) {\n    box.position.y = 1.5;\n  } else {\n    box.position.y = 0.5;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing SSAO Pipeline with Cameras\nDESCRIPTION: Creating SSAO pipeline with automatic camera attachment using an array of cameras.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/SSAORenderPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssao = new BABYLON.SSAORenderingPipeline('ssaopipeline', scene, 0.75, [camera1 etc.]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Torus Knot using MeshBuilder in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a torus knot mesh using the MeshBuilder.CreateTorusKnot method in Babylon.js. It includes an options object for customizing various parameters of the torus knot.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/torus_knot.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst torus = BABYLON.MeshBuilder.CreateTorusKnot(\"torusKnot\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling Alpha Channel for Particle Vertex Colors\nDESCRIPTION: Shows how to enable the alpha channel for vertex colors in the SPS mesh, which is necessary when you want to apply transparency to particles through their vertex colors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.mesh.hasVertexAlpha = true;\n```\n\n----------------------------------------\n\nTITLE: Instantiate Node Properties and Functionality\nDESCRIPTION: Documentation describing the Instantiate node which creates multiple instances of geometry based on count and transformation parameters. The node supports matrix-based or individual position/rotation/scale transformations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n#### Properties\n- count: Int value for number of instances\n- position: Vector3 value for instance position\n- rotation: Vector3 value in radians for rotation\n- scaling: Vector3 value for scale\n\n#### Inputs\n- instance: input geometry to instantiate\n- count: Int for instance count\n- matrix: transformation matrix\n- position: Vector3 for position\n- rotation: Vector3 for rotation\n- scaling: Vector3 for scaling\n```\n\n----------------------------------------\n\nTITLE: Calculating Inward Direction Vector\nDESCRIPTION: Computes a random inward-pointing vector using facet normal, tangent, and binormal vectors\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/InnerMeshPoints.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.updateFacetData();\n\nnorm = mesh.getFacetNormal(index).normalize().scale(-1);\ntang = vec0.clone().normalize();\nbiNorm = BABYLON.Vector3.Cross(norm, tang);\nangle = BABYLON.Scalar.RandomRange(0, 2 * Math.PI);\nfacetPlaneVec = tang.scale(Math.cos(angle)).add(biNorm.scale(Math.sin(angle)));\nangle = BABYLON.Scalar.RandomRange(0.1, Math.PI);\ndirection = facetPlaneVec.scale(Math.cos(angle)).add(norm.scale(Math.sin(angle)));\n```\n\n----------------------------------------\n\nTITLE: Adding Emissive Texture Support to Fragment Shader Header\nDESCRIPTION: Defines variables and uniforms needed for emissive texture support in the fragment shader header, including the varying for UV coordinates, sampler for the texture, and texture information.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n#ifdef EMISSIVE\nvarying vec2 vEmissiveUV;\nuniform sampler2D emissiveSampler;\nuniform vec2 vEmissiveInfos;\n#endif\n```\n\n----------------------------------------\n\nTITLE: Customizing Fire Material Speed in Babylon.js\nDESCRIPTION: This snippet shows how to adjust the speed of fire flames in the Fire Material. The speed property controls the animation rate of the fire effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/fireMat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfireMaterial.speed = 5.0; // Default is 1.0\n```\n\n----------------------------------------\n\nTITLE: Disabling Opacity Fresnel Effect\nDESCRIPTION: Shows how to turn off the opacity fresnel effect that makes the material fade at grazing angles\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbackgroundMaterial.opacityFresnel = false;\n```\n\n----------------------------------------\n\nTITLE: Creating a Square Plane with Mesh.CreatePlane in Babylon.js\nDESCRIPTION: Creates a square plane mesh using the legacy `BABYLON.Mesh.CreatePlane` method. Takes a name, a size (for both width and height), and a scene object. Optional parameters include `updatable` and `sideOrientation`. Note that this method can only create square planes; rectangles require scaling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/plane.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst plane = BABYLON.Mesh.CreatePlane(\"plane\", size, scene);\nconst plane = BABYLON.Mesh.CreatePlane(\"plane\", size, scene, updatable, sideOrientation); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Controlling Index of Refraction\nDESCRIPTION: Demonstrates how to set the index of refraction value for a PBR material to control how light bends through the material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\npbr.metallic = 0;\npbr.roughness = 0;\n\npbr.subSurface.isRefractionEnabled = true;\npbr.subSurface.indexOfRefraction = 1.5;\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Object in Babylon.js\nDESCRIPTION: Creates a new Animation object that will rotate a wheel around its Y axis. The animation runs at 30 frames per second, uses the FLOAT animation type, and cycles continuously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/animation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animWheel = new BABYLON.Animation(\"wheelAnimation\", \"rotation.y\", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Emission Power (Speed Range) - Babylon.js - JavaScript\nDESCRIPTION: Controls the minimum and maximum initial speed for emitted particles by setting minEmitPower and maxEmitPower. Values are numeric and applied randomly to each particle when emitted. Babylon.js library must be present. Higher values yield faster-moving particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.minEmitPower = 1;\nparticleSystem.maxEmitPower = 3;\n```\n\n----------------------------------------\n\nTITLE: Defining House Footprint Base Data in JavaScript\nDESCRIPTION: This snippet initializes an array `baseData` containing the 2D coordinates (x, z pairs) defining the inner corners of the house footprint. This data is fundamental for constructing the house walls and subsequently planning the roof structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar baseData = [-3, -2,  -1, -4,  1, -4,  3, -2,  5, -2,  5, 1,  2, 1,  2, 3,  -3, 3];\n```\n\n----------------------------------------\n\nTITLE: Positioning Reflection Probe in Babylon.js\nDESCRIPTION: Demonstrates two methods for positioning a reflection probe: attaching it to a mesh or setting its position directly using Vector3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/reflectionProbes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprobe.attachToMesh(root);\n// or\nprobe.position = new BABYLON.Vector3(0, 1, 0);\n```\n\n----------------------------------------\n\nTITLE: Mapping ABOB Overlap Facets to GDmnDATA in JavaScript\nDESCRIPTION: This function body maps the calculated iso-vector data for facets overlapping edges AB and OB (`isoVecsABOB`) to the global `GDmnDATA` structure for a given face number (`faceNb`). It constructs unique identifiers for vertices based on their type and coordinates, potentially referencing an adjacent face (`fr` from `IDATA.edgematch`), looks up their indices in `vecToIdx`, and pushes the resulting triangle vertex indices into `GDmnDATA.face`. This snippet appears to be the implementation body of a method like `Primary.prototype.ABOBtoGDmnDATA`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst fr = IDATA.edgematch[faceNb][0];\nfor (let i = 0; i < this.isoVecsABOB.length; i++) {\n    const temp = [];\n    for (let j = 0; j < 3; j++) {\n        if (this.vertexTypes[i][j] === 0) {\n            temp.push(faceNb + \"|\" + this.isoVecsABOB[i][j].x + \"|\" + this.isoVecsABOB[i][j].y);\n        }\n        else {\n            temp.push(fr + \"|\" + this.isoVecsABOB[i][j].x + \"|\" + this.isoVecsABOB[i][j].y);\n        }\n    }\n    GDmnDATA.face.push([this.vecToIdx[temp[0]], this.vecToIdx[temp[1]], this.vecToIdx[temp[2]]]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using AdvancedTimer Class for Button Press in Babylon.js\nDESCRIPTION: Shows how to use the AdvancedTimer class to implement the same 3-second button press functionality. This approach offers more flexibility and reusability compared to the setAndStartTimer function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst guiButton = // created a GUI button\nconst guiButtonMaterial = ... // get the material\nconst advancedTimer : BABYLON.AdvancedTimer<Scene> = new BABYLON.AdvancedTimer({\n    timeout: 3000,\n    contextObservable: scene.onBeforeRenderObservable\n});\nadvancedTimer.onEachCountObservable.add(() => {\n    // turn it slowly green on each call to the registered observer\n    guiButtonMaterial.diffuseColor.set(0,data.completeRate,0);\n});\nadvancedTimer.onTimerAbortedObservable.add(() => {\n    // Aborted, back to a black button\n    guiButtonMaterial.diffuseColor.set(0,0,0);\n});\nadvancedTimer.onTimerEndedObservable.add(() => {\n    // back to a black button\n    guiButtonMaterial.diffuseColor.set(0,0,0);\n    console.log('Button pressed!');\n});\n\nscene.onPointerDown = () => {\n    advancedTimer.start();\n}\n\nscene.onPointerUp = () => {\n    advancedTimer.stop();\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Controller Handedness Configuration\nDESCRIPTION: Shows how to customize controller configuration by swapping handedness for movement and rotation controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRMovement.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst swappedHandednessConfiguration = [\n  {\n    allowedComponentTypes: [BABYLON.WebXRControllerComponent.THUMBSTICK_TYPE, BABYLON.WebXRControllerComponent.TOUCHPAD_TYPE],\n    forceHandedness: \"right\",\n    axisChangedHandler: (axes, movementState, featureContext, xrInput) => {\n      movementState.rotateX = Math.abs(axes.x) > featureContext.rotationThreshold ? axes.x : 0;\n      movementState.rotateY = Math.abs(axes.y) > featureContext.rotationThreshold ? axes.y : 0;\n    },\n  },\n  {\n    allowedComponentTypes: [WebXRControllerComponent.THUMBSTICK_TYPE, WebXRControllerComponent.TOUCHPAD_TYPE],\n    forceHandedness: \"left\",\n    axisChangedHandler: (axes, movementState, featureContext, xrInput) => {\n      movementState.moveX = Math.abs(axes.x) > featureContext.movementThreshold ? axes.x : 0;\n      movementState.moveY = Math.abs(axes.y) > featureContext.movementThreshold ? axes.y : 0;\n    },\n  },\n];\n\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.MOVEMENT, \"latest\", {\n  xrInput: xrHelper.input,\n  customRegistrationConfigurations: swappedHandednessConfiguration,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin Factory with Dynamic Import in TypeScript\nDESCRIPTION: This snippet shows how to register a plugin factory that dynamically imports the custom importer module. This approach allows for lazy loading of the importer, only when it's needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/createImporters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RegisterSceneLoaderPlugin } from \"@babylonjs/core/Loading/sceneLoader\";\n\nRegisterSceneLoaderPlugin({\n  name: \"myCustomImporter\",\n  extensions: \".myCustomExtension\",\n  createPlugin: async () => {\n    const { MyCustomImporter } = await import(\"./MyCustomImporter\");\n    return new MyCustomImporter();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Importer Options in LoadAssetContainerAsync in TypeScript\nDESCRIPTION: This snippet demonstrates how to use custom importer options when calling the LoadAssetContainerAsync function. It shows how to pass options specific to the custom importer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/createImporters.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait LoadAssetContainerAsync(\"path/to/model\", scene, {\n  pluginOptions: {\n    myCustomImporter: {\n      option1: \"hello world\",\n      option2: 42,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fog Color in Babylon.js\nDESCRIPTION: This snippet sets the color of the fog effect, regardless of the chosen `fogMode`. It uses the `fogColor` property and assigns a `BABYLON.Color3` object to it. The default fog color is a grayish-blue `BABYLON.Color3(0.2, 0.2, 0.3)`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/environment_introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.fogColor = new BABYLON.Color3(0.9, 0.9, 0.85);\n```\n\n----------------------------------------\n\nTITLE: Using a Separate Bump Map for Clear Coat Imperfections in Babylon.js\nDESCRIPTION: This JavaScript snippet demonstrates applying a separate bump map specifically to the clear coat layer of a Babylon.js PBR material, simulating imperfections on the coating itself, distinct from the base material's bump map. It configures the base material with a bump map, enables the clear coat, and assigns a different texture to the clear coat's bump property (`clearCoat.bumpTexture`). Requires `BABYLON.PBRMaterial`, `BABYLON.Texture`, and a `scene`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\n// Ensures irradiance is computed per fragment to make the\n// Bump visible\npbr.forceIrradianceInFragment = true;\npbr.bumpTexture = new BABYLON.Texture(\"textures/floor_bump.png\", scene);\npbr.metallic = 0.0;\npbr.roughness = 1.0;\n\npbr.clearCoat.isEnabled = true;\nconst coatBump = new BABYLON.Texture(\"textures/waterbump.png\", scene);\npbr.clearCoat.bumpTexture = coatBump;\n```\n\n----------------------------------------\n\nTITLE: Creating a Selection Panel with Initial Groups in JavaScript\nDESCRIPTION: Illustrates an alternative constructor for `SelectionPanel` that accepts an array of pre-constructed selector groups (`selector groups`) upon initialization. This allows populating the panel directly during creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.GUI.SelectionPanel(name, [selector groups])\n```\n\n----------------------------------------\n\nTITLE: Using Textures in Babylon.js Material Plugins (TypeScript/GLSL/WGSL)\nDESCRIPTION: Demonstrates how to incorporate a texture into a Babylon.js material plugin. It implements the `getSamplers` method to declare the texture sampler name ('texture') and the `getCustomCode` method to inject shader code. For the fragment shader, it provides conditional code for both WGSL (defining sampler and texture variables, sampling in 'CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR') and GLSL (defining a `sampler2D` uniform, sampling in 'CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR').\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materialPlugins.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetSamplers(samplers) {\n    samplers.push(\"texture\");\n}\n\ngetCustomCode(shaderType, shaderLanguage) {\n    if (shaderType === \"fragment\") {\n      if (shaderLanguage === BABYLON.ShaderLanguage.WGSL) {\n        return {\n          \"CUSTOM_FRAGMENT_DEFINITIONS\": `\n              var myTextureSampler: sampler;\n              var myTexture: texture_2d<f32>;\n          `,\n\n          \"CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\": `\n                color = vec4f(textureSample(myTexture, myTextureSampler, fragmentInputs.vDiffuseUV + uvOffset).rgb, color.a);\n          `,\n        }\n      }\n      return {\n        \"CUSTOM_FRAGMENT_DEFINITIONS\": `\n            uniform sampler2D myTexture;\n        `,\n\n        \"CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\": `\n              color.rgb = texture(myTexture, vDiffuseUV + uvOffset).rgb;\n        `,\n      }\n    }\n    return null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SpriteManager in Babylon.js\nDESCRIPTION: Demonstrates how to create a SpriteManager for managing single sprite images or uniform spritesheets. It specifies the manager name, image URL, capacity, sprite size, and optional scene parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprites_introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySpriteManagerTrees = new BABYLON.SpriteManager(name, url, capacity, size, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Loading Incremental Scene in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to load an incremental scene file in Babylon.js using the AppendSceneAsync method. It loads the scene asynchronously and logs a success message upon completion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/incrementalLoading.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait BABYLON.AppendSceneAsync(\"src/my-scene.incremental.babylon\", scene);\nconsole.log(\"My incremental file was loaded! WOHOO!\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Partial Image to Dynamic Texture in Babylon.js\nDESCRIPTION: Loads an image and draws a specific portion of it onto a specific area of the canvas. This allows for cropping and scaling of the source image.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst img = new Image();\nimg.src = 'PATH TO IMAGE';\nimg.onload = function() {\n\nctx.drawImage(this, image start x, image start y, image width, image height, canvas to x, canvas to y, destination width, destination height);\nmyDynamicTexture.update();\n```\n\n----------------------------------------\n\nTITLE: Creating VideoDome Instance in Babylon.js\nDESCRIPTION: Basic instantiation of a VideoDome object with a URL source and options object. The options object is required but can be empty.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360VideoDome.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvideoDome = new BABYLON.VideoDome(\"videoDome\", url, { < options > }, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting a Variable in Execution Context (JavaScript)\nDESCRIPTION: This code sets a user-defined variable in the execution context, allowing blocks to access or mutate it. The variable key in this example is 'myVar', assigned value 42. 'context' must already be created from a FlowGraph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontext.setVariable(\"myVar\", 42);\n```\n\n----------------------------------------\n\nTITLE: Simple Environment Configuration in Babylon.js Viewer\nDESCRIPTION: HTML configuration for enabling default skybox and ground in the Babylon.js viewer using inline attributes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<babylon skybox=\"true\" ground=\"true\"> </babylon>\n```\n\n----------------------------------------\n\nTITLE: Setting Emissive Color for Video Material in Babylon.js\nDESCRIPTION: Adds an emissive color to the material containing a video texture to ensure proper illumination of the video content regardless of scene lighting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/videoTexture.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\necran.material.emissiveColor = new BABYLON.Color3(1, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Creating Spritesheet Manager in Babylon.js\nDESCRIPTION: Creates a sprite manager for handling spritesheet animations with specific cell size.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_manager.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst spriteManagerPlayer = new BABYLON.SpriteManager(\"playerManager\",\"path to Player.png\", 1, 64);\n```\n\n----------------------------------------\n\nTITLE: Configuring Metallic/Roughness Channels in PBRMaterial\nDESCRIPTION: Sets up custom channel configurations for a PBR material when converting from PBRMetallicRoughnessMaterial to PBRMaterial. This code specifies which texture channels should be used for roughness and metallic properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npbr.useRoughnessFromMetallicTextureAlpha = false;\npbr.useRoughnessFromMetallicTextureGreen = true;\npbr.useMetallnessFromMetallicTextureBlue = true;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Loading Screen in Babylon.js\nDESCRIPTION: This code snippet shows how to create an instance of a custom loading screen, assign it to the engine, and control its display. It's applicable for both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/customLoadingScreen.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar loadingScreen = new CustomLoadingScreen(\"I'm loading!!\");\n// replace the default loading screen\nengine.loadingScreen = loadingScreen;\n// show the loading screen\nengine.displayLoadingUI();\n\n/*\n * create your scene over here\n */\n\n// hide the loading screen when you want to\nengine.hideLoadingUI();\n```\n\n----------------------------------------\n\nTITLE: Changing Terrain Data Dynamically in JavaScript\nDESCRIPTION: Illustrates how to dynamically change a terrain's map data, colors, UVs, and normals at runtime based on camera position or other conditions. Also shows how to handle normal map computation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// change the terrain map on the fly\nif (camera.position.z > someLimit) {\n  terrain.mapData = map2;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Properties Using Overall Index (i) in Babylon.js\nDESCRIPTION: Demonstrates using a custom function with `pcs.addPoints` to set particle positions and colors. The particle's y-position is determined by its overall index `i` in the PCS, resulting in points spread out vertically across the total number of points added across multiple calls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar myfunc = function (particle, i, s) {\n  particle.position = new BABYLON.Vector3(0.5 + 0.25 * Math.random(), i / 5000, 0.25 * Math.random());\n  particle.color = new BABYLON.Color4(Math.random(), Math.random(), Math.random(), Math.random());\n};\npcs.addPoints(10000, myfunc);\npcs.addPoints(10000, myfunc);\n```\n\n----------------------------------------\n\nTITLE: Configuring Center Reflection with Fresnel Parameters in Babylon.js\nDESCRIPTION: Configures Fresnel parameters to apply reflection in the center of an object rather than the edges. Black color on the left (edges) and white on the right (center) creates a reflection effect that appears strongest at the center.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/fresnelParameters.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.reflectionFresnelParameters.leftColor = BABYLON.Color3.Black();\nmaterial.reflectionFresnelParameters.rightColor = BABYLON.Color3.White();\n```\n\n----------------------------------------\n\nTITLE: Attaching SixDofDragBehavior to a Mesh in Babylon.js - JavaScript\nDESCRIPTION: Demonstrates attaching an already constructed SixDofDragBehavior to a mesh in the Babylon.js scene using the addBehavior method. The mesh parameter is an instance of a Babylon.js mesh object with which the user will interact. The SixDofDragBehavior enables manipulation of the mesh by supporting movement and rotation in three-dimensional space, essential for interactive XR applications.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/mrtk.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.addBehavior(sixDofDragBehavior);\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a Utility Layer - Babylon.js JavaScript\nDESCRIPTION: Shows how to manually instantiate a UtilityLayerRenderer in Babylon.js, allowing full control over the overlay scene. Requires a reference to the main scene as a parameter. Returns a new utility layer instance that can be used for custom overlays.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst utilLayer = new BABYLON.UtilityLayerRenderer(scene);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tangents, Normals, and Binormals from Path3D in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates calling the `getTangents()`, `getNormals()`, and `getBinormals()` methods on a `Path3D` instance (`path3D`). Each method returns an array of `Vector3` objects representing the respective vectors at each point along the path.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/path3D.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tangents = path3D.getTangents();\nconst normals = path3D.getNormals();\nconst binormals = path3D.getBinormals();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Optimization Using Shorthand in JavaScript\nDESCRIPTION: Demonstrates the shorthand method for adding custom optimizations using addCustomOptimization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/sceneOptimizer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Using shorthand syntax, fn(onApply, onGetDescrition, priority)\noptions.addCustomOptimization(function () {\n\t// Some optimizing code\n}, function () {\n    return \"Making optimizations...\";\n}, 0.6);\n```\n\n----------------------------------------\n\nTITLE: Enabling AutoRotation Behavior for ArcRotateCamera in BabylonJS\nDESCRIPTION: Enables automatic rotation of an ArcRotateCamera during user inactivity. Can be configured with rotation speed, wait time, spinup time, and zoom animation stopping properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/cameraBehaviors.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.useAutoRotationBehavior = true;\n```\n\n----------------------------------------\n\nTITLE: Creating a WaitAll Block in Babylon.js Flow Graph\nDESCRIPTION: Sets up a WaitAll block that waits for all input signals to be triggered before executing its completion signal. Useful for synchronizing multiple parallel flows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst waitAll = new FlowGraphWaitAllBlock({\n  inputSignalCount: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mesh Scaling from a Pivot Point in Babylon.js\nDESCRIPTION: Extends the Babylon.js Mesh prototype to add a scaleFromPivot method that allows scaling a mesh relative to any arbitrary point in 3D space. It calculates new position coordinates based on the scale ratios and the distance from the pivot point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Pivot.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.prototype.scaleFromPivot = function(pivotPoint, sx, sy, sz) {\n\tvar _sx = sx / this.scaling.x;\n\tvar _sy = sy / this.scaling.y;\n\tvar _sz = sz / this.scaling.z;\n\tthis.scaling = new BABYLON.Vector3(sx, sy, sz);\t\n\tthis.position = new BABYLON.Vector3(pivotPoint.x + _sx * (this.position.x - pivotPoint.x), pivotPoint.y + _sy * (this.position.y - pivotPoint.y), pivotPoint.z + _sz * (this.position.z - pivotPoint.z));\n}\n\nmesh.scaleFromPivotnew BABYLON.Vector3(1, 2, -1), 2, 6, 0.5);\n```\n\n----------------------------------------\n\nTITLE: Inverting Ray Direction in Volumetric Light Scattering Post Process - Babylon.js - JavaScript\nDESCRIPTION: Toggles the direction of light scattering rays (upwards or downwards) by setting the invert property. This is useful for customizing the visual direction of the effect depending on scene requirements. Expects a boolean value; true for downward, false for upward direction. Impacts how rays are rendered from the light source mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvls.invert = true;\n```\n\n----------------------------------------\n\nTITLE: Initializing Min/Max World Bounds from First Child Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Initializes the `min` and `max` variables with the world-space minimum and maximum bounding box corners obtained from the *first* mesh (`childMeshes[0]`) in the previously retrieved array of child meshes. These variables serve as the starting point for calculating the combined bounds of all children. Requires `childMeshes` to be a non-empty array of mesh objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet min = childMeshes[0].getBoundingInfo().boundingBox.minimumWorld;\nlet max = childMeshes[0].getBoundingInfo().boundingBox.maximumWorld;\n```\n\n----------------------------------------\n\nTITLE: Disabling Panning for ArcRotateCamera in Babylon.js (JavaScript)\nDESCRIPTION: This snippet disables the panning feature for a `BABYLON.ArcRotateCamera`. By setting the `panningSensibility` property to 0, user input that would normally trigger panning (like Ctrl + Left Click or Right Click, depending on configuration) will no longer have any effect on the camera's position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.panningSensibility = 0;\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Speed and Force in Babylon.js Physics\nDESCRIPTION: Sets both the speed and maximum force (torque) for a motor joint. This allows for more precise control over the motor's operation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/joints.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njoint.setMotor(speed, force);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Parent in Expandable SPS using ID in JavaScript\nDESCRIPTION: Highlights the correct way to set a particle's parent within an expandable SPS. Because particle indices (`idx`) can change when particles are removed, the parent should be assigned using the parent particle's stable identifier (`id`). Requires `particle` and `otherParticle` (the potential parent) objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/expandable_sps.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (otherParticle) {\n  particle.parentId = otherParticle.id; // not otherParticle.idx\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Gamepad State in Babylon.js Scene Loop\nDESCRIPTION: Demonstrates how to check the current state of a gamepad within the scene's render loop in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/gamepads.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.registerBeforeRender(function () {\n    if(gamepad instanceof BABYLON.Xbox360Pad){\n        if(gamepad.buttonA){\n            sphere.position.y+=0.05\n        }\n        sphere.position.x+=gamepad.leftStick.x*0.05\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Edge Renderer with Instances in Babylon.js\nDESCRIPTION: This code shows how to set up the edge renderer of a source mesh to be shared with all its instances, optimizing performance when dealing with multiple instances of the same mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/edgeRenderer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsourceMesh.edgesShareWithInstances = true;\n```\n\n----------------------------------------\n\nTITLE: Simulating Hydraulic Erosion with Babylon.js WebGPU - JavaScript\nDESCRIPTION: This snippet triggers a Babylon.js playground running hydraulic erosion terrain simulation via two compute shaders using WebGPU. It ports logic from a referenced Hydraulic-Erosion project and allows real-time parameter adjustment for iterations, radius, and resolution. It works in WebGPU (GPU compute) but falls back to CPU in WebGL2, with risks of browser lockup on high parameters. Dependencies: Babylon.js, WebGPU or WebGL2 support; inputs include erosion parameters and outputs a dynamically eroded 3D terrain mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Playground id=\\\"#C90R62#16\\\" engine=\\\"webgpu\\\" title=\\\"Hydraulic erosion\\\" description=\\\"Simulate erosion to make terrains look more natural\\\" image=\\\"/img/extensions/webgpu/hydraulicErosion.png\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Meshes for Sectional Roof in JavaScript (Babylon.js)\nDESCRIPTION: This code generates the meshes for two distinct roof sections by calling the custom `roof` function twice. The first call creates the `roofSection` (main part) using `mainRoofprint`, `apexes`, and `planes` with a rise of 2. The second call creates `smallRoofSection` using `smallRoofprint`, `smallApexes`, and `smallPlanes` with a different height (`height - 1`) to achieve varying roof levels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar roofSection = roof(mainRoofprint, apexes, planes, 2, height, 5.1);\nvar smallRoofSection = roof(smallRoofprint, smallApexes, smallPlanes, 2, height - 1, 5.1);\n```\n\n----------------------------------------\n\nTITLE: Initializing an Empty Point Cloud System in Babylon.js\nDESCRIPTION: Creates a new, empty `PointsCloudSystem` instance. It requires a name (string), the size for each particle (number), and the scene object as parameters. This is the first step before adding any points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pcs = new BABYLON.PointsCloudSystem(\"pcs\", 5, scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sky Material and Skybox in Babylon.js\nDESCRIPTION: Basic setup code for creating a skybox mesh and applying the Sky Material to it. The sky material is configured with backface culling disabled for proper rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/skyMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst skyMaterial = new BABYLON.SkyMaterial(\"skyMaterial\", scene);\nskyMaterial.backFaceCulling = false;\n\nconst skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 1000.0 }, scene);\nskybox.material = skyMaterial;\n```\n\n----------------------------------------\n\nTITLE: Handling Canvas Resize in Main Thread for Offscreen Canvas\nDESCRIPTION: This code adds a resize event listener to the window in the main thread. It sends the new canvas dimensions to the worker when the window is resized.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/offscreenCanvas.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"resize\", () => {\n  worker.postMessage({ width: canvas.clientWidth, height: canvas.clientHeight });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Partitioning Subdivisions in Babylon.js\nDESCRIPTION: Demonstrates how to customize the number of subdivisions used for mesh partitioning along each axis before enabling facet data. The `mesh.partitioningSubdivisions` property is set to an integer value (e.g., 50). Subsequently, `mesh.updateFacetData()` must be called for this new subdivision level to be used in the internal partitioning structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nmesh.partitioningSubdivisions = 50; // set a bigger value than the default one (integer)\nmesh.updateFacetData(); // now the internal partitioning has 50 blocks per axis\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an ImageOnlyButton in Babylon.js GUI\nDESCRIPTION: This snippet shows how to create an ImageOnlyButton, which is a button with only an image. It uses the BABYLON.GUI.Button.CreateImageOnlyButton method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = BABYLON.GUI.Button.CreateImageOnlyButton(\"but\", \"textures/grass.png\");\n```\n\n----------------------------------------\n\nTITLE: Recycling Particles Based on Height Limit in Babylon.js - JavaScript\nDESCRIPTION: This example demonstrates how to recycle particles whose position exceeds a dynamically assigned height threshold. The recycleParticle function resets position and velocity to zero and randomly assigns a new heightLim to each particle. updateParticle incorporates this recycling logic, checking the particle's Y position and applying the recycling when necessary. The velocity and position are updated each cycle. Dependencies include BABYLON.Vector3 and the expectation that the particle object supports custom fields like acceleration and heightLim.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npcs.recycleParticle = function(particle) {\n    particle.position = BABYLON.Vector3.Zero();\n    particle.velocity = BABYLON.Vector3.Zero();\n    particle.heightLim = 4 + 0.5 * Math.random();\n}\n\npcs.updateParticle = function(particle) {\n    if (particle.position.y > particle.heightLim) {\n      this.recycleParticle(particle);\n    }\n    particle.velocity.addInPlace(particle.acceleration);\n    particle.position.addInPlace(particle.velocity);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Path Helix Ribbon in JavaScript\nDESCRIPTION: Creates a helix-shaped path for a ribbon by generating Vector3 points in a spiral pattern using cosine and sine functions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_extra.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npathHelix = [];\nlet v;\nfor (let i = 0; i <= 60; i++) {\n  v = (2.0 * Math.PI * i) / 20;\n  pathHelix.push(new BABYLON.Vector3(3 * Math.cos(v), i / 4, 3 * Math.sin(v)));\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Dynamic Ragdoll Mode in Babylon.js (JavaScript)\nDESCRIPTION: Switches the ragdoll from its initial Kinematic mode to a fully dynamic physics simulation. Calling the `ragdoll()` method on the ragdoll instance makes the physics engine take control of the skeleton's movement based on collisions and constraints, rather than the animation. Call `dispose()` on the ragdoll instance to stop the simulation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/ragdolls.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nragdoll.ragdoll();\n```\n\n----------------------------------------\n\nTITLE: Defining the IGreasedLineMaterial Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the properties and methods available on GreasedLine materials (Standard, PBR, or Simple via GreasedLinePluginMaterial). It controls aspects like line visibility, base width, dashing, colors, size attenuation, resolution, and provides methods for setting colors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Interface which defines the available methods for a GreasedLineMaterial\n */\nexport interface IGreasedLineMaterial {\n  /**\n   * Normalized value of how much of the line will be visible\n   * 0 - 0% of the line will be visible\n   * 1 - 100% of the line will be visible\n   */\n  visibility: number;\n\n  /**\n   * Line base width. At each point the line width is calculated by widths[pointIndex] * width\n   */\n  width: number;\n\n  /**\n   * Turns on/off dash mode\n   */\n  useDash: boolean;\n\n  /**\n   * @see GreasedLinePluginMaterial.setDashCount\n   * Number of dashes in the line.\n   * Defaults to 1.\n   */\n  dashCount: number;\n\n  /**\n   * Dash offset\n   */\n  dashOffset: number;\n\n  /**\n   * Length of the dash. 0 to 1. 0.5 means half empty, half drawn.\n   */\n  dashRatio: number;\n\n  /**\n   * Whether to use the colors option to colorize the line\n   */\n  useColors: boolean;\n\n  /**\n   * The mixing mode of the color paramater. Default value is GreasedLineMeshColorMode.SET. MATERIAL_TYPE_SIMPLE supports only the default value/mode.\n   * @see GreasedLineMeshColorMode\n   */\n  colorMode: GreasedLineMeshColorMode;\n\n  /**\n   * Colors of the line segments.\n   * Defaults to empty.\n   */\n  colors: Nullable<Color3[]>;\n\n  /**\n   * If false then width units = scene units. If true then line will width be reduced.\n   * Defaults to false.\n   */\n  sizeAttenuation: boolean;\n\n  /**\n   * Color of the line. Applies to all line segments.\n   * Defaults to White.\n   * MATERIAL_TYPE_STANDARD and MATERIAL_TYPE_PBR material's shaders will get recompiled if there was no color set and you set a color or when there was a color set and you set it to null.\n   */\n  color: Nullable<Color3>;\n\n  /**\n   * The method used to distribute the colors along the line.\n   * You can use segment distribution when each segment will use on color from the color table.\n   * Or you can use line distribution when the colors are distributed evenly along the line ignoring the segments.\n   */\n  colorsDistributionType: GreasedLineMeshColorDistributionType;\n\n  /**\n   * Defaults to engine.getRenderWidth() and engine.getRenderHeight()\n   * Rendering resolution\n   */\n  resolution: Vector2;\n\n  /**\n   * Allows to change the color without marking the material dirty.\n   * MATERIAL_TYPE_STANDARD and MATERIAL_TYPE_PBR material's shaders will get recompiled if there was no color set and you set a color or when there was a color set and you set it to null. Use the flag to not to recompile immediately.\n   * @param value the color\n   * @param doNotMarkDirty the flag\n   */\n  setColor(value: Nullable<Color3>, doNotMarkDirty?: boolean): void;\n\n  /**\n   *\n   * @param colors colors array\n   * @param lazy if true the colors texture will not be updated\n   * @param forceNewTexture forces to create a new colors texture\n   */\n  setColors(colors: Nullable<Color3[]>, lazy: boolean, forceNewTexture?: boolean): void;\n\n  /**\n   * Creates and sets the colors texture from the colors array which was created in lazy mode\n   */\n  updateLazy(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Performance Counters in BabylonJS SceneInstrumentation\nDESCRIPTION: Code examples showing how to enable various performance counters in SceneInstrumentation. These counters measure different aspects of scene rendering including mesh evaluation, render time, draw calls, and physics simulation time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ninstrumentation.captureActiveMeshesEvaluationTime = true;\ninstrumentation.captureRenderTargetsRenderTime = true;\ninstrumentation.captureFrameTime = true;\ninstrumentation.captureRenderTime = true;\ninstrumentation.captureInterFrameTime = true;\ninstrumentation.captureParticlesRenderTime = true;\ninstrumentation.captureSpritesRenderTime = true;\ninstrumentation.capturePhysicsTime = true;\ninstrumentation.captureCameraRenderTime = true;\n```\n\n----------------------------------------\n\nTITLE: Loading a Scene with Old Path in Babylon.js TypeScript\nDESCRIPTION: This code snippet shows how to load a scene using the AppendSceneAsync function with a path to the old scene name. The rootUrl points to the old scene folder name that needs to be updated when renaming a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/workspace/renamingScene.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rootUrl = \"./scenes/oldName/\";\n\nAppendSceneAsync(rootUrl + \"scene.babylon\", this.scene, () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronized Sound Playback in Babylon.js\nDESCRIPTION: Shows how to synchronize multiple sounds to play simultaneously after they are all loaded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst music1 = new BABYLON.Sound(\"Violons11\", \"sounds/violons11.wav\", scene, soundReady, { loop: true });\nconst music2 = new BABYLON.Sound(\"Violons18\", \"sounds/violons18.wav\", scene, soundReady, { loop: true });\nconst music3 = new BABYLON.Sound(\"Cellolong\", \"sounds/cellolong.wav\", scene, soundReady, { loop: true });\n\nconst soundsReady = 0;\n\nfunction soundReady() {\n  soundsReady++;\n  if (soundsReady === 3) {\n    music1.play();\n    music2.play();\n    music3.play();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Babylon.js Attributes\nDESCRIPTION: A detailed table listing all available attributes for Babylon.js configuration, including their descriptions and possible options. The table covers engine settings, rendering behavior, visualization parameters, and environment configurations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/elementInterface.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                 | Description                                                                                                                                                                                                                                                                                                                                          | Options                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ||\n| `engine`                  | Which Babylon.js engine to use. Changing this value fully reloads the element.                                                                                                                                                                                                                                                                       | **`auto`**, `WebGL`, `WebGPU`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `render-when-idle`        | Indicates that the render loop should run unconditionally. By default, the render loop will be suspended when the visual output does not change frame to frame. This can significantly reduce the energy demand on battery constrained devices.                                                                                                      | Present or absent                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `clear-color`             | The color that fills the control before each frame is rendered.                                                                                                                                                                                                                                                                                      | Any valid CSS color string                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `source`                  | A url referencing the model source.                                                                                                                                                                                                                                                                                                                  | Any valid URL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `extension`               | Explicitly specifies the file extension (format) of the `source`. Use this attribute if the format cannot be determined from the url or the mime type.                                                                                                                                                                                               | Any extension supported by any [importer](/features/featuresDeepDive/importers/loadingFileTypes)                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `environment`             | A url referencing an [environment](/features/featuresDeepDive/materials/using/HDREnvironment). The environment is used for both image based lighting (IBL) and the skybox. This is effectively a shorthand for setting `environment-lighting` and `environment-skybox` to the same texture. Set to `auto` to explicitly use the default environment. | Any valid URL, `auto`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `environment-lighting`    | A url referencing an [environment](/features/featuresDeepDive/materials/using/HDREnvironment). The environment is used for image based lighting (IBL) only. If no environment is provided, and a model with PBR materials is loaded, a default environment will automatically be used. Set to `auto` to explicitly use the default environment.      | Any valid URL, `auto`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `environment-skybox`      | A url referencing an [environment](/features/featuresDeepDive/materials/using/HDREnvironment). The environment is used for the skybox only. Set to `auto` to explicitly use the default environment.                                                                                                                                                 | Any valid URL, `auto`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `environment-rotation`    | The environment rotation in radians.                                                                                                                                                                                                                                                                                                                 | Numeric value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Dash Mechanic Implementation\nDESCRIPTION: Implements air-dash mechanics with timing and single-use limitation until grounding.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt2.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet dashFactor = 1;\nif (this._dashPressed) {\n  if (this.dashTime > Player.DASH_TIME) {\n    this.dashTime = 0;\n    this._dashPressed = false;\n  } else {\n    dashFactor = Player.DASH_FACTOR;\n  }\n  this.dashTime++;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _updateOutputs Logic for a Custom Data Block (TypeScript)\nDESCRIPTION: Details the implementation of the `_updateOutputs` method for the custom `FlowGraphArrayIndexBlock`. This method is called when an output is requested. It retrieves values from input connections (`array`, `index`), performs the core logic (array element access using the index), includes validation (checking array existence and index bounds), and sets the result (or null on failure) on the output connection (`value`) using `setValue`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npublic override _updateOutputs(context: FlowGraphContext): void {\n    // get the array from the data input. If this is connected to another block, the other block's logic will be executed to get the array\n    const array = this.array.getValue(context);\n    // get the index from the data input.\n    const index = this.index.getValue(context).value; // this is a flow graph integer, this is why we have `.value`\n    if (array && index >= 0 && index < array.length) {\n        // now populate the output with the right value\n        this.value.setValue(array[index], context);\n    } else {\n        // optionally, we could also set it to null, because either the array is null or the index is out of bounds\n        // this is important because we don't have exception handling here. The execution node taking this value will be able to trigger an error if it is null\n        this.value.setValue(null, context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Lattice Instance - Babylon.js - JavaScript\nDESCRIPTION: Shows how to instantiate a lattice with specific size and position properties using configuration objects. Requires Babylon.js and its Vector3 class to specify lattice dimensions. Useful for matching the lattice to the mesh's object space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar lattice = new BABYLON.Lattice({ size: new BABYLON.Vector3(2, 2, 2), position: BABYLON.Vector3.Zero()});\n```\n\n----------------------------------------\n\nTITLE: Defining SubMesh Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Outlines the JSON format for a SubMesh, which represents a part of a mesh rendered with a specific material. It is defined by the material index and the start/count for vertices and indices within the parent mesh's data arrays.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"materialIndex\": int,\n    \"verticesStart\": int,\n    \"verticesCount\": int,\n    \"indexStart\": int,\n    \"indexCount\": int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FollowCamera Instance\nDESCRIPTION: Initializes a new FollowCamera with a name and starting position in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FollowCamera(\"FollowCam\", new BABYLON.Vector3(-6, 0, 0), scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing SPMap Structure\nDESCRIPTION: Demonstrates the basic structure of SPMap array for storing object data including position, rotation, and scaling information.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/addingDTObjects.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst SPMap = [];\nSPMap[0] = [dataHouse1, dataHouse2, ..., dataHouseN];\nSPMap[1] = [dataTree1, dataTree2, ..., dataTreeN];\n...\nSPMap[t] = [dataObject1, dataObject2, ..., dataObjectN];\n```\n\n----------------------------------------\n\nTITLE: Translating Bones in Babylon.js\nDESCRIPTION: Demonstrates how to translate a bone from its current position using the translate method. It takes x, y, z coordinates, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbone.translate(x, y, z, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Accessing WebXR Features from XRService\nDESCRIPTION: Example showing how to extract a specific feature environment (such as hand tracking) from the XRService. Each feature wrapper provides access to the native XR features of BabylonJS.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/webxrextension.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst handTrackingFeatureEnv = xrService.extractFeatureEnv('HAND_TRACKING');\nif(handTrackingFeatureEnv){\n    // interract with feature wrapper\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Screen Coverage-Based LOD in Babylon.js\nDESCRIPTION: This snippet shows how to switch from distance-based LOD to screen coverage-based LOD. Screen coverage is calculated as a ratio between the mesh's rendered screen area and the total screen area.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/LOD.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nknot00.useLODScreenCoverage = true;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scene in Babylon.js with Typescript\nDESCRIPTION: This code snippet demonstrates how to create a basic 3D scene using Babylon.js in Typescript. It sets up a scene with a camera, light, sphere, and ground. The scene includes a free camera, hemispheric light, and uses MeshBuilder to create basic shapes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/templates/basicTemplates/basicTSPG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Playground {\n    public static CreateScene(engine: BABYLON.Engine, canvas: HTMLCanvasElement): BABYLON.Scene {\n        // This creates a basic Babylon Scene object (non-mesh)\n        const scene = new BABYLON.Scene(engine);\n        // This creates and positions a free camera (non-mesh)\n        const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n        // This targets the camera to scene origin\n        camera.setTarget(BABYLON.Vector3.Zero());\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n        // Our built-in 'sphere' shape. Params: name, options, scene\n        const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\n        // Move the sphere upward 1/2 its height\n        sphere.position.y = 1;\n        // Our built-in 'ground' shape. Params: name, options, scene\n        const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width: 6, height: 6}, scene);\n        return scene;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing and Enabling Animation Sheet for ParticleSystem - Babylon.js JavaScript\nDESCRIPTION: Demonstrates how to initialize a Babylon.js ParticleSystem with texture animation support enabled by setting isAnimationSheetEnabled to true either during construction (by passing it as the fourth parameter) or by assigning it post-construction. This setup is required for animating particle textures with a spritesheet. All prerequisites from Babylon.js must be loaded, including access to the BABYLON namespace, and a valid scene and particle capacity must be provided.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/animation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem = new BABYLON.ParticleSystem(\"particles\", capacity, scene, null, true); // on construction\n\n\nparticleSystem = new BABYLON.ParticleSystem(\"particles\", capacity)\nparticleSystem.isAnimationSheetEnabled = true; //after construction\n```\n\n----------------------------------------\n\nTITLE: Configuring Blur Intensity for GlowLayer in Babylon.js\nDESCRIPTION: Customizes the GlowLayer's blur effect by setting specific creation options. This includes fixing the texture size and adjusting the blur kernel size for consistent glow across different device sizes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/glowLayer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new BABYLON.GlowLayer(\"glow\", scene, {\n  mainTextureFixedSize: 1024,\n  blurKernelSize: 64\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Bounding Info with GPU in Babylon.js\nDESCRIPTION: Demonstrates using the BoundingInfoHelper class to compute complex meshes' bounding info using the GPU (WebGL2 Transform Feedbacks or WebGPU Compute Shaders). This provides better performance for complex meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar bbHelper = new BABYLON.BoundingInfoHelper(engine);\nawait bbHelper.computeAsync(scene.meshes);\n```\n\n----------------------------------------\n\nTITLE: Setting Lambda Parameter for Cascade Splitting in Babylon.js JavaScript\nDESCRIPTION: Adjusts the 'lambda' parameter, blending linear and logarithmic splits for camera frustum cascades (0 for linear, 1 for logarithmic, or a blend). Value affects how shadow detail is distributed across the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.lambda = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Initializing Icosahedron Base Data Structure in JavaScript\nDESCRIPTION: Defines the IDATA constant, establishing the vertex positions and triangular face indices for a regular icosahedron, with vertices parameterized by the golden ratio 'PHI' and mathematically accurate coordinates for Babylon.js or mathematical processing. Intended for use as a geometry template for mapping subdivisions onto icosahedron faces. The array structure is static; input is not required and output is the data object itself. Limitation: Assumes external constants PHI and that consuming code manages geometry construction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst IDATA = { \n    \"name\":\"icosahedron\", \n    \"category\":[\"Regular\"], \n    \"vertex\":[ [0, PHI, -1], [-PHI, 1, 0], [-1, 0, -PHI], [1, 0, -PHI], [PHI, 1, 0], [0, PHI, 1], [-1, 0, PHI], [-PHI, -1, 0], [0, -PHI, -1], [PHI, -1, 0], [1, 0, PHI], [0, -PHI, 1]],\n    \"face\":[\n        [ 0, 2, 1 ], [ 0, 3, 2 ], [ 0, 4, 3 ], [ 0, 5, 4 ], [ 0, 1, 5 ],\n        [ 7, 6, 1 ],[ 8, 7, 2 ], [ 9, 8, 3 ], [ 10, 9, 4 ], [ 6, 10, 5 ],\n        [ 2, 7, 1 ], [ 3, 8, 2 ],[ 4, 9, 3 ], [ 5, 10, 4 ], [ 1, 6, 5 ],\n        [ 11, 6, 7 ], [ 11, 7, 8 ], [ 11, 8, 9 ], [ 11, 9, 10 ], [ 11, 10, 6 ]\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Digital Rain Post Process in JavaScript\nDESCRIPTION: This code demonstrates how to create a Digital Rain Post Process and attach it to the main camera in a Babylon.js scene. It's the basic setup for applying the effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/digitalRainPP.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.DigitalRainPostProcess(\"DigitalRain\", camera);\n```\n\n----------------------------------------\n\nTITLE: Creating Capsule with Mesh Class in Babylon.js\nDESCRIPTION: Creates a capsule mesh using the BABYLON.Mesh.CreateCapsule method. Uses the same options as MeshBuilder approach for customizing the capsule's properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/capsule.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst capsule = BABYLON.Mesh.CreateCapsule(\"ribbon\", options, scene);  //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Rotation as Vector3 with Reference in Babylon.js\nDESCRIPTION: Shows how to get the rotation of a bone as a Vector3 using the getRotationToRef method. It takes space (world or local), mesh, and a reference Vector3 as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst rotation = BABYLON.Vector3.Zero();\n\nbone.getRotationToRef(BABYLON.Space.WORLD, mesh, rotation);\n```\n\n----------------------------------------\n\nTITLE: Setting Previous Matrix Buffer for Motion Blur\nDESCRIPTION: Shows how to manually specify previous frame matrices for thin instances when using motion blur. This is necessary when changing the world matrix buffer layout to prevent visual artifacts.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.thinInstanceSetBuffer(\"previousMatrix\", instancedPreviousBuffer, 16);\n```\n\n----------------------------------------\n\nTITLE: Removing Particle Drag Gradient Point in Babylon.js\nDESCRIPTION: Shows how to use `removeDragGradient` to remove a specific gradient point previously added for particle drag. The argument specifies the time fraction (e.g., 0.4) of the gradient point to remove.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeDragGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Configuring UFO Sprite Animation\nDESCRIPTION: Creates and configures an animated UFO sprite. Sets animation parameters including frame range, looping behavior, and frame duration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/trees.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ufo = new BABYLON.Sprite(\"ufo\", spriteManagerUFO);\nufo.playAnimation(0, 16, true, 125);\n```\n\n----------------------------------------\n\nTITLE: EmitMessage Method Implementation\nDESCRIPTION: Implementation of the emitMessage method that sends a message from the BabylonJS scene back to Vue. This allows the scene to notify Vue components about events or state changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nemitMessage(type: string, payload?: any): void {\n  // Implementation not fully shown in the image\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching an Anchor to a Mesh - JavaScript\nDESCRIPTION: Illustrates how to attach a mesh to an anchor by assigning the mesh to the anchor's attachedNode property in the observable callback. Ensures the mesh is updated in world space as the anchor moves/updates in the AR scene. The implementation relies on the anchor's observable event when added.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = anchorSystem.onAnchorAddedObservable.add((anchor) => {\\n  //...\\n  anchor.attachedNode = mesh;\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Depth Peeling Renderer for Order Independent Transparency in Babylon.js\nDESCRIPTION: Enable render passes for the depth peeling renderer to improve performance when using order independent transparency.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.depthPeelingRenderer.useRenderPasses = true;\n```\n\n----------------------------------------\n\nTITLE: Loading and Positioning the Bowling Ball Mesh in Babylon.js (JavaScript)\nDESCRIPTION: This asynchronous function `createBall` loads a bowling ball mesh from the specified asset path using `BABYLON.ImportMeshAsync`. It then scales the loaded mesh (`result.meshes[1]`) down by a factor of 0.2 and positions it at coordinates (0, 0.5, -5) in the scene. Requires the Babylon.js library, an `Assets` object containing mesh paths, and a `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createBall(scene) {\n  const result = await BABYLON.ImportMeshAsync(Assets.meshes.bowlingBall_glb.rootUrl + Assets.meshes.bowlingBall_glb.filename, scene);\n  const bowlingBall = result.meshes[1];\n  bowlingBall.scaling.scaleInPlace(0.2);\n  bowlingBall.position = new BABYLON.Vector3(0, 0.5, -5);\n}\n\ncreateBall(scene);\n```\n\n----------------------------------------\n\nTITLE: Defining Roof Apex Coordinates in JavaScript\nDESCRIPTION: This snippet defines an array `roofApexData` containing the 2D coordinate pairs (x, z) for the roof's apex points (highest points). These coordinates are derived from a scaled plan diagram of the roof layout.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar roofApexData = [0, -2,  0, -0.5,  0, 2,  4.5, -0.5];\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup H in Babylon.js Physics\nDESCRIPTION: Parameter setup with main pivot offset on X-axis while the connected pivot is at the origin. This demonstrates positioning of the main body relative to the connected axle with aligned Y-axes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(5, 0, 0),\nconnectedPivot: new BABYLON.Vector3(0, 0, 0), \nmainAxis: new BABYLON.Vector3(0, 1, 0),\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Angular Speed Gradient Over Lifetime (Value Ranges) in Babylon.js\nDESCRIPTION: Demonstrates using `addAngularSpeedGradient` with three arguments to define a range for the angular speed at different points in the particle's lifetime. The actual angular speed will be randomly chosen within the specified range at each time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addAngularSpeedGradient(0, 0.5, 0.8); //angular speed range at start of particle lifetime\nparticleSystem.addAngularSpeedGradient(0.4, 1, 2); //angular speed range at 2/5 of duration of particle system\nparticleSystem.addAngularSpeedGradient(1.0, 3, 4); //angular speed range at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Emission Rate in BabylonJS\nDESCRIPTION: Defines how many particles are emitted per second.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.emitRate = 1500;\n```\n\n----------------------------------------\n\nTITLE: Setting Initial XR Camera Pose in JavaScript\nDESCRIPTION: Demonstrates how to use the onInitialXRPoseSetObservable to adjust the initial camera position in XR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nxrBasicHelper.onInitialXRPoseSetObservable.add((xrCamera) => {\n    // floor is at y === 2\n    xrCamera.position.y = 2;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Occlusion Retry Count and Type in Babylon.js (JavaScript)\nDESCRIPTION: This advanced example fine-tunes occlusion query behavior by specifying how many frames the mesh should wait for an occlusion result via the occlusionRetryCount property. It also sets the occlusionType to strict, causing the mesh to retain its last known visible state if the query times out. This is useful for performance-critical meshes or managing rendering consistency. The snippet builds on mesh setup steps and requires Babylon.js and the occlusion query dependencies. Inputs are the number of retry frames and one of the defined occlusion type constants.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/occlusionQueries.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.occlusionRetryCount = 10;\nsphere.occlusionType = BABYLON.AbstractMesh.OCCLUSION_TYPE_STRICT;\n```\n\n----------------------------------------\n\nTITLE: Initiating Particle System JSON File Loading with AssetsManager in JavaScript\nDESCRIPTION: Demonstrates how to use `BABYLON.AssetsManager` to create and add a `TextFileAssetTask` for loading a particle system definition from a '.json' file. The `load()` method is called to start the asynchronous loading process. Requires an instance of the current `scene`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_loadFromFile.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst assetsManager = new BABYLON.AssetsManager(scene);\nconst particleFile = assetsManager.addTextFileTask(\"my particle system\", \"particleSystem.json\");\n\n// load all tasks\nassetsManager.load();\n\n\n```\n```\n\n----------------------------------------\n\nTITLE: Using a Texture to Control Iridescence Thickness Directly in Babylon.js\nDESCRIPTION: This JavaScript code shows how to use a separate texture to directly control the iridescence thickness on a Babylon.js PBR material. After enabling iridescence, a `thicknessTexture` is assigned to `iridescence.thicknessTexture`. The texture's G channel value is read as a percentage to interpolate between the material's `minimumThickness` and `maximumThickness`, providing precise spatial control over the effect. Requires `BABYLON.PBRMaterial` and a `BABYLON.Texture` instance (`thicknessTexture`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.albedoColor = new BABYLON.Color3(0.1, 0.1, 0.1);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.iridescence.isEnabled = true;\npbr.iridescence.thicknessTexture = thicknessTexture;\n```\n\n----------------------------------------\n\nTITLE: Instantiating a ScrollViewer for Image Scrollbars in JavaScript\nDESCRIPTION: Shows the specific constructor syntax required to enable image-based scrollbars for a `ScrollViewer`. Passing `true` as the second argument unlocks properties like `thumbImage` and `barImage` for customizing the scrollbar appearance with images. Requires `BABYLON.GUI.ScrollViewer`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/scrollViewer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myScrollViewer = new BABYLON.GUI.ScrollViewer(\"\", true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Movement Controls in TypeScript\nDESCRIPTION: Code for handling player movement based on pointer input, including position constraints and server communication.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nscene.onPointerDown = function (event, pointer) {\n  if (event.button == 0) {\n    const targetPosition = pointer.pickedPoint.clone();\n\n    // Position adjustments for the current play ground.\n    // Prevent spheres from moving all around the screen other than on the ground mesh.\n    targetPosition.y = -1;\n    if (targetPosition.x > 245) targetPosition.x = 245;\n    else if (targetPosition.x < -245) targetPosition.x = -245;\n    if (targetPosition.z > 245) targetPosition.z = 245;\n    else if (targetPosition.z < -245) targetPosition.z = -245;\n\n    // Send position update to the server\n    room.send(\"updatePosition\", {\n      x: targetPosition.x,\n      y: targetPosition.y,\n      z: targetPosition.z,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Managing Fluid Renderer GUI in JavaScript with lil-gui\nDESCRIPTION: Implements a class, FluidRendererGUI, that creates and manages a lil-gui instance to control fluid renderer parameters in a Babylon.js scene. Includes methods for showing/hiding the GUI, initializing controls, disposing resources, dynamically creating menu folders and controls (sliders, checkboxes, lists, colors), and handling keyboard toggling (F8). Depends on Babylon.js, lil-gui, and an existing scene; parameters are mapped to GUI controls, which in turn propagate changes to the rendering engine. Inputs: related Babylon.js scene and configuration flags; Outputs: DOM-based interactive GUI. Key features: modular menu construction, keyboard event handling, and runtime dependency loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst domElementName = \"fluidRendererGUI\";\n\n/**\n * A simple GUI to easily interact with the fluid renderer\n */\nclass FluidRendererGUI {\n    _gui;\n    _visible;\n    _scene;\n    _showGeneralMenu;\n    _onKeyObserver;\n    _targetRendererIndex;\n    _targetRenderersGUIElements;\n    _renderObjectIndex;\n    _renderObjectsGUIElements;\n\n    /**\n     * Shows or hides the GUI\n     */\n    get visible() {\n        return this._visible;\n    }\n\n    set visible(v) {\n        if (v === this._visible) {\n            return;\n        }\n        this._visible = v;\n        if (this._gui) {\n            this._gui.domElement.style.display = v ? \"\" : \"none\";\n        }\n    }\n\n    /**\n     * Initializes the class\n     * @param scene Scene from which the fluid renderer should be retrieved\n     * @param showGeneralMenu True to show the general menu, false to hide it (default: true)\n     */\n    constructor(scene, showGeneralMenu = true) {\n        this._scene = scene;\n        this._showGeneralMenu = showGeneralMenu;\n        this._visible = true;\n        this._onKeyObserver = null;\n        this._targetRendererIndex = 0;\n        this._targetRenderersGUIElements = [];\n        this._renderObjectIndex = 0;\n        this._renderObjectsGUIElements = [];\n        this._gui = null;\n\n        this._initialize();\n    }\n\n    /**\n     * Disposes of all the ressources used by the class\n     */\n    dispose() {\n        const oldgui = document.getElementById(domElementName);\n        if (oldgui !== null) {\n            oldgui.remove();\n            this._gui = null;\n        }\n        this._scene.onKeyboardObservable.remove(this._onKeyObserver);\n        this._onKeyObserver = null;\n    }\n\n    _setupKeyboard() {\n        this._onKeyObserver = this._scene.onKeyboardObservable.add((kbInfo) => {\n            switch (kbInfo.type) {\n                case BABYLON.KeyboardEventTypes.KEYUP:\n                    switch (kbInfo.event.key) {\n                        case \"F8\": {\n                            this.visible = !this._visible;\n                            break;\n                        }\n                    }\n                    break;\n            }\n        });\n    }\n\n    async _initialize() {\n        this.dispose();\n\n        if (typeof lil === \"undefined\") {\n            await LoadLiLGUI();\n        }\n\n        this._gui = new lil.GUI({ title: \"Fluid Rendering\" });\n        this._gui.domElement.style.marginTop = \"60px\";\n        this._gui.domElement.id = domElementName;\n\n        this._setupKeyboard();\n\n        if (this._showGeneralMenu) {\n            this._makeMenuGeneral();\n        }\n        this._makeMenuTargetRenderers();\n        this._makeMenuRenderObjects();\n    }\n\n    _addList(menu, params, name, friendlyName, list) {\n        return menu\n            .add(params, name, list)\n            .name(friendlyName)\n            .onChange((value) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    _addCheckbox(menu, params, name, friendlyName) {\n        return menu\n            .add(params, name)\n            .name(friendlyName)\n            .onChange((value) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    _addSlider(menu, params, name, friendlyName, min, max, step) {\n        return menu\n            .add(params, name, min, max, step)\n            .name(friendlyName)\n            .onChange((value) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    _addColor(menu, params, name, friendlyName) {\n        return menu\n            .addColor(params, name)\n            .name(friendlyName)\n            .onChange((value) => {\n                this._parameterChanged(name, value);\n            });\n    }\n\n    _makeMenuGeneral() {\n        if (!this._gui) {\n            return;\n        }\n\n        const params = {\n            enable: this._parameterRead(\"enable\"),\n        };\n\n        const general = this._gui.addFolder(\"General\");\n\n        general.$title.style.fontWeight = \"bold\";\n\n        this._addCheckbox(general, params, \"enable\", \"Enable fluid renderer\");\n\n        general.open();\n    }\n\n    _makeMenuTargetRenderers() {\n        if (!this._gui || !(this._scene.fluidRenderer?.targetRenderers.length ?? 0)) {\n            return;\n        }\n\n        const params = {\n            targets_index: this._parameterRead(\"targets_index\"),\n            targets_generateDiffuseTexture: this._parameterRead(\"targets_generateDiffuseTexture\"),\n            targets_fluidColor: this._parameterRead(\"targets_fluidColor\"),\n            targets_density: this._parameterRead(\"targets_density\"),\n            targets_refractionStrength: this._parameterRead(\"targets_refractionStrength\"),\n            targets_fresnelClamp: this._parameterRead(\"targets_fresnelClamp\"),\n            targets_specularPower: this._parameterRead(\"targets_specularPower\"),\n            targets_minimumThickness: this._parameterRead(\"targets_minimumThickness\"),\n            targets_debug: this._parameterRead(\"targets_debug\"),\n            targets_debugFeature: this._parameterRead(\"targets_debugFeature\"),\n            targets_enableBlurDepth: this._parameterRead(\"targets_enableBlurDepth\"),\n            targets_blurDepthSizeDivisor: this._parameterRead(\"targets_blurDepthSizeDivisor\"),\n            targets_blurDepthFilterSize: this._parameterRead(\"targets_blurDepthFilterSize\"),\n            targets_blurDepthNumIterations: this._parameterRead(\"targets_blurDepthNumIterations\"),\n            targets_blurDepthMaxFilterSize: this._parameterRead(\"targets_blurDepthMaxFilterSize\"),\n            targets_blurDepthDepthScale: this._parameterRead(\"targets_blurDepthDepthScale\"),\n            targets_enableBlurThickness: this._parameterRead(\"targets_enableBlurThickness\"),\n            targets_blurThicknessSizeDivisor: this._parameterRead(\"targets_blurThicknessSizeDivisor\"),\n            targets_blurThicknessFilterSize: this._parameterRead(\"targets_blurThicknessFilterSize\"),\n            targets_blurThicknessNumIterations: this._parameterRead(\"targets_blurThicknessNumIterations\"),\n            targets_depthMapSize: this._parameterRead(\"targets_depthMapSize\"),\n            targets_thicknessMapSize: this._parameterRead(\"targets_thicknessMapSize\"),\n            targets_diffuseMapSize: this._parameterRead(\"targets_diffuseMapSize\"),\n            targets_useVelocity: this._parameterRead(\"targets_useVelocity\"),\n            targets_useFixedThickness: this._parameterRead(\"targets_useFixedThickness\"),\n        };\n\n        const targetRenderers = this._gui.addFolder(\"Target renderers\");\n        targetRenderers.$title.style.fontWeight = \"bold\";\n\n        const targetList = [];\n        if (this._scene.fluidRenderer) {\n            for (let i = 0; i < this._scene.fluidRenderer.targetRenderers.length; ++i) {\n                targetList.push(i);\n            }\n        }\n\n        this._addList(targetRenderers, params, \"targets_index\", \"Index\", targetList);\n        this._targetRenderersGUIElements.push(this._addList(targetRenderers, params, \"targets_depthMapSize\", \"Depth map size\", [\"Screen size\", 256, 512, 1024, 2048, 4096]));\n        this._targetRenderersGUIElements.push(\n            this._addList(targetRenderers, params, \"targets_thicknessMapSize\", \"Thickness map size\", [\"Screen size\", 64, 128, 256, 512, 1024, 2048])\n        );\n        this._targetRenderersGUIElements.push(this._addList(targetRenderers, params, \"targets_diffuseMapSize\", \"Diffuse map size\", [\"Screen size\", 256, 512, 1024, 2048, 4096]));\n        this._targetRenderersGUIElements.push(this._addSlider(targetRenderers, params, \"targets_minimumThickness\", \"Minimum thickness\", 0, 3, 0.001));\n        this._targetRenderersGUIElements.push(this._addCheckbox(targetRenderers, params, \"targets_useFixedThickness\", \"Use fixed thickness\"));\n        this._targetRenderersGUIElements.push(this._addCheckbox(targetRenderers, params, \"targets_useVelocity\", \"Use velocity\"));\n\n        const menuColor = targetRenderers.addFolder(\"Color\");\n        menuColor.$title.style.fontStyle = \"italic\";\n\n        this._targetRenderersGUIElements.push(this._addCheckbox(menuColor, params, \"targets_generateDiffuseTexture\", \"Generate diffuse texture\"));\n        this._targetRenderersGUIElements.push(this._addColor(menuColor, params, \"targets_fluidColor\", \"Fluid color\"));\n        this._targetRenderersGUIElements.push(this._addSlider(menuColor, params, \"targets_density\", \"Density\", 0, 20, 0.01));\n        this._targetRenderersGUIElements.push(this._addSlider(menuColor, params, \"targets_refractionStrength\", \"Refraction strength\", 0, 0.3, 0.005));\n        this._targetRenderersGUIElements.push(this._addSlider(menuColor, params, \"targets_fresnelClamp\", \"Fresnel clamp\", 0, 1.0, 0.005));\n        this._targetRenderersGUIElements.push(this._addSlider(menuColor, params, \"targets_specularPower\", \"Specular power\", 1, 5000, 5));\n\n        const menuBlurDepth = targetRenderers.addFolder(\"Blur Depth\");\n        menuBlurDepth.$title.style.fontStyle = \"italic\";\n\n        this._targetRenderersGUIElements.push(this._addCheckbox(menuBlurDepth, params, \"targets_enableBlurDepth\", \"Enable\"));\n        this._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthSizeDivisor\", \"Size divisor\", 1, 10, 1));\n        this._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthFilterSize\", \"Filter size\", 1, 20, 1));\n        this._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthNumIterations\", \"Num iterations\", 1, 10, 1));\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Joint Meshes in WebXR Hand Tracking\nDESCRIPTION: Illustrates how to customize individual joint meshes in WebXR hand tracking using a callback function. This allows for per-joint customization like applying different materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  jointMeshes: {\n    disableDefaultHandMesh: true,\n    onHandJointMeshGenerated: (instance) => {\n      // do whatever you want with the instance\n      return instance; // you can return a whole new mesh or the instance itself. If the instance is not returned, babylon will dispose the unused instance for you.\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using onTaskErrorObservable with AssetsManager (JavaScript)\nDESCRIPTION: Registers an observer for task errors using the manager's onTaskErrorObservable. The provided function logs the error message and exception when a task fails. Useful for centralized error handling across all asset tasks. Requires an existing AssetsManager instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nassetsManager.onTaskErrorObservable.add(function (task) {\n  console.log(\"task failed\", task.errorObject.message, task.errorObject.exception);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the PCS vars Property for Temporary Variables in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to leverage the PCS.vars property to store reusable, system-scoped variables, like temporary vectors. These variables persist for the PCS lifecycle and are cleaned up upon disposal, preventing memory leaks. Requires that the PCS instance exists and that BABYLON.Vector3 is available from Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\npcs.vars.tempVector = new BABYLON.Vector3(0, 0, 0);\\n// ...\\npcs.dispose(); // cleans explicitly all your PCS.vars !\n```\n\n----------------------------------------\n\nTITLE: Using CastorGUI Database Operations\nDESCRIPTION: Shows how to use the built-in database functionality for storing and managing data using localStorage or sessionStorage. Includes CRUD operations examples.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet db = new DataBase(false); // true if use sessionStorage else use localStorage (stockage temporary)\ndb.addTable(\"user\"); // create table\ndb.createField(\"user\", \"member\", { pseudo: \"dad72\" }); // create field\n\ndb.selectItem(\"user\", \"member\", \"pseudo\"); // return dad72\ndb.updateItem(\"user\", \"member\", \"pseudo\", \"Romeo\"); // update pseudo\ndb.selectItem(\"user\", \"member\", \"pseudo\"); // return Romeo\n\n//if delete table:\ndb.deleteTable(\"member\");\n// if delete database:\ndb.deleteDataBase();\n```\n\n----------------------------------------\n\nTITLE: Enabling Bouncing Behavior for ArcRotateCamera in BabylonJS\nDESCRIPTION: Enables the bouncing behavior on an ArcRotateCamera to produce a small bouncing effect when reaching radius limits. The behavior can be configured with transition duration and radius range properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/cameraBehaviors.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.useBouncingBehavior = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirror Reflection\nDESCRIPTION: Shows how to set up a mirror reflection texture for background material\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmirror = new BABYLON.MirrorTexture(\"mirror\", 512, scene);\nmirror.mirrorPlane = new BABYLON.Plane(0, -1, 0, 0);\nmirror.renderList.push(sphere);\n\nbackgroundMaterial.reflectionTexture = mirror;\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Preview Versions - Bash\nDESCRIPTION: This command installs the latest preview versions of Babylon.js, loaders, and GUI components. Useful for testing upcoming/unreleased features or bug fixes. Run via npm in your project directory when you want to use preview packages instead of stable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs@preview babylonjs-loaders@preview babylonjs-gui@preview\n```\n\n----------------------------------------\n\nTITLE: Attaching Camera Controls in BabylonJS\nDESCRIPTION: Attaches camera controls to the canvas to enable user input and interaction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/camera.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Orbit in Babylon.js Viewer\nDESCRIPTION: Example showing how to adjust the camera's position using the camera-orbit attribute with the Babylon.js Viewer. The attribute takes three parameters (alpha, beta, radius) and allows 'auto' for default values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/viewer2.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ncamera-orbit=\"auto auto 15\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshot of Babylon.js Scene with Puppeteer\nDESCRIPTION: This snippet demonstrates how to take a screenshot of the rendered Babylon.js scene and save it as an image file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderRemoteScreenshot.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait page.screenshot({path: './public/example.png'});\n```\n\n----------------------------------------\n\nTITLE: SSR Reflection Calculation Formula\nDESCRIPTION: Formula showing how reflection multiplier is calculated using strength and falloff exponent parameters, and how it's applied to compute the final color in SSR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreflectionMultiplier = pow(reflectivity * strength, reflectionSpecularFalloffExponent);\nfinalColor = color * (1 - reflectionMultiplier) + reflectionMultiplier * SSR;\n```\n\n----------------------------------------\n\nTITLE: Linear Velocity Controls\nDESCRIPTION: Methods to get and set linear velocity of physics objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimpostor.getLinearVelocity();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimpostor.setLinearVelocity(new BABYLON.Vector3(0,1,0));\n```\n\n----------------------------------------\n\nTITLE: Creating a Path for the Car in Babylon.js\nDESCRIPTION: This code generates a path for the car to follow by creating an irregular circle of points. It uses sine functions to add variations to the radius, creating a more interesting path. A ground plane is also added to the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = [];\nvar n = 50; // number of points - more points the slower the car\nvar r = 50; //radius\nfor (let i = 0; i < n + 1; i++) {\n  points.push(new BABYLON.Vector3((r + (r / 5) * Math.sin((8 * i * Math.PI) / n)) * Math.cos((2 * i * Math.PI) / n), 0, (r + (r / 10) * Math.sin((6 * i * Math.PI) / n)) * Math.sin((2 * i * Math.PI) / n)));\n}\n\nvar track = BABYLON.MeshBuilder.CreateLines(\"track\", { points: points }, scene);\ntrack.color = new BABYLON.Color3(0, 0, 0);\n\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 3 * r, height: 3 * r }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating and Positioning a Bowling Lane with Physics\nDESCRIPTION: Creates a ground mesh to serve as the bowling lane and positions it in the scene. Adds physics to the lane using PhysicsAggregate with zero mass to prevent it from falling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lane = BABYLON.MeshBuilder.CreateGround(\"lane\", { width: 6, height: 20 }, scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlane.position = new BABYLON.Vector3(0, 0, 4);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst laneAggregate = new BABYLON.PhysicsAggregate(lane, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Flow Graph in Babylon.js\nDESCRIPTION: Demonstrates how to create a new flow graph using the coordinator object in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = coordinator.createGraph();\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Reflection to PBR Material in Babylon.js\nDESCRIPTION: This snippet adds an environment texture to a PBR material to provide reflections. It loads a pre-filtered environment map for accurate lighting reflections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npbr.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\"/textures/environment.dds\", scene);\n```\n\n----------------------------------------\n\nTITLE: Updating a Ribbon Mesh using CreateRibbon in Babylon.js\nDESCRIPTION: This snippet demonstrates updating an existing ribbon mesh (`mesh`) with modified path data (`pathArray`). It calls `BABYLON.Mesh.CreateRibbon` again, passing `null` for most parameters except the `pathArray` and providing the existing `mesh` object as the last parameter. This triggers an update of the mesh's vertices based on the new `pathArray` data. The function returns the updated mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh = BABYLON.Mesh.CreateRibbon(null, pathArray, null, null, null, null, null, null, mesh);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mesh Rotation Around a Pivot Point in Babylon.js\nDESCRIPTION: Extends the Babylon.js Mesh prototype to add a rotateAroundPivot method that allows rotating a mesh around any arbitrary point in 3D space. It handles both euler angles and quaternion rotations, calculating the new position and rotation using quaternion mathematics.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Pivot.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.prototype.rotateAroundPivot = function(pivotPoint, axis, angle) {\n\tif(!this._rotationQuaternion) {\n\t\tthis._rq = BABYLON.Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\n\t}\n\telse this._rq = this.rotationQuaternion\t\t\n\tvar _p = new BABYLON.Quaternion(this.position.x - pivotPoint.x, this.position.y - pivotPoint.y, this.position.z - pivotPoint.z, 0);\n\taxis.normalize();\n\tvar _q = BABYLON.Quaternion.RotationAxis(axis,angle);  //form quaternion rotation\t\t\n\tvar _qinv = BABYLON.Quaternion.Inverse(_q);\t\n\tvar _pdash = _q.multiply(_p).multiply(_qinv);\n\tthis.position = new BABYLON.Vector3(pivotPoint.x + _pdash.x, pivotPoint.y + _pdash.y, pivotPoint.z + _pdash.z);\n\tthis.rotationQuaternion = _q.multiply(this._rq);\n}\n\nmesh.rotateAroundPivot(new BABYLON.Vector3(1, 2, -1), new BABYLON.Axis.Y, Math.PI/4);\n```\n\n----------------------------------------\n\nTITLE: Loading and Cloning Meshes with Skeletons in Babylon.js\nDESCRIPTION: Shows how to load a mesh with a skeleton and create multiple clones with different animations. Each clone gets its own skeleton instance with independent animation sequences.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"Scenes/Rabbit/Rabbit.babylon\", scene, { meshNames: \"Rabbit\" }).then(function (result) {\n  const rabbit = result.meshes[1];\n\n  rabbit.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4);\n  shadowGenerator.getShadowMap().renderList.push(rabbit);\n\n  const rabbit2 = rabbit.clone(\"rabbit2\");\n  const rabbit3 = rabbit.clone(\"rabbit2\");\n\n  rabbit2.position = new BABYLON.Vector3(-50, 0, -20);\n  rabbit2.skeleton = rabbit.skeleton.clone(\"clonedSkeleton\");\n\n  rabbit3.position = new BABYLON.Vector3(50, 0, -20);\n  rabbit3.skeleton = rabbit.skeleton.clone(\"clonedSkeleton2\");\n\n  scene.beginAnimation(result.skeletons[0], 0, 100, true, 0.8);\n  scene.beginAnimation(rabbit2.skeleton, 73, 100, true, 0.8);\n  scene.beginAnimation(rabbit3.skeleton, 0, 72, true, 0.8);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Hand Object by Handedness in WebXR with BabylonJS\nDESCRIPTION: Demonstrates how to enable hand tracking and retrieve a specific hand object by its handedness (left or right). This approach provides direct access to a specific hand based on its side.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHandFeature = featureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n});\n\n// after the controllers were initialized\nconst rightHand = xrHandFeature.getHandByHandedness(\"right\");\n```\n\n----------------------------------------\n\nTITLE: Calculating Inverse Square Light Falloff in GLSL (Conceptual)\nDESCRIPTION: This GLSL-like snippet illustrates the calculation used internally by Babylon.js PBR materials for inverse square light falloff. It shows that the light falloff is calculated as 1.0 divided by the squared distance to the light source (plus a small epsilon to avoid division by zero). This models how light intensity decreases realistically with distance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfloat lightDistanceFalloff = 1.0 / ((lightDistanceSquared + 0.0001));\nreturn lightDistanceFalloff;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Car Movement Animation in Babylon.js\nDESCRIPTION: Creates a cyclic animation for a car object that moves along the x-axis over 5 seconds, stops for 2 seconds, and repeats. The animation uses keyframes to define the car's position at specific points in time, with a total duration of 210 frames at 30 FPS.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/caranimation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst animCar = new BABYLON.Animation(\"carAnimation\", \"position.x\", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n\nconst carKeys = []; \n\ncarKeys.push({\n    frame: 0,\n    value: -4\n});\n\ncarKeys.push({\n    frame: 150,\n    value: 4\n});\n\ncarKeys.push({\n    frame: 210,\n    value: 4\n});\n\nanimCar.setKeys(carKeys);\n\ncar.animations = [];\ncar.animations.push(animCar);\n\nscene.beginAnimation(car, 0, 210, true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Facet Position in Babylon.js\nDESCRIPTION: These snippets demonstrate how to get the world position of a specific facet, with and without allocating a new Vector3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pos = mesh.getFacetPosition(50); // returns the world position of the mesh 50th facet\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pos = BABYLON.Vector3.Zero();\nmesh.getFacetPositionToRef(50, pos); // stores the facet world position in the variable \"pos\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Background Remover for Skybox Only - JavaScript\nDESCRIPTION: Enables the background remover feature so only the skybox is removed, but not the ground, when using the environment helper. Passes environmentHelperRemovalFlags configuration as options to enableFeature. Useful for selective environment hiding in AR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrBackgroundRemover = featuresManager.enableFeature(BABYLON.WebXRBackgroundRemover, \\\"latest\\\", {\\n  environmentHelperRemovalFlags: {\\n    skyBox: true,\\n    ground: false,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Box Mesh with Custom Face Materials in Babylon.js\nDESCRIPTION: Creates a box mesh with custom UV mapping for each face using the faceUV array and enables texture wrapping. This allows different parts of a texture to be applied to different faces of the box.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/face_material.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", {faceUV: faceUV, wrap: true});\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Circular Paths for a Ribbon in Babylon.js\nDESCRIPTION: Creates multiple circular paths across a range of z values to form a ribbon, demonstrating how to construct a 3D surface from multiple 2D paths.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_maths.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst paths = [];\nfor (let z = -6; z <= 6; z++) {\n    const path = [];\n    for (let a = 0; a < 2 * Math.PI; a += Math.PI / 8) {\n      let x = 5 * Math.cos(a);\n      let y = 5 * Math.sin(a);\n      path.push(new BABYLON.Vector3(x, y, z))\n    }\n    path.push(path[0]); // close circle\n    paths.push(path)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Lightmaps to Meshes in Babylon.js\nDESCRIPTION: Demonstrates how to load a 3D scene with a baked lightmap and apply it to meshes in Babylon.js. The code loads a GLB file containing the scene geometry and then applies the externally baked lightmap texture to enhance the visual quality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/lightmaps.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst createScene = function () {\n    const scene = new BABYLON.Scene(engine);\n    scene.clearColor = new BABYLON.Color3(0.09, 0.09, 0.09);\n\n    const camera = new BABYLON.ArcRotateCamera(\"camera\", BABYLON.Tools.ToRadians(90), BABYLON.Tools.ToRadians(65), 5, BABYLON.Vector3.Zero(), scene);\n    camera.attachControl(canvas, true);\n    \n    new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n    \n    BABYLON.SceneLoader.ImportMesh(\"\", \"https://raw.githubusercontent.com/slendixx/babylon_test/main/scenes/\", \"level1.glb\", scene, function(meshes) {\n        // Add lightmap texture\n        const lightmapTexture = new BABYLON.Texture(\"https://raw.githubusercontent.com/slendixx/babylon_test/main/textures/lightmap.jpg\", scene);\n        \n        // Apply texture to all meshes\n        for (let i = 0; i < meshes.length; i++) {\n            if (meshes[i].material) {\n                meshes[i].material.lightmapTexture = lightmapTexture;\n                meshes[i].material.lightmapTexture.coordinatesIndex = 1;\n                meshes[i].material.lightmapTexture.level = 0.5;\n                meshes[i].material.useLightmapAsShadowmap = true;\n            }\n        }\n    });\n\n    return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Default Layout for VirtualKeyboard in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a `VirtualKeyboard` instance with a pre-defined default layout (typically QWERTY-like) using the static method `BABYLON.GUI.VirtualKeyboard.CreateDefaultLayout()`. This simplifies the process of setting up a standard keyboard.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst keyboard = BABYLON.GUI.VirtualKeyboard.CreateDefaultLayout();\n```\n```\n\n----------------------------------------\n\nTITLE: Constructing 3D Wall Mesh from Plan Data in Babylon.js\nDESCRIPTION: This JavaScript function, `buildFromPlan`, constructs a 3D mesh representing walls based on a plan defined by an array of `walls`. It calculates inner and outer corner positions considering wall thickness (`ply`), height, and corner angles. It uses `BABYLON.PolygonMeshBuilder` to generate the geometry for each wall segment, incorporating specified door and window openings by defining polygons and holes. The function also calculates UV coordinates and applies optional colors. Dependencies include the Babylon.js library (`BABYLON.Vector3`, `BABYLON.Vector4`, `BABYLON.Color4`, `BABYLON.PolygonMeshBuilder`). Input parameters are `walls` (array defining corners and associated door/window data), `ply` (wall thickness), `height`, `options` (object for UVs, colors, interior flag), and the Babylon.js `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar buildFromPlan = function(walls, ply, height, options, scene) {\n        \n\t//Arrays for vertex positions and indices\n\tvar positions = [];\n\tvar indices = [];\n\tvar uvs = [];\n\tvar colors = [];\n\t\n\tvar interiorUV = options.interiorUV || new BABYLON.Vector4(0, 0, 1, 1);\n\tvar exteriorUV = options.exteriorUV || new BABYLON.Vector4(0, 0, 1, 1);\n\t\n\tvar interiorColor = options.interiorColor || new BABYLON.Color4(1, 1, 1, 1);\n\tvar exteriorColor = options.exteriorColor || new BABYLON.Color4(1, 1, 1, 1);\t\t\n\tvar interior = options.interior || false;\n        if(!interior) {\n            walls.push(walls[0]);\n        }\n\t\n\tvar interiorIndex;\n\t\n\t//Arrays to hold wall corner data \n\tvar innerBaseCorners = [];\n\tvar outerBaseCorners = [];\n\tvar innerTopCorners = [];\n\tvar outerTopCorners = [];\n\tvar innerDoorCorners = [];\n\tvar outerDoorCorners = [];\n\tvar innerWindowCorners = [];\n\tvar outerWindowCorners = [];\n\t\n\tvar angle = 0;\n\tvar direction = 0;\n\n        var line = BABYLON.Vector3.Zero();\n        var nextLine = BABYLON.Vector3.Zero();\t\t\n\n        var nbWalls = walls.length;\n        if(nbWalls === 2) {\n            walls[1].corner.subtractToRef(walls[0].corner, line);\n            lineNormal = new BABYLON.Vector3(line.z, 0, -1 * line.x).normalize();\n\t    line.normalize();\n            innerBaseCorners[0] = walls[0].corner;\n            outerBaseCorners[0] = walls[0].corner.add(lineNormal.scale(ply));\n            innerBaseCorners[1] = walls[1].corner;\n            outerBaseCorners[1] = walls[1].corner.add(lineNormal.scale(ply));\n        }\n        else if(nbWalls > 2) { \n            for(let w = 0; w < nbWalls - 1; w++) {\n                walls[w + 1].corner.subtractToRef(walls[w].corner, nextLine);\n                angle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));\t\t\t\n\t\t    direction = BABYLON.Vector3.Cross(nextLine, line).normalize().y;\t\t\t\n\t\t    lineNormal = new BABYLON.Vector3(line.z, 0, -1 * line.x).normalize();\n\t\t    line.normalize();\n                innerBaseCorners[w] = walls[w].corner\n                outerBaseCorners[w] = walls[w].corner.add(lineNormal.scale(ply)).add(line.scale(direction * ply/Math.tan(angle/2)));\t\t\n\t\t    line = nextLine.clone();\n            } \n            if(interior) {\n                lineNormal = new BABYLON.Vector3(line.z, 0, -1 * line.x).normalize();\n\t        line.normalize();\n                innerBaseCorners[nbWalls - 1] = walls[nbWalls - 1].corner\n                outerBaseCorners[nbWalls - 1] = walls[nbWalls - 1].corner.add(lineNormal.scale(ply));\n                walls[1].corner.subtractToRef(walls[0].corner, line);\n                lineNormal = new BABYLON.Vector3(line.z, 0, -1 * line.x).normalize();\n\t        line.normalize();\n                innerBaseCorners[0] = walls[0].corner;\n                outerBaseCorners[0] = walls[0].corner.add(lineNormal.scale(ply));\n            }\n            else {\n                walls[1].corner.subtractToRef(walls[0].corner, nextLine);\n                angle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));\t\t\t\n\t\t    direction = BABYLON.Vector3.Cross(nextLine, line).normalize().y;\t\t\t\n\t\t    lineNormal = new BABYLON.Vector3(line.z, 0, -1 * line.x).normalize();\n\t\t    line.normalize();\n                innerBaseCorners[0] = walls[0].corner\n                outerBaseCorners[0] = walls[0].corner.add(lineNormal.scale(ply)).add(line.scale(direction * ply/Math.tan(angle/2)));\n                innerBaseCorners[nbWalls - 1] = innerBaseCorners[0];\n                outerBaseCorners[nbWalls - 1] = outerBaseCorners[0]\n\n            }       \n        }\n\n\t// inner and outer top corners\n\tfor(let w = 0; w < nbWalls; w++) {\n\t\tinnerTopCorners.push(new BABYLON.Vector3(innerBaseCorners[w].x, height, innerBaseCorners[w].z));\n\t\touterTopCorners.push(new BABYLON.Vector3(outerBaseCorners[w].x, height, outerBaseCorners[w].z));\n\t}\n\t\n\tvar maxL = 0;\n\tfor(w = 0; w < nbWalls - 1; w++) {\n\t\tmaxL = Math.max(innerBaseCorners[w + 1].subtract(innerBaseCorners[w]).length(), maxL);\n\t}\n\t\n\tvar maxH = height; // for when gables introduced\n\t\n\t/******House Mesh Construction********/\n\t\n\t// Wall Construction\n\tvar polygonCorners;\n\tvar polygonTriangulation;\n\tvar wallData;\n\tvar wallDirection = BABYLON.Vector3.Zero();\n\tvar wallNormal = BABYLON.Vector3.Zero(); \n\tvar wallLength;\n\tvar exteriorWallLength;\n\tvar doorData;\n\tvar windowData;\n\tvar uvx, uvy;\n\tvar wallDiff;\n\t\n\tfor(let w = 0; w < nbWalls - 1; w++) {\n\t\twalls[w + 1].corner.subtractToRef(walls[w].corner, wallDirection);\n\t\twallLength = wallDirection.length();\n\t\twallDirection.normalize();\n\t\twallNormal.x = wallDirection.z;\n\t\twallNormal.z = -1 * wallDirection.x;\n\t\texteriorWallLength = outerBaseCorners[w + 1].subtract(outerBaseCorners[w]).length();\n\t\twallDiff = exteriorWallLength - wallLength;\n\t\tvar gableHeight = 0;\n\t\t\n\t\t//doors\n\t\tif(walls[w].doorSpaces) {\n\t\t\twalls[w].doorSpaces.sort(compareLeft);\n\t\t}\n\t\tvar doors = walls[w].doorSpaces.length;\n\t\t\n\t\t//Construct INNER wall polygon starting from (0, 0) using wall length and height and door data\n\t\tpolygonCorners = [];\n\t\tpolygonCorners.push(new BABYLON.Vector2(0, 0));\n\t\t\n\t\tfor (let d = 0; d < doors; d++) {\t\t\t\n\t\t\tpolygonCorners.push(new BABYLON.Vector2(walls[w].doorSpaces[d].left, 0));\n\t\t\tpolygonCorners.push(new BABYLON.Vector2(walls[w].doorSpaces[d].left, walls[w].doorSpaces[d].door.height));\n\t\t\tpolygonCorners.push(new BABYLON.Vector2(walls[w].doorSpaces[d].left + walls[w].doorSpaces[d].door.width, walls[w].doorSpaces[d].door.height));\n\t\t\tpolygonCorners.push(new BABYLON.Vector2(walls[w].doorSpaces[d].left + walls[w].doorSpaces[d].door.width, 0));\t\t\t\n\t\t}\n\n\t\tpolygonCorners.push(new BABYLON.Vector2(wallLength, 0));\n\t\tpolygonCorners.push(new BABYLON.Vector2(wallLength, height));\n\t\tpolygonCorners.push(new BABYLON.Vector2(0, height));\n\t\t\n\t\t//Construct triangulation of polygon using its corners\n\t\tpolygonTriangulation = new BABYLON.PolygonMeshBuilder(\"\", polygonCorners, scene);\t\n\t\t\n\t\t//windows\n\t\t//Construct holes and add to polygon from window data\t\t\t\n\t\tvar windows = walls[w].windowSpaces.length;\n\t\tvar holes = [];\n\t\tfor(let ws = 0; ws < windows; ws++) { \n\t\t\tvar holeData = [];\n\t\t\tholeData.push(new BABYLON.Vector2(walls[w].windowSpaces[ws].left, height - walls[w].windowSpaces[ws].top - walls[w].windowSpaces[ws].window.height));\n\t\t\tholeData.push(new BABYLON.Vector2(walls[w].windowSpaces[ws].left + walls[w].windowSpaces[ws].window.width, height - walls[w].windowSpaces[ws].top - walls[w].windowSpaces[ws].window.height));\n\t\t\tholeData.push(new BABYLON.Vector2(walls[w].windowSpaces[ws].left + walls[w].windowSpaces[ws].window.width, height - walls[w].windowSpaces[ws].top));\n\t\t\tholeData.push(new BABYLON.Vector2(walls[w].windowSpaces[ws].left, height - walls[w].windowSpaces[ws].top));\n\t\t\tholes.push(holeData);\t\t\t\t\n\t\t}\n\t\t\n\t\tfor(let h = 0; h < holes.length; h++) {\n\t\t\tpolygonTriangulation.addHole(holes[h]);\n\t\t}\n\t\t\n\t\t\n\t\t// wallBuilder produces wall vertex positions array and indices using the current and next wall to rotate and translate vertex positions to correct place\n\t\twallData = polygonTriangulation.wallBuilder(walls[w], walls[w + 1]);\t\n\n\t\tnbIndices = positions.length/3; // current number of indices\n\t\t\n\t\tpolygonTriangulation._points.elements.forEach(function (p)  {\n\t\t\tuvx = interiorUV.x + p.x * (interiorUV.z - interiorUV.x) / maxL;\n\t\t\tuvy = interiorUV.y + p.y * (interiorUV.w - interiorUV.y) / height;\n\t\t\tuvs.push(uvx, uvy);\t\t\t\t\t\n\t\t\tcolors.push(interiorColor.r, interiorColor.g, interiorColor.b, interiorColor.a);\n\t\t});\n\t\t\n\t\t//Add inner wall positions (repeated for flat shaded mesh)\n\t\tpositions = positions.concat(wallData.positions);\n\t\t\n\t\tinteriorIndex = positions.length/3;\n\n\t\tindices = indices.concat(wallData.indices.map(function(idx){\n\t\t\treturn idx + nbIndices;\n\t\t}));\n\t\t\n\t\t//wallData has format for inner wall [base left, 0 or more doors, base right, top right, top left, windows]\n\t\t//extract door and wall data\n\t\t\n\t\twindowData = wallData.positions.slice(12 * (doors + 1)); //4 entries per door + 4 entries for wall corners, each entry has 3 data points\n\t\tdoorData = wallData.positions.slice(3, 3 * (4 * doors + 1) ); \n\t\t\n\t\t//For each inner door save corner as an array of four Vector3s, base left, top left, top right, base right\n\t\t//Extend door data outwards by ply and save outer door corners \t\t\n\t\tvar doorCornersIn = [];\n\t\tvar doorCornersOut = [];\n\t\tfor(let p = 0; p < doorData.length/12; p++) {\n\t\t\tvar doorsIn = [];\n\t\t\tvar doorsOut = [];\n\t\t\tfor(let d = 0; d < 4; d ++) {\n\t\t\t\tdoorsIn.push(new BABYLON.Vector3(doorData[3 * d + 12 * p], doorData[3 * d  + 12 * p + 1], doorData[3 * d + 12 * p + 2]));\n\t\t\t\tdoorData[3 * d + 12 * p] += ply * wallNormal.x;\n\t\t\t\tdoorData[3 * d + 12 * p + 2] += ply * wallNormal.z;\n\t\t\t\tdoorsOut.push(new BABYLON.Vector3(doorData[3 * d + 12 * p], doorData[3 * d  + 12 * p + 1], doorData[3 * d + 12 * p + 2]));\n\t\t\t}\n\t\t\tdoorCornersIn.push(doorsIn);\n\t\t\tdoorCornersOut.push(doorsOut);\n\t\t}\t\t\t\n\t\tinnerDoorCorners.push(doorCornersIn);\t\t\t\n\t\touterDoorCorners.push(doorCornersOut);\n\t\t\n\t\t//For each inner window save corner as an array of four Vector3s, base left, top left, top right, base right\n\t\t//Extend window data outwards by ply and save outer window corners \t\t\n\t\tvar windowCornersIn = [];\n\t\tvar windowCornersOut = [];\n\t\tfor(let p = 0; p < windowData.length/12; p++) {\n\t\t\tvar windowsIn = [];\n\t\t\tvar windowsOut = [];\n\t\t\tfor(let d = 0; d < 4; d ++) {\n\t\t\t\twindowsIn.push(new BABYLON.Vector3(windowData[3 * d + 12 * p], windowData[3 * d  + 12 * p + 1], windowData[3 * d + 12 * p + 2]));\n\t\t\t\twindowData[3 * d + 12 * p] += ply * wallNormal.x;\n\t\t\t\twindowData[3 * d + 12 * p + 2] += ply * wallNormal.z;\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Logger Existence in Babylon.js Flow Graph Context (JavaScript)\nDESCRIPTION: Shows how to verify if the logger object has been successfully initialized on the Flow Graph context after enabling logging. The `logger` property will be defined if logging is enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nctx.logger !== undefined;\n```\n\n----------------------------------------\n\nTITLE: Registering Inputs/Outputs in a Custom Flow Graph Block Constructor (TypeScript)\nDESCRIPTION: Shows the implementation within the constructor of the custom `FlowGraphArrayIndexBlock`. It uses `registerDataInput` and `registerDataOutput` to define the block's connections, specifying their names ('array', 'index', 'value'), types (`RichTypeAny`, `RichTypeFlowGraphInteger`), and providing an optional default value (`new FlowGraphInteger(-1)`) for the index input.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.array = this.registerDataInput(\"array\", RichTypeAny);\n// define the index as type integer, and also assign a default value to it. The 3rd variable is optional, and each type has its own default value\nthis.index = this.registerDataInput(\"index\", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));\nthis.value = this.registerDataOutput(\"value\", RichTypeAny);\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Controller in Babylon.js\nDESCRIPTION: Example of a scene controller class that serves as the main entry point for scene logic. Extends BABYLON.MeshComponent and implements lifecycle methods including ready, start, update, after, and destroy.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class NewSceneController extends BABYLON.MeshComponent {\n            public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {\n                super(owner, scene, tick, propertyBag);\n            }\n\n            protected ready() :void {\n                // Scene execute when ready\n            }\n\n            protected start() :void {\n                // Start component function\n            }\n\n            protected update() :void {\n                // Update render loop function\n            }\n\n            protected after() :void {\n                // After render loop function\n            }\n\n            protected destroy() :void {\n                // Destroy component function\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting the Current Timeline Position (javascript)\nDESCRIPTION: Explains how to update the starting time displayed at the left edge of the timeline canvas using setCurrentTime, with 'value' representing the new start time. The method ensures the timeline bounds are respected while changing focus, and thumbnail distribution adapts according to the current zoom settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n    // Sets the left side of the canvas to the current chosen time\n    // The rest of the visible thumbnails are evenly distributed according to the chosen\n    // zoom level.\n    timeline.setCurrentTime(value);\n```\n\n----------------------------------------\n\nTITLE: Changing Tiles in a Sprite Map in Babylon.js\nDESCRIPTION: Shows how to change one or multiple tiles in a sprite map using the changeTiles method. It allows setting tiles to a specific sprite frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_tiles.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nspriteMap.changeTiles(layerID, tileID, frameID) //Change one tile\nspriteMap.changeTiles(layerID, [tileID0, tileID1, ... tileIDn], frameID); //Change multiple tiles to sprite at frameID\n```\n\n----------------------------------------\n\nTITLE: Applying ZXY World Rotations Sequentially in JavaScript\nDESCRIPTION: Shows how to apply rotations equivalent to the YXZ local convention but using world space axes in the Z, X, Y order. The angles `alpha`, `beta`, `gamma` correspond to the `pitch`, `yaw`, `roll` used in the YXZ local convention.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(BABYLON.Axis.Z, gamma, BABYLON.Space.WORLD);\nmesh.rotate(BABYLON.Axis.X, alpha, BABYLON.Space.WORLD);\nmesh.rotate(BABYLON.Axis.Y, beta, BABYLON.Space.WORLD);\n```\n\n----------------------------------------\n\nTITLE: Parsing Loaded Text and NodeGeometry Creation (Babylon.js, JavaScript)\nDESCRIPTION: This snippet attaches a callback to the AssetManager's onFinish event to process loaded files. It parses the loaded text from the node geometry file into a JSON object, then uses BABYLON.NodeGeometry.Parse to instantiate the geometry. Dependencies include BABYLON.js, AssetManager, and a well-formed node geometry JSON file. Inputs are the loaded asset tasks; outputs are the parsed NodeGeometry instance. This step is required before building and rendering geometry from file assets.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// callback\nassetsManager.onFinish = async (tasks) {\n    console.log(\"all tasks successful\", tasks);\n\n    // files loaded as text need to be parsed to JSON to use\n    const nodeGeometryJSON = JSON.parse(nodeGeometryFile.text);\n\n    // parse json object into node geometry\n    const nodeGeometry = await BABYLON.NodeGeometry.Parse(nodeGeometryJSON);\n}\n```\n\n----------------------------------------\n\nTITLE: Using onTaskSuccessObservable with AssetsManager (JavaScript)\nDESCRIPTION: Registers an observer for successfully completed tasks. The callback logs the successful task object. Can be used for fine-grained task-by-task completion handling, and requires an AssetsManager instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nassetsManager.onTaskSuccessObservable.add(function (task) {\n  console.log(\"task successful\", task);\n});\n```\n\n----------------------------------------\n\nTITLE: Disposing GUIColor Element\nDESCRIPTION: Method to clean up and remove the color picker element from the GUI system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiColor.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Creating Ribbon with CloseArray Property\nDESCRIPTION: Creates a ribbon mesh with closeArray set to true, which adds an extra ribbon unit between the last and first paths.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_extra.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ribbon = BABYLON.MeshBuilder.CreateRibbon(\"ribbon\", { pathArray: paths, closeArray: true }, scene);\n```\n\n----------------------------------------\n\nTITLE: Precomputing Multiple Height Maps in JavaScript\nDESCRIPTION: Shows how to precompute multiple terrain data sets from different height map images without using callback functions. This approach allows creating several data sets for later use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst url1 = someURL;\nconst url2 = someOtherURL;\nconst url3 = someOtherURL;\n// all my maps will have the same subdivisions and dimensions\n// no callback function here. The \"height\" option is the Z-axis dimension\nconst options = { width: 5000, height: 4000, subX: 1000, subZ: 800 };\nconst set1 = new Float32Array(subX * subZ * 3);\nconst set2 = new Float32Array(subX * subZ * 3);\nconst set3 = new Float32Array(subX * subZ * 3);\nBABYLON.DynamicTerrain.CreateMapFromHeightMapToRef(url1, options, set1, scene);\nBABYLON.DynamicTerrain.CreateMapFromHeightMapToRef(url2, options, set2, scene);\nBABYLON.DynamicTerrain.CreateMapFromHeightMapToRef(url3, options, set3, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Ellipsoid in Babylon.js\nDESCRIPTION: Defines the collision boundaries around the camera using an ellipsoid shape.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.ellipsoid = new BABYLON.Vector3(1, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Rotation as Quaternion with Reference in Babylon.js\nDESCRIPTION: Shows how to get the rotation of a bone as a Quaternion using the getRotationQuaternionToRef method. It takes space (world or local), mesh, and a reference Quaternion as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst rotationQuaternion = BABYLON.Vector3.Zero();\n\nbone.getRotationQuaternionToRef(BABYLON.Space.WORLD, mesh, rotationQuaternion);\n```\n\n----------------------------------------\n\nTITLE: Applying Node Material from Snippet Server to a Particle System - Babylon.js JavaScript\nDESCRIPTION: This snippet asynchronously loads a node material by its snippet ID and applies it to an existing Babylon.js particle system using the 'createEffectForParticles' method. Dependencies include NodeMaterial functionality from Babylon.js. The snippet ID should point to a valid saved NME shader, and the system variable references the desired particle system. Outputs the system with the newly assigned custom shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/particles_and_nme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Load our node material\nlet nodeMaterial = await BABYLON.NodeMaterial.ParseFromSnippetAsync(\"#345ATT#4\", scene);\n\n// Apply it to the particle system\nnodeMaterial.createEffectForParticles(system);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Directional Light for Custom Mesh Visualization\nDESCRIPTION: This code creates a directional light that travels along the positive z-axis. This lighting setup is used to demonstrate how normals affect the appearance of mesh facets with the light reflecting or being absorbed depending on normal direction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar light = new BABYLON.DirectionalLight(\"direct\", new BABYLON.Vector3(0, 0, 1), scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Terrain in BabylonJS\nDESCRIPTION: Creates a dynamic terrain instance using the generated map data with specified parameters including map dimensions and terrain subdivision.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/DTExamples.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 50;\nconst params = {\n  mapData: mapData,\n  mapSubX: mapSubX,\n  mapSubZ: mapSubZ,\n  terrainSub: terrainSub,\n};\nterrain = new BABYLON.DynamicTerrain(\"terrain\", params, scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling Ramp Gradient Usage in Babylon.js ParticleSystem - JavaScript\nDESCRIPTION: Activates the ramp gradients previously defined for a Babylon.js ParticleSystem by toggling the useRampGradients property. Requires prior ramp gradient configuration using addRampGradient calls. Enabling this property makes the gradient apply to each particle’s color calculations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/ramps_and_blends.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.useRampGradients = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Map Refresh Rate to Render Once in Babylon.js (JavaScript)\nDESCRIPTION: Optimizes performance for static scenes by setting the `refreshRate` of the shadow map texture retrieved via `shadowGenerator.getShadowMap()`. Setting it to `BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE` ensures the shadow map is generated only a single time, avoiding redundant calculations in subsequent frames. This requires an existing `shadowGenerator` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n```\n\n----------------------------------------\n\nTITLE: Adding Animation to Object in Babylon.js\nDESCRIPTION: Adds an animation to the animations array of an object like Mesh, Material, Light, or Camera, preparing it to be played when beginAnimation is called.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.animations.push(myAnim);\n```\n\n----------------------------------------\n\nTITLE: Accessing the Mesh from Volumetric Light Scattering Post Process - Babylon.js - JavaScript\nDESCRIPTION: Demonstrates how to access the mesh associated with a VolumetricLightScatteringPostProcess instance. Useful for further manipulation or customization, relying on the post-process instance (vls). Expects that the instance has already been created. Outputs the mesh object used as the light source.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = vls.mesh;\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup C in Babylon.js Physics\nDESCRIPTION: Parameter setup where the connected pivot is offset on the X-axis, which adjusts the main body position and creates a radius of rotation. Both axes align with the Y-axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(0, 0, 0),\nconnectedPivot: new BABYLON.Vector3(5, 0, 0), //adjust main body position and radius of rotation\nmainAxis: new BABYLON.Vector3(0, 1, 0),\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Detection Render Mode in Babylon.js\nDESCRIPTION: Shows how to change the render mode of the edge detection effect with different visualization options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/edgeDetectionPP.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// General :0, Normal: 1, Depth: 2, Only Outline: 3 \nedgeDetectionPostProcess.renderMode = 3; // default is 1 \n```\n\n----------------------------------------\n\nTITLE: Points Definition Examples\nDESCRIPTION: Different ways to specify points for GreasedLine creation using arrays and Vector3 objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst points =\n[\n    0, 0, 0,\n    1, 0, 0,\n    1, 1, 0\n]\n// is the same as\nconst points =\n[\n    new BABYLON.Vector3(0,0,0)\n    new BABYLON.Vector3(1,0,0)\n    new BABYLON.Vector3(1,1,0)\n]\n```\n\n----------------------------------------\n\nTITLE: Moving Assets from Scene to AssetContainer in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates transferring all compatible assets from the scene into an AssetContainer for later reuse, while preserving specified assets using the KeepAssets helper. Requires a valid scene, AssetContainer, and a KeepAssets instance where assets to keep can be specified. The moveAllFromScene method both removes the moved entities from the scene and stores them in the container for deferred management.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetContainers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst keepAssets = new BABYLON.KeepAssets();\nkeepAssets.cameras.push(camera);\ncontainer.moveAllFromScene(keepAssets);\n```\n\n----------------------------------------\n\nTITLE: Ground Detection and Jump Reset\nDESCRIPTION: Implements ground detection logic and resets jump-related variables when character is grounded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt2.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (this._isGrounded()) {\n  this._gravity.y = 0;\n  this._grounded = true;\n  this._lastGroundPos.copyFrom(this.mesh.position);\n\n  this._jumpCount = 1; //allow for jumping\n}\n```\n\n----------------------------------------\n\nTITLE: CDN Integration with ES Module\nDESCRIPTION: Example of integrating Havok physics using CDN with ES module script\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingHavok.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import HavokPhysics from \"https://cdn.babylonjs.com/havok/HavokPhysics_es.js\";\n  let havokInstance;\n  HavokPhysics().then((havok) => {\n    havokInstance = havok;\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring WebXR Teleportation Feature\nDESCRIPTION: Demonstrates how to reconfigure the teleportation feature by re-enabling it with new options, useful for changing parameters that don't have public setters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHelper = await scene.createDefaultXRExperienceAsync({\n  xrInput: xrHelper.input,\n  floorMeshes: [ground] /* Array of meshes to be used as landing points */,\n});\n// ...\n// needs a reconfigure - re-enable the feature (will discard the old one and create a new one!)\nxrHelper.teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\" /* or latest */, {\n  xrInput: xrHelper.input,\n  floorMeshes: [ground],\n  renderingGroupId: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Apex Data to Vector2 Array in JavaScript (Babylon.js)\nDESCRIPTION: This code iterates through the `roofApexData` array (containing pairs of coordinates) and creates an array `apexes` of `BABYLON.Vector2` objects. This `apexes` array is required as input for the custom `roof` function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar apexes = [];\n\t\nfor(let i = 0; i < roofApexData.length / 2; i++) {\n\tapexes.push(new BABYLON.Vector2(roofApexData[2 * i], roofApexData[2 * i + 1]))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Glossiness Channel in PBRMaterial\nDESCRIPTION: Sets up custom channel configuration for a PBR material when converting from PBRSpecularGlossinessMaterial to PBRMaterial. This code disables reading micro surface (glossiness) information from the alpha channel of the reflectivity map.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npbr.useMicroSurfaceFromReflectivityMapAlpha = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ragdoll Shapes and Constraints in JavaScript\nDESCRIPTION: Defines the configuration array for a Babylon.js ragdoll. Each object specifies properties for physics shapes associated with skeleton bones, including which bones they control (`bones`), their dimensions (`size`, `depth`, `width`, `height`), collision offset (`boxOffset`, `boneOffsetAxis`), and joint constraints (`rotationAxis`, `min`, `max`). Symmetrical bones can share a configuration entry. If `depth`, `width`, or `height` are not set, `size` is used as a fallback.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/ragdolls.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = [\n            { bones: [\"root\"], size: 0.6, boxOffset: 0.1 },\n            // Arms.\n            {\n                bones: [\"arm_r\", \"arm_l\"],\n                depth: 0.3,\n                size: 0.3,\n                width: 0.6,\n                rotationAxis: BABYLON.Axis.Z,\n                min: -1,\n                max: 1,\n                boxOffset: 0.3,\n                boneOffsetAxis: BABYLON.Axis.X\n            }\n            ...\n\n```\n\n----------------------------------------\n\nTITLE: Creating an AnimationGroup from Existing Animatable Objects (JavaScript)\nDESCRIPTION: Demonstrates initializing a new AnimationGroup by extracting animations from an existing animatable, and adding them with their targets to the group. Requires a reference to an animatable (idleAnim) with a getAnimations() method. Inputs: none directly; Output: AnimationGroup is populated by enumerating the animatable's current animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/groupAnimations.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst animationGroup = new BABYLON.AnimationGroup(\"my-animation-group\");\n\nfor (anim of idleAnim.getAnimations()) {\n  animationGroup.addTargetedAnimation(anim.animation, anim.target);\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Selector Callback Function in JavaScript\nDESCRIPTION: Shows an example callback function (`setColor`) used by all radio buttons within a group. The function receives a number `but` corresponding to the index (position) of the selected radio button and updates the scene object's material based on this index.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst setColor = function (but) {\n  switch (but) {\n    case 0:\n      box.material = blueMat;\n      break;\n    case 1:\n      box.material = redMat;\n      break;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Forcing Alpha Blending via Mesh Visibility in Babylon.js\nDESCRIPTION: Demonstrates how to make a mesh slightly transparent by setting its `visibility` property to a value just below 1.0. This forces the mesh into the alpha-blending pipeline, which is a prerequisite for applying custom blend modes via the material's `alphaMode` property, even if the mesh texture itself is fully opaque.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/blendModes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nmesh.visibility = 0.9999;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Edge Detection Post-Process in Babylon.js\nDESCRIPTION: Creates a basic edge detection post-process effect and attaches it to the main camera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/edgeDetectionPP.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Creates the post process\nvar edgeDetectionPostProcess = new BABYLON.EdgeDetectionPostProcess(\"EdgeDetection\", camera);\n```\n\n----------------------------------------\n\nTITLE: Setting UVs for Text Mesh Faces - Babylon.js JavaScript\nDESCRIPTION: This example shows assigning specific UV mappings for the front, top, and back faces of a 3D text mesh using the faceUV parameter. It uses Babylon.js's Vector4 to define texture coordinates for each face, which controls how textures are mapped on the extruded text. Requires the mesh to be generated with CreateText as in the previous example.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/text.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar myText = BABYLON.MeshBuilder.CreateText(\"myText\", \"HELLO WORLD\", fontData, {\\n        size: 16,\\n        resolution: 64,\\n        depth: 10,\\n        faceUV: [\\n            new BABYLON.Vector4(0, 0, 1, 1),\\n            new BABYLON.Vector4(0, 0, 1, 1),\\n            new BABYLON.Vector4(0, 0, 1, 1),\\n        ];\\n    });\n```\n\n----------------------------------------\n\nTITLE: Extracting Points and Length from Curve3 - Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the array of Vector3 points from a Curve3 object using getPoints(), and how to compute the curve's length via length(). This pattern is common for all Curve3-based geometries to obtain mesh path or distance metrics. Requires a valid Curve3 instance such as arc, bezier2, bezier3, etc.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = arc.getPoints();\nconst l = arc.length();\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Partitioning Bounding Box Ratio in Babylon.js\nDESCRIPTION: Shows how to adjust the size of the area used for partitioning relative to the mesh's actual bounding box using the `mesh.partitioningBBoxRatio` property. A value greater than 1.0 (e.g., 1.05 for 5% larger) increases the detection zone around the mesh. `mesh.updateFacetData()` must be called afterwards for the change to take effect. Recommended values are typically between 1.0 and 1.10.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nmesh.partitioningBBoxRatio = 1.05; // 5% bigger than the bounding box instead of 1% bigger\nmesh.updateFacetData(); // now the internal block area if 5% bigger than the bounding box\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a GUIButton in BabylonJS\nDESCRIPTION: Constructor for creating a new GUIButton. It takes parameters for id, options, GUI manager, callback function, and whether to append to the body.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiButton.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUIButton(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Adding Points from Mesh Surface/Volume with Random Color in Babylon.js\nDESCRIPTION: Demonstrates adding points to a PCS based on a given mesh (`model`). `addSurfacePoints` distributes points randomly on the mesh's facets, while `addVolumePoints` distributes them randomly within the mesh's volume. By default or by explicitly using `BABYLON.PointColor.Random`, points are assigned random colors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npcs.addSurfacePoints(model, 10000);\npcs.addSurfacePoints(model, 10000, BABYLON.PointColor.Random);\n\npcs.addVolumePoints(model, 10000);\npcs.addVolumePoints(model, 10000, BABYLON.PointColor.Random);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Velocity Damping Factor in Babylon.js\nDESCRIPTION: Sets the `limitVelocityDamping` property on the particle system. This factor (e.g., 0.1) is applied (speed = speed * damping factor) to a particle's speed whenever it exceeds the speed limit defined by `addLimitVelocityGradient`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.limitVelocityDamping = 0.1; //damping factor\n```\n\n----------------------------------------\n\nTITLE: Mixing Textures in GLSL Fragment Shader\nDESCRIPTION: A more complex GLSL fragment shader (`custom.fragment.fx`) that samples colors from two textures (`dirt` and `grass`) defined as `sampler2D` uniforms. It uses the built-in `mix` function to blend the texture colors equally based on texture coordinates (`vUV`) and assigns the result to `gl_FragColor`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    varying vec2 vPosition;\n    varying vec2 vUV;\n\n    uniform sampler2D grass;\n    uniform sampler2D dirt;\n\n    void main(void) {\n     vec3 color = mix(texture2D(dirt, vUV).xyz, texture2D(grass, vUV).xyz, 0.5);\n     gl_FragColor = vec4(color, 1.0);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Meshes to Octree in Babylon.js\nDESCRIPTION: This code shows how to register a mesh as dynamic content in an octree. This allows the octree to always select the dynamic mesh, even though octrees are typically used for static meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeOctrees.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noctree.dynamicContent.push(mesh)\n```\n\n----------------------------------------\n\nTITLE: Updating Camera Position with Smooth Lerp in Babylon.js\nDESCRIPTION: Updates the camera position to follow the player character with smooth interpolation using Vector3.Lerp. The method adds a height offset to center the camera on the player mesh and creates a smooth transition instead of instant repositioning.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/playerCamera.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _updateCamera(): void {\n    let centerPlayer = this.mesh.position.y + 2;\n    this._camRoot.position = Vector3.Lerp(this._camRoot.position, new Vector3(this.mesh.position.x, centerPlayer, this.mesh.position.z), 0.4);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Near Interaction Properties on AbstractMesh in Babylon.js\nDESCRIPTION: This snippet demonstrates how to enable near interaction support for an AbstractMesh object in Babylon.js. The 'isNearPickable' property enables touch input, while 'isNearGrabbable' allows the object to be grabbed. Only one of these properties should be set to true at a time to prevent unintended interactions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/mrtk.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nabstractMesh.isNearPickable = true; // Enable touch input\n// OR\nabstractMesh.isNearGrabbable = true; // Enable grabbing\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Selector Groups in JavaScript\nDESCRIPTION: Demonstrates how to create instances of `CheckboxGroup`, `RadioGroup`, and `SliderGroup` using their respective constructors, each taking a string for the group's header.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst transformGroup = new BABYLON.GUI.CheckboxGroup(\"Transformation\");\nconst colorGroup = new BABYLON.GUI.RadioGroup(\"Color\");\nconst rotateGroup = new BABYLON.GUI.SliderGroup(\"Rotation\");\n```\n\n----------------------------------------\n\nTITLE: Transforming a Ray to Mesh Local Space in Babylon.js\nDESCRIPTION: Transforms a `BABYLON.Ray` from world coordinates into the local coordinate system of a target mesh (`box`). This is achieved using the static `BABYLON.Ray.Transform` method and the inverse of the mesh's world matrix. This transformation is necessary when using the `Ray.intersectsMesh` method for accurate intersection point calculation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// create a mesh to intersect\nlet box = BABYLON.MeshBuilder.CreateBox(\"box\", {size: 1.0}, scene);\n\n// define the ray origin, direction, and length\nlet origin = new BABYLON.Vector3(0.0, 0.0, 1.5);\nlet dir = new BABYLON.Vector3(0.0, 0.0, -1.0);\nlet length = 5.0;\n\n// create the ray\nlet myRay = new BABYLON.Ray(origin, dir, length);\n\n// use the ray helper to render the ray in the scene\nlet rayHelper = new BABYLON.RayHelper(myRay);\nrayHelper.show(scene);\n\n// transform the ray into the local space of the mesh to get an accurate intersection point - in this case we are using the inverse of the mesh's world matrix to transform\nBABYLON.Ray.Transform(myRay, box.getWorldMatrix().invert())\n```\n\n----------------------------------------\n\nTITLE: Generating a Circular Path in Babylon.js\nDESCRIPTION: Creates a circular path with radius 5 using parametric equations with angle 'a' as the parameter, demonstrating non-linear path generation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_maths.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = [];\nfor (let a = 0; a < 2 * Math.PI; a += Math.PI / 8) {\n    let x = 5 * Math.cos(a);\n    let y = 5 * Math.sin(a);\n    path.push(new BABYLON.Vector3(x, y, 6))\n}\npath.push(path[0]); // close circle\n```\n\n----------------------------------------\n\nTITLE: Creating a Tiled Box with MeshBuilder in JavaScript\nDESCRIPTION: Demonstrates the basic usage of `BABYLON.MeshBuilder.CreateTiledBox` to create a tiled box mesh. It takes a name, an options object, and an optional scene parameter. The options object allows customization of dimensions (size, height, width, depth), tile properties (tileSize, tileHeight, tileWidth), appearance (faceColors, faceUV), tiling pattern, alignment, and updatability.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_box.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tiledBox = BABYLON.MeshBuilder.CreateTiledBox(\"tiled box\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Culling for Cascade Shadow Maps\nDESCRIPTION: Demonstrates how to implement a custom culling strategy for cascade shadow maps. This allows selectively rendering only relevant shadow casters for each cascade, improving performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet rtt = csmShadowGenerator.getShadowMap();\n\nrtt.getCustomRenderList = (layer, renderList, renderListLength) => {\n  let meshList = [];\n  // here do the culling for the cascade with index 'layer' by using the\n  // getCascadeViewMatrix(layer), getCSMTransformMatrix(layer), getCascadeMinExtents(layer), etc\n  // from csmShadowGenerator\n  // note: the renderList entry parameter is the list of all shadow casters defined for the CSM generator,\n  // that is csmShadowGenerator.getShadowMap().renderList. If you need to traverse renderList, use\n  // renderListLength for the length, not renderList.length, as the array may hold dummy elements!\n  return meshList;\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Submeshes as Individual Meshes in Babylon.js\nDESCRIPTION: This function takes a Babylon.js mesh and splits its subMeshes into separate mesh objects. It extracts vertex data including indices, normals, positions, and UVs for each submesh and creates new independent meshes. Returns an array of the newly created meshes or the original mesh if it has no submeshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Deconstruct_Mesh.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deconstructMesh(mesh) {\n    if (mesh.subMeshes.length > 1) {\n        var otherVertexData = BABYLON.VertexData.ExtractFromMesh(mesh, true, true);\n        var indices = otherVertexData.indices;\n        var normals = otherVertexData.normals;\n        var positions = otherVertexData.positions;\n        var uvs = otherVertexData.uvs;\n        var newMeshArray = [];\n        for (let index = 0; index < mesh.subMeshes.length; index++) {\n            var newVertexData = new BABYLON.VertexData();\n            \n            var newI = indices.slice(mesh.subMeshes[index].indexStart, mesh.subMeshes[index].indexStart+mesh.subMeshes[index].indexCount);\n            var newN = normals.slice(mesh.subMeshes[index].verticesStart * 3, mesh.subMeshes[index].verticesStart * 3 + mesh.subMeshes[index].verticesCount * 3);\n            var newP = positions.slice(mesh.subMeshes[index].verticesStart * 3, mesh.subMeshes[index].verticesStart * 3 + mesh.subMeshes[index].verticesCount * 3);\n            var newU = uvs.slice(mesh.subMeshes[index].verticesStart * 2, mesh.subMeshes[index].verticesStart * 2 + mesh.subMeshes[index].verticesCount * 2);\n            for (let subIndex = 0; subIndex < newI.length; subIndex++) {\n                newI[subIndex] = newI[subIndex] - mesh.subMeshes[index].verticesStart;\n            }\n\n            newVertexData.indices = newI;\n            newVertexData.normals = newN;\n            newVertexData.positions = newP;\n            newVertexData.uvs = newU;\n            \n            var meshSubclass = new BABYLON.Mesh(mesh.name+'-'+index, scene);\n            \n            newVertexData.applyToMesh(meshSubclass);\n                    \n            newMeshArray.push(meshSubclass);\n        }\n        return newMeshArray;\n    } else {\n        return [mesh];\n    }\n```\n\n----------------------------------------\n\nTITLE: MeshAssetTask Constructor Signature and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Specifies the constructor and extra output properties for a mesh loading asset task. Allows configuration for namespacing, mesh names, path, and filename. Requires Babylon.js; once loaded, returned objects include meshes, particle systems, and skeletons relevant to the asset.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, meshesNames: any, rootUrl: string, sceneFilename: string | File)\n\npublic loadedMeshes: Array<AbstractMesh>;\npublic loadedParticleSystems: Array<ParticleSystem>;\npublic loadedSkeletons: Array<Skeleton>;\n```\n\n----------------------------------------\n\nTITLE: Demo: Multisample Render Targets in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: #12MKMN) demonstrating 'Multisample Render Targets' for achieving antialiasing effects on render target textures. This feature has no effect in a WebGL1 context.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#12MKMN\" title=\"Multisample Render Targets\" description=\"Multisample render targets.\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR with Environment Texture\nDESCRIPTION: Example showing SSR configuration with a local cube map environment texture. Sets up reflection probes and environment texture handling for improved reflection quality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nssr.environmentTextureIsProbe = true\n```\n\n----------------------------------------\n\nTITLE: Generating a Default tsconfig.json File - Bash\nDESCRIPTION: Explains how to initialize a default tsconfig.json file containing TypeScript compiler settings by running the tsc --init command. Requires TypeScript (tsc) to be installed globally or in your project. Produces a tsconfig.json file in the current directory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntsc --init\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for WebXR Development\nDESCRIPTION: Sets up Vite configuration for WebXR development with HTTPS support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRDemos.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"vite\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  server: {\n    port: 3443,\n    https: true,\n    // Uncomment to allow access from network\n    // (or use `npm run dev -- -- host=0.0.0.0`)\n    //host: '0.0.0.0',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Vue 2 BabylonJS Scene Component\nDESCRIPTION: A Vue 2 component that creates a canvas element and initializes a BabylonJS scene using the Options API\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_1.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <canvas ref=\"bjsCanvas\" width=\"500\" height=\"500\" />\n  </div>\n</template>\n\n<script>\nimport { createScene } from \"../scenes/MyFirstScene\";\n\nexport default {\n  name: \"BabylonScene\",\n\n  mounted() {\n    const bjsCanvas = this.$refs.bjsCanvas;\n    if (bjsCanvas) {\n      createScene(bjsCanvas);\n    }\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Basic Observables in Babylon.js Viewer\nDESCRIPTION: Shows how to use basic observables with regular functions to modify scene properties during initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.onSceneInitObservable.add(function (scene) {\n  scene.clearColor = BABYLON.Color4.Blue();\n  // returning the scene object. a common practice, not a must\n  return scene;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unshared Face Numbers in Goldberg Mesh - Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the face number for an unshared face closest to a given pole in a Goldberg mesh using Babylon.js. It requires an instance of a GoldbergPoly utility object (goldbergPoly) and takes two arguments: k (the pole index, 0 <= k < 12) and s (the local face index at that pole). It returns the corresponding face number in spiral order. This method depends on the Goldberg mesh data structure and Babylon.js utilities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst faceNumb = goldbergPoly.relatedGoldBergFace(k, s); // 0 <= s < nbFacesAtPole\n```\n\n----------------------------------------\n\nTITLE: Refining Bounding Sphere Size for Spherical Particles in JavaScript\nDESCRIPTION: Creates an SPS with custom bounding sphere radius for spherical particles. This optimizes collision detection by making the bounding sphere more closely match the actual particle shape.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_physics.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar SPS = new SolidParticleSystem(\"sps\", scene, {\n    particleIntersection: true,\n    boundingSphereOnly: true,\n    bSphereRadiusFactor: 1 / Math.sqrt(3),\n});\n```\n\n----------------------------------------\n\nTITLE: Calling the Roof Generation Function in JavaScript (Babylon.js)\nDESCRIPTION: This snippet demonstrates calling the custom `roof` function to generate the roof mesh. It passes the calculated `roofprint` (Vector3 array), `apexes` (Vector2 array), `planes` structure, the desired roof `rise` (height from roof floor to apex), the house `height`, and a `uvbase` value for texture mapping.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nroof(roofprint, apexes, planes, rise, height, uvbase)\n```\n\n----------------------------------------\n\nTITLE: Creating a Double-Sided Plane with Different Front and Back Textures in Babylon.js\nDESCRIPTION: Creates a plane mesh with the DOUBLESIDE orientation and applies different UV mappings to the front and back sides using the frontUVs and backUVs parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/frontAndBackUVs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst plane = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 1, width: 0.665, sideOrientation: BABYLON.Mesh.DOUBLESIDE, frontUVs: f, backUVs: b }, scene);\n```\n\n----------------------------------------\n\nTITLE: Using CallCounterBlock in BabylonJS Flow Graph\nDESCRIPTION: This example illustrates how to use a CallCounterBlock to count the number of times a connection between two blocks is triggered. It shows how to connect the block between two execution blocks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextBlock1 = new SomeBlock();\nconst nextBlock2 = new SomeBlock();\nconst callCounter = new FlowGraphCallCounterBlock();\n\n// proxy between the two blocks\nnextBlock1.out.connectTo(callCounter.in);\ncallCounter.out.connectTo(nextBlock2.in);\n```\n\n----------------------------------------\n\nTITLE: Setting a Diffuse Color on a Material in Babylon.js (JavaScript)\nDESCRIPTION: This concise snippet directly sets the diffuseColor property of a previously created StandardMaterial instance, changing its visible color to red. Requires the material object (groundMaterial) to exist. This action is a preparation step for further material customization (for example, layering a texture atop the color). The visible effect is an immediate color update for any mesh using this material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/journey/theFirstStep.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngroundMaterial.diffuseColor = BABYLON.Color3.Red();\n```\n\n----------------------------------------\n\nTITLE: Converting Mesh to Unindexed in Babylon.js\nDESCRIPTION: Illustrates how to convert an indexed mesh to an unindexed mesh for potential performance improvement with simple vertex structures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.convertToUnIndexedMesh();\n```\n\n----------------------------------------\n\nTITLE: Updating Parametric Meshes in Babylon.js\nDESCRIPTION: This example shows how to create and update parametric meshes in Babylon.js. It creates a line mesh, updates its points, and then re-renders the mesh using the instance property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//creates lines using the vector3 myPoints array\nconst myLines = BABYLON.MeshBuilder.CreateLines(\"lines\", {points: myPoints});\n// update some or all values in myPoints array\nmyPoints[1] = new BABYLON.Vector3(1, 2, 3);\n// updates the existing instance of myLines by pointing the instance property to it\nmyLines = BABYLON.MeshBuilder.CreateLines(\"lines\", {points: myArray, instance: myLines});\n```\n\n----------------------------------------\n\nTITLE: Adding a Joint Between Physics Impostors in Babylon.js\nDESCRIPTION: This code demonstrates how to add a hinge joint between a connected axle and a main body using physics impostors in Babylon.js. The pivots and axes parameters determine the joint behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedAxle.physicsImpostor.addJoint(mainBody.physicsImpostor, joint);\n```\n\n----------------------------------------\n\nTITLE: Configuring VATs for Thin Instances in Babylon.js\nDESCRIPTION: This snippet demonstrates how to set up Vertex Animation Textures for thin instances. It allocates animation parameters for each instance and updates the mesh with these settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/baked_texture_animations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// allocate the parameters\nconst animParameters = new Float32Array(numInstances * 4);\n\n// for each instance\nfor (let i = 0; i < numInstances; i++) {\n  // generate the animation parameters with your code:\n  // returns a BABYLON.Vector4()\n  const params = setAnimationParameters();\n\n  // store in the base array\n  animParameters.set(params.asArray(), i * 4);\n}\n\n// update the mesh with all settings\nmesh.thinInstanceSetBuffer(\"bakedVertexAnimationSettingsInstanced\", animParameters, 4);\n```\n\n----------------------------------------\n\nTITLE: Setting Material Alpha for Transparency in Babylon.js\nDESCRIPTION: Sets the alpha property of a material to create transparency. Values range from 0 (completely invisible) to 1 (completely opaque).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materials_introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.alpha = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Setting Bone Position in Babylon.js\nDESCRIPTION: Shows how to set a bone to a specific position using the setPosition method. It takes a position vector, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nbone.setPosition(pos, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Creating Post Process Effects in Babylon.js\nDESCRIPTION: Creates black and white and blur post process effects. The camera parameter is not set as it will be configured when the pipeline is added.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/postProcessRenderPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar blackAndWhite = new BABYLON.BlackAndWhitePostProcess(\"bw\", 1.0, null, null, engine, false);\nvar horizontalBlur = new BABYLON.BlurPostProcess(\"hb\", new BABYLON.Vector2(1.0, 0), 20, 1.0, null, null, engine, false);\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Mesh with Holes in Babylon.js\nDESCRIPTION: Demonstrates how to create a polygon mesh with multiple holes. Holes must be added using addHole method before building the final mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/polyMeshBuilder.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npolygon_triangulation.addHole(hole1);\npolygon_triangulation.addHole(hole2);\npolygon_triangulation.addHole(hole3);\nvar polygon = polygon_triangulation.build(true, 1.4);\n```\n\n----------------------------------------\n\nTITLE: Initializing SSAO Pipeline\nDESCRIPTION: Basic initialization of the SSAO rendering pipeline with scene and ratio parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/SSAORenderPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssao = new BABYLON.SSAORenderingPipeline(\"ssaopipeline\", scene, 0.75);\n```\n\n----------------------------------------\n\nTITLE: Updating GUI Element Values in BabylonJS Fluid Renderer Interface\nDESCRIPTION: Helper method to update a list of GUI elements with values from a given object. This populates the UI controls with the current values from the fluid renderer objects, ensuring the interface accurately reflects the state of the renderer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _fillValues(listGUIElements: lil.Controller[], obj: any): void {\n    for (let i = 0; i < listGUIElements.length; ++i) {\n        const elem = listGUIElements[i];\n        const property = elem.property.split(\"_\")[1];\n        (elem.object as any)[elem.property] = this._readValue(obj, property);\n        elem.updateDisplay();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Forces to Specific Thin Instances in Babylon.js\nDESCRIPTION: Shows how to apply forces to specific instances when a physics body's transform node contains Thin Instances. By providing an instance index parameter, forces can be applied to individual instances rather than all instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/forces.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Apply a force to the first instance ONLY\nbody.applyForce(new BABYLON.Vector3(100, 0, 0), new BABYLON.Vector3(0, 0, 0), 0);\n```\n\n----------------------------------------\n\nTITLE: Creating a Cone Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a cone particle emitter using `particleSystem.createConeEmitter`. It takes the radius (Number) and the cone's vertex angle (Number, in radians) as parameters. The cone is oriented with its axis along Y and vertex at the bottom. Requires an existing `particleSystem` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar coneEmitter = particleSystem.createConeEmitter(2, Math.PI / 3);\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshDebugPluginMaterial for TRIANGLES Mode in JavaScript\nDESCRIPTION: This snippet demonstrates how to prepare a mesh and apply the MeshDebugPluginMaterial to visualize its wireframe (triangles). It first calls `PrepareMeshForTrianglesAndVerticesMode` on the target mesh, which modifies the mesh data. Then, it instantiates the plugin on the mesh's material, setting the `mode` to `TRIANGLES` and customizing the wireframe color and thickness. Note that `PrepareMeshForTrianglesAndVerticesMode` significantly increases vertex/triangle count and returns a rollback function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/visualizeMeshData.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.MeshDebugPluginMaterial.PrepareMeshForTrianglesAndVerticesMode(mesh);\n\nnew BABYLON.MeshDebugPluginMaterial(mesh.material, {\n    mode: BABYLON.MeshDebugMode.TRIANGLES,\n    wireframeTrianglesColor: new BABYLON.Color3(0, 0, 0),\n    wireframeThickness: 0.7\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Getting World Bounding Box Min/Max for Two Meshes in Babylon.js (JavaScript)\nDESCRIPTION: Retrieves the minimum and maximum corner coordinates (in world space) of the bounding boxes for 'sphere' and 'ground' meshes. It uses the `minimumWorld` and `maximumWorld` properties of the mesh's `boundingBox`, which account for the mesh's position, rotation, and scaling within the scene hierarchy. Requires 'sphere' and 'ground' to be valid Babylon.js mesh objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet sphereMin = sphere.getBoundingInfo().boundingBox.minimumWorld;\nlet sphereMax = sphere.getBoundingInfo().boundingBox.maximumWorld;\n\nlet groundMin = ground.getBoundingInfo().boundingBox.minimumWorld;\nlet groundMax = ground.getBoundingInfo().boundingBox.maximumWorld;\n```\n\n----------------------------------------\n\nTITLE: CubeTextureAssetTask Constructor and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Shows the constructor and output for a cube texture task. Supports optional extensions, mipmaps, and manual file arrays. Provides the resulting CubeTexture instance on the 'public texture' property. This is essential for environment mapping and skyboxes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, url: string, extensions?: string[], noMipmap?: boolean, files?: string[])\n\npublic texture: CubeTexture;\n```\n\n----------------------------------------\n\nTITLE: Instantiating Section Data for Track Creation in Babylon.js (JavaScript)\nDESCRIPTION: This line shows the instantiation of a `sectionData` object using its constructor. It passes the starting index (`startAt`) and an `options` object containing configuration parameters (like lean, turn, twists, waves) for a specific track section. This object encapsulates the settings for a segment of the track.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track_Code.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar section = new sectionData(startAt, options);\n```\n\n----------------------------------------\n\nTITLE: Setting a Mesh as the SubEmitter's ParticleSystem Emitter (JavaScript)\nDESCRIPTION: To ensure proper orientation and attachment of sub emitters, this code assigns a Babylon.js Mesh as the emitter for a sub emitter’s particle system. This is particularly necessary for ATTACHED sub emitters. Dependencies include Babylon.js and an active scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/subEmitters.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsubEmitter.particleSystem.emitter = new BABYLON.Mesh(\"\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Rope Soft Body with Lines in Babylon.js\nDESCRIPTION: Shows how to create a rope soft body using a lines mesh, including setting up the physics impostor and adjusting its properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar rope = BABYLON.MeshBuilder.CreateLines(\"lines\", { points: myPoints }, scene);\nrope.color = BABYLON.Color3.Black();\n\nrope.physicsImpostor = new BABYLON.PhysicsImpostor(rope, BABYLON.PhysicsImpostor.RopeImpostor, { mass: 2 }, scene);\nrope.physicsImpostor.velocityIterations = 20;\nrope.physicsImpostor.positionIterations = 20;\nrope.physicsImpostor.stiffness = 0.8;\n```\n\n----------------------------------------\n\nTITLE: Creating GreasedLines Using Lazy Mode in JavaScript\nDESCRIPTION: Shows how to use lazy mode for potentially better performance when creating multiple lines or instances. Lines are created with `lazy: true`, and geometry buffers are not updated immediately. `line.updateLazy()` must be called afterwards to finalize the mesh geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { lazy: true, points });\n\nconst points2 = [-1, 1, 0, 1, 1, 0];\nBABYLON.CreateGreasedLine(\"line\", { instance: line, lazy: true, points: points2 });\n\nconst points3 = [-1, -1, 0, 1, -1, 0];\nBABYLON.CreateGreasedLine(\"line\", { instance: line, lazy: true, points: points3 });\n\nline.updateLazy();\n```\n\n----------------------------------------\n\nTITLE: Best Practices for Variable Type Consistency in JavaScript\nDESCRIPTION: This snippet shows the recommended practice of maintaining consistent variable types after initialization, which helps JavaScript engines optimize code execution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/optimize_sps.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.vars.myFloat = 0.01; // just keep setting float values to myFloat afterwards\nSPS.vars.myInt = 5; // just keep setting integer values to myInt afterwards\nSPS.vars.myString = \"foo\"; // just keep setting string values to myString afterwards\n```\n\n----------------------------------------\n\nTITLE: Removing View in Babylon.js\nDESCRIPTION: Demonstrates how to unregister a previously created view, removing it from the engine's view management system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiCanvas.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nengine.unRegisterView(document.getElementById(\"renderCanvas1\"));\n```\n\n----------------------------------------\n\nTITLE: Importing ImageFilter Control in JavaScript\nDESCRIPTION: Imports the ImageFilter class from the installed '@babylonjs/controls' package, making it available for use in the JavaScript code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageFilter } from \"@babylonjs/controls/imageFilter\";\n```\n\n----------------------------------------\n\nTITLE: Setting Clear Coat Roughness in Babylon.js PBR Material\nDESCRIPTION: This JavaScript snippet adjusts the roughness of the clear coat layer on a Babylon.js PBR material, separate from the base material's roughness. Setting `clearCoat.roughness` allows simulating variations in the coating's surface, like a used or less glossy finish. Assumes `pbr` is an existing `BABYLON.PBRMaterial` instance with clear coat enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\npbr.clearCoat.roughness = 0.15;\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Scripts in package.json\nDESCRIPTION: Package.json script configurations for building shader blocks using Smart Filters build tools. Includes commands for running buildShaders.js and typescript compilation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/creatingNewBlocks.md#2025-04-23_snippet_4\n\nLANGUAGE: package.json\nCODE:\n```\n\"build\": \"npm run build:runTools && npm run build:blocks\",\n\"build:runTools\": \"node ./node_modules/@babylonjs/smart-filters/dist/utils/buildTools/buildShaders.js ./src/blocks @babylonjs/smart-filters\",\n\"build:blocks\": \"tsc -p ./tsconfig.build.json\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Bone Transform Without Mesh Reference\nDESCRIPTION: Example showing incorrect bone position calculation when the mesh is not passed to the bone methods, resulting in wrong positioning as the skinned mesh transform is not taken into account.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onBeforeRenderObservable.add(() => {\n  box.position.copyFrom(bone.getPosition(BABYLON.Space.WORLD));\n  box.rotation.copyFrom(bone.getRotation(BABYLON.Space.WORLD));\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating SkeletonViewer in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an instance of the `BABYLON.Debug.SkeletonViewer`. It requires the target skeleton, the attached mesh (or a node with the same global matrix), the scene, an optional flag to auto-update bone matrices, an optional rendering group ID, and optional configuration options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet skeletonView = new BABYLON.Debug.SkeletonViewer(\n  skeleton, //Target Skeleton\n  mesh, //That skeletons Attached Mesh or a Node with the same globalMatrix\n  scene, //The Scene scope\n  false, //autoUpdateBoneMatrices?\n  mesh.renderingGroupId > 0 ? mesh.renderingGroupId + 1 : 1, // renderingGroupId\n  options, //Configuration Options\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Applying UV Coordinates to Car Body Edge in JavaScript\nDESCRIPTION: Maps the edge face of the car body to the lower half of the texture image, covering the sides and front/back of the car.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/carmat.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[1] = new BABYLON.Vector4(0, 0, 1, 0.5);\n```\n\n----------------------------------------\n\nTITLE: Integration with Timeline Control\nDESCRIPTION: Example of integrating the Resizer with Timeline control for efficient thumbnail generation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/resizer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst resizer = new Resizer(canvas);\nconst timeline = new Timeline(resizer, {\n    [...]\n    getThumbnailCallback: (time: number) => {\n        hiddenVideo.currentTime = time;\n        return resizer.getResizedTexture(hiddenVideo, { width: 128, height: 100 });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Environment Settings in Babylon.js\nDESCRIPTION: Examples of modifying environment settings using helper options and methods\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar helper = scene.createDefaultEnvironment();\nhelper.setMainColor(BABYLON.Color3.Teal());\n```\n\n----------------------------------------\n\nTITLE: Configuring BoundingBoxGizmo to Ignore Children in Babylon.js\nDESCRIPTION: Demonstrates how to configure a BoundingBoxGizmo to ignore children of the attached mesh for performance optimization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngizmo.ignoreChildren = true;\n```\n\n----------------------------------------\n\nTITLE: HDRCubeTextureAssetTask Constructor and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Documents the creation of an HDR cube texture task, allowing optional configuration for mipmaps, harmonics, gamma, and PMREM. The returned texture is an HDRCubeTexture. This asset type is crucial for advanced PBR and lighting scenarios.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, url: string, size?: number, noMipmap = false, generateHarmonics = true, useInGammaSpace = false, usePMREMGenerator = false)\n\npublic texture: HDRCubeTexture;\n```\n\n----------------------------------------\n\nTITLE: Adding Normal Maps to Tri-Planar Material in Babylon.js\nDESCRIPTION: This snippet illustrates how to add normal maps to the tri-planar material for enhanced visual quality. It shows that normal textures can be set independently for each axis or shared.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/triPlanarMat.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar triPlanarMaterial = new BABYLON.TriPlanarMaterial(\"triplanar\", scene);\n// ...\n\n// In the case of normal maps, it is not necessary to set the 3 textures\ntriPlanarMaterial.normalTextureX = new BABYLON.Texture(\"textures/rockn.png\", scene);\ntriPlanarMaterial.normalTextureY = new BABYLON.Texture(\"textures/grassn.png\", scene);\ntriPlanarMaterial.normalTextureZ = triPlanarMaterial.normalTextureX;\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Particle System Set Asynchronously in JavaScript\nDESCRIPTION: Demonstrates the basic usage of `BABYLON.ParticleHelper.CreateAsync` to load a predefined particle effect (e.g., \"sun\") associated with a scene. The method returns a Promise that resolves with a `ParticleSystemSet` object, which is then started.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particleHelper.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ParticleHelper.CreateAsync(\"sun\", scene).then((set) => {\n    set.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Automatic Shadow Z-Bounds Calculation in Babylon.js\nDESCRIPTION: Improve shadow precision by automatically calculating the optimal shadowMinZ and shadowMaxZ values. This feature helps tighten the depth map bounds for better shadow rendering quality, but may cause issues with PCF and PCSS filtering in some cases.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlight.autoCalcShadowZBounds = true; // Automatically compute best Z bounds\nlight.autoUpdateExtends = true; // Required for autoCalcShadowZBounds to work\n```\n\n----------------------------------------\n\nTITLE: Setting up AttachToBoxBehavior in BabylonJS\nDESCRIPTION: Implements behavior for attaching meshes or UI elements to a mesh's bounding box with positioning options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/meshBehaviors.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst behavior = new BABYLON.AttachToBoxBehavior(appBar);\nboundingBox.addBehavior(behavior);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbehavior.distanceAwayFromFace = 0.15;\nbehavior.distanceAwayFromBottomOfFace = 0.15;\n```\n\n----------------------------------------\n\nTITLE: Drawing Arcs with Greased Lines in Babylon.js\nDESCRIPTION: Creates an arc using three random points and renders it as a Greased Line. This demonstrates how to generate curve points and create a line from them.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = new BABYLON.Vector3(-0.5 + Math.random(), -0.5 + Math.random(), -0.5 + Math.random()).scale(20);\nconst s = new BABYLON.Vector3(-0.5 + Math.random(), -0.5 + Math.random(), -0.5 + Math.random()).scale(20);\nconst t = new BABYLON.Vector3(-0.5 + Math.random(), -0.5 + Math.random(), -0.5 + Math.random()).scale(20);\n\nconst arc = BABYLON.Curve3.ArcThru3Points(f, s, t);\nconst arcLine = BABYLON.CreateGreasedLine(\"arc\", { points: arc.getPoints() });\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Water Shader for Unity in Babylon.js\nDESCRIPTION: This snippet shows the Unity shader file definition for a water material. It defines properties like water color, wave speed, and normal maps that will be used by the Babylon.js water material at runtime. The CGINCLUDE section specifies which controller class will handle the material's behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/03_ShaderMaterials.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    Shader \"Babylon/Library Materials/Water Material\"\n    {\n        Properties {\n            _WaterColor(\"Main Color\", Color) = (0.1, 0.1, 0.6,1.0)\n            _BumpMap(\"Normal Map\", 2D) = \"bump\" {}\n            _TagIndex(\"Tag Index\", Int) = 0\n            _WindForce(\"Wind Force\", Float) = 6\n            _WaveSpeed(\"Wave Speed\", Float) = 1.0\n            _WaveLength(\"Wave Length\", Float) = 0.1\n            _WaveHeight(\"Wave Height\", Float) = 0.4\n            _BumpHeight(\"Bump Height\", Float) = 0.4\n            _ColorBlendFactor(\"Blend Factor\", Float) = 0.2\n            _SecondBlendFactor(\"Second Factor\", Float) = 0.2\n            _WindDirectionX(\"Wind Direction X\", Float) = 0.0\n            _WindDirectionY(\"Wind Direction Y\", Float) = 1.0\n            _SecondColor(\"Secondary Color\", Color) = (0.1, 0.1, 0.6,1.0)\n            _SpecColor(\"Specular Color\", Color) = (0.0,0.0,0.0,1.0)\n            _Shininess(\"Specular Power\", Range(0.0, 1.0)) = 0.5\n            _Color(\"Diffuse Color\", Color) = (1.0,1.0,1.0,1.0)\n\n            [ToggleOff] _Wireframe(\"Show Wireframe\", Int) = 0\n            [ToggleOff] _BackFaceCulling(\"Back Face Culling\", Int) = 1\n            [ToggleOff] _DisableLighting(\"Disable Surface Lighting\", Int) = 0\n            _MaxSimultaneousLights(\"Max Simultaneous Lights\", Int) = 4\n\n            [HideInInspector] _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n        }\n\n        CGINCLUDE\n        #ifdef BABYLON_INFO\n            controller: \"BABYLON.WaterMaterialController\"\n        #endif //BABYLON_INFO_END\n        ENDCG\n\n        SubShader {\n            Tags { \"RenderType\"=\"Opaque\" }\n            LOD 300\n\n            CGPROGRAM\n            #pragma surface surf Lambert\n\n            sampler2D _MainTex;\n            sampler2D _BumpMap;\n            fixed4 _WaterColor;\n\n            struct Input {\n                float2 uv_MainTex;\n                float2 uv_BumpMap;\n            };\n\n            void surf (Input IN, inout SurfaceOutput o) {\n                o.Albedo = _WaterColor.rgb;\n                o.Alpha = _WaterColor.a;\n                o.Normal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));\n            }\n            ENDCG\n        }\n        FallBack \"Legacy Shaders/Diffuse\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Mesh Tracking for Controls in Babylon.js GUI (JavaScript)\nDESCRIPTION: Explains how to make Babylon.js GUI controls track the position of 3D meshes by linking controls to meshes and adjusting offsets. The 'linkWithMesh' method attaches the control to a mesh, while 'linkOffsetX' and 'linkOffsetY' allow positional adjustments in pixels. These features require controls to be at the AdvancedDynamicTexture root level and in fullscreen mode, with Babylon.js as a dependency.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.linkWithMesh(mesh);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.linkOffsetX = 10;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.linkOffsetY = -5;\n```\n\n----------------------------------------\n\nTITLE: Creating Thin Instances with Pre-built Buffers\nDESCRIPTION: Advanced technique for creating thin instances using pre-built buffers for matrices and custom attributes. This method offers the best performance when creating large numbers of thin instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvar matrix1 = BABYLON.Matrix.Translation(-2, 2, 0);\nvar matrix2 = BABYLON.Matrix.IdentityReadOnly;\nvar matrix3 = BABYLON.Matrix.Translation(2, 1, 0);\n\nvar bufferMatrices = new Float32Array(16 * 3);\n\nmatrix1.copyToArray(bufferMatrices, 0);\nmatrix2.copyToArray(bufferMatrices, 16);\nmatrix3.copyToArray(bufferMatrices, 32);\n\nvar bufferColors = new Float32Array(3 * 4);\n\nbufferColors.set([1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1]);\n\nsphere.thinInstanceSetBuffer(\"matrix\", bufferMatrices, 16);\nsphere.thinInstanceSetBuffer(\"color\", bufferColors, 4);\n```\n\n----------------------------------------\n\nTITLE: Defining ILoadingScreen Interface in JavaScript\nDESCRIPTION: This code snippet defines the interface for a custom loading screen in Babylon.js. It specifies the required methods and properties that need to be implemented.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/customLoadingScreen.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface ILoadingScreen {\n  //What happens when loading starts\n  displayLoadingUI: () => void;\n  //What happens when loading stops\n  hideLoadingUI: () => void;\n  //default loader support. Optional!\n  loadingUIBackgroundColor: string;\n  loadingUIText: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Camera Gravity in Babylon.js\nDESCRIPTION: Enables gravity effect on a camera by setting the applyGravity property to true.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.applyGravity = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Value of GUITextfield in JavaScript\nDESCRIPTION: Method to set the value of the text field.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextfield.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetValue() → void\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Model Loading in Babylon.js Viewer\nDESCRIPTION: Demonstrates how to load models asynchronously after viewer initialization, including switching between models after specified time intervals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nBabylonViewer.viewerManager.getViewerPromiseById(\"babylon-viewer\").then(function (viewer) {\n  // this will resolve only after the viewer with this specific ID is initialized\n\n  viewer.onEngineInitObservable.add(function (scene) {\n    viewer.loadModel({\n      title: \"Helmet\",\n      subtitle: \"BabylonJS\",\n      thumbnail: \"https://www.babylonjs.com/img/favicon/apple-icon-144x144.png\",\n      url: \"https://www.babylonjs.com/assets/DamagedHelmet/glTF/DamagedHelmet.gltf\",\n    });\n\n    // load another model after 20 seconds. Just to show it is possible\n    setTimeout(() => {\n      viewer.loadModel({\n        title: \"Rabbit\",\n        subtitle: \"BabylonJS\",\n        thumbnail: \"https://www.babylonjs.com/img/favicon/apple-icon-144x144.png\",\n        url: \"https://playground.babylonjs.com/scenes/Rabbit.babylon\",\n      });\n    }, 20000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Lantern Mesh in Assets Object\nDESCRIPTION: Adds the extracted lantern mesh to the assets object being returned by the load function. This makes the lantern mesh available for cloning when creating multiple lantern instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n    //..envrionment meshes\n    lantern: lantern as Mesh,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styles in Babylon.js GUI\nDESCRIPTION: Demonstrates how to create and apply shared styles to GUI controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst style = advancedTexture.createStyle();\nstyle.fontSize = 24;\nstyle.fontStyle = \"italic\";\nstyle.fontFamily = \"Verdana\";\n```\n\n----------------------------------------\n\nTITLE: Creating a GreasedLine with a Specific Color in JavaScript\nDESCRIPTION: Creates a GreasedLine and sets its color to red during initialization using the `color` option. This applies the color uniformly to the entire line.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points }, { color: BABYLON.Color3.Red() });\n```\n\n----------------------------------------\n\nTITLE: Creating AdvancedDynamicTexture for Mesh (Texture Mode) - JavaScript\nDESCRIPTION: This snippet demonstrates creating a Babylon.js AdvancedDynamicTexture in texture mode, attaching it to a specific mesh. You pass the mesh (e.g., 'myPlane') and the desired texture resolution (e.g., 1024x1024). The created texture can display GUI controls over the mesh surface. Dependencies: A Babylon.js mesh object and the Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst advancedTexture2 = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(myPlane, 1024, 1024);\n```\n\n----------------------------------------\n\nTITLE: Creating Selector Groups (Generic Structure) in JavaScript\nDESCRIPTION: Shows the generic constructor pattern for creating different types of selector groups (CheckboxGroup, RadioGroup, SliderGroup) within Babylon.js GUI. Replace `<Type>` with the specific group type and provide a header string.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.GUI.<Type>Group(header)\n```\n\n----------------------------------------\n\nTITLE: Getting Local Bounding Box Min/Max for Two Meshes in Babylon.js (JavaScript)\nDESCRIPTION: Retrieves the minimum and maximum corner coordinates (in local object space) of the bounding boxes for two distinct meshes, 'sphere' and 'ground'. It accesses the `boundingBox` property within the `BoundingInfo` of each mesh. Requires 'sphere' and 'ground' to be valid Babylon.js mesh objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet sphereMin = sphere.getBoundingInfo().boundingBox.minimum;\nlet sphereMax = sphere.getBoundingInfo().boundingBox.maximum;\n\nlet groundMin = ground.getBoundingInfo().boundingBox.minimum;\nlet groundMax = ground.getBoundingInfo().boundingBox.maximum;\n```\n\n----------------------------------------\n\nTITLE: Linking a 3D GUI Control to a Transform Node or Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to attach a Babylon.js 3D GUI control to a specific mesh or transform node in the scene using the linkToTransformNode method. This ensures the control follows the parent transform, with position and scaling becoming local to the parent node or mesh. Requires a control object and an anchor node; expected input is the target anchor, and there is no explicit output. Proper use involves first adding the control to a container or GUI3DManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncontrol.linkToTransformNode(anchor);\n```\n\n----------------------------------------\n\nTITLE: Retrieving GUI Element by ID in JavaScript\nDESCRIPTION: Fetches a specific GUI element managed by the GUIManager using its ID. Returns a GUIElement object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetElementById(string)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GreasedLine Function Signature\nDESCRIPTION: Function signature for creating a GreasedLine mesh with name, options, material options and scene parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CreateGreasedLine(name: string, options: GreasedLineMeshBuilderOptions, materialOptions?: Nullable<GreasedLineMaterialBuilderOptions>, scene?: Nullable<Scene>)\n```\n\n----------------------------------------\n\nTITLE: Excluding Skinned Mesh from Motion Blur in Babylon.js\nDESCRIPTION: Optimize performance by excluding specific skinned meshes from bone velocity calculations in the motion blur effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/motionBlurPostProcess.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmotionblur.excludeSkinnedMesh(mySkinnedMesh);\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Procedural Texture in JSON\nDESCRIPTION: Example `config.json` file for a file-based custom procedural texture. It defines properties like `animate` (boolean), `refreshrate` (integer), `uniforms` (like floats, vectors, colors passed to the shader), and `sampler2Ds` (texture inputs with names and relative paths).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    {\n     \"animate\": false,\n     \"refreshrate\": 0,\n     \"uniforms\": [\n      {\n          \"type\": \"float\",\n          \"name\": \"dirtAmplifier\",\n          \"value\": \"6.0\"\n      }\n  ],\n     \"sampler2Ds\": [\n      {\n          \"sample2Dname\": \"dirt\",\n          \"textureRelativeUrl\": \"textures/dirt.jpg\"\n      },\n      {\n          \"sample2Dname\": \"grass\",\n          \"textureRelativeUrl\": \"textures/grass.png\"\n      }\n     ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Frustum Edge Falloff in Babylon.js (JavaScript)\nDESCRIPTION: Sets the `frustumEdgeFalloff` property of a `shadowGenerator` object, used for directional and spot lights. This controls how shadows fade out near the edges of the light's view frustum, providing a smoother transition. A value of 0 means no falloff (default), and 1.0 means complete falloff. This requires an existing `shadowGenerator` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.frustumEdgeFalloff = 1.0;\n```\n\n----------------------------------------\n\nTITLE: Initializing SixDofDragBehavior in Babylon.js - JavaScript\nDESCRIPTION: Creates a new instance of the SixDofDragBehavior, which enables six degrees of freedom interaction for 3D objects. No external dependencies are required aside from Babylon.js itself. The constructor instantiates the behavior but does not yet attach it to any mesh; you must subsequently associate it with a mesh to enable functionality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/mrtk.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sixDofDragBehavior = new BABYLON.SixDofDragBehavior();\n```\n\n----------------------------------------\n\nTITLE: Rendering the Original Mesh as a Thin Instance\nDESCRIPTION: Demonstrates how to include the original mesh in the thin instance rendering using thinInstanceAddSelf(). This method returns an index that can be used to reference this instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar idx2 = sphere.thinInstanceAddSelf();\n```\n\n----------------------------------------\n\nTITLE: Applying Animation to Mesh in Babylon.js\nDESCRIPTION: Connects the animation to a specific wheel mesh by setting its keyframes, adding the animation to the mesh's animations array, and starting the animation with scene.beginAnimation().\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/animation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//set the keys\nanimWheel.setKeys(wheelKeys);\n\n//Link this animation to the right back wheel\nwheelRB.animations = [];\nwheelRB.animations.push(animWheel);\n\n//Begin animation - object to animate, first frame, last frame and loop if true\nscene.beginAnimation(wheelRB, 0, 30, true);\n```\n\n----------------------------------------\n\nTITLE: Disabling Scene Picking on Pointer Move in Babylon.js\nDESCRIPTION: Shows how to disable scene picking on pointer move to improve performance by skipping mesh checks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscene.skipPointerMovePicking = true;\n```\n\n----------------------------------------\n\nTITLE: Creating and Showing a Ray Helper (Instance Method) in Babylon.js\nDESCRIPTION: Instantiates a `BABYLON.RayHelper` object associated with a specific `BABYLON.Ray`. The visual representation of the ray helper is then explicitly added to the scene using its `show` method. This provides more control compared to the static method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar rayHelper = new BABYLON.RayHelper(ray);\nrayHelper.show(scene);\n```\n\n----------------------------------------\n\nTITLE: Animating Shader Time Uniform in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript code implements the animation loop for the firework effect using Babylon.js's `scene.registerBeforeRender`. It increments a `time` variable in each frame (up to a maximum value of 8) and passes this value as a uniform named \"time\" to the sphere's `shaderMaterial` using `setFloat`. This uniform drives the time-dependent calculations in both the vertex and fragment shaders. Once the time limit is exceeded, the sphere mesh is removed from the scene using `sphere.dispose()`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing2.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = 0;\nvar time = 0;\nscene.registerBeforeRender(function () {\n  if (time < 8) {\n    sphere.material.setFloat(\"time\", time);\n    time += 0.1;\n  } else {\n    sphere.dispose();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lottie Texture Options\nDESCRIPTION: Example showing available configuration options when loading a Lottie texture, including size settings and playback behavior\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/lottieTexture.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait LottieTexture.LoadFromUrlAsync(\"name\", \"/lottie.json\", scene, {\n    useAnimeSize: false, // If true then use the width and height set in the animation file\n    autoPlay: true,\n    width: 512,\n    height: 512,\n    loop: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Loading a Mesh Using the Asset Librarian in Babylon.js\nDESCRIPTION: This snippet demonstrates how to use the Asset Librarian to load the Pirate Fort mesh into a Babylon.js scene. It utilizes the Assets namespace to access the asset's rootUrl and filename.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibrarian.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(Assets.meshes.pirateFort.rootUrl + Assets.meshes.pirateFort.filename, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Offset\nDESCRIPTION: Sets the rotation angle in radians around the target's center in the XY plane.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.rotationOffset = 0;\n```\n\n----------------------------------------\n\nTITLE: Applying Fade-Out Effect to GUI Element in JavaScript\nDESCRIPTION: Applies a fade-out animation effect to a specified GUI element managed by the GUIManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfadeOut(element)\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Touch Action on Canvas for PEP\nDESCRIPTION: This HTML snippet demonstrates how to disable the default touch action on the rendering canvas when using PEP for touch event support in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/interactWithScenes.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<canvas id=\"renderCanvas\" touch-action=\"none\"></canvas>\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Types for Babylon Viewer in React\nDESCRIPTION: TypeScript interface and global namespace declaration for adding type support for the babylon-viewer custom element in React applications. Includes basic attributes like source and environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/react.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HTML3DElementAttributes\n  extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {\n  source?: string;\n  environment?: string;\n}\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      'babylon-viewer': HTML3DElementAttributes;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ArrayBuffer Sound Loading in Babylon.js\nDESCRIPTION: Demonstrates how to load a sound from an ArrayBuffer using XMLHttpRequest.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst gunshotFromAB;\nloadArrayBufferFromURL(\"sounds/gunshot.wav\");\n\nfunction loadArrayBufferFromURL(urlToSound) {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", urlToSound, true);\n  request.responseType = \"arraybuffer\";\n  request.onreadystatechange = function () {\n    if (request.readyState == 4) {\n      if (request.status == 200) {\n        gunshotFromAB = new BABYLON.Sound(\"FromArrayBuffer\", request.response, scene, soundReadyToBePlayed);\n      }\n    }\n  };\n  request.send(null);\n}\n\nfunction soundReadyToBePlayed() {\n  gunshotFromAB.play();\n}\n```\n\n----------------------------------------\n\nTITLE: Running KTX Batch Processing Commands in Command Shell - DOS\nDESCRIPTION: This snippet shows the command-line procedure for navigating to the image directory and executing batch scripts for generating KTX texture files using the command shell. The process includes changing to the relevant directory and invoking scripts to batch convert images. Key parameters include the 'Q' setting for quality, which significantly impacts processing time and system resources. Prerequisites: batch script files (make-ktx-batch and ktx-batch) must be available in the system PATH, and input images should be placed in the working directory. Outputs are multiple KTX format variations for each image; existing files are skipped unless deleted first.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/mutliPlatTextures.md#2025-04-23_snippet_3\n\nLANGUAGE: dos\nCODE:\n```\ncd my-directory-with-images\\nmake-ktx-batch Q\\nktx-batch\n```\n\n----------------------------------------\n\nTITLE: Animation Reset Logic in Babylon.js\nDESCRIPTION: Handles position and rotation reset logic for preventing error accumulation in animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (p === 0) {\n    distance = 0;\n    sphere.position = new BABYLON.Vector3(2, 0, 2); //reset to initial conditions\n    sphere.rotation = BABYLON.Vector3.Zero();//prevents error accumulation \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tint Effect Block using Annotated GLSL\nDESCRIPTION: Sample implementation of a tint effect block using annotated GLSL. The block applies a color tint to the input texture with configurable tint color and amount. Includes required metadata annotations and uniform declarations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/creatingNewBlocks.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n// { \"smartFilterBlockType\": \"SerializedTintBlock\" }\n\nuniform sampler2D input;\n// { \"default\": { \"r\": 1, \"g\": 0, \"b\": 0 } }\nuniform vec3 tint;\n// { \"default\": 0.25 }\nuniform float amount;\n\nvec4 mainImage(vec2 vUV) { // main\n    vec4 color = texture2D(input, vUV);\n    vec3 tinted = mix(color.rgb, tint, amount);\n    return vec4(tinted, color.a);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Anti-Aliasing for GlowLayer in Babylon.js\nDESCRIPTION: Sets up Multi-Sample Anti-Aliasing (MSAA) for the GlowLayer to reduce aliasing artifacts. This option is only available on WebGL2 capable browsers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/glowLayer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new BABYLON.GlowLayer(\"glow\", scene, {\n  mainTextureSamples: 4\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic in FlowGraphBranchBlock _execute Method (TypeScript)\nDESCRIPTION: Details the `_execute` method implementation for `FlowGraphBranchBlock`. This method retrieves the value of the `condition` input using `getValue(context)` and then activates either the `onTrue` or `onFalse` signal output using `_activateSignal(context)` based on the boolean result.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\npublic _execute(context: FlowGraphContext): void {\n    // get the value of condition\n    if (this.condition.getValue(context)) {\n        // if it is true - execute the onTrue signal\n        this.onTrue._activateSignal(context);\n    } else {\n        // otherwise execute the onFalse trigger\n        this.onFalse._activateSignal(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ShaderMaterial with WGSL in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a ShaderMaterial using WGSL as the shader language. It sets up the necessary attributes and uniform buffers for the shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mat = new BABYLON.ShaderMaterial(\"shader\", scene, {\n        vertex: \"myShader\",\n        fragment: \"myShader\",\n    },\n    {\n        attributes: [\"position\", \"uv\", \"normal\"],\n        uniformBuffers: [\"Scene\", \"Mesh\"],\n        shaderLanguage: BABYLON.ShaderLanguage.WGSL,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Inputs/Outputs for a Custom Flow Graph Block (TypeScript)\nDESCRIPTION: Illustrates the definition of input (`array`, `index`) and output (`value`) data connections using `FlowGraphDataConnection` within a custom Flow Graph block class (`FlowGraphArrayIndexBlock`). Type annotations `<T[]>` and `<FlowGraphInteger>` specify the expected data types.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic readonly array: FlowGraphDataConnection<any[]>;\npublic readonly index: FlowGraphDataConnection<FlowGraphInteger>;\npublic readonly value: FlowGraphDataConnection<any>;\n```\n\n----------------------------------------\n\nTITLE: Attaching Pipeline to Scene and Camera in Babylon.js\nDESCRIPTION: Adds the pipeline to the scene's manager and attaches it to the specified camera for rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/postProcessRenderPipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.postProcessRenderPipelineManager.addPipeline(standardPipeline);\nscene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"standardPipeline\", camera);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Depth Sensing Data in Babylon.js WebXR (TypeScript)\nDESCRIPTION: This TypeScript code illustrates how to consume runtime depth sensing data after enabling the feature. It demonstrates registering an XR frame observer to read depth properties and buffer data, and how to access the getDepthInMeters callback for retrieving depth at screen coordinates. Key dependencies include the session manager and material handling; outputs include updated material textures and console logs for measured depth.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nsessionManager.onXRFrameObservable.add(() => {\\n  const {\\n    depthUsage, // \\\"cpu\\\" or \\\"gpu\\\"\\n    depthDataFormat, // \\\"ushort\\\" or \\\"float\\\"\\n\\n    width, // depth image width\\n    height, // depth image height\\n\\n    rawValueToMeters, // operator of obtain depth value in meters\\n\\n    normDepthBufferFromNormView, // An XRRigidTransform\\n\\n    latestDepthImageTexture, // RawTexture for depth image\\n    latestDepthBuffer, // depth value array (cpu only)\\n    latestInternalTexture, // InternalTexture of depth image (gpu only)\\n  } = depthSensing;\\n\\n  // apply depth texture to a material\\n  material.diffuseTexture = latestDepthImageTexture;\\n});\\n\\n// observe `getDepthInMeters` is available\\ndepthSensing.onGetDepthInMetersAvailable.add((getDepthInMeters) => {\\n  // depth value of center point of the screen\\n  const meters = getDepthInMeters(0.5, 0.5);\\n  console.log(meters);\\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Data via 'props' Property to SPS Particle in JavaScript/TypeScript\nDESCRIPTION: This code demonstrates assigning custom data to a particle within a Solid Particle System (SPS) using the built-in `props` property. An object containing key-value pairs (`myProp1`, `myProp2`) is assigned to `particle.props`, allowing flexible storage of custom particle attributes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nparticle.props = { myProp1: val1, myProp2: val2 };\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Cascades for CSM in Babylon.js JavaScript\nDESCRIPTION: Configures the 'numCascades' property on a CascadedShadowGenerator, controlling how many camera frustum cascades are used (between 2 and 4). More cascades can increase shadow detail and coverage at varying depths.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.numCascades = 3;\n```\n\n----------------------------------------\n\nTITLE: Initializing Reflection Fresnel Parameters in Babylon.js\nDESCRIPTION: Basic initialization of reflection Fresnel parameters for StandardMaterial. This creates a new FresnelParameters object that can be used to control how reflection is applied based on viewing angle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/fresnelParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.reflectionFresnelParameters = new BABYLON.FresnelParameters();\n```\n\n----------------------------------------\n\nTITLE: Handling Sound Callback in Babylon.js\nDESCRIPTION: Shows how to implement a callback function that executes after a sound has been loaded and decoded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = new BABYLON.Sound(\"Music\", \"music.wav\", scene, function () {\n  // Sound has been downloaded & decoded\n  music.play();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing String-based API in TypeScript for Vaporwear 3D Experience\nDESCRIPTION: This snippet shows the implementation of a string-based API for invoking various features of the Vaporwear 3D experience. It uses a switch statement to handle different action types.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic invokeAction(action: string) {\n    switch (action) {\n        case \"next-color\":\n            this._nextColor();\n            break;\n        case \"prev-color\":\n            this._prevColor();\n            break;\n        case \"next-pattern\":\n            this._nextPattern();\n            break;\n        case \"prev-pattern\":\n            this._prevPattern();\n            break;\n        case \"toggle-glow\":\n            this._toggleGlow();\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Extruded Shapes with Mesh.ExtrudeShape in Babylon.js (JavaScript)\nDESCRIPTION: This snippet uses the older Babylon.js Mesh.ExtrudeShape API to extrude a shape profile along a given path. It allows for specifying parameters like 'scale', 'rotation', 'cap', and whether the mesh is updatable or has a specific side orientation. The inputs are the name of the mesh, arrays of Vector3 for the profile and path, and various optional numbers and booleans. The output is a Mesh representing the extruded geometry. Babylon.js must be loaded, and a scene object should be present.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/extrude_shape.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet extrusion = BABYLON.Mesh.ExtrudeShape(name, shape, path, scale, rotation, cap, scene);\nlet extrusion = BABYLON.Mesh.ExtrudeShape(name, shape, path, scale, rotation, cap, scene, updatable, sideOrientation, instance); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Setting Snap Points Only Mode After WebXR Teleportation Initialization\nDESCRIPTION: Enables the snap points only mode after teleportation feature initialization, restricting user movement to only the defined hotspots without reinitializing the feature.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nteleportation.snapPointsOnly = true;\n```\n\n----------------------------------------\n\nTITLE: Handling Player-Lantern Intersection for Unlit Lanterns\nDESCRIPTION: Detects intersection between player and unlit lanterns. If the player's sparkler is lit and the lantern is unlit, the lantern is lit, the player's lit lantern count is incremented, and the sparkler timer is reset.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n//if the lantern is not lit, light it up & reset sparkler timer\nif (!lantern.isLit && player.sparkLit) {\n  player.lanternsLit += 1; //increment the lantern count\n  lantern.setEmissiveTexture(); //\"light up\" the lantern\n  //reset the sparkler\n  player.sparkReset = true;\n  player.sparkLit = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Ribbon Morphing in Babylon.js Render Loop\nDESCRIPTION: This snippet shows how to continuously morph a ribbon mesh within the Babylon.js render loop. It defines an `updatePath` function that modifies path points based on time (`k`) and position (`z`). Inside `scene.registerBeforeRender`, the `pathArray` is updated in each frame, and then `BABYLON.Mesh.CreateRibbon` (or `MeshBuilder.CreateRibbon`) is called with the `instance` parameter to apply the changes to the mesh, creating an animation effect. The variable `k` is incremented each frame to drive the animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst updatePath = function (path, k) {\n  for (let i = 0; i < path.length; i++) {\n    const x = path[i].x;\n    const z = path[i].z;\n    const y = 20 * Math.sin(i / 10) * Math.sin(k + z / 40);\n    path[i].x = x;\n    path[i].y = y;\n    path[i].z = z;\n  }\n};\n\n// path array population ...\nconst mesh = BABYLON.Mesh.CreateRibbon(\"ribbon\", pathArray, false, false, 0, scene, true);\n\n// morphing\nconst k = 0;\nscene.registerBeforeRender(function () {\n  // path array update\n  for (let p = 0; p < pathArray.length; p++) {\n    updatePath(pathArray[p], k);\n  }\n  // ribbon update\n  mesh = BABYLON.Mesh.CreateRibbon(null, pathArray, null, null, null, null, null, null, mesh);\n  // or also :\n  // mesh = BABYLON.MeshBuilder.CreateRibbon(null, {pathArray: pathArray, instance: mesh});\n  k += 0.05;\n});\n```\n\n----------------------------------------\n\nTITLE: Building NodeGeometry Graph with Contextual Values - Babylon.js (JavaScript)\nDESCRIPTION: This snippet constructs a procedural geometry graph in Babylon.js using NodeGeometry blocks, contextual value sources, and various Math, Random, and SetPosition blocks to create a randomized sphere mesh. Required dependency: Babylon.js library with NodeGeometry support. Main parameters include block instantiation, connection of outputs/inputs, and build triggers. Output is a dynamically generated mesh using contextual inputs like positions and normals. Exercise caution regarding computational cost for large graphs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Create node geometry\\nvar nodeGeometry = new BABYLON.NodeGeometry(\\\"nodegeo\\\");\\n\\n// GeometryInputBlock\\nvar Positions = new BABYLON.GeometryInputBlock(\\\"Positions\\\");\\nPositions.contextualValue = BABYLON.NodeGeometryContextualSources.Positions;\\n\\n// MathBlock\\nvar Add = new BABYLON.MathBlock(\\\"Add\\\");\\nAdd.operation = BABYLON.MathBlockOperations.Add;\\n\\n// MathBlock\\nvar Multiply = new BABYLON.MathBlock(\\\"Multiply\\\");\\nMultiply.operation = BABYLON.MathBlockOperations.Multiply;\\n\\n// GeometryInputBlock\\nvar Normals = new BABYLON.GeometryInputBlock(\\\"Normals\\\");\\nNormals.contextualValue = BABYLON.NodeGeometryContextualSources.Normals;\\n\\n// VectorConverterBlock\\nvar Converter = new BABYLON.VectorConverterBlock(\\\"Converter\\\");\\n\\n// RandomBlock\\nvar random = new BABYLON.RandomBlock(\\\"random\\\");\\n\\n// GeometryInputBlock\\nvar Min = new BABYLON.GeometryInputBlock(\\\"Min\\\", BABYLON.NodeGeometryBlockConnectionPointTypes.Float);\\nMin.value = 0;\\n\\n// GeometryInputBlock\\nvar Max = new BABYLON.GeometryInputBlock(\\\"Max\\\", BABYLON.NodeGeometryBlockConnectionPointTypes.Float);\\nMax.value = 1;\\n\\n// SetPositionsBlock\\nvar setpositions = new BABYLON.SetPositionsBlock(\\\"set positions\\\");\\n\\n// SphereBlock\\nvar sphere = new BABYLON.SphereBlock(\\\"sphere\\\");\\n\\n// GeometryOutputBlock\\nvar geometryout = new BABYLON.GeometryOutputBlock(\\\"geometryout\\\");\\n\\n// Connections\\nsphere.geometry.connectTo(setpositions.geometry);\\nPositions.output.connectTo(Add.left);\\nNormals.output.connectTo(Multiply.left);\\nMin.output.connectTo(random.min);\\nMax.output.connectTo(random.max);\\nrandom.output.connectTo(Converter.xIn);\\nrandom.output.connectTo(Converter.yIn);\\nrandom.output.connectTo(Converter.zIn);\\nConverter.xyzOut.connectTo(Multiply.right);\\nMultiply.output.connectTo(Add.right);\\nAdd.output.connectTo(setpositions.positions);\\nsetpositions.output.connectTo(geometryout.geometry);\\n\\n// Output nodes\\nnodeGeometry.outputBlock = geometryout;\\nnodegeo.onBuildObservable.addOnce(() => {\\n    var mesh = nodegeo.createMesh(\\\"nodegeomesh\\\");\\n})\\nnodegeo.build();\n```\n\n----------------------------------------\n\nTITLE: Removing Particle Angular Speed Gradient Point in Babylon.js\nDESCRIPTION: Shows how to use `removeAngularSpeedGradient` to remove a specific gradient point previously added for particle angular speed. The argument specifies the time fraction (e.g., 0.4) of the gradient point to remove.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeAngularSpeedGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Mapping Sprites to Box Faces Using faceUV in Babylon.js\nDESCRIPTION: This snippet shows how to map sprites from a texture atlas to each face of a box. It creates a UV mapping array where each face corresponds to a different sprite in the first row of the texture atlas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = 6; // 6 columns\nconst rows = 4; // 4 rows\n\nconst faceUV = new Array(6);\n\nfor (let i = 0; i < 6; i++) {\n  faceUV[i] = new BABYLON.Vector4(i / columns, 0, (i + 1) / columns, 1 / rows);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Physics Aggregate - V2 Implementation\nDESCRIPTION: V2 physics code using PhysicsAggregate, which provides similar functionality to V1 Impostors with automatic object creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/migrateFromV1.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\nconst aggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1, friction: 0.2, restitution: 0.3 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of GUITextfield in JavaScript\nDESCRIPTION: Method to check if the GUI element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextfield.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Transforming Controls with Rotation and Scaling in Babylon.js GUI (JavaScript)\nDESCRIPTION: Outlines property assignments for rotation, scaling, and transformation centers on Babylon.js GUI controls. Properties include 'rotation' (in radians), 'scaleX', 'scaleY', 'transformCenterX', and 'transformCenterY'. These affect display transformations for each control at render time, with rotation and scaling centered on specified anchor points. Values should be between 0 and 1 for transformation centers, and numeric for others.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.rotation = Math.PI / 4 // Set rotation in radians\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.scaleX = 1.2;\ncontrol.scaleY = 0.8;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.transformCenterX = 0.5;\ncontrol.transformCenterY = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Uniform Buffer in WGSL\nDESCRIPTION: This WGSL snippet shows how to declare a custom uniform buffer structure and variable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_4\n\nLANGUAGE: wgsl\nCODE:\n```\nstruct MyUBO {\n    scale: f32,\n};\n\nvar<uniform> myUBO: MyUBO;\n```\n\n----------------------------------------\n\nTITLE: Processing Vertex Data for Explosion Particles in Babylon.js\nDESCRIPTION: This code processes the vertex data of the explosion sphere to create colorful particle emitters. For each vertex, it generates random colors and prepares the data needed for the particle system to emit from these positions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < vertPos.length; i += 3) {\n  let vertPosition = new Vector3(vertPos[i], vertPos[i + 1], vertPos[i + 2]);\n  let vertNormal = new Vector3(vertNorms[i], vertNorms[i + 1], vertNorms[i + 2]);\n  let r = Math.random();\n  let g = Math.random();\n  let b = Math.random();\n  let alpha = 1.0;\n  let color = new Color4(r, g, b, alpha);\n  vertColors.push(r);\n  vertColors.push(g);\n  vertColors.push(b);\n  vertColors.push(alpha);\n  //..emitter for the particle system\n  //..actual particle system for each exploding piece\n}\nemitter.setVerticesData(VertexBuffer.ColorKind, vertColors);\n```\n\n----------------------------------------\n\nTITLE: Setting Cascade Blend Percentage in Babylon.js JavaScript\nDESCRIPTION: Sets the 'cascadeBlendPercentage', smoothing transitions and seams between frustum cascades. This value (0 to 1) controls the softness of cascade edges, helping reduce visible artifacts where shadow cascades meet.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.cascadeBlendPercentage = 0.05;\n```\n\n----------------------------------------\n\nTITLE: Loading Serialized VAT Data at Runtime in Babylon.js\nDESCRIPTION: This snippet shows how to load pre-baked vertex animation data from a JSON file at runtime. It fetches the JSON data, deserializes it, and creates a texture for animation without the performance cost of baking.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/baked_texture_animations.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet baker = null,\n  mesh = null;\nconst animationRanges = [{ from: 1, to: 20, name: \"My animation\" }];\n\n// read your mesh like always\nBABYLON.ImportMeshAsync(\"http://example.com/arr.babylon\", scene, undefined)\n  .then((importResult) => {\n    mesh = importResult.meshes[0];\n    // read the vertex data file.\n    return fetch(\"/vertexData.json\");\n  })\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(\"HTTP error \" + response.status);\n    }\n    // convert to json\n    return response.json();\n  })\n  .then((json) => {\n    // create the baker helper, so we can generate the texture\n    baker = new BABYLON.VertexAnimationBaker(scene, mesh);\n    const vertexData = baker.loadBakedVertexDataFromJSON(json);\n    // we got the vertex data. create the texture from it:\n    const vertexTexture = baker.textureFromBakedVertexData(vertexData);\n\n    // .... and now the same code as above\n  });\n```\n\n----------------------------------------\n\nTITLE: Registering Inputs/Outputs in FlowGraphBranchBlock Constructor (TypeScript)\nDESCRIPTION: Illustrates the constructor logic for `FlowGraphBranchBlock`, demonstrating how to register the `condition` data input using `registerDataInput` and the `onTrue` and `onFalse` signal outputs using `_registerSignalOutput`. Signal outputs do not require a type specification.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.condition = this.registerDataInput(\"condition\", RichTypeBoolean);\n// signal output don't need any type, as they hold no value\nthis.onTrue = this._registerSignalOutput(\"onTrue\");\nthis.onFalse = this._registerSignalOutput(\"onFalse\");\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Server for Debugging in Shell\nDESCRIPTION: This shell command shows how to run the Node.js server directly from a Command Prompt (CMD) or PowerShell window using `node server.js` within the project directory (`C:\\babylon`). This method is useful for viewing potential error messages if the server fails to start correctly when executed via the batch script.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/Running_a_local_webserver_for_BabylonJs.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nC:\\babylon> node server.js\n```\n\n----------------------------------------\n\nTITLE: Defining a Perlin2D Noise Generator Block for Node Material Editor - JSON\nDESCRIPTION: This snippet defines a \"Perlin2D\" block for the Node Material Editor via a JSON description. It accepts a 2D position vector, a float dimension, and a time value, then outputs a Perlin noise value as float. The block embeds GLSL code for computing Perlin noise using several helper functions and a main function, and exposes the function 'perlin'. Requires no extra dependencies beyond the Node Material Editor, and expects the standard editor environment for input and output connection. The code demonstrates multi-parameter input, float output, and encapsulated shader logic for randomization and noise computation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nme/customBlocks.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Perlin2D\",\n    \"comments\": \"Generates a Perlin noise single value given a vec2 and time\",\n    \"target\": \"Neutral\",\n    \"inParameters\": [\n        {\n            \"name\": \"p\",\n            \"type\": \"Vector2\"\n        },\n        {\n            \"name\": \"dim\",\n            \"type\": \"Float\"\n        },\n        {\n            \"name\": \"time\",\n            \"type\": \"Float\"\n        }\n    ],\n    \"outParameters\": [\n        {\n            \"name\": \"output\",\n            \"type\": \"Float\"\n        }\n    ],\n    \"functionName\": \"perlin\",\n    \"code\": [\n        \"float rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}\", \n        \"float rand(vec2 co, float l) {return rand(vec2(rand(co), l));}\", \n        \"float rand(vec2 co, float l, float t) {return rand(vec2(rand(co, l), t));}\", \n        \"\", \n        \"void perlin(vec2 p, float dim, float time, out float result) {\", \n        \"   vec2 pos = floor(p * dim);\", \n        \"   vec2 posx = pos + vec2(1.0, 0.0);\", \n        \"   vec2 posy = pos + vec2(0.0, 1.0);\", \n        \"   vec2 posxy = pos + vec2(1.0);\", \n        \"   \", \n        \"   float c = rand(pos, dim, time);\", \n        \"   float cx = rand(posx, dim, time);\", \n        \"   float cy = rand(posy, dim, time);\", \n        \"   float cxy = rand(posxy, dim, time);\", \n        \"   \", \n        \"   vec2 d = fract(p * dim);\", \n        \"   d = -0.5 * cos(d * 3.14159265358979323846) + 0.5;\", \n        \"   \", \n        \"   float ccx = mix(c, cx, d.x);\", \n        \"   float cycxy = mix(cy, cxy, d.x);\", \n        \"   float center = mix(ccx, cycxy, d.y);\", \n        \"   \", \n        \"   result = center * 2.0 - 1.0;\", \n        \"}\"\n    ]    \n}\n```\n\n----------------------------------------\n\nTITLE: Setting 'depthValuesSM' Uniform in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript code shows how the `depthValuesSM` vec2 uniform, used in the shadow map shader for depth metric calculation (see related shader snippet), is set using the Babylon.js Effect API. It passes the light's minimum Z depth (`getDepthMinZ`) as the first component and the sum of its minimum and maximum Z depths (`getDepthMinZ + getDepthMaxZ`) as the second component. These values depend on the light's properties and the active camera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setFloat2(\"depthValuesSM\", this.getLight().getDepthMinZ(scene.activeCamera), this.getLight().getDepthMinZ(scene.activeCamera) + this.getLight().getDepthMaxZ(scene.activeCamera));\n```\n\n----------------------------------------\n\nTITLE: Toggling Image Processing Define by Scene Setting (Babylon.js, JavaScript)\nDESCRIPTION: This JavaScript snippet sets the IMAGEPROCESSINGPOSTPROCESS define flag based on the scene's image processing configuration. It ensures shader code correctly applies or omits gamma correction depending on whether image processing is enabled. Set this property during material setup to synchronize the rendering pipeline with the current scene state. Requires a Babylon.js scene object with an imageProcessingConfiguration member.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/image_processing.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n```\n\n----------------------------------------\n\nTITLE: Disposing of a Point Cloud System in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates resource management for a PCS instance by releasing associated memory and nullifying its reference. This is crucial to avoid memory leaks in dynamic scenes that create and destroy particle systems. Requires an existing PCS object; after disposal, attempts to use PCS may result in errors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPCS.dispose();\\nPCS = null; // tells the garbage collector the reference can be also cleaned up\n```\n\n----------------------------------------\n\nTITLE: Applying LUT Color Correction in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to apply a Lookup Table (LUT) texture for color correction using Babylon.js. It shows how to load a texture from the `textures/` directory and apply it to a scene with a ColorCorrectionPostProcess. Required dependencies include Babylon.js, and the key parameters are the texture filename, scene reference, intensity, and the camera object. Inputs are the LUT image file and the camera to which the effect applies; the effect outputs a post-processed scene with altered color grading. This approach requires Babylon.js and should be used in an environment where the supporting files are present, such as the Babylon.js Playground.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar LUTTexture = new BABYLON.Texture(\"textures/filename\", scene);\nvar postProcess = new BABYLON.ColorCorrectionPostProcess(\"color_correction\", LUTTexture, 1.0, universalCamera);\n```\n\n----------------------------------------\n\nTITLE: Defining Action Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Specifies the JSON format for defining actions and triggers in the Babylon.js Actions system. An action node includes its type (Trigger, Action, Flow Control), name, a 'detached' flag, an array of properties configuring the action, and optional arrays for child actions or actions to be combined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": number, (action's type. 0 = Trigger, 1 = Action, 2 = Flow Control)\n    \"name\": string, (name of the action, trigger or flow control)\n    \"detached\": boolean, (if the node is detached or not. Means it will not be computed if detached === true)\n    \"properties\": array of properties, (see below)\n    \"children\": array of Actions,\n    \"combine\": array of Actions (used as a combine action. i.e name = \"CombineAction\". Can be null)\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Particle Systems to a Set Definition in JavaScript\nDESCRIPTION: Demonstrates how to use `BABYLON.ParticleHelper.ExportSet` to generate a particle set definition (likely a JSON-compatible object or string) from an array of existing `BABYLON.ParticleSystem` instances. This is useful for creating custom particle set files programmatically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particleHelper.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar mySet = BABYLON.ParticleHelper.ExportSet( [includedPS1, includedPS2, includedPS3...] );\n```\n\n----------------------------------------\n\nTITLE: Activating Poisson Shadow Sampling in Babylon.js (JavaScript)\nDESCRIPTION: This code enables the Poisson sampling filter for shadows, producing softer edges but potentially impacting performance. Setting 'usePoissonSampling' to true disables variance shadow maps, prioritizing shadow quality over speed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.usePoissonSampling = true;\n```\n\n----------------------------------------\n\nTITLE: Instantiating TexturePacker in Babylon.js\nDESCRIPTION: Creates a new instance of the BABYLON.TexturePacker class. This is the initial step to begin the process of packaging textures from specified meshes within a scene, using provided options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/texturePackage.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet pack = new BABYLON.TexturePacker(name, targetMeshes, options, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Directed Sphere Emitter in Babylon.js (JavaScript)\nDESCRIPTION: Creates a sphere particle emitter with custom emission directions using `particleSystem.createDirectedSphereEmitter`. It takes the sphere radius (Number) and two `BABYLON.Vector3` parameters (`direction1`, `direction2`) to define the range of emission directions. Requires an existing `particleSystem` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar sphereEmitter = particleSystem.createDirectedSphereEmitter(1.2, new BABYLON.Vector3(1, 1, 1), new BABYLON.Vector3(2, 8, 2));\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Render Target Texture Handle with Frame Graph\nDESCRIPTION: Uses the Frame Graph's texture manager to create a render target texture for color output. Specifies size as a percentage of the screen (100x100%), format (RGBA), type, multisampling (4 samples), and disables mipmaps and sRGB. Returns a texture handle, not a direct texture object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorTexture = frameGraph.textureManager.createRenderTargetTexture(\"color\", {\n    size: { width: 100, height: 100 },\n    options: {\n        createMipMaps: false,\n        types: [BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE],\n        formats: [BABYLON.Constants.TEXTUREFORMAT_RGBA],\n        samples: 4,\n        useSRGBBuffers: [false],\n        labels: [\"color\"],\n    },\n    sizeIsPercentage: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Default WebVR Experience in Babylon.js (JavaScript)\nDESCRIPTION: Adds WebVR support to the current scene using the default VRExperienceHelper. This function creates necessary components for VR rendering and typically adds an 'Enter VR' button to the UI, allowing users to switch to a VR headset view.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360PhotoDome.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvrHelper = scene.createDefaultVRExperience();\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Terrain with Custom Normal Map in JavaScript\nDESCRIPTION: This code demonstrates how to create a Dynamic Terrain with a custom normal map. It allows passing a pre-computed normal array to the terrain constructor using the mapNormals parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst normalArray = [n1.x, n1.y, n1.z, n2.x, n2.y, n2.z, ...];\nconst terrainSub = 100;               // 100 terrain subdivisions\nconst params = {\n    mapData: mapData,               // data map declaration: what data to use?\n    mapSubX: mapSubX,               // how are these data stored by rows and columns\n    mapSubZ: mapSubZ,\n    mapNormals: normalArray,        // the array of map normals\n    terrainSub: terrainSub          // how many terrain subdivisions wanted\n}\nconst terrain = new BABYLON.DynamicTerrain(\"t\", params, scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring Draco Decoder for Local File Loading in TypeScript\nDESCRIPTION: TypeScript code to configure the Draco Decoder to use local files instead of CDN resources. This is useful for GDPR compliance or offline applications.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDracoDecoder.DefaultConfiguration = {\n  wasmUrl: \"/babylon-draco-files/draco_wasm_wrapper_gltf.js\",\n  wasmBinaryUrl: \"/babylon-draco-files/draco_decoder_gltf.wasm\",\n  fallbackUrl: \"/babylon-draco-files/draco_decoder_gltf.js\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Lava Material in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a ground mesh, initialize a Lava Material, and assign textures to it. It shows the basic setup required for using the Lava Material in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/lavaMat.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 512, height: 512, subdivisions: 32 }, scene);\n\nvar lavaMaterial = new BABYLON.LavaMaterial(\"lava\", scene);\nlavaMaterial.noiseTexture = new BABYLON.Texture(\"cloud.png\", scene); // Set the bump texture\nlavaMaterial.diffuseTexture = new BABYLON.Texture(\"lavatile.jpg\", scene); // Set the diffuse texture\n\nground.material = lavaMaterial;\n```\n\n----------------------------------------\n\nTITLE: Checking GUIPanel Visibility in JavaScript\nDESCRIPTION: Method to check if the GUIPanel is currently visible. It returns a boolean value indicating the visibility status.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiPanel.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Host Server via NPM\nDESCRIPTION: Executes `npm run serve` targeting the `@tools/dev-host` workspace using the `-w` flag. This starts a local web server, usually on `http://localhost:1338`, serving the code from the dev-host's source folder for development and testing purposes. It watches for changes only within the dev-host source folder.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve -w @tools/dev-host\n```\n\n----------------------------------------\n\nTITLE: Calculating Rotation for Path Alignment in Babylon.js\nDESCRIPTION: This snippet shows the calculation of Euler rotation angles needed to align an object's local axes with a 3D path's coordinate system (binormal, tangent, normal) at a specific point `p`. It uses pre-calculated path vectors (`binormals[p]`, `tangents[p]`, `normals[p]`) as the target local x, y, and z axes, respectively. This specific configuration aligns the object's local y-axis with the path tangent (option 4 from the text). Requires the Babylon.js library and arrays of path tangent, normal, and binormal vectors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/target_align.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.Vector3.RotationFromAxis(binormals[p], tangents[p], normals[p]);\n```\n\n----------------------------------------\n\nTITLE: Applying Physics Impulses\nDESCRIPTION: Method to apply impulse forces to physics objects at specific positions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimpostor.applyImpulse(new BABYLON.Vector3(10, 10, 0), sphere.getAbsolutePosition());\n```\n\n----------------------------------------\n\nTITLE: Applying Auto-LOD Simplification After Mesh Import in Babylon.js (JavaScript)\nDESCRIPTION: This example demonstrates how to call the `simplify` function on a mesh after it has been loaded asynchronously using `BABYLON.ImportMeshAsync`. It applies two LOD levels with specific quality and distance settings, disables parallel processing, specifies the quadratic simplification type, and includes a success callback function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/simplifyingMeshes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"./DanceMoves.babylon\", scene).then((result) => {\n  result.meshes[1].simplify(\n    [\n      { quality: 0.9, distance: 25 },\n      { quality: 0.3, distance: 50 },\n    ],\n    false,\n    BABYLON.SimplificationType.QUADRATIC,\n    function () {\n      alert(\"LOD finisehd, let's have a beer!\");\n    },\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Facet Index at World Coordinates in Babylon.js\nDESCRIPTION: Shows how to find the index of the single facet closest to the specified world coordinates (x, y, z) using `mesh.getClosestFacetAtCoordinates`. The world coordinates are internally converted to local coordinates to find the relevant partition block. If an index is found (returns non-null), it demonstrates getting the facet's world position via `mesh.getFacetPosition`. Returns `null` if no facet is found in the corresponding block.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst index = mesh.getClosestFacetAtCoordinates(x, y, z); // returns the index of the closest facet to (x, y, z)\nif (index != null) {\n  const worldPos = mesh.getFacetPosition(index); // the world position of this facet\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Constructing a WebVR Free Camera in Babylon.js\nDESCRIPTION: Creates a WebVR Free Camera, which is a legacy virtual reality camera for older VR device browsers that don't support WebXR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters : name, position, scene, webVROptions\nconst camera = new BABYLON.WebVRFreeCamera(\"WVR\", new BABYLON.Vector3(0, 1, -15), scene);\n```\n\n----------------------------------------\n\nTITLE: Combining House Components in Babylon.js\nDESCRIPTION: Example of combining box and roof meshes to create a house.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/combine.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst house = BABYLON.Mesh.MergeMeshes([box, roof])\n```\n\n----------------------------------------\n\nTITLE: Enabling Billboard Mode for Solid Particles in Babylon.js\nDESCRIPTION: Sets the SPS billboard property to true, making particles always face the camera. This property needs to be used with the render loop to calculate the required rotation each frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_animate.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.billboard = true; //false by default\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Updating Input Blocks by Predicate in Babylon.js Node Material using JavaScript\nDESCRIPTION: Finds an InputBlock matching a specified predicate (e.g., by name) and assigns a new value to it. Used when dynamic update of input uniform or constant block parameters is needed after graph construction. Not all block types will have a value property, so consult the API docs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet block = nodeMaterial.getInputBlockByPredicate((b) => b.name === \"foo\");\nblock.value = 10;\n```\n\n----------------------------------------\n\nTITLE: Calculating Roofprints and Ceiling for Sectional Roof in JavaScript\nDESCRIPTION: This snippet calculates the roofprints for different sections (main and small) and the overall roof using the `roofprint` function with respective corner data (`corners`, `mainCorners`, `smallCorners`). It also generates the roof floor mesh (`ceiling`) using a `roofFloor` function based on the `wholeRoofprint`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar wholeRoofprint = roofprint(corners, overlap, height);\nvar mainRoofprint = roofprint(mainCorners, overlap, height);\nvar smallRoofprint = roofprint(smallCorners, overlap, height);\n\t\nvar ceiling = roofFloor(wholeRoofprint);\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Checking for Custom Camera Rotation (JavaScript)\nDESCRIPTION: Defines the checkInputs method for FreeCameraKeyboardRotateInput, which iterates through pressed keys and adjusts the camera's rotation around the Y-axis based on keysLeft and keysRight arrays. This method should be called each frame, typically invoked by the Babylon.js engine if registered with the camera input manager. Requires an attached camera reference and assumes rotation about cameraRotation.y.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nFreeCameraKeyboardRotateInput.prototype.checkInputs = function () {\n  if (this._onKeyDown) {\n    const camera = this.camera;\n    // Keyboard\n    for (let index = 0; index < this._keys.length; index++) {\n      const keyCode = this._keys[index];\n      if (this.keysLeft.indexOf(keyCode) !== -1) {\n        camera.cameraRotation.y += this.sensibility;\n      } else if (this.keysRight.indexOf(keyCode) !== -1) {\n        camera.cameraRotation.y -= this.sensibility;\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disposing GUIPanel in JavaScript\nDESCRIPTION: Method to dispose of the GUIPanel and delete its associated element. This is used for cleanup when the panel is no longer needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiPanel.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Inspecting Textures of Imported Meshes in Babylon.js\nDESCRIPTION: Provides a JavaScript snippet demonstrating how to asynchronously import a mesh and then iterate through its child meshes and their materials to log the names and indices of active textures. This helps identify the correct texture index to use with `BABYLON.PointColor.Color`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"location\" + \"file\", scene).then(function ({ meshes }) {\n  var n = meshes.length;\n  var p;\n  var t;\n  for (let i = 0; i < n; i++) {\n    if (meshes[i].material !== null) {\n      console.log(\"Mesh\", i);\n      t = meshes[i].material.getActiveTextures();\n      p = t.length;\n      for (let j = 0; j < p; j++) {\n        console.log(\"Texture\", j, \"Name\", t[j].name);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: IBL Shadow Pipeline Function Declarations\nDESCRIPTION: Core functions for managing the IBL shadow pipeline, including toggling shadows, updating scene bounds, managing voxelization, and handling shadow-casting meshes and materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/IBLShadowsRenderingPipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  toggleShadow(): void;\n  updateSceneBounds(): void;\n  updateVoxelization(): void;\n  resetAccumulation(): void;\n  addShadowCastingMesh(mesh: Mesh): void;\n  removeShadowCastingMesh(mesh: Mesh): void;\n  addShadowReceivingMaterial(material?: Material | Material[]): void;\n  removeShadowReceivingMaterial(material?: Material | Material[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basis Universal Decoder with Worker in Main Application (JavaScript)\nDESCRIPTION: Shows how to configure the Basis Universal decoder to use a web worker from the main application file. It imports the Basis WASM file as an ArrayBuffer, creates a `Worker` instance using the `worker.js` script, initializes the worker with the WASM data using `initializeWebWorker`, and finally registers this initialized worker for Basis decoding globally using `SetBasisTranscoderWorker`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// mainFile.js\nimport wasm from \"@babylonjs/core/assets/Basis/basis_transcoder.wasm\";\nimport { initializeWebWorker } from \"@babylonjs/core/Misc/basisWorker.js\";\nimport { SetBasisTranscoderWorker } from \"@babylonjs/core/Misc/basis.js\";\n\nconst worker = new Worker(new URL(\"./worker.js\", import.meta.url), {\n  type: \"module\",\n});\ninitializeWebWorker(worker, wasm);\n\nSetBasisTranscoderWorker(worker);\n```\n\n----------------------------------------\n\nTITLE: Animating a Parented Disc World Scene in Babylon.js\nDESCRIPTION: Illustrates animation logic for a 'disc world' scenario using `scene.registerAfterRender`. A parent 'disc' mesh rotates locally on its Y and Z axes and moves along a circular path in world space using trigonometric functions based on the 'phi' variable. Any child meshes parented to the 'disc' (like buildings, implied context) would inherit these complex movements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/parent.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar phi = 0;\nscene.registerAfterRender(function () {\n    matrix = disc.getWorldMatrix();\n    disc.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);\n    disc.rotate(BABYLON.Axis.Z, Math.PI / 200, BABYLON.Space.LOCAL);\n    disc.position = new BABYLON.Vector3(15 * Math.cos(phi), 16 * Math.sin(phi), 5);\n    phi += 0.01;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing WebXR Polyfill in Babylon.js\nDESCRIPTION: This snippet shows how to add the WebXR polyfill to your project for browsers that support WebVR but not WebXR. It creates a Promise that resolves once the polyfill is loaded and initialized, ensuring WebXR API compatibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrPolyfillPromise = new Promise((resolve) => {\n    if (navigator.xr) {\n        return resolve();\n    }\n    if (window.WebXRPolyfill) {\n        new WebXRPolyfill();\n        return resolve();\n    } else {\n        const url = \"https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js\";\n        const s = document.createElement(\"script\");\n        s.src = url;\n        document.head.appendChild(s);\n        s.onload = () => {\n            new WebXRPolyfill();\n            resolve();\n        };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using dat.GUI with Babylon.js\nDESCRIPTION: Demonstrates the integration of the external dat.GUI library with a Babylon.js scene for creating GUI controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#NGS9AU#1\" title=\"dat.GUI Example\" description=\"Simple example of using the dat.GUI system in your scene.\" image=\"/img/playgroundsAndNMEs/divingDeeperGUI3.jpg\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Scenes in Babylon.js\nDESCRIPTION: This code shows how to render multiple scenes in Babylon.js using the engine's runRenderLoop function. It demonstrates rendering two scenes sequentially.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiScenes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nengine.runRenderLoop(function () {\n  scene0.render();\n  scene1.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller-Oriented Movement\nDESCRIPTION: Demonstrates how to configure movement to follow controller direction instead of head direction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRMovement.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nconst movementFeature = featureManager.enableFeature(BABYLON.WebXRFeatureName.MOVEMENT, \"latest\", {\n  xrInput: xr.input,\n  // add options here\n  movementOrientationFollowsViewerPose: false, // default true\n  movementOrientationFollowsController: true, // enable controller direction\n  orientationPreferredHandedness: \"left\", // the preferred hand for rotation. Defaults to right. If hand is not found it will use the first found controller.\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Pivoted Mesh Position in World Space - Babylon.js (JavaScript)\nDESCRIPTION: Positions a mesh in world space after pivot-driven transforms by offsetting mesh.position with the difference between the mesh's stored position and its absolute position from getAbsolutePosition. Ensures correct world placement post-rotation/scaling. Input: target (x, y, z) coordinate. Output: mesh appears at desired world location regardless of previous pivot modifications.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.position = new BABYLON.Vector3(x, y, z);\nmesh.position = mesh.position.add(mesh.position.subtract(mesh.getAbsolutePosition()));\n```\n\n----------------------------------------\n\nTITLE: Early Recording Termination\nDESCRIPTION: Shows how to stop a recording before its scheduled duration using the stopRecording API.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToVideo.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (BABYLON.VideoRecorder.IsSupported(engine)) {\n    var recorder = new BABYLON.VideoRecorder(engine);\n    recorder.startRecording();\n    setTimeout(() => {\n        recorder.stopRecording()\n    }, 500);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Filter and Rendering to Canvas in JavaScript\nDESCRIPTION: Shows the default usage of the `filter` method. It applies the specified filter (post-process or custom EffectWrapper) to the input source (`imageToProcess`) and renders the output directly into the canvas associated with the `imageFilter` instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimageFilter.filter(imageToProcess, filter);\n```\n\n----------------------------------------\n\nTITLE: Lantern Animation Import and Setup\nDESCRIPTION: Extracts and configures animation groups for lantern meshes, creating new animation groups for each instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/animations.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst importedAnims = res.animationGroups;\nlet animation = [];\nanimation.push(importedAnims[0].targetedAnimations[0].animation);\nimportedAnims[0].dispose();\nlet animGroup = new AnimationGroup(\"lanternAnimGroup\");\nanimGroup.addTargetedAnimation(animation[0], res.meshes[1]);\nreturn {\n        animationGroups: animGroup\n        }\n```\n\n----------------------------------------\n\nTITLE: Example: Creating Selection Panel with Initial Groups Array in JavaScript\nDESCRIPTION: Provides a concrete example of creating a `SelectionPanel` and passing an array of existing groups (`transformGroup`, `colorGroup`, `rotateGroup`) directly to the constructor. It also shows setting panel properties and adding it to the `AdvancedDynamicTexture`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\nconst selectBox = new BABYLON.GUI.SelectionPanel(\"selectBox\", [transformGroup, colorGroup, rotateGroup]);\nselectBox.width = 0.25;\nselectBox.height = 0.52;\nselectBox.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\nselectBox.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n\nadvancedTexture.addControl(selectBox);\n```\n\n----------------------------------------\n\nTITLE: Implementing _preparePendingTasks Method with Comments\nDESCRIPTION: Detailed implementation of the _preparePendingTasks method with thorough comments. This method validates inputs, manages context variables, and sets up timers for delayed execution, demonstrating proper context management.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npublic _preparePendingTasks(context: FlowGraphContext): void {\n    // get the value of duration\n    const duration = this.duration.getValue(context);\n    // validate the value and make sure we can create a delay based on this value\n    if (duration < 0 || isNaN(duration) || !isFinite(duration)) {\n        // set the error payload, in case the handling block wants to know what happened\n        this.error.payload = { message: \"Invalid duration\" };\n        // trigger the error signal and don't continue\n        return this.error._activateSignal(context);\n    }\n\n    // active delays are global to the context\n    // remember, the global context is where we can set variables that are accessed by all blocks\n    const activeDelays: number = context._getGlobalContextVariable(\"activeDelays\", 0);\n    // too many active delays?\n    if (activeDelays >= FlowGraphSetDelayBlock.MaxParallelDelayCount) {\n        // set the error payload, in case the handling block wants to know what happened\n        this.error.payload = { message: \"Max parallel delays reached\" };\n        // trigger the error signal and don't continue\n        return this.error._activateSignal(context);\n    }\n    // get the last global delay index\n    const lastDelayIndex: number = context._getGlobalContextVariable(\"lastDelayIndex\", -1);\n\n    // these are block-specific and not global\n    const timers = context._getExecutionVariable(this, \"pendingDelays\", [] as AdvancedTimer[]);\n    const scene = context.configuration.scene;\n    // create a new timer\n    const timer: AdvancedTimer = new AdvancedTimer({\n        timeout: duration * 1000, // duration is in seconds\n        contextObservable: scene.onBeforeRenderObservable,\n        onEnded: () => this._onEnded(timer, context),\n    });\n    timer.start();\n    const newIndex = lastDelayIndex + 1;\n    this.lastDelayIndex.setValue(newIndex, context);\n    // update the global context variable\n    context._setGlobalContextVariable(\"lastDelayIndex\", newIndex);\n\n    timers[newIndex] = timer;\n    // update the block-specific variable\n    context._setExecutionVariable(this, \"pendingDelays\", timers);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Texture Folder in Babylon.js Playground\nDESCRIPTION: This snippet provides a link to the GitHub repository containing the textures folder for the Babylon.js Playground. These textures can be loaded as Textures, CubeTextures, or HDRCubeTextures in Babylon.js projects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[textures folder](https://github.com/BabylonJS/Babylon.js/tree/master/packages/tools/playground/public/textures)\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to 'depthValuesSM' Components in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript code snippet explicitly shows the assignment logic for the components of the `depthValuesSM` uniform variable. `depthValuesSM.x` is set to the light's minimum depth relative to the camera, and `depthValuesSM.y` is set to the sum of the light's minimum and maximum depths relative to the camera. These values are crucial for normalizing the depth metric in the shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndepthValuesSM.x = this.getLight().getDepthMinZ(scene.activeCamera);\ndepthValuesSM.y = this.getLight().getDepthMinZ(scene.activeCamera) + this.getLight().getDepthMaxZ(scene.activeCamera);\n```\n\n----------------------------------------\n\nTITLE: Implementing Babylon.js GUI Label Utility - JavaScript\nDESCRIPTION: This TypeScript function creates a fullscreen GUI, defines a labeled rectangle for a mesh, and attaches a TextBlock displaying the mesh name. Utilizes Babylon.js GUI classes: AdvancedDynamicTexture, Rectangle, Control, and TextBlock. Ensure babylonjs-gui is installed and imported. Place this as 'gui.ts', and import/expose the addLabelToMesh function for scene integration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractMesh } from \"babylonjs\";\\nimport { AdvancedDynamicTexture, Rectangle, Control, TextBlock } from \"babylonjs-gui\";\\n\\nlet advancedTexture: AdvancedDynamicTexture;\\n\\nfunction init(): void {\\n    if (!advancedTexture) {\\n        advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\"ui1\");\\n    }\\n}\\n\\nexport function addLabelToMesh(mesh: AbstractMesh): void {\\n    if (!advancedTexture) {\\n        init();\\n    }\\n    let label: Rectangle = new Rectangle(\"label for \" + mesh.name);\\n    label.background = \"black\";\\n    label.height = \"30px\";\\n    label.alpha = 0.5;\\n    label.width = \"100px\";\\n    label.cornerRadius = 20;\\n    label.thickness = 1;\\n    label.linkOffsetY = 30;\\n    label.top = \"10%\";\\n    label.zIndex = 5;\\n    label.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\\n    advancedTexture.addControl(label);\\n\\n    const text1: TextBlock = new TextBlock();\\n    text1.text = mesh.name;\\n    text1.color = \"white\";\\n    label.addControl(text1);\\n}\n```\n\n----------------------------------------\n\nTITLE: Character Animation Reset in Babylon.js\nDESCRIPTION: Implements position and rotation reset logic for character animation using quaternions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (p === 0) {\n    distance = 0;\n    dude.position = new BABYLON.Vector3(-6, 0, 0);\n    dude.rotationQuaternion = startRotation.clone();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Height in Babylon.js WebXR\nDESCRIPTION: Retrieves the current user's height from the real world ground level in WebXR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRCamera.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userHeight = xrCamera.realWorldHeight;\n```\n\n----------------------------------------\n\nTITLE: Applying Vertical Perspective Correction in Babylon.js\nDESCRIPTION: Method to automatically correct vertical perspective distortion in camera rendering. This is particularly useful for architectural visualization where tall buildings may appear to have converging vertical lines.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.applyVerticalCorrection()\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Scale with Reference in Babylon.js\nDESCRIPTION: Shows how to get the current scale of a bone using the getScaleToRef method. It takes a reference Vector3 as a parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst scale = BABYLON.Vector.Zero();\nbone.getScaleToRef(scale);\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Inputs for a Compute Shader in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates assigning texture resources to compute shader input variables after creating the `ComputeShader` instance. Use `setTexture` for regular (read-only) textures and `setStorageTexture` for storage textures (writable). The string arguments (\"src\", \"dest\") must correspond to the keys provided in the `bindingsMapping` during instantiation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncs1.setTexture(\"src\", src);\ncs1.setStorageTexture(\"dest\", dest);\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor System Options - TypeScript\nDESCRIPTION: Defines the interface IWebXRAnchorSystemOptions for configuring the anchor system feature. Allows specifying a node for transforming coordinates and whether to retain anchors after the session ends. Used as an options parameter to enableFeature.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IWebXRAnchorSystemOptions {\\n  /**\\n   * a node that will be used to convert local to world coordinates\\n   */\\n  worldParentNode?: TransformNode;\\n\\n  /**\\n   * If set to true a reference of the created anchors will be kept until the next session starts\\n   * If not defined, anchors will be removed from the array when the feature is detached or the session ended.\\n   */\\n  doNotRemoveAnchorsOnSessionEnded?: boolean;\\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Syntax for Removing Gradient in Babylon.js\nDESCRIPTION: Shows the general method signature for removing a previously added gradient point for a specific property. `<PROPERTY>` should be replaced with the target property name. `fraction_of_time_period_elapsed` specifies the exact time fraction (between 0 and 1) of the gradient point to be removed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.remove < PROPERTY > Gradient(fraction_of_time_period_elapsed);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Option with createDefaultEnvironment (Babylon.js, JavaScript)\nDESCRIPTION: This snippet shows how to customize the default environment creation by specifying a custom environmentTexture file via the options object. The environmentTexture parameter in createDefaultEnvironment accepts a URL to a .env file to be used as the environment. Dependencies: Babylon.js; ensure the .env file exists. 'scene' is a Babylon.js Scene. The function returns a configured environment with the supplied texture. Constraints: incorrectly terminated parenthesis in sample code (extra close parenthesis), which should be removed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/HDREnvironment.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultEnvironment({\n    environmentTexture: \"texture-url.env\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Offline Support Exception Rules in Babylon.js\nDESCRIPTION: This code demonstrates how to add exception rules for offline support in Babylon.js. It prevents specific resources (matched by regex) from being cached offline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeCached.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.disableOfflineSupportExceptionRules.push(/dude\\.babylon/gi);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Polyhedron Mesh in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a custom polyhedron mesh (heptagonal prism) using the MeshBuilder.CreatePolyhedron method in Babylon.js. It also shows an alternative method using Mesh.CreatePolyhedron.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/custom_poly.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst heptPrism = BABYLON.MeshBuilder.CreatePolyhedron(\"h\", {custom: heptagonalPrism}, scene); //scene is optional and defaults to the current scene\n\n//also possible\nconst heptPrism1 = BABYLON.Mesh.CreatePolyhedron(\"h\", {custom: heptagonalPrism}, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: GreasedLineRibbon PointsMode Enum - Babylon.js (JavaScript)\nDESCRIPTION: Defines enum values for the pointsMode option. POINTS_MODE_POINTS means each array of points is the backbone of a ribbon, while POINTS_MODE_PATHS treats each array as a path to define the ribbon boundaries. The developer should select the mode that fits their input geometry and use case.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_ribbon/greased_line_ribbon.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPOINTS_MODE_POINTS = 0,\nPOINTS_MODE_PATHS = 1,\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Pivot Points - Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to set and retrieve the pivot point of a mesh in Babylon.js using setPivotPoint, getPivotPoint, and getAbsolutePivotPoint. Requires a mesh instance and utilizes the BABYLON.Vector3 class for coordinate specification. getPivotPoint returns the mesh-local pivot position, while getAbsolutePivotPoint returns its world-space equivalent. Input: a Vector3 for position; Output: updated mesh pivot and position data. No external dependencies beyond Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotPoint(Vector3);\nmesh.getPivotPoint(); // returns Vector3\nmesh.getAbsolutePivotPoint(); // returns Vector3\n```\n\n----------------------------------------\n\nTITLE: Pseudo-code Illustrating SPS setParticles Execution Flow in JavaScript/TypeScript\nDESCRIPTION: This pseudo-code snippet outlines the internal execution order of the `setParticles` method in a Babylon.js Solid Particle System. It shows the sequence of calls: `beforeUpdateParticles`, a loop calling `updateParticles` for each particle, an internal mesh update, and finally `afterUpdateParticles`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar particles: SolidParticles[] = [array of SolidParticle objects];\nfunction setParticles() {\n    beforeUpdateParticles();\n    for (let p = 0; p < nbParticles; p++) {\n        updateParticles(particles[p]);\n    }\n    updateTheWholeMesh();\n    afterUpdateParticles();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FlowGraphSetDelayBlock Class in JavaScript\nDESCRIPTION: Complete implementation of the FlowGraphSetDelayBlock class that extends FlowGraphAsyncExecutionBlock. This block sets a delay in seconds before activating the output signal, managing timers through the context system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Block that sets a delay in seconds before activating the output signal.\n */\nexport class FlowGraphSetDelayBlock extends FlowGraphAsyncExecutionBlock {\n    /**\n     * The maximum number of parallel delays that can be set per node.\n     */\n    public static MaxParallelDelayCount = 100;\n    /**\n     * Input signal: If activated the delayed activations set by this block will be canceled.\n     */\n    public readonly cancel: FlowGraphSignalConnection;\n\n    /**\n     * Input connection: The duration of the delay in seconds.\n     */\n    public readonly duration: FlowGraphDataConnection<number>;\n\n    /**\n     * Output connection: The last delay index that was set.\n     */\n    public readonly lastDelayIndex: FlowGraphDataConnection<number>;\n\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.cancel = this._registerSignalInput(\"cancel\");\n        this.duration = this.registerDataInput(\"duration\", RichTypeNumber);\n        this.lastDelayIndex = this.registerDataOutput(\"lastDelayIndex\", RichTypeNumber, -1);\n    }\n\n    public _preparePendingTasks(context: FlowGraphContext): void {\n        const duration = this.duration.getValue(context);\n        if (duration < 0 || isNaN(duration) || !isFinite(duration)) {\n            this.error.payload = { message: \"Invalid duration\" };\n            return this.error._activateSignal(context);\n        }\n\n        // active delays are global to the context\n        const activeDelays: number = context._getGlobalContextVariable(\"activeDelays\", 0);\n        if (activeDelays >= FlowGraphSetDelayBlock.MaxParallelDelayCount) {\n            this.error.payload = { message: \"Max parallel delays reached\" };\n            return this.error._activateSignal(context);\n        }\n        // get the last global delay index\n        const lastDelayIndex: number = context._getGlobalContextVariable(\"lastDelayIndex\", -1);\n\n        // these are block-specific and not global\n        const timers = context._getExecutionVariable(this, \"pendingDelays\", [] as AdvancedTimer[]);\n        const scene = context.configuration.scene;\n        const timer: AdvancedTimer = new AdvancedTimer({\n            timeout: duration * 1000, // duration is in seconds\n            contextObservable: scene.onBeforeRenderObservable,\n            onEnded: () => this._onEnded(timer, context),\n        });\n        timer.start();\n        const newIndex = lastDelayIndex + 1;\n        this.lastDelayIndex.setValue(newIndex, context);\n        context._setGlobalContextVariable(\"lastDelayIndex\", newIndex);\n\n        timers[newIndex] = timer;\n        context._setExecutionVariable(this, \"pendingDelays\", timers);\n    }\n\n    public _cancelPendingTasks(context: FlowGraphContext): void {\n        const timers = context._getExecutionVariable(this, \"pendingDelays\", [] as AdvancedTimer[]);\n        for (const timer of timers) {\n            timer?.dispose();\n        }\n        context._deleteExecutionVariable(this, \"pendingDelays\");\n        this.lastDelayIndex.setValue(-1, context);\n    }\n\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\n        if (callingSignal === this.cancel) {\n            this._cancelPendingTasks(context);\n            return;\n        } else {\n            this._preparePendingTasks(context);\n            this.out._activateSignal(context);\n        }\n    }\n\n    private _onEnded(timer: AdvancedTimer, context: FlowGraphContext) {\n        const timers = context._getExecutionVariable(this, \"pendingDelays\", [] as AdvancedTimer[]);\n        const index = timers.indexOf(timer);\n        if (index !== -1) {\n            timers.splice(index, 1);\n        } else {\n            Logger.Warn(\"FlowGraphTimerBlock: Timer ended but was not found in the running timers list\");\n        }\n        context._removePendingBlock(this);\n        this.done._activateSignal(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Alpha Blending via Opacity Texture in Babylon.js\nDESCRIPTION: Illustrates an alternative method to enable alpha blending for a material by assigning a texture to its `opacityTexture` property. Even assigning a texture without an inherent alpha channel, such as the material's `diffuseTexture`, triggers the alpha blending necessary for custom `alphaMode` settings to take effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/blendModes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nmaterial.opacityTexture = material.diffuseTexture;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a ScatterPanel with Custom Iterations (Babylon.js, JavaScript)\nDESCRIPTION: This snippet demonstrates the creation of a ScatterPanel for random planar control placement in the Babylon.js 3D GUI. The number of iterations controls how many distribution attempts are made for layout randomization. Default value is 100, but can be adjusted for denser or sparser arrangements. Requires the Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst panel = new BABYLON.GUI.ScatterPanel();\npanel.iterations = 100;\n```\n\n----------------------------------------\n\nTITLE: Adding an Agent to Crowd\nDESCRIPTION: Creates and adds a new agent to the crowd with specified position, parameters, and transform.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/crowdAgents.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst agentIndex = crowd.addAgent(position, agentParameters, transform);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pass PostProcess in Babylon.js\nDESCRIPTION: Creates a pass-through post process that copies the framebuffer for further use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.PassPostProcess(\"Scene copy\", 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Creating Quadratic Bezier Curve - Babylon.js - JavaScript\nDESCRIPTION: This snippet creates a quadratic Bezier curve in 3D space using BABYLON.Curve3.CreateQuadraticBezier with origin, control, and destination points, and specifies the number of sample points. The resulting Curve3 object provides access to the calculated Bezier path and its total length. Prerequisites: BABYLON.Curve3, three Vector3 points, and an integer for nb_of_points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bezier2 = BABYLON.Curve3.CreateQuadraticBezier(origin, control, destination, nb_of_points);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Execute Block Logic - Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve an Execute block by name from the frame graph using the provided nrg graph instance and assign a custom task function to be executed during graph execution. It depends on Babylon.js APIs and a properly initialized graph (nrg instance). The provided function receives a _context parameter pertaining to the execution environment, and any additional logic can be executed when the block's task is triggered. Required: a Babylon.js NodeRenderGraph and a named Execute block added to the graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBlocks/frameGraphBlocksDescription.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst executeBlock = nrg.getBlockByName(\"<name of the Execute block>\");\\nexecuteBlock.task.func = (_context) => {\\n    // Code to execute when the task is executed\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Removing Lifetime Gradient in Babylon.js Particle System\nDESCRIPTION: This code demonstrates how to remove a specific lifetime gradient from a particle system. It removes the gradient at the 0.4 point of the system's duration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeLifeTimeGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Checking Offscreen Canvas Compatibility in JavaScript\nDESCRIPTION: This code snippet checks if the browser supports OffscreenCanvas and if the canvas element has the transferControlToOffscreen method, allowing for conditional use of offscreen canvas features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/offscreenCanvas.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (\"OffscreenCanvas\" in window && \"transferControlToOffscreen\" in canvas) {\n  // Ok to use offscreen canvas\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Parent in BabylonJS\nDESCRIPTION: Parents the camera to a character model (dude) for following behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/camera.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.parent = dude;\n```\n\n----------------------------------------\n\nTITLE: Assigning a Rotation Quaternion Directly with RotationAxis (JavaScript)\nDESCRIPTION: This snippet sets the mesh's orientation by directly assigning a rotation quaternion generated from a given axis and angle using the BABYLON.Quaternion.RotationAxis static method. The axis should be provided as a BABYLON.Vector3 in world coordinates and the angle in radians. This can be used instead of rotate() when direct control over the quaternion is needed. Dependencies include Babylon.js and an existing mesh object. The output is the new orientation applied to mesh.rotationQuaternion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_quaternions.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(1, 0, -1), Math.PI / 3);\n```\n\n----------------------------------------\n\nTITLE: Creating a Parent Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Creates a new, empty `BABYLON.Mesh` instance named \"parent\" within the specified `scene`. This mesh serves as a container or parent node for other meshes, facilitating grouped transformations and bounding box calculations for multiple objects. Requires `BABYLON.Mesh` and a valid `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet parent = new BABYLON.Mesh(\"parent\", scene);\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample Project Directory Structure in Shell\nDESCRIPTION: This shell output shows the expected directory structure for the sample Node.js web server project within the `C:\\babylon` folder after extracting the provided zip file. It includes the public directory containing `index.html` and `babylonScene.js`, along with server-related files like `package.json`, `server.js`, and batch scripts for Windows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/Running_a_local_webserver_for_BabylonJs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nC:\\babylon\\public\\\nC:\\babylon\\public\\index.html\nC:\\babylon\\public\\babylonScene.js\n\nC:\\babylon\\package.json\nC:\\babylon\\readme.md\nC:\\babylon\\server.js\nC:\\babylon\\Windows_NPM_INSTALL.BAT\nC:\\babylon\\Windows_START.BAT\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Rendering Pipeline in Babylon.js\nDESCRIPTION: Creates a new instance of the default rendering pipeline with HDR texture support. Requires a scene and camera array as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pipeline = new BABYLON.DefaultRenderingPipeline(\n    \"defaultPipeline\", // The name of the pipeline\n    true, // Do you want the pipeline to use HDR texture?\n    scene, // The scene instance\n    [camera] // The list of cameras to be attached to\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Fur Material Properties in Babylon.js\nDESCRIPTION: Adjusts the length, angle, and color of the fur material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.furLength = 3; // Represents the maximum length of the fur, which is then adjusted randomly. Default value is 1.\nfurMaterial.furAngle = Math.PI / 6; // Represents the angle the fur lies on the mesh from 0 to Math.PI/2. The default angle of 0 gives fur sticking straight up and PI/2 lies along the mesh.\nfurMaterial.furColor = new BABYLON.Color3(0.44, 0.21, 0.02); // is the default color if furColor is not set.\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Template Configuration\nDESCRIPTION: HTML configuration for applying a custom loading screen template.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<babylon templates.loading-screen.location=\"#loading-screen\" templates.loading-screen.html=\"\" model=\"....\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Installing gltf-pipeline via npm for Draco Compression\nDESCRIPTION: Installs the `gltf-pipeline` Node.js package globally using npm. This command is required to enable the 'Use Draco compression' option in the Maya glTF exporter, which utilizes this tool to compress the geometry data in the exported glTF file. Requires Node.js and npm to be pre-installed and run in a standard shell (cmd.exe or powershell.exe).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Maya_to_glTF.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g gltf-pipeline\n```\n\n----------------------------------------\n\nTITLE: Converting Isometric to Cartesian Coordinates in Markdown\nDESCRIPTION: This snippet demonstrates how to convert isometric coordinates to Cartesian coordinates. It provides a formula for the conversion based on the isometric vectors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nCartesian coordinates of a point with position iso-vector *xi*&#8407; + *yj*&#8407;  \nhas cartesian coordinates (*x* + 0.5*y*, 0.5&radic;3y)\n```\n\n----------------------------------------\n\nTITLE: Initializing Scene with Modular Imports - Babylon.js Core - JavaScript\nDESCRIPTION: Rewrites the playground scene example for compatibility with the dev host, using direct imports from @dev/core. Sets up a scene with camera, light, sphere, and ground objects using ES6 modules. Requires prior import of canvas and engine, as well as all relevant Babylon.js classes from @dev/core. Inputs: engine, canvas; Output: initialized Scene configured for modular development environments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { canvas, engine } from \"./index\";\nimport { FreeCamera, HemisphericLight, MeshBuilder, Scene, Vector3 } from \"@dev/core\";\n\nexport const createScene = function () {\n  // This creates a basic Babylon Scene object (non-mesh)\n  const scene = new Scene(engine);\n\n  // This creates and positions a free camera (non-mesh)\n  const camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(Vector3.Zero());\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  const light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  // Our built-in 'sphere' shape.\n  const sphere = MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\n\n  // Move the sphere upward 1/2 its height\n  sphere.position.y = 1;\n\n  // Our built-in 'ground' shape.\n  MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Blend Modes for Babylon.js ParticleSystem - JavaScript\nDESCRIPTION: Demonstrates how to configure the blendMode property of a Babylon.js ParticleSystem to change particle blending with the scene. Supports modes like BLENDMODE_ONEONE and BLENDMODE_STANDARD. Assumes that a working particleSystem and BABYLON namespace are present. The blend mode constants determine whether blending is additive, standard, or uses other effects; see Babylon.js documentation for all available options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/ramps_and_blends.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ONEONE;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_STANDARD;\n```\n\n----------------------------------------\n\nTITLE: Handling Mesh Task Success in Babylon.js (JavaScript)\nDESCRIPTION: Configures a callback to execute upon a mesh task's successful loading. Adjusts the position of the first loaded mesh to the zero vector. The 'task' parameter contains loadedMeshes and other info. Must be attached to an existing mesh task; executes after asset loading finishes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmeshTask.onSuccess = function (task) {\n  task.loadedMeshes[0].position = BABYLON.Vector3.Zero();\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DoNBlock in BabylonJS Flow Graph\nDESCRIPTION: This snippet demonstrates how to use a DoNBlock to limit the number of times an execution path is triggered. It shows setting the maximum number of executions and connecting the output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst doN = new FlowGraphDoNBlock();\ndoN.maxExecutions.setValue(new FlowGraphInteger(5), ctx);\ndoN.out.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Face Numbers in Goldberg Mesh - Babylon.js - JavaScript\nDESCRIPTION: This snippet shows how to obtain the face number for a shared face (equidistant from two or more poles) in a Goldberg mesh using Babylon.js. It uses the relatedGoldBergFace method with a single parameter n (the shared face index, 0 <= n < nbSharedFaces), returning the face number of the nth shared face. The functionality requires a GoldbergPoly instance and assumes mesh data ordered as described in the file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst faceNumb = goldbergPoly.relatedGoldBergFace(n); //0 <= n < nbSharedFaces\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Cell Controls in Babylon.js\nDESCRIPTION: Shows how to get controls from a specific grid cell location.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst controls = grid.getChildrenAt(2, 3);\n```\n\n----------------------------------------\n\nTITLE: Opening NodeGeometry Editor Programmatically (Babylon.js, JavaScript)\nDESCRIPTION: This code snippet calls the edit() method on a NodeGeometry object to launch the Node Geometry Editor. It is used for debugging and manual editing when no mesh is available in the scene. Prerequisites are an existing NodeGeometry instance and Babylon.js editor support. Inputs are the node geometry graph; the output is the editor window with the graph loaded, albeit unattached from the live scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnodeGeometry.edit();\n```\n\n----------------------------------------\n\nTITLE: Initializing KTX2 Decoder with Worker Pool in Main Application (JavaScript)\nDESCRIPTION: Demonstrates how to initialize and use the KTX2 decoder with a web worker pool in the main application file. It imports necessary Babylon.js modules, imports the MSC transcoder WASM file as an ArrayBuffer, creates an `AutoReleaseWorkerPool`, configures the pool to initialize workers using the previously created `worker.js` and the WASM data, assigns the pool to `KhronosTextureContainer2.WorkerPool`, and then loads a KTX2 texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// mainFile.js\nimport { Engine } from \"@babylonjs/core/Engines/engine.js\";\nimport { Scene } from \"@babylonjs/core/scene.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport wasmMSCTranscoder from \"@babylonjs/ktx2decoder/wasm/msc_basis_transcoder.wasm\"; // make sure the import is an arraybuffer\nimport { KhronosTextureContainer2 } from \"@babylonjs/core/Misc/khronosTextureContainer2.js\";\nimport { AutoReleaseWorkerPool } from \"@babylonjs/core/Misc/workerPool.js\";\nimport { initializeWebWorker } from \"@babylonjs/core/Misc/khronosTextureContainer2Worker.js\";\nimport \"@babylonjs/core/Materials/Textures/Loaders/ktxTextureLoader.js\";\n\nexport function initScene(element) {\n  const engine = new Engine(element);\n  const scene = new Scene(engine);\n\n  // Create a worker pool\n  // This will be used when a new KhronosTextureContainer2 is created\n  KhronosTextureContainer2.WorkerPool = new AutoReleaseWorkerPool(4, () => {\n    // Create a new worker using the worker.js file we have already created\n    const worker = new Worker(new URL(\"./worker.js\", import.meta.url), {\n      type: \"module\",\n    });\n    // Initialize the worker with the wasm array buffer\n    return initializeWebWorker(worker, {\n      // pass all arraybuffers here\n      wasmMSCTranscoder,\n    });\n  });\n\n  // decode the texture\n  const texture = new Texture(\n    \"./2d_etc1s.ktx2\",\n    scene,\n    false,\n    true,\n    Texture.TRILINEAR_SAMPLINGMODE,\n    () => {\n      console.log(texture);\n    },\n    (message, exception) => {\n      console.error(\"Can't fetch texture\", message, exception);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Normal Material with Diffuse Texture in Babylon.js\nDESCRIPTION: This snippet shows how to add a diffuse texture to the Normal Material. The texture colors will be mixed with the normal colors, allowing for additional customization of the material's appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/normalMat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnormalMaterial.diffuseTexture = new BABYLON.Texture(\"textures/amiga.jpg\", scene);\n```\n\n----------------------------------------\n\nTITLE: Optimized Particle Acceleration Implementation in JavaScript\nDESCRIPTION: This improved version declares the acceleration vector outside the update function and uses addInPlace() instead of add() to avoid creating new objects on each update, significantly reducing garbage collection overhead.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/optimize_sps.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet accel = new BABYLON.Vector3(0, 0.5, 0);\nSPS.updateParticle = function(particle) {\n  particle.velocity.addInPlace(accel);\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Receiving Shadows on Meshes in Babylon.js JavaScript\nDESCRIPTION: Sets the 'receiveShadows' property on a mesh to true, enabling it to display shadows cast by other shadow caster meshes. This is necessary for the mesh to visibly respond to scene shadows generated by the shadow generator.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.receiveShadows = true;\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Object for GUI Data Binding (JavaScript)\nDESCRIPTION: Demonstrates defining a JavaScript object as a data structure to be bound into XML layouts using XmlLoader's dataSource attribute for dynamic GUI content repeater scenarios. Used for generating lists or panels with content derived from object values in GUI definitions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst objTexts = {\n  first: {\n    name: \"john\",\n    surname: \"smith\",\n  },\n  second: {\n    name: \"ben\",\n    surname: \"Stiller\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Logarithmic Depth Buffer in Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to enable the logarithmic depth buffer on a StandardMaterial in Babylon.js by setting the 'useLogarithmicDepth' property to true. The functionality depends on support for the GL_EXT_frag_depth WebGL extension in the browser; if unsupported, Babylon.js will fall back to linear depth buffering. The key parameter is the 'material' object, representing a StandardMaterial instance, and its 'useLogarithmicDepth' property. No external imports are required beyond a setup Babylon.js scene with a properly instantiated material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/logarithmicDepthBuffer.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmaterial.useLogarithmicDepth = true;\n```\n\n----------------------------------------\n\nTITLE: Initializing PointerOverEventBlock in JavaScript\nDESCRIPTION: This snippet instantiates a FlowGraphPointerOverEventBlock, targeting a specific 'mesh'. It's configured with 'stopPropagation: true'. The 'done' output connects to 'nextBlock.in', causing 'nextBlock' to execute when the pointer moves over the target mesh or its descendants.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointerOver = new FlowGraphPointerOverEventBlock({ targetMesh: mesh, stopPropagation: true });\n// notify an execution block that the pointer is over a mesh\npointerOver.done.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Creating a Motor-Enabled Joint in Babylon.js\nDESCRIPTION: Shows how to create a motor-enabled joint, add it to impostors, and set its motor properties in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/joints.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar joint = new BABYLON.MotorEnabledJoint(BABYLON.PhysicsJoint.TYPE_OF_JOINT, jointData);\n\nmainImpostor.addJoint(connectedImpostor, joint);\n\njoint.setMotor(target speed, maximum torque)\n```\n\n----------------------------------------\n\nTITLE: Accessing Layer Scenes - Babylon.js JavaScript\nDESCRIPTION: Retrieves references to the original scene and the utility overlay scene from a UtilityLayerRenderer instance. Useful for direct manipulation and object creation in the correct scene context. Returns scene objects for both layers; requires a previously created UtilityLayerRenderer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nutilLayer.originalScene;\nutilLayer.utilityLayerScene;\n```\n\n----------------------------------------\n\nTITLE: Baking and Serializing VAT Data for Offline Use in Babylon.js\nDESCRIPTION: This code demonstrates how to bake vertex animation data at build time, serialize it to JSON, and save it as a file. This approach avoids the performance cost of baking animations at runtime.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/baked_texture_animations.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet baker = null,\n  mesh = null;\nconst animationRanges = [{ from: 1, to: 20, name: \"My animation\" }];\nBABYLON.ImportMeshAsync(\"http://example.com/arr.babylon\", scene, undefined)\n  .then((importResult) => {\n    mesh = importResult.meshes[0];\n    // create the baker helper, so we can generate the texture\n    baker = new BABYLON.VertexAnimationBaker(scene, mesh);\n    // you can slice the animation here with several animation ranges.\n    return baker.bakeVertexData(ranges);\n  })\n  .then((vertexData) => {\n    // we got the vertex data. let's serialize it:\n    const vertexDataJSON = baker.serializeBakedVertexDataToJSON(vertexData);\n    // and save it to a local JSON file\n    let a = document.createElement(\"a\");\n    a.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(vertexDataJSON));\n    a.setAttribute(\"download\", \"vertexData.json\");\n    a.click();\n  });\n```\n\n----------------------------------------\n\nTITLE: Injecting JavaScript into Webpage with Puppeteer\nDESCRIPTION: This code shows how to inject JavaScript into the loaded webpage to modify the Babylon.js scene, specifically adjusting the camera angle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderRemoteScreenshot.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npage.evaluate(\"BABYLON.Engine.LastCreatedScene.activeCamera.alpha = 1.4;\");\n```\n\n----------------------------------------\n\nTITLE: Running Babylon.js Test App Locally\nDESCRIPTION: Command to run the Babylon.js test app in development mode locally. This sets the DEV_BUILD variable to true.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Keyboard Input with Action Manager in Babylon.js\nDESCRIPTION: Creates an input mapping system using Babylon.js Action Manager to detect keyboard events. This code registers actions for key down and up events to track the current state of keys.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animatedCharacter.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputMap = {};\nscene.actionManager = new BABYLON.ActionManager(scene);\nscene.actionManager.registerAction(\n  new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {\n    inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == \"keydown\";\n  }),\n);\nscene.actionManager.registerAction(\n  new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {\n    inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == \"keydown\";\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Initialization of AMP 360 Video Player\nDESCRIPTION: JavaScript code to programmatically initialize the Azure Media Player with the 360 video plugin, including event handling and source configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPlayer = amp(\n  \"videoPlayer\",\n  {\n    nativeControlsForTouch: false,\n    autoplay: false,\n    controls: true,\n    width: \"640\",\n    height: \"480\",\n    poster: \"\",\n    techOrder: [\"azureHtml5JS\", \"html5\"],\n    plugins: {\n      threeSixty: {\n        enableVR: true,\n      },\n    },\n  },\n  function () {\n    console.log(\"Good to go!\");\n    // add an event listener\n    this.addEventListener(\"ended\", function () {\n      console.log(\"Finished!\");\n    });\n  },\n);\n\nmyPlayer.src([\n  {\n    src: \"//willzhanmswest.streaming.mediaservices.windows.net/1f2dd2dd-ee99-40be-aae9-d0c2209982eb/DroneFlightOverLasVegasStripH3Pro7.ism/Manifest\",\n    type: \"application/vnd.ms-sstr+xml\",\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Lighting for Skybox Material in Babylon.js\nDESCRIPTION: Disables lighting calculations for the skybox material to prevent light reflections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nskyboxMaterial.disableLighting = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreground or Background for Babylon.js GUI Fullscreen Texture - JavaScript\nDESCRIPTION: This code snippet shows how to create a fullscreen AdvancedDynamicTexture in Babylon.js GUI with an optional boolean specifying if it should render in the foreground (default, true) or background (false). It also demonstrates how to change this property at runtime by setting 'isForeground'. Parameters: a UI identifier string, and an optional boolean for foreground/background. Applicable only in fullscreen mode; only one fullscreen GUI per scene is supported.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// true == foreground (default)\n// false == background\nconst advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"myUI\", foreground? : Boolean );\n// it can also be changed on the go:\n    advancedTexture.isForeground = false;\n```\n\n----------------------------------------\n\nTITLE: Handling Controller Model Loading Events\nDESCRIPTION: Shows two approaches for handling controller model loading events, demonstrating both nested and simplified observable patterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// async, async, async\nxrInput.onControllerAddedObservable.add((inputSource) => {\n  inputSource.onMotionControllerInitObservable.add((motionController) => {\n    motionController.onMeshLoadedObservable.add((model) => {});\n  });\n});\n\n// a little cleaner\nxrInput.onControllerAddedObservable.add((inputSource) => {\n  inputSource.onModelLoadedObservable.add((model) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Picking for an Individual Babylon.js Sprite (JavaScript)\nDESCRIPTION: This JavaScript/TypeScript code snippet shows how to set the `isPickable` property for an individual `Sprite` instance. It can be set to `true` to enable picking for that specific sprite or `false` (which is the default) to disable it, allowing for fine-grained control over sprite interactivity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsprite.isPickable = false / true\n```\n\n----------------------------------------\n\nTITLE: Canceling a Specific Delay in Babylon.js Flow Graph\nDESCRIPTION: Cancels a specific delay created by SetDelayBlock using CancelDelayBlock. Requires the delay index that was returned by the SetDelayBlock.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst delayIndex = delayBlock.lastDelayIndex.getValue(ctx);\n\nconst cancelDelay = new FlowGraphCancelDelayBlock();\ncancelDelay.delayIndex.setValue(delayIndex, ctx);\ncancelDelay.out.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Configuring Snap-to Radius for WebXR Teleportation Hotspots\nDESCRIPTION: Sets the radius within which the teleportation target will snap to predefined hotspots, allowing for adjustable proximity detection around snap points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst interestingSpot = new BABYLON.Vector3(-4, 0, 4);\nconst interestingSpot2 = new BABYLON.Vector3(4, 0, 4);\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  snapPositions: [interestingSpot, interestingSpot2],\n  snapToPositionRadius: 1.2,\n});\n```\n\n----------------------------------------\n\nTITLE: Disposing GUITextfield in JavaScript\nDESCRIPTION: Method to dispose of the GUITextfield and remove it from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextfield.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Custom Input Implementation Template in Babylon.js\nDESCRIPTION: Template showing required methods for implementing a custom camera input mechanism.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// This function must return the class name of the camera, it could be used for serializing your scene\ngetClassName();\n\n// This function must return the simple name that will be injected in the input manager as short hand\n// for example \"mouse\" will turn into camera.inputs.attached.mouse\ngetSimpleName();\n\n//T his function must activate your input event.  Even if your input does not need a DOM element\n// element and noPreventDefault must be present and used as parameter names.\n// Return void.\nattachControl(noPreventDefault);\n\n// Detach control must deactivate your input and release all pointers, closures or event listeners\n// element must be present as a parameter name.\n// Return void.\ndetachControl();\n\n// This optional function will get called for each rendered frame, if you want to synchronize your\n// input to rendering, no need to use requestAnimationFrame. It's a good place for applying\n// calculations if you have to.\n// Return void.\ncheckInputs();\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup G in Babylon.js Physics\nDESCRIPTION: Parameter setup similar to setup F, demonstrating the effects of connected axle transformations on the joint system with zero-mass axle and pivots at the origin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(0, 0, 0),\nconnectedPivot: new BABYLON.Vector3(0, 0, 0),\nmainAxis: new BABYLON.Vector3(0, 1, 0),\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Generating SubMeshes for Tiled Ground in Babylon.js - JavaScript\nDESCRIPTION: This snippet programmatically divides a tiled ground mesh into submeshes using nested loops, allowing for alternating materials (such as for a chessboard effect). Each submesh is constructed with parameters indicating which material slot to use and the region of the main mesh indices. Dependencies: a created 'tiledGround', the Babylon.js library, and defined 'grid.w' and 'grid.h' to control subdivision dimensions. Input parameters: 'verticesCount', 'tileIndicesLength', and the grid object. Limitations: the snippet assumes materials are set according to index parity for checkerboard patterns, but can be extended for other layouts.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_ground.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet base = 0;\nfor (let row = 0; row < grid.h; row++) {\n  for (let col = 0; col < grid.w; col++) {\n    new BABYLON.SubMesh(row % 2 ^ col % 2, 0, verticesCount, base, tileIndicesLength, tiledGround);\n    base += tileIndicesLength;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Entering and Exiting WebXR Immersive Mode\nDESCRIPTION: Example of how to enter and exit WebXR immersive mode after the XRService has been initialized. Shows the activation and exit methods that should be called at appropriate times in the application flow.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/webxrextension.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisOk = await xrService.activateXR();\n// do some\nxrService.exitFromXR();\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Drag Gradient Over Lifetime (Value Ranges) in Babylon.js\nDESCRIPTION: Demonstrates using `addDragGradient` with three arguments to define a range for the drag factor at different points in the particle's lifetime. The actual drag factor will be randomly chosen within the specified range at each time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addDragGradient(0, 0.1, 0.2); //drag range at start of particle lifetime\nparticleSystem.addDragGradient(0.4, 0.5, 0.6); //drag range at 2/5 of duration of particle system\nparticleSystem.addDragGradient(1.0, 0.8, 0.9); //drag range at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Facet and Local Projection Point Using Local Coordinates in Babylon.js\nDESCRIPTION: Illustrates using `mesh.getClosestFacetAtLocalCoordinates` to find the closest facet based on local coordinates (x, y, z) instead of world coordinates. The method also calculates the projection point in the mesh's local space, storing it in the `localProj` vector passed by reference. Optional filtering parameters (`checkFace`, `facing?`) can also be used similarly to the world coordinate version.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst localProj = BABYLON.Vector3.Zero();\nconst index = mesh.getClosestFacetAtLocalCoordinates(x, y, z, localProj); // local projection\nif (index != null) {\n  const worldPos = mesh.getFacetPosition(index); // the world position of this facet\n  // use the vector3 localProj here ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Automatic Facet Data Updates for Morphing Ribbons in Babylon.js\nDESCRIPTION: This example shows how facet data is automatically updated for certain parametric shapes like ribbons when they are morphed. For updatable meshes created with MeshBuilder, updateFacetData() is called internally when the mesh is modified.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst paths = someArrayOfPaths;\nconst mesh = BABYLON.MeshBuilder.CreateRibbon(\"m\", {pathArray: paths, updatable: true}, scene); // create an updatable ribbon\nmesh.updateFacetData();    // enable the feature once\n// morphing function : change the ribbon geometry\nconst morphRibbon = function(k) {\n    for (let p = 0; p < paths.length; p++) {\n        const path = paths[p];\n        for (let i = 0; i < path.length) {\n            path[i].y = Math.sin(k) * Math.cos(i);\n        }\n    }\n}\nconst k = 0.0;\n// render loop\nscene.registerBeforeRender(function() {\n    morphRibbon(k);                     // change the geometry\n    BABYLON.MeshBuilder.CreateRibbon(null, {pathArray: paths, instance: mesh}); // actually morph the ribbon\n    // No need for updateFacetData() here, CreateRibbon() just did it ... faster !\n    k += 0.01;\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting BoundingBoxGizmo Control Sizes in Babylon.js\nDESCRIPTION: Shows how to adjust the size of rotation and scale controls on a BoundingBoxGizmo.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// The size of the rotation spheres attached to the bounding box (Default: 0.1)\ngizmo.rotationSphereSize = 0.1;\n// The size of the scale boxes attached to the bounding box (Default: 0.1)\ngizmo.scaleBoxSize = 0.1;\n// If set, the rotation spheres and scale boxes will increase in size based on the distance away from the camera to have a consistent screen size (Default: false)\ngizmo.rotationSphereSize = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring WebXR Teleportation Input Source\nDESCRIPTION: Shows how to configure the teleportation feature to use the main component only and set the time to teleport when using a button input.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  timeToTeleport: 5000,\n  useMainComponentOnly: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching and Detaching WebXR Features\nDESCRIPTION: Demonstrates how to manually attach and detach enabled WebXR features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHitTest1 = fm.enableFeature(BABYLON.WebXRFeatureName.HIT_TEST, 1);\n\nxrHitTest1.detach();\n\nxrHitTest1.attach();\n```\n\n----------------------------------------\n\nTITLE: Creating InputTextArea Control in BabylonJS\nDESCRIPTION: Demonstrates how to instantiate a new InputTextArea control with initial text in BabylonJS GUI system. The InputTextArea allows for multi-line text input with automatic height adjustment capabilities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputTextArea = new BABYLON.GUI.InputTextArea(\"input\", \"Some initial text\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Pixi.js Behind Babylon.js Scene\nDESCRIPTION: Demonstrates how to render a Pixi.js stage behind a Babylon.js scene by setting the scene's autoClear property to false and adjusting the render sequence.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_PixiJS.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.autoClear = false;\n\nengine.runRenderLoop(function () {\n  pixiRenderer.reset();\n  pixiRenderer.render(stage);\n\n  scene.autoClear = false;\n  scene.render();\n  engine.wipeCaches(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking GUIDialog Visibility\nDESCRIPTION: Method to check if the GUIDialog is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiDialog.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Implementing IWebXRFeature Interface in JavaScript\nDESCRIPTION: The IWebXRFeature interface definition that all WebXR features must implement. It extends IDisposable and includes methods for attaching and detaching the feature from a WebXR session, along with state properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ninterface IWebXRFeature extends IDisposable {\n    /**\n     * Is this feature attached\n     */\n    attached: boolean;\n    /**\n     * Should auto-attach be disabled?\n     */\n    disableAutoAttach: boolean;\n    /**\n     * Attach the feature to the session\n     * Will usually be called by the features manager\n     *\n     * @param force should attachment be forced (even when already attached)\n     * @returns true if successful.\n     */\n    attach(force ? : boolean): boolean;\n    /**\n     * Detach the feature from the session\n     * Will usually be called by the features manager\n     *\n     * @returns true if successful.\n     */\n    detach(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Objects in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Presents the JSON structure for describing instances, or per-mesh variants, in Babylon.js. Contains transform information such as name, position, scaling, and (optionally) rotation or quaternion. The actions field enables attaching behavior or scripts to the instance. Proper usage requires referenced actions to be defined elsewhere; at least name, position, and scaling are typically mandatory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"name\\\": string,\\n\\t\\\"tags\\\": string,\\n\\t\\\"position\\\": vector3,\\n\\t\\\"rotation\\\": vector3 (can be omitted),\\n\\t\\\"rotationQuaternion\\\": vector4 (can be omitted),\\n\\t\\\"scaling\\\": vector3,\\n\\t\\\"actions\\\": array of actions (see below)\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiled Navigation Mesh Parameters in Babylon.js\nDESCRIPTION: Configuration object for creating a tiled navigation mesh that supports dynamic obstacles. Includes parameters for tile size, walkable areas, and mesh simplification settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/obstacles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst navmeshParameters = {\n  cs: 0.2,\n  ch: 0.2,\n  walkableSlopeAngle: 0,\n  walkableHeight: 0.0,\n  walkableClimb: 0,\n  walkableRadius: 1,\n  maxEdgeLen: 12,\n  maxSimplificationError: 1.3,\n  minRegionArea: 8,\n  mergeRegionArea: 20,\n  maxVertsPerPoly: 6,\n  detailSampleDist: 6,\n  detailSampleMaxError: 15,\n  borderSize: 1,\n  tileSize: 20,\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Physics Settings\nDESCRIPTION: Simplified physics initialization using default parameters for gravity and plugin selection.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.enablePhysics();\n```\n\n----------------------------------------\n\nTITLE: Optimizing Rendering Ratio for Volumetric Light Scattering Post Process - Babylon.js - JavaScript\nDESCRIPTION: Initializes the VolumetricLightScatteringPostProcess with separate post-process and internal pass (render target) ratios for performance tuning. Accepts an options object (with postProcessRatio and passRatio), camera, mesh, sample count, sampling mode, engine, and reusability flag. Balances rendering quality and performance by lowering the pass ratio.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst vls = new BABYLON.VolumetricLightScatteringPostProcess(\"vls\", { postProcessRatio: 1.0, passRatio: 0.5 }, camera, lightSourceMesh, 75, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, false);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Execution Context in FlowGraph (JavaScript)\nDESCRIPTION: This code demonstrates how to create an execution context via 'createContext' on a FlowGraph instance. Contexts maintain variables and references for graph execution. A FlowGraph object named 'graph' is required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst context = graph.createContext();\n```\n\n----------------------------------------\n\nTITLE: Setting VolumeBasedPanel Columns Property (Babylon.js, JavaScript)\nDESCRIPTION: This example shows how to define the number of columns in a VolumeBasedPanel, prompting it to compute the necessary number of rows based on the number of child controls. This approach is useful for grid-like 3D layout. Applicable to SpherePanel, CylinderPanel, and other VolumeBasedPanel derivatives. Requires Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npanel.columns = 5; // The panel will automatically compute the number of rows based on number of child controls\n```\n\n----------------------------------------\n\nTITLE: Adding Babylon.js Loaders via CDN (HTML)\nDESCRIPTION: Adds Babylon.js core and loaders scripts to an HTML page using CDN links. These are production links and should not be used in production environments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n<script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Nested DOM Configuration Example\nDESCRIPTION: Example of using nested DOM elements for more readable viewer configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"minimal\">\n  <model url=\"https://ugcorigin.s-microsoft.com/12/2e77b8e3-0000-0000-7a48-6505db2f0ef9/952/1508427934473.gltf\"> </model>\n  <camera>\n    <behaviors>\n      <auto-rotate type=\"0\"></auto-rotate>\n    </behaviors>\n  </camera>\n  <lights>\n    <light1 type=\"1\" shadow-enabled=\"true\"> </light1>\n  </lights>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Animating Rotating and Translating Meshes with Coordinate Transformation - Babylon.js JavaScript\nDESCRIPTION: This snippet demonstrates how to rotate a box mesh around multiple axes, translate it in world space, and update a smaller box's position so it travels perpendicular to the box's moving top face. The small box's orientation is synced by copying the rotation quaternion. The snippet uses Babylon.js APIs such as getWorldMatrix(), rotate(), translate(), and TransformCoordinates. It is intended for use inside a Babylon.js scene's registerAfterRender loop, expecting variables 'box', 'small', and 'y' to be defined and properly initialized elsewhere. Input parameters include the movement amount and axes, while outputs are updated positions and rotations for both boxes. The code assumes the existence of the Babylon.js library and a properly set up 3D scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/transform_coords.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    scene.registerAfterRender(function () {\n        box.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);\n        box.rotate(BABYLON.Axis.X, Math.PI / 200, BABYLON.Space.LOCAL);\n        box.translate(new BABYLON.Vector3(-1, -1, -1).normalize(), 0.001, BABYLON.Space.WORLD)\n        small.rotationQuaternion = box.rotationQuaternion;\n        matrix = box.getWorldMatrix();\n        y += 0.001;\n        local_pos = new BABYLON.Vector3(0, y, 0);\n        small.position = BABYLON.Vector3.TransformCoordinates(local_pos, matrix);\n\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Depth Render Target Texture Handle with Frame Graph\nDESCRIPTION: Uses the Frame Graph's texture manager to create a render target texture for depth information. Specifies size as a percentage of the screen (100x100%), format (DEPTH32_FLOAT), type, multisampling (4 samples), and disables mipmaps and sRGB. Returns a texture handle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst depthTexture = frameGraph.textureManager.createRenderTargetTexture(\"depth\", {\n    size: { width: 100, height: 100 },\n    options: {\n        createMipMaps: false,\n        types: [BABYLON.Constants.TEXTURETYPE_UNSIGNED_BYTE],\n        formats: [BABYLON.Constants.TEXTUREFORMAT_DEPTH32_FLOAT],\n        samples: 4,\n        useSRGBBuffers: [false],\n        labels: [\"depth\"],\n    },\n    sizeIsPercentage: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Spatial 3D Sound in BabylonJS\nDESCRIPTION: Shows how to create a spatial 3D sound with custom configuration including loop, autoplay, and spatial properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = new BABYLON.Sound(\"music\", \"music.wav\", scene, null, {\n  loop: true,\n  autoplay: true,\n  spatialSound: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshDebugPluginMaterial for VERTEXCOLORS Mode in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the MeshDebugPluginMaterial to visualize the vertex colors of a mesh. It instantiates the plugin with the `mode` set to `VERTEXCOLORS`. The `multiply` option is set to `false` to ensure the raw vertex colors are displayed directly, overriding the material's base color and lighting effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/visualizeMeshData.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nnew BABYLON.MeshDebugPluginMaterial(mesh.material, {\n    mode: BABYLON.MeshDebugMode.VERTEXCOLORS,\n    multiply: false\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Shape Cast Result Properties\nDESCRIPTION: Specific property for ShapeCastResult showing the hit fraction along the casting ray.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Gets the hit fraction along the casting ray\n */\nhitFraction: number\n```\n\n----------------------------------------\n\nTITLE: Assigning Specular Texture for Standard Material in Babylon.js\nDESCRIPTION: This snippet shows how to assign a specular texture to a standard material in Babylon.js, which is necessary for enabling reflections on the object when using the SSR post-process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/screenSpaceReflectionsPostProcess.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// For a BABYLON.StandardMaterial\nmyMaterial.specularTexture = new BABYLON.Texture(\"textures/specular.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Full API Example of Babylon.js setAndStartTimer\nDESCRIPTION: Showcases the complete API of the setAndStartTimer function, including breakCondition, onEnded, onTick, and onAborted callbacks. This example demonstrates how to use all available options for fine-grained control over the timer execution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.setAndStartTimer({\n  timeout: 3000,\n  contextObservable: scene.onBeforeRenderObservable,\n  breakCondition: () => {\n    // this will check if we need to break before the timeout has reached\n    return scene.isDisposed();\n  },\n  onEnded: (data) => {\n    // this will run when the timeout has passed\n  },\n  onTick: (data) => {\n    // this will run\n  },\n  onAborted: (data) => {\n    // this function will run when the break condition has met (premature ending)\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Function References with FlowGraphFunctionReferenceBlock - JavaScript\nDESCRIPTION: This snippet illustrates the creation of a callable function reference inside the flow graph using FlowGraphFunctionReferenceBlock. It defines an object holding a function and then sets the function name and the container object as inputs to the block. The block produces a callable function reference that can be executed by subsequent nodes, but will not execute the function immediately. This approach allows for flexible control flow and parameterization of function invocations. Babylon.js and FlowGraphFunctionReferenceBlock are required dependencies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst functionContainer = {\n  myFunction: (ctx) => {\n    console.log(\"Hello, world!\");\n  },\n};\nconst functionReference = new FlowGraphFunctionReferenceBlock();\nfunctionReference.functionName.setValue(\"myFunction\", ctx);\nfunctionReference.object.setValue(functionContainer, ctx);\nfunctionReference.output.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Iridescence in Babylon.js PBR Material\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the iridescence effect on a Babylon.js PBR material to simulate thin-film interference (like oil slicks). It initializes a PBR material with specific base properties (low albedo, high metallic, low roughness) suitable for iridescence, then enables the effect (`iridescence.isEnabled = true`) and sets its intensity (`iridescence.intensity`). Requires `BABYLON.PBRMaterial`, `BABYLON.Color3`, and a `scene`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.albedoColor = new BABYLON.Color3(0.1, 0.1, 0.1);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.iridescence.isEnabled = true;\npbr.iridescence.intensity = 0.9;\n```\n\n----------------------------------------\n\nTITLE: Removing Default Keyboard Input from Babylon.js Camera (JavaScript)\nDESCRIPTION: Removes the default FreeCameraKeyboardMoveInput from the camera's input manager, allowing developers to redefine custom camera movement or rotation behaviors. This step is essential before attaching new keyboard input methods, ensuring the default arrow key mapping does not interfere. Requires a previously defined camera object in the Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.inputs.removeByType(\"FreeCameraKeyboardMoveInput\");\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Anchors System - TypeScript\nDESCRIPTION: Shows how to enable the WebXR Anchor System using TypeScript, casting the returned feature to the correct type. This allows strong typing and autocompletion for anchor system methods and properties. Requires Babylon.js with WebXR support and a valid featuresManager instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// featuresManager from the base webxr experience helper\\nconst anchorSystem = featuresManager.enableFeature(BABYLON.WebXRAnchorSystem, \\\"latest\\\") as BABYLON.WebXRAnchorSystem;\n```\n\n----------------------------------------\n\nTITLE: Opening Embedded Inspector in Popup Mode\nDESCRIPTION: Demonstrates how to open the embedded Inspector in popup mode by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar debugLayer = await scene.debugLayer.show({\n    embedMode: true\n});\n\ndebugLayer.popupEmbed()\n```\n\n----------------------------------------\n\nTITLE: SceneManager Navigation Interface Definition in TypeScript\nDESCRIPTION: This TypeScript interface defines the navigation mesh related methods available in the Babylon.js SceneManager class. It includes functions for retrieving navigation tools, finding paths, and moving agents along paths.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/09_NavigationMesh.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    declare module BABYLON {\n        class SceneManager {\n\n            /** Gets the native babylon mesh navigation tool */\n            getNavigationTool(): Navigation;\n\n            /** Gets the current navigation zone */\n            getNavigationZone(): string;\n\n            /** Finds a navigation path and returns a array of navigation positions */\n            findNavigationPath(origin: BABYLON.Vector3, destination: BABYLON.Vector3): BABYLON.Vector3[];\n\n            /** Gets true if the scene has a navigation mesh */\n            hasNavigationMesh(): boolean;\n\n            /** Returns the current scene's navigation mesh */\n            getNavigationMesh(): BABYLON.AbstractMesh;\n\n            /** Builds the current scene's navigation nodes */\n            buildNavigationMesh(mesh: BABYLON.AbstractMesh): any;\n\n            /** Returns a picked navigation point */\n            getNavigationPoint(position: BABYLON.Vector3, raise?: number, length?: number): BABYLON.Vector3;\n\n            /** Moves the specified navigation again along a path of positions */\n            moveNavigationAgent(agent: BABYLON.AbstractMesh, path: BABYLON.Vector3[], speed?: number, loop?: boolean, callback?: () => void): void;\n\n            /** Returns an array of navigation agents */\n            getNavigationAgents(): BABYLON.Mesh[];\n\n            /** Returns the specfied navigation agent info */\n            getNavigationAgentInfo(agent: BABYLON.AbstractMesh): BABYLON.NavigationAgent;\n\n            /** Returns the current scene's navigation area table */\n            getNavigationAreaTable(): BABYLON.INavigationArea[];\n\n            /** Returns the current scene's navigation area indexes */\n            getNavigationAreaIndexes(): number[];\n\n            /** Returns the current scene's navigation area names */\n            getNavigationAreaName(index: number): string;\n\n            /** Returns the current scene's navigation area cost */\n            getNavigationAreaCost(index: number): number;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating CloudBis Texture Instance in Test Page\nDESCRIPTION: This JavaScript snippet shows how to create an instance of the CloudBisProceduralTexture in the test page. It initializes a texture with a specified name, size, and scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/proceduralTextureForTexLibrary.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cloudBis = new BABYLON.CloudBisProceduralTexture(\"cloudPTBis\", 256, scene);\n```\n\n----------------------------------------\n\nTITLE: Computing World Position in Vertex Shader - GLSL\nDESCRIPTION: This GLSL snippet demonstrates how to compute the world position in a Babylon.js vertex shader, which is essential for fog calculations. The snippet calculates the world-space position and projected clip-space coordinates, requiring uniforms for the world, view, and viewProjection matrices. The main input parameter is the vertex position, and outputs go to gl_Position. No output by itself, but serves as part of a larger shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nvec4 worldPos = world * p;\ngl_Position = viewProjection * worldPos;\n```\n\n----------------------------------------\n\nTITLE: Alternative Mesh Creation Method in Babylon.js\nDESCRIPTION: This snippet shows an alternative method for creating meshes in Babylon.js using the Mesh.Create method. This approach requires specifying required parameters and makes the scene parameter compulsory when used with optional parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = BABYLON.Mesh.Create<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core Package via npm\nDESCRIPTION: This command installs the Babylon.js core package using npm. It's required as a peer dependency for the controls library, particularly when using the ES6 version.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Platform Input Detection\nDESCRIPTION: Updates the input detection system to handle both keyboard and mobile touch inputs for character actions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/crossPlatform.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.inputMap[\"Shift\"] || this._mobileDash) {\n    this.dashing = true;\n} else {\n    this.dashing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AnimationKey Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Specifies the JSON format for an animation keyframe within a Babylon.js animation definition. Each key consists of a frame number (integer) and an array of float values corresponding to the state of the animated property at that specific frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"frame\": int,\n    \"values\": array of float (depending of animated value)\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing WebXR Render Target\nDESCRIPTION: Sets up the render target and WebGL layer for XR rendering\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderTarget = sessionManager.getWebXRRenderTarget(/*outputCanvasOptions: WebXRManagedOutputCanvasOptions*/);\nconst xrWebGLLayer = renderTarget.initializeXRLayerAsync(this.sessionManager.session);\n```\n\n----------------------------------------\n\nTITLE: Custom Audio Unlock Implementation in Babylon.js\nDESCRIPTION: Shows how to implement custom audio unlocking on first user interaction, bypassing the default unmute button.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Engine.audioEngine.useCustomUnlockedButton = true;\n\nwindow.addEventListener(\"click\", () => {\n  if (!BABYLON.Engine.audioEngine.unlocked) {\n    BABYLON.Engine.audioEngine.unlock();\n  }\n}, { once: true });\n```\n\n----------------------------------------\n\nTITLE: Setting Face Colors in Babylon.js\nDESCRIPTION: Demonstrates how to set individual face colors for a box mesh using Color4 values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst faceColors = new Array(6);\n\nfaceColors[4] = new BABYLON.Color4(1, 0, 0, 1); // red top\nfaceColors[1] = new BABYLON.Color4(0, 1, 0, 1); // green front\n```\n\n----------------------------------------\n\nTITLE: Embedding Playground in Forum Posts\nDESCRIPTION: HTML iframe code for embedding a Babylon.js playground scene within forum messages. Demonstrates how to share interactive examples with configurable dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe src=\"https://playground.babylonjs.com/frame.html#6F0LKI#2\" width=\"400px\" height=\"250px\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Adding NME Example in BabylonJS Documentation\nDESCRIPTION: Demonstrates how to embed a Node Material Editor (NME) example with title and description.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<NME id=\"nmeId\" title=\"NME title\" description=\"A short description\" />\n```\n\n----------------------------------------\n\nTITLE: Reversing Frame Path in Babylon.js\nDESCRIPTION: Simple operation to reverse the path array direction, which affects the profile orientation around the frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Frame.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npath.reverse();\n```\n\n----------------------------------------\n\nTITLE: Creating Slide and Rotate Animation in BabylonJS\nDESCRIPTION: Defines a rotation animation along the Y-axis with keyframes that complete one full rotation over the animation duration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/combineAnimations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst yRot = new BABYLON.Animation(\"yRot\", \"rotation.y\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n\nconst keyFramesR = [];\n\nkeyFramesR.push({\n  frame: 0,\n  value: 0,\n});\n\nkeyFramesR.push({\n  frame: frameRate,\n  value: Math.PI,\n});\n\nkeyFramesR.push({\n  frame: 2 * frameRate,\n  value: 2 * Math.PI,\n});\n\nyRot.setKeys(keyFramesR);\n```\n\n----------------------------------------\n\nTITLE: Handling Player Disconnection in JavaScript\nDESCRIPTION: Implementation for removing disconnected players from the game by disposing of their visual entities when they leave the room.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nroom.state.players.onRemove(function (player, sessionId) {\n  playerEntities[sessionId].dispose();\n  delete playerEntities[sessionId];\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pointer Ray Direction in WebXR\nDESCRIPTION: Demonstrates how to get pointer and grip direction rays from WebXR input sources using the getWorldPointerRayToRef method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the pointer direction ray.\nconst pointerRay = new BABYLON.Ray();\nxrInputSource.getWorldPointerRayToRef(pointerRay);\n\n// Try to get the grip direction ray. If that's not available,\n// the pointer direction ray will be given.\nconst gripRay = new BABYLON.Ray();\nxrInputSource.getWorldPointerRayToRef(gripRay, /* gripIfAvailable = */ true);\n```\n\n----------------------------------------\n\nTITLE: Accessing MorphTargetManager from glTF Mesh in Babylon.js\nDESCRIPTION: This snippet demonstrates how to access the `MorphTargetManager` associated with a mesh loaded from a glTF file. When a glTF containing morph targets is loaded, Babylon.js automatically creates the manager. Accessing `mesh.morphTargetManager` allows inspection of the targets and their influences, for example, by logging it to the console.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(mesh.morphTargetManager);\n```\n\n----------------------------------------\n\nTITLE: Handling Skeleton Animations with LayerMask in Babylon.js\nDESCRIPTION: Implementation showing how to update skeleton animations when using layerMasks with multiple cameras. This solution ensures animated meshes remain properly animated even when hidden from the active camera by preparing the skeleton before each frame rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/layermask.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet scene: BABYLON.Scene\nlet avatar: BABYLON.TransformNode;\n\nscene.onBeforeRenderObservable.add(onBeforeRender);\n\nfunction onBeforeRender(scene:BABYLON.Scene, eventState: BABYLON.EventState){\n    const meshes = avatar.getChildMeshes(false);\n\n    meshes.forEach(prepareSkeleton);\n}\n\nfunction prepareSkeleton(mesh:BABYLON.AbstractMesh){\n    const skeleton = mesh.skeleton;\n\n    if (!skeleton) return;\n\n    skeleton.prepare();\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to CascadedShadowGenerator in Babylon.js JavaScript\nDESCRIPTION: This snippet further illustrates instantiating the CascadedShadowGenerator, similar to the previous example, as an out-of-the-box replacement for the standard ShadowGenerator. This allows quick enabling of CSM-specific shadow features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.CascadedShadowGenerator(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mask Properties\nDESCRIPTION: Demonstrates how to set up masking for controlling refraction and translucency intensities using texture channels.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\npbr.metallic = 0;\npbr.roughness = 0;\n\npbr.subSurface.isRefractionEnabled = true;\npbr.subSurface.indexOfRefraction = 1.5;\n\npbr.subSurface.isTranslucencyEnabled = true;\npbr.subSurface.translucencyIntensity = 0.8;\n\npbr.subSurface.tintColor = BABYLON.Color3.Teal();\n\npbr.subSurface.thicknessTexture = texture;\npbr.subSurface.minimumThickness = 1;\npbr.subSurface.maximumThickness = 10;\n\npbr.subSurface.useMaskFromThicknessTexture = true;\n```\n\n----------------------------------------\n\nTITLE: Running Compute Boids Simulation with Babylon.js WebGPU - JavaScript\nDESCRIPTION: This code launches a WebGPU-based compute shader simulation of boids (flocking birds) using Babylon.js. It initializes ping-pong storage buffers for particle positions and velocities, updates them via compute shaders, and renders them using instanced drawing. Requires Babylon.js 5.0+ and access to WebGPU. The engine uses Mesh.forcedInstanceCount to draw uninstanced meshes, and StorageBuffers are flagged as vertex buffers. Inputs include particle count and buffer configuration, producing an animated boid flock simulation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Playground id=\\\"#3URR7V#186\\\" engine=\\\"webgpu\\\" title=\\\"Boids compute shader\\\" description=\\\"A GPU compute particle simulation that mimics the flocking behavior of birds\\\" image=\\\"/img/extensions/webgpu/boids.png\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Havok Package via NPM\nDESCRIPTION: Command to install the Havok physics package using NPM package manager\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingHavok.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/havok\n```\n\n----------------------------------------\n\nTITLE: Common Query Interface Properties in Physics V2\nDESCRIPTION: Defines common properties used across different query interfaces for physics shape casting, including trigger collision handling and body ignoring options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Should trigger collisions be considered in the query?\n */\nshouldHitTriggers: boolean;\n/**\n * Should the query ignore the body that is passed in?\n */\nignoreBody?: PhysicsBody;\n```\n\n----------------------------------------\n\nTITLE: Configuring STL File Loader Axis Swapping in JavaScript\nDESCRIPTION: This code snippet shows how to disable the default Y and Z axis swapping behavior of the STL File Loader. By setting this flag to true, the original file coordinates will be preserved.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/stl.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES = true;\n```\n\n----------------------------------------\n\nTITLE: Using Emissive Texture for Highlight Color\nDESCRIPTION: Demonstrates how to use the mesh's emissive texture as the source for the highlight color, allowing for non-uniform highlighting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhl1.addMesh(sphere, BABYLON.Color3.Black(), true);\n```\n\n----------------------------------------\n\nTITLE: Ordering Adjacent Faces for Dual Polyhedron Construction in JavaScript\nDESCRIPTION: This helper function `setOrder` takes a central vertex index (`m`), an array of adjacent face indices (`faces`), and the Geodesic data (`data`). It determines the correct sequence of these faces around the vertex `m`, which is necessary for constructing the faces of the dual (Goldberg) polyhedron. It iteratively finds the next face in sequence by matching vertices and returns the ordered list of face indices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n//Puts vertices of a face for GP in correct order for mesh construction\n const setOrder = (m, faces, data) => {\n     const dualFaces = [];\n     let face = faces.pop();\n     dualFaces.push(face);\n     let index = data.face[face].indexOf(m);\n     index = (index + 2) % 3; //index to vertex included in adjacent face\n     let v = data.face[face][index];\n     let f = 0;\n     let vIndex = 0;\n     while (faces.length > 0) {\n         face = faces[f]\n         if (data.face[face].indexOf(v) > -1) { // v is a vertex of face f\n             index = (data.face[face].indexOf(v) + 1) % 3;\n             v = data.face[face][index];\n             dualFaces.push(face);\n             faces.splice(f, 1);\n             f = 0;\n         }\n         else {\n             f++\n         }\n     }\n     return dualFaces; \n }\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Color Properties\nDESCRIPTION: Shows how to set individual RGBA color components for a particle in initParticle or updateParticle functions. This affects the color of all vertices in the particle and blends with any material colors if applied.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nparticle.color.r = red; //number from 0 to 1\nparticle.color.g = green; //number from 0 to 1\nparticle.color.b = blue; //number from 0 to 1\nparticle.color.a = alpha; //number from 0 to 1\n```\n\n----------------------------------------\n\nTITLE: Installing Local Web Server for Babylon.js Development\nDESCRIPTION: Command to install a simple local web server globally using npm. This is a one-time setup step for running Babylon.js projects locally.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/templates/repos/basicJSProject.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm -g install local-web-server\n```\n\n----------------------------------------\n\nTITLE: Serializing NodeGeometry to JSON with Optional Mesh Data - Babylon.js (JavaScript)\nDESCRIPTION: This code serializes a Babylon.js NodeGeometry instance into a JSON object, optionally including mesh data if the argument is true. Prerequisite: an initialized geometry entity. Input: boolean to toggle mesh inclusion. Output: serializable JSON structure. Including mesh data may produce very large JSON outputs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngeometry.serialize(true);\n```\n\n----------------------------------------\n\nTITLE: Creating Highlights PostProcess in Babylon.js\nDESCRIPTION: Applies a filter to increase the luminosity of highlights in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.HighlightsPostProcess(\"highlights\", 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Loading XML Layout with Callback and Dynamic Event Binding (JavaScript)\nDESCRIPTION: Illustrates using the third parameter of loadLayout to provide a callback function, which is invoked after layout parsing. The example retrieves a node by ID and adds a pointer click observable. Dependencies include Babylon.js and Babylon.GUI, and the callback supports further customization of controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nxmlLoader.loadLayout(\"layouts/testgui.xml\", advancedTexture, function () {\n  xmlLoader.getNodeById(\"helloButton\").onPointerClickObservable.add(clickEvent);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Icosphere with Mesh Class in Babylon.js\nDESCRIPTION: Alternative method to create an icosphere using the BABYLON.Mesh class. This method provides the same functionality and options as MeshBuilder.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/icosphere.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst icosphere = BABYLON.Mesh.CreateIcoSphere(\"icosphere\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Physics Compounds Using Babylon's Parenting System\nDESCRIPTION: This code demonstrates how to create a compound physics body consisting of two spheres using Babylon's parenting system. The child sphere is parented to the main sphere, and physics impostors are created for both with the child initialized first.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a 2-sphere compound\n var sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\nsphere.position.y = 10;\n\nvar sphere2 = BABYLON.MeshBuilder.CreateSphere(\"sphere2\", { segments: 16, diameter: 2 }, scene);\nsphere2.position.x = 2;\nsphere.position.y = 1;\nsphere2.parent = sphere;\n```\n\n----------------------------------------\n\nTITLE: Manual Projection Plane Tilt Adjustment in Babylon.js\nDESCRIPTION: Property to manually control the camera projection plane tilt. This provides fine-grained control over perspective correction beyond the automatic vertical correction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.projectionPlaneTilt\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Particle Property in SPS initParticles using JavaScript\nDESCRIPTION: This snippet shows how to define the `initParticles` function for a Babylon.js Solid Particle System (SPS). Inside this function, it loops through all particles and initializes a custom `age` property for each particle with a random value, demonstrating how to add custom data during particle initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.initParticles = function () {\n  for (let p = 0; p < SPS.nbParticles; p++) {\n    particles[p].age = Math.random() * 20;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Havok Physics in Babylon.js\nDESCRIPTION: Initializes the Havok Physics plugin with Earth-like gravity to enable realistic physics simulation in the scene. This is essential for the bowling ball and pin interactions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar gravityVector = new BABYLON.Vector3(0, -9.81, 0);\nvar physicsPlugin = new BABYLON.HavokPlugin();\nscene.enablePhysics(gravityVector, physicsPlugin);\n```\n\n----------------------------------------\n\nTITLE: Configuring SkeletonViewer Display Mode Options in Babylon.js (JavaScript)\nDESCRIPTION: This snippet defines the structure of the `displayOptions` object used within the `SkeletonViewer` constructor options. These parameters configure the visual appearance of the debug mesh when using sphere-based display modes, controlling sphere size, scaling, tapering factor, spur thickness, and the optional display of local bone axes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet displayModeOptions {\n   sphereBaseSize? : number, //The size of the sphere when scaled by the sphereScaleUnit after determining the longest bone in the system. Default = 0.15\n   sphereScaleUnit? : number, //The number that is used to determine the ratio of the spheres scale in relation to the longest bone in the system.  Defaults to 2, with general assumptions that 1 scene unit is treated as 1 meter (you can assume what ever scene unit though).\n   sphereFactor? : number, //A scalar that makes the spheres get smaller the farther away from the root bone they are. Default = 0.865\n   midStep? : number, //The number that represents where the bones 'spur' will be at its maximum thickness. Default = 0.235\n   midStepFactor? : number, //The ratio of how thick the bone should be in relation to its length. Default = 0.155\n   showLocalAxes? : boolean, //Flag to display te bones local axes as line systems. Default = False\n   localAxesSize? : number, //Size of the local Axes. Default = 0.075\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Checking GUILabel visibility in Babylon.js\nDESCRIPTION: Method to check if a GUILabel element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiLabel.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Default Babylon.js Viewer Configuration in JavaScript\nDESCRIPTION: A JavaScript object showing the default configuration of the Babylon.js viewer, including templates, camera behaviors, skybox, ground, and engine settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    templates: {\n        main: {\n            html: defaultTemplate,\n            params: {\n                babylonFont: babylonFont,\n                noEscape: true\n            }\n        },\n        fillContainer: {\n            html: fillContainer,\n            params: {\n                disable: false\n            }\n        },\n        loadingScreen: {\n            html: loadingScreen,\n            params: {\n                backgroundColor: \"#000000\",\n                loadingImage: images.loading\n            }\n        },\n        viewer: {\n            html: defaultViewer,\n            params: {\n                enableDragAndDrop: false\n            }\n        },\n        navBar: {\n            html: navbar,\n            params: {\n                speedList: {\n                    \"0.5x\": \"0.5\",\n                    \"1.0x\": \"1.0\",\n                    \"1.5x\": \"1.5\",\n                    \"2.0x\": \"2.0\",\n                },\n                logoImage: images.babylonLogo,\n                logoText: 'BabylonJS',\n                logoLink: 'https://babylonjs.com',\n                hideHelp: true,\n                hideHd: true,\n                hideVr: true,\n                disableOnFullscreen: false,\n                text: {\n                    hdButton: \"Toggle HD\",\n                    fullscreenButton: \"Fullscreen\",\n                    helpButton: \"Help\",\n                    vrButton: \"Toggle VR\"\n                }\n            },\n            events: {\n                pointerdown: {\n                    '.navbar-control': true,\n                    '.help-button': true\n                },\n                input: {\n                    '.progress-wrapper': true\n                },\n                pointerup: {\n                    '.progress-wrapper': true\n                }\n            }\n        }\n    },\n    camera: {\n        behaviors: {\n            autoRotate: {\n                type: 0\n            },\n            framing: {\n                type: 2,\n                zoomOnBoundingInfo: true,\n                zoomStopsAnimation: false\n            },\n            bouncing: {\n                type: 1\n            }\n        }\n    },\n    skybox: {\n    },\n    ground: {\n        receiveShadows: true\n    },\n    engine: {\n        antialiasing: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with Greased Lines in Babylon.js\nDESCRIPTION: Shows how to draw text using Greased Lines. It fetches font data and uses the GetPointsFromText function to generate points for the text.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontData = await (await fetch(\"https://assets.babylonjs.com/fonts/Droid Sans_Regular.json\")).json();\n\nconst points = BABYLON.GreasedLineTools.GetPointsFromText(\n  \"BabylonJS\",\n  16, // size\n  16, // resolution\n  fontData, // typeface.js font\n);\n\nconst textLines = BABYLON.CreateGreasedLine(\"textLines\", { points });\n```\n\n----------------------------------------\n\nTITLE: Enabling Offline Support in Babylon.js\nDESCRIPTION: This snippet shows how to enable offline support in Babylon.js. It sets the necessary flags on the engine to allow caching of resources in the browser's IndexedDB.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeCached.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nengine.enableOfflineSupport = true;\nBABYLON.Database.IDBStorageEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Normal Direction for Path3D in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates providing an optional second argument (a `Vector3`) to the `Path3D` constructor or `update` method. This vector (`initialVector` or `otherVector`) influences the direction of the calculated normal vectors along the path, overriding the default calculation. The resulting normal is the projection of this provided vector onto the plane orthogonal to the tangent at each point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/path3D.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialVector = new BABYLON.Vector3(0, 1, 0);\nconst otherVector = new BABYLON.Vector3(0, 0, 1);\nconst points = [v1, v2, ..., vn];\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0 // array of Vector3\nconst path3d = new BABYLON.Path3D(points, initialVector);\n// do stuff ...\npath3d.update(points, otherVector);\n```\n\n----------------------------------------\n\nTITLE: Using WebXR Polyfill with Babylon.js Scene\nDESCRIPTION: This snippet demonstrates how to properly await the WebXR polyfill before initializing a WebXR session in Babylon.js. It creates a basic scene with a device orientation camera, then initializes the default XR experience after ensuring the polyfill is ready.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrPolyfillPromise = new Promise((resolve) => {\n    if (navigator.xr) {\n        return resolve();\n    }\n    if (window.WebXRPolyfill) {\n        new WebXRPolyfill();\n        return resolve();\n    } else {\n        const url = \"https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js\";\n        const s = document.createElement(\"script\");\n        s.src = url;\n        document.head.appendChild(s);\n        s.onload = () => {\n            new WebXRPolyfill();\n            resolve();\n        };\n    }\n});\n\nvar createScene = async function () {\n  // wait for the polyfill to kick in\n  await xrPolyfillPromise;\n  console.log(navigator.xr); // should be there!\n  console.log(await BABYLON.WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\")); // should be true\n  // create your scene\n  var scene = new BABYLON.Scene(engine);\n  var camera = new BABYLON.DeviceOrientationCamera(\"DevOr_camera\", new BABYLON.Vector3(-30, -30, -30), scene);\n  camera.setTarget(BABYLON.Vector3.Zero());\n  camera.attachControl(canvas, true);\n  var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 0, 0), scene);\n  scale = 100;\n  // initialize XR\n  var xr = await scene.createDefaultXRExperienceAsync();\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Speed Limit Gradient Over Lifetime (Single Values) in Babylon.js\nDESCRIPTION: Demonstrates using `addLimitVelocityGradient` to define the maximum speed limit for particles at the beginning (time fraction 0) and end (time fraction 1) of their lifetimes. If a particle's speed exceeds this limit, the `limitVelocityDamping` factor is applied.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addLimitVelocityGradient(0, 10); //speed limit at start of particle lifetime\nparticleSystem.addLimitVelocityGradient(1, 0.1); //speed limit at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks to a Rope in Babylon.js\nDESCRIPTION: Shows how to add hooks to a rope soft body, attaching it to rigid body impostors at specific points along its length.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrope.physicsImpostor.addHook(crossbar.physicsImpostor, 0, 1);\nrope.physicsImpostor.addHook(ball.physicsImpostor, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Enabling Gizmos in GizmoManager\nDESCRIPTION: Demonstrates how to enable different types of gizmos (position, rotation, scale, bounding box) using the GizmoManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngizmoManager.positionGizmoEnabled = true;\ngizmoManager.rotationGizmoEnabled = true;\ngizmoManager.scaleGizmoEnabled = true;\ngizmoManager.boundingBoxGizmoEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Custom Render Loop for Multiple Views in Babylon.js\nDESCRIPTION: Shows how to implement a custom render loop that handles multiple views and scenes based on the active view and camera configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiCanvas.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet myRenderLoop = () => {\n  if (engine.activeView.camera === undefined) {\n    mainScene.render();\n  } else if (engine.activeView.target === view1) {\n    scene1.render();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Direct HDR File for Reflections (Babylon.js, JavaScript)\nDESCRIPTION: This example illustrates how to directly use a .hdr file as a reflection/environment texture by creating a new HDRCubeTexture. The parameters include the .hdr file path, scene, texture size, mipmap and orientation flags, and a boolean for prefiltering. Dependencies: Babylon.js with WebGL2 required for on-the-fly prefiltering. Inputs: HDR file path, Babylon.js Scene instance, and texture options. Output: a prefiltered PBR-compatible reflection texture with a potential load delay due to processing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/HDREnvironment.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst reflectionTexture = new BABYLON.HDRCubeTexture(\"./textures/environment.hdr\", scene, 128, false, true, false, true);\n```\n\n----------------------------------------\n\nTITLE: Removing Start Size Gradient in Babylon.js Particle System\nDESCRIPTION: This snippet shows how to remove a specific start size gradient from a particle system. It removes the gradient at the 0.4 point of the system's duration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeStartSizeGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Inserting Stored or Removed Particles into an SPS in JavaScript\nDESCRIPTION: Demonstrates how to insert particles, previously stored in an external array (`stock`) or removed (`removed`), back into an expandable Solid Particle System using `insertParticlesFromArray()`. This method clones the particle objects from the input array, reindexes them, and adds them to the SPS. Calls to `buildMesh()` and `setParticles()` are required afterwards to update the system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/expandable_sps.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar stock = []; // the array to store the particles in\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, { expandable: true });\nsps.addShape(model1, 1000); // the SPS contains 1000 particles\nsps.addShape(model1, 100, { storage: stock }); // 100 others are stored aside\nsps.buildMesh();\n\n// ... later in the code\nvar removed = sps.removeParticles(0, 99); // the 100 first particles are removed and stored in another array\nsps.buildMesh();\n\n// ... later again in the code : let's restore the misssing particles\nsps.insertParticlesFromArray(removed); // restores the previously removed particles\nsps.insertParticlesFromArray(stock); // restores the previously created particles\nsps.buildMesh();\nsps.setParticles();\n```\n\n----------------------------------------\n\nTITLE: Loading glTF Model in BabylonJS HTML Scene\nDESCRIPTION: Complete HTML template for loading a glTF model in BabylonJS. Includes necessary script imports, canvas setup, and scene initialization with a default camera and environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Blender_to_glTF.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Default .gltf loading scene</title>\n    <meta charset=\"UTF-8\" />\n    <!-- this link to the preview online version of BJS -->\n    <script src=\"https://preview.babylonjs.com/babylon.js\"></script>\n    <!-- this is needed for BJS to load scene files -->\n    <script src=\"https://preview.babylonjs.com/loaders/babylonjs.loaders.js\"></script>\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n\n      #canvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n    </style>\n  </head>\n\n  <body>\n    <canvas id=\"canvas\"></canvas>\n    <script type=\"text/javascript\">\n      const canvas = document.getElementById(\"canvas\");\n      const engine = new BABYLON.Engine(canvas, true);\n\n      // here the doc for Load function: //doc.babylonjs.com/api/classes/babylon.sceneloader#load\n      BABYLON.LoadSceneAsync(\"WaterBottle.glb\", engine).then(function (scene) {\n        scene.createDefaultCamera(true, true, true);\n        scene.createDefaultEnvironment({\n          createGround: false,\n          createSkybox: false,\n        });\n\n        engine.runRenderLoop(function () {\n          scene.render();\n        });\n\n        window.addEventListener(\"resize\", function () {\n          engine.resize();\n        });\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Returning Engine and Scene from BabylonJS Scene Creation (JavaScript/JSX)\nDESCRIPTION: This snippet, intended for the `createScene` method within a BabylonJS scene setup file (e.g., `MyFirstScene.js`), demonstrates returning an object containing the initialized BabylonJS `engine` and `scene` instances. This allows other parts of the application, like a Vue component, to access and control the BabylonJS environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nreturn { engine, scene };\n```\n\n----------------------------------------\n\nTITLE: Implementing WebGPUClearQuad Class in TypeScript\nDESCRIPTION: This class is responsible for clearing a rectangular area in a texture. It uses its own render pipeline cache instance to avoid interfering with the main render pipeline cache, optimizing performance for infrequent clear operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUOverview.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebGPUClearQuad {\n    // Implementation details not provided in the text\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Loader-Specific Options using onPluginActivatedObservable in JavaScript\nDESCRIPTION: Shows how to use the onPluginActivatedObservable to set properties and call methods specific to a particular loader, such as the gltf loader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneLoader.OnPluginActivatedObservable.add(function (loader) {\n  if (loader.name === \"gltf\") {\n    // do something with the loader\n    // loader.<option1> = <...>\n    // loader.<option2> = <...>\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Image-Based Lighting in BabylonJS\nDESCRIPTION: Creates and configures environmental lighting using an HDRI texture file. Sets up image-based lighting with controlled intensity for ambient scene illumination.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/extraFeatures.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst envHdri = CubeTexture.CreateFromPrefilteredData(\"textures/envtext.env\", scene);\nenvHdri.name = \"env\";\nenvHdri.gammaSpace = false;\nscene.environmentTexture = envHdri;\nscene.environmentIntensity = 0.04;\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Options for GLTF/GLB Export\nDESCRIPTION: TypeScript example showing how to use the optional export configuration object to customize the GLTF export process with various options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/glTFExporter.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: IExportOptions = {\n  // Function to indicate whether a Babylon node in the scene should be exported or not.\n  shouldExportNode: (node: Node): boolean => {\n    return node.name === \"myCamera\" || node.name === \"myMesh\" || node.name === \"myLight\";\n  },\n  // Function to indicate whether an animation in the scene should be exported or not.\n  shouldExportAnimation: (animation: Animation): boolean => {\n    return animation.name === \"myAnimation\";\n  },\n  // The sample rate to bake animation curves. Defaults to 1 / 60.\n  animationSampleRate: 1 / 60,\n  // Begin serialization without waiting for the scene to be ready. Defaults to false.\n  exportWithoutWaitingForScene: false,\n  // Indicates if unused UV vertex attributes should be included in export. Defaults to false.\n  exportUnusedUVs: false,\n  // Remove no-op root nodes when possible. Defaults to true.\n  removeNoopRootNodes: true,\n  // The mesh compression method to use. Defaults to \"None\".\n  meshCompressionMethod: \"None\",\n};\n\nGLTF2Export.GLTFAsync(scene, \"fileName\", options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Brick Procedural Texture in Babylon.js\nDESCRIPTION: Creates a standard material with a brick procedural texture applied to it. The texture is configured with specific brick counts for height and width. The texture size is set to 512 pixels and is created within the current scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/proceduralTexturesLibrary/brick.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar brickMaterial = new BABYLON.StandardMaterial(\"brickMat\", scene);\nvar brickTexture = new BABYLON.BrickProceduralTexture(\"brickTex\", 512, scene);\nbrickTexture.numberOfBricksHeight = 6;\nbrickTexture.numberOfBricksWidth = 10;\nbrickMaterial.diffuseTexture = brickTexture;\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to Containers in Babylon.js GUI\nDESCRIPTION: Demonstrates how to add a control to a container in Babylon.js GUI system. This is a fundamental operation when building user interfaces.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.addControl(control);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Level in Background Material\nDESCRIPTION: Shows how to adjust the shadow intensity level for background material\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbackgroundMaterial.shadowLevel = 0.4;\n```\n\n----------------------------------------\n\nTITLE: Adding Selectors to Groups in JavaScript\nDESCRIPTION: Illustrates how to add individual selectors (checkbox, radio button, slider) to their corresponding groups using `addCheckbox`, `addRadio`, and `addSlider` methods. Each method takes a label and a callback function. `addRadio` can optionally take a boolean for initial state, and `addSlider` accepts additional parameters for units, min/max values, initial value, and value display formatting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntransformGroup.addCheckbox(\"Small\", toSize);\ntransformGroup.addCheckbox(\"High\", toPlace);\n\ncolorGroup.addRadio(\"Blue\", setColor, true);\ncolorGroup.addRadio(\"Red\", setColor);\n\nrotateGroup.addSlider(\"Angle Y\", orientateY, \"degs\", 0, 2 * Math.PI, 0, displayValue);\nrotateGroup.addSlider(\"Angle X\", orientateX, \"degs\", 0, 2 * Math.PI, Math.PI, displayValue);\n```\n\n----------------------------------------\n\nTITLE: Loading OBJ from Base64 Encoded Data (TypeScript)\nDESCRIPTION: Demonstrates how to load an OBJ file from a base64 encoded data string, specifying the plugin extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst objDataURL = \"data:;base64,ZyB0ZXRyYWhlZHJvbgoKdiAx...\";\nawait BABYLON.AppendSceneAsync(objDataURL, scene, { pluginExtension: \"obj\" });\n```\n\n----------------------------------------\n\nTITLE: Basic BezierSurface Class Declaration\nDESCRIPTION: Simple class declaration for a BezierSurface in the playground environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/usingThePlaygroundForBJSDev.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass BezierSurface {\n```\n\n----------------------------------------\n\nTITLE: Executing Animation Sequence in BabylonJS\nDESCRIPTION: This code initiates all animations simultaneously using beginDirectAnimation. It applies the camera movement and rotation animations to the camera, the sweep animation to the door hinge, and the light dimmer animations to two spotlights, creating a coordinated sequence.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/sequenceAnimations.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.beginDirectAnimation(camera, [movein, rotate], 0, 25 * frameRate, false);\nscene.beginDirectAnimation(hinge, [sweep], 0, 25 * frameRate, false);\nscene.beginDirectAnimation(spotLights[0], [lightDimmer], 0, 25 * frameRate, false);\nscene.beginDirectAnimation(spotLights[1], [lightDimmer.clone()], 0, 25 * frameRate, false);\n```\n\n----------------------------------------\n\nTITLE: Player Position Update Handler in TypeScript\nDESCRIPTION: Client-side implementation for updating player visual representation based on state changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nroom.state.players.onAdd(function (player, sessionId) {\n  player.onChange(function () {\n    playerEntities[sessionId].position.set(player.x, player.y, player.z);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SixDofDragBehavior in BabylonJS\nDESCRIPTION: Implements 3D space dragging behavior based on pointer origin with smoothing and magnification options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/meshBehaviors.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sixDofDragBehavior = new BABYLON.SixDofDragBehavior();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsixDofDragBehavior.dragDeltaRatio = 0.2;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsixDofDragBehavior.zDragFactor = 3;\n```\n\n----------------------------------------\n\nTITLE: Importing glTF Loader Plugin (JavaScript)\nDESCRIPTION: Imports the glTF file loader module for its side effects. This registers the glTF loader plugin with the `SceneLoader`, enabling the loading of `.gltf` and `.glb` files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/loaders/glTF.js\";\n```\n\n----------------------------------------\n\nTITLE: Defining the Environment Class in TypeScript\nDESCRIPTION: Defines the `Environment` class in TypeScript (`environment.ts`). This class is responsible for managing the game world's elements. It takes the main `Scene` object in its constructor and has an asynchronous `load` method to create initial environment assets, starting with a simple ground box mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport class Environment {\n    private _scene: Scene;\n\n    constructor(scene: Scene) {\n        this._scene = scene;\n    }\n\n    public async load() {\n        var ground = MeshBuilder.CreateBox(\"ground\", { size: 24 }, this._scene);\n        ground.scaling = new Vector3(1,.02,1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Animation to SpriteMap Tile in Babylon.js\nDESCRIPTION: This snippet demonstrates the general syntax for adding an animation to a SpriteMap tile. It includes parameters for frame ID, animation frame, next frame ID, timing, and global speed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_animations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nspriteMap.addAnimationToTile(frameID, animationFrame, nextFrameID, animationFrameDisplayTiming, globalSpeed)\n```\n\n----------------------------------------\n\nTITLE: Setting up Pixi.js Renderer with Babylon.js Context\nDESCRIPTION: Initializes a Pixi.js WebGL renderer using the Babylon.js engine's GL context and canvas. Important settings include disabling clear before render and autostart.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_PixiJS.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pixiRenderer = new PIXI.WebGLRenderer({\n  context: engine._gl,\n  view: engine.getRenderingCanvas(),\n  clearBeforeRender: false,\n  autoStart: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Full Image to Dynamic Texture in Babylon.js\nDESCRIPTION: Loads an image and draws it to fill the entire canvas of a dynamic texture. The update is called after the image loads to ensure it appears on the texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst img = new Image();\nimg.src = 'PATH TO IMAGE';\nimg.onload = function() {\n\nctx.drawImage(this, 0, 0);\nmyDynamicTexture.update();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Pointer Out Observable - Babylon.js JavaScript\nDESCRIPTION: Attaches a handler to the utility layer's onPointerOutObservable event, allowing custom logic to run when the pointer leaves the utility overlay back to the main scene. The handler receives a pointerId. This snippet uses an anonymous function as the callback.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nutilLayer.onPointerOutObservable.add(function (pointerId) {});\n```\n\n----------------------------------------\n\nTITLE: Getting Performance Collector in JavaScript\nDESCRIPTION: Shows how to access the performance collector from a scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/performanceProfiler.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst perfCollector = scene.getPerfCollector();\n```\n\n----------------------------------------\n\nTITLE: Using Shader Includes in GLSL (GLSL)\nDESCRIPTION: Illustrates the GLSL syntax for including a pre-defined code block stored in `BABYLON.Effect.IncludesShadersStore`. The `#include<includeName>` directive will be replaced by the corresponding GLSL code string during shader compilation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_9\n\nLANGUAGE: glsl\nCODE:\n```\n#include<includeName>\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Bounding Box Using getHierarchyBoundingVectors in Babylon.js (JavaScript)\nDESCRIPTION: Calculates the combined world-space bounding box for a parent node and its entire hierarchy (all descendants) using the efficient `getHierarchyBoundingVectors()` method. This method returns an object containing the minimum (`min`) and maximum (`max`) vectors. The code then updates the parent's bounding info using these computed bounds. Requires `parent` to be a valid Babylon.js Node (e.g., Mesh).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet { min, max } = parent.getHierarchyBoundingVectors(); //Returns the bounding vectors of a Node and all its children \n\nparent.setBoundingInfo(new BABYLON.BoundingInfo(min, max));\n```\n\n----------------------------------------\n\nTITLE: Configuring Over-the-Shoulder Camera in BabylonJS\nDESCRIPTION: Creates an ArcRotateCamera with specific parameters for an over-the-shoulder view, including positioning and rotation angles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/camera.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.ArcRotateCamera(\"camera\", Math.PI / 2, Math.PI / 2.5, 150, new BABYLON.Vector3(0, 60, 0));\n```\n\n----------------------------------------\n\nTITLE: Recomputing Mesh Normals After Baking Transformations in Babylon.js\nDESCRIPTION: This code demonstrates how to recompute the normals for a Babylon.js mesh after baking a transformation, particularly useful after baking scaling which can distort normals and affect lighting. It retrieves the mesh's indices and vertex positions (implicitly used by ComputeNormals), calculates new normals using `BABYLON.VertexData.ComputeNormals`, and then updates the mesh's vertex buffer with the recalculated normals. Note that recomputing normals might produce incorrect results on seams or complex geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar indices = mesh.getIndices();\nvar normals = mesh.getVerticesData(VertexBuffer.NormalKind);\n// Assuming 'positions' variable holds vertex position data\nBABYLON.VertexData.ComputeNormals(positions, indices, normals);\nmesh.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Listener Position in BabylonJS\nDESCRIPTION: Demonstrates how to set a custom position for the audio listener using either static coordinates or a mesh's position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a static position\nscene.audioListenerPositionProvider = () => {\n  return new BABYLON.Vector3(0, 0, 10);\n};\n\n// Returns the current position of a mesh\n// !It is recommended to use the 'absolutePosition' property\n// to reflect the position of the mesh in the world\nscene.audioListenerPositionProvider = () => {\n  // Returns a static position\n  return myMesh.absolutePosition;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Vertex Offsets to a GreasedLine in JavaScript\nDESCRIPTION: Demonstrates how to apply offsets to the vertices of an existing GreasedLine. The line must be created with `updatable: true`. The `offsets` array provides x, y, z offsets for each vertex (2 vertices per point), and its length must match the total number of vertices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points, updatable: true });\n\nconst offsets = [-0.3, -0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nline.offsets = offsets;\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Sprite Packed Manager in Babylon.js\nDESCRIPTION: Example of the JSON format used with the Sprite Packed Manager. This format defines the frames for different sprites in a packed spritesheet, including their positions and dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/packed_manager.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"frames\": {\n\t\t\"eye.png\": {\n\t\t\t\"frame\": {\"x\":0,\"y\":148,\"w\":400,\"h\":400},\n\t\t\t\"rotated\": false,\n\t\t\t\"trimmed\": false,\n\t\t\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":400,\"h\":400},\n\t\t\t\"sourceSize\": {\"w\":400,\"h\":400}\n\t\t},\n\t\t\"redman.png\": {\n\t\t\t\"frame\": {\"x\":0,\"y\":0,\"w\":55,\"h\":97},\n\t\t\t\"rotated\": false,\n\t\t\t\"trimmed\": false,\n\t\t\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":55,\"h\":97},\n\t\t\t\"sourceSize\": {\"w\":55,\"h\":97}\n\t\t\t},\n\t\t\"spot.png\": {\n\t\t\t\"frame\": {\"x\":199,\"y\":0,\"w\":148,\"h\":148},\n\t\t\t\"rotated\": false,\n\t\t\t\"trimmed\": false,\n\t\t\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":148,\"h\":148},\n\t\t\t\"sourceSize\": {\"w\":148,\"h\":148}\n\t\t},\n\t\t\"triangle.png\": {\n\t\t\t\"frame\": {\"x\":55,\"y\":0,\"w\":144,\"h\":72},\n\t\t\t\"rotated\": false,\n\t\t\t\"trimmed\": false,\n\t\t\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":144,\"h\":72},\n\t\t\t\"sourceSize\": {\"w\":144,\"h\":72}\n\t\t}\n\t},\n\t\"meta\": {\n\t\t\"app\": \"https://www.codeandweb.com/texturepacker\",\n\t\t\"version\": \"1.0\",\n\t\t\"image\": \"pack1.png\",\n\t\t\"format\": \"RGBA8888\",\n\t\t\"size\": {\"w\":400,\"h\":548},\n\t\t\"scale\": \"1\",\n\t\t\"smartupdate\": \"$TexturePacker:SmartUpdate:c5944b8d86d99a167f95924d4a62d5c3:3ed0ae95f00621580b477fcf2f6edb75:5d0ff2351eb79b7bb8a91bc3358bcff4$\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SceneReadyEventBlock in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an instance of FlowGraphSceneReadyEventBlock. It then connects the 'done' execution output of this block to the input ('in') of another block ('nextBlock'). This setup ensures that 'nextBlock' is triggered once the Babylon.js scene is ready.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sceneReady = new FlowGraphSceneReadyEventBlock();\n// notify an execution block that the scene is ready\nsceneReady.done.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Initializing HUD in Game State\nDESCRIPTION: Creates HUD instance and sets up player input with UI integration\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ui = new Hud(scene);\nthis._ui = ui;\nthis._input = new PlayerInput(scene, this._ui);\n```\n\n----------------------------------------\n\nTITLE: Updating isReady Method for Emissive Texture\nDESCRIPTION: Updates the isReady method to check if the emissive texture is ready and set the appropriate define flag. This ensures the material will use the correct shader variation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n  if (!this.emissiveTexture.isReady()) {\n    return false;\n  } else {\n    needUVs = true;\n    this._defines.EMISSIVE = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Results Base Class\nDESCRIPTION: Base class definition for casting results, containing common properties for physics body and shape information.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport class CastingResult {\n    /**\n     * The Physics body that the query hit.\n     */\n    public body?: PhysicsBody;\n    /**\n     * The body Index in case the Physics body is using instances\n     */\n    public bodyIndex?: number;\n\n    /**\n     * The shape hit by the query.\n     */\n    public shape?: PhysicsShape;\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Property Values on BabylonJS Fluid Renderer Objects\nDESCRIPTION: Utility method for setting nested property values on fluid renderer objects. Handles special cases like map sizes with 'Screen size' value. Navigates the object hierarchy using the property path to set the value at the correct location.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _setValue(obj: any, name: string, value: any): void {\n    const parts: string[] = name.split(\"_\");\n\n    for (let i = 0; i < parts.length - 1; ++i) {\n        obj = obj[parts[i]];\n        if (parts[i].endsWith(\"MapSize\") && value === \"Screen size\") {\n            value = null;\n        }\n    }\n\n    if (parts[parts.length - 1].endsWith(\"MapSize\") && value === \"Screen size\") {\n        value = null;\n    }\n\n    obj[parts[parts.length - 1]] = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Mesh Using Point of View in Babylon.js\nDESCRIPTION: Demonstrates how to move a mesh relative to its point of view using the movePOV method. The parameters represent movement along right, up and forward directions in the mesh's local space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.movePOV(0, 0, -6)\n```\n\n----------------------------------------\n\nTITLE: Setting Fog Density for Exponential Modes in Babylon.js\nDESCRIPTION: This snippet sets the fog density when using `FOGMODE_EXP` or `FOGMODE_EXP2`. The `fogDensity` property controls how quickly the fog becomes opaque. A higher value means denser fog. The default density is 0.1.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/environment_introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.fogDensity = 0.01;\n```\n\n----------------------------------------\n\nTITLE: Starting the Timeline Render Loop (javascript)\nDESCRIPTION: Illustrates how to start continuous thumbnail rendering by calling runRenderLoop on the Timeline instance. This function begins the animation/rendering of the timeline thumbnails. No parameters are required for the default behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    timeline.runRenderLoop();\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Smart Filter in Babylon.js\nDESCRIPTION: Creates a basic Smart Filter with a single input connected to the output, initializes the runtime, and renders one frame to canvas using ThinEngine.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howToUseSmartFilters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a SmartFilter\nconst smartFilter = new SmartFilter(\"Simplest\");\nconst titleInput = new InputBlock(smartFilter, \"logo\", ConnectionPointType.Texture, logoTexture);\ntitleInput.output.connectTo(smartFilter.output);\n\n// Create a SmartFilterRuntime\nconst engine = new ThinEngine(canvas, true);\nconst runtime = await smartFilter.createRuntimeAsync(engine);\n\n// Render one frame\nruntime.render();\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js KTX2 Decoder Package via npm (Bash)\nDESCRIPTION: Installs the `@babylonjs/ktx2decoder` package, which contains the necessary decoders, WASM files, and wrappers for KTX2 texture decoding, as a development dependency using npm.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babylonjs/ktx2decoder\n```\n\n----------------------------------------\n\nTITLE: Defining Key Property Set Structure in Babylon.js (JavaScript)\nDESCRIPTION: This snippet defines the structure of the `KeyPropertySet` class, which is used to specify custom visual properties for individual keys in a `VirtualKeyboard`. Properties like dimensions (width, height), padding, color, and background can be optionally defined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nclass KeyPropertySet {\n      width?: string;\n      height?: string;\n      paddingLeft?: string;\n      paddingRight?: string;\n      paddingTop?: string;\n      paddingBottom?: string;\n      color?: string;\n      background?: string;\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Cascade Stabilization in Babylon.js JavaScript\nDESCRIPTION: Toggles the 'stabilizeCascades' flag on the CSM generator, which reduces 'swimming' or shimmering at cascade edges when the camera moves. Note that enabling this may lower overall shadow precision.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.stabilizeCascades = true;\n```\n\n----------------------------------------\n\nTITLE: Applying ZXZ World Rotations Sequentially in JavaScript\nDESCRIPTION: Demonstrates applying rotations following the standard ZXZ Euler angle convention using world space axes. This involves rotating by `alpha` around the Z-axis, then `beta` around the X-axis, and finally `gamma` around the Z-axis, all relative to the world coordinate system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(BABYLON.Axis.Z, alpha, BABYLON.Space.WORLD);\nmesh.rotate(BABYLON.Axis.X, beta, BABYLON.Space.WORLD);\nmesh.rotate(BABYLON.Axis.Z, gamma, BABYLON.Space.WORLD);\n```\n\n----------------------------------------\n\nTITLE: Custom SSAO Pipeline Ratios\nDESCRIPTION: Initializing SSAO pipeline with custom ratios for SSAO and combine post-processes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/SSAORenderPipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssao = new BABYLON.SSAORenderingPipeline('ssaopipeline', scene, { ssaoRatio: 0.5, combineRatio: 1.0 }, [camera1 etc.]);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Color Object for Particles\nDESCRIPTION: Demonstrates how to create a new Color4 object for a particle when using the positionFunction option. This is necessary when particle colors are initially null and need to be created before they can be modified.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nparticle.color = new BABYLON.Color4(0.25, 0.333, 0.67, 0.88);\n```\n\n----------------------------------------\n\nTITLE: Adding Anchor Using Hit-Test Result - JavaScript\nDESCRIPTION: Demonstrates placing an anchor at a location specified by a hit-test result in an AR scene. Uses anchorSystem.addAnchorPointUsingHitTestResultAsync to create the anchor asynchronously. Returns a promise that resolves to a native XRAnchor when fulfilled. Requires a valid hit-test result object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst arTestResult = getMeTheResultINeed();\\nconst anchorPromise = anchorSystem.addAnchorPointUsingHitTestResultAsync(lastHitTest);\n```\n\n----------------------------------------\n\nTITLE: Augmenting SceneLoaderPluginOptions Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to augment the SceneLoaderPluginOptions interface to add custom options for a file importer. This allows for type-safe configuration of the importer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/createImporters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyCustomImporterOptions = { option1?: string, option2?: number };\n\ndeclare module \"@babylonjs/core\" {\n  export interface SceneLoaderPluginOptions {\n    myCustomImporter: MyCustomImporterOptions;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SequenceBlock in BabylonJS Flow Graph\nDESCRIPTION: This code demonstrates how to initialize a SequenceBlock for sequential execution in a flow graph. It shows setting up multiple output signals and connecting them to other blocks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequence = new FlowGraphSequenceBlock({\n  outputSignalCount: 5, // optional\n});\nsequence.out_0.connectTo(nextBlock1.in);\nsequence.out_1.connectTo(nextBlock2.in);\n// and so on, until out_4\n```\n\n----------------------------------------\n\nTITLE: Publishing to NPM Registry\nDESCRIPTION: Command for publishing the ShowroomCamera package to the default NPM registry (npmjs.com). This is executed after updating the package.json and adding a README to share the utility with other developers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/showroomCamera.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Lifetime Range - Babylon.js - JavaScript\nDESCRIPTION: Sets the minimum and maximum lifetime for each particle (in seconds) using minLifeTime and maxLifeTime. Each particle's lifespan will be randomly chosen between these two values. Babylon.js is a dependency. Accepts numeric parameters greater than zero; longer lifetime means particles persist longer after being emitted.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.minLifeTime = 0.3;\nparticleSystem.maxLifeTime = 1.5;\n```\n\n----------------------------------------\n\nTITLE: Setting Sound Position in BabylonJS\nDESCRIPTION: Demonstrates how to position a sound in 3D space using Vector3 coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.setPosition(new BABYLON.Vector3(100, 0, 0));\n```\n\n----------------------------------------\n\nTITLE: Creating Extruded Polygon Mesh using Path2 in Babylon.js\nDESCRIPTION: Creates a polygon mesh using Path2 object with optional extrusion. The build method accepts parameters for making the mesh updatable and setting extrusion depth.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/polyMeshBuilder.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar polygon_triangulation = new BABYLON.PolygonMeshBuilder(\"name\", Path2, scene);\nvar polygon = polygon_triangulation.build(false, 3);\n```\n\n----------------------------------------\n\nTITLE: Implementing Wheel Rotation in Babylon.js\nDESCRIPTION: This code adds wheel rotation animation using the registerAfterRender method. Each wheel rotates around the Z-axis in the world space, creating a realistic spinning effect as the car moves.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.registerAfterRender(function () {\n  wheelFI.rotate(BABYLON.Axis.Z, Math.PI / 64, BABYLON.Space.WORLD);\n  wheelFO.rotate(BABYLON.Axis.Z, Math.PI / 64, BABYLON.Space.WORLD);\n  wheelRI.rotate(BABYLON.Axis.Z, Math.PI / 64, BABYLON.Space.WORLD);\n  wheelRO.rotate(BABYLON.Axis.Z, Math.PI / 64, BABYLON.Space.WORLD);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mesh Shape in BabylonJS\nDESCRIPTION: Creates a physics mesh shape that exactly matches the input mesh geometry. Best for static bodies with complex geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeMesh(\n    mesh,   // mesh from which to calculate the collisions\n    scene   // scene of the shape\n);\n```\n\n----------------------------------------\n\nTITLE: Generating a Quadratic Path in Babylon.js\nDESCRIPTION: Creates a path for a quadratic function y = x² using a range of x values from -5 to 5, with a fixed z coordinate of 6.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_maths.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = [];\nfor (let x = -5; x <= 5; x++) {\n    let y = x * x\n    path.push(new BABYLON.Vector3(x, y, 6))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Motor Speed in Babylon.js Physics\nDESCRIPTION: Sets the speed of a motor joint without specifying torque. This will result in an over-torqued motor by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/joints.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njoint.setMotor(speed);\n```\n\n----------------------------------------\n\nTITLE: Checking GUIFieldset Visibility\nDESCRIPTION: Method that returns the visibility state of a GUIFieldset element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiFieldset.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Creating a Main Template for Babylon.js Viewer\nDESCRIPTION: HTML script template defining the main structure for the Babylon.js viewer with custom styling, font loading, and conditional screen filling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"main-template\" type=\"text/x-babylon-viewer-template\">\n  <style>\n      @font-face {\n          font-family: 'babylon';\n          src: url('{{babylonFont}}') format('woff');\n          font-weight: normal;\n          font-style: normal;\n      }\n\n      .icon {\n          font-family: \"babylon\";\n      }\n  </style>\n\n  {{#if fillScreen}}\n  <style>\n      html,\n      body {\n          width: 100%;\n          height: 100%;\n\n          margin: 0;\n          padding: 0;\n      }\n  </style>\n  {{/if}}\n\n  <fill-container></fill-container>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing MeshDebugPluginMaterial for MATERIALIDS Mode with Custom Colors in JavaScript\nDESCRIPTION: This snippet shows how to visualize distinct materials on a mesh using the `MATERIALIDS` mode with a custom color palette. It first calls `MeshDebugPluginMaterial.Reset()` to ensure consistent ID assignment. It then defines a custom static color palette by assigning an array of `Color3` objects to `BABYLON.MeshDebugPluginMaterial.MaterialColors`. Finally, it instantiates the plugin with `mode` set to `MATERIALIDS` and `multiply` set to `false` for clearer color visualization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/visualizeMeshData.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.MeshDebugPluginMaterial.Reset();\n\nBABYLON.MeshDebugPluginMaterial.MaterialColors = [\n    new BABYLON.Color3(1,0,0),\n    new BABYLON.Color3(0,1,0),\n    new BABYLON.Color3(0,0,1)\n];\n\nnew BABYLON.MeshDebugPluginMaterial(mesh.material, {\n    mode: BABYLON.MeshDebugMode.MATERIALIDS,\n    multiply: false\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Color Gradient Over Lifetime (Value Ranges) in Babylon.js\nDESCRIPTION: Demonstrates using `addColorGradient` with two `BABYLON.Color4` objects per time fraction to define a range of possible colors. The actual color will be randomly chosen by interpolating between the two specified colors at each time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addColorGradient(0, new BABYLON.Color4(1, 1, 1, 0), new BABYLON.Color4(1, 0, 1, 0)); //color range at start of particle lifetime\nparticleSystem.addColorGradient(0.4, new BABYLON.Color4(1, 1, 1, 0.5), new BABYLON.Color4(1, 0, 1, 0.5)); //color range at 2/5 of particle lifetime\nparticleSystem.addColorGradient(1.0, new BABYLON.Color4(1, 1, 1, 1), new BABYLON.Color4(1, 0, 1, 1)); //color range at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Getting Curve Points from Path3D in Babylon.js (JavaScript)\nDESCRIPTION: Illustrates the use of the `getCurve()` method on a `Path3D` object (`path3d`). This method returns a new array containing copies of the `Vector3` points originally used to define the path.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/path3D.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst curvePoints = path3d.getCurve();\n```\n\n----------------------------------------\n\nTITLE: Changing Emit Rate Over Duration in Babylon.js Particle System\nDESCRIPTION: This snippet demonstrates how to change the emit rate of particles over the duration of a particle system. It sets a target stop duration and adds emit rate gradients at different points in the system's lifecycle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.targetStopDuration = 8;\n\nparticleSystem.addEmitRateGradient(0, 10); //emit rate at start of particle system\nparticleSystem.addEmitRateGradient(1.0, 500); //emit rate at end of particle system\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Fireworks in Babylon.js\nDESCRIPTION: This code creates multiple instances of the Firework class in a game environment. It generates 20 firework objects and adds them to an array for later use, setting up the foundation for a fireworks display.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//--FIREWORKS--\nfor (let i = 0; i < 20; i++) {\n  this._fireworkObjs.push(new Firework(this._scene, i));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite from Spritesheet in Babylon.js\nDESCRIPTION: Creates a sprite instance from a spritesheet and sets its cell index.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_manager.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst player = new BABYLON.Sprite(\"player\", spriteManagerPlayer); \nplayer.cellIndex = 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashed and Gap Sizes in MeshBuilder Dashed Lines (JavaScript)\nDESCRIPTION: This snippet illustrates how setting different but equivalent values for 'dashSize' and 'gapSize' results in visually identical dashed lines, regardless of absolute values. It reinforces the importance of ratios between these two values rather than precise numbers. Inputs are numerical values for 'dashSize' and 'gapSize'; outputs are consistent dash-gap patterns in the rendered line mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/dashed.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndashSize = 1;\ngapSize = 1;\n\ndashSize = 1000;\ngapSize = 1000;\n\ndashSize = 876;\ngapSize = dashSize;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Blank Selection Panel in JavaScript\nDESCRIPTION: Demonstrates the basic constructor for creating an empty `SelectionPanel` instance in Babylon.js GUI. This panel needs to be added to an `AdvancedDynamicTexture` and populated with groups later.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.GUI.SelectionPanel(name);\n```\n\n----------------------------------------\n\nTITLE: Loading Animation from Snippet Server in Babylon.js\nDESCRIPTION: Demonstrates how to load an animation from the Babylon.js snippet server and apply it to a sphere mesh. The animation can be played with specified frame range and looping behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/animationCurveEditor.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\nlet animations = await BABYLON.Animation.CreateFromSnippetAsync('YOUR SNIPPET ID');\nsphere.animations = animations;\nscene.beginAnimation(sphere, 0, 100, true);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Hotspot Query Values from Scene Picking in Babylon.js\nDESCRIPTION: This code snippet shows how to obtain hotspot query values using scene picking in Babylon.js. It demonstrates picking a point in the scene and extracting the necessary information to fill a hotspot query object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/hotspot.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pickResult = scene.pick(scene.pointerX, scene.pointerY);\nif (pickResult.hit) {\n    const indices = pickResult.pickedMesh.getIndices();\n    const base = pickResult.faceId * 3;\n    hotspotQuery.pointIndex[0] = indices[base];\n    hotspotQuery.pointIndex[1] = indices[base+1];\n    hotspotQuery.pointIndex[2] = indices[base+2];\n    hotspotQuery.barycentric[0] = pickResult.bu;\n    hotspotQuery.barycentric[1] = pickResult.bv;\n    hotspotQuery.barycentric[2] = 1 - pickResult.bu - pickResult.bv;\n    hotspotQuery.meshIndex = scene.meshes.indexOf(pickResult.pickedMesh);\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching and Reattaching GUI Controls in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates removing a GUI control (retrieved from XML) from an AdvancedDynamicTexture and then re-adding it. Useful for dynamic UI updates, toggling visibility, or temporarily detaching controls. Control is accessed via XmlLoader's getNodeById method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = xmlLoader.getNodeById(\"firstContainer\");\nadvancedTexture.removeControl(node);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = xmlLoader.getNodeById(\"firstContainer\");\nadvancedTexture.addControl(node);\n```\n\n----------------------------------------\n\nTITLE: Implementing Current Player Differentiation in TypeScript\nDESCRIPTION: Code for distinguishing the current player from other players by applying different colors based on sessionId. Current player is highlighted in orange (#ff9900) while other players are colored gray.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nroom.state.players.onAdd((player, sessionId) => {\n  var isCurrentPlayer = sessionId === room.sessionId;\n\n  // set material to differentiate CURRENT player and OTHER players\n  sphere.material = new BABYLON.StandardMaterial(`player-material-${sessionId}`);\n\n  if (isCurrentPlayer) {\n    // highlight current player\n    sphere.material.emissiveColor = BABYLON.Color3.FromHexString(\"#ff9900\");\n  } else {\n    // other players are gray colored\n    sphere.material.emissiveColor = BABYLON.Color3.Gray();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Packed Textures in Babylon.js\nDESCRIPTION: Downloads the generated texture package after the asynchronous `processAsync` method completes successfully. The `download` method is called within the success callback of the Promise. It requires the desired image `type` ('jpeg' or 'png') and an optional `quality` parameter for jpeg.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/texturePackage.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npack.processAsync().then(\n    //Success\n    ()=>{\n        pack.download( type, ?quality);\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Scene Background Color using Preset Color in Babylon.js\nDESCRIPTION: This snippet shows an alternative way to set the scene's background color using a preset color constant provided by `BABYLON.Color3`. The example uses `BABYLON.Color3.Blue()` to set the background to blue, avoiding the need to instantiate a new Color3 object directly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/environment_introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.clearColor = BABYLON.Color3.Blue();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh Emitter Direction in Babylon.js (JavaScript)\nDESCRIPTION: Configures a `MeshParticleEmitter` to use custom directions instead of the mesh's surface normals. Sets `useMeshNormalsForDirection` to `false` and defines a custom direction range using `direction1` and `direction2` (`BABYLON.Vector3`). Requires an existing `meshEmitter` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmeshEmitter.useMeshNormalsForDirection = false;\nmeshEmitter.direction1 = new BABYLON.Vector3(0, 1, 0);\nmeshEmitter.direction2 = new BABYLON.Vector3(0, -1, 0);\n```\n\n----------------------------------------\n\nTITLE: Enabling Facet Data for a Mesh in Babylon.js\nDESCRIPTION: This snippet demonstrates how to enable facet data for a torus knot mesh and display the total number of facets.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = BABYLON.MeshBuilder.CreateTorusKnot(\"t\", { radius: 2.0 }, scene);\nmesh.updateFacetData();\nconsole.log(mesh.facetNb);\n```\n\n----------------------------------------\n\nTITLE: Configuring Iridescence Parameters in Babylon.js PBR Material\nDESCRIPTION: This JavaScript code shows how to configure the iridescence effect on a Babylon.js PBR material by setting its specific physical properties. It enables iridescence and then sets the `indexOfRefraction`, `minimumThickness`, and `maximumThickness` (in nanometers) to control the appearance of the thin-film effect. Requires an initialized `BABYLON.PBRMaterial` instance (`pbr`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.albedoColor = new BABYLON.Color3(0.1, 0.1, 0.1);\npbr.metallic = 1.0;\npbr.roughness = 0.0;\n\npbr.iridescence.isEnabled = true;\npbr.iridescence.indexOfRefraction = 1.3;\npbr.iridescence.minimumThickness = 100; // in nanometers\npbr.iridescence.maximumThickness = 400; // in nanometers\n```\n\n----------------------------------------\n\nTITLE: Updating Particle Velocity Using new Vector3 in Babylon.js (JavaScript)\nDESCRIPTION: Shows a traditional method for updating particle velocity by creating new Vector3 objects within the update loop. Each update instantiates fresh objects, which can trigger heavy garbage collection for large particle counts and reduced performance. Requires Babylon.js and the presence of the BABYLON namespace and a 'pcs' object representing the particle system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npcs.updateParticle = function (particle) {\\n    var accel = new BABYLON.Vector3(0, 0.5, 0);\\n    particle.velocity = particle.velocity.add(accel);\\n    // ...\\n};\n```\n\n----------------------------------------\n\nTITLE: Working with Plane Observables - JavaScript\nDESCRIPTION: Subscribes to add, remove, and update events from the plane detector using its observable properties. Each callback receives a plane object, allowing real-time reaction to detected changes in the AR environment. Observables should be set after planeDetector feature is enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nplaneDetector.onPlaneAddedObservable.add((plane) => {\\n  // ... do what you want with the plane after it was added\\n});\\n\\nplaneDetector.onPlaneRemovedObservable.add((plane) => {\\n  // ... do what you want with the plane after it was removed\\n});\\n\\nplaneDetector.onPlaneUpdatedObservable.add((plane) => {\\n  // ... do what you want with the plane after it was updated\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a Decal Map on a Mesh - Babylon.js JavaScript\nDESCRIPTION: This example shows how to create a decal map using the MeshUVSpaceRenderer class in Babylon.js, load a texture, and apply the texture as a decal at a specific position and normal on the mesh. Prerequisites include Babylon.js, a target mesh, and a compatible texture. Key parameters are the target mesh, decal texture, desired position, normal, and size, with inputs and outputs handled through Babylon.js objects. This method allows very fast runtime placement of decals, suited for frequent updates or multiple decals per frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/decals.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst decalMap = new BABYLON.MeshUVSpaceRenderer(mesh, scene);\nconst texture = new BABYLON.Texture(\"bullet.png\", scene);\nconst decalSize = new BABYLON.Vector3(1, 1, 1);\n// find the position and the normal of the mesh where you want to add the decal\n...\ndecalMap.renderTexture(texture, position, normal, decalSize) ;\n```\n\n----------------------------------------\n\nTITLE: Using Precise Mode for Particle Intersection in JavaScript\nDESCRIPTION: Shows how to use the precise mode for intersection detection, though it's not recommended for particles due to performance impact. Only the mesh bounding box will be rotated in this mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_physics.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// for instance, in your SPS.updateParticle(p) function : precise mode, mesh / particle\nif (someMesh.intersectsMesh(p, true)) { // change p velocity vector }\n```\n\n----------------------------------------\n\nTITLE: Updating Gaussian Splatting Data in Babylon.js\nDESCRIPTION: Shows how to update or generate new splats for a Gaussian Splatting mesh using the updateData method. This example creates a single splat with specified position, size, orientation, and color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gaussianSplatting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar gs = new BABYLON.GaussianSplattingMesh(\"GS\", undefined, scene, true);\n\n// size of a single splat, in bytes\nconst rowLength = 32;\n\n// chunck size of splats\nconst splatCount = 1;\n\nconst uBuffer = new Uint8Array(splatCount * rowLength);\nconst fBuffer = new Float32Array(uBuffer.buffer);\n\n// center position\nfBuffer[0] = 0; // x\nfBuffer[1] = 0; // y\nfBuffer[2] = 0; // z\n\n// size\nfBuffer[3 + 0] = 0.1;\nfBuffer[3 + 1] = 0.1;\nfBuffer[3 + 2] = 0.1;\n\n// orientation quaternion. Values are remapped from -1..1 to 0..255. 128 is 0. 255 is 1\nuBuffer[28 + 1] = 128; \nuBuffer[28 + 2] = 128;\nuBuffer[28 + 3] = 128;\nuBuffer[28 + 0] = 255;\n\n// color\nuBuffer[24 + 0] = 128;\nuBuffer[24 + 1] = 128;\nuBuffer[24 + 2] = 128;\nuBuffer[24 + 3] = 255;\ngs.updateData(uBuffer);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Frame Graph Clear Task\nDESCRIPTION: Instantiates a `FrameGraphClearTextureTask` to clear textures. Configures it to clear both color and depth buffers, assigning the previously created color and depth texture handles as targets. Finally, adds the configured task to the frame graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst clearTask = new BABYLON.FrameGraphClearTextureTask(\"clear\", frameGraph);\n\nclearTask.clearColor = true;\nclearTask.clearDepth = true;\nclearTask.targetTexture = colorTexture;\nclearTask.depthTexture = depthTexture;\n\nframeGraph.addTask(clearTask);\n```\n\n----------------------------------------\n\nTITLE: Specifying Texture Index for Color Sampling in Babylon.js\nDESCRIPTION: Shows how to specify which texture to use for coloring when adding points with `BABYLON.PointColor.Color` from a mesh that has multiple textures (e.g., PBR material). An optional integer parameter indicates the index of the desired texture in the material's texture array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npcs.addSurfacePoints(model, 10000, BABYLON.PointColor.Color, 1);\n\npcs.addVolumePoints(model, 10000, BABYLON.PointColor.Color, 3);\n```\n\n----------------------------------------\n\nTITLE: Converting Babylon.js Observable to RxJS Observable\nDESCRIPTION: Provides a TypeScript function to convert a Babylon.js Observable into an RxJS Observable. This allows integration of Babylon.js observables with RxJS for advanced execution patterns and operators.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Wraps a Babylon Observable into an rxjs Observable\n *\n * @param bjsObservable The Babylon Observable you want to observe\n * @example\n * ```\n * import { Engine, Scene, AbstractMesh } from '@babylonjs/core'\n *\n * const canvas = document.getElementById('canvas') as HTMLCanvasElement\n * const engine = new Engine(canvas)\n * const scene = new Scene(engine)\n *\n * const render$: Observable<Scene> = fromBabylonObservable(scene.onAfterRenderObservable)\n * const onMeshAdded$: Observable<AbstractMesh> = fromBabylonObservable(scene.onNewMeshAddedObservable)\n * ```\n */\nexport function fromBabylonObservable<T>(bjsObservable: BJSObservable<T>): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    if (!(bjsObservable instanceof BJSObservable)) {\n      throw new TypeError(\"the object passed in must be a Babylon Observable\");\n    }\n\n    const handler = bjsObservable.add((v) => subscriber.next(v));\n\n    return () => bjsObservable.remove(handler);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ImageWithCenterTextButton in Babylon.js GUI\nDESCRIPTION: This snippet shows how to create an ImageWithCenterTextButton, which is a button with an image background and centered text overlay. It uses the BABYLON.GUI.Button.CreateImageWithCenterTextButton method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = BABYLON.GUI.Button.CreateImageWithCenterTextButton(\"but\", \"Click Me\", \"textures/grass.png\");\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Simultaneous Lights\nDESCRIPTION: Configures material to support more than the default 4 lights in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/lights.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmaterial.maxSimultaneousLights = 5;\n```\n\n----------------------------------------\n\nTITLE: Loading with Custom Root URL (TypeScript)\nDESCRIPTION: Shows how to explicitly pass a root URL when loading a model file using AppendSceneAsync.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait BABYLON.AppendSceneAsync(\"model_file_name\", scene, { rootUrl: \"https://example.com/assets/\" });\n```\n\n----------------------------------------\n\nTITLE: Setting Height Offset\nDESCRIPTION: Sets the vertical offset of the camera above the target's center.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.heightOffset = 8;\n```\n\n----------------------------------------\n\nTITLE: Customizing Lava Material Properties in Babylon.js\nDESCRIPTION: This snippet demonstrates how to customize the speed of lava perturbations and the fog color of the Lava Material. These properties allow for fine-tuning the visual appearance of the lava effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/lavaMat.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlavaMaterial.speed = 2.0; // Default 1. Represents speed of perturbations of the lava\nlavaMaterial.fogColor = new BABYLON.Color3(1, 0, 0); // Default to (0,0,0) black. Represents the color of the fog displayed on the lava ground.\n```\n\n----------------------------------------\n\nTITLE: Disposing Duplicated AssetContainer Entries in Babylon.js (JavaScript)\nDESCRIPTION: Calls the dispose method on the entries object returned by instantiateModelsToScene to clean up all duplicated nodes, skeletons, and animations. This operation is necessary to prevent memory leaks when clones are no longer needed. Requires that entries was generated via model instantiation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetContainers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nentries.dispose();\n```\n\n----------------------------------------\n\nTITLE: Configuring Depth Writing for Transparent Meshes in SSR\nDESCRIPTION: Enables depth value writing for transparent meshes in the backface depth renderer when using automatic thickness calculation. This helps prevent artifacts with transparent materials in SSR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nssr.backfaceForceDepthWriteTransparentMeshes = true;\n```\n\n----------------------------------------\n\nTITLE: Efficient Mesh Path Update Pattern within Render Loop in Babylon.js (JavaScript)\nDESCRIPTION: Provides a recommended pattern for updating a mesh's path parameter efficiently within the Babylon.js render loop (scene.registerBeforeRender). It emphasizes modifying the elements of the existing path array directly ('path[i].x = newXValue', etc.) rather than creating a new array each frame to avoid unnecessary memory allocation and improve performance. The updated path is then passed to the corresponding CreateXXX method with the mesh instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = [v1, v2, ..., vN]; // your own array, created once\nconst mesh = CreateXXX(\"mesh\", path, etc, ..., scene, true); // updatable = true : creates your initial mesh\nconst computeValue = function(val1, val2) { ... }; // your update logic : returns a value in function of val1 and val2\nconst getParam = function() { ... }; // returns a param value evolving in the render loop\nconst updatePath = function(path, k) { // updates the existing path array elements\n  for (let i = 0; i < path.length; i++) {\n    const x = computeValue(path[i].x, k);\n    const y = computeValue(path[i].y, k);\n    const z = computeValue(path[i].z, k);\n    path[i].x = x;\n    path[i].y = y;\n    path[i].z = z;\n  }\n};\n\nscene.registerBeforeRender(function() {\n  const k = getParam();\n  updatePath(path, k);\n  mesh = CreateXXX(null, path, null, ..., null, mesh);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Pickable Solid Particle System in Babylon.js\nDESCRIPTION: Initializes a Solid Particle System with picking enabled using the isPickable parameter. This makes the particles selectable through mouse interactions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/picking_sps.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar SPS = new BABYLON.SolidParticleSystem(\"SPS\", scene, { isPickable: true });\n```\n\n----------------------------------------\n\nTITLE: Disabling Teleportation in Default XR Experience\nDESCRIPTION: Shows how to disable the default teleportation feature when creating a WebXR experience.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRMovement.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xr = await scene.createDefaultXRExperienceAsync({\n  disableTeleportation: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Babylon.js Template Repository\nDESCRIPTION: This command, run from the root directory of the cloned repository in an NPM-enabled terminal, starts the development server in 'watch' mode. It automatically builds the project, serves it locally (typically at http://127.0.0.1:8080), and watches for file changes to trigger rebuilds and browser refreshes. This allows for rapid testing during development.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining ParticleSystem Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Outlines the JSON format for configuring a particle system in Babylon.js. Key properties include the emitter's ID, gravity, emission direction range, emission box bounds, color gradients (start, end, dead), emission rate, update speed, particle lifetime range, size range, angular speed range, texture name, blend mode, capacity, texture mask, linkage to emitter, and optional animation settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n     \"emitterId\": string,\n     \"gravity\": vector3,\n     \"direction1\": vector3,\n     \"direction2\": vector3,\n     \"minEmitBox\": vector3,\n     \"maxEmitBox\": vector3,\n     \"color1\": color3,\n     \"color2\": color3,\n     \"colorDead\": color3,\n     \"deadAlpha\": float,\n     \"emitRate\": float,\n     \"updateSpeed\": float,\n     \"targetStopFrame\": int,\n     \"minEmitPower\": int,\n     \"maxEmitPower\": float,\n     \"minLifeTime\": float,\n     \"maxLifeTime\": float,\n     \"minSize\": float,\n     \"maxSize\": float,\n     \"minAngularSpeed\": float,\n     \"maxAngularSpeed\": float,\n     \"textureName\": string,\n     \"blendMode\": int,\n     \"capacity\": int,\n     \"textureMask\": color4,\n     \"linkToEmitter\": bool,\n    \"animations\": array of Animations (see below, can be omitted),\n    \"autoAnimate\": boolean,\n    \"autoAnimateFrom\": int,\n    \"autoAnimateTo\": int,\n    \"autoAnimateLoop\": boolean (can be omitted),\n    \"autoAnimateSpeed\": number (can be omitted)\n}\n```\n\n----------------------------------------\n\nTITLE: Refraction Post-Process Constructor Definition\nDESCRIPTION: Constructor signature for the RefractionPostProcess showing all available parameters including name, texture URL, color, depth, and sampling options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.RefractionPostProcess = function (name, refractionTextureUrl, color, depth, colorLevel, ratio, null, samplingMode, engine, reusable)\n```\n\n----------------------------------------\n\nTITLE: Displaying LessOrEqual Node Image using H3Image Component (Markdown)\nDESCRIPTION: Employs the H3Image component to display an image illustrating the 'Less Or Equal' logical node within the Babylon.js NGE documentation. Attributes specify the title ('LessOrEqual'), image source ('/img/tools/nge/lessOrEqualNode.jpg'), and alt text ('Less Or Equal node').\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<H3Image title=\"LessOrEqual\" image=\"/img/tools/nge/lessOrEqualNode.jpg\" alt=\"Less Or Equal node\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Particle Recycling in Babylon.js Solid Particle System\nDESCRIPTION: Custom update function pattern that checks for a condition to recycle particles. This allows for creating effects like fountains where particles are reused when they reach certain conditions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_animate.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst updateParticle = (particle) => {\n    if (particle condition) {\n        recycleParticle(particle)\n    }\n    doUpdate(particle);\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Mesh to Node Geometry Block\nDESCRIPTION: Method to assign a mesh to a node geometry block using the getBlockByName method. This allows loading meshes into the node for geometry processing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nNodeGeometry.getBlockByName(\"meshBlockName\").mesh = myMesh;\n```\n\n----------------------------------------\n\nTITLE: Custom Template Hide Implementation\nDESCRIPTION: Example implementation of a custom hide function with opacity transition.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntemplate.hide((template) => {\n  // set the opacity to '0'. Opacity transition is set using CSS.\n  template.parent.style.opacity = \"0\";\n  // define a function for when the transition has ended:\n  let onTransitionEnd = () => {\n    template.parent.removeEventListener(\"transitionend\", onTransitionEnd);\n    // set display none when opacity is '0'\n    template.parent.style.display = \"none\";\n  };\n  // add the transitionend event listener\n  template.parent.addEventListener(\"transitionend\", onTransitionEnd);\n  // return immediately, don't wait for the transition to end\n  return Promise.resolve(template);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating View without Camera in Babylon.js\nDESCRIPTION: Shows how to register a view without specifying a camera, allowing the render loop to execute on the view without modifying active scenes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiCanvas.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet view = engine.registerView(document.getElementById(\"renderCanvas1\"));\n```\n\n----------------------------------------\n\nTITLE: Optimizing Light Estimation Performance\nDESCRIPTION: Example showing how to improve performance by adjusting polling intervals for light estimation data and environment cube maps, which is useful for slower devices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst lightEstimationFeature = featuresManager.enableFeature(BABYLON.WebXRFeatureName.LIGHT_ESTIMATION, \"latest\", {\n  lightEstimationPollInterval: 1000,\n  cubeMapPollInterval: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sprite Map Background Size\nDESCRIPTION: Sets up the initial size for a sprite map grid using a Vector2 to define dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet backgroundSize = new BABYLON.Vector2(2, 2); //set the size of the sprite map stage\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Dimensions in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates creating a `BABYLON.Viewport` instance with specified coordinates and dimensions (`x`, `y`, `w`, `h`). When using WebGPU, these values represent normalized coordinates (0 to 1) relative to the framebuffer/texture size. Unlike WebGL, WebGPU requires that the viewport defined by `x, y, w, h` remains strictly within the `[0, 1] x [0, 1]` bounds (i.e., `x >= 0`, `y >= 0`, `w >= 0`, `h >= 0`, `x + w <= 1`, `y + h <= 1`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUBreakingChanges.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.Viewport(x, y, w, h);\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Processing Texture Package in Babylon.js\nDESCRIPTION: Initiates the asynchronous texture packing process on an existing `TexturePacker` instance (`pack`). This method prevents blocking the main thread during potentially long packing operations. A Promise is returned, allowing success and error handling via `.then(success)` and `.catch(error)` callbacks. All interactions with the completed pack should occur within the success callback.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/texturePackage.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npack.processAsync().then(success).catch(error);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Penumbra Darkness for PCSS Filtered Shadows\nDESCRIPTION: Modifies the darkness level of soft shadows when using the PCSS (Percentage Closer Soft Shadows) filtering method. Values range from 0 to 1, with lower values creating lighter soft shadows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.penumbraDarkness = 0.7;\n```\n\n----------------------------------------\n\nTITLE: Animating RadialCloner Properties in BabylonJS\nDESCRIPTION: Shows how to animate the RadialCloner by modifying its startangle property over time using BabylonJS Animation system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/radialCloner.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Animation.CreateAndStartAnimation('radanimation', rc, 'startangle', 30, 120, 0, 90);\n```\n\n----------------------------------------\n\nTITLE: Creating Post Process Pipeline in Babylon.js\nDESCRIPTION: Initializes a new standard post process render pipeline with the engine.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/postProcessRenderPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar standardPipeline = new BABYLON.PostProcessRenderPipeline(engine, \"standardPipeline\");\n```\n\n----------------------------------------\n\nTITLE: Executing NPM Watch Command for TypeScript Files\nDESCRIPTION: Command to watch all TypeScript files in the project and automatically repack the distribution files when changes are detected. This enables real-time updates when modifying scripts.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/attachingScripts.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Customizing Joint Meshes in WebXR Hand Tracking\nDESCRIPTION: Demonstrates how to customize the meshes used for each joint in WebXR hand tracking. This example uses a box instead of the default sphere for joint representation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  jointMeshes: {\n    sourceMesh: BoxBuilder.CreateBox(\"jointParent\", { size: 1 }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Loop Node in Babylon.js - Markdown/English\nDESCRIPTION: Describes the Loop node material block in Babylon.js, outlining its configuration for iterating a set number of times, aggregating results, and providing special ports for loop-specific data flow. Inputs include 'input' (initial value) and 'iterations' (number of repetitions), while outputs such as 'output', 'index', and 'loopID' control result aggregation and inter-node connections via storage read/write. No direct code is present, but the section structurally defines how this node is to be set up within the material graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/availableNodeBlocks.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Loop\\n\\nThis creates a root node that will loop through a number of iterations (that value can be set through node.iterations or through the iterations input).\\n\\n- Inputs:\\n\\n  - input: Defines the initial value of the stored data\\n\\n  - iterations: How many iterations for that loop (this will superseed the value defined on node.iterations)\\n\\n- Outputs\\n  - output: The aggregated value computed by the loop\\n  - index: That value will be changed on each loop to indicate the current index\\n  - loopID: Use this special port to connect StorageRead and StorageWrite entries to this loop\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Meshes with MeshBuilder in Babylon.js\nDESCRIPTION: This snippet demonstrates the basic syntax for creating meshes using the MeshBuilder.Create method in Babylon.js. It allows for customization through an options object and optional scene parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = BABYLON.MeshBuilder.Create<MeshType>(name, options, scene);\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Coordinate Modes Examples\nDESCRIPTION: Playground examples showing different coordinate modes with test patterns for both cubemap and flat textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/reflectionTexture.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#20OAV9#4307\" title=\"PLANAR, EQUIRECTANGULAR, PROJECTION, and SPHERICAL Modes with Flat Test Pattern\" description=\"Demonstration of flat texture reflection coordinate modes\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Event Handling for Accessibility in Babylon.js\nDESCRIPTION: Illustrates how to add custom event handling to an accessible object in a Babylon.js scene. This allows screen reader users to interact with 3D objects using keyboard input.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/accessibility/screenReaders.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet egg = BABYLON.MeshBuilder.CreateSphere(\"Egg\", { diameterX: 0.62, diameterY: 0.8, diameterZ: 0.6 }, scene);\negg.accessibilityTag = {\n  description: \"An easter egg\",\n  eventHandler: {\n    onclick: yourFunction,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Property Decoration in TypeScript\nDESCRIPTION: Demonstrates basic usage of @visibleInInspector decorator to expose a number property named 'Speed' with a default value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/exposingProperties.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@visibleInInspector(\"number\", \"Speed\", 0.04)\nprivate _speed: number;\n```\n\n----------------------------------------\n\nTITLE: Setting Target Bone Index for Bone Weight Shader in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to change the bone being visualized by the BoneWeight shader after its creation. It involves calling the `setFloat` method on the shader material instance, passing the uniform name 'targetBoneIndex' and the desired bone index.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nboneWeightShader.setFloat(targetBoneIndex, index);\n```\n```\n\n----------------------------------------\n\nTITLE: Digesting a Mesh to Generate Particles in Babylon.js\nDESCRIPTION: This snippet demonstrates how to digest a mesh into particles using SPS. It creates a torus knot mesh, digests it into the SPS, disposes the original mesh, and then builds the SPS mesh. The digest method decomposes the mesh geometry and uses all its facets to generate particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_digest.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar model = BABYLON.MeshBuilder.CreateTorusKnot(\n  \"s\",\n  { radius: 20, tube: 6, tubularSegments: 64, radialSegments: 128 },\n  scene\n);\nSPS.digest(model);\nmodel.dispose();\nSPS.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: New Light Event Handler Registration\nDESCRIPTION: Registration of callback function for handling new lights added to the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/layerMasksAndMultiCam.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onNewLightAdded = onNewLight;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Optimization Class in JavaScript\nDESCRIPTION: Example of creating a custom optimization class by extending BABYLON.CustomOptimization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/sceneOptimizer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyCustomOptimization extends BABYLON.CustomOptimization{\n    constructor(priority){\n        super(priority)\n    }\n\n    onApply(){\n        // Some optimizing code\n    }\n    onGetDescription(){\n        // A desription of your optimization\n        return \"I make framerate go prrrr!\";\n    }\n};\n\noptions.addOptimization(new MyCustomOptimization(2));\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup L in Babylon.js Physics\nDESCRIPTION: Parameter setup for demonstrating physics behavior with non-zero mass connected axle. This configuration is used to show different behaviors with and without motors, and with different initial mesh positions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(0, 0, 0),  \nconnectedPivot: new BABYLON.Vector3(0, 0, 0), \nmainAxis: new BABYLON.Vector3(0, 1, 0),\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: GreasedLineRibbon Default Option Values - Babylon.js (JavaScript)\nDESCRIPTION: Shows the default values for the main ribbonOptions properties in GreasedLineRibbon. These defaults ensure a standard ribbon is created if no custom configuration is provided. Users can override these values when manual control is required, such as for width, facesMode, or shading behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_ribbon/greased_line_ribbon.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npointsMode = GreasedLineRibbonPointsMode.POINTS_MODE_POINTS;\ndirection = Vector3.UpReadOnly;\ndirectionsAutoMode: GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_NONE;\nwidth = GreasedLineMaterialDefaults.DEFAULT_WIDTH; // 0.1\nfacesMode = GreasedLineRibbonFacesMode.FACES_MODE_SINGLE_SIDED;\nclosePath = false;\nsmoothShading = false;\n```\n\n----------------------------------------\n\nTITLE: Example npm Scripts for Formatting and Linting (JavaScript/JSON)\nDESCRIPTION: These script definitions, typically found in a package.json file, show common commands for checking code formatting ('format:check'), fixing formatting issues ('format:fix'), checking for linting errors ('lint:check'), and automatically fixing linting errors ('lint:fix').\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n\"format:check\"; // check formatting,\n\"format:fix\"; // fix formatting,\n\"lint:check\"; // check linting,\n\"lint:fix\"; // fix linting,\n```\n\n----------------------------------------\n\nTITLE: Setting Up Player ActionManager for Collisions\nDESCRIPTION: Creates an ActionManager for the player mesh to handle collision detection. This is a prerequisite for setting up intersection triggers with lanterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//--COLLISIONS--\nthis.mesh.actionManager = new ActionManager(this.scene);\n```\n\n----------------------------------------\n\nTITLE: Creating GUI Elements with CastorGUI\nDESCRIPTION: Demonstrates creation of GUI elements including a texture and dialog with text. Shows how to set up click handlers and position elements on the canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet myFunction = function () {\n  alert(\"Yes, this work!\");\n};\nlet guiTexture = new GUITexture(\"life\", \"data/image.png\", { w: 50, h: 50, x: 10, y: 0 }, guisystem, myFunction);\n\nlet optionsDialog = { w: guisystem.getCanvasSize().width - 20, h: 100, x: 8, y: guisystem.getCanvasSize().height - 110 };\nlet dialog = new GUIDialog(\"dialog\", optionsDialog, guisystem);\ndialog.setVisible(true);\n\nlet text = new GUIText(\"textDialog\", { size: 15, text: \"Display text here\" }, guisystem, false);\ndialog.add(text);\n```\n\n----------------------------------------\n\nTITLE: Manually Setting SPS MultiMaterials in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates enabling MultiMaterial support for an SPS using `enableMultiMaterial: true` without inheriting materials from the source models. After building the mesh, the `sps.setMultiMaterial()` method is called with an array of custom `Material` objects (`mat0`, `mat1`, `mat2`) to define the materials used by the SPS. This method assigns these materials to the particles, typically based on their original shape order unless overridden by `particle.materialIndex`. It can be called again later to update or reorder the materials, although frequent calls might impact performance as it recalculates the geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_material.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, {\n  enableMultiMaterial: true,\n  updatable: false\n});\nsps.addShape(model1, 300, { positionFunction: initFunction });\nsps.addShape(model2, 300, { positionFunction: initFunction });\nsps.addShape(model3, 300, { positionFunction: initFunction });\nsps.buildMesh();\n\n// mat0, mat1, mat2 are Material objects\nsps.setMultiMaterial([mat0, mat1, mat2]);\n\n// ... later in the code, swap mat0 and mat1\nsps.setMultiMaterial([mat1, mat0, mat2]);\n```\n\n----------------------------------------\n\nTITLE: Creating a GUIPanel in JavaScript\nDESCRIPTION: Constructor for creating a new GUIPanel. It takes an id, options, GUI manager, and an optional callback function as parameters. The panel can be customized with various options like size, position, background, and border properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiPanel.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUIPanel(id, options, guimanager, append)\n```\n\n----------------------------------------\n\nTITLE: Backward-compatible Pivot Matrix Setting - Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates usage of mesh.setPivotMatrix with an explicit 'false' flag to preserve legacy behavior (from Babylon.js versions before v3.2), causing the mesh's local origin to move to the pivot point. Use this if updating old projects. Parameter 'false' maintains prior mesh-lifting semantics.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotMatrix(BABYLON.Matrix.Translation(-x, -y, -z), false);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment BRDF Texture in Babylon.js\nDESCRIPTION: This code snippet assigns a pre-calculated Bidirectional Reflectance Distribution Function (BRDF) lookup texture to a material's `environmentBRDFTexture` property in Babylon.js. It creates a standard `BABYLON.Texture` instance, loading it from the specified URL. The `scene` object is required, along with boolean flags (likely `noMipmap` set to true and `invertY` set to false). This texture is essential for physically based rendering (PBR) to achieve realistic lighting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.environmentBRDFTexture = new BABYLON.Texture(\"https://assets.babylonjs.com/environments/filename\", scene, true, false);\n```\n\n----------------------------------------\n\nTITLE: Setting Diffusion Profile for Skin\nDESCRIPTION: Shows how to set up a skin tone diffusion profile for realistic subsurface scattering effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npbr.subSurface.scatteringDiffusionProfile = new BABYLON.Color3(0.75, 0.25, 0.2);\n```\n\n----------------------------------------\n\nTITLE: Modifying Box Emitter Properties in Babylon.js (JavaScript)\nDESCRIPTION: Updates the direction (`direction1`, `direction2`) and emission box boundary (`minEmitBox`, `maxEmitBox`) properties of a previously created box emitter object (`boxEmitter`). Requires a `boxEmitter` object obtained from `createBoxEmitter` and `BABYLON.Vector3` instances for the new values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nboxEmitter.direction1 = new BABYLON.Vector3(-5, 2, 1); \nboxEmitter.direction2 = new BABYLON.Vector3(5, 2, 1);  \nboxEmitter.minEmitBox = new BABYLON.Vector3(-2, -3, -4);  \nboxEmitter.maxEmitBox = new BABYLON.Vector3(2, 3, 4); \n```\n\n----------------------------------------\n\nTITLE: Creating Explosion Emitter for Fireworks in Babylon.js\nDESCRIPTION: This code initializes the explosion part of the firework by creating an invisible sphere and preparing to use its vertex data for the particle system. It sets up the structure needed to access vertex positions, normals, and colors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst explosion = MeshBuilder.CreateSphere(\"explosion\", { segments: 4, diameter: 1 }, this._scene);\nexplosion.isVisible = false;\nexplosion.position = position;\nlet emitter = explosion;\n//grabbing vertex data\nemitter.useVertexColors = true;\nlet vertPos = emitter.getVerticesData(VertexBuffer.PositionKind);\nlet vertNorms = emitter.getVerticesData(VertexBuffer.NormalKind);\nlet vertColors = [];\n```\n\n----------------------------------------\n\nTITLE: Getting Camera Direction in Babylon.js WebXR\nDESCRIPTION: Retrieves the direction vector of the WebXR camera along a specified axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRCamera.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst direction = xrCamera.getDirection(Axis.Z);\n```\n\n----------------------------------------\n\nTITLE: Declaring Input/Output Connections for FlowGraphBranchBlock (TypeScript)\nDESCRIPTION: Shows the declaration of the public readonly properties for the `condition` data input (boolean) and the `onTrue` and `onFalse` signal outputs within the `FlowGraphBranchBlock` class.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\npublic readonly condition: FlowGraphDataConnection<boolean>;\npublic readonly onTrue: FlowGraphSignalConnection;\npublic readonly onFalse: FlowGraphSignalConnection;\n```\n\n----------------------------------------\n\nTITLE: Implementing Road Procedural Texture in Babylon.js\nDESCRIPTION: Creates a standard material and applies a road procedural texture to it. The texture size is set to 512 pixels and can be customized through the roadColor parameter to change the color of the road.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/proceduralTexturesLibrary/road.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar roadmaterial = new BABYLON.StandardMaterial(\"roadMat\", scene);\nvar roadmaterialpt = new BABYLON.RoadProceduralTexture(\"roadTex\", 512, scene);\nroadmaterial.diffuseTexture = roadmaterialpt;\n```\n\n----------------------------------------\n\nTITLE: Initializing IBL Shadows Rendering Pipeline in Babylon.js\nDESCRIPTION: Creates an instance of the IBL Shadows rendering pipeline with scene, options, and camera configuration. This is the initial setup required to enable IBL shadows in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/IBLShadowsRenderingPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst shadowPipeline = new BABYLON.IblShadowsRenderPipeline(\n  \"ibl shadows\", // The name of the pipeline\n  scene, // The scene to which the pipeline belongs\n  options, // The options for the pipeline\n  [scene.activeCamera], // The list of cameras to attach the pipeline to\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup A in Babylon.js Physics\nDESCRIPTION: Basic parameter setup for hinge joint where both main and connected pivots are at origin, and both axes are aligned with the Y-axis. This creates a simple rotation around the Y-axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(0, 0, 0),  \nconnectedPivot: new BABYLON.Vector3(0, 0, 0), \nmainAxis: new BABYLON.Vector3(0, 1, 0), //\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Point Proximity Query Implementation\nDESCRIPTION: Example of implementing a point proximity query using the Havok physics plugin to find the closest shape from a point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar hk = new BABYLON.HavokPlugin();\nhk.pointProximity(\n    {\n        position: ballPos,\n        maxDistance: 0.1\n    },\n    result\n);\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Babylon Viewer HTML Tag in WordPress\nDESCRIPTION: For more control over the 3D viewer, you can use the babylon HTML tag in WordPress HTML blocks. This allows configuring parameters like lighting, camera position, camera behavior, and rotation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/babylonCMSIntegration/wordPress.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<babylon></babylon>\n```\n\n----------------------------------------\n\nTITLE: Enumerating WebGPU Pipeline State Positions for Cache Indexing in TypeScript\nDESCRIPTION: This TypeScript enum `StatePosition` defines constant numerical indices for various components of a WebGPU render pipeline's state (e.g., stencil masks, depth settings, shader stages). These indices dictate the depth and branching factor at each level of the node tree cache, allowing efficient lookup based on the pipeline's configuration. The order reflects an optimization strategy, placing less frequently changing states at lower indices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUCacheRenderPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nenum StatePosition {\n    StencilReadMask = 0,\n    StencilWriteMask = 1,\n    DepthBias = 2,\n    DepthBiasSlopeScale = 3,\n    DepthStencilState = 4,\n    MRTAttachments1 = 5,\n    MRTAttachments2 = 6,\n    RasterizationState = 7,\n    ColorStates = 8,\n    ShaderStage = 9,\n    TextureStage = 10,\n    VertexState = 11, // vertex state will consume positions 11, 12, ... depending on the number of vertex inputs\n\n    NumStates = 12\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Factory with Options in TypeScript\nDESCRIPTION: This snippet shows how to register a plugin factory that accepts custom options. The options are passed to the importer's constructor when creating a new instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/createImporters.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RegisterSceneLoaderPlugin } from \"@babylonjs/core/Loading/sceneLoader\";\n\nRegisterSceneLoaderPlugin({\n  name: \"myCustomImporter\",\n  extensions: \".myCustomExtension\",\n  createPlugin: async (options) => {\n    const { MyCustomImporter } = await import(\"./MyCustomImporter\");\n    return new MyCustomImporter(options[\"myCustomImporter\"]);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Material in Babylon.js\nDESCRIPTION: Shows how to create a basic StandardMaterial instance in Babylon.js. The material can be applied to meshes to define their appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/material.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst material = new BABYLON.StandardMaterial(\"name\", scene);\n```\n\n----------------------------------------\n\nTITLE: Initializing HtmlMeshRenderer with Scene Setup in BabylonJS\nDESCRIPTION: Demonstrates setting up a BabylonJS scene with HtmlMeshRenderer and creating multiple HTML mesh instances for different content types including forms, PDFs, and websites. Shows essential configuration including transparent scene background and camera setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/addons/htmlMesh.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\";\nimport { ActionManager } from \"@babylonjs/core/Actions/actionManager\";\nimport { ExecuteCodeAction } from \"@babylonjs/core/Actions/directActions\";\nimport { Color4 } from \"@babylonjs/core/Maths/math.color\";\nimport \"@babylonjs/core/Helpers/sceneHelpers\";\n\nimport { HtmlMeshRenderer, HtmlMesh } from \"babylonjs-addons\"\n\nlet engine;\nlet scene;\n\nconst createScene = () => {\n  const canvas = document.querySelector(\"canvas\");\n  engine = new Engine(canvas, true);\n\n  // This creates a basic Babylon Scene object (non-mesh)\n  scene = new Scene(engine);\n\n  // It is critical to have a transparent clear color for HtmlMesh to work.\n  scene.clearColor = new Color4(0, 0, 0, 0);\n\n  scene.createDefaultCameraOrLight(true, true, true);\n  scene.activeCamera.radius = 20;\n\n  // Create the HtmlMeshRenderer\n  const htmlMeshRenderer = new HtmlMeshRenderer(scene);\n\n  // Shows how this can be used to include html content, such\n  // as a form, in your scene.  This can be used to create\n  // richer UIs than can be created with the standard Babylon\n  // UI control, albeit with the restriction that such UIs would\n  // not display in native mobile apps or XR applications.\n  const htmlMeshDiv = new HtmlMesh(scene, \"html-mesh-div\");\n  const div = document.createElement(\"div\");\n  div.innerHTML = `\n        <form style=\"padding: 10px; transform: scale(4); transform-origin: 0 0;\">\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n            \n            <label for=\"country\">Country:</label>\n            <select id=\"country\" name=\"country\">\n                <option value=\"USA\">USA</option>\n                <option value=\"Canada\">Canada</option>\n                <option value=\"UK\">UK</option>\n                <option value=\"Australia\">Australia</option>\n            </select><br><br>\n            \n            <label for=\"hobbies\">Hobbies:</label><br>\n            <input type=\"checkbox\" id=\"hobby1\" name=\"hobbies\" value=\"Reading\">\n            <label for=\"hobby1\">Reading</label><br>\n            <input type=\"checkbox\" id=\"hobby2\" name=\"hobbies\" value=\"Gaming\">\n            <label for=\"hobby2\">Gaming</label><br>\n            <input type=\"checkbox\" id=\"hobby3\" name=\"hobbies\" value=\"Sports\">\n            <label for=\"hobby3\">Sports</label><br><br>\n        </form>\n    `;\n  div.style.backgroundColor = \"white\";\n  div.style.width = \"480px\";\n  div.style.height = \"360px\";\n  // Style the form\n\n  htmlMeshDiv.setContent(div, 4, 3);\n  htmlMeshDiv.position.x = -3;\n  htmlMeshDiv.position.y = 2;\n\n  // Shows how this can be used to include a PDF in your scene.  Note this is\n  // conceptual only.  Displaying a PDF like this works, but any links in the\n  // PDF will navigate the current tab, which is probably not what you want.\n  // There are other solutions out there such as PDF.js that may give you more\n  // control, but ultimately proper display of PDFs is not within the scope of\n  // this project.\n  const pdfUrl = \"https://cdn.glitch.com/3da1885b-3463-4252-8ded-723332b5de34%2FNew_Horizons.pdf#zoom=200?v=1599831745689\";\n  const htmlMeshPdf = new HtmlMesh(scene, \"html-mesh-pdf\");\n  const iframePdf = document.createElement(\"iframe\");\n  iframePdf.src = pdfUrl;\n  iframePdf.width = \"480px\";\n  iframePdf.height = \"360px\";\n  htmlMeshPdf.setContent(iframePdf, 4, 3);\n  htmlMeshPdf.position.x = 3;\n  htmlMeshPdf.position.y = 2;\n\n  // Shows how this can be used to include a website in your scene\n  const siteUrl = \"https://www.babylonjs.com/\";\n  const htmlMeshSite = new HtmlMesh(scene, \"html-mesh-site\");\n  const iframeSite = document.createElement(\"iframe\");\n  iframeSite.src = siteUrl;\n  iframeSite.width = \"480px\";\n  iframeSite.height = \"360px\";\n  htmlMeshSite.setContent(iframeSite, 4, 3);\n  htmlMeshSite.position.x = -3;\n  htmlMeshSite.position.y = -2;\n\n  // Shows how this can be used to include a YouTube video in your scene\n  const videoId = \"zELYw2qEUjI\";\n```\n\n----------------------------------------\n\nTITLE: Practical Tag Usage Examples in Scene Management\nDESCRIPTION: Examples of using tags for practical scene management tasks in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/tags.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst meshes = myScene.getMeshesByTags(\"tag1 && (tag2 || tag4 || !tag5)) || !(!tag1) && !!!tag5\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst meshesToLightByLight1 = myScene.getMeshesByTags(\"mustBeLightedByLight1\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ghosts = myScene.getMeshesByTags(\"ghost && green\");\n\nfor (let index = 0; index < ghosts.length; index++) {\n  ghosts[index].isVisible = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Models with positionFunction for Differentiated Particles - Babylon.js - JavaScript\nDESCRIPTION: Illustrates the addition of two types of models to the same SPS using the same initialization callback. By varying indices, each particle in different shapes can be positioned or colored differently. SPS must be previously instantiated. This usage is ideal for scenes requiring large sets of similarly-instantiated, but slightly varied, objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.addShape(model1, 1000, { positionFunction: myBuilder });\nSPS.addShape(model2, 500, { positionFunction: myBuilder });\n```\n\n----------------------------------------\n\nTITLE: Joining Curves in BabylonJS\nDESCRIPTION: Examples of using the continue() method to join multiple curves and accessing curve properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst myFullCurve = mySinusCurve.continue(bezier3).continue(bezier2);\nconst path = myFullCurve.getPoints();\nconst extruded = BABYLON.Mesh.ExtrudeShape(\"extrudedShape\", shape, path, 1, 0, scene);\nconst l = myFullCurve.length();\n```\n\n----------------------------------------\n\nTITLE: Template Class Public Variables\nDESCRIPTION: Core public variables available in the Template class for managing template lifecycle and state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npublic onInit: Observable<Template>;\npublic onLoaded: Observable<Template>;\npublic onAppended: Observable<Template>;\npublic onStateChange: Observable<Template>;\npublic onEventTriggered: Observable<EventCallback>;\n\npublic isLoaded: boolean; // is the template fully loaded\n\npublic parent: HTMLElement; // the HTML container of this template. In this case, the <canvas-container> element.\n```\n\n----------------------------------------\n\nTITLE: Adding Key Row to VirtualKeyboard in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add a row of keys to a `BABYLON.GUI.VirtualKeyboard` instance. It takes an array of strings representing the characters for each key in the row. The example adds a row for numbers 0-9 and a backspace key (represented by the Unicode character \\u2190).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst keyboard = new BABYLON.GUI.VirtualKeyboard();\nkeyboard.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\n```\n```\n\n----------------------------------------\n\nTITLE: Character Animation Setup in Babylon.js\nDESCRIPTION: Sets up initial position and rotation for an imported character model using quaternions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndude.position = new BABYLON.Vector3(-6, 0, 0);\ndude.rotate(BABYLON.Axis.Y, BABYLON.Tools.ToRadians(-95), BABYLON.Space.LOCAL);\nconst startRotation = dude.rotationQuaternion.clone(); //use clone so that variables are independent not linked copies\n```\n\n----------------------------------------\n\nTITLE: Basic Video Recording Implementation\nDESCRIPTION: Demonstrates the simplest way to start recording a scene with default settings of 7 seconds duration and 'babylonjs.webm' filename.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToVideo.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (BABYLON.VideoRecorder.IsSupported(engine)) {\n    var recorder = new BABYLON.VideoRecorder(engine);\n    recorder.startRecording();\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing SPS Intersection Detection with Bounding Spheres in JavaScript\nDESCRIPTION: Creates an SPS with boundingSphereOnly mode enabled for better performance at the cost of reduced accuracy. This limits computation to bounding spheres instead of full bounding boxes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_physics.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar SPS = new SolidParticleSystem(\"sps\", scene, {\n    particleIntersection: true,\n    boundingSphereOnly: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Control of Instanced World Matrix Buffers in Babylon.js\nDESCRIPTION: Shows how to manually update the world matrix instanced buffer for fine-grained control. This approach requires freezing active meshes to avoid discrepancies between stored values and active instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/instances.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.manualUpdateOfWorldMatrixInstancedBuffer = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.worldMatrixInstancedBuffer.set(mat, offset); // mat is the matrix you want to store at the given offset\noffset += 16; (a matrix is composed of 16 floats\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.freezeActiveMeshes(true);\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Normal Calculation with unfreezeNormals in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates calling the unfreezeNormals() method on a mesh instance. This reverses the effect of freezeNormals(), causing normals to be recomputed and reapplied during the next mesh update call (e.g., CreateTube, ExtrudeShape).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/dynamicMeshMorph.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntube.unfreezeNormals();\n```\n\n----------------------------------------\n\nTITLE: Enabling and Customizing Motion Blur in Standard Rendering Pipeline\nDESCRIPTION: These snippets demonstrate how to enable motion blur and customize its strength and quality in the Standard Rendering Pipeline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable motion blur in the pipeline\npipeline.MotionBlurEnabled = true;\n\n// Default value is 1.0. More the motion strength is high, more the blur will be high\npipeline.motionStrength = 0.5;\n\n// Default value is 64.0. This property represents the quality of the effect. More the value is high\n// more the blur will be high quality. 64.0 is enough to have a beautiful result\npipeline.motionBlurSamples = 32.0;\n```\n\n----------------------------------------\n\nTITLE: Assigning ShaderMaterial to a Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates the final step of applying the configured `ShaderMaterial` to a mesh object in the scene. This replaces the mesh's default material with the custom shader.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.material = shaderMaterial;\n```\n\n----------------------------------------\n\nTITLE: Setting Fog Mode in Babylon.js\nDESCRIPTION: This snippet configures the fog effect mode for the scene using the `fogMode` property. It sets the mode to `BABYLON.Scene.FOGMODE_EXP`, which applies fog density based on an exponential function. Other available modes include `FOGMODE_NONE` (default, no fog), `FOGMODE_EXP2` (faster exponential fog), and `FOGMODE_LINEAR` (linear fog density).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/environment_introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.fogMode = BABYLON.Scene.FOGMODE_EXP;\n```\n\n----------------------------------------\n\nTITLE: Manual Video Playback Control in VideoDome\nDESCRIPTION: Example of manually controlling video playback through pointer events. Useful when dealing with browser autoplay restrictions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360VideoDome.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onPointerDown = function () {\n  videoDome.videoTexture.video.play();\n  scene.onPointerDown = null;\n};\n```\n\n----------------------------------------\n\nTITLE: Disposing GUICheckbox in Babylon.js\nDESCRIPTION: Method to properly dispose of a GUICheckbox element and remove it from the DOM. Used for cleanup when the checkbox is no longer needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiCheckbox.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Acceleration\nDESCRIPTION: Defines the acceleration rate for camera movement towards the target position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.cameraAcceleration = 0.005\n```\n\n----------------------------------------\n\nTITLE: Sequencing Mesh Rotations Using addRotation - Babylon.js JavaScript\nDESCRIPTION: Demonstrates applying sequential rotations to a mesh using the addRotation method in Babylon.js, rotating around multiple axes in a specific order (Y, X, Z). Requires a mesh instance and Babylon.js library. Inputs are rotation angles in radians for each axis, with zeros indicating no rotation on that axis. The snippet shows how to cumulatively build transformation by successive function calls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/add_rotations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.addRotation(Math.PI / 2, 0, 0);\nmesh.addRotation(0, 0, Math.PI / 3);\nmesh.addRotation(0, Math.PI / 8, 0);\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimized Smart Filter with Multiple Effects\nDESCRIPTION: Demonstrates creating a complex Smart Filter with black and white and pixelate effects, using SmartFilterOptimizer for optimization and RenderTargetGenerator.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howToUseSmartFilters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a SmartFilter\nconst smartFilter = new SmartFilter(\"BlackAndWhiteAndPixelate\");\nconst logoInput = new InputBlock(smartFilter, \"logo\", ConnectionPointType.Texture, createStrongRef(logoTexture));\nconst blackAndWhite = new BlackAndWhiteBlock(smartFilter, \"blackAndWhite\");\nconst pixelate = new PixelateBlock(smartFilter, \"pixelate\");\nconst pixelateIntensity = new InputBlock(smartFilter, \"intensity\", ConnectionPointType.Float, 0.4);\n\nlogoInput.output.connectTo(blackAndWhite.input);\nblackAndWhite.output.connectTo(pixelate.input);\npixelateIntensity.output.connectTo(pixelate.intensity);\npixelate.output.connectTo(smartFilter.output);\n\n// Create and call the optimizer\nconst optimizer = new SmartFilterOptimizer(smartFilter);\nconst optimizedSmartFilter = optimizer.optimize();\n\n// Create a RenderTargetGenerator with optimization enabled\nconst rtg = new RenderTargetGenerator(true);\n\n// Create the ThinEngine and the SmartFilterRuntime\nconst engine = new ThinEngine(canvas, true);\nconst runtime = await optimizedSmartFilter.createRuntimeAsync(engine, rtg);\n\n// Render one frame\nruntime.render();\n```\n\n----------------------------------------\n\nTITLE: Drawing Arc Through Three Points - Babylon.js - JavaScript\nDESCRIPTION: This code constructs a circular arc passing through exactly three given points in 3D space using BABYLON.Curve3.ArcThru3Points. It allows for specifying the number of points (steps), and optional parameters to close the arc or form a full circle. Returns a Curve3 instance which can be sampled with getPoints() and measured with length(). Prerequisites: BABYLON.Curve3, three Vector3 points, numeric step count.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst arc = BABYLON.Curve3.ArcThru3Points(first, second, third, steps, closed, fullCircle);\n```\n\n----------------------------------------\n\nTITLE: Disabling Energy Conservation in PBR Materials\nDESCRIPTION: Shows how to disable the energy conservation feature in PBR materials when cross-engine rendering compatibility is needed or different lighting behavior is desired.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\npbr.brdf.useEnergyConservation = false;\n```\n\n----------------------------------------\n\nTITLE: Color Correction Post-Process Implementation\nDESCRIPTION: Implements color correction using a look-up table (LUT) texture for filtering. The LUT must be 16x256 pixels containing modified RGB values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.ColorCorrectionPostProcess(\"color_correction\", \"./table.png\", 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Configuring Large-Scale Terrain Parameters in BabylonJS\nDESCRIPTION: Defines parameters for a larger terrain map with increased dimensions and subdivision values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/DTExamples.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapSubX = 500;\nconst mapSubZ = 300;\nconst terrainSub = 100;\n```\n\n----------------------------------------\n\nTITLE: Attaching WebVR Camera Controls\nDESCRIPTION: Demonstrates how to attach WebVR camera controls to the canvas with user interaction handling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Git Commit Commands\nDESCRIPTION: Commands for adding and committing files in Git from different directory locations\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit add path to file/file1.ts path to file/file2.ts path to file/file3.ts\ngit commit path to file/file1.ts path to file/file2.ts path to file/file3.ts -m \"Description of Changes\"\n```\n\n----------------------------------------\n\nTITLE: Proximity Cast Result Properties\nDESCRIPTION: Specific property for ProximityCastResult showing the distance from the hit point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Gets the distance from the hit\n */\nhitDistance: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing UtilityLayerRenderer for Gizmos in Babylon.js Node Render Graph\nDESCRIPTION: This example shows how to use the UtilityLayerRenderer block to display Gizmos in a frame graph. It requires retrieving a reference to the utility layer by code and using it as a parameter for Gizmo classes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBlocks/frameGraphBlocksDescription.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// NRGE code snippet is not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Checking WebXR Support in JavaScript\nDESCRIPTION: Demonstrates how to check if the WebXR Default Experience initialized correctly and handle cases where XR is not supported.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRExperienceHelpers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar defaultXRExperience = await scene.createDefaultXRExperienceAsync( /* optional configuration options */ );\nif (!defaultXRExperience.baseExperience) {\n    // no xr support\n} else {\n    // all good, ready to go\n}\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer Element with Animation Controls\nDESCRIPTION: Example of the HTML3DElement displaying animation controls for models with multiple animations, including play/pause, speed control, and timeline scrubbing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/defaultUI.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Physics Properties for Hand Joints in WebXR with BabylonJS\nDESCRIPTION: Shows how to customize physics properties for hand joint impostors, including impostor type, friction, and restitution. Note that mass is always set to 0 for tracked joints to prevent gravity effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  jointMeshes: {\n    enablePhysics: true,\n    physicsProps: {\n      impostorType: PhysicsImpostor.BoxImpostor,\n      friction: 0.5,\n      restitution: 0.3,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Slider Selector to a Specific Group in a Selection Panel using JavaScript\nDESCRIPTION: This code demonstrates adding a slider selector directly to a group within a `selectBox` object using `addToGroupSlider`. It requires the target group's index (2), slider label (\"Angle X\"), callback (`orientateX`), units (\"degs\"), min value (0), max value (2 * Math.PI), initial value (Math.PI), and a display function (`displayValue`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nselectBox.addToGroupSlider(2, \"Angle X\", orientateX, \"degs\", 0, 2 * Math.PI, Math.PI, displayValue);\n```\n\n----------------------------------------\n\nTITLE: Using a GetVariable Block for Console Logging in JavaScript Flow Graph\nDESCRIPTION: This example builds upon the previous one by introducing a `FlowGraphGetVariableBlock`. Instead of setting the log message directly, it retrieves the message from a variable named 'sceneReadyLogMessage' stored within the graph's context. This allows the message to be potentially reused or modified elsewhere. The `value` output of the `getVariableBlock` is connected to the `message` input of the `log` block.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphExamples.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst coord = new FlowGraphCoordinator({ scene });\nconst graph = coord.createGraph();\ngraph.createContext();\nconst sceneReady = new FlowGraphSceneReadyEventBlock();\ngraph.addEventBlock(sceneReady);\n\nconst log = new FlowGraphConsoleLogBlock();\nconst getVariableBlock = new FlowGraphGetVariableBlock({\n  variable: \"sceneReadyLogMessage\",\n  initialValue: \"Hello Scene\",\n});\nlog.message.connectTo(getVariableBlock.value);\nsceneReady.done.connectTo(log.in);\n\ncoord.start();\n```\n\n----------------------------------------\n\nTITLE: Defining IDATA Structure for Icosahedron\nDESCRIPTION: Initializes the icosahedron data structure with vertices, faces, and edge matching information for geodesic calculations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst IDATA = { \n    \"name\":\"icosahedron\", \n    \"category\":[\"Regular\"], \n    \"edgematch\": [ [1, \"B\"], [2, \"B\"], [3, \"B\"], [4, \"B\"], [0, \"B\"], [10, \"O\", 14, \"A\"], [11, \"O\", 10, \"A\"], [12, \"O\", 11, \"A\"], [13, \"O\", 12, \"A\"], [14, \"O\", 13, \"A\"], [0, \"O\"], [1, \"O\"], [2, \"O\"], [3, \"O\"], [4, \"O\"], [19, \"B\", 5, \"A\"], [15, \"B\", 6, \"A\"], [16, \"B\", 7, \"A\"], [17, \"B\", 8, \"A\"], [18, \"B\", 9, \"A\"] ],\n    \"vertex\":[ [0, PHI, -1], [-PHI, 1, 0], [-1, 0, -PHI], [1, 0, -PHI], [PHI, 1, 0], [0, PHI, 1], [-1, 0, PHI], [-PHI, -1, 0], [0, -PHI, -1], [PHI, -1, 0], [1, 0, PHI], [0, -PHI, 1]],\n    \"face\":[\n        [ 0, 2, 1 ], [ 0, 3, 2 ], [ 0, 4, 3 ], [ 0, 5, 4 ], [ 0, 1, 5 ],\n        [ 7, 6, 1 ],[ 8, 7, 2 ], [ 9, 8, 3 ], [ 10, 9, 4 ], [ 6, 10, 5 ],\n        [ 2, 7, 1 ], [ 3, 8, 2 ],[ 4, 9, 3 ], [ 5, 10, 4 ], [ 1, 6, 5 ],\n        [ 11, 6, 7 ], [ 11, 7, 8 ], [ 11, 8, 9 ], [ 11, 9, 10 ], [ 11, 10, 6 ]\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Building Node Material with Error Handling\nDESCRIPTION: Shows how to build a Node Material with error handling using try-catch block\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  nodeMaterial.build(true);\n} catch (err) {\n  console.log(\"Unable to compile because \" + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Terrain Construction with Color Map in BabylonJS\nDESCRIPTION: Shows how to initialize a dynamic terrain with color map data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 100;\nconst params = {\n  mapData: mapData,\n  mapSubX: mapSubX,\n  mapSubZ: mapSubZ,\n  mapColors: mapColors,\n  terrainSub: terrainSub,\n};\nconst terrain = new BABYLON.DynamicTerrain(\"t\", params, scene);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Light Intensity\nDESCRIPTION: Reduces the intensity of the hemispheric light to make spotlight effects more visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/lights.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlight.intensity = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Defining a Grid Layout with Rows and Columns in Babylon.js GUI XML\nDESCRIPTION: This code defines a complex Babylon.js GUI layout using a grid structure, with Row and Column elements for positioning. The first row sets the column schema, and subsequent rows can provide fewer columns. Used for dynamic tabular layouts within Babylon GUI XML files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Grid id=\\\"grid\\\" name=\\\"grid\\\" top=\\\"50px\\\" background=\\\"black\\\" height=\\\"200px\\\" width=\\\"200px\\\">\\n        <Row height=\\\"0.5\\\" >\\n            <Column width=\\\"0.2\\\">\\n            </Column>\\n            <Column width=\\\"0.5\\\">\\n                <Rectangle id=\\\"1rect\\\" thickness=\\\"0\\\" name=\\\"1rect\\\" background=\\\"green\\\"></Rectangle>\\n            </Column>\\n        </Row>\\n        <Row height=\\\"0.5\\\">\\n            <Column>\\n            </Column>\\n            <Column>\\n                <Rectangle id=\\\"2rect\\\" thickness=\\\"0\\\" name=\\\"2rect\\\" background=\\\"red\\\" ></Rectangle>\\n            </Column>\\n        </Row>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Initializing XRService in BabylonJS Application\nDESCRIPTION: Code to initialize the XRService object with a BabylonJS scene and configuration options. This is required before using any WebXR features provided by the package.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/webxrextension.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst xrService = new XRService();\nawait xrService.init(scene, options);\n```\n\n----------------------------------------\n\nTITLE: Embedding a Babylon.js NME Example using NME Tag\nDESCRIPTION: This HTML-like tag is used within the Babylon.js documentation to embed a Node Material Editor (NME) example. The `id` attribute references a specific NME graph (#98NGSE), while `title` and `description` provide context for the embedded example, which demonstrates the `ReplaceColor` block.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/availableNodeBlocks.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<NME id=\"#98NGSE\" title=\"Replace Color Block Example\" description=\"Simple Replace Color block example.\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiPointerScaleBehavior in BabylonJS\nDESCRIPTION: Creates a scaling behavior that responds to two pointer inputs like fingers or VR controllers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/meshBehaviors.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst multiPointerScaleBehavior = new BABYLON.MultiPointerScaleBehavior();\n```\n\n----------------------------------------\n\nTITLE: Checking Radio Button State\nDESCRIPTION: Method to check if the radio button is in checked state\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiRadio.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisChecked() → void\n```\n\n----------------------------------------\n\nTITLE: Animating LinearCloner Properties in BabylonJS\nDESCRIPTION: Demonstrates how to animate the LinearCloner's offset property using BabylonJS animation system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/linearCloner.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Animation.CreateAndStartAnimation('ani', lc, 'offset', 30, 120, 0, 10);\n```\n\n----------------------------------------\n\nTITLE: Setting Basic UV Coordinates for Face Sprites in Babylon.js\nDESCRIPTION: Sets UV coordinates for a sprite on a face using Vector4 to define bottom left and top right coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[1] = new BABYLON.Vector4(Ubottom_left, Vbottom_left, Utop_right, Vtop_right);\n```\n\n----------------------------------------\n\nTITLE: Optimizing GUI Rendering with Bitmap Cache and Invalidate Rect in Babylon.js (JavaScript)\nDESCRIPTION: Explains how to enable rendering optimizations for complex GUI controls in Babylon.js. Setting 'useBitmapCache' on a control caches its render output for reuse, improving performance. The 'useInvalidateRectOptimization' property on the AdvancedDynamicTexture lets the system update only necessary texture regions, with the option to disable it for full re-rendering. These features are relevant for GUIs with high frequency updates or complex visuals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontrol.useBitmapCache = true;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nadtTexture.useInvalidateRectOptimization = false;\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer Element with Hotspots\nDESCRIPTION: Example of the HTML3DElement implementing hotspot navigation controls for camera focus on specific points of interest.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/defaultUI.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Configuration Payload and Mapper to BabylonJS Viewer - HTML\nDESCRIPTION: This code shows how to pass a configuration payload in a custom format and specify a custom parser (mapper) in the BabylonJS Viewer HTML element. The 'configuration.payload' is given as a URL-encoded form string, while 'configuration.mapper' is set to 'form', indicating the Viewer should use a registered 'form' mapper to process the payload. The snippet includes various model and UI-related attributes. This example assumes the developer has registered a compatible parser for 'form' style payloads. Custom mappers must be implemented and registered separately before using this method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<babylon\n  configuration.payload=\"scene.debug=true&engine.antialiasing=true\"\n  configuration.mapper=\"form\"\n  model.title=\"Damaged Helmet\"\n  model.subtitle=\"BabylonJS\"\n  model.thumbnail=\"https://www.babylonjs.com/img/favicon/apple-icon-144x144.png\"\n  model.url=\"https://www.babylonjs.com/assets/DamagedHelmet/glTF/DamagedHelmet.gltf\"\n  camera.behaviors.auto-rotate=\"0\"\n  templates.nav-bar.params.disable-on-fullscreen=\"true\"\n></babylon>\n```\n\n----------------------------------------\n\nTITLE: Creating Pine Tree with SimplePineGenerator in Babylon.js\nDESCRIPTION: Function call to generate a simple pine tree using the SimplePineGenerator extension. The function takes parameters for number of canopies, tree height, materials for trunk and leaves, and the Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/treeGenerators/simplePineGenerator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = simplePineGenerator(canopies, height, trunkMaterial, leafMaterial, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Fur Material in Babylon.js\nDESCRIPTION: Instantiates a new fur material and applies it to a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar furMaterial = new BABYLON.FurMaterial(\"fur_material\", scene);\n\nground.material = furMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating Spotlight in BabylonJS\nDESCRIPTION: Creates a spotlight with specified position, direction, spread angle, and dissipation speed. Sets the light color to yellow.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/lights.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lampLight = new BABYLON.SpotLight(\"name\", position, direction, angle_of_spread, speed_of_disipation);\nlampLight.diffuse = BABYLON.Color3.Yellow();\n```\n\n----------------------------------------\n\nTITLE: Debugging TypeScript Code in VSCode\nDESCRIPTION: Example of using the debugger statement in TypeScript code for debugging scenes in the Babylon.js Editor. The code can be debugged by placing breakpoints or using the 'debugger' statement and pressing F5 in VSCode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/running/runningProject.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndebugger;\n```\n\n----------------------------------------\n\nTITLE: Batch Converting Images to KTX Formats using Batch (DOS)\nDESCRIPTION: This refers to the `ktx-batch.bat` script, which is generated by `make-ktx-batch.bat`. Running this script executes the PVRTexToolCLI command-line utility to convert JPG and PNG images in the current directory into various compressed KTX texture formats (ASTC, DXT, PVRTC, ETC2, ETC1), appending suffixes like '-astc.ktx'. It automatically handles alpha channel requirements based on the source image extension (.PNG indicating alpha needed).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/mutliPlatTextures.md#2025-04-23_snippet_2\n\nLANGUAGE: batchfile\nCODE:\n```\nktx-batch.bat\n```\n\n----------------------------------------\n\nTITLE: Creating a PhotoDome in Babylon.js using 360° Equirectangular Maps\nDESCRIPTION: Code snippet for initializing a PhotoDome in Babylon.js using equirectangular textures. The PhotoDome constructor takes the texture name, file path, configuration options for resolution and size, and the scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.PhotoDome(\"textureName\", \"textures/filename\", { resolution: 32, size: 1000 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Handling Asset Loading Completion with AssetsManager.onFinish in JavaScript\nDESCRIPTION: Shows how to define the `onFinish` callback function for the `BABYLON.AssetsManager`. This function is executed once all added tasks (like loading the particle system JSON file) have successfully completed. The `task` parameter contains information about the completed tasks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_loadFromFile.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nassetsManager.onFinish = function (task) {\n    console.log(\"task successful\", task);\n\n    // prepare to parse particle system files\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing Cell Material in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to create a new Cell Material, set up a diffuse texture, configure the diffuse color, and set the computation level. The Cell Material allows for up to 5 different lighting levels when set to high level computation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/cellShadingMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new cell material\nvar cell = new BABYLON.CellMaterial(\"cell\", scene);\n\n// Set up the diffuse texture\ncell.diffuseTexture = new BABYLON.Texture(\"textures/amiga.jpg\", scene);\n\n// Set up diffuse color\ncell.diffuseColor = new BABYLON.Color3(1, 0.5, 0);\n\n// Set the material to be high level (default value is true)\n// The high level can compute until 5 different lighting levels\n// If false, only two levels are available\ncell.computeHighLevel = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in Babylon.js Flow Graph Context (JavaScript)\nDESCRIPTION: Demonstrates how to enable verbose logging on a Flow Graph context. Setting `enableLogging` to `true` activates detailed logging of actions and connection values within the context, which is useful for debugging.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = graph.createContext();\nctx.enableLogging = true;\n```\n\n----------------------------------------\n\nTITLE: Basic MeshWriter Initialization and Text Creation in BabylonJS\nDESCRIPTION: Demonstrates basic usage of MeshWriter to create 3D text with basic styling options including scale, anchoring, height, and color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/meshWriter.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWriter = BABYLON.MeshWriter(scene, { scale: scale });\ntext1 = new Writer(\"ABC\", {\n  anchor: \"center\",\n  \"letter-height\": 50,\n  color: \"#1C3870\",\n  position: {\n    z: 20\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Normal Computation for Terrain in JavaScript\nDESCRIPTION: This snippet shows how to enable dynamic normal computation for a terrain. This is useful for scenarios where the terrain is dynamically morphing and normals need to be recomputed on each update.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.computeNormals = true; // default false, to skip the normal computation\n```\n\n----------------------------------------\n\nTITLE: Ray Casting for Hit Point\nDESCRIPTION: Creates and uses a ray to find intersection point with mesh surface\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/InnerMeshPoints.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar boundInfo = mesh.getBoundingInfo();\nvar diameter = 2 * boundInfo.boundingSphere.radius;\n\nvar ray = new BABYLON.Ray(facetPoint, direction, diameter);\nvar hitPoint = ray.intersectsMesh(mesh).pickedPoint;\n```\n\n----------------------------------------\n\nTITLE: Implementing Walking Locomotion with WebXRCamera\nDESCRIPTION: Demonstrates how to implement walking locomotion using the WebXRCamera directly as the locomotion target.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRMovement.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultXRExperienceAsync({ disableTeleportation: true }).then((xr) => {\n  xr.baseExperience.featuresManager.enableFeature(BABYLON.WebXRFeatureName.WALKING_LOCOMOTION, \"latest\", { locomotionTarget: xr.baseExperience.camera.parent });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babylon Viewer with Minimal UI and Certified Rendering\nDESCRIPTION: This HTML snippet demonstrates the final configuration of the Babylon Viewer for the Vaporwear site. It includes switching to the preview version of the Babylon Viewer script via CDN and configuring the `<babylon>` tag to use a specific model (`vaporwearBox.glb`), extend the minimal UI configuration, hide the default logo and fullscreen button (`logo=\"false\"`, `fullscreen=\"false\"`), and enable Khronos 3D Commerce certified rendering settings (`3d-commerce-certified`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearViewer.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Switch to preview CDN for latest features -->\n<script src=\"https://preview.babylonjs.com/viewer/babylon.viewer.js\"></script>\n\n<!-- Configure the viewer -->\n<babylon \n    extends=\"minimal-ui\" \n    model=\"url/to/vaporwearBox.glb\" \n    logo=\"false\" \n    fullscreen=\"false\" \n    3d-commerce-certified\n></babylon>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current LOD Value in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the current global LOD factor, which is the sum of the initial LOD value and any camera LOD corrections. Higher values indicate lower terrain detail.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst lod = terrain.LODValue;\n```\n\n----------------------------------------\n\nTITLE: Changing Start Size Over Duration in Babylon.js Particle System\nDESCRIPTION: This snippet shows how to change the start size of particles over the duration of a particle system. It sets a target stop duration and adds start size gradients at the beginning and end of the system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.targetStopDuration = 8;\n\nparticleSystem.addStartSizeGradient(0, 0.25); //start size at start of particle system\nparticleSystem.addStartSizeGradient(1, 1.5); //start size at end of particle system\n```\n\n----------------------------------------\n\nTITLE: Creating Sphere and Path Lines in Babylon.js\nDESCRIPTION: Demonstrates creation of a sphere mesh and a series of connected lines forming a triangle path using MeshBuilder.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 0.25});\n\n//end points for the line sequence in an array\n//y component can be non zero\nconst points = [];\npoints.push(new BABYLON.Vector3(2, 0, 2));\npoints.push(new BABYLON.Vector3(2, 0, -2));\npoints.push(new BABYLON.Vector3(-2, 0, -2));\npoints.push(points[0]); //close the triangle;\n\nBABYLON.MeshBuilder.CreateLines(\"triangle\", {points: points})\n```\n\n----------------------------------------\n\nTITLE: Loading Base64 Encoded Models in JavaScript\nDESCRIPTION: Demonstrates how to load a base64 encoded model file directly using a Data URL. It shows the minimum format required for the base64 encoded data URL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndata:;base64,<base64_encoded_file_contents>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Columns in Babylon.js\nDESCRIPTION: Example of setting up grid columns with fixed pixel widths and percentage-based widths.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.addColumnDefinition(100, true);\ngrid.addColumnDefinition(0.5);\ngrid.addColumnDefinition(0.5);\ngrid.addColumnDefinition(100, true);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Baked Vertex Animations in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a VertexAnimationBaker, generate a texture from animation data, and apply it to a mesh. It includes setting animation parameters and updating the animation time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/baked_texture_animations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet baker = null,\n  mesh = null;\nconst animationRanges = [{ from: 1, to: 20, name: \"My animation\" }];\nBABYLON.ImportMeshAsync(\"https://raw.githubusercontent.com/RaggarDK/Baby/baby/arr.babylon\", scene, undefined)\n  .then((importResult) => {\n    mesh = importResult.meshes[0];\n    // create the baker helper, so we can generate the texture\n    baker = new BABYLON.VertexAnimationBaker(scene, mesh);\n    // you can slice the animation here with several animation ranges.\n    return baker.bakeVertexData(ranges);\n  })\n  .then((vertexData) => {\n    // we got the vertex data. create the texture from it:\n    const vertexTexture = baker.textureFromBakedVertexData(vertexData);\n    // create a manager to store it.\n    const manager = new BABYLON.BakedVertexAnimationManager(scene);\n    // store the texture\n    manager.texture = vertexTexture;\n\n    // set the animation parameters. You can change this at any time.\n    manager.setAnimationParameters(\n      animationRanges[0].from, // initial frame\n      animationRanges[0].to, // last frame\n      0, // offset\n      30, // frames per second\n    );\n\n    // associate the manager with the mesh\n    mesh.bakedVertexAnimationManager = manager;\n\n    // update the time to play the animation\n    scene.registerBeforeRender(() => {\n      manager.time += engine.getDeltaTime() / 1000.0;\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Sprite Picking\nDESCRIPTION: Example of picking multiple overlapping sprites and rotating all selected sprites.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/picking_sprites.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pickResult = scene.multiPickSprite(this.pointerX, this.pointerY);\nfor (let i = 0; i < pickResult.length; i++) {\n    \tpickResult[i].pickedSprite.angle += Math.PI / 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Meshes from GlowLayer in Babylon.js\nDESCRIPTION: Demonstrates how to exclude specific meshes from the glow effect using the addExcludedMesh function. This allows for selective application of the glow effect in a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/glowLayer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new BABYLON.GlowLayer(\"glow\", scene);\ngl.addExcludedMesh(mesh);\n```\n\n----------------------------------------\n\nTITLE: Setting Three-Tier Perimetric LOD in JavaScript\nDESCRIPTION: This code creates a three-tier LOD system for terrain edges with thresholds at 1, 2, and 4 subdivisions from the edge. Each threshold adds an increment to the LOD value for those terrain sections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.LODLimits = [1, 2, 4];\n```\n\n----------------------------------------\n\nTITLE: Enabling Exponential Shadow Map Filtering (JavaScript)\nDESCRIPTION: This snippet activates exponential shadow map filtering in Babylon.js. It aims to reduce shadow aliasing by setting 'useExponentialShadowMap' to true. The default is true, but it can be disabled for performance if needed. For further tuning, the 'depthScale' property can be changed to better fit the scene’s depth range.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.useExponentialShadowMap = true;\n```\n\n----------------------------------------\n\nTITLE: Creating YouTube Video HtmlMesh\nDESCRIPTION: Creates an HTML mesh containing a YouTube video iframe with specific dimensions and positioning in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/addons/htmlMesh.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst videoUrl = [\"https://www.youtube.com/embed/\", videoId, \"?rel=0&enablejsapi=1&disablekb=1&controls=0&fs=0&modestbranding=1\"].join(\"\");\nconst htmlMeshVideo = new HtmlMesh(scene, \"html-mesh-video\");\nconst iframeVideo = document.createElement(\"iframe\");\niframeVideo.src = videoUrl;\niframeVideo.width = \"480px\";\niframeVideo.height = \"360px\";\nhtmlMeshVideo.setContent(iframeVideo, 4, 3);\nhtmlMeshVideo.position.x = 3;\nhtmlMeshVideo.position.y = -2;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Populating a Selection Panel in JavaScript\nDESCRIPTION: Shows how to create an `AdvancedDynamicTexture`, instantiate a `SelectionPanel`, set its properties (width, height, alignment), add it to the texture, and subsequently add pre-defined groups (`rotateGroup`, `transformGroup`, `colorGroup`) using the `addGroup` method. Each group is added below the previous one.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\nconst selectBox = new BABYLON.GUI.SelectionPanel(\"selectBox\");\nselectBox.width = 0.25;\nselectBox.height = 0.52;\nselectBox.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\nselectBox.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n\nadvancedTexture.addControl(selectBox);\n\nselectBox.addGroup(rotateGroup);\nselectBox.addGroup(transformGroup);\nselectBox.addGroup(colorGroup);\n```\n\n----------------------------------------\n\nTITLE: Applying Impulse to a Ragdoll Bone Aggregate in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to interact with a specific part of the ragdoll. It retrieves the physics aggregate associated with a bone (using its index, e.g., 0) via `getAggregate`. If the aggregate exists, it accesses its physics body (`body`) and applies an impulse using `applyImpulse`, specifying the impulse vector and the application point (relative to the body's center of mass).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/ragdolls.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nragdoll.getAggregate(0)?.body.applyImpulse(new BABYLON.Vector3(200,200,200), BABYLON.Vector3.ZeroReadOnly);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type Mismatch Error in GLSL\nDESCRIPTION: This GLSL code snippet provides an example of incorrect variable assignment that would cause a compilation error. Assigning an integer literal (`2`) to a variable declared as `float` without specifying it as a float (e.g., `2.0`) violates GLSL's strict typing rules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/introToShaders.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\nfloat r = 2;\n```\n\n----------------------------------------\n\nTITLE: Customizing Motion Blur Strength in Babylon.js\nDESCRIPTION: Adjust the intensity of the motion blur effect by modifying the motionStrength property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/motionBlurPostProcess.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmotionblur.motionStrength = 2; // double the blur effect\n```\n\n----------------------------------------\n\nTITLE: Implementing the createSection Logic for Track Building in Babylon.js (JavaScript)\nDESCRIPTION: This function calculates the geometric data for a single section of a track. It takes the full array of `points`, the `startSection` data (defining behavior for this section), and `endSection` data (providing target lean/turn values). It iterates through the 'rails' (segments between points) in the section, calculates rail direction, swivel, and tilt, then applies lean and turn based on section options (including twists and waves) using Babylon.js matrix and vector operations. It populates the `directions`, `rotations`, `carriageRotations`, and `passengerRotations` arrays (assumed to be defined in the outer scope or passed implicitly). Dependencies include `BABYLON.Matrix`, `BABYLON.Vector3`, and `BABYLON.Axis`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track_Code.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createSection(points, startSection, endSection) {\n  /***** Calculate the number of rails for the section *****/\n  var railsFrom = startSection.start; //index of start of section\n  var railsTo = endSection.start; //index of end of section\n  if (endSection.start === 0) {\n    railsTo = points.length;\n  }\n\n  var nbRails = railsTo - railsFrom;\n\n  /***** Set the defaults for the section *****/\n  var initialLean = startSection.options.lean === void 0 ? 0 : startSection.options.lean; //lean of carriage about direction axis at start, a phi variable\n  var initialTurn = startSection.options.turn === void 0 ? 0 : startSection.options.turn; // turn of carriage around upright at start, a theta variable\n  var leanTwists = startSection.options.leanTwists === void 0 ? 0 : startSection.options.leanTwists; //number of  lean twists (+ve counter clockwise, -ve clockwise)\n  var leanWaves = startSection.options.leanWaves === void 0 ? 0 : startSection.options.leanWaves; //number of lean waves\n  var leanWaveAngle = startSection.options.leanWaveAngle === void 0 ? 0 : startSection.options.leanWaveAngle; //angle for lean wave\n  var turnTwists = startSection.options.turnTwists === void 0 ? 0 : startSection.options.turnTwists; //number of  turn twists (+ve counter clockwise, -ve clockwise)\n  var turnWaves = startSection.options.turnWaves === void 0 ? 0 : startSection.options.turnWaves; //number of turn waves\n  var turnWaveAngle = startSection.options.turnWaveAngle === void 0 ? 0 : startSection.options.turnWaveAngle; //angle for turn wave\n\n  var finalLean = endSection.options.lean === void 0 ? 0 : endSection.options.lean;\n  var finalTurn = endSection.options.turn === void 0 ? 0 : endSection.options.turn;\n\n  /***** Check if both waves and  twists are used and ignore twists when so  *****/\n  //lean waves supersede lean twists unless leanWaveAngle = 0\n  if (leanWaves > 0 && Math.abs(leanTwists) > 0) {\n    if (leanWaveAngle == 0) {\n      leanWaves = 0;\n    } else {\n      leanTwists = 0;\n    }\n  }\n\n  //turn waves supersede turn twists unless turnWaveAngle = 0\n  if (turnWaves > 0 && Math.abs(turnTwists) > 0) {\n    if (turnWaveAngle == 0) {\n      turnWaves = 0;\n    } else {\n      turnTwists = 0;\n    }\n  }\n\n  /***** Initiate the variables and their types *****/\n  //rail transformation matrices for swivel and tilt rotations\n  var rotationMatrixY = BABYLON.Matrix.Identity();\n  var rotationMatrixZ = BABYLON.Matrix.Identity();\n  var rotationMatrix = BABYLON.Matrix.Identity();\n\n  var m = BABYLON.Matrix.Identity();\n  var initialRailDirection = BABYLON.Axis.X;\n  var initialUprightDirection = BABYLON.Axis.Y;\n  var initialLevelDirection = BABYLON.Axis.Z;\n  var railDirection = BABYLON.Vector3.Zero();\n  var uprightDirection = BABYLON.Vector3.Zero(); //contains vector normal to rail direction after tilt\n  var levelDirection = BABYLON.Vector3.Zero(); //contains vector normal to rail direction after swivel\n  var leanDirection = BABYLON.Vector3.Zero(); // contains vector normal to rail direction after tilt, swivel and lean\n  var turnDirection = BABYLON.Vector3.Zero();\n  var carriageNormal = BABYLON.Vector3.Zero();\n  var rotationMatrixLean = BABYLON.Matrix.Identity();\n  var rotationMatrixTurn = BABYLON.Matrix.Identity();\n  var rotationMatrixPassenger = BABYLON.Matrix.Identity();\n  var initialPosition = BABYLON.Vector3.Zero();\n  var rotation = BABYLON.Matrix.Identity(); //Overall rotation after tilt, swivel, lean and turn\n\n  var tilt = 0; //tilt angle of rail after rotation about (0, 0, 1)\n  var swivel = 0; //swivel angle of rail after rotation around (0, 1, 0)\n\n  var railCount = 0; // determines how many rails along a section, used to control wave values\n\n  //Set calculated values for variables\n  var phi = initialLean;\n  var theta = initialTurn;\n\n  var gradLean = (finalLean - initialLean) / (nbRails - 1); // lean gradient\n  var gradTurn = (finalTurn - initialTurn) / (nbRails - 1); // turn gradient\n\n  var deltaPhi = (finalLean + 2 * leanTwists * Math.PI - initialLean) / nbRails; //increase in phi per rail for lean twist\n  var deltaTheta = (finalTurn + 2 * turnTwists * Math.PI - initialTurn) / nbRails; //increase in theta per rail for lean twist\n\n  /***** Loop over rails in section*****/\n\n  for (let i = railsFrom; i < railsTo; i++) {\n    points[(i + 1) % points.length].subtractToRef(points[i], railDirection); //direction of each rail\n    railDirection.normalize();\n    swivel = -Math.atan2(railDirection.z, railDirection.x); //swivel angle rail makes in xz plane\n    tilt = Math.atan2(Math.abs(railDirection.y), Math.abs(railDirection.x)); // tilt angle rail makes in first quadrant of xy plane\n    tilt *= Math.sign(railDirection.y); //tilt angle of rail in xy plane from -pi/2 to pi/2\n    BABYLON.Matrix.RotationAxisToRef(BABYLON.Axis.Y, swivel, rotationMatrixY); //swivel angle to matrix rotation\n    BABYLON.Matrix.RotationAxisToRef(BABYLON.Axis.Z, tilt, rotationMatrixZ); //tilt angle to matrix rotation\n    rotationMatrixZ.multiplyToRef(rotationMatrixY, rotationMatrix); // form combined swivel and tilt matrix\n    BABYLON.Vector3.TransformNormalToRef(initialUprightDirection, rotationMatrix, uprightDirection); //swivel, tilt act on carriage upright\n    BABYLON.Vector3.TransformNormalToRef(initialLevelDirection, rotationMatrix, levelDirection); //swivel, tilt act on carriage level\n    uprightDirection.normalize();\n    levelDirection.normalize();\n\n    if (leanWaves > 0) {\n      phi = initialLean + railCount * gradLean + leanWaveAngle * Math.sin((railCount * leanWaves * Math.PI) / (nbRails - 1));\n    } else {\n      phi += deltaPhi;\n    }\n    if (turnWaves > 0) {\n      theta = initialTurn + railCount * gradTurn + turnWaveAngle * Math.sin((railCount * turnWaves * Math.PI) / (nbRails - 1));\n    } else {\n      theta += deltaTheta;\n    }\n    railCount++;\n    BABYLON.Matrix.RotationAxisToRef(railDirection, phi, rotationMatrixLean); // lean matrix\n    BABYLON.Vector3.TransformNormalToRef(uprightDirection, rotationMatrixLean, carriageNormal); // lean applied to upright\n    BABYLON.Matrix.RotationAxisToRef(carriageNormal, theta, rotationMatrixTurn); // turn applied to upright after lean\n\n    BABYLON.Matrix.RotationAxisToRef(initialUprightDirection, theta, rotationMatrixPassenger); //just turn applied to upright\n    passengerRotations.push(rotationMatrixPassenger.clone());\n\n    rotationMatrix.multiplyToRef(rotationMatrixLean, rotation); //rotation from swivel, tilt, and lean only\n    carriageRotations.push(rotation.clone());\n    rotation.multiplyToRef(rotationMatrixTurn, rotation); //complete rotation from swivel, tilt, lean and turn\n    rotations.push(rotation.clone());\n\n    directions.push(railDirection.clone());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Options for threeSixty in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable and configure the 'threeSixty' plugin by specifying its options, including 'hardwareScalingLevel', within a JavaScript options object. Dependencies include the core environment where the plugin system is recognized and a context in which the 'plugins' top-level object is consumed. The 'hardwareScalingLevel' parameter controls rendering scale for performance or quality; expected input is a numeric value between 0 and 1. The output is the proper configuration of the plugin in the host environment. Ensure that the code runs in the correct context where the plugins property is consumed by the host framework.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    \"threeSixty\": {\n        hardwareScalingLevel: 0.5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Receiver in Babylon.js\nDESCRIPTION: Configures a mesh to receive shadows cast by shadow casters in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/shadows.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreceiving_mesh.receiveShadows = true\n```\n\n----------------------------------------\n\nTITLE: Starting All Flow Graphs via Coordinator in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows invoking the 'start' method on a FlowGraphCoordinator, which begins running all graphs managed by the coordinator. It assumes that graphs have already been created and associated with the coordinator. The coordinator integrates tightly with Babylon.js scene lifecycle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncoordinator.start();\n```\n\n----------------------------------------\n\nTITLE: Debugging Navigation Mesh Visualization\nDESCRIPTION: Creates a visual debug representation of the navigation mesh with semi-transparent material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/createNavMesh.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavmeshdebug = navigationPlugin.createDebugNavMesh(scene);\nconst matdebug = new BABYLON.StandardMaterial(\"matdebug\", scene);\nmatdebug.diffuseColor = new BABYLON.Color3(0.1, 0.2, 1);\nmatdebug.alpha = 0.2;\nnavmeshdebug.material = matdebug;\n```\n\n----------------------------------------\n\nTITLE: Checking Radio Button Visibility\nDESCRIPTION: Method to check if the radio button is currently visible\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiRadio.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Setting Diffuse Texture in Background Material\nDESCRIPTION: Demonstrates how to add a diffuse texture to a background material in Babylon.js\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbackgroundMaterial.diffuseTexture = new BABYLON.Texture(\"textures/grass.jpg\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Wheel Joint Using Hinge2Joint Helper\nDESCRIPTION: Example of creating a wheel joint using the Hinge2Joint helper class. Note that when used with Ammo.js, this creates a BallAndSocketJoint instead of a WheelJoint.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/joints.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar joint1 = new BABYLON.Hinge2Joint(jointData);\n```\n\n----------------------------------------\n\nTITLE: Disposing a GUIGroup in BabylonJS\nDESCRIPTION: Method to dispose the GUIGroup and delete all elements contained within the group.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiGroup.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Adjusting FOV Multiplier in VideoDome\nDESCRIPTION: Setting the field of view multiplier for the video dome. Only works when useDirectMapping is false. Value range is 0.0 to 2.0.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360VideoDome.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvideoDome.fovMultiplier = newValue;\n```\n\n----------------------------------------\n\nTITLE: Counter-Clockwise Vector Rotation About Any Point\nDESCRIPTION: Formula for S⁺, a counter-clockwise 60° rotation of position vector xi⃗ + yj⃗ about point ai⃗ + bj⃗ on an isometric grid. The rotation is performed by translating to origin, rotating, and translating back.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_3\n\nLANGUAGE: math\nCODE:\n```\nS⁺(xi⃗ + yj⃗, ai⃗ + bj⃗) = R⁺((xi⃗ + yj⃗) - (ai⃗ + bj⃗)) + ai⃗ + bj⃗ = R⁺((x - a)i⃗) + (y - b)j⃗) + ai⃗ + bj⃗ = -(y - b)i⃗ + ((x - a) + (y - b))j⃗ + ai⃗ + bj⃗ = (a + b - y)i⃗ + (x + y - a)j⃗\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Support in Maya for Babylon.js Export\nDESCRIPTION: This code snippet details the material features supported by the Babylon.js Maya exporter. It includes standard materials (Lambert, Phong, etc.), PBR materials, and various material properties like color, transparency, and textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Maya.md#2025-04-23_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n- _Materials_\n\n  - Standard materials (Lambert, Phong, PhongE and Blinn)\n      - Color\n      - Transparency\n\n  - Ambient color\n    _ Bump mapping\n    _ Specular color and power\n    _ Reflected color\n    _ PBR materials (Stingray PBS, AiStandardSurface)\n    _ Base color & opacity\n    _ Normal\n    _ Metallic\n    _ Roughness\n    _ Emissive\n        _ Multi-materials\n    _ Double sided materials\n    _ Unlit\n    _ Backface culling\n    _ Max Simultaneous Lights\n    _ Opacity/Transparency mode\n    _ Custom attributes\n```\n\n----------------------------------------\n\nTITLE: Transferring Light Data to Effect\nDESCRIPTION: Updates an Effect object with HemisphericLight direction and color data. Normalizes direction and updates uniform buffer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Sets the passed Effect object with the HemisphericLight normalized direction and color and the passed name (string).\n * @param effect The effect to update\n * @param lightIndex The index of the light in the effect to update\n * @returns The hemispheric light\n */\npublic transferToEffect(effect: Effect, lightIndex: string): HemisphericLight {\n    const normalizeDirection = Vector3.Normalize(this.direction);\n    this._uniformBuffer.updateFloat4(\"vLightData\",\nnormalizeDirection.x,\nnormalizeDirection.y,\nnormalizeDirection.z,\n0.0,\nlightIndex);\n    this._uniformBuffer.updateColor3(\"vLightGround\", this.groundColor.scale(this.intensity), lightIndex);\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Key Frames in Babylon.js\nDESCRIPTION: Creates an array of key frames that define how a property changes over time. Each key frame consists of a frame number and the value that the animated property should have at that frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myKeys = [\n  {\n    frame: 0,\n    value: 0.5,\n  },\n  {\n    frame: 60,\n    value: 1.0,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Setting GUISpinner Visibility in Babylon.js\nDESCRIPTION: Demonstrates how to set the visibility of the GUISpinner element, with an optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSpinner.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade)\n```\n\n----------------------------------------\n\nTITLE: Creating a MatrixCloner with Multiple Meshes in Babylon.js\nDESCRIPTION: Initializes a MatrixCloner with two meshes (cube1 and cube2) and distributes 5x5x5 clones in a matrix pattern. The constructor takes an array of meshes, scene reference, and configuration options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/matrixCloner.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mc = new BABYLONX.MatrixCloner([cube1, cube2], demo.scene, { mcount: { x: 5, y: 5, z: 5 } });\n```\n\n----------------------------------------\n\nTITLE: Calculating Facet Isometric Coordinates in Markdown\nDESCRIPTION: This snippet explains how to determine the isometric coordinates (x, y) for facet vertices within the primary triangle of GD(m, n). It covers the positioning of vertices, rotational symmetry, and the constraints for valid coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nO is (0, 0), A is (m, n) and B is (-n, m + n)\n\nD = R<sup>C+</sup>(0, n) = (m - n, n) and   \nE = R<sup>C-</sup>(0, n) = (0, m)\n\n0 < y < n and 0 ≤ x ≤ y * (m / n);\n```\n\n----------------------------------------\n\nTITLE: Assigning a Texture Sampler to ShaderMaterial in Babylon.js\nDESCRIPTION: Illustrates creating a `BABYLON.ShaderMaterial`, loading an external image (\"amiga.jpg\") into a `BABYLON.Texture`, and then assigning this texture to the shader's uniform sampler variable named \"textureSampler\" using the `setTexture` method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderMaterial.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myShaderMaterial = new BABYLON.ShaderMaterial(\"shader\", scene, \"./COMMON_NAME\", {\n  \"attributes\": [\"position\", \"uv\"],\n  \"uniforms\": [\"worldViewProjection\"],\n  \"samplers\": [\"textureSampler\"]\n});\nconst amigaTexture = new BABYLON.Texture(\"amiga.jpg\", scene);\nmyShaderMaterial.setTexture(\"textureSampler\", amigaTexture);\n```\n\n----------------------------------------\n\nTITLE: Creating and Sizing Sprite in Babylon.js\nDESCRIPTION: Creates a new sprite instance and sets its dimensions to match the image ratio.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_manager.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new BABYLON.Sprite(\"tree\", spriteManagerTrees); \ntree.width = 1;\ntree.height = 2;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Space Markup in WebXR Application\nDESCRIPTION: Example code demonstrating how to initialize and configure the Space Markup feature in a WebXR application. Shows setting up the XR service with markup options, adding floor surfaces, and enabling the space markup system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/spaceMarkUp.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = <TXRServiceOptions>{\n    mode:'immersive-vr',\n    features:{\n\t    SPACE_MARKUP:{\n\t\t    nativeConfig:<TSpaceMarkUpOptions>{ /* ... */}\n        }\n    }\n}\n\nconst xrService =   new XRService();\nxrService.init(options);\nawait xrService.activateXR();\n\n// Feature\nconst spaceMarkUp  =   await xrService.extractFeatureEnv('SPACE_MARKUP');\n\nspaceMarkUp.addFloors(<FloorDescription[]>[\n\t{mesh:scene.getMeshById('MainFloor')!},\n\t{mesh:stair,},\n    /* ... */\n\t{mesh:slope, isSlope:true, criticalAngleDeg:5}\n]);\n\nspaceMarkUp.run();\n// Also is possible set pause\nspaceMarkUp.pause();\n```\n\n----------------------------------------\n\nTITLE: Using Fog Functions in Vertex Shader - GLSL\nDESCRIPTION: This include statement instructs Babylon.js to inject fog vertex main functionality where it is placed in the vertex shader's main function. This is required to enable fog support and must follow the related declaration include. It manipulates fog varyings automatically; inputs/outputs are handled by Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n#include<fogVertex>\n```\n\n----------------------------------------\n\nTITLE: Loading Asset into ArrayBuffer in JavaScript\nDESCRIPTION: This code loads an asset file into an ArrayBuffer in memory using Babylon.js Tools.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadFromMemory.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetArrayBuffer = await BABYLON.Tools.LoadFileAsync(\"scenes/BoomBox.glb\", true);\n```\n\n----------------------------------------\n\nTITLE: Applying Sheen Texture to PBR Material in Babylon.js\nDESCRIPTION: This snippet illustrates how to control sheen properties using a texture map on a Babylon.js PBR material. It initializes a PBR material, sets its metallic and roughness properties, enables the sheen component, and assigns a texture to `pbr.sheen.texture`. The texture's RGB channels control the sheen color tint, and the alpha (A) channel acts as an intensity factor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\npbr.metallic = 0.0;\npbr.roughness = 0.5;\n\npbr.sheen.isEnabled = true;\npbr.sheen.texture = texture;\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Player-Lantern Intersection for Lit Lanterns\nDESCRIPTION: Detects intersection between player and already lit lanterns. When a lit lantern is encountered, the player's sparkler is reset and lit, allowing them to continue lighting other lanterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n//if the lantern is lit already, reset the sparkler\nelse if (lantern.isLit) {\n    player.sparkReset = true;\n    player.sparkLit = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BABYLON in TypeScript Files\nDESCRIPTION: Example of how to import the BABYLON namespace in TypeScript files after proper setup of the definition file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Ionic_Angular.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport BABYLON from \"babylonjs\";\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectCloner in Babylon.js\nDESCRIPTION: Demonstrates how to create an ObjectCloner that distributes two cubes onto the facets of an icosphere. The clones are positioned based on the facet positions of the template mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/objectCloner.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst oc = new BABYLONX.ObjectCloner([cube1, cube2], icoSphere, demo.scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Customizing Luminance Adaptation in Standard Rendering Pipeline\nDESCRIPTION: These snippets demonstrate how to enable and customize luminance adaptation, which simulates real-life camera behavior in different lighting conditions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.HDREnabled = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// 1.0 is the default value. In dark zones, the camera will tend to adapt luminance\n// and get the global image less dark. More the value is near 0.0, more the image will be bright\npipeline.hdrMinimumLuminance = 1.0;\n\n// 0.5 is the default value. This simply sets the speed when the camera adapts the luminosity\n// in bright zones\npipeline.hdrDecreaseRate = 0.5;\n\n// 0.5 is the default value. This simply sets the speed when the camera adapts the luminosity\n// in dark zones\npipeline.hdrIncreaseRate = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Remapping Shader Variables for ShadowDepthWrapper in JavaScript\nDESCRIPTION: Initializes a `ShadowDepthWrapper` for a `ShaderMaterial`, providing an options object with `remappedVariables`. This array instructs the wrapper to map internal variable names (like `worldPos`, `vNormalW`, `alpha`) to different names used within the custom shader code (`p`, `normalW`). This is necessary when the custom shader uses non-standard names for required variables like final world position or normal. It also demonstrates remapping `alpha` to a constant value (`\"1.\"`) if the shader doesn't compute transparency but soft shadows are needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nshaderMaterial.shadowDepthWrapper = new BABYLON.ShadowDepthWrapper(shaderMaterial, scene, {\n  remappedVariables: [\"worldPos\", \"p\", \"vNormalW\", \"normalW\", \"alpha\", \"1.\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Babylon.js Viewer Custom Annotation UI\nDESCRIPTION: Example of creating custom annotation UI by adding child elements to the annotation element to override default appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/hotspots.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<babylon-viewer-annotation hotspot=\"custom\">\n  <!-- Custom child elements here -->\n</babylon-viewer-annotation>\n```\n\n----------------------------------------\n\nTITLE: Disabling Edge Rendering in Babylon.js\nDESCRIPTION: This snippet demonstrates how to turn off edge rendering for a mesh using the disableEdgesRendering method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/edgeRenderer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbox.disableEdgesRendering();\n```\n\n----------------------------------------\n\nTITLE: Customizing Scale Gizmo Sensitivity in Babylon.js\nDESCRIPTION: Demonstrates how to adjust the sensitivity of AxisScaleGizmo and ScaleGizmo.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngizmoScale.sensitivity = 3;\n```\n\n----------------------------------------\n\nTITLE: External Configuration JSON Example\nDESCRIPTION: Example of an external JSON configuration file that can override existing settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scene\": {\n    \"debug\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Terrain with SPS\nDESCRIPTION: Creates a Dynamic Terrain instance with SPMap and SPS integration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/addingDTObjects.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 100; // 100 terrain subdivisions\nconst params = {\n  mapData: mapData, // data map declaration : what data to use ?\n  mapSubX: mapSubX, // how are these data stored by rows and columns\n  mapSubZ: mapSubZ,\n  terrainSub: terrainSub, // how many terrain subdivisions wanted\n  SPmapData: SPMap, // the object data in the map\n  sps: sps, // the SPS used to render the objects\n};\nconst terrain = new BABYLON.DynamicTerrain(\"t\", params, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Ribbon with Paths Array\nDESCRIPTION: Creates a basic ribbon mesh using an array of paths with default settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_extra.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ribbon = BABYLON.MeshBuilder.CreateRibbon(\"ribbon\", { pathArray: paths }, scene);\n```\n\n----------------------------------------\n\nTITLE: Loading Textures in Babylon.js\nDESCRIPTION: Basic code snippet showing how to load a texture file into a Babylon.js scene using the BABYLON.Texture constructor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.Texture(\"textures/filename\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a Skybox Mesh for Ground Projection in Babylon.js (JavaScript)\nDESCRIPTION: This snippet initializes a large box mesh representing the skybox and positions it to enable the 'ground' effect. The sideOrientation is set to BACKSIDE so internal faces are rendered, and receiveShadows is enabled for proper shadow handling. Dependencies include Babylon.js and an initialized scene. Parameters include the box size and position; the mesh must have its bottom face coplanar with the intended ground.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst size = 1000;\nconst skydome = BABYLON.MeshBuilder.CreateBox(\"sky\", { size, sideOrientation: BABYLON.Mesh.BACKSIDE }, scene);\nskydome.position.y = size / 2;\nskydome.receiveShadows = true;\n```\n\n----------------------------------------\n\nTITLE: Loading Fullscreen Advanced Dynamic Texture in BabylonJS\nDESCRIPTION: Code to load a fullscreen Advanced Dynamic Texture exported from Figma into BabylonJS. Creates a fullscreen UI and parses the exported JSON data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/figmaToBabylonJS.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst guiData = require(\"../figmaToBabylonJS.json\")\nlet advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\")\nadvancedTexture.parseSerializedObject(guiData, true)\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite Map Instance\nDESCRIPTION: Creates a new sprite map instance with specified atlas JSON and spritesheet texture, including configuration options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet background = new BABYLON.SpriteMap('background', atlasJSON, spriteSheet,\n    {\n        stageSize: backgroundSize,\n        flipU: true//, //Sometimes you need to flip, depending on the sprite format.\n    },\n    scene\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Border Visual Effects for Space Markup\nDESCRIPTION: TypeScript interface excerpt showing methods for configuring visual effects that appear when a user approaches boundary areas in Space Markup. Allows enabling/disabling the effect and setting custom materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/spaceMarkUp.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ISpaceMarkUpEnv {\n\t//...\n\tenableBorderVFX(active:boolean):void;\n\tsetBorderVFXMaterial(material:NodeMaterial):void;\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering KeyUp Trigger Action with Callback Parameter in Babylon.js\nDESCRIPTION: Demonstrates an advanced method (available from Babylon.js 5.47.0) for using key triggers (`OnKeyUpTrigger`) by providing a callback function as the `parameter`. This allows for custom logic to determine if the trigger should fire, such as checking for a specific case (`actionEvent.sourceEvent.key === \"R\"`). An `ExecuteCodeAction` logs a message upon successful trigger. Requires `scene.actionManager` and `BABYLON.ExecuteCodeAction`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.actionManager.registerAction(\n  new BABYLON.ExecuteCodeAction(\n    {\n      trigger: BABYLON.ActionManager.OnKeyUpTrigger,\n      parameter: function (actionEvent) {\n        return actionEvent.sourceEvent.key === \"R\";\n      },\n    },\n    function () {\n      console.log(\"R button was pressed\");\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Babylon.js Particle System with a Custom Shader Effect (JavaScript)\nDESCRIPTION: Demonstrates how to instantiate a Babylon.js ParticleSystem using an additional customEffect parameter, enabling the use of GPU shader programs for particle rendering. The customEffect is an instance of BABYLON.Effect created specifically for particles, and is passed during system initialization. Dependencies include Babylon.js engine and shader management; required parameters are the particle system name, particle count, scene instance, and the custom effect. Enables visual customization beyond default particle properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar particleSystem = new BABYLON.ParticleSystem(\"particles\", 2000, scene, customEffect);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Event Handler in BabylonJS\nDESCRIPTION: Sets up a pointer observable to detect click events in the scene. Uses a switch statement to handle POINTERDOWN events and checks if the clicked object was hit before calling the pointer down handler.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/onoff.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet switched = false;  //on off flag\n\nscene.onPointerObservable.add((pointerInfo) => {      \t\t\n    switch (pointerInfo.type) {\n\t\tcase BABYLON.PointerEventTypes.POINTERDOWN:\n\t\t\tif(pointerInfo.pickInfo.hit) {\n                pointerDown(pointerInfo.pickInfo.pickedMesh)\n            }\n\t\tbreak;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Curve3 Object from Static Factory - Babylon.js - JavaScript\nDESCRIPTION: This snippet shows how to create a Curve3 object using one of the BABYLON.Curve3.Create static methods, selecting the curve type and parameters. This approach works for several curve types (e.g., Bezier, Hermite, CatmullRom). The Curve3 object provides methods to get points and length, primarily for 3D lines, ribbons, or extrusion paths. Prerequisite: BABYLON.Curve3 available in the context.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst curve = BABYLON.Curve3.Create.CURVETYPE(parameters);\n```\n\n----------------------------------------\n\nTITLE: Creating a GUIManager Instance in JavaScript\nDESCRIPTION: Initializes a new GUIManager object with a canvas element, CSS styling, and optional theme options. The GUIManager is used to manage GUI elements in a Babylon.js application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUIManager(canvas, css, options)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Destination Reach Observer\nDESCRIPTION: Implements an observer that triggers when an agent reaches its destination.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/crowdAgents.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst crowd = navigationPlugin.createCrowd(10, 0.1, scene);\n...\ncrowd.onReachTargetObservable.add((agentInfos) => {\n    console.log(\"agent reach destination: \", agentInfos.agentIndex);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hand Animation Capture in WebXR\nDESCRIPTION: Example showing how to capture hand animations using the HandTracking feature environment with specified frames and delay.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/handsAnimation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Create service\n// 2. Init service\n// 3. Go immersive\n\n// 4. Extract feature Env\nconst ftHandEnv =   xrService.extractFeatureEnv('HAND_TRACKING');\n\n// Recording will start after a 2s pause at 360 frames.\nconst animation =  await ftHandEnv(360, 'both', 2000);\n```\n\n----------------------------------------\n\nTITLE: Creating a SpritePackedManager in Babylon.js\nDESCRIPTION: Shows two ways to create a SpritePackedManager for packed spritesheets with varying sprite sizes. The first method uses just the spritesheet URL, while the second includes an optional JSON object for atlas data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprites_introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySpritePackedManager = new BABYLON.SpritePackedManager(name, spritesheet url, capacity, scene); //scene is optional and defaults to the current scene\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst spm = new BABYLON.SpritePackedManager(name, spritesheet url, capacity, scene, atlasJSON);\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of GUIButton in BabylonJS\nDESCRIPTION: Method to set the visibility of the GUIButton. It takes a boolean parameter and an optional fade parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiButton.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Setting Line Color Using Material in Babylon.js\nDESCRIPTION: Shows how to set the color of a Greased Line using its material. It demonstrates setting the color to null and using the emissive color of the material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst points1 = [-6, 0, 0, 6, 0, 0];\nconst line1 = BABYLON.CreateGreasedLine(\"line1\", { points: points1 }, { width: 1 });\nline1.greasedLineMaterial.color = null;\nline1.material.emissiveColor = BABYLON.Color3.Red();\n```\n\n----------------------------------------\n\nTITLE: Implementing Babylon.js Game in React Component\nDESCRIPTION: React component that initializes and renders the Babylon.js game (Fruit Fallin') within an Ionic app. It sets up a canvas element and passes game asset URLs to the initialization function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IonContent, IonPage } from '@ionic/react';\nimport { Component, createRef, RefObject } from 'react';\nimport { initializeBabylonApp } from 'fruit-fallin';\nimport './Home.css';\n\nclass BabylonGame extends Component {\n  private _canvas: RefObject<HTMLCanvasElement>;\n\n  constructor (props: any) {\n    super(props);\n    this._canvas = createRef();\n  }\n\n  public componentDidMount() {\n    // Crude workaround for a loading timing issue\n    setTimeout(() => {\n      const babylonOptions = {\n        canvas: this._canvas.current!,\n        backgroundTitleUrl: \"assets/game/background_title.jpg\",\n        backgroundGameUrl: \"assets/game/background_game.jpg\",\n        buttonPlankUrl: \"assets/game/button_plank.jpg\",\n        imageGameOverUrl: \"assets/game/image_game_over.jpg\",\n        spritesheetButtonFrameUrl: \"assets/game/spritesheet_button_frame.jpg\",\n        spritesheetFruitUrl: \"assets/game/spritesheet_fruit.jpg\",\n        spritesheetMouthUrl: \"assets/game/spritesheet_mouth.jpg\",\n        soundMusicUrl: \"assets/game/sound_music.mp3\",\n        soundChompUrl: \"assets/game/sound_chomp.mp3\",\n        soundChompYumUrl: \"assets/game/sound_chomp_yum.mp3\",\n        soundChompYuckUrl: \"assets/game/sound_chomp_yuck.mp3\",\n        soundCountdownUrl: \"assets/game/sound_countdown.mp3\",\n        soundGoUrl: \"assets/game/sound_go.mp3\",\n        soundClickUrl: \"assets/game/sound_click.mp3\",\n      };\n      initializeBabylonApp(babylonOptions);\n    }, 200);\n  }\n\n  public render() {\n      return <canvas id=\"babylonCanvas\" width={window.innerWidth} height={window.innerHeight} style={{width: \"100%\", height: \"100%\"}} className=\"center\" ref={this._canvas}></canvas>;\n  }\n}\n\nconst Home: React.FC = () => {\n  return (\n    <IonPage>\n      <IonContent>\n        <BabylonGame></BabylonGame>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Enabling Tags for JavaScript Objects\nDESCRIPTION: Example showing how to enable and disable tags for JavaScript objects using Babylon.js Tags system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/tags.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myJSObj = {};\n// enable tags for myJSObj\nBABYLON.Tags.EnableFor(myJSObj);\n\n// disable tags for myJSObj\nBABYLON.Tags.DisableFor(myJSObj);\n```\n\n----------------------------------------\n\nTITLE: Configuring SetVariable Block in BabylonJS\nDESCRIPTION: Demonstrates the configuration object structure for SetVariable block and shows how to set a variable value in the context.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  /**\n   * The name of the variable to set.\n   */\n  variable: string;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst setVariable = new FlowGraphSetVariableBlock({\n  variable: \"myVariable\",\n});\nsetVariable.value.setValue(5, ctx);\n```\n\n----------------------------------------\n\nTITLE: Creating World Axes Viewer in Babylon.js\nDESCRIPTION: Creates a new AxesViewer instance to display world coordinate axes in the scene. The length of the axes can be specified as a parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/World_Axes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst axes = new BABYLON.Debug.AxesViewer(scene, length_of_axes)\n```\n\n----------------------------------------\n\nTITLE: Manual Normal Precomputation for Dynamic Terrain in JavaScript\nDESCRIPTION: Demonstrates how to manually precompute normal maps for terrain data before assigning them. This approach gives more control and can be more efficient for performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst map2 = someOtherFloat32Array;\nconst normal2 = new Float32Array(map2.length);\nBABYLON.DynamicTerrain.ComputeNormalsFromMapToRef(map2, subX2, subY2, normal2);\n\n// then, later in the code ...\nterrain.mapData = map2;\nterrain.mapNormals = normals2;\n```\n\n----------------------------------------\n\nTITLE: Accessing Goldberg Polyhedron Properties\nDESCRIPTION: Demonstrates how to access properties from the goldbergData object of a Goldberg polyhedron mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst goldbergPoly = BABYLON.MeshBuilder.CreateGoldberg(\"goldberg\", options);\nconst nbFaces = goldbergPoly.goldbergData.nbFaces;\nconst centerOfFace32 = goldbergPoly.goldbergData.faceCenters[32];\n```\n\n----------------------------------------\n\nTITLE: Starting a FlowGraph Manually in Babylon.js (JavaScript)\nDESCRIPTION: Shows how to manually trigger execution of all event blocks in a FlowGraph by calling its 'start' method. This is useful for situations where the graph is not managed via the coordinator. Requires a valid FlowGraph object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngraph.start();\n```\n\n----------------------------------------\n\nTITLE: Rotating a Mesh in Babylon.js Using Radians\nDESCRIPTION: Demonstrates how to rotate a mesh around the y-axis using radians. This example rotates the box by 45 degrees (π/4 radians), showing the direct mathematical approach to rotation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/placement.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbox.rotation.y = Math.PI / 4;\n```\n\n----------------------------------------\n\nTITLE: Setting Bone Rotation with Quaternion in Babylon.js\nDESCRIPTION: Demonstrates setting the rotation of a bone using a Quaternion with the setRotationQuaternion method. It takes a quaternion, space (world or local), and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbone.setRotationQuaternion(quat, BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Activating Full Texture Mode for GIRSM in Babylon.js\nDESCRIPTION: Sets the `useFullTexture` property of a GIRSM instance to `true`. This activates a special mode where all texels in the Reflective Shadow Map (RSM) are used for Global Illumination calculation, ignoring `radius`, `numSamples`, `rotateSample`, and `noiseFactor`. Use with caution due to high computational cost (RSM width * height samples per pixel), potentially best suited for static scenes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/rsmgi.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGIRSM.useFullTexture = true\n```\n\n----------------------------------------\n\nTITLE: Checking Video Recording Support in BabylonJS\nDESCRIPTION: Verifies if the browser supports video recording capabilities before attempting to create a recorder instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToVideo.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (BABYLON.VideoRecorder.IsSupported(engine)) {\n    var recorder = new BABYLON.VideoRecorder(engine);\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling a Box Mesh Using Vector3 in Babylon.js\nDESCRIPTION: Creates a unit cube and scales it using a Vector3 object. This shows an alternative approach to scaling where all three dimensions are set at once using a single vector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/placement.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", {}); //unit cube\nbox.scaling = new BABYLON.Vector3(2, 1.5, 3);\n```\n\n----------------------------------------\n\nTITLE: Calculating Rotation Direction for Path Following in Babylon.js\nDESCRIPTION: This code calculates the amount and direction of rotation needed when moving from one point to the next on a path. It uses dot and cross products to determine the angle and rotation direction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntheta = Math.acos(BABYLON.Vector3.Dot(normals[i], normals[i + 1])); //amount of turn\nvar dir = BABYLON.Vector3.Cross(normals[i], normals[i + 1]).y; //enables direction of turn to be found depending if +ve or -ve\nvar dir = dir / Math.abs(dir); //dir takes value 1 or -1\ncarBody.rotate(BABYLON.Axis.Y, dir * theta, BABYLON.Space.WORLD);\n```\n\n----------------------------------------\n\nTITLE: Vertex Shader with Fog Support for Babylon.js - GLSL\nDESCRIPTION: This is a complete Babylon.js-compatible vertex shader, registered in JavaScript, demonstrating all elements needed for fog support. It includes position and UV attributes, all required uniforms, and invokes Babylon.js fog includes for proper processing. The output is clip-space vertex positions and interpolated UVs, ready for use in the fragment shader; inputs are defined attributes and uniforms.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nBABYLON.Effect.ShadersStore[\"myVertexShader\"] = `\nprecision highp float;\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 world;    \nuniform mat4 view;    \nuniform mat4 viewProjection;\nvarying vec2 vUV;\n\n#include<fogVertexDeclaration>\n\nvoid main() {\n    vec4 p = vec4(position, 1.);\n    vec4 worldPos = world * p;\n    gl_Position = viewProjection * worldPos;\n    vUV = uv;\n\n    #include<fogVertex>\n}`\n```\n\n----------------------------------------\n\nTITLE: Creating an Animatable Reference in Babylon.js\nDESCRIPTION: Captures the Animatable object returned by beginAnimation to store a reference for controlling the animation state later. This enables pausing, restarting, stopping, or resetting the animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAnimatable = myscene.beginAnimation(target, from, to, true);\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous BabylonJS Method in Vue Component\nDESCRIPTION: This Vue component demonstrates how to call the asynchronous animation method from the BabylonJS scene. It includes a button to trigger the animation and uses async/await to handle the Promise.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_3.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"hide\">Hide the cube</button>\n    <br />\n    <canvas ref=\"bjsCanvas\" width=\"500\" height=\"500\" />\n  </div>\n</template>\n\n<script>\nimport myScene from \"../scenes/MyFirstScene\";\n\nexport default {\n  name: \"BabylonScene\",\n  methods: {\n    async hide() {\n      await myScene.animateMeshVisibility(\"box\", 1, 0, 0.3);\n      alert(\"Done\");\n    },\n  },\n  mounted() {\n    const bjsCanvas = this.$refs.bjsCanvas;\n    if (bjsCanvas) {\n      myScene.createScene(bjsCanvas);\n    }\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Tile Patterns for Tiled Box in JavaScript\nDESCRIPTION: Lists the available constants within `BABYLON.Mesh` that can be used for the `pattern` option when creating a Tiled Box. These constants determine how tiles are reflected or rotated across each face. `NO_FLIP` is the default. TILE endings affect every other tile, while ROW endings affect alternate rows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_box.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.NO_FLIP, default\nBABYLON.Mesh.FLIP_TILE,\nBABYLON.Mesh.ROTATE_TILE,\nBABYLON.Mesh.FLIP_ROW,\nBABYLON.Mesh.ROTATE_ROW,\nBABYLON.Mesh.FLIP_N_ROTATE_TILE,\nBABYLON.Mesh.FLIP_N_ROTATE_ROW\n```\n\n----------------------------------------\n\nTITLE: Extracting Points and Length from Quadratic Bezier - Babylon.js - JavaScript\nDESCRIPTION: This code obtains the Vector3 array of points along the previously created quadratic Bezier curve, as well as its length. This is essential to render or analyze the curve in Babylon.js. 'bezier2' refers to the Curve3 object from CreateQuadraticBezier.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = bezier2.getPoints();\nconst l = bezier2.length();\n```\n\n----------------------------------------\n\nTITLE: Loading a Sprite from a Local Asset Host in TypeScript\nDESCRIPTION: This TypeScript code snippet assigns the URL of a locally hosted sprite ('player.png') to the 'spriteUrl' constant, pointing to the local development asset server (http://127.0.0.1:8181). This directs the Babylon.js application to load the sprite from the local environment instead of a remote source. Assumes a running asset server at the specified address serving the file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst spriteUrl: string = \"http://127.0.0.1:8181/player.png\";\n```\n\n----------------------------------------\n\nTITLE: Computing Spot Light Shadow Map Depth Metric in GLSL/C Shader\nDESCRIPTION: This GLSL/C shader snippet calculates the shadow map depth metric for a spot light by remapping the clip space Z value to a 0..1 range and applying a bias/scale factor. It depends on the values of gl_Position.z, depthValuesSM (containing MinZ and range), and biasAndScaleSM. Key parameters, such as depthValuesSM.x (minZ) and depthValuesSM.y (range), must be set to correctly remap the depth, with biasAndScaleSM.x optionally introducing depth bias. The input is the projected position, and the output is a normalized shadow depth metric used for comparison in shadow testing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvDepthMetricSM = (gl_Position.z + depthValuesSM.x) / depthValuesSM.y + biasAndScaleSM.x;\n```\n\n----------------------------------------\n\nTITLE: Reading Parameters from BabylonJS Fluid Renderer\nDESCRIPTION: Method for reading parameter values from the fluid renderer based on parameter name. Handles different parameter types including target renderer parameters and render object parameters, determining the correct object to read from.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _parameterRead(name: string): any {\n    const fluidRenderer = this._scene.fluidRenderer;\n    switch (name) {\n        case \"enable\":\n            return !!this._scene.fluidRenderer;\n    }\n\n    if (name.startsWith(\"targets_\")) {\n        name = name.substring(8);\n        if (name === \"index\") {\n            return this._targetRendererIndex;\n        } else {\n            return fluidRenderer ? this._readValue(fluidRenderer.targetRenderers[this._targetRendererIndex], name) : \"\";\n        }\n    }\n\n    if (name.startsWith(\"objects_\")) {\n        name = name.substring(8);\n        if (name === \"index\") {\n            return this._renderObjectIndex;\n        } else {\n            return fluidRenderer ? this._readValue(fluidRenderer.renderObjects[this._renderObjectIndex].object, name) : \"\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fountain Profile with Vector3 Points\nDESCRIPTION: Creates an array of Vector3 points that define the 2D profile of the fountain. Each point represents x and y coordinates that will be rotated to create the 3D fountain mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/fountain.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fountainProfile = [\n\tnew BABYLON.Vector3(0, 0, 0),\n\tnew BABYLON.Vector3(10, 0, 0),\n\tnew BABYLON.Vector3(10, 4, 0),\n\tnew BABYLON.Vector3(8, 4, 0),\n\tnew BABYLON.Vector3(8, 1, 0),\n\tnew BABYLON.Vector3(1, 2, 0),\n\tnew BABYLON.Vector3(1, 15, 0),\n\tnew BABYLON.Vector3(3, 17, 0)\n];\n```\n\n----------------------------------------\n\nTITLE: Quaternion Rotation Example in BabylonJS\nDESCRIPTION: Example showing quaternion rotation that places vector at center of shells instead of outer shell.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(1, 1, 1), 0);\n```\n\n----------------------------------------\n\nTITLE: Modifying Point Emitter Directions in Babylon.js (JavaScript)\nDESCRIPTION: Updates the `direction1` and `direction2` properties of a previously created point emitter object (`pointEmitter`) to change the particle emission direction range. Requires a `pointEmitter` object obtained from `createPointEmitter` and `BABYLON.Vector3` instances for the new directions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npointEmitter.direction1 = new BABYLON.Vector3(-5, 2, 1); \npointEmitter.direction2 = new BABYLON.Vector3(5, 2, 1);  \n```\n\n----------------------------------------\n\nTITLE: Optimizing Mesh Disposal in Babylon.js\nDESCRIPTION: Code demonstrating how to optimize the disposal of multiple meshes by temporarily blocking free active meshes and rendering groups updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nscene.blockfreeActiveMeshesAndRenderingGroups = true;\n/*\n * Dispose all the meshes in a row here\n */\nscene.blockfreeActiveMeshesAndRenderingGroups = false;\n```\n\n----------------------------------------\n\nTITLE: Importing Fog Functions in Fragment Shader - GLSL\nDESCRIPTION: The fogFragmentDeclaration include brings all necessary fog-related varying and uniform declarations into the fragment shader, required before any fog calculation. It must precede the use of fog functions to ensure all required variables are available. There are no parameters or outputs for this line itself.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\n#include<fogFragmentDeclaration>\n```\n\n----------------------------------------\n\nTITLE: Implementing Marble Procedural Texture in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to create a marble material using the MarbleProceduralTexture in Babylon.js. It sets up a standard material, creates the marble texture, configures its tile properties, and assigns it as the ambient texture of the material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/proceduralTexturesLibrary/marble.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar marbleMaterial = new BABYLON.StandardMaterial(\"marbleMat\", scene);\nvar marbleTexture = new BABYLON.MarbleProceduralTexture(\"marbleTex\", 512, scene);\nmarbleTexture.numberOfTilesHeight = 5;\nmarbleTexture.numberOfTilesWidth = 5;\nmarbleMaterial.ambientTexture = marbleTexture;\n```\n\n----------------------------------------\n\nTITLE: Importing GUI Helper Function - JavaScript\nDESCRIPTION: Imports the addLabelToMesh function from the local gui module for use in the main scene file, allowing mesh labels to be attached during scene creation. Assumes 'gui.ts' exists and exports addLabelToMesh. Place this import near the top of your 'index.ts' or relevant file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addLabelToMesh } from \"./gui\";\n```\n\n----------------------------------------\n\nTITLE: Adding Text File Asset Task\nDESCRIPTION: Adds a new TextFileAssetTask to the list of active tasks. Takes a task name and URL as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Add a TextFileAssetTask to the list of active tasks\n * @param taskName defines the name of the new task\n * @param url defines the url of the file to load\n * @returns a new TextFileAssetTask object\n */\npublic addTextFileTask(taskName: string, url: string): TextFileAssetTask {\nconst task = new TextFileAssetTask(taskName, url);\n    this._tasks.push(task);\n\n    return task;\n}\n```\n\n----------------------------------------\n\nTITLE: Babylon.js Viewer Annotation Parts Styling\nDESCRIPTION: CSS example showing how to style annotation parts to customize appearance, specifically increasing font size.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/hotspots.md#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nbabylon-viewer-annotation::part(annotation) {\n  font-size: 24px;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding the Inspector\nDESCRIPTION: Shows different methods to hide the Inspector, both with and without ES Modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.debugLayer.hide();\n\n// or:\n\nInspector.Hide(); // You don't need to pass the scene\n```\n\n----------------------------------------\n\nTITLE: Transforming RadialCloner Root Object in BabylonJS\nDESCRIPTION: Demonstrates how to transform all clones at once by modifying the root object's scaling and rotation properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/radialCloner.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrc.root.scaling.y = 2;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrc.root.rotation.x = Math.PI / 4;\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple House Instances with Positioning\nDESCRIPTION: A loop that creates multiple instances of houses with different types and positions them in the scene based on predefined coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/copies.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst houses = [];\n\nfor (let i = 0; i < places.length; i++) {\n    if (places[i][0] === 1) {\n        houses[i] = detached_house.createInstance(\"house\" + i);\n    }\n    else {\n        houses[i] = semi_house.createInstance(\"house\" + i);\n    }\n    houses[i].rotation.y = places[i][1];\n    houses[i].position.x = places[i][2];\n    houses[i].position.z = places[i][3];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Meshes using SceneLoader.ImportMesh in JavaScript\nDESCRIPTION: Demonstrates the deprecated BABYLON.SceneLoader.ImportMesh method to load specific meshes from a file and append them to an existing scene. It also handles particle systems and skeletons.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// The first parameter can be set to null to load all meshes and skeletons\nBABYLON.SceneLoader.ImportMesh([\"myMesh1\", \"myMesh2\"], \"./\", \"duck.gltf\", scene, function (meshes, particleSystems, skeletons) {\n  // do something with the meshes and skeletons\n  // particleSystems are always null for glTF assets\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bump Map in Babylon.js\nDESCRIPTION: Creates a bump map effect by adding a normal map texture to a standard material. This technique simulates bumps and dents on rendered surfaces without adding geometry.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/moreMaterials.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMaterial = new BABYLON.StandardMaterial(\"myMaterial\", scene);\nmyMaterial.bumpTexture = new BABYLON.Texture(\"PATH TO NORMAL MAP\", scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Perimetric LOD Thresholds in JavaScript\nDESCRIPTION: This snippet sets up multiple LOD thresholds for terrain edge detail management. Quads within the first 2 subdivisions have LOD+1, and quads within 4 subdivisions have LOD+1, creating graduated detail reduction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.LODLimits = [2, 4];\n```\n\n----------------------------------------\n\nTITLE: Creating an Offscreen Canvas in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an offscreen canvas from a regular canvas element. It sets the canvas dimensions and transfers control to an offscreen canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/offscreenCanvas.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = document.getElementById(\"renderCanvas\");\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\nvar offscreen = canvas.transferControlToOffscreen();\n```\n\n----------------------------------------\n\nTITLE: Creating a KTX2 Decoder Web Worker (JavaScript)\nDESCRIPTION: Defines a web worker script (`worker.js`) for decoding KTX2 textures off the main thread. It imports the KTX2 decoder module, the core worker function, the MSC transcoder WASM JavaScript module, sets up necessary global variables, configures the MSC transcoder, and invokes the main worker function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// worker.js\nimport * as KTX2Decoder from \"@babylonjs/ktx2decoder\";\nimport { workerFunction } from \"@babylonjs/core/Misc/khronosTextureContainer2Worker.js\";\nimport mscTranscoderJsModule from \"@babylonjs/ktx2decoder/wasm/msc_basis_transcoder.js\";\nimport { MSCTranscoder as jsMSCTranscoder } from \"@babylonjs/ktx2decoder/Transcoders/mscTranscoder.js\";\n// set the globalThis object to make sure the worker can access the global scope\nglobalThis.KTX2DECODER = KTX2Decoder;\n// set the msc decoder module\njsMSCTranscoder.JSModule = mscTranscoderJsModule;\n// Call the worker function, imported from the core module\nworkerFunction(KTX2Decoder);\n```\n\n----------------------------------------\n\nTITLE: Asset Task Callbacks and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Lists key callback signatures and properties available on every asset task (inherited from AbstractAssetTask). These control completion, error handling, status, and namespacing for each individual loading task. The type comments clarify property usage.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nonSuccess: (task: IAssetTask) => void;\nonError: (task: IAssetTask, message?: string, exception?: any) => void;\n\nisCompleted: boolean = false;\nname: string;\ntaskState: AssetTaskState;\nerrorObject: { message?: string; exception?: any; };\n```\n\n----------------------------------------\n\nTITLE: Creating Meshes for Fur Material in Babylon.js\nDESCRIPTION: Generates ground and sphere meshes with high subdivision counts, suitable for applying fur material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 8, height: 8, subdivisions: 200 }, scene);\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { segments: 500, diameter: 8 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Custom Vertex Update Function for BabylonJS Terrain\nDESCRIPTION: Demonstrates how to implement a custom vertex update function that modifies vertex colors based on elevation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.updateVertex = function (vertex, i, j) {\n  vertex.color.g = 1.0;\n  vertex.color.r = 1.0;\n  vertex.color.b = 1.0;\n  if (vertex.position.y > 2.0) {\n    vertex.color.b = vertex.position.y / 30.0;\n    vertex.color.r = vertex.color.b;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading a Scene with Updated Path in Babylon.js TypeScript\nDESCRIPTION: This code snippet demonstrates the correct way to load a scene after renaming it. The rootUrl has been updated to point to the new scene folder name, ensuring the application can locate the renamed scene files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/workspace/renamingScene.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst rootUrl = \"./scenes/newName/\";\n\nAppendSceneAsync(rootUrl + \"scene.babylon\", this.scene, () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Vertex Indices for Primary Triangle\nDESCRIPTION: Implements index assignment for vertices in the primary triangle, handling edge cases and rotations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPrimary.prototype.SetIndices = function() {\n    let indexCount = 12; // 12 vertices already assigned\n    const vecToIdx = {}; //maps iso-vectors to indexCount;\n    const m = this.m;\n    const n = this.n;\n    let g = m; // hcf of m, n when n != 0\n    let m1 = 1;\n    let n1 = 0;\n    if (n !== 0) {\n        g = HCF(m, n);\n    };\n    m1 = m / g;\n    n1 = n / g;\n\n    let fr = 0; //face to the right of current face\n    let rot = \"\"; //rotation about which vertes for fr\n    let O = 0;\n    let A = 0;\n    let B = 0;\n    let OR = 0;\n    let AR = 0;\n    let BR = 0;\n    const Ovec = new IsoVector(0, 0);\n    const Avec = new IsoVector(m, n);\n    const Bvec = new IsoVector(-n, m + n);\n    let OAvec = new IsoVector(0, 0);\n    let ABvec = new IsoVector(0, 0);\n    let OBvec = new IsoVector(0, 0);\n    let temp = 0;\n    let tempR = 0;\n    let verts = [];\n    let idx = \"\";\n    let idxR = \"\";\n\n\n    /***edges AB to OB***** rotation about B*/\n    for (let f = 0; f < 20; f++) { //f current face\n\n        verts = IDATA.face[f];\n        O = verts[2];\n        A = verts[1];\n        B = verts[0];\n\n        idx = f +\"|\"+ Ovec.x + \"|\" + Ovec.y;\n        if (!(idx in vecToIdx)) {\n            vecToIdx[idx] = O;\n        }\n        \n        idx = f +\"|\"+ Avec.x + \"|\" + Avec.y;\n        if (!(idx in vecToIdx)) {\n            vecToIdx[idx] = A;\n        }\n        idx = f +\"|\"+ Bvec.x + \"|\" + Bvec.y;\n        if (!(idx in vecToIdx)) {\n            vecToIdx[idx] = B;\n        }\n        fr = IDATA.edgematch[f][0];\n        rot = IDATA.edgematch[f][1];\n        if (rot === \"B\") {\n                for (let i = 1; i < g; i++) {\n                    ABvec.x = m - i * (m1 + n1);\n                    ABvec.y = n + i * m1;\n                    OBvec.x = -i * n1;\n                    OBvec.y = i * (m1 + n1);\n                    idx = f +\"|\"+ ABvec.x + \"|\" + ABvec.y;\n                    idxR = fr +\"|\"+ OBvec.x + \"|\" + OBvec.y;\n                    matchIdx(idx, idxR, \"B\");\n                }\n        };\n\n       if (rot === \"O\") {\n                for (let i = 1; i < g; i++) {\n                    OBvec.x = -i * n1;\n                    OBvec.y = i * (m1 + n1);\n                    OAvec.x = i * m1;\n                    OAvec.y = i * n1;\n                    idx = f +\"|\"+ OBvec.x + \"|\" + OBvec.y;\n                    idxR = fr +\"|\"+ OAvec.x + \"|\" + OAvec.y;\n                    matchIdx(idx, idxR, \"O\");\n                }\n        };\n\n        fr = IDATA.edgematch[f][2];\n        rot = IDATA.edgematch[f][3];       \n      if (rot && rot === \"A\") {\n                for (let i = 1; i < g; i++) {\n                    OAvec.x = i * m1;\n                    OAvec.y = i * n1;\n                    ABvec.x = m - (g - i) * (m1 + n1);;\n                    ABvec.y = n + (g - i) * m1;\n                    idx = f +\"|\"+ OAvec.x + \"|\" + OAvec.y;\n                    idxR = fr +\"|\"+ ABvec.x + \"|\" + ABvec.y;\n                    matchIdx(idx, idxR, \"A\");\n                }\n        };\n\n        for (let i = 0; i < this.vertices.length; i++) {\n            idx = f + \"|\" + this.vertices[i].x + \"|\" + this.vertices[i].y;\n            if (!(idx in vecToIdx)) {\n                vecToIdx[idx] = indexCount++;\n            }\n        } \n    };\n\n    function matchIdx(idx, idxR, v) {\n        if (!(idx in vecToIdx || idxR in vecToIdx )) {\n            vecToIdx[idx] = indexCount;\n            vecToIdx[idxR] = indexCount;\n            indexCount++;\n        }\n        else if ((idx in vecToIdx) && !(idxR in vecToIdx)) {\n            vecToIdx[idxR] = vecToIdx[idx];\n        }\n        else if ((idxR in vecToIdx) && !(idx in vecToIdx)) {\n            vecToIdx[idx] = vecToIdx[idxR];\n        }\n    };\n    \n    this.vecToIdx = vecToIdx;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Perimetric LOD with Single Threshold in JavaScript\nDESCRIPTION: This code configures the LOD limits array to increase detail reduction for terrain edges. With a single value of 4, terrain quads within 4 subdivisions from the edge will have their LOD increased by 1.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.LODLimits = [4];\n```\n\n----------------------------------------\n\nTITLE: Displaying 3D Model with Babylon Tag\nDESCRIPTION: HTML markup for displaying a 3D model using the Babylon.js viewer component. Supports GLTF/GLB and other formats like .babylon, .obj, and .stl.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer.v1.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<babylon model=\"model.gltf\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Specifying a Registered YAML Mapper and External Configuration File in BabylonJS Viewer - HTML\nDESCRIPTION: This HTML code shows how to reference an external configuration file and assign a custom parser to a BabylonJS Viewer element using HTML attributes. The 'configuration.mapper' attribute is set to 'yaml' to select the previously registered YAML mapper, while 'configuration.url' gives the location of the config file. Additional model and engine related parameters are also set as attributes. To use this snippet, a compatible custom mapper must already be registered and a YAML configuration file must be hosted at the specified URL. The BabylonJS Viewer will use the specified parser to load and apply the configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"minimal\" scene.debug=\"true\" engine.antialiasing=\"false\" model=\"https://playground.babylonjs.com/scenes/Rabbit.babylon\" configuration.url=\"http://example.com/viewerConfig.yaml\" configuration.mapper=\"yaml\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling WebXR Features\nDESCRIPTION: Demonstrates how to enable and disable WebXR features with version control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fm = xr.baseExperience.featuresManager;\n\nfm.disableFeature(WebXRFeatureName.POINTER_SELECTION);\n\nconst xrHitTestLatest = fm.enableFeature(WebXRFeatureName.HIT_TEST, \"latest\");\n\nconst xrHitTest1 = fm.enableFeature(WebXRFeatureName.HIT_TES, 1);\n```\n\n----------------------------------------\n\nTITLE: Particles Reverse Velocities in Grid-Based Collision System\nDESCRIPTION: A playground example demonstrating particles that reverse their velocities when they collide while moving on a grid. Particles are restricted to moving between grid coordinates and collide with walls and each other based on proximity conditions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Grid_Moves.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#CGSXR#1\" title=\"Particles Reverse velocity\" description=\"Colliding particles reverse their velocity.\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Ascii Art Post-Process in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create and attach a basic Ascii Art Post-Process to a camera in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/asciiArtPP.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Creates the post process\nvar postProcess = new BABYLON.AsciiArtPostProcess(\"AsciiArt\", camera);\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Terrain with Map Data\nDESCRIPTION: JavaScript code showing how to create a Dynamic Terrain instance by providing map coordinates, dimensions, and subdivision parameters to the constructor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapCoords = [some_big_flat_array_of_coordinates];\nconst mapWidthPointNb = 2000; // 2000 points in the map width\nconst mapDepthPointNb = 1000; // 1000 points in the map depth\nconst terrainSub = 100; // the terrain wil be 100x100 vertices only\nconst mapParams = {\n  mapData: mapCoords,\n  mapSubX: mapWidthPointNb,\n  mapSubZ: mapDepthPointNb,\n  terrainSub: terrainSub,\n};\n\nconst terrain = new BABYLON.DynamicTerrain(\"terrain\", mapParams, scene);\nconst terrainMesh = terrain.mesh;\nterrainMesh.diffuseTexture = myNiceTexture;\n```\n\n----------------------------------------\n\nTITLE: Initializing a Reflective Shadow Map in Babylon.js - JavaScript\nDESCRIPTION: Demonstrates how to instantiate a ReflectiveShadowMap object in Babylon.js for GI lighting using a specified scene and light. Requires Babylon.js to be imported as a prerequisite, with relevant scene and light objects already defined. The width and height parameters define the RSM texture resolution; calling rsm.addMesh() with no arguments includes all meshes for GI calculation. Outputs an RSM object ready for integration into GI workflows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/rsmgi.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rsm = new BABYLON.ReflectiveShadowMap(scene, light, { width: 512, height: 512 });\nrsm.addMesh(); // no specific mesh transmitted to addMesh, so all meshes in the scene are added and will be rendered in the RSM\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Functions with FlowGraphCodeExecutionBlock - JavaScript\nDESCRIPTION: This code demonstrates the use of FlowGraphCodeExecutionBlock to execute a custom function on a value within Babylon.js's graph system. It defines a function (changeColor) that inverts RGB color channels and configures the execution block with the function and a Color3 object input. Dependencies include the FlowGraphCodeExecutionBlock, a defined execution context (ctx), and the Color3 type from Babylon.js. The result of execution is connected to another block's input, facilitating custom data transformations in a visual programming workflow.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nfunction changeColor(value, ctx) {\n  value.r = 1 - value.r;\n  value.g = 1 - value.g;\n  value.b = 1 - value.b;\n  return value;\n}\nconst codeExecution = new FlowGraphCodeExecutionBlock();\ncodeExecution.executionFunction.setValue(changeColor, ctx);\ncodeExecution.value.setValue(new Color3(1, 0, 0), ctx);\ncodeExecution.result.connectTo(someOtherBlock.color);\n```\n\n----------------------------------------\n\nTITLE: Assigning Parent, Position, and Rotation to Particles in Babylon.js - JavaScript\nDESCRIPTION: Extending the previous parenting logic, this snippet assigns both a parent (by updating parentId) and custom position and rotation values to a particle. The parent-child relationship enables chained transformations, where each child is affected by the parent's state. This snippet demonstrates setting rotation.z and position.x after parenting. Useful for building hierarchical particle structures in Babylon.js PCS. Each particle is assumed to have idx, parentId, position, and rotation fields.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (particle.idx > 0) {\n    particle.parentId = particle.idx - 1; // the previous particle becomes the parent of the current one\n    // the particle position and rotation are expressed in the previous particle space, this one being already \n    // rotated and translated from the yet previous particle. Etc.\n    particle.rotation.z = 0.01;\n    particle.position.x = 1.0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Environment in Babylon.js\nDESCRIPTION: Sets up a default environment with skybox and ground using helper method\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultEnvironment();\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Mix Material in Babylon.js\nDESCRIPTION: Demonstrates how to create a terrain mesh and apply a Mix Material with multiple diffuse textures and mix maps. The example shows configuration of up to 8 diffuse textures controlled by two mix textures (RGBA channels).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/mixMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a terrain\nvar terrain = BABYLON.Mesh.CreateGroundFromHeightMap(\"terrain\", \"heightMap.png\", 100, 100, 100, 0, 10, scene, false);\n\n// Create the mix material\nvar mix = new BABYLON.MixMaterial(\"mix\", scene);\n\n// Mix texture 1 (RGBA) is required\nmix.mixTexture1 = new BABYLON.Texture(\"/playground/textures/mixMap.png\", scene);\n\n// Mix texture 2 (RGBA) is optional\nmix.mixTexture2 = new BABYLON.Texture(\"/playground/textures/mixMap_2.png\", scene);\n\n// Diffuse textures (RGBA) attached to the \"mixTexture1\"\nmix.diffuseTexture1 = new BABYLON.Texture(\"/playground/textures/floor.png\", scene);\nmix.diffuseTexture2 = new BABYLON.Texture(\"/playground/textures/rock.png\", scene);\nmix.diffuseTexture3 = new BABYLON.Texture(\"/playground/textures/grass.png\", scene);\nmix.diffuseTexture4 = new BABYLON.Texture(\"/playground/textures/floor.png\", scene);\n\n// Diffuse textures (RGBA) attached to the \"mixTexture2\"\nmix.diffuseTexture5 = new BABYLON.Texture(\"/playground/textures/leopard_fur.jpg\", scene);\nmix.diffuseTexture6 = new BABYLON.Texture(\"/playground/textures/fur.jpg\", scene);\nmix.diffuseTexture7 = new BABYLON.Texture(\"/playground/textures/sand.jpg\", scene);\nmix.diffuseTexture8 = new BABYLON.Texture(\"/playground/textures/crate.png\", scene);\n\n// Apply the material\nterrain.material = mix;\n```\n\n----------------------------------------\n\nTITLE: Creating Babylon Polygon Mesh from Plane - JavaScript\nDESCRIPTION: Demonstrates constructing a Babylon.js polygon mesh from a detected XR plane. Closes the polygon by repeating the first vertex, then uses PolygonMeshBuilder to triangulate and build the mesh. Plane thickness and transformation depend on parameters and plane definition.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst plane = // a reference to an added plane\\n  // add the starting point, so the polygon will close\\n  plane.polygonDefinition.push(plane.polygonDefinition[0]);\\n// create a polygon mesh builder for the polygons returned from the system\\nvar polygon_triangulation = new BABYLON.PolygonMeshBuilder(\\n  \\\"name\\\",\\n  plane.polygonDefinition.map((p) => new BABYLON.Vector2(p.x, p.z)),\\n  scene,\\n);\\n// build the plane with specific thickness\\nvar polygon = polygon_triangulation.build(false, 0.01);\n```\n\n----------------------------------------\n\nTITLE: Configuring Occlusion Query Type on a Mesh in Babylon.js (JavaScript)\nDESCRIPTION: This example creates a mesh (a sphere) in Babylon.js and sets its occlusion type property to use an optimistic strategy, meaning the mesh will be drawn if the visibility query cannot be immediately resolved. The code relies on prior imports of Babylon.js and the occlusion query extensions. Parameters include the sphere's segment count and diameter, as well as the scene context. The primary output is a configured sphere mesh ready for occlusion queries; limitations include a need for proper mesh ordering and rendering group setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/occlusionQueries.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\nsphere.occlusionType = BABYLON.AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC;\n```\n\n----------------------------------------\n\nTITLE: Creating House Walls in Babylon.js\nDESCRIPTION: A playground example demonstrating how to create blank house walls without doors or windows. This implementation takes a polygon footprint and extrudes it with the specified thickness to form walls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#4GBWI5\" title=\"Blank House Walls\" description=\"Walls with no doors or windows\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Water Material Properties\nDESCRIPTION: Shows various properties that can be adjusted to customize the water material's appearance, including wind force, wave height, water color, and wave characteristics.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/waterMat.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwaterMaterial.windForce = 45; // Represents the wind force applied on the water surface\nwaterMaterial.waveHeight = 1.3; // Represents the height of the waves\nwaterMaterial.bumpHeight = 0.3; // According to the bump map, represents the pertubation of reflection and refraction\nwaterMaterial.windDirection = new BABYLON.Vector2(1.0, 1.0); // The wind direction on the water surface (on width and height)\nwaterMaterial.waterColor = new BABYLON.Color3(0.1, 0.1, 0.6); // Represents the water color mixed with the reflected and refracted world\nwaterMaterial.colorBlendFactor = 2.0; // Factor to determine how the water color is blended with the reflected and refracted world\nwaterMaterial.waveLength = 0.1; // The lenght of waves. With smaller values, more waves are generated\n```\n\n----------------------------------------\n\nTITLE: Reading Property Values from BabylonJS Fluid Renderer Objects\nDESCRIPTION: Utility method for reading nested property values from fluid renderer objects. Handles special cases like Color3 values, debug features, and map sizes. Uses the dot notation path to access nested properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _readValue(obj: any, name: string): any {\n    const parts: string[] = name.split(\"_\");\n\n    for (let i = 0; i < parts.length; ++i) {\n        const part = parts[i];\n        obj = obj[parts[i]];\n\n        if (obj instanceof BABYLON.Color3) {\n            obj = obj.toHexString();\n        }\n\n        if (part === \"debugFeature\") {\n            obj = BABYLON.FluidRenderingDebug[obj];\n        }\n\n        if (part.endsWith(\"MapSize\") && obj === null) {\n            obj = \"Screen size\";\n        }\n    }\n\n    return obj;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rendering Group ID for WebXR Teleportation Target Zone\nDESCRIPTION: Configures the rendering group ID for the teleportation target zone to control its rendering order relative to other scene elements, ensuring proper visibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  renderingGroupId: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Points and Length from Hermite Spline - Babylon.js - JavaScript\nDESCRIPTION: This code retrieves the array of Vector3 points defining the Hermite spline and its total length, facilitating visual rendering or further geometric computation using Babylon.js. Applies after having made the \"hermite\" Curve3 object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = hermite.getPoints();\nconst l = hermite.length();\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Calculation of Depth Bounds in CSM Shadow Generator\nDESCRIPTION: Enables automatic calculation of depth bounds for improved shadow rendering at the expense of more GPU work. This implements the first pass of Sample Distribution Shadow Maps technique.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.autoCalcDepthBounds = true;\n```\n\n----------------------------------------\n\nTITLE: Customizing TypeScript Compiler Options for Vite/Babylon.js - JSON\nDESCRIPTION: This JSON configuration file tailors TypeScript settings for a Vite and Babylon.js project. It configures the ECMAScript target, necessary libraries, module resolution, interop options, and strictness rules. Inline comments describe each setting, leveraging the tsconfig.json allowance for explanatory comments. Parameters include the compilerOptions object (with keys like target, lib, module, etc.) and the include array. It is intended for use with TypeScript 4.x+ and works best in projects using module-based front-end toolchains.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/usingVite.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\", // choose our ECMA/JavaScript version (all modern browsers support ES6 so it's your best bet)\n    \"lib\": [ // choose our default ECMA/libraries to import\n      \"dom\", // mandatory for all browser-based apps\n      \"es6\" // mandatory for targeting ES6\n    ],\n    \"useDefineForClassFields\": true, // enable latest ECMA runtime behavior with older ECMA/JavaScript versions (delete this line if target: \"ESNext\" or \"ES2022\"+)\n    \"module\": \"ESNext\", // use the latest ECMA/JavaScript syntax for our import statements and such\n    \"moduleResolution\": \"node\", // ensures we are using CommonJS for our npm packages\n    \"noResolve\": false, // disable TypeScript from automatically detecting/adding files based on import statements and etc (it's less helpful than you think)\n    \"isolatedModules\": true, // allows our code to be processed by other transpilers, such as preventing non-module TS files (you could delete this since we're only using base TypeScript)\n    \"removeComments\": true, // remove comments from our outputted code to save on space (look into terser if you want to protect the outputted JS even more)\n    \"esModuleInterop\": true, // treats non-ES6 modules separately from ES6 modules (helpful if module: \"ESNext\")\n    \"noImplicitAny\": false, // usually prevents code from using \"any\" type fallbacks to prevent untraceable JS errors, but we'll need this disabled for our example code\n    \"noUnusedLocals\": false, // usually raises an error for any unused local variables, but we'll need this disabled for our example code\n    \"noUnusedParameters\": true, // raises an error for unused parameters\n    \"noImplicitReturns\": true, // raises an error for functions that return nothing\n    \"skipLibCheck\": true // skip type-checking of .d.ts files (it speeds up transpiling)\n  },\n  \"include\": [\"src\"] // specify location(s) of .ts files\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Spherical Harmonics for PBR BRDF in Babylon.js\nDESCRIPTION: This snippet shows how to disable the use of Spherical Harmonics for calculating the diffuse Image Based Lighting (environment irradiance) within the PBR material's BRDF in Babylon.js. Setting `pbr.brdf.useSphericalHarmonics` to `false` reverts to a faster, potentially less accurate method used in previous versions (pre-4.0). This is an optimization option if the higher accuracy of spherical harmonics is not required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\npbr.brdf.useSphericalHarmonics = false;\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Mesh Vertex Normals in Babylon.js\nDESCRIPTION: This function creates a line system that visualizes the normal vectors for each vertex of a mesh. It extracts position and normal data from the mesh's vertex buffers, creates lines representing each normal, and returns the created line system. The function allows customization of normal line size, color, and the scene where lines should be created.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Normals.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction showNormals(mesh, size, color, sc) {\n  var normals = mesh.getVerticesData(BABYLON.VertexBuffer.NormalKind);\n  var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n  color = color || BABYLON.Color3.White();\n  sc = sc || scene;\n  size = size || 1;\n\n  var lines = [];\n  for (let i = 0; i < normals.length; i += 3) {\n    var v1 = BABYLON.Vector3.FromArray(positions, i);\n    var v2 = v1.add(BABYLON.Vector3.FromArray(normals, i).scaleInPlace(size));\n    lines.push([v1.add(mesh.position), v2.add(mesh.position)]);\n  }\n  var normalLines = BABYLON.MeshBuilder.CreateLineSystem(\"normalLines\", { lines: lines }, sc);\n  normalLines.color = color;\n  return normalLines;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Blur Thickness Menu in BabylonJS Fluid Renderer\nDESCRIPTION: Sets up the Blur Thickness menu folder with GUI controls for fluid thickness blur parameters. Creates controls for enabling blur thickness, adjusting size divisor, filter size, and number of iterations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst menuBlurThickness = targetRenderers.addFolder(\"Blur Thickness\");\nmenuBlurThickness.$title.style.fontStyle = \"italic\";\n\nthis._targetRenderersGUIElements.push(this._addCheckbox(menuBlurThickness, params, \"targets_enableBlurThickness\", \"Enable\"));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurThickness, params, \"targets_blurThicknessSizeDivisor\", \"Size divisor\", 1, 10, 1));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurThickness, params, \"targets_blurThicknessFilterSize\", \"Filter size\", 1, 20, 1));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurThickness, params, \"targets_blurThicknessNumIterations\", \"Num iterations\", 1, 10, 1));\n```\n\n----------------------------------------\n\nTITLE: Basic Application HTML Setup for Babylon.js - HTML\nDESCRIPTION: This HTML code is a complete page boilerplate for serving a Babylon.js application in a local development environment. It includes a fullscreen canvas for rendering, a style block for layout, and script tags for dependencies (e.g., pointer events polyfill, and the 'main.js' output from Webpack). Dependencies: The bundled JavaScript (main.js) output by Webpack must be referenced. The canvas with id 'renderCanvas' is essential for Babylon.js rendering. No inputs or outputs are specified; user interaction happens within the canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\\n  <head>\\n    <title>Local Development</title>\\n\\n    <script src=\\\"https://code.jquery.com/pep/0.4.2/pep.min.js\\\"></script>\\n\\n    <style>\\n      html,\\n      body {\\n        width: 100%;\\n        height: 100%;\\n        padding: 0;\\n        margin: 0;\\n        overflow: hidden;\\n      }\\n\\n      #renderCanvas {\\n        width: 100%;\\n        height: 100%;\\n        display: block;\\n        font-size: 0;\\n      }\\n    </style>\\n  </head>\\n\\n  <body>\\n    <canvas id=\\\"renderCanvas\\\" touch-action=\\\"none\\\"></canvas>\\n\\n    <script src=\\\"main.js\\\"></script>\\n  </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Automatic Normal Computation for Dynamic Terrain in JavaScript\nDESCRIPTION: Shows how to enable automatic normal map recomputation when assigning new data maps to a terrain. This approach computes normals on the fly but may impact performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.precomputeNormalsFromMap = true; // default = false\nterrain.mapData = map2; // the normal map is automatically computed on the hood\n```\n\n----------------------------------------\n\nTITLE: Calculating Collision and Rebound for Two Particles in JavaScript\nDESCRIPTION: This playground demonstrates how to calculate the collision and rebound paths of two particles. It shows the first contact position and the paths before and after collision, applying the physics formulas described in the documentation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Free_Collide.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#A4HZTV#1\" title=\"Contact and Rebound\" description=\"Shows the first contact position of two particles and their paths before and after collision.\"/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Depth and Stencil Buffer - Babylon.js JavaScript\nDESCRIPTION: Sets the autoClearDepthAndStencil flag for the utility layer scene, which determines whether depth and stencil buffers are cleared before rendering the overlay. Setting to false allows overlays to be occluded by the main scene but may affect transparency handling. Use when overlay objects should interact visually with main scene depth.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nutilLayer.utilityLayerScene.autoClearDepthAndStencil = false;\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Block Outputs in Babylon.js Node Material using JavaScript\nDESCRIPTION: Detaches an established connection between output and input connection points of shader blocks. This operation returns the node graph to a prior unlinked state, allowing reconfiguration of block connectivity. Both connection points must be already connected for the disconnection to take place.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nworldInput.output.disconnectFrom(boneBlock.world);\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch Statement in Babylon.js Flow Graph\nDESCRIPTION: Sets up a switch block in the flow graph that directs execution based on a case value. The block requires predefined case values and creates corresponding output connections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst switchBlock = new FlowGraphSwitchBlock({\n  cases: [0, 1, 2, 3, 4],\n});\nswitchBlock.case.connectTo(caseBlock.value);\nswitchBlock.out_0.connectTo(nextBlock1.in);\nswitchBlock.out_1.connectTo(nextBlock2.in);\nswitchBlock.out_2.connectTo(nextBlock3.in);\nswitchBlock.out_3.connectTo(nextBlock4.in);\nswitchBlock.out_4.connectTo(nextBlock5.in);\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Controls for WebVR Entry/Exit in Babylon.js (JavaScript)\nDESCRIPTION: Implements keyboard shortcuts to enter and exit WebVR mode. This requires initializing an `ActionManager` on the scene and having a `VRExperienceHelper` instance (e.g., `vrHelper` from `createDefaultVRExperience`). Pressing 's' triggers `vrHelper.enterVR()` to enter VR mode, and pressing 'e' triggers `vrHelper.exitVR()` and `document.exitFullscreen()` to return to the standard 2D view.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360PhotoDome.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.actionManager = new BABYLON.ActionManager(scene);\n\n// From 2D view to fullscreen VR\nscene.actionManager.registerAction(\n  new BABYLON.ExecuteCodeAction(\n    {\n      trigger: BABYLON.ActionManager.OnKeyDownTrigger,\n      parameter: \"s\", //press \"s\" key\n    },\n    function () {\n      vrHelper.enterVR();\n    },\n  ),\n);\n\n// From fullscreen VR to 2D view\nscene.actionManager.registerAction(\n  new BABYLON.ExecuteCodeAction(\n    {\n      trigger: BABYLON.ActionManager.OnKeyDownTrigger,\n      parameter: \"e\", //press \"e\" key\n    },\n    function () {\n      vrHelper.exitVR();\n      document.exitFullscreen();\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing StopAnimation Block in BabylonJS\nDESCRIPTION: Shows how to use the StopAnimation block to halt an animation group's playback. Connects to the animation group from a PlayAnimation block.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst stopAnimation = new FlowGraphStopAnimationBlock();\nstopAnimation.animationGroup.setValue(playAnimationGroup.currentAnimationGroup.getValue(ctx), ctx);\n```\n\n----------------------------------------\n\nTITLE: Light Layer Mask Configuration\nDESCRIPTION: Setup for creating a light that only affects meshes with specific layer masks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/layerMasksAndMultiCam.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst light = new BABYLON.Light(...);\nlight.includeOnlyWithLayerMask = 0x10000000;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom YAML Configuration Mapper for BabylonJS Viewer - JavaScript\nDESCRIPTION: This set of code illustrates how to implement a custom configuration parser (mapper) in both TypeScript and JavaScript for the BabylonJS Viewer to support a YAML-like configuration format. The TypeScript class YAMLMapper implements the IMapper interface and should include logic to convert YAML to the expected configuration object. The JavaScript object 'yamlMapper' provides a similar map function, expecting the YAML object to implement a 'toJson' method. Implementing a custom mapper allows developers to integrate non-native configuration file formats into the viewer's setup process. Dependencies include implementing the conversion logic and ensuring the Viewer supports registering external mappers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// In TypeScript\nclass YAMLMapper implements IMapper {\n  map(yaml: YAMLThing): ViewerConfiguration {\n    return this.convertToYaml(yaml);\n  }\n\n  // so, this needs to be actually implemented...\n  convertYamlToJson(yaml) {}\n}\n\n// in JavaScript\n\nlet yamlMapper = {\n  map: function (yaml) {\n    return yaml.toJson();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Lathe Mesh from Profile\nDESCRIPTION: Uses MeshBuilder.CreateLathe to generate a 3D fountain mesh by rotating the profile points. The mesh is set to double-sided to ensure visibility of both interior and exterior surfaces.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/fountain.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fountain = BABYLON.MeshBuilder.CreateLathe(\"fountain\", {shape: fountainProfile, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, scene);\n```\n\n----------------------------------------\n\nTITLE: Getting Component References\nDESCRIPTION: Shows how to get references to other components attached to the owner object using the getComponent method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class TestMeshComponent extends BABYLON.MeshComponent {\n\n            protected start() :void {\n                const animator:BABYLON.AnimationState = this.getComponent(\"BABYLON.AnimationState\");\n                if (animator) console.log(\"Echo Owner: \" + animator.owned.name);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Modifying Directed Sphere Emitter Properties in Babylon.js (JavaScript)\nDESCRIPTION: Updates the radius and direction properties (`radius`, `direction1`, `direction2`) of a previously created directed sphere emitter object (`sphereEmitter`). Requires a `sphereEmitter` object obtained from `createDirectedSphereEmitter`, a new radius value (Number), and `BABYLON.Vector3` instances for the new directions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsphereEmitter.radius = 3.4;\nsphereEmitter.direction1 = new BABYLON.Vector3(-5, 2, 1); \nsphereEmitter.direction2 = new BABYLON.Vector3(5, 2, -1);    \n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Controls in Babylon.js\nDESCRIPTION: Shows how to apply a previously created style to a GUI control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ntextControl.style = style;\n```\n\n----------------------------------------\n\nTITLE: Adding Points with Default Distribution in Babylon.js\nDESCRIPTION: Adds a specified number of point particles to the `PointsCloudSystem` (pcs). By default, these points are randomly positioned within a unit cube centered at the origin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npcs.addPoints(10000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Grass Procedural Texture in Babylon.js\nDESCRIPTION: Creates a new grass procedural texture and applies it as an ambient texture to a standard material. The texture allows customization of grass colors and ground color through parameters, and renders at 256x256 resolution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/proceduralTexturesLibrary/grass.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar grassMaterial = new BABYLON.StandardMaterial(\"grassMat\", scene);\nvar grassTexture = new BABYLON.GrassProceduralTexture(\"grassTex\", 256, scene);\ngrassMaterial.ambientTexture = grassTexture;\n```\n\n----------------------------------------\n\nTITLE: Creating a RadialCloner in BabylonJS\nDESCRIPTION: Creates a RadialCloner with 24 clones (alternating between cube1 and cube2) distributed in a radius of 6 units in the XZ plane.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/radialCloner.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rc = new BABYLONX.RadialCloner([cube1, cube2], demo.scene, {count:24,radius:6});\n```\n\n----------------------------------------\n\nTITLE: Legacy Vertex Minimization Implementation for Babylon.js Pre-v4.0\nDESCRIPTION: Complete implementation of the minimizeVertices prototype method for Babylon.js versions before 4.0. This function removes duplicate vertices and forces normal sharing, effectively reducing vertex count while recomputing normals for smooth shading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Minimise_Vertices.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.prototype.minimizeVertices = function() {\n\n\t\tvar _decPlaces = Math.pow(10, 8);\n\n        var _pdata = this.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n        var _ndata = this.getVerticesData(BABYLON.VertexBuffer.NormalKind);\n        var _idata = this.getIndices();    \n\n        var _newPdata = []; //new positions array\n        var _newIdata =[]; //new indices array\n\n        var _mapPtr =0; // new index;\n        var _uniquePositions = {}; // unique vertex positions\n        for(let _i=0; _i<_idata.length; _i+=3) {\n            var _facet = [_idata[_i], _idata[_i + 1], _idata[_i+2]]; //facet vertex indices\n            var _pstring = []; //lists facet vertex positions (x,y,z) as string \"xyz\"\"\n            for(let _j = 0; _j<3; _j++) { //\n                _pstring[_j] = \"\";\n                for(let _k = 0; _k<3; _k++) {\n                    //small values make 0\n                    if (Math.abs(_pdata[3*_facet[_j] + _k]) < 0.0001) {\n                        _pdata[3*_facet[_j] + _k] = 0;\n                    }\n                    _pstring[_j] += Math.round(_pdata[3*_facet[_j] + _k] * _decPlaces)/_decPlaces + \"|\";\n                }\n            }\n            //check facet vertices to see that none are repeated\n            // do not process any facet that has a repeated vertex, ie is a line\n            if(!(_pstring[0] == _pstring[1] || _pstring[0] == _pstring[2] || _pstring[1] == _pstring[2])) {        \n                //for each facet position check if already listed in uniquePositions\n                // if not listed add to uniquePositions and set index pointer\n                // if listed use its index in uniquePositions and new index pointer\n                for(let _j = 0; _j<3; _j++) { \n                    var _ptr = _uniquePositions[_pstring[_j]];\n                    if(_ptr === undefined) {\n                        _uniquePositions[_pstring[_j]] = _mapPtr;\n                        _ptr = _mapPtr++;\n                        //not listed so add individual x, y, z coordinates to new positions array newPdata\n                        //and add matching normal data to new normals array newNdata\n                        for(let _k = 0; _k<3; _k++) {\n                            _newPdata.push(_pdata[3*_facet[_j] + _k]);\n                        }\n                    }\n                    // add new index pointer to new indices array newIdata\n                    _newIdata.push(_ptr);\n                }\n            }\n        }\n\n        _newNdata =[]; //new normal data\n\n        BABYLON.VertexData.ComputeNormals(_newPdata, _newIdata, _newNdata);\n\n        //create new vertex data object and update\n        var _vertexData = new BABYLON.VertexData();\n        _vertexData.positions = _newPdata;\n        _vertexData.indices = _newIdata;\n        _vertexData.normals = _newNdata;\n\n        _vertexData.applyToMesh(this);\n\n    }\t\n```\n\n----------------------------------------\n\nTITLE: Opening Inspector Panes in Popup Mode\nDESCRIPTION: Shows how to open individual Scene Explorer and Inspector panes in popup mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar debugLayer = await scene.debugLayer.show();\n\ndebugLayer.popupSceneExplorer();\ndebugLayer.popupInspector();\n```\n\n----------------------------------------\n\nTITLE: Creating MorphTarget from Mesh in Babylon.js\nDESCRIPTION: This snippet demonstrates creating a `BABYLON.MorphTarget` using the static function `FromMesh`. It takes a source mesh (`sphereTarget`), a name for the target (\"target\"), and an initial influence value (0.25) as parameters. The source mesh must have the exact same number of vertices as the mesh the target will be applied to.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/morphTargets.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = BABYLON.MorphTarget.FromMesh(sphereTarget, \"target\", 0.25);\n```\n\n----------------------------------------\n\nTITLE: Including Babylon.js GUI Script\nDESCRIPTION: CDN script import for Babylon.js GUI functionality. Note: Not recommended for production use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/light_gui.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>https://cdn.babylonjs.com/gui/babylon.gui.min.js</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Action Property Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Details the JSON format for a property used within a Babylon.js Action definition. Each property consists of a name (string) and its corresponding value (always a string), which might represent a target object ID or other parameter. It also includes an optional 'targetType' string for internal use by tools like the Actions Builder.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": string, (name of the property)\n    \"value\": string, (value of the property. For example: name = \"target\" and value = \"Plane001\")\n    \"targetType\": string (internal use for theBabylon.js Actions Builder, specifies where to find the properties for \"propertyPath\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Text Block to GUI\nDESCRIPTION: Creates and configures a text block header for the GUI panel.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/light_gui.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst header = new BABYLON.GUI.TextBlock();\nheader.text = \"Night to Day\";\nheader.height = \"30px\";\nheader.color = \"white\";\npanel.addControl(header);\n```\n\n----------------------------------------\n\nTITLE: Assigning a Classic Cube Texture for Environment (Babylon.js, JavaScript)\nDESCRIPTION: This snippet demonstrates how to assign a classic, non-HDR cube texture as the environment texture in Babylon.js. It uses a CubeTexture from a texture folder base path without the .hdr/.env preprocessing. Dependencies: Babylon.js; requires a cube texture folder or base path with the appropriate images. Input is the folder path. Output is a non-HDR environment; limitations include potential visual artifacts and lack of full PBR/HDR effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/HDREnvironment.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.environmentTexture = new BABYLON.CubeTexture(\"textures/TropicalSunnyDay\", scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in IBL Shadows Pipeline - JavaScript\nDESCRIPTION: Code snippet to enable debug passes in the IBL Shadows Pipeline. This is a prerequisite for using any of the debug visualization features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/IBLShadowsRenderingPipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nshadowPipeline.allowDebugPasses = true;\n```\n\n----------------------------------------\n\nTITLE: Checking Input for Player Rotation in Babylon.js (JavaScript)\nDESCRIPTION: This snippet checks if there is any horizontal or vertical input axis movement. If no input is detected (input vector length is zero), the function returns early to prevent unnecessary rotation calculations or resetting the player's current rotation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//check if there is movement to determine if rotation is needed\nlet input = new Vector3(this._input.horizontalAxis, 0, this._input.verticalAxis); //along which axis is the direction\nif (input.length() == 0) {//if there's no input detected, prevent rotation and keep player in same rotation\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ShaderStore Shader with CustomProceduralTexture in JavaScript\nDESCRIPTION: Creates a `BABYLON.CustomProceduralTexture` using a shader previously stored in the `BABYLON.Effect.ShadersStore`. Instead of a file path, the name of the shader in the store (\"Lines\" in this example, which corresponds to the \"LinesPixelShader\" key) is provided.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst customProcText = new BABYLON.CustomProceduralTexture(\"customtext\", \"Lines\", 1024, scene);\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeated LOD Increments in JavaScript\nDESCRIPTION: This snippet demonstrates how repeated values in the LODLimits array cause multiple LOD increments. The value 1 repeated four times means +4 LOD at the first subdivision, creating dramatic detail reduction at edges.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.LODLimits = [1, 1, 1, 1, 2, 4];\n```\n\n----------------------------------------\n\nTITLE: Sprite Atlas JSON Structure in Babylon.js\nDESCRIPTION: Example JSON structure for a sprite atlas using the Babylon.js JSON Array format for SpriteMap. Shows the frame definitions including position, size, and rotation properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"frames\": [\n        {\n\t        \"filename\": \"blank.png\",\n\t        \"frame\": {\"x\":221,\"y\":221,\"w\":1,\"h\":1},\n\t        \"rotated\": false,\n\t        \"trimmed\": false,\n\t        \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n\t        \"sourceSize\": {\"w\":32,\"h\":32}\n        },\n        {\n\t        \"filename\": \"Falling-Water-0.png\",\n\t        \"frame\": {\"x\":1,\"y\":1,\"w\":32,\"h\":32},\n\t        \"rotated\": false,\n\t        \"trimmed\": false,\n\t        \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n\t        \"sourceSize\": {\"w\":32,\"h\":32}\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Standard Material for Default Usage (JavaScript)\nDESCRIPTION: Imports the 'standardMaterial' module to ensure the scene's default material is available and operational. This is necessary when using tree shaking, as the default material is not included automatically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/core/Materials/standardMaterial.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring BabylonJS Viewer Using JavaScript - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a BabylonJS Viewer by programmatically passing a configuration object using JavaScript. It requires the BabylonJS Viewer library to be loaded and accessible via the BabylonViewer namespace. The configuration object specifies scene debugging, camera auto-rotation, and a model URL. The DOM element identified by 'my-amazing-element' acts as the container, while all HTML attributes on the viewer element are ignored in favor of the JavaScript configuration. No HTML is required to configure the viewer in this method, and all initial options are provided directly in the script.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet domElement = document.getElementById(\"my-amazing-element\");\n\nlet viewer = new BabylonViewer.DefaultViewer(domElement, {\n  scene: {\n    debug: true,\n  },\n  camera: {\n    behaviors: {\n      autoRotate: 0,\n    },\n  },\n  model: {\n    url: \"https://playground.babylonjs.com/scenes/Rabbit.babylon\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Gradient Material in Babylon.js\nDESCRIPTION: Creates a sphere mesh and applies a gradient material that transitions from red to blue. The material is configured with offset parameters to control the gradient appearance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/gradientMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { segments: 32, diameter: 2 }, scene);\n\nvar gradientMaterial = new BABYLON.GradientMaterial(\"grad\", scene);\ngradientMaterial.topColor = BABYLON.Color3.Red(); // Set the gradient top color\ngradientMaterial.bottomColor = BABYLON.Color3.Blue(); // Set the gradient bottom color\ngradientMaterial.offset = 0.25;\n\nsphere.material = gradientMaterial;\n```\n\n----------------------------------------\n\nTITLE: Accessing Helper Light in Babylon.js\nDESCRIPTION: Shows methods to access the light created by helper methods\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultLight();\n\nvar helperLight = scene.lights[scene.lights.length - 1];\n\n//OR\n\nvar helperLight = scene.lights.pop();\nscene.lights.push(helperLight);\n```\n\n----------------------------------------\n\nTITLE: Modifying Cone Emitter Properties in Babylon.js (JavaScript)\nDESCRIPTION: Updates the radius and angle properties (`radius`, `angle`) of a previously created cone emitter object (`coneEmitter`). Requires a `coneEmitter` object obtained from `createConeEmitter`, a new radius value (Number), and a new angle value (Number, in radians).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconeEmitter.radius = 3.4;\nconeEmitter.angle = Math.PI / 2;    \n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Babylon.js React Component\nDESCRIPTION: A reusable React component (SceneComponent.jsx) that initializes a Babylon.js engine and scene, handles rendering, resizing, and cleanup. It provides props for customizing the engine, scene, and render functions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_ReactJS.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useRef } from \"react\";\nimport { Engine, Scene } from \"@babylonjs/core\";\n\nexport default ({ antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest }) => {\n  const reactCanvas = useRef(null);\n\n  // set up basic engine and scene\n  useEffect(() => {\n    const { current: canvas } = reactCanvas;\n\n    if (!canvas) return;\n\n    const engine = new Engine(canvas, antialias, engineOptions, adaptToDeviceRatio);\n    const scene = new Scene(engine, sceneOptions);\n    if (scene.isReady()) {\n      onSceneReady(scene);\n    } else {\n      scene.onReadyObservable.addOnce((scene) => onSceneReady(scene));\n    }\n\n    engine.runRenderLoop(() => {\n      if (typeof onRender === \"function\") onRender(scene);\n      scene.render();\n    });\n\n    const resize = () => {\n      scene.getEngine().resize();\n    };\n\n    if (window) {\n      window.addEventListener(\"resize\", resize);\n    }\n\n    return () => {\n      scene.getEngine().dispose();\n\n      if (window) {\n        window.removeEventListener(\"resize\", resize);\n      }\n    };\n  }, [antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady]);\n\n  return <canvas ref={reactCanvas} {...rest} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Lines with Custom Width in BabylonJS\nDESCRIPTION: Creates a custom mesh representing a 2D line with configurable width and path. Supports closed paths, standard/custom UV mapping, and handles line joins with proper angle calculations. Takes name, options (width, path, closed, standardUV), and scene parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar line2D = function(name, options, scene) {\n\t//Arrays for vertex positions and indices\n\tvar positions = [];\n\tvar indices = [];\n        var normals = [];\n\n        var width = options.width || 1;\n        var path = options.path;\n\tvar closed = options.closed || false;\n\tif(options.standardUV === undefined) {\n\t\tstandardUV = true;\n\t}\n\telse {\n\t\tstandardUV = options.standardUV;\n\t}\n\n\tvar interiorIndex;\n\t\n\t//Arrays to hold wall corner data \n\tvar innerBaseCorners = [];\n\tvar outerBaseCorners = [];\n\t\n\tvar outerData = [];\n        var innerData = [];\n\tvar angle = 0;\n\t\n\tvar nbPoints = path.length;\n\tvar line = BABYLON.Vector3.Zero();\n\tvar nextLine = BABYLON.Vector3.Zero();\n\tpath[1].subtractToRef(path[0], line);\n\n\tif(nbPoints > 2 && closed) {\t\n\t\tpath[2].subtractToRef(path[1], nextLine);    \n\t\tfor(let p = 0; p < nbPoints; p++) {    \n\t\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            \n\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().y;                \n\t\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\t\tline.normalize();\n\t\t\tinnerData[(p + 1) % nbPoints] = path[(p + 1) % nbPoints];\n\t\t\touterData[(p + 1) % nbPoints] = path[(p + 1) % nbPoints].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));        \n                line = nextLine.clone();        \n\t\t\tpath[(p + 3) % nbPoints].subtractToRef(path[(p + 2) % nbPoints], nextLine);    \n\t\t}\n\t}\n\telse {\n\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\tline.normalize();\t\t\n\t\tinnerData[0] = path[0];\n\t\touterData[0] = path[0].add(lineNormal.scale(width));\n\t\n\t\tfor(let p = 0; p < nbPoints - 2; p++) {\t\n\t\t\tpath[p + 2].subtractToRef(path[p + 1], nextLine);\n\t\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));\t\t\t\n\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().y;\t\t\t\n\t\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\t\tline.normalize();\n\t\t\tinnerData[p + 1] = path[p + 1];\n\t\t\touterData[p + 1] = path[p + 1].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));\t\t\n\t\t\tline = nextLine.clone();\t\t\t\n\t\t}\n\t\tif(nbPoints > 2) {\n\t\t\tpath[nbPoints - 1].subtractToRef(path[nbPoints - 2], line);\n\t\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\t\tline.normalize();\t\t\n\t\t\tinnerData[nbPoints - 1] = path[nbPoints - 1];\n\t\t\touterData[nbPoints - 1] = path[nbPoints - 1].add(lineNormal.scale(width));\n\t\t}\n\t\telse{\n\t\t\tinnerData[1] = path[1]\n\t\t\touterData[1] = path[1].add(lineNormal.scale(width));\n\t\t}\n\t}\n     \n\tvar maxX = Number.MIN_VALUE;\n\tvar minX = Number.MAX_VALUE;\n\tvar maxZ = Number.MIN_VALUE;\n\tvar minZ = Number.MAX_VALUE;\n\t\n\tfor(let p = 0; p < nbPoints; p++) {\n\t\tpositions.push(innerData[p].x, innerData[p].y, innerData[p].z);\n\t\tmaxX = Math.max(innerData[p].x, maxX);\n\t\tminX = Math.min(innerData[p].x, minX);\n\t\tmaxZ = Math.max(innerData[p].z, maxZ);\n\t\tminZ = Math.min(innerData[p].z, minZ);\n\t}\n\n\tfor(let p = 0; p < nbPoints; p++) {\n\t\tpositions.push(outerData[p].x, outerData[p].y, outerData[p].z);\n\t\tmaxX = Math.max(innerData[p].x, maxX);\n\t\tminX = Math.min(innerData[p].x, minX);\n\t\tmaxZ = Math.max(innerData[p].z, maxZ);\n\t\tminZ = Math.min(innerData[p].z, minZ);\n\t}\n\n        for(let i = 0; i < nbPoints - 1; i++) {\n            indices.push(i, i + 1, nbPoints + i + 1);\n            indices.push(i, nbPoints + i + 1, nbPoints + i)\n        }\n\t\n\tif(nbPoints > 2 && closed) {\n\t\tindices.push(nbPoints - 1, 0, nbPoints);\n            indices.push(nbPoints - 1, nbPoints, 2 * nbPoints - 1)\n\t}\n\n\tvar normals = [];\n        var uvs =[];\n\n\tif(standardUV) {\n\t\tfor(let p = 0; p < positions.length; p += 3) {\n\t\t\tuvs.push((positions[p] - minX)/(maxX - minX), (positions[p + 2] - minZ)/(maxZ - minZ));                \n\t\t}\n\t}\n\telse {\n\t\tvar flip = 0;\n\t\tvar p1 = 0;\n\t\tvar p2 = 0;\n\t\tvar p3 = 0;\n\t\tvar v0 = innerData[0];\n\t\tvar v1 = innerData[1].subtract(v0);\n\t\tvar v2 = outerData[0].subtract(v0);\n\t\tvar v3 = outerData[1].subtract(v0);\n\t\tvar axis = v1.clone();\n\t\taxis.normalize();\n\n\t\tp1 = BABYLON.Vector3.Dot(axis,v1);\n\t\tp2 = BABYLON.Vector3.Dot(axis,v2);\n\t\tp3 = BABYLON.Vector3.Dot(axis,v3);\n\t\tvar minX = Math.min(0, p1, p2, p3);\n\t\tvar maxX = Math.max(0, p1, p2, p3);\n\t\t\n\t\tuvs[2 * indices[0]] = -minX/(maxX - minX);\n\t\tuvs[2 * indices[0] + 1] = 1;\n\t\tuvs[2 * indices[5]] = (p2 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[5] + 1] = 0;\n\t\t\n\t\tuvs[2 * indices[1]] = (p1 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[1] + 1] = 1;\n\t\tuvs[2 * indices[4]] = (p3 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[4] + 1] = 0;\n\t\n\t\tfor(let i = 6; i < indices.length; i +=6) {\n\t\t\n\t\t\tflip = (flip + 1) % 2;\n\t\t\tv0 = innerData[0];\n\t\t\tv1 = innerData[1].subtract(v0);\n\t\t\tv2 = outerData[0].subtract(v0);\n\t\t\tv3 = outerData[1].subtract(v0);\n\t\t\taxis = v1.clone();\n\t\t\taxis.normalize();\n\n\t\t\tp1 = BABYLON.Vector3.Dot(axis,v1);\n\t\t\tp2 = BABYLON.Vector3.Dot(axis,v2);\n\t\t\tp3 = BABYLON.Vector3.Dot(axis,v3);\n\t\t\tvar minX = Math.min(0, p1, p2, p3);\n\t\t\tvar maxX = Math.max(0, p1, p2, p3);\n\t\t\n\t\t\tuvs[2 * indices[i + 1]] = flip + Math.cos(flip * Math.PI) * (p1 - minX)/(maxX - minX);\n\t\t\tuvs[2 * indices[i + 1] + 1] = 1;\n\t\t\tuvs[2 * indices[i + 4]] = flip + Math.cos(flip * Math.PI) * (p3 - minX)/(maxX - minX);\n\t\t\tuvs[2 * indices[i + 4] + 1] = 0;\n\t\t}\n\t}\n\t\n\tBABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\tBABYLON.VertexData._ComputeSides(BABYLON.Mesh.DOUBLESIDE, positions, indices, normals, uvs);  \t\n\tconsole.log(uvs)\t\t\n\t//Create a custom mesh  \n\tvar customMesh = new BABYLON.Mesh(name, scene);\n\n\t//Create a vertexData object\n\tvar vertexData = new BABYLON.VertexData();\n\n\t//Assign positions and indices to vertexData\n\tvertexData.positions = positions;\n\tvertexData.indices = indices;\n\tvertexData.normals = normals;\n\tvertexData.uvs = uvs;\n\n\t//Apply vertexData to custom mesh\n\tvertexData.applyToMesh(customMesh);\n\t\n\treturn customMesh;\n\t\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Available WebXR Features\nDESCRIPTION: Retrieves an array of available WebXR features using the static GetAvailableFeatures method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst availableFeatures = WebXRFeaturesManager.GetAvailableFeatures();\n```\n\n----------------------------------------\n\nTITLE: Inverting Bump Map Direction in Babylon.js\nDESCRIPTION: Controls the direction of bumps and dents by inverting the normal map along X and Y axes. This allows for fine-tuning the visual effect of the bump map.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/moreMaterials.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMaterial = new BABYLON.StandardMaterial(\"myMaterial\", scene);\nmyMaterial.bumpTexture = new BABYLON.Texture(\"PATH TO NORMAL MAP\", scene);\nmyMaterial.invertNormalMapX = true;\nmyMaterial.invertNormalMapY = true;\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Viewer in Project\nDESCRIPTION: JavaScript import statement to include the Babylon.js viewer in a project after NPM installation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer.v1.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"babylonjs-viewer\";\n```\n\n----------------------------------------\n\nTITLE: Enabling the Babylon.js Inspector in Viewer\nDESCRIPTION: Shows how to enable the Babylon.js Inspector for debugging purposes by setting the scene.debug attribute to true.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"minimal\" scene.debug=\"true\" model=\"https://playground.babylonjs.com/scenes/Rabbit.babylon\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Initial HTML Template Setup\nDESCRIPTION: Basic HTML template file structure for the BabylonJS project without canvas element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gettingSetUp.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title of Your Project</title>\n    </head>\n    <body>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Changing Reference Space Mode\nDESCRIPTION: Example of switching between different reference space types\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Session was created using the `local` reference space mode, let's move to `local-floor` :\nconst newReferenceSpace = await xrSession.setReferenceSpaceTypeAsync(\"local-floor\");\n\n// The session will take care of updating all reference space objects (base, viewer, and the current one).\n```\n\n----------------------------------------\n\nTITLE: Expected Colyseus Server Start Output (Shell)\nDESCRIPTION: This text block shows the typical console output when the Colyseus development server starts successfully using `npm start`. It indicates that the environment variables are loaded, Express is initialized, and the Colyseus WebSocket server is listening on the default local address `ws://localhost:2567`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> my-app@1.0.0 start\n> ts-node-dev --respawn --transpile-only src/index.ts\n\n✅ development.env loaded.\n✅ Express initialized\n🏟 Your Colyseus App\n⚔️ Listening on ws://localhost:2567\n```\n\n----------------------------------------\n\nTITLE: Applying and Enabling a Decal Map on a Mesh - Babylon.js JavaScript\nDESCRIPTION: This snippet illustrates how to attach a previously created decal map to a mesh and enable its rendering using Babylon.js's material plugin system. The process requires that the mesh has a decal map and that the mesh's material supports decal maps; enabling is done by setting the material's decalMap.isEnabled property to true. This is essential to ensure proper plugin initialization before rendering, and users should ensure this step is executed before the mesh is rendered for the first time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/decals.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.decalMap = decalMap;\nmesh.material.decalMap.isEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Importing PMX Models in Babylon.js\nDESCRIPTION: TypeScript code for importing PMX models using babylon-mmd. This requires a side effect import for the PMX loader and uses ImportMeshAsync to load the model.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/mmdLoader.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"babylon-mmd/esm/Loader/pmxLoader\"; // side effect import\n\nconst mmdMesh = await ImportMeshAsync(\"your_model_path.pmx\", scene).then((result) => result.meshes[0]);\n```\n\n----------------------------------------\n\nTITLE: Adding Built-in Camera Inputs in Babylon.js\nDESCRIPTION: Shows different methods for adding built-in camera inputs using shorthand functions and direct instantiation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/customizingCameraInputs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FreeCamera(\"sceneCamera\", new BABYLON.Vector3(0, 1, -15), scene);\ncamera.inputs.addGamepad();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst camera = new BABYLON.FreeCamera(\"sceneCamera\", new BABYLON.Vector3(0, 1, -15), scene);\ncamera.inputs.add(new BABYLON.FreeCameraGamepadInput());\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiGateBlock in BabylonJS Flow Graph\nDESCRIPTION: This example demonstrates how to create and configure a MultiGateBlock for branching execution in a flow graph. It shows setting up multiple output signals and connecting them to other blocks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst multiGate = new FlowGraphMultiGateBlock({\n  outputSignalCount: 5, // required\n  isLoop: true, // optional\n});\nmultiGate.out_0.connectTo(nextBlock1.in);\nmultiGate.out_1.connectTo(nextBlock2.in);\nmultiGate.out_2.connectTo(nextBlock3.in);\n// and so on, until out_4\n```\n\n----------------------------------------\n\nTITLE: Using Specular-Glossiness Texture with PBR in Babylon.js\nDESCRIPTION: This snippet shows how to use a specular-glossiness texture to control surface properties per-pixel. The texture provides RGB for specular color and alpha for glossiness.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/introToPBR.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npbr.diffuseColor = new BABYLON.Color3(1.0, 0.766, 0.336);\npbr.specularColor = new BABYLON.Color3(1.0, 1.0, 1.0);\npbr.glossiness = 1.0;\npbr.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\"/textures/environment.dds\", scene);\npbr.specularGlossinessTexture = new BABYLON.Texture(\"/textures/sg.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Using Particle Velocity for Foam Simulation in GLSL\nDESCRIPTION: GLSL shader code that uses particle velocity data to simulate foam in fluid rendering. The velocity is stored in the G component of the depth texture and is used to mix white color into the final render when velocity exceeds a threshold.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/implementation_details.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n    vec2 depthVel = texture2D(depthSampler, texCoord).rg ;\n    ...\n#ifdef FLUIDRENDERING_VELOCITY\n    float velocity = depthVel.g ;\n    finalColor = mix(finalColor, vec3(1.0), smoothstep(0.3, 1.0, velocity / 6.0)) ;\n#endif\n```\n\n----------------------------------------\n\nTITLE: Displaying Combined Bounding Box on Sphere Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Enables the visualization of the bounding box for the 'sphere' mesh. In this specific context, after the sphere's bounding info has been updated to encompass both the sphere and the ground, this line makes the newly calculated, larger bounding box visible. Assumes 'sphere' is a valid Babylon.js mesh object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.showBoundingBox = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rocket Particle System in Babylon.js\nDESCRIPTION: This snippet configures the particle system for the rocket portion of the firework. It sets up the texture, emission rate, color properties, and size gradients to create a visual effect that decreases in size over its lifetime.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Rocket particle system\nlet rocket = new ParticleSystem(\"rocket\", 350, scene);\nrocket.particleTexture = new Texture(\"./textures/flare.png\", scene);\nrocket.emitter = sphere;\nrocket.emitRate = 20;\nrocket.minEmitBox = new Vector3(0, 0, 0);\nrocket.maxEmitBox = new Vector3(0, 0, 0);\nrocket.color1 = new Color4(0.49, 0.57, 0.76);\nrocket.color2 = new Color4(0.29, 0.29, 0.66);\nrocket.colorDead = new Color4(0, 0, 0.2, 0.5);\nrocket.minSize = 1;\nrocket.maxSize = 1;\nrocket.addSizeGradient(0, 1);\nrocket.addSizeGradient(1, 0.01);\nthis._rocket = rocket;\n```\n\n----------------------------------------\n\nTITLE: Generating Fur Texture and Shells in Babylon.js\nDESCRIPTION: Creates a fur texture and generates shells for the fur effect. The quality parameter determines the number of shells created.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar furTexture = BABYLON.FurMaterial.GenerateTexture(\"furTexture\", scene);\n\nfurMaterial.furTexture = furTexture;\nmyMesh.material = furMaterial;\n\nvar quality = 30; // Average quality\n\n// Create shells\nvar shells = BABYLON.FurMaterial.FurifyMesh(myMesh, quality);\n```\n\n----------------------------------------\n\nTITLE: Applying Camera-Facing Rotation to Mesh in Babylon.js\nDESCRIPTION: This snippet applies a calculated rotation to a mesh object (`mesh`) to align it based on three pre-calculated orthogonal vectors (`axis1`, `axis2`, `axis3`). It uses `BABYLON.Vector3.RotationFromAxis` to determine the necessary Euler angles and assigns them to the mesh's `rotation` property. This is typically used after calculating the axes needed to make the mesh face the camera, as shown in the preceding example.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/target_align.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotation = BABYLON.Vector3.RotationFromAxis(axis1, axis2, axis3);\n```\n\n----------------------------------------\n\nTITLE: Overriding Key Properties in VirtualKeyboard Row in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows how to override default visual properties for specific keys when adding a row using `addKeysRow`. It takes a second array parallel to the keys array. Each element in the second array is either `null` (to use default properties) or an object conforming to `KeyPropertySet` to specify custom properties like `width`. In this example, the 'b' key is given a width of \"200px\".\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\naddKeysRow([\"a\", \"b\"], [null, { width: \"200px\" }]);\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Babylon.js Asset Host Development Server using NPM\nDESCRIPTION: This command executes the 'dev' script defined in the package.json of the Babylon.js Asset Host Template repository. It starts a local web server, typically listening on http://127.0.0.1:8181, to serve static files from the 'docs' directory for development purposes. Requires Node.js, NPM, and installed dependencies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Front and Back UV Mapping for Tiled Plane in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to set different UV mappings for the front and back of a tiled plane. It uses Vector4 to define the UV coordinates for each side.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_plane.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = new BABYLON.Vector4(0.5,0, 1, 1); // front image = half the whole image along the width \nconst b = new BABYLON.Vector4(0,0, 0.5, 1); // back image = second half along the width\n\nconst options = {\n    frontUVs: f,\n\tbackUVs: b,\n\tsideOrientation: BABYLON.Mesh.DOUBLESIDE\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS to GUIManager in JavaScript\nDESCRIPTION: Adds additional CSS styling to the GUI managed by the GUIManager instance. This method allows for dynamic styling updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddStyle(string:css)\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Terrain with Custom UV Map in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Dynamic Terrain with a custom UV map. It shows the initialization of map data, UV data, and the terrain object with custom parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 100; // 100 terrain subdivisions\nconst params = {\n  mapData: mapData, // data map declaration: what data to use?\n  mapSubX: mapSubX, // how are these data stored by rows and columns\n  mapSubZ: mapSubZ,\n  mapUVs: mapUVs, // the array of map UVs\n  terrainSub: terrainSub, // how many terrain subdivisions wanted\n};\nconst terrain = new BABYLON.DynamicTerrain(\"t\", params, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadows-Only Lightmap Mode in Babylon.js\nDESCRIPTION: This code sets a light's lightmap mode to LIGHTMAP_SHADOWSONLY, where only the shadows cast from this light will be applied with the lightmap.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/lights_introduction.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlight.lightmapMode = BABYLON.Light.LIGHTMAP_SHADOWSONLY;\n```\n\n----------------------------------------\n\nTITLE: Assigning Texture Atlas as Material in Babylon.js\nDESCRIPTION: This code shows how to assign a texture atlas as a material to a mesh in Babylon.js. It creates a standard material, loads the texture, and applies it to the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mat = new BABYLON.StandardMaterial(\"mat\", scene);\nconst texture = new BABYLON.Texture(\"URL of Texture Atlas\", scene);\nmat.diffuseTexture = texture;\n\nmesh.material = mat;\n```\n\n----------------------------------------\n\nTITLE: Defining SpriteManagerOptions Interface in Babylon.js\nDESCRIPTION: Defines the TypeScript interface for SpriteManagerOptions, which includes spriteRendererOptions for configuring sprite rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprites_introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SpriteManagerOptions {\n    spriteRendererOptions: SpriteRendererOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Parameterized Quadratic Path in Babylon.js\nDESCRIPTION: Creates a path for a quadratic function using a parameter t, where x = t and y = t², demonstrating parameterization of equations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_maths.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = [];\nfor (let t = -5; t <= 5; t++) {\n    let x = t;\n    let y = t * t\n    path.push(new BABYLON.Vector3(x, y, 6))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mitred Extrusion Function in Babylon.js\nDESCRIPTION: A custom function that creates extruded shapes with sharp mitred corners along a specified path. Takes a shape array, path array, and closure option as parameters. Generates proper mitre joins by calculating intersection planes at corners and creating ribbon meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Mitred.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar mitredExtrude = function (name, options, scene) {\n    var shape = options.shape;\n    var path = options.path;\n    var closed = options.close || false;\n\n    var nbPoints = path.length;\n    var line = BABYLON.Vector3.Zero();\n    var nextLine = BABYLON.Vector3.Zero();\n    var axisX = BABYLON.Vector3.Zero();\n    var axisY = BABYLON.Vector3.Zero();\n    var axisZ = BABYLON.Vector3.Zero();\n    var nextAxisX = BABYLON.Vector3.Zero();\n    var nextAxisY = BABYLON.Vector3.Zero();\n    var nextAxisZ = BABYLON.Vector3.Zero();\n    var startPoint = BABYLON.Vector3.Zero();\n    var nextStartPoint = BABYLON.Vector3.Zero();\n    var bisector = BABYLON.Vector3.Zero();\n    var point = BABYLON.Vector3.Zero();\n    var prjctZ = 0;\n    var distance = 0;\n    var ray;\n\n    var allPaths = [];\n\n    for (let s = 0; s < shape.length; s++) {\n        path[1].subtractToRef(path[0], line);\n        axisZ = line.clone().normalize();\n        axisX = BABYLON.Vector3.Cross(scene.activeCamera.position, axisZ).normalize();\n        axisY = BABYLON.Vector3.Cross(axisZ, axisX);\n        startPoint = path[0].add(axisX.scale(shape[s].x)).add(axisY.scale(shape[s].y));\n        var ribbonPath = [startPoint.clone()];\n        for (let p = 0; p < nbPoints - 2; p++) {\n            path[p + 2].subtractToRef(path[p + 1], nextLine);\n            nextAxisZ = nextLine.clone().normalize();\n            nextAxisX = BABYLON.Vector3.Cross(scene.activeCamera.position, nextAxisZ).normalize();\n            nextAxisY = BABYLON.Vector3.Cross(nextAxisZ, nextAxisX);\n            nextAxisZ.subtractToRef(axisZ, bisector);\n            planeParallel = BABYLON.Vector3.Cross(nextAxisZ, axisZ);\n            planeNormal = BABYLON.Vector3.Cross(planeParallel, bisector);\n            plane = BABYLON.Plane.FromPositionAndNormal(path[p + 1], planeNormal);\n            ray = new BABYLON.Ray(startPoint, axisZ);\n            distance = ray.intersectsPlane(plane);\n            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);\n            ribbonPath.push(nextStartPoint.clone());\n\n            axisX = nextAxisX.clone();\n            axisY = nextAxisY.clone();\n            axisZ = nextAxisZ.clone();\n            startPoint = nextStartPoint.clone();\n        }\n        // Last Point\n        if (closed) {\n            path[0].subtractToRef(path[nbPoints - 1], nextLine);\n            nextAxisZ = nextLine.clone().normalize();\n            nextAxisX = BABYLON.Vector3.Cross(scene.activeCamera.position, nextAxisZ).normalize();\n            nextAxisY = BABYLON.Vector3.Cross(nextAxisZ, nextAxisX);\n            nextAxisZ.subtractToRef(axisZ, bisector);\n            planeParallel = BABYLON.Vector3.Cross(nextAxisZ, axisZ);\n            planeNormal = BABYLON.Vector3.Cross(planeParallel, bisector);\n            plane = BABYLON.Plane.FromPositionAndNormal(path[nbPoints - 1], planeNormal);\n            ray = new BABYLON.Ray(startPoint, axisZ);\n            distance = ray.intersectsPlane(plane);\n            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);\n            ribbonPath.push(nextStartPoint.clone());\n\n            axisX = nextAxisX.clone();\n            axisY = nextAxisY.clone();\n            axisZ = nextAxisZ.clone();\n            startPoint = nextStartPoint.clone();\n\n            path[1].subtractToRef(path[0], nextLine);\n            nextAxisZ = nextLine.clone().normalize();\n            nextAxisX = BABYLON.Vector3.Cross(scene.activeCamera.position, nextAxisZ).normalize();\n            nextAxisY = BABYLON.Vector3.Cross(nextAxisZ, nextAxisX);\n            nextAxisZ.subtractToRef(axisZ, bisector);\n            planeParallel = BABYLON.Vector3.Cross(nextAxisZ, axisZ);\n            planeNormal = BABYLON.Vector3.Cross(planeParallel, bisector);\n            plane = BABYLON.Plane.FromPositionAndNormal(path[0], planeNormal);\n            ray = new BABYLON.Ray(startPoint, axisZ);\n            distance = ray.intersectsPlane(plane);\n            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);\n            ribbonPath.shift();\n            ribbonPath.unshift(nextStartPoint.clone());\n        } else {\n            planeNormal = axisZ;\n            plane = BABYLON.Plane.FromPositionAndNormal(path[nbPoints - 1], planeNormal);\n            ray = new BABYLON.Ray(startPoint, axisZ);\n            distance = ray.intersectsPlane(plane);\n            startPoint.addToRef(axisZ.scale(distance), nextStartPoint);\n            ribbonPath.push(nextStartPoint.clone());\n        }\n        allPaths.push(ribbonPath);\n    }\n    var ribbon = BABYLON.MeshBuilder.CreateRibbon(\"ribbon\", { pathArray: allPaths, sideOrientation: BABYLON.Mesh.DOUBLESIDE, closeArray: true, closePath: closed }, scene);\n\n    return ribbon;\n};\n```\n\n----------------------------------------\n\nTITLE: Render Objects Menu Setup\nDESCRIPTION: Creates GUI controls for managing render objects, including particle size and alpha settings. Handles object selection and parameter updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderObjects = this._gui.addFolder(\"Render objects\");\nrenderObjects.$title.style.fontWeight = \"bold\";\n\nconst objectList = [];\nif (this._scene.fluidRenderer) {\n    for (let i = 0; i < this._scene.fluidRenderer.renderObjects.length; ++i) {\n        objectList.push(i);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the AsyncBus Interface in TypeScript\nDESCRIPTION: Implementation of the AsyncBus class that adds asynchronous capabilities to the messaging system. It uses Mitt as the underlying event bus implementation and adds support for awaitable message passing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAsyncBus.ts it implements this interface.\n```\n\n----------------------------------------\n\nTITLE: Scene Optimizer with Callbacks in JavaScript\nDESCRIPTION: Demonstrates using OptimizeAsync with success and failure callbacks and moderate degradation options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/sceneOptimizer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneOptimizer.OptimizeAsync(scene, BABYLON.SceneOptimizerOptions.ModerateDegradationAllowed(),\nfunction() {\n   // On success\n}, function() {\n   // FPS target not reached\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a U-Tube Ribbon in Babylon.js\nDESCRIPTION: Generates a U-shaped tube ribbon by incorporating the t parameter into x and y equations, demonstrating more complex surface generation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon_maths.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst paths = [];\nfor (let t = -6; t <= 6; t++) {\n    const path = [];\n    for (let a = 0; a < 2 * Math.PI; a += Math.PI / 8) {\n        let x = 2 * Math.cos(a) + t / 2;\n        let y = 2 * Math.sin(a) + t * t / 4;\n        let z = t;\n        path.push(new BABYLON.Vector3(x, y, z))\n    }\n    path.push(path[0]); // close circle\n    paths.push(path)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Engine Without Built-in Smoothing in JavaScript\nDESCRIPTION: Creates a Babylon.js Engine instance attached to a canvas element, explicitly disabling the built-in WebGL smoothing by passing `false` as the second argument. This approach is often used in conjunction with post-process anti-aliasing (like FXAA) to potentially achieve better visual results, especially with alpha-tested meshes, by mitigating issues like visible seams.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/transparent_rendering.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nengine = new BABYLON.Engine(canvas, false); // built-in smoothing will be disabled\n```\n\n----------------------------------------\n\nTITLE: Creating UV Vector4 for Front and Back Textures in Babylon.js\nDESCRIPTION: Creates Vector4 objects to define the UV mapping for front and back textures from a single image file. The f vector specifies the right half of the image for the front, while the b vector specifies the left half for the back.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/frontAndBackUVs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = new BABYLON.Vector4(0.5, 0, 1, 1); // front image = half the whole image along the width\nconst b = new BABYLON.Vector4(0, 0, 0.5, 1); // back image = second half along the width\n```\n\n----------------------------------------\n\nTITLE: Updating Input Element Control in Babylon.js\nDESCRIPTION: Demonstrates how to change the DOM element used for input events in a scene, including detaching and reattaching controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiCanvas.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.detachControl();\nengine.inputElement = myNewElement;\nscene.attachControl();\n```\n\n----------------------------------------\n\nTITLE: Removing Emit Rate Gradient in Babylon.js Particle System\nDESCRIPTION: This snippet shows how to remove a specific emit rate gradient from a particle system. It removes the gradient at the 0.4 point of the system's duration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeEmitRateGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Stopping Particle Emission in Babylon.js\nDESCRIPTION: Calls the `stop()` method on a particle system instance. This prevents new particles from being emitted, but existing particles will continue their lifecycle until their lifetime expires.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.stop();\n```\n\n----------------------------------------\n\nTITLE: Disabling WebXR Teleportation Landing Zone Animation\nDESCRIPTION: Shows how to disable the up-and-down animation of the teleportation landing zone ring.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  defaultTargetMeshOptions: {\n    disableAnimation: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttling in Babylon.js Flow Graph\nDESCRIPTION: Creates a throttle block that limits the execution frequency of its output flow. The output is triggered only once per specified duration regardless of input frequency.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst throttle = new FlowGraphThrottleBlock();\nthrottle.duration.setValue(2.5 /* seconds */, ctx);\nthrottle.out.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Mesh Parameters\nDESCRIPTION: Sets up parameters for agent constraints including walkable slopes, heights, and mesh simplification settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/createNavMesh.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst parameters = {\n  cs: 0.2,\n  ch: 0.2,\n  walkableSlopeAngle: 35,\n  walkableHeight: 1,\n  walkableClimb: 1,\n  walkableRadius: 1,\n  maxEdgeLen: 12,\n  maxSimplificationError: 1.3,\n  minRegionArea: 8,\n  mergeRegionArea: 20,\n  maxVertsPerPoly: 6,\n  detailSampleDist: 6,\n  detailSampleMaxError: 1\n};\n```\n\n----------------------------------------\n\nTITLE: Resizing Image to Canvas\nDESCRIPTION: Basic resizing operation to fit an image, video frame, or canvas content to the target canvas size.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/resizer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nresizer.resize(imageToResize);\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Direction and Power in BabylonJS\nDESCRIPTION: Sets the direction vectors and emission power for particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.direction1 = new BABYLON.Vector3(-2, 8, 2);\nparticleSystem.direction2 = new BABYLON.Vector3(2, 8, -2);\n\nparticleSystem.minEmitPower = 1;\nparticleSystem.maxEmitPower = 3;\nparticleSystem.updateSpeed = 0.025;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Viewer Instances Using Promises in Babylon.js\nDESCRIPTION: Shows how to get a viewer instance using the promise-based API, which waits for the viewer to be created if it hasn't been initialized yet.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// you will need to set an id attribute to the viewer element and use it here:\nBabylonViewer.viewerManager.getViewerPromiseById(\"viewer-id\").then(function (viewer) {\n  console.log(viewer.getBaseId());\n});\n```\n\n----------------------------------------\n\nTITLE: Hermite Quaternion Interpolation - Babylon.js - JavaScript\nDESCRIPTION: This code performs Hermite interpolation between two quaternions (point0 and point1), with specified tangent vectors, returning a new interpolated quaternion via BABYLON.Quaternion.Hermite. Commonly used for smooth rotational animation (slerp-like), this operation requires quaternions and tangent quaternions. Amount is a parameter between 0 and 1 indicating interpolation progression. Prerequisites: BABYLON.Quaternion, four quaternion objects, and numeric amount.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nBABYLON.Quaternion.Hermite(point0, tangent0, point1, tangent1, amount);\n```\n\n----------------------------------------\n\nTITLE: Retrieving GUISpinner Value in Babylon.js\nDESCRIPTION: Shows how to get the current number value of the GUISpinner element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSpinner.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetNumber()\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining for Input Checks in JavaScript\nDESCRIPTION: Shows a more concise way to check for input state using optional chaining.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/deviceSourceManager.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (deviceSourceManager.getDeviceSource(BABYLON.DeviceType.Xbox)?.getInput(BABYLON.XboxInput.A) === 1) {\n  // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Height Texture to Fur Material in Babylon.js\nDESCRIPTION: Uses a greyscale texture to control the length of the fur across the mesh surface.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.heightTexture = new BABYLON.Texture(\"speckles.jpg\", scene); // Set the fur length with a texture.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: Configuration for TypeScript compiler with ES6 target and DOM support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gettingSetUp.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"noResolve\": false,\n    \"noImplicitAny\": false,\n    \"sourceMap\": true,\n    \"preserveConstEnums\":true,\n    \"lib\": [\n        \"dom\",\n        \"es6\"\n    ],\n    \"rootDir\": \"src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Thickness Computation in SSR Pipeline\nDESCRIPTION: Code to enable automatic thickness computation in the SSR rendering pipeline. This mode uses additional depth rendering to calculate thickness more accurately.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nssr.enableAutomaticThicknessComputation = true;\n```\n\n----------------------------------------\n\nTITLE: Getting Properties in Mesh Components\nDESCRIPTION: Demonstrates how to retrieve properties from attached editor script components using the getProperty method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class TestMeshComponent extends BABYLON.MeshComponent {\n\n            protected start() :void {\n                const hello:string = this.getProperty(\"hello\", \"Default Value\");\n                console.log(\"Echo Hello: \" + hello);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Modules (WebGPU Shaders) in Webpack Build (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates using Webpack's `IgnorePlugin`. It configures the plugin to exclude any module whose resource path matches the regular expression `/ShadersWGSL/`, optionally limiting this rule to modules within the `@babylonjs` context. This effectively removes WebGPU shaders from the final bundle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nnew webpack.IgnorePlugin({\n    resourceRegExp: /ShadersWGSL/,\n    // optionally:\n    contextRegExp: /@babylonjs/,\n}),\n```\n```\n\n----------------------------------------\n\nTITLE: Simulating If Statements with Lerp in Node Material Editor (Conceptual)\nDESCRIPTION: Demonstrates the concept of using the Lerp (Linear Interpolation) block in the Babylon.js Node Material Editor to achieve conditional logic, similar to an 'if' statement. When 'gradient' is 0.0, the output is 'a'; when it's 1.0, the output is 'b'. This is used when a direct 'if' block is unavailable, often for performance reasons or editor limitations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_19\n\nLANGUAGE: pseudocode\nCODE:\n```\nLerp(a, b, gradient)\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Mesh in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the standard method for creating a simple box mesh using the Babylon.js `MeshBuilder`. The Babylon.js engine processes this high-level code, generating underlying vertex data and corresponding shader code for the GPU.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/introToShaders.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", {}, scene);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Babylon.js SceneManager Prefab Functions\nDESCRIPTION: TypeScript declaration module for Babylon.js SceneManager class showing the available prefab-related functions. These functions allow checking for prefabs, retrieving prefab meshes, and instantiating prefabs in a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/07_RuntimePrefabs.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module BABYLON {\n    class SceneManager {\n\n        /** Checks the scene has the specified prefab mesh. */\n        hasPrefabMesh(prefabName: string): boolean;\n\n        /** Gets ths the raw prefab mesh from scene. */\n        getPrefabMesh(prefabName: string): BABYLON.Mesh;\n\n        /** Instantiates the specfied prefab object into scene. */\n        instantiatePrefab(prefabName: string, cloneName: string, newPosition?: BABYLON.Vector3, newRotation?: BABYLON.Vector3, newScaling?: BABYLON.Vector3, newParent?: Node): BABYLON.Mesh;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex Shader in HTML Script Tag (HTML/GLSL)\nDESCRIPTION: Shows how to embed GLSL vertex shader code directly within an HTML file using a `<script>` tag. The `type` attribute is set to `application/vertexShader` and an `id` (`vertexShaderCode`) is given for later reference in JavaScript. This shader calculates the vertex position and passes the UV coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/vertexShader\" id=\"vertexShaderCode\">\n    #ifdef GL_ES\n        precision highp float;\n    #endif\n\n    // Attributes\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    // Uniforms\n    uniform mat4 worldViewProjection;\n\n    // Normal\n    varying vec2 vUV;\n\n    void main(void) {\n        gl_Position = worldViewProjection * vec4(position, 1.0);\n    \n        vUV = uv;\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disposing SSAO Pipeline\nDESCRIPTION: Cleaning up and removing the SSAO pipeline from the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/SSAORenderPipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nssao.dispose();\n```\n\n----------------------------------------\n\nTITLE: Setting Refresh Rate for Auto-Calculated Depth Bounds\nDESCRIPTION: Configures how often the depth bounds calculation is performed. Higher values improve performance but may cause visual artifacts as the values lag behind the actual scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncsmShadowGenerator.autoCalcDepthBoundsRefreshRate = 2;\n```\n\n----------------------------------------\n\nTITLE: Basic Model Import in Babylon.js\nDESCRIPTION: Basic usage of ImportMeshAsync to load 3D models into a scene. Shows the simplest form of model importing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_import.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(folder_path + file_name, scene, optionalOptions);\n```\n\n----------------------------------------\n\nTITLE: Checking Mesh to Particle Intersection in JavaScript\nDESCRIPTION: Demonstrates the alternative approach of using the AbstractMesh method to check intersection with a particle. This uses the same underlying mechanism.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_physics.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// for instance, in your SPS.updateParticle(p) function : mesh / particle\nif (someMesh.intersectsMesh(p)) { // change p velocity vector }\n```\n\n----------------------------------------\n\nTITLE: Generating a Tree with QuickTreeGenerator in JavaScript\nDESCRIPTION: Creates a 3D tree using the QuickTreeGenerator function with customizable parameters for branch size, trunk dimensions, and materials. The function returns a tree mesh that can be used in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/treeGenerators/quickTreeGenerator.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = QuickTreeGenerator(sizeBranch, sizeTrunk, radius, trunkMaterial, leafMaterial, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Highlight Layers for Overlapping Meshes\nDESCRIPTION: Shows how to create separate HighlightLayers for different meshes to handle overlapping highlights correctly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/highlightLayer.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Add the highlight layer.\nconst hl1 = new BABYLON.HighlightLayer(\"hl1\", scene);\nhl1.addMesh(sphere, BABYLON.Color3.White());\nconst hl2 = new BABYLON.HighlightLayer(\"hl2\", scene);\nhl2.addMesh(ground, BABYLON.Color3.Red());\n```\n\n----------------------------------------\n\nTITLE: Using forceSharedVertices in Babylon.js v4.0+\nDESCRIPTION: Simple method call to force a mesh to share vertices, which reduces vertex count but may affect texture mapping. This is the modern approach available from Babylon.js version 4.0 onwards.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Minimise_Vertices.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.forceSharedVertices();\n```\n\n----------------------------------------\n\nTITLE: Adding an Event Block to a FlowGraph in Babylon.js (JavaScript)\nDESCRIPTION: This snippet illustrates creating a custom event block instance and registering it to a FlowGraph with 'addEventBlock'. The event block must conform to the expected interface. Replace 'MyNewEventblock' with the actual implementation. This enables the graph to respond to specific events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst eventblock = new MyNewEventblock();\ngraph.addEventBlock(eventblock);\n```\n\n----------------------------------------\n\nTITLE: Animating Digital Rain Post Process Blend\nDESCRIPTION: This snippet shows how to animate the blending of the Digital Rain effect with the normal scene rendering. It uses the scene's registerBeforeRender method to update the mixToNormal parameter continuously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/digitalRainPP.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.DigitalRainPostProcess(\"DigitalRain\", camera);\n// Displays the scene.\nvar alpha = 0;\nscene.registerBeforeRender(function() {\n    alpha += 0.01;\n    postProcess.mixToNormal = Math.cos(alpha) * 0.5 + 0.5; // between 0 and 1.\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Box with Custom Face Colors in Babylon.js\nDESCRIPTION: Creates a box mesh with custom face colors using MeshBuilder options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  width: 10,\n  height: 3,\n  depth: 5,\n  faceColors: faceColors,\n};\n\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Adding and Connecting Filter Blocks\nDESCRIPTION: Demonstrates how to add blocks to a Smart Filter and connect them together using connection points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howSmartFiltersWork.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst blur = new BlurBlock(smartFilter, \"blur\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nvideoInput.output.connectTo(blur.input);\nblur.output.connectTo(blackAndWhite.input);\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntitleInput.output.connectTo(smartFilter.output);\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Array Mesh Transformations with Parent Mesh - Babylon.js JavaScript\nDESCRIPTION: This snippet animates a 'disc' mesh by rotating it around two axes and moving it along a path determined by an angle 'phi'. An array of boxes, representing buildings, is merged into a single mesh ('boxes') whose position and rotation are kept in sync with the 'disc' by assigning the same rotation quaternion and using TransformCoordinates for position. The animation increments 'phi' to create circular movement. The snippet assumes prior creation of disc, boxes, boxes_position, and other relevant variables within a Babylon.js scene and is placed inside registerAfterRender. Babylon.js library is required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/transform_coords.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n    var phi = 0;\n    scene.registerAfterRender(function () {\n        matrix = disc.getWorldMatrix();\n        disc.rotate(BABYLON.Axis.Y, Math.PI / 150, BABYLON.Space.LOCAL);\n        disc.rotate(BABYLON.Axis.Z, Math.PI / 200, BABYLON.Space.LOCAL);\n        disc.position = new BABYLON.Vector3(15 * Math.cos(phi), 16 * Math.sin(phi), 5)\n        boxes.rotationQuaternion = disc.rotationQuaternion;\n        boxes.position = BABYLON.Vector3.TransformCoordinates(boxes_position, matrix);\n        phi +=0.01;\n\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Scene and Camera with BabylonJS - JavaScript\nDESCRIPTION: Sets up a new scene with black background, attaches a FreeCamera fixed at the center, and establishes its target. Serves as the initial preparation step for a new state or scene. Depends on BabylonJS (Scene, Color4, FreeCamera, Vector3) and an existing engine instance. Inputs: engine, scene configuration. Outputs: a prepared Scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis._scene.detachControl();\nlet scene = new Scene(this._engine);\nscene.clearColor = new Color4(0, 0, 0, 1);\nlet camera = new FreeCamera(\"camera1\", new Vector3(0, 0, 0), scene);\ncamera.setTarget(Vector3.Zero());\n```\n\n----------------------------------------\n\nTITLE: Enabling the Old Audio Engine in Babylon.js Engine Constructor\nDESCRIPTION: This snippet demonstrates how to enable the old audio engine when creating a Babylon.js Engine instance by setting the audioEngine option to true in the constructor options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v2/migrateFromV1.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = new BABYLON.Engine(canvas, true, { audioEngine: true }, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Size and Lifetime in BabylonJS\nDESCRIPTION: Sets the minimum and maximum sizes and lifetimes for particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.minSize = 0.1;\nparticleSystem.maxSize = 0.5;\n\nparticleSystem.minLifeTime = 2;\nparticleSystem.maxLifeTime = 3.5;\n```\n\n----------------------------------------\n\nTITLE: Disabling Context Evaluation in GeometryTransformBlock (Babylon.js, JavaScript)\nDESCRIPTION: This snippet sets a block's evaluateContext property to false, optimizing performance for graphs where contextual reevaluation is unnecessary. Dependencies include a GeometryTransformBlock or compatible block from the NodeGeometry system. Setting this flag prevents repeated context computation during instancing, especially useful for large-scale mesh generation. Input is the relevant block reference; there is no direct output, but performance is improved for certain workflows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmyBlock.evaluateContext = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Watch Face with Babylon.js GUI\nDESCRIPTION: Creates a dynamic watch face using Babylon.js GUI and a coroutine mechanism to update the text. This enables the watch to display the current time with hours, minutes, and seconds.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _createDynamicFace() {\n    // Find face mesh\n    const faceMesh = this._scene.getMeshByName(\"screen_face\");\n    \n    // Create dynamic texture for the face\n    const dynamicTexture = new AdvancedDynamicTexture.CreateForMesh(faceMesh, 1024, 1024);\n    \n    // Create digital time display\n    this._timeText = new TextBlock();\n    this._timeText.text = \"12:34:56\";\n    this._timeText.color = \"white\";\n    this._timeText.fontSize = 120;\n    this._timeText.fontFamily = \"Arial\";\n    this._timeText.top = -100;\n    dynamicTexture.addControl(this._timeText);\n    \n    // Start time updating coroutine\n    this._startCoroutine(this._updateTimeCoroutine());\n}\n\nprivate *_updateTimeCoroutine() {\n    while (true) {\n        const now = new Date();\n        const hours = now.getHours().toString().padStart(2, '0');\n        const minutes = now.getMinutes().toString().padStart(2, '0');\n        const seconds = now.getSeconds().toString().padStart(2, '0');\n        this._timeText.text = `${hours}:${minutes}:${seconds}`;\n        \n        yield new WaitForSeconds(1.0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fading Mesh Visibility on Pick using InterpolateValueAction in Babylon.js\nDESCRIPTION: Registers an action as part of an example scenario. It uses `BABYLON.InterpolateValueAction` triggered by `BABYLON.ActionManager.OnPickTrigger` (user touch/click) to animate the `mesh.visibility` property from its current value to 0.2 over 1000ms, effectively making the mesh partially transparent or 'faded out'. Requires an initialized `actionManager` on the `mesh`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, mesh, \"visibility\", 0.2, 1000));\n```\n\n----------------------------------------\n\nTITLE: Creating GUISlider Constructor in BabylonJS\nDESCRIPTION: Constructor for creating a new GUISlider component with customizable parameters including ID, options, GUI manager, callback function, and append settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSlider.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUISlider(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Quest 2 Controller Button Mapping Example\nDESCRIPTION: Example of handling button presses on Quest 2 controllers to scale 3D objects\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst xr_ids = motionController.getComponentIds();\nlet triggerComponent = motionController.getComponent(xr_ids[0]); //xr-standard-trigger\ntriggerComponent.onButtonStateChangedObservable.add(() => {\n  if (triggerComponent.pressed) {\n    Box_Right_Trigger.scaling = new BABYLON.Vector3(1.2, 1.2, 1.2);\n  } else {\n    Box_Right_Trigger.scaling = new BABYLON.Vector3(1, 1, 1);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PlayAnimation Block in BabylonJS\nDESCRIPTION: Demonstrates two ways to use the PlayAnimation block - one with a single animation and another with an animation group. Shows how to set up animation parameters and connect to next blocks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// option 1 - use animation\nconst someAnimation = new Animation(\"someAnimation\", \"position.x\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\nconst playAnimation = new FlowGraphPlayAnimationBlock();\nplayAnimation.animation.setValue(someAnimation, ctx);\nplayAnimation.object.setValue(mesh, ctx);\nplayAnimation.done.connectTo(nextBlock.in);\n\n// option 2 - use animation group\nconst someAnimationGroup = new AnimationGroup(\"someAnimationGroup\");\nconst playAnimationGroup = new FlowGraphPlayAnimationBlock();\nplayAnimationGroup.animationGroup.setValue(someAnimationGroup, ctx);\nplayAnimationGroup.done.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing AssetContainer Contents to Scene in Babylon.js (JavaScript)\nDESCRIPTION: Uses the addAllToScene and removeAllFromScene methods to transfer all assets from the AssetContainer into the active scene, and to remove them when needed. Dependencies include a pre-populated AssetContainer instance. These operations do not permanently destroy or clone assets; they toggle whether the contained nodes, meshes, cameras, etc. are part of the scene's processing pipeline. No input parameters are required beyond the container object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetContainers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Add all objects in the asset container to the scene\ncontainer.addAllToScene();\n\n// Remove all objects in the container from the scene\ncontainer.removeAllFromScene();\n```\n\n----------------------------------------\n\nTITLE: Importing PBR Material for Deserialization (JavaScript)\nDESCRIPTION: Imports the 'pbrMaterial' module to enable the deserialization of PBR materials from files. The framework relies on side effects from imports to know which material types can be loaded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Range Requests for glTF Loader in Babylon.js\nDESCRIPTION: This snippet demonstrates how to enable HTTP range requests for the Babylon.js glTF loader. It uses `OnPluginActivatedObservable` to add a callback that executes once when a scene loader plugin is activated. Inside the callback, it checks if the activated plugin is the 'gltf' loader and, if so, sets its `useRangeRequests` property to `true`. This allows the loader to partially download GLB files, which is essential for progressive loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/progressiveglTFLoad.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.SceneLoader.OnPluginActivatedObservable.addOnce(function (loader) {\n  if (loader.name === \"gltf\") {\n    loader.useRangeRequests = true;\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Physics Prestep Type (Action Mode) via Method in Babylon.js (JavaScript)\nDESCRIPTION: This snippet configures the physics prestep behavior for a physics aggregate's body using the `setPrestepType` method, providing finer control than the `disablePreStep` property. It explicitly sets the prestep mode to `PhysicsPrestepType.ACTION`, which updates the physics body's state from the scene transform node before the physics tick, allowing for effective interaction with other shapes during the move. This method allows specifying either `PhysicsPrestepType.TELEPORT` or `PhysicsPrestepType.ACTION`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/prestep.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naggregate.body.setPrestepType(PhysicsPrestepType.ACTION);\n```\n\n----------------------------------------\n\nTITLE: Including Dynamic Terrain Extension in HTML\nDESCRIPTION: HTML script tags showing how to include the Dynamic Terrain extension after the Babylon.js core library.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.js\"></script>\n<script src=\"dynamicTerrain.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing BabylonJS Dependencies\nDESCRIPTION: Commands to install core BabylonJS packages and optional GUI and Inspector modules using npm\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/core\nnpm install @babylonjs/gui\nnpm install @babylonjs/inspector\n```\n\n----------------------------------------\n\nTITLE: Resetting Car Rotation in BabylonJS\nDESCRIPTION: Applies the initial rotation quaternion to the car body at the start of each animation loop to prevent accumulation of floating point errors that cause the car's rotation to become askew over time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nif (i == 0) {\n  carBody.rotationQuaternion = startRotation;\n}\n```\n\n----------------------------------------\n\nTITLE: -120° Counter-Clockwise Triangle Center Rotation\nDESCRIPTION: Formula for R^C-, a -120° rotation of position vector xi⃗ + yj⃗ about the center of triangle OAB where O is the origin and A is at position (m,n). The transformation maps a point P to P².\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_6\n\nLANGUAGE: math\nCODE:\n```\nR^C-(xi⃗ + yj⃗) = (y - n)i⃗ + (m + n - x - y)j⃗\n```\n\n----------------------------------------\n\nTITLE: Implementing SurfaceMagnetismBehavior in BabylonJS\nDESCRIPTION: Creates behavior for making meshes stick to other meshes and orient along their normals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/meshBehaviors.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst surfaceMagnetismBehavior = new BABYLON.SurfaceMagnetismBehavior();\nsurfaceMagnetismBehavior.attach(mesh);\nsurfaceMagnetismBehavior.meshes = meshes;\n```\n\n----------------------------------------\n\nTITLE: Running Standard Validation Tests with WebGPU Engine Locally\nDESCRIPTION: URL endpoint for executing the standard Babylon.js validation test suite locally, specifically using the WebGPU engine. This helps verify compatibility and consistent behavior across engines.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUMiscellaneous.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:1338/tests/validation/?list=config&engine=webgpu\n```\n\n----------------------------------------\n\nTITLE: Getting Mesh Data in Babylon.js\nDESCRIPTION: Retrieves vertex positions and indices data from a mesh using Babylon.js VertexBuffer\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/InnerMeshPoints.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\nvar indices = mesh.getIndices();\n```\n\n----------------------------------------\n\nTITLE: Initializing BabylonJS Scene Object Structure\nDESCRIPTION: Creates a scene object structure to store Engine and Scene instances, with a method for scene creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst myScene = {\n  engine: null,\n  scene: null,\n  createScene: function(canvas) {\n    const engine = new Engine(canvas);\n\n```\n\n----------------------------------------\n\nTITLE: Automating SubMesh Updates in Babylon.js SPS\nDESCRIPTION: This code shows how to enable automatic updating of submeshes when particle materials are updated frequently, using the autoUpdateSubMeshes property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_material.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsps.autoUpdateSubMeshes = true;\nsps.setParticles(); // updates the particle material indexes AND recomputes the subMeshes\n```\n\n----------------------------------------\n\nTITLE: Calculating Vertex Position Over Time in GLSL Vertex Shader\nDESCRIPTION: This GLSL vertex shader code calculates the final position of each vertex for the firework burst effect. It takes the original vertex 'position', displaces it outwards along its 'normal' vector using a logarithmic function of the 'time' uniform to create an expanding effect that slows down over time. The resulting position 'p' is then transformed by the 'worldViewProjection' matrix to get the final screen coordinates. The 'j' variable is declared but not used.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing2.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main(void) {\n    vec3 p = position;\n    vec3 j = vec3(0., -1.0, 0.);\n    p = p + normal * log2(1. + time) * 25.0;\n    gl_Position = worldViewProjection * vec4(p, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Render Objects Menu in BabylonJS Fluid Renderer\nDESCRIPTION: Sets up the Render Objects menu to control properties of individual fluid render objects. Includes controls for selecting render object by index, adjusting particle size, and particle alpha transparency.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _makeMenuRenderObjects(): void {\n    if (!this._gui || !(this._scene.fluidRenderer?.renderObjects.length ?? 0)) {\n        return;\n    }\n\n    const params = {\n        objects_index: this._parameterRead(\"objects_index\"),\n        objects_particleSize: this._parameterRead(\"objects_particleSize\"),\n        objects_particleThicknessAlpha: this._parameterRead(\"objects_particleThicknessAlpha\"),\n    };\n\n    const renderObjects = this._gui.addFolder(\"Render objects\");\n    renderObjects.$title.style.fontWeight = \"bold\";\n\n    const objectList: number[] = [];\n    if (this._scene.fluidRenderer) {\n        for (let i = 0; i < this._scene.fluidRenderer.renderObjects.length; ++i) {\n            objectList.push(i);\n        }\n    }\n\n    this._addList(renderObjects, params, \"objects_index\", \"Index\", objectList);\n    this._renderObjectsGUIElements.push(this._addSlider(renderObjects, params, \"objects_particleSize\", \"Particle size\", 0, 2, 0.001));\n    this._renderObjectsGUIElements.push(this._addSlider(renderObjects, params, \"objects_particleThicknessAlpha\", \"Particle alpha\", 0, 1, 0.001));\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Playground Component\nDESCRIPTION: Example of how to embed a Babylon.js playground in documentation\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"playgroundId\" title=\"Playground title\" description=\"A short description\" image=\"Optional image url\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Color Mode and Primary Color\nDESCRIPTION: Shows how to configure color settings for background material using RGB color mode\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbackgroundMaterial.useRGBColor = false;\nbackgroundMaterial.primaryColor = BABYLON.Color3.Magenta();\n```\n\n----------------------------------------\n\nTITLE: Generating Custom UV Map Data for Dynamic Terrain in JavaScript\nDESCRIPTION: This code populates a data map with no elevation and creates a UV map as a flat array. It sets the u and v values in the 2D texture relative to the (x, z) coordinates of each map point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapData = new Float32Array(mapSubX * mapSubZ * 3); // x3 float values per point: x, y and z\nconst mapUVs = new Float32Array(mapSubX * mapSubZ * 2); // x2 because 2 values per point: u, v\nfor (const l = 0; l < mapSubZ; l++) {\n  for (const w = 0; w < mapSubX; w++) {\n    const x = (w - mapSubX * 0.5) * 2.0;\n    const z = (l - mapSubZ * 0.5) * 2.0;\n\n    mapData[3 * (l * mapSubX + w)] = x;\n    mapData[3 * (l * mapSubX + w) + 1] = 0.0;\n    mapData[3 * (l * mapSubX + w) + 2] = z;\n\n    mapUVs[2 * (l * mapSubX + w)] = w / mapSubX; // u\n    mapUVs[2 * (l * mapSubX + w) + 1] = l / mapSubZ; // v\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Operation with Geometry\nDESCRIPTION: Performs boolean operations between two geometry inputs, producing a single output mesh. Requires two geometry inputs and produces a modified geometry output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Disabling Manifest Check in Babylon.js\nDESCRIPTION: This code disables the manifest check in Babylon.js, allowing caching of downloaded resources without a manifest file. This is useful when you want to cache resources but don't want to provide a manifest file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeCached.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nengine.disableManifestCheck = true;\n```\n\n----------------------------------------\n\nTITLE: Pow Node Implementation\nDESCRIPTION: Power function node that raises a base value to an exponent. Supports Float, Int, Vector2, Vector3, and Vector4 types for both base and exponent inputs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Initializing ShaderBuilder Engine in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates the necessary initialization step for the ShaderBuilder extension. This function must be called before using the ShaderBuilder features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLONX.ShaderBuilder.InitializeEngine();\n```\n\n----------------------------------------\n\nTITLE: Initializing SendCustomEventBlock in BabylonJS Flow Graph\nDESCRIPTION: This snippet demonstrates how to create and use a SendCustomEventBlock for triggering custom events with data. It shows how to set up event data and later modify it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendCustomEvent = new FlowGraphSendCustomEventBlock({\n  eventId: \"myEvent\",\n  eventData: {\n    message: {\n      type: RichTypeString,\n      value: \"default overridable value\",\n    },\n    time: {\n      type: RichTypeNumber,\n      value: 0,\n    },\n    position: {\n      type: RichTypeVector3,\n      value: new Vector3(0, 0, 0),\n    },\n  },\n});\n\n// at a later time, you can set the value or connect it to a different block\n// the key \"time\" comes from the eventData passed\nsendCustomEvent.time.setValue(Date.now(), ctx);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Facet Normal in Babylon.js\nDESCRIPTION: These snippets demonstrate how to get the world normal of a specific facet, with and without allocating a new Vector3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst norm = mesh.getFacetNormal(50); // returns the world normal of the mesh 50th facet\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst norm = BABYLON.Vector3.Zero();\nmesh.getFacetNormalToRef(50, norm); // stores the facet world normal in the variable \"norm\"\n```\n\n----------------------------------------\n\nTITLE: Drawing Vectors for Visualization in Babylon.js (JavaScript)\nDESCRIPTION: Defines a utility function `drawVectors` that creates a `LineSystem` mesh to visualize a set of vectors originating from corresponding positions. It takes arrays of vectors and positions, an optional size scalar, and an optional color, returning the created `LineSystem` mesh. Useful for debugging path normals, tangents, etc.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawVectors(vectors, positions, size, color) {\n  color = color || BABYLON.Color3.White();\n  size = size || 1;\n\n  var lines = [];\n  for (let i = 0; i < vectors.length - 1; i++) {\n    var v1 = positions[i];\n    var v2 = v1.add(vectors[i].scale(size));\n    lines.push([v1, v2]);\n  }\n  var vectorLines = BABYLON.MeshBuilder.CreateLineSystem(\"vectorLines\", { lines: lines }, sc);\n  vectorLines.color = color;\n  return vectorLines;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Draco Decoder for Main Thread Execution (JavaScript)\nDESCRIPTION: Demonstrates configuring the Draco decoder to run directly on the main thread without using web workers. It imports the Draco WASM file as an ArrayBuffer and the Draco JS module, then assigns the WASM binary (`wasmBinary`) and the JS module (`jsModule`, obtained from `globalThis.DracoDecoderModule`) directly to the `DracoDecoder.DefaultConfiguration`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// import the wasm file as an arraybuffer\nimport wasm from \"@babylonjs/core/assets/Draco/draco_decoder_gltf.wasm\";\n// import the js module\nimport \"@babylonjs/core/assets/Draco/draco_decoder_gltf.js\";\nDracoDecoder.DefaultConfiguration.wasmBinary = wasm;\nDracoDecoder.DefaultConfiguration.jsModule = globalThis.DracoDecoderModule;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Viewer Instances Using Callbacks in Babylon.js\nDESCRIPTION: Shows different methods to retrieve viewer instances using both callback functions and observables, allowing access to initialized viewers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// using basic callback\nBabylonViewer.viewerManager.onViewerAdded = function (viewer) {\n  console.log(viewer);\n};\n\n// user observers\n\nBabylonViewer.viewerManager.onViewerAddedObservable.add(function (viewer) {\n  console.log(viewer);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Duration Video Recording\nDESCRIPTION: Demonstrates how to set a custom recording duration in seconds instead of using the default 7 seconds.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToVideo.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (BABYLON.VideoRecorder.IsSupported(engine)) {\n    var recorder = new BABYLON.VideoRecorder(engine);\n    recorder.startRecording(\"test.webm\", 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Motion Blur Quality in Babylon.js\nDESCRIPTION: Configure the quality of the blur effect by adjusting the number of samples used in the blur calculation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/motionBlurPostProcess.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmotionblur.motionBlurSamples = 16; // divide quality by 2\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Events\nDESCRIPTION: Shows how to register and trigger custom events for performance tracking.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/performanceProfiler.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst perfCollector = scene.getPerfCollector();\nconst event = perfCollector.registerEvent(\"someEvent\");\n\n// To count event occurrences\nperfCollector.sendEvent(event);\n\n// To track custom values\nevent.value = someValue;\nperfCollector.sendEvent(event);\n```\n\n----------------------------------------\n\nTITLE: Defining MultiMaterial Objects in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Specifies the JSON definition of a MultiMaterial, which links to multiple sub-materials within Babylon.js. The 'materials' field is an array of strings identifying sub-material IDs. Ensures flexibility for assigning multiple materials to a single mesh. Used within larger scene object graphs and requires referenced sub-materials to be defined elsewhere in the file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"name\\\": string,\\n\\t\\\"id\\\": string,\\n\\t\\\"tags\\\": string,\\n\\t\\\"materials\\\": array of string (which are the ids of sub-materials)\\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Master Scene in BabylonJS\nDESCRIPTION: Demonstrates how to load a static master scene exported from Blender using the LoadSceneAsync method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Blender.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.LoadSceneAsync(\"01.master-static-scene.babylon\", engine).then(function (scene) {});\n```\n\n----------------------------------------\n\nTITLE: Controlling Pointer Down Event Handling - Babylon.js JavaScript\nDESCRIPTION: Configures the utility layer to process pointer down events only if the overlay was hit first. Setting onlyCheckPointerDownEvents to false passes all such events regardless of which scene was interacted with. Useful for customizing input routing between overlay and main scenes; requires a UtilityLayerRenderer instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/utilityLayerRenderer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nutilLayer.onlyCheckPointerDownEvents = false;\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer CSS Parts Example\nDESCRIPTION: Shows how to use CSS shadow parts for more complex styling of the progress bar and toolbar components in the Babylon Viewer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/elementStyling.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<CodePen pen=\"YPKqwdy\" tab=\"html,result\" title=\"Babylon Viewer CSS Parts\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Terrain LOD Limits in BabylonJS\nDESCRIPTION: Sets up Level of Detail (LOD) limits for terrain rendering to optimize performance at different distances from the camera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/DTExamples.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.LODLimits = [4, 3, 2, 1, 1];\n```\n\n----------------------------------------\n\nTITLE: Installing babylon-mmd with NPM\nDESCRIPTION: Commands for installing babylon-mmd as an ES6 module using npm. This installation requires @babylonjs/core and @babylonjs/havok as dependencies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/mmdLoader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @babylonjs/core @babylonjs/havok babylon-mmd\n```\n\n----------------------------------------\n\nTITLE: Adjusting Reflective Strength in SSR Post-Process for Babylon.js\nDESCRIPTION: This snippet shows how to adjust the strength of reflections in the Screen Space Reflection post-process. The default value is 1.0, and increasing it will intensify the reflections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/screenSpaceReflectionsPostProcess.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Double specular/reflectivity strength.\nssr.strength = 2;\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote Repository\nDESCRIPTION: Command to add the main Babylon.js repository as an upstream remote\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/BabylonJS/Babylon.js.git\n```\n\n----------------------------------------\n\nTITLE: Manipulating Imported Models in Babylon.js\nDESCRIPTION: Example showing how to manipulate imported models after loading, including position and rotation changes using Promise handling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_import.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"/relative path/myFile\").then((result) => {\n  result.meshes[1].position.x = 20;\n  const myMesh1 = scene.getMeshByName(\"myMesh_1\");\n  myMesh1.rotation.y = Math.PI / 2;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Emit Rate and Manual Emit Count - Babylon.js - JavaScript\nDESCRIPTION: Configures the rate (number per second) at which particles are emitted with emitRate, and specifies a fixed one-time emission quantity with manualEmitCount. The emitRate parameter expects a numeric value; manualEmitCount disables continuous emission and only emits the specified number. Babylon.js is required. These parameters control the density and timing of particle appearances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.emitRate = 1000;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.manualEmitCount = 300;\n```\n\n----------------------------------------\n\nTITLE: Creating a Lathe Mesh with Mesh (Legacy) in Babylon.js\nDESCRIPTION: Shows the older method for creating a lathe mesh using `BABYLON.Mesh.CreateLathe`. This method accepts parameters like name, shape, radius, and tessellation directly, along with optional arguments for the scene, `updatable` flag, and `sideOrientation`. It offers fewer configuration options compared to `MeshBuilder`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/lathe.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet lathe = BABYLON.Mesh.CreateLathe(\"lathe\", shape, radius, tessellation, scene);\nlet lathe = BABYLON.Mesh.CreateLathe(\"lathe\", shape, radius, tessellation, scene, updatable, sideOrientation); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Setting Terrain Update Tolerance in BabylonJS\nDESCRIPTION: Configures terrain update frequency by setting tolerance values for X and Z axes to optimize performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/DTExamples.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.subToleranceX = 8;\nterrain.subToleranceZ = 8;\n```\n\n----------------------------------------\n\nTITLE: GUI Synchronization\nDESCRIPTION: Implements GUI synchronization with underlying fluid renderer properties. Updates displayed values to match current state of fluid renderer objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsyncGUI() {\n    const fluidRenderer = this._scene.fluidRenderer;\n    if (fluidRenderer) {\n        this._fillValues(this._targetRenderersGUIElements, fluidRenderer.targetRenderers[this._targetRendererIndex]);\n        this._fillValues(this._renderObjectsGUIElements, fluidRenderer.renderObjects[this._renderObjectIndex].object);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OriginCamera and Entity for Huge Scene in Babylon.js\nDESCRIPTION: This snippet demonstrates how to set up an OriginCamera and Entity for a sphere in a huge scene using Babylon.js. It shows how to use double precision coordinates and properly parent objects to maintain rendering precision.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/floating_origin.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the OriginCamera\nlet camera = new OriginCamera(\"camera\", new BABYLON.Vector3(10000000, 0, 10000500), scene);\ncamera.doubletgt = new BABYLON.Vector3(10000000, 0, 10000000);\ncamera.touchAngularSensibility = 10000;\ncamera.inertia = 0;\ncamera.speed = 1;\ncamera.keysUp.push(87);    \t\t// W\ncamera.keysDown.push(83)   \t\t// D\ncamera.keysLeft.push(65);  \t\t// A\ncamera.keysRight.push(68); \t\t// S\ncamera.keysUpward.push(69);\t\t// E\ncamera.keysDownward.push(81);     // Q\ncamera.minZ = 0.5;\ncamera.maxZ = 50000000;\ncamera.fov = 1;\ncamera.attachControl(canvas, true);\n\n// Create an Entity for the sphere\nlet entSphere = new Entity(\"entSphere\", scene);\ncamera.add(entSphere);\n\n// Create the sphere and parent it to its Entity\nlet sphere = BABYLON.CreateSphere(\"sphere\", {diameter:256});\nsphere.parent = entSphere;\n\n// Position the Entity\nentSphere.doublepos = new BABYLON.Vector3(10000000, 0, 10000000);\n```\n\n----------------------------------------\n\nTITLE: Creating Black and White PostProcess in Babylon.js\nDESCRIPTION: Implements a black and white filter effect post process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.BlackAndWhitePostProcess(\"bandw\", 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Disposing a Solid Particle System (SPS) in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to free memory associated with a Babylon.js Solid Particle System (SPS) when it is no longer needed. It calls the `SPS.dispose()` method to release resources used by the SPS and then sets the `SPS` variable to `null` to suggest to the JavaScript garbage collector (GC) that the reference can be cleaned up.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.dispose();\nSPS = null; // tells the GC the reference can be cleaned up also\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Explosion Particle Emitters in Babylon.js\nDESCRIPTION: This code creates tiny box emitters at each vertex position of the explosion sphere. Each emitter moves outward in the direction of the vertex normal, simulating particles flying outward during an explosion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//emitter for the particle system\nlet gizmo = MeshBuilder.CreateBox(\"gizmo\", { size: 0.001 }, this._scene);\ngizmo.position = vertPosition;\ngizmo.parent = emitter;\nlet direction = vertNormal.normalize().scale(1); // move in the direction of the normal\n```\n\n----------------------------------------\n\nTITLE: Starting Facebook Instant Game with Babylon.js Scene\nDESCRIPTION: This JavaScript code demonstrates how to remove the loading screen and start the game using Facebook's startGameAsync method after the Babylon.js scene is ready. It includes initializing the game and setting up the render loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Instant_Games.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.scene.executeWhenReady(() => {\n  FBInstant.startGameAsync().then(() => {\n    // Game initialization\n    this._initGame();\n\n    // Run render loop\n    this.engine.runRenderLoop(() => {\n      this.scene.render();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using explode Parameter for MeshImplosion or Reset - Babylon.js JavaScript\nDESCRIPTION: This snippet shows how passing arguments to the MeshExploder's explode method changes the mesh distribution: negative values implode meshes, and zero resets them to their original locations. This depends on a previously instantiated MeshExploder object; expected input is a numeric distance scalar. The mesh array's spatial arrangement is directly manipulated based on the parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/meshExploder.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnewExplosion.explode(-2); //Implodes\nnewExplosion.explode(0); //Resets\n```\n\n----------------------------------------\n\nTITLE: Initializing Audio Engine in Babylon.js\nDESCRIPTION: Example of how to initialize the deprecated audio engine when creating a graphics engine in Babylon.js. This is necessary from version 7.52.0 onwards, as the old audio engine is no longer created by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/breaking-changes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = BABYLON.Engine(canvas, true, { audioEngine: true }, true);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Facet Data in Babylon.js\nDESCRIPTION: This code shows how to enable facet data, check its status, and then disable it for a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.updateFacetData();\nconsole.log(mesh.isFacetDataEnabled); // displays \"true\"\nmesh.disableFacetData();\nconsole.log(mesh.isFacetDataEnabled); // displays \"false\"\n```\n\n----------------------------------------\n\nTITLE: Applying Fog Calculation in Fragment Shader - GLSL\nDESCRIPTION: This include instructs Babylon.js to perform fog calculations and blend the computed fog with the current fragment color, assigning the result to gl_FragColor. It must be placed after determining the final fragment color (usually as the last line in main). Inputs are the current color variable and gl_FragColor as the output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\n#include<fogFragment>(color,gl_FragColor)\n```\n\n----------------------------------------\n\nTITLE: Setting Light Position in Babylon.js\nDESCRIPTION: Positions the directional light in 3D space, which affects the direction and length of shadows cast in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/shadows.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlight.position = new BABYLON.Vector3(0, 15, -30);\n```\n\n----------------------------------------\n\nTITLE: Parenting Particle and Setting Relative Transform in SPS using JavaScript\nDESCRIPTION: This code snippet sets the previous particle as the parent for the current particle (if `idx > 0`). It then applies a small rotation around the Z-axis and a translation along the X-axis to the current particle. These transformations are applied within the local coordinate system of the parent particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (particle.idx > 0) {\n  particle.parentId = particle.idx - 1;\n  particle.rotation.z = 0.01;\n  particle.position.x = 1.0;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sample Rotation to Reduce Banding in GIRSM (Babylon.js)\nDESCRIPTION: Sets the `rotateSample` property of a GIRSM instance to `true`. This helps trade banding artifacts (caused by undersampling) for noise by rotating the samples used for GI calculation. Requires adjusting the `noiseFactor` property to control the noise pattern size. This technique makes artifacts potentially easier to handle with a subsequent blur pass.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/rsmgi.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nGIRSM.rotateSample = true\n```\n\n----------------------------------------\n\nTITLE: Accessing the TintWASM (TWGSL) Module Repository\nDESCRIPTION: URL pointing to the GitHub repository for the TintWASM (TWGSL) module, which is used in Babylon.js's WebGPU implementation. Developers may need to access this to update the module.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUMiscellaneous.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/syntheticmagus/twgsl\n```\n\n----------------------------------------\n\nTITLE: Creating Geodesic Polyhedron with MeshBuilder (Babylon.js, JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a geodesic polyhedron mesh directly using Babylon.js's MeshBuilder. The CreateGeodesic method takes a name, options object, and scene (the last is optional and will default if omitted). Important dependencies include Babylon.js (BABYLON namespace), and the function supports parameters like m, n, size, sizeX/Y/Z, faceColors, faceUV, flat, updatable, and sideOrientation. The function returns a geodesic polyhedron mesh object added to the scene, and can be tailored by modifying the options object. Ensure Babylon.js is included in your project beforehand and that a scene is either supplied or exists as the current scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/geodesic_poly.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst geodesic = BABYLON.MeshBuilder.CreateGeodesic(\"geodesic\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Creating a GUIText Element in BabylonJS\nDESCRIPTION: Constructor for the GUIText component that creates a new text element in the GUI. It requires an ID, options object, GUI manager instance, and optional append parameter to determine if the element should be added to the body.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiText.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUIText(id, options, guimanager, append)\n```\n\n----------------------------------------\n\nTITLE: Creating Softbody with Progressive Configuration\nDESCRIPTION: Alternative approach to creating and configuring a softbody impostor by setting properties after creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.physicsImpostor = new BABYLON.PhysicsImpostor(mesh, BABYLON.PhysicsImpostor.SoftbodyImpostor, { mass: 1, friction: 0.1 }, scene);\nmesh.physicsImpostor.velocityIterations = 10;\nmesh.physicsImpostor.positionIterations = 10;\nmesh.physicsImpostor.stiffness = 0.9;\n```\n\n----------------------------------------\n\nTITLE: Custom Post-Process Shader Implementation\nDESCRIPTION: GLSL shader code for a custom post-process effect implementing pixel highlighting and texture sampling with configurable parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_12\n\nLANGUAGE: glsl\nCODE:\n```\nprecision highp float;\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float highlightThreshold;\n\nfloat highlights(vec3 color)\n{\n return smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));\n}\n\nvoid main(void)\n{\n vec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\n vec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;\n baseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;\n baseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;\n baseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;\n \n baseColor.a = highlights(baseColor.rgb);\n\n gl_FragColor = baseColor;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Individual Header and Label Text in JavaScript\nDESCRIPTION: Shows how to modify the text of specific headers and labels within a `SelectionPanel` after it has been created. `setHeaderName` changes the header text for a group specified by its index, and `relabel` changes the label text for a selector specified by its group index and selector index within that group.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nselectBox.setHeaderName(\"Move\", 0);\nselectBox.relabel(\"Theta\", 2, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating AssetContainer Instances in Babylon.js (JavaScript)\nDESCRIPTION: Instantiates a new AssetContainer object linked to a given Babylon.js scene. Requires Babylon.js to be available and an existing scene object as input. The generated AssetContainer can then be used to manage nodes, meshes, cameras, and other scene-related assets. No parameters beyond the scene reference are needed; the container is initially empty until populated.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetContainers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = new BABYLON.AssetContainer(scene);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Calculation on Gamma-Encoded Values\nDESCRIPTION: Illustrates the mathematical consequence of multiplying a gamma-encoded value directly within a shader without decoding it first. It shows how a value (0.25) is gamma-encoded (approximated by pow(x, 1/2.2) resulting in 0.5326) and then multiplied by 2.0, yielding an incorrect result (1.0652) compared to the expected linear calculation (0.25 * 2.0 = 0.5). This highlights the necessity of converting gamma values to linear space before calculations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/preparingArtForBabylon/controllingColorSpace.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// Gamma encoded value saved to file\npow(0.25, 1/2.2) = 0.5326 \n\n// Gamma encoded value loaded into a shader and multiply the value by 2.0\n0.5326 * 2.0 = 1.0652\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Terrain with Custom Parameters\nDESCRIPTION: JavaScript code showing how to instantiate a Dynamic Terrain with specific parameters including map data, map dimensions, and terrain subdivisions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 100; // 100 terrain subdivisions\nconst params = {\n  mapData: mapData, // data map declaration: what data to use?\n  mapSubX: mapSubX, // how are these data stored by rows and columns\n  mapSubZ: mapSubZ,\n  terrainSub: terrainSub, // how many terrain subdivisions wanted\n};\nconst terrain = new BABYLON.DynamicTerrain(\"t\", params, scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling SnapshotRenderingHelper in Babylon.js (TypeScript)\nDESCRIPTION: This code snippet shows how to use the SnapshotRenderingHelper class to enable fast snapshot rendering mode in Babylon.js. It creates an instance of the helper and calls enableSnapshotRendering() after the scene is loaded or created.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUSnapshotRendering.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sr = new BABYLON.SnapshotRenderingHelper(scene);\n...\n// make sure your scene is loaded/created\n...\nsr.enableSnapshotRendering();\n```\n\n----------------------------------------\n\nTITLE: Converting Sharp-Edged Mesh to Smooth Shading in BabylonJS\nDESCRIPTION: Function that converts a flat-shaded mesh with sharp edges to smooth shading by merging vertices at shared positions. May produce artifacts at edges but eliminates face separation in shaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction convertToSmoothShadedMesh(mesh) {\n  var meshIndices = mesh.getIndices();\n  var meshPositions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n  var mesh_uvs = mesh.getVerticesData(BABYLON.VertexBuffer.UVKind);\n  var setPositions = [];\n  var indices = [];\n  var positions = [];\n  var uvs = [];\n  var normals = [];\n  var p;\n  var indexMap = [];\n  for (let i = 0; i < meshPositions.length; i += 3) {\n    var temp = [];\n    temp.push(i / 3, meshPositions[i], meshPositions[i + 1], meshPositions[i + 2], mesh_uvs[(2 * i) / 3], mesh_uvs[(2 * i) / 3 + 1]);\n    setPositions.push(temp);\n  }\n  var i = 0;\n  while (setPositions.length > 0) {\n    p = setPositions.shift();\n    positions.push(p[1], p[2], p[3]);\n    uvs.push(p[4], p[5]);\n    indexMap[p[0]] = i;\n    var j = 0;\n    while (j < setPositions.length) {\n      if (Math.abs(p[1] - setPositions[j][1]) < Math.pow(0.1, 10) && Math.abs(p[2] - setPositions[j][2]) < Math.pow(0.1, 10) && Math.abs(p[3] - setPositions[j][3]) < Math.pow(0.1, 10)) {\n        indexMap[setPositions[j][0]] = i;\n        setPositions.splice(j, 1);\n      } else {\n        j++;\n      }\n    }\n    i++;\n  }\n  for (let i = 0; i < meshIndices.length; i++) {\n    indices.push(indexMap[meshIndices[i]]);\n  }\n\n  var vertexData = new BABYLON.VertexData();\n  vertexData.positions = positions;\n  vertexData.indices = indices;\n  vertexData.uvs = uvs;\n\n  BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n  vertexData.normals = normals;\n  vertexData.applyToMesh(mesh);\n\n  return mesh;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding needAlphaTesting Method in Babylon.js Material\nDESCRIPTION: This JavaScript snippet demonstrates how to override the `needAlphaTesting` method for a Babylon.js material (`myMat`). It forces alpha testing to be enabled if the material has an `opacityTexture`, regardless of the diffuse/albedo texture's `hasAlpha` property. This is useful when alpha testing should be driven by the opacity map.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/transparent_rendering.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmyMat.needAlphaTesting = () => myMat.opacityTexture !== null;\n```\n\n----------------------------------------\n\nTITLE: Slider Selector Callback Functions in JavaScript\nDESCRIPTION: Presents example callback functions for slider selectors. `orientateY` and `orientateX` are called when the slider value changes, receiving the new value (`angle`) to update mesh rotation. `displayValue` is an optional function used to format the numeric value for display in the slider's label (e.g., converting radians to degrees).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Change mesh\nconst orientateY = function (angle) {\n  box.rotation.y = angle;\n};\n\nconst orientateX = function (angle) {\n  box.rotation.x = angle;\n};\n\n//Format value\nconst displayValue = function (value) {\n  return BABYLON.Tools.ToDegrees(value) | 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Basic Babylon Viewer Shortcode in WordPress\nDESCRIPTION: The simplest way to display 3D models in WordPress using the Babylon Viewer 3D WordPress plugin. This shortcode embeds a 3D model viewer with default settings, requiring only the URL of the 3D file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/babylonCMSIntegration/wordPress.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[babylon]URL-OF-3D-FILE[/babylon]\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts Configuration\nDESCRIPTION: Package.json scripts configuration for building and running the project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gettingSetUp.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"scripts\": {\n        \"build\": \"webpack\",\n        \"start\": \"webpack-dev-server --port 8080\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Visualizing Increased Particle Speed with Trails in Babylon.js\nDESCRIPTION: Babylon.js Playground, based on #1DJ7RH, demonstrating how particle speeds increase due to collisions. This version adds trail markers to visually trace the paths of the particles and highlight the velocity changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Slow_Collide.md#2025-04-23_snippet_1\n\nLANGUAGE: babylonjs-playground\nCODE:\n```\n<Playground id=\"#1DJ7RH#1\" title=\"Increases Speed with Trails\" description=\"Shows how collsions increase speed with trail markers for path.\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Diffuse Texture Alpha Channel for SPS Material Transparency in JavaScript\nDESCRIPTION: This code sets the `useAlphaFromDiffuseTexture` property of the SPS mesh's material to `true`. This enables the material to use the alpha channel information present in the diffuse texture image for transparency effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.mesh.material.useAlphaFromDiffuseTexture = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Pixi.js Sprites to Stage\nDESCRIPTION: Creates a Pixi.js container (stage) and adds a sprite to it. The sprite is positioned at the center of the canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_PixiJS.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst stage = new PIXI.Container();\nconst sprite = PIXI.Sprite.from(\"https://i.imgur.com/1yLS2b8.jpg\");\nsprite.anchor.set(0.5);\nsprite.position.set(canvas.width / 2, canvas.height / 2);\nstage.addChild(sprite);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Event Listening on Mesh in Babylon.JS\nDESCRIPTION: This example demonstrates how to use the @onPointerEvent decorator to detect when a mesh is tapped, then apply a physics impulse in response. The decorated method receives pointer information and is only called when the mesh having this script attached is picked.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/listeningEvents.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { PointerEventTypes, PointerInfo } from \"@babylonjs/core/Events/pointerEvents\";\n\nimport { onPointerEvent } from \"../decorators\";\n\nexport default class MyMeshComponent extends Mesh {\n    private _physicsEnabled: boolean = true;\n\n    ...\n\n    @onPointerEvent(PointerEventTypes.POINTERTAP, true)\n    protected _tapped(info: PointerInfo): void {\n        if (!this._physicsEnabled) {\n            return;\n        }\n\n        const force = this.getDirection(new Vector3(0, 0, 1));\n        this.applyImpulse(force, this.getAbsolutePosition());\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup F in Babylon.js Physics\nDESCRIPTION: Parameter setup for a hinge joint with connected axle having zero mass but non-zero position or rotation. This demonstrates how transformations of the connected axle affect the entire joint system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(0, 0, 0),  \nconnectedPivot: new BABYLON.Vector3(0, 0, 0), \nmainAxis: new BABYLON.Vector3(0, 1, 0), //\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Exposure in Standard Rendering Pipeline\nDESCRIPTION: This snippet shows how to change the exposure property, which intensifies the highlighted surfaces result before merging with the final scene color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.exposure = 1.0; // which multiplies the final scene color with the highlighted surfaces result\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js NullEngine and Scene in JavaScript\nDESCRIPTION: This snippet demonstrates the basic initialization of the Babylon.js NullEngine and a Scene. The NullEngine is used for headless or server-side rendering where no WebGL context is available. It creates an engine instance and then a scene associated with that engine.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/serverSide.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar engine = new BABYLON.NullEngine();\nvar scene = new BABYLON.Scene(engine);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup J in Babylon.js Physics\nDESCRIPTION: Parameter setup with both pivots offset from the origin on different axes, but with aligned Y-axis orientations. This affects both the position and rotation radius of the main body.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(10, 0, 0),\nconnectedPivot: new BABYLON.Vector3(0, 5, 0), //adjust main body position and radius of rotation\nmainAxis: new BABYLON.Vector3(0, 1, 0), \nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Initializing LinearCloner in BabylonJS\nDESCRIPTION: Creates a LinearCloner instance with 10 clones (5 each of cube1 and cube2) with specified increment vector. Uses relative interpolation mode for transformations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/linearCloner.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lc = new BABYLONX.LinearCloner([cube1, cube2], demo.scene, { iModeRelative:true,count:10,P:{x:2,y:0,z:-1} });\n```\n\n----------------------------------------\n\nTITLE: Applying UV Coordinates to Car Body Top in JavaScript\nDESCRIPTION: Sets UV coordinates for the top face of the car body, mapping it to the top-left quarter of the texture image.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/carmat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[0] = new BABYLON.Vector4(0, 0.5, 0.38, 1);\n```\n\n----------------------------------------\n\nTITLE: Setting Up SPS with Multiple Shapes\nDESCRIPTION: Creates a Solid Particle System with multiple shape types for different objects in the terrain.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/addingDTObjects.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst modelBox = BABYLON.MeshBuilder.CreateBox(\"mb\", {}, scene);\nconst modelCone = BABYLON.MeshBuilder.CreateCylinder(\"mc\", { diameterTop: 0 }, scene);\nconst sps = new BABYLON.SolidParticleSystem(\"sps\", scene);\n\n// The declaration order matters from here\n// first shape = first object type\n// second shape = second object type, etc\nsps.addShape(modelBox, 200); // 200 houses maximum visible in the terrain\nsps.addShape(modelCone, 300); // 300 trees maximum visible in the terrain\nsps.buildMesh();\nmodelBox.dispose();\nmodelCone.dispose();\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Shader with Uniforms and Samplers in JavaScript\nDESCRIPTION: Shows how to define a custom shader using EffectWrapper that includes custom uniforms (`colorOffset`) and samplers (`otherTexture`) in addition to the defaults. These must be declared in the `uniformNames` and `samplerNames` arrays.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst customEffectWrapper = new EffectWrapper({\n  name: \"Custom\",\n  engine: customFilter.engine,\n  fragmentShader: `\n        varying vec2 vUV;\n        \n        // Default Sampler\n        uniform sampler2D textureSampler;\n\n        // Custom uniforms\n        uniform sampler2D otherTexture;\n        uniform vec3 colorOffset;\n\n        const vec2 scale = vec2(0.25, 1.);\n\n        void main(void) \n        {\n            gl_FragColor = texture2D(textureSampler, vUV);\n\n            // Swizzle channels\n            float r = gl_FragColor.r;\n            gl_FragColor.r = gl_FragColor.b;\n            gl_FragColor.b = r;\n            gl_FragColor.rgb += clamp(colorOffset, 0., 1.);\n\n            gl_FragColor.rgb *= texture2D(otherTexture, vUV * scale).rgb;\n        }\n    `,\n  // Defines the list of existing samplers (default + customs).\n  samplerNames: [\"textureSampler\", \"otherTexture\"],\n  // Defines the list of existing uniform to be bound.\n  uniformNames: [\"colorOffset\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Viewer via NPM\nDESCRIPTION: NPM command to install the Babylon.js viewer package including all required dependencies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer.v1.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install --save babylonjs-viewer\n```\n\n----------------------------------------\n\nTITLE: Registering a WebXR Feature with WebXRFeaturesManager\nDESCRIPTION: Code showing how to register a custom WebXR feature with the WebXRFeaturesManager. This registration process assigns a name, version, and stability flag to the feature, allowing it to be enabled by name in WebXR applications.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst nameOfFeature = \"awesome-name\";\nconst version = 1;\nconst isTheFeatureStable = true\nWebXRFeaturesManager.AddWebXRFeature(nameOfFeature, (xrSessionManager, options) => {\n    return () => new MyNewFeature(xrSessionManager, options);\n}, version, isTheFeatureStable);\n```\n\n----------------------------------------\n\nTITLE: Setting Object Position from Path Data in Babylon.js (JavaScript)\nDESCRIPTION: Updates the position of the `carriage` object to a specific point on the track, identified by index `i` in the `points` array. This is a fundamental step in moving an object along a predefined path.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncarriage.position = points[i];\n```\n\n----------------------------------------\n\nTITLE: Installing PEP for Touch Event Support in Older Browsers\nDESCRIPTION: This HTML snippet shows how to include the PEP (Pointer Events Polyfill) library in your web page to support touch events in older browsers that don't natively support pointer events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/interactWithScenes.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Skybox Infinite Distance in Babylon.js\nDESCRIPTION: Configures the skybox to follow the camera position by setting the infiniteDistance property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nskybox.infiniteDistance = true;\n```\n\n----------------------------------------\n\nTITLE: Initializing Debug Layer With ES Modules\nDESCRIPTION: Demonstrates how to initialize the Babylon.js Inspector using ES Modules import syntax.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inspector } from '@babylonjs/inspector';\n\n// ... YOUR SCENE CREATION\nInspector.Show(scene, {});\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Emission Direction Range - Babylon.js - JavaScript\nDESCRIPTION: Specifies vectors that define the range of directions in which particles may be emitted. direction1 and direction2 are set with BABYLON.Vector3 instances, providing min and max for directional randomness. Babylon.js and BABYLON.Vector3 are required. Directions influence both the angular direction and initial speed of each particle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.direction1 = new BABYLON.Vector3(-7, 8, 3);\nparticleSystem.direction2 = new BABYLON.Vector3(7, 8, -3);\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Solid Particle System Update Process\nDESCRIPTION: This pseudocode illustrates the execution flow of the setParticles() method in a Solid Particle System. It shows how both particle-level and vertex-level update functions are called during the rendering process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_vertices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar particles: SolidParticles[] = [array of SolidParticle objects];\nfunction setParticles() {\n    beforeUpdateParticles();                 // your custom function\n    for (let p = 0; p < nbParticles; p++) {\n      var particle = particles[p];\n      updateParticles(particle);             // your custom position function\n      for(let v = 0; particle.vertices.length; v++) {\n        var vertex = particle.vertices[v];\n        updateParticleVertex(particle, vertex, v);   // your ustom vertex function\n        computeAllTheVertexStuff();\n      }\n    }\n    updateTheWholeMesh();                   // does the WebGL work\n    afterUpdateParticles();                 // your ustom function\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Babylon.js Materials Module - JavaScript\nDESCRIPTION: Demonstrates how to import the babylonjs-materials module namespace using ES6 syntax. Requires that the babylonjs-materials package is installed. Enables access to advanced materials within the Materials namespace for subsequent object instantiation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Materials from 'babylonjs-materials';\n```\n\n----------------------------------------\n\nTITLE: Parameter Value Management\nDESCRIPTION: Utility methods for reading and writing parameter values, handling special cases like Color3 objects and debug features. Includes value conversion and validation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n_readValue(obj, name) {\n    const parts = name.split(\"_\");\n    for (let i = 0; i < parts.length; ++i) {\n        const part = parts[i];\n        obj = obj[parts[i]];\n        if (obj instanceof BABYLON.Color3) {\n            obj = obj.toHexString();\n        }\n        if (part === \"debugFeature\") {\n            obj = BABYLON.FluidRenderingDebug[obj];\n        }\n        if (part.endsWith(\"MapSize\") && obj === null) {\n            obj = \"Screen size\";\n        }\n    }\n    return obj;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Translation Pivot - Babylon.js - JavaScript\nDESCRIPTION: Adjusts the pivot point for particle transformations using a BABYLON.Vector2. translationPivot allows moving the center of transformation away from the default middle of the plane. Dependencies: Babylon.js and BABYLON.Vector2. Values represent the offset from the center, in local particle coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.translationPivot = new BABYLON.Vector2(2, 2); // across and up the containing plane\n```\n\n----------------------------------------\n\nTITLE: Migrating Babylon.js VRExperience Helper to XRExperience Helper\nDESCRIPTION: Illustrates the code change needed to transition from the deprecated WebVR Experience Helper (`createDefaultVRExperience`) to the current WebXR Experience Helper (`createDefaultXRExperienceAsync`). This is a key step in updating Babylon.js applications to use the modern WebXR standard.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = new BABYLON.Scene(engine);\nvar vrHelper = scene.createDefaultVRExperience();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = new BABYLON.Scene(engine);\nvar xrHelper = scene.createDefaultXRExperienceAsync();\n```\n\n----------------------------------------\n\nTITLE: Importing Animations from File (TypeScript)\nDESCRIPTION: Uses ImportAnimationsAsync to load animations from a file and merge them into the existing scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait BABYLON.ImportAnimationsAsync(\"path/to/model\", scene);\n```\n\n----------------------------------------\n\nTITLE: Defining Texture Objects in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Outlines the required and optional fields for representing a Texture in Babylon.js within a .babylon file. Supports typical texture settings and animation arrays, with optional inline (base64) or file-based image assignment. Keys such as coordinatesMode, scale, angle, and wrapping behavior determine texture mapping. Base64 data is optional, and fields must conform to valid types for proper loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"name\\\": string (filename),\\n\\t\\\"level\\\": float (between 0 and 1),\\n\\t\\\"hasAlpha\\\": boolean,\\n\\t\\\"getAlphaFromRGB\\\": boolean,\\n\\t\\\"coordinatesMode\\\": int (0 = explicit, 1 spherical, 2 = planar, 3 = cubic, 4 = projection, 5 = skybox),\\n\\t\\\"uOffset\\\": float,\\n\\t\\\"vOffset\\\": float,\\n\\t\\\"uScale\\\": float,\\n\\t\\\"vScale\\\": float,\\n\\t\\\"uAng\\\": float,\\n\\t\\\"vAng\\\": float,\\n\\t\\\"wAng\\\": float,\\n\\t\\\"wrapU\\\": boolean,\\n\\t\\\"wrapV\\\": boolean,\\n\\t\\\"coordinatesIndex\\\": int,\\n\\t\\\"animations\\\": array of Animations (see below, can be omitted),\\n\\t\\\"base64String\\\": string (can be omitted)\\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on Texture\nDESCRIPTION: Draws text on a texture with configurable position, font, color and update options. Handles text positioning and canvas clearing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Draws text onto the texture\n * @param text defines the text to be drawn\n * @param x defines the placement of the text from the left\n * @param y defines the placement of the text from the top when invertY is true and from the bottom when false\n * @param font defines the font to be used with font-style, font-size, font-name\n * @param color defines the color used for the text\n * @param clearColor defines the color for the canvas, use null to not overwrite canvas\n * @param invertY defines the direction for the Y axis (default is true - y increases downwards)\n * @param update defines whether texture is immediately update (default is true)\n */\npublic drawText(text: string, x: number, y: number, font: string, color: string, clearColor: string, invertY?: boolean, update = true) {\n    const size = this.getSize();\n    if (clearColor) {\nthis._context.fillStyle = clearColor;\nthis._context.fillRect(0, 0, size.width, size.height);\n    }\n\n    this._context.font = font;\n    if (x === null || x === undefined) {\nconst textSize = this._context.measureText(text);\nx = (size.width - textSize.width) / 2;\n    }\n    if (y === null || y === undefined) {\nconst fontSize = parseInt((font.replace(/\\D/g, '')));;\ny = (size.height / 2) + (fontSize / 3.65);\n    }\n\n    this._context.fillStyle = color;\n    this._context.fillText(text, x, y);\n\n    if (update) {\nthis.update(invertY);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slider Control\nDESCRIPTION: Implements a slider control with min/max values and styling properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/light_gui.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new BABYLON.GUI.Slider();\nslider.minimum = 0;\nslider.maximum = 1;\nslider.borderColor = \"black\";\nslider.color = \"#AAAAAA\";\nslider.background = \"#white\";\nslider.value = 1;\nslider.height = \"20px\";\nslider.width = \"200px\";\npanel.addControl(slider);\n```\n\n----------------------------------------\n\nTITLE: Vue Component Data Setup\nDESCRIPTION: Shows how to set up reactive data in a Vue component using the ref function. This data will be updated when messages are received from the BabylonJS scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectedMarble = ref<IMarble>({ name: \"\", size: 0 });\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Package in Ionic Project\nDESCRIPTION: Command to install a specific version of Babylon.js in an Ionic project. The version specification is important to avoid compatibility issues with the preview branch.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Ionic_Angular.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install babylonjs@2.5.0 --save\n```\n\n----------------------------------------\n\nTITLE: Creating a Manifest File for Babylon.js Scene\nDESCRIPTION: This JSON snippet shows the structure of a manifest file for a Babylon.js scene. It specifies the version of the assets and whether to enable offline caching for the scene and textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimizeCached.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\" : 1,\n  \"enableSceneOffline\" : true,\n  \"enableTexturesOffline\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating BAOA Overlap Facets via Rotation in JavaScript\nDESCRIPTION: This `Primary` prototype method calculates the iso-vector data for facets overlapping edges BA and OA (`isoVecsBAOA`) by rotating the corresponding data from the ABOB overlap (`isoVecsABOB`). It iterates through the ABOB vectors, cloning them. If a vertex type is 1, it applies a positive 120-degree rotation using `point.rotate120Sides(this.m, this.n)` before storing the result. Depends on the `IsoVector` class and instance properties `m` and `n`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPrimary.prototype.ABOBtoBAOA = function() {\n    let point = new IsoVector(0, 0);\n    for (let i = 0; i < this.isoVecsABOB.length; i++) {\n        const temp = [];\n        for (let j = 0; j < 3; j++) {\n            point.x = this.isoVecsABOB[i][j].x;\n            point.y = this.isoVecsABOB[i][j].y;\n            if (this.vertexTypes[i][j] === 1) {\n                point.rotate120Sides(this.m, this.n);\n            }\n            temp.push(point.clone());\n        }\n        this.isoVecsBAOA.push(temp);\n    }\n    \n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting Ground Position in BabylonJS\nDESCRIPTION: Sets a slight negative Y-position offset for the large ground to prevent z-fighting (texture flickering) between overlapping ground meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/hills.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlargeGround.position.y = -0.01;\n```\n\n----------------------------------------\n\nTITLE: Configuring Chromatic Aberration in Babylon.js Pipeline\nDESCRIPTION: Sets up chromatic aberration effect with controls for aberration amount, radial intensity, and direction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.chromaticAberrationEnabled = true;\npipeline.chromaticAberration.aberrationAmount = 300;\npipeline.chromaticAberration.radialIntensity = 3;\nvar rotation = Math.PI;\npipeline.chromaticAberration.direction.x = Math.sin(rotation)\npipeline.chromaticAberration.direction.y = Math.cos(rotation)\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Frames to SpriteMap in Babylon.js\nDESCRIPTION: This code shows how to add animation frames to a SpriteMap. It sets up a sequence of 8 frames with specific timings and frame IDs, creating a looping animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_animations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet eighth = 1 / 8\nlet speed = 0.005\nbackground.addAnimationToTile(24, 0, 25, eighth * 1, speed);\nbackground.addAnimationToTile(24, 1, 26, eighth * 2, speed);\nbackground.addAnimationToTile(24, 2, 27, eighth * 3, speed);\nbackground.addAnimationToTile(24, 3, 28, eighth * 4, speed);\nbackground.addAnimationToTile(24, 4, 29, eighth * 5, speed);\nbackground.addAnimationToTile(24, 5, 30, eighth * 6, speed);\nbackground.addAnimationToTile(24, 6, 31, eighth * 7, speed);\nbackground.addAnimationToTile(24, 7, 24, 1, \t\t speed);\n```\n\n----------------------------------------\n\nTITLE: Adding Thumbnails to the Timeline Cache (javascript)\nDESCRIPTION: Demonstrates how to manually inject a generated thumbnail into the timeline's internal cache with addThumbnail, specifying the thumbnail data (which may be a texture, video, canvas, or URL) and the associated time. This technique allows cache warm-up for improved initial loading performance, supporting pre-generation or pre-fetching of thumbnails.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n    timeline.addThumbnail(textureData, time);\n```\n\n----------------------------------------\n\nTITLE: Integrating Spine Animations with Pixi.js\nDESCRIPTION: Demonstrates how to load and play a Spine animation using the Pixi.js Spine extension. It loads a spineboy animation, sets its initial animation, and handles animation completion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_PixiJS.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nloader.add(\"spineboy\", \"https://raw.githubusercontent.com/pixijs/examples/gh-pages/examples/assets/pixi-spine/spineboy-pro.json\");\n\nloader.load((loader, resources) => {\n  let spineboy = new PIXI.spine.Spine(resources.spineboy.spineData);\n  spineboy.scale.set(0.4);\n  spineboy.state.setAnimation(0, \"portal\", false);\n  spineboy.x = 1000;\n  spineboy.y = 650;\n  spineboy.state.getCurrent(0).onComplete = () => {\n    spineboy.state.setAnimation(0, \"shoot\", true);\n  };\n  pixi.stage.addChild(spineboy);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Looping Background Music in Babylon.js\nDESCRIPTION: Creates a streaming sound that loops continuously for background music. The loop and autoplay parameters ensure the sound plays immediately and repeats indefinitely.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/sound.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.CreateStreamingSoundAsync(\"name\", \"<sound file URL>\", { loop: true, autoplay: true }, audioEngine);\n```\n\n----------------------------------------\n\nTITLE: Creating Convolution PostProcess in Babylon.js\nDESCRIPTION: Applies a kernel matrix convolution filter to every pixel in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.ConvolutionPostProcess(\"Sepia\", BABYLON.ConvolutionPostProcess.EmbossKernel, 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Setting Reference Space\nDESCRIPTION: Initializes the reference space for coordinate system definition\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst referenceSpace = sessionManager.setReferenceSpaceTypeAsync(/*referenceSpaceType = 'local-floor'*/);\n```\n\n----------------------------------------\n\nTITLE: Disabling Depth Renderer in Babylon.js with JavaScript\nDESCRIPTION: This snippet demonstrates how to disable the previously enabled DepthRenderer by calling the disableDepthRender() method on the scene object. This is necessary to clean up resources or to stop generating depth textures when they are no longer needed. Ensure that 'scene' refers to the same Babylon.js scene instance used to initialize the depth renderer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/depthValuesDepthRenderer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.disableDepthRender();\n```\n\n----------------------------------------\n\nTITLE: Setting Irradiance Texture in Babylon.js\nDESCRIPTION: Demonstrates how to set up an irradiance texture for environment mapping when spherical representation is insufficient for highly dynamic textures. Both the environment and irradiance textures should share the same properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nscene.environmentTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(\"specular.dds\", scene);\nscene.environmentTexture.irradianceTexture = new BABYLON.CubeTexture(\"irradiance.dds\", scene);\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Facing Facet and Projection Point in Babylon.js\nDESCRIPTION: Demonstrates filtering the closest facet search using `mesh.getClosestFacetAtCoordinates` to only include facets whose normal points towards the given world coordinates (x, y, z). This is achieved by setting the fifth parameter `checkFace` to `true` (default is `false`) while keeping the sixth parameter `facing?` as `true` (default). The projection point is also calculated and stored in the `projected` vector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst projected = BABYLON.Vector3.Zero();\nconst index = mesh.getClosestFacetAtCoordinates(x, y, z, projected, true); // just the \"facing\" closest facet\nif (index != null) {\n  const worldPos = mesh.getFacetPosition(index); // the world position of this facet\n  // use the vector3 projected here ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Checkbox Selector to a Group in Babylon.js using JavaScript\nDESCRIPTION: This code shows how to add a checkbox selector to an existing group (`transformGroup`) using the `addCheckbox` method. It takes the label (\"Across\") and a callback function or variable (`toLeft`) as parameters. The checkbox is added to the end of the group's selector list.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntransformGroup.addCheckbox(\"Across\", toLeft);\n```\n\n----------------------------------------\n\nTITLE: Resetting Mesh Rotation in Babylon.js\nDESCRIPTION: Methods to reset mesh rotation when dealing with quaternion-based rotations in imported models.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_import.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyMesh.rotationQuaternion = null; //Any version of Babylon.js\n\nmyMesh.rotation = BABYLON.Vector3.Zero(); //babylon.js versions > 4.00\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Back-Facing Facet and Projection Point in Babylon.js\nDESCRIPTION: Shows how to find the closest facet that is \"turning its back\" to the world coordinates (x, y, z) using `mesh.getClosestFacetAtCoordinates`. This filtering is enabled by setting the fifth parameter `checkFace` to `true` and the sixth parameter `facing?` to `false`. The projection point onto this facet is calculated and stored in `projected`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst projected = BABYLON.Vector3.Zero();\nconst index = mesh.getClosestFacetAtCoordinates(x, y, z, projected, true, false); // just the \"turning back\" closest facet\nif (index != null) {\n  const worldPos = mesh.getFacetPosition(index); // the world position of this facet\n  // use the vector3 projected here ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup manualChunks for Babylon.js Module Grouping (Function) (JavaScript)\nDESCRIPTION: This JavaScript snippet shows a Rollup configuration using a function for the `output.manualChunks` option. The function inspects the module `id` (path) and returns a chunk name (`webgpu-shaders`, `webgl-shaders`, `webgpu-extensions`, `babylonjs`) if the ID matches specific patterns related to Babylon.js modules. This allows for manual control over chunk creation, similar to Webpack's `cacheGroups`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nexport default {\n  // ...\n  output: {\n    dir: \"output\",\n    manualChunks: (id) => {\n      if (id.includes(\"ShadersWGSL\")) {\n        return \"webgpu-shaders\";\n      } else if (id.includes(\"Shaders\")) {\n        return \"webgl-shaders\";\n      } else if (id.includes(\"WebGPU\")) {\n        return \"webgpu-extensions\";\n      } else if (id.includes(\"babylonjs\")) {\n        return \"babylonjs\";\n      }\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Gravity for Particles - Babylon.js - JavaScript\nDESCRIPTION: Applies a gravity vector to all particles in the system, using a BABYLON.Vector3. This can simulate effects like falling or rising particles depending on direction. Dependencies: Babylon.js and BABYLON.Vector3. Numeric values represent force in each axis; negative Y pulls particles downward.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_tuning.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.gravity = new BABYLON.Vector3(0, -9.81, 0);\n```\n\n----------------------------------------\n\nTITLE: Removing Option from GUISelect in BabylonJS\nDESCRIPTION: Removes an option from the GUISelect based on its value. This allows for dynamic modification of the select element's choices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nremoveOption(value)\n```\n\n----------------------------------------\n\nTITLE: AddMarbleByName Helper Method Implementation\nDESCRIPTION: Implementation of the addMarbleByName helper method that creates a new marble mesh in the BabylonJS scene with the specified name.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\naddMarbleByName(name: string): void {\n  // Implementation not fully shown in the image\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Scientific Math Nodes - Babylon.js - Markdown/English\nDESCRIPTION: Enumerates Babylon.js node material blocks for scientific math operations including trigonometric, exponential, logarithmic and utility functions (Abs, ArcCos, ArcSin, ArcTan, Cos, DegreesToRadians, Exp, Exp2, Fract, Log, Pow, RadiansToDegrees, SawToothWave, Sin, SquareWave, Tan, TriangleWave). Each section details compatible input/output types and mathematical behavior when integrated in a graph, supporting shader node graph authors and programmers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/availableNodeBlocks.md#2025-04-23_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## Math: Scientific\\n\\n### Abs\\n\\nOutputs the absolute value of the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### ArcCos\\n\\nOutputs the inverse of the cosine value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### ArcSin\\n\\nOutputs the inverse of the sine value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### ArcTan\\n\\nOutputs the inverse of the tangent value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### ArcTan2\\n\\nOutputs the inverse of the tangent value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Cos\\n\\nOutputs the cosine value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### DegreesToRadians\\n\\nConverts the input degrees value to radians.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Exp\\n\\nOutputs the input value multiplied by itself 9 time. (Exponent of 10)\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Exp2\\n\\nOutputs the input value multiplied by itself 1 time. (Exponent of 2)\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Fract\\n\\nOutputs only the fractional value of a floating point number.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Log\\n\\nThe logarithmic value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Pow\\n\\nOutputs the input value multiplied by itself the number of times equal to the power input (Exponent of power)\\n\\n- Input:\\n  - value: Float\\n  - power: Float\\n- Output:\\n  - output: Float\\n\\n### RadiansToDegrees\\n\\nConverts the input radians value to degrees.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### SawToothWave\\n\\nOutputs a sawtooth pattern value between -1 and 1 based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Sin\\n\\nOutputs the sine value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### SquareWave\\n\\nOutputs a stepped pattern value between -1 and 1 based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### Tan\\n\\nOutputs the tangent value based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\\n### TriangleWave\\n\\nOutputs a sawtooth pattern value between 0 and 1 based on the input value.\\n\\n- Input:\\n  - input: Float\\n- Output:\\n  - output: Float\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeated Controls with Individual IDs in XML (Babylon.js GUI XML)\nDESCRIPTION: Shows a StackPanel that repeats a container for each data object entry, assigning IDs to nested TextBlock elements. Enables targeted updates to each repeated control instance from JavaScript using unique IDs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<StackPanel background=\\\"#ffffff\\\" width=\\\"300px\\\" top=\\\"100px\\\" left=\\\"200px\\\" id=\\\"panel\\\" dataSource=\\\"text in {objTexts}\\\">\\n       <Container  width=\\\"1\\\" height=\\\"40px\\\" >\\n           <TextBlock id=\\\"myName\\\"  height=\\\"1\\\" text=\\\"{{text.name}}\\\" color=\\\"red\\\" resizeToFit=\\\"true\\\" fontSize=\\\"24\\\"/>\\n           <TextBlock id=\\\"mySurname\\\" left=\\\"50px\\\" height=\\\"1\\\" text=\\\"{{text.surname}}\\\" color=\\\"black\\\" resizeToFit=\\\"true\\\" fontSize=\\\"24\\\"/>\\n       </Container>\\n</StackPanel>\n```\n\n----------------------------------------\n\nTITLE: Creating Polyhedron with Mesh Class in Babylon.js\nDESCRIPTION: Creates a polyhedron mesh using the base Mesh class, offering the same functionality as MeshBuilder. This is an alternative approach to creating polyhedra meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/polyhedra_by_numbers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst polyhedron = BABYLON.Mesh.CreatePolyhedron(\"oct\", options, scene); //scene is optional and defaults to the current scene\n```\n\n----------------------------------------\n\nTITLE: Updating Skybox Position in Fast SR Mode (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to update the skybox position in fast snapshot rendering mode. It adds an observer to the scene's onBeforeRenderObservable to update the skybox's world matrix and transfer it to the effect when in fast SR mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUSnapshotRendering.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onBeforeRenderObservable.add(() => {\n    if (engine.snapshotRendering && engine.snapshotRenderingMode === BABYLON.Constants.SNAPSHOTRENDERING_FAST) {\n        const world = skybox.computeWorldMatrix(true);\n        skybox.transferToEffect(world);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deactivating High Level Fur Material in Babylon.js\nDESCRIPTION: Disables the high-level mode for fur material, allowing for more manual control over the fur effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.highLevelFur = false;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Line Color - Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to override the default GreasedLine color globally by setting `BABYLON.GreasedLinePluginMaterial.DEFAULT_COLOR`. Dependency: `BABYLON` namespace with both `GreasedLinePluginMaterial` and `Color3` present. Setting this value affects all subsequently created lines that do not explicitly specify a `color`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.GreasedLinePluginMaterial.DEFAULT_COLOR = BABYLON.Color3.Green();\n```\n\n----------------------------------------\n\nTITLE: Using Lattice Node for Geometry Deformation\nDESCRIPTION: The lattice node creates a simplified cage around geometry for high-level manipulations. It works by mapping lattice points to the geometry's bounding box and allows deformation through Vector3 ID points. The resolution can be configured in X, Y, and Z dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Defining Variables and Uniforms for CloudBis Procedural Texture in GLSL\nDESCRIPTION: This GLSL code snippet defines the variables and uniform parameters for the CloudBis procedural texture shader. It includes the varying UV coordinates and uniforms for sky and cloud colors that can be modified from the TypeScript class.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/proceduralTextureForTexLibrary.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nprecision highp float;\n\nvarying vec2 vUV;\n\nuniform vec4 skyColor;\nuniform vec4 cloudColor;\n\n```\n\n----------------------------------------\n\nTITLE: Using moveWithCollisions Method with Meshes in Babylon.JS\nDESCRIPTION: The moveWithCollisions method provided by the Babylon.JS API allows meshes to move while respecting collision boundaries. This method works similarly to camera collisions and checks for collisions against all meshes that have collisions enabled in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/collisions/basicCollisions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.moveWithCollisions\n```\n\n----------------------------------------\n\nTITLE: Limiting Loaded LODs for Debugging in Babylon.js\nDESCRIPTION: This snippet configures the Babylon.js glTF loader to stop loading after a specific number of Levels of Detail (LODs) defined by the MSFT_lod extension. It uses `OnPluginActivatedObservable` to access the glTF loader and then hooks into the `onExtensionLoadedObservable`. When the 'MSFT_lod' extension is loaded, it sets the `maxLODsToLoad` property (e.g., to 1) on the extension handler, preventing subsequent LODs from being loaded. This is useful for inspecting individual LODs during development.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/progressiveglTFLoad.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nBABYLON.SceneLoader.OnPluginActivatedObservable.addOnce(function (loader) {\n  if (loader.name === \"gltf\") {\n    loader.onExtensionLoadedObservable.add(function (extension) {\n      if (extension.name === \"MSFT_lod\") {\n        // Stop at the first LOD.\n        extension.maxLODsToLoad = 1;\n      }\n    });\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Handling WebGL1 Compatibility in Rendering Loop\nDESCRIPTION: Addresses WebGL1 compatibility issues by adding an additional reset for the Pixi.js renderer when running in WebGL1 mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_PixiJS.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nengine.runRenderLoop(function () {\n  if (engine.webGLVersion === 1) {\n    pixiRenderer.reset();\n  }\n  scene.render();\n  engine.wipeCaches(true);\n\n  pixiRenderer.reset();\n  pixiRenderer.render(stage);\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Light Object\nDESCRIPTION: Serializes a light object into a serialization object using SerializationHelper.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Serializes the current light into a Serialization object\n * @returns the serialized object\n */\npublic serialize(): any {\n    const serializationObject = SerializationHelper.Serialize(this);\n\n    // Internal working here\n\n    return serializationObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Motion Blur with Manual Instance Updates in Babylon.js\nDESCRIPTION: Demonstrates how to manually update previous world matrices for instances when using motion blur. This is necessary to avoid blurring artifacts when manually updating the world matrix buffer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/instances.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.manualUpdateOfPreviousWorldMatrixInstancedBuffer = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.previousWorldMatrixInstancedBuffer.set(previousMat, offset);\n```\n\n----------------------------------------\n\nTITLE: Minimal JSON Format for Sprite Packed Manager in Babylon.js\nDESCRIPTION: The minimal JSON format required by the Sprite Packed Manager. This format only includes the essential frame information for each sprite.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/packed_manager.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"frames\": {\n\t\t\"eye.png\": {\n\t\t\t\"frame\": {\"x\":0,\"y\":148,\"w\":400,\"h\":400}\n\t\t},\n\t\t\"redman.png\": {\n\t\t\t\"frame\": {\"x\":0,\"y\":0,\"w\":55,\"h\":97}\n\t\t\t},\n\t\t\"spot.png\": {\n\t\t\t\"frame\": {\"x\":199,\"y\":0,\"w\":148,\"h\":148}\n\t\t},\n\t\t\"triangle.png\": {\n\t\t\t\"frame\": {\"x\":55,\"y\":0,\"w\":144,\"h\":72}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Hit Count Evaluation\nDESCRIPTION: Final evaluation of intersection count to determine if point is inside mesh based on odd/even hit count.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/IsInside.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif((hitCount % 2) === 1) {\n\tvar pointFound = true;\n}\nelse if ((hitCount % 2) === 0 && hitCount > 0) {\n\tvar pointFound = true;\n}\n\nreturn pointFound;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Utility Layer for Gizmos in Babylon.js\nDESCRIPTION: Demonstrates how to create a custom UtilityLayerRenderer for gizmos instead of using the default utility layer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst utilLayer = new BABYLON.UtilityLayerRenderer(scene);\nconst gizmo = new BABYLON.AxisDragGizmo(new BABYLON.Vector3(1, 0, 0), BABYLON.Color3.FromHexString(\"#00b894\"), utilLayer);\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Instance and Loading Webpage with Puppeteer\nDESCRIPTION: This snippet demonstrates how to launch a browser instance using Puppeteer and load a Babylon.js scene from a playground URL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderRemoteScreenshot.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await puppeteer.launch({});\nconst page = await browser.newPage();\nawait page.goto(\"https://playground.babylonjs.com/frame.html#PN1NNI#1\");\n```\n\n----------------------------------------\n\nTITLE: Generic Syntax for Adding Range Value Gradient in Babylon.js\nDESCRIPTION: Illustrates the general method signature for adding a gradient point with a range of values for a specific particle property. `<PROPERTY>` should be replaced with the target property name. `fraction_of_time_period_elapsed` is a value between 0 (start) and 1 (end). `minimum_property_value` and `maximum_property_value` define the range from which a value will be randomly selected for the property at that time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.add < PROPERTY > Gradient(fraction_of_time_period_elapsed, minimum_property_value, maximum_property_value); //set a range of values at given time point\n```\n\n----------------------------------------\n\nTITLE: Enabling and Customizing Depth of Field in Standard Rendering Pipeline\nDESCRIPTION: These snippets show how to enable depth of field and customize the focus distance in the Standard Rendering Pipeline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Active depth of field\npipeline.DepthOfFieldEnabled = true;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Focus on 20 units\npipeline.depthOfFieldDistance = 20;\n```\n\n----------------------------------------\n\nTITLE: Setting Translucent Tint Color\nDESCRIPTION: Demonstrates how to set the tint color for a translucent PBR material.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\npbr.metallic = 0;\npbr.roughness = 0;\n\npbr.subSurface.isTranslucencyEnabled = true;\npbr.subSurface.tintColor = BABYLON.Color3.Teal();\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-LOD Settings Array in Babylon.js (JavaScript)\nDESCRIPTION: This code demonstrates how to define an array of simplification settings for the `simplify` function using JavaScript object literals. Each object specifies the desired `quality` (0.0-1.0), the `distance` at which the LOD level activates, and optionally whether to `optimizeMesh`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/simplifyingMeshes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { quality: 0.9, distance: 25, optimizeMesh: true },\n  { quality: 0.3, distance: 50, optimizeMesh: true },\n];\n```\n\n----------------------------------------\n\nTITLE: Applying Particle Initialization and Updating SPS in Babylon.js (JavaScript)\nDESCRIPTION: This code snippet shows how to call the previously defined SPS.initParticles function followed by SPS.setParticles to update the geometry and vertex data of the SPS mesh. This is required after changing particle properties to reflect those changes visually. It requires that SPS has been properly constructed and initialized, and that the initParticles function has been defined to alter attributes as needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_intro.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n//Update SPS mesh\\nSPS.initParticles();\\nSPS.setParticles();\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiview in VRExperienceHelper\nDESCRIPTION: Implementation to enable multiview rendering when creating a VR experience using VRExperienceHelper.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/multiViewsPart1.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultVRExperience({ useMultiview: true });\n```\n\n----------------------------------------\n\nTITLE: Loading lil-gui Script Asynchronously in JavaScript\nDESCRIPTION: Defines an async function to load the lil-gui library dynamically via Babylon.js Tools.LoadScriptAsync method. Ensures that the GUI library is available before creating any related interfaces. The function returns a promise that resolves when the script is loaded, and requires Babylon.js to be present globally. Input: none; Output: Promise resolved after loading the script.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function LoadLiLGUI() {\n    return BABYLON.Tools.LoadScriptAsync(\"https://cdn.jsdelivr.net/npm/lil-gui@0.17.0/dist/lil-gui.umd.min.js\");\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Block Deserialization in TypeScript\nDESCRIPTION: Example showing how to deserialize and create a custom shader block at runtime using TypeScript. This approach is useful when blocks are not available at build time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/creatingNewBlocks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst blockDefinition = importCustomBlockDefinition(serializedAnnotatedGlsl);\nconst block = CustomShaderBlock.Create(smartFilter, \"Name Of This Instance\", blockDefinition);\n// Access the block inputs connection points via block.inputs and the output connection point via .output\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Externals for Optional Physics Dependencies - JavaScript\nDESCRIPTION: Shows how to add external definitions for oimo and cannon in a webpack.config.js file, instructing Webpack not to bundle these modules and instead reference external global variables. This is necessary when using physics engines optionally and avoids build warnings related to missing modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n    ...,\n    externals: {\n        oimo: 'OIMO', //or true\n        cannon: 'CANNON' //or true\n    },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Blocks to BabylonJS Flow Graph Block Factory (JavaScript)\nDESCRIPTION: This snippet defines the addToBlockFactory function, which allows adding custom blocks to the block factory. It requires specifying a unique name and the responsible module for the block.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * If you want to add a new block to the block factory, you should use this function.\n * Please be sure to choose a unique name and define the responsible module.\n * @param module the name of the module that is responsible for the block\n * @param blockName the name of the block. This should be unique.\n * @param factory an async factory function to generate the block\n */\nexport function addToBlockFactory(module: string, blockName: string, factory: () => Promise<typeof FlowGraphBlock>): void {\n  customBlocks[`${module}/${blockName}`] = factory;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Predefined Axis Vectors - Babylon.js JavaScript\nDESCRIPTION: Provides direct access to constant vector values representing the X, Y, and Z axes in Babylon.js. These constants (BABYLON.Axis.X, BABYLON.Axis.Y, BABYLON.Axis.Z) are commonly used when specifying standard axis-aligned rotations, and do not require additional dependencies besides Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/add_rotations.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Axis.X;\nBABYLON.Axis.Y;\nBABYLON.Axis.Z;\n```\n\n----------------------------------------\n\nTITLE: Computing Point Light Depth Metric Using World Position in GLSL/C Shader\nDESCRIPTION: This GLSL/C shader code computes the shadow depth metric for point lights by calculating the distance between the surface point and the light's position, normalizing the result to a 0..1 range, and applying a bias. It relies on vPositionWSM (surface world position), lightDataSM (light world position), depthValuesSM (scaling constants), and biasAndScaleSM. While the formula supports normalization, it's limited by the unbounded possible distance between point and light, making remapping dependent on application-chosen near/far plane values. Inputs are world positions, and output is the normalized metric for shadow comparison.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ndepthSM = (length(vPositionWSM - lightDataSM) + depthValuesSM.x) / depthValuesSM.y + biasAndScaleSM.x;\n```\n\n----------------------------------------\n\nTITLE: Resuming Gameplay from Pause Menu in Babylon.js with JavaScript\nDESCRIPTION: This code snippet handles resuming the game from the pause menu. When the resume button is pressed, it hides the pause menu, removes it from the player UI, re-enables the pause button, unpauses the game, and records the new start time. Uses Babylon.js GUI observables, requires resumeBtn, _pauseMenu, _playerUI, pauseMenu, and pauseBtn to be defined and properly connected within the UI.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nresumeBtn.onPointerDownObservable.add(() => {\n    this._pauseMenu.isVisible = false;\n    this._playerUI.removeControl(pauseMenu);\n    this.pauseBtn.isHitTestVisible = true;\n\n    //game unpaused, our time is now reset\n    this.gamePaused = false;\n    this._startTime = new Date().getTime();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Line Widths for GreasedLine - Babylon.js - JavaScript\nDESCRIPTION: This snippet shows how to override the default line width values globally for GreasedLine by assigning to `GreasedLineMaterialDefaults`. It requires `GreasedLineMaterialDefaults` to be accessible, typically through the Babylon.js GreasedLine extension. Assign values to `DEFAULT_WIDTH_ATTENUATED` or `DEFAULT_WIDTH` to set global defaults for future lines without needing to supply width per instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nGreasedLineMaterialDefaults.DEFAULT_WIDTH_ATTENUATED = 10;\nGreasedLineMaterialDefaults.DEFAULT_WIDTH = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Converting ZXZ World Euler Angles to Quaternion in JavaScript\nDESCRIPTION: Creates a Babylon.js `Quaternion` from Euler angles alpha, beta, and gamma using the `RotationAlphaBetaGamma` method. This method corresponds to the ZXZ world space rotation convention (rotate alpha about Z, then beta about X, then gamma about Z in world space).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar abcQuaternion = BABYLON.Quaternion.RotationAlphaBetaGamma(alpha, beta, gamma);\n```\n\n----------------------------------------\n\nTITLE: Disposing GUIText Element\nDESCRIPTION: Method to clean up and remove a GUIText element from the interface. This properly disposes of the GUIText manager and deletes the element from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiText.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Checking GUITextarea Visibility\nDESCRIPTION: Method to check if the GUITextarea element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextarea.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Creating a RenderTargetTexture in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a RenderTargetTexture and add it to the scene. It also shows how to select specific objects to be rendered to the texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/renderTargetTextureMultiPass.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar renderTarget = new BABYLON.RenderTargetTexture(\n    'render to texture', // name \n    512, // texture size\n    scene // the scene\n);\nscene.customRenderTargets.push(renderTarget); // add RTT to the scene\n\nlet sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene); // create your mesh\nrenderTarget.renderList.push(sphere); // add it to the RTT\n```\n\n----------------------------------------\n\nTITLE: Loading HDR CubeTextures in Babylon.js\nDESCRIPTION: Code snippet for creating an HDR CubeTexture in Babylon.js. This format is used for high dynamic range environment mapping, requiring the HDR file path and scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.HDRCubeTexture(\"textures/filename\", scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Player Camera in TypeScript\nDESCRIPTION: Defines the `_setupPlayerCamera` private method within the `Player` class. This function creates and configures an `ArcRotateCamera` associated with the player, initially positioned to view the player from a distance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _setupPlayerCamera() {\n    var camera4 = new ArcRotateCamera(\"arc\", -Math.PI/2, Math.PI/2, 40, new Vector3(0,3,0), this.scene);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting to Flat Shaded Mesh in Babylon.js\nDESCRIPTION: This code demonstrates how to convert a mesh with smoothly interpolated normals to a flat-shaded mesh, which can be useful for creating faceted appearances where each face has a uniform normal.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/updatingVertices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.convertToFlatShadedMesh()\n```\n\n----------------------------------------\n\nTITLE: Creating a GUIWindow in Babylon.js\nDESCRIPTION: Constructor for creating a new GUIWindow element. Requires an ID, image URL, configuration options, and a reference to the GUI manager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiWindow.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUIWindow(id, imageUrl, options, guimanager)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Babylon.js Extensions Repository\nDESCRIPTION: Command to clone the Babylon.js Extensions repository from GitHub which contains the AMP 360 Video plugin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/BabylonJS/Extensions.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Particle Emitter Box in BabylonJS\nDESCRIPTION: Defines the emitter position and box dimensions for particle emission.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.emitter = new BABYLON.Vector3(0, 10, 0);\nparticleSystem.minEmitBox = new BABYLON.Vector3(-1, 0, 0);\nparticleSystem.maxEmitBox = new BABYLON.Vector3(1, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating LensRenderingPipeline with Camera in Babylon.js\nDESCRIPTION: Instantiates a LensRenderingPipeline with defined parameters and attaches it directly to a camera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/dofLenseEffects.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar lensEffect = new BABYLON.LensRenderingPipeline('lensEffects', parameters, scene, 1.0, camera);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sprite Map with Options in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to create a sprite map in Babylon.js using the SpriteMap constructor. It takes a name, atlas JSON, sprite texture, options object, and scene as parameters. The options object allows customization of various sprite map properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_options.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spriteMap = new BABYLON.SpriteMap(name, atlasJSON, spriteTexture, options, scene);\n```\n\n----------------------------------------\n\nTITLE: Shape Proximity Query Implementation\nDESCRIPTION: Example of implementing a shape proximity query to find the closest shape from another shape, returning both local and world space results.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhk.shapeProximity(\n    {\n        shape: shape1,\n        position: mesh1.absolutePosition,\n        rotation: mesh1.absoluteRotationQuaternion,\n        maxDistance: 10\n    },\n    shapeLocalResult,\n    hitWorldResult\n);\n```\n\n----------------------------------------\n\nTITLE: Changing Multiple Terrain Properties Dynamically in JavaScript\nDESCRIPTION: Demonstrates how to change multiple terrain properties including map data, colors, UVs, and normals at runtime based on camera position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// change the terrain map on the fly\nif (camera.position.z > someLimit) {\n  terrain.mapData = map2;\n  terrain.mapColors = colors2;\n  terrain.mapUVs = uvs2;\n  terrain.mapNormals = normals2;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ground Textures in BabylonJS\nDESCRIPTION: Creates and applies textures to both the village ground and the larger terrain. Uses different materials to distinguish the village area from the surrounding landscape.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/hills.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Create Village ground\nconst groundMat = new BABYLON.StandardMaterial(\"groundMat\");\ngroundMat.diffuseTexture = new BABYLON.Texture(\"https://assets.babylonjs.com/environments/villagegreen.png\");\ngroundMat.diffuseTexture.hasAlpha = true;\n\nconst ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width:24, height:24});\nground.material = groundMat;\n\n//large ground\nconst largeGroundMat = new BABYLON.StandardMaterial(\"largeGroundMat\");\nlargeGroundMat.diffuseTexture = new BABYLON.Texture(\"https://assets.babylonjs.com/environments/valleygrass.png\");\n\nconst largeGround = BABYLON.MeshBuilder.CreateGroundFromHeightMap(\"largeGround\", \"https://assets.babylonjs.com/environments/villageheightmap.png\", \n    {width:150, height:150, subdivisions: 20, minHeight:0, maxHeight: 4});\nlargeGround.material = largeGroundMat;\nlargeGround.position.y = -0.01;\n```\n\n----------------------------------------\n\nTITLE: Adding Color Remap Gradients to Babylon.js ParticleSystem - JavaScript\nDESCRIPTION: Utilizes addColorRemapGradient to define how color indices are remapped over the lifetime of a particle in a Babylon.js ParticleSystem. Each call sets a value range for the remapped index at a given fraction of the particle’s lifespan. Requires a working particleSystem and pre-existing gradient setup. Inputs include the progress fraction (0 to 1), and the minimum and maximum index remap values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/ramps_and_blends.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.addColorRemapGradient(0, 0, 0.1);\nparticleSystem.addColorRemapGradient(0.2, 0.1, 0.8);\nparticleSystem.addColorRemapGradient(0.3, 0.2, 0.85);\nparticleSystem.addColorRemapGradient(0.35, 0.4, 0.85);\nparticleSystem.addColorRemapGradient(0.4, 0.5, 0.9);\nparticleSystem.addColorRemapGradient(0.5, 0.95, 1.0);\nparticleSystem.addColorRemapGradient(1.0, 0.95, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Applying Fade-In Effect to GUI Element in JavaScript\nDESCRIPTION: Applies a fade-in animation effect to a specified GUI element managed by the GUIManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfadeIn(element)\n```\n\n----------------------------------------\n\nTITLE: Generating Terrain Data Map with Simplex Noise\nDESCRIPTION: JavaScript code demonstrating how to create a data map using a simplex noise function to generate elevation values for each point in the terrain grid.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapSubX = 1000; // map number of points on the width\nconst mapSubZ = 800; // map number of points on the depth\nconst seed = 0.3; // set the noise seed for the Y value (elevation)\nnoise.seed(seed); // generate the simplex noise, don't care about this\nconst mapData = new Float32Array(mapSubX * mapSubZ * 3); // x3 because 3 values per point: x, y, z\nfor (let l = 0; l < mapSubZ; l++) {\n  // loop on depth points\n  for (let w = 0; w < mapSubX; w++) {\n    // loop on width points\n    const x = (w - mapSubX * 0.5) * 5.0; // distance inter-points = 5 on the width\n    const z = (l - mapSubZ * 0.5) * 2.0; // distance inter-points = 2 on the depth\n    const y = noise.simplex2(x, z); // elevation\n\n    mapData[3 * (l * mapSubX + w)] = x;\n    mapData[3 * (l * mapSubX + w) + 1] = y;\n    mapData[3 * (l * mapSubX + w) + 2] = z;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternate Cloth Mesh Rotation in Babylon.js\nDESCRIPTION: Shows an alternative rotation for the cloth mesh, placing the origin at a different corner.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/softBodies.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncloth.rotate.x = Math.PI / 2;\n```\n\n----------------------------------------\n\nTITLE: Creating View with Camera in Babylon.js\nDESCRIPTION: Demonstrates how to register a new view with a canvas and camera in the Babylon.js engine. This creates a connection between a specific canvas element and camera for rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiCanvas.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet view = engine.registerView(document.getElementById(\"renderCanvas1\"), camera1);\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Shader in HTML Script Tag (HTML/GLSL)\nDESCRIPTION: Shows how to embed GLSL fragment shader code directly within an HTML file using a `<script>` tag. The `type` is `application/fragmentShader` and the `id` is `fragmentShaderCode`. This shader samples a texture using the received UV coordinates to determine the final pixel color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/fragmentShader\" id=\"fragmentShaderCode\">\n    #ifdef GL_ES\n        precision mediump float;\n    #endif\n\n    varying vec2 vUV;\n\n    uniform sampler2D textureSampler;\n\n    void main(void) {\n        gl_FragColor = texture2D(textureSampler, vUV);\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Post-Process OnApply Configuration\nDESCRIPTION: Sets up the onApply callback for a post-process to configure uniform values before rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npostProcess.onApply = function (effect) {\n  effect.setFloat2(\"screenSize\", postProcess1.width, postProcess1.height);\n  effect.setFloat(\"highlightThreshold\", 0.9);\n};\n```\n\n----------------------------------------\n\nTITLE: Applying a Babylon.js Post-Process using ImageFilter in JavaScript\nDESCRIPTION: Shows how to apply a built-in Babylon.js post-process (e.g., BlackAndWhitePostProcess) to an image source using the ImageFilter's `filter` method. The `imageToProcess` can be an image URL, video element, or canvas element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst blackAndWhitePostProcess = new BlackAndWhitePostProcess(\"bw\", 1, null, undefined, engine);\nbackAndWhiteFilter.filter(imageToProcess, blackAndWhitePostProcess);\n```\n\n----------------------------------------\n\nTITLE: Animating Uniforms for ShaderBuilder Material in JavaScript\nDESCRIPTION: This JavaScript code implements the animation loop when using `ShaderBuilder`. It increments the `time` variable in each frame. It uses the `ShaderMaterialHelper` to automatically update standard uniforms (like camera position, view/projection matrices) and passes the custom `time` uniform value to all relevant materials in the scene, driving the wave animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = 0;\nscene.registerBeforeRender(function () {\n\n\ttime += 0.1;\n\n    new BABYLONX.ShaderMaterialHelper().SetUniforms(\n        scene.meshes,\n        camera.position,\n        camera.target,\n        { x: 0, y: 0 },\n        { x: 100, y: 100 },\n        time);\n\t            \n});\n```\n\n----------------------------------------\n\nTITLE: Adding Playground Example in BabylonJS Documentation\nDESCRIPTION: Shows how to embed a BabylonJS Playground example with title, description and optional image using a custom component.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"playgroundId\" title=\"Playground title\" description=\"A short description\" image=\"Optional image url\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Agent Orientation\nDESCRIPTION: Calculates and applies proper orientation to an agent based on its velocity vector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/crowdAgents.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet velocity = crowd.getAgentVelocity(agentIndex);\nif (velocity.length() > 0.2) {\n  const desiredRotation = Math.atan2(velocity.x, velocity.z);\n  ag.mesh.rotation.y = ag.mesh.rotation.y + (desiredRotation - ag.mesh.rotation.y) * 0.05;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BabylonJS Lottie Extension\nDESCRIPTION: Command to install the babylonjs-lottie extension and its core dependency using pnpm package manager\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/lottieTexture.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add babylonjs-lottie @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Positioning a Mesh Using Vector3 in Babylon.js\nDESCRIPTION: Shows how to position a mesh using a Vector3 object. This method allows setting all three position coordinates at once, achieving the same result as setting individual properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/placement.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbox.position = new BABYLON.Vector3(-2, 4.2, 0.1);\n```\n\n----------------------------------------\n\nTITLE: GUIMeter Visibility Check Method\nDESCRIPTION: Method to check if the GUI meter element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiMeter.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Implementing WebGPUQuerySet Class in TypeScript\nDESCRIPTION: This class implements GPU query sets and is used by both WebGPUOcclusionQuery and WebGPUTimestampQuery. It follows the WebGPU specification for queries.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUOverview.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebGPUQuerySet {\n    // Implementation details not provided in the text\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Selector from a Group in a Selection Panel using JavaScript\nDESCRIPTION: This snippet shows how to remove a specific selector from a particular group within a `selectBox` using `removeFromGroupSelector`. It requires the index of the target group (0) and the index of the selector within that group (0).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/selector.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nselectBox.removeFromGroupSelector(0, 0);\n```\n\n----------------------------------------\n\nTITLE: Parsing Loaded Text File as JSON in AssetsManager Callback (JavaScript)\nDESCRIPTION: Illustrates how to access the loaded text content via the `text` property of the completed task (e.g., `particleFile.text`) and parse it into a JavaScript object using `JSON.parse`. This occurs within the `onFinish` callback of the `AssetsManager` after the file has been loaded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particles_loadFromFile.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nassetsManager.onFinish = function (task) {\n    console.log(\"task successful\", task);\n\n    // prepare to parse particle system files\n    const particleJSON = JSON.parse(particleFile.text);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Assigning Value to an Input Block in Babylon.js Node Material with JavaScript\nDESCRIPTION: Creates an InputBlock representing a uniform or constant input and assigns it a static numerical value. Requires Babylon.js and a valid block name. The block can be used to inject literal values into the node graph, typically for time or scalar parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst timeInput = new BABYLON.InputBlock(\"time\");\ntimeInput.value = 0;\n```\n\n----------------------------------------\n\nTITLE: Defining Physics Impostor Parameters Interface\nDESCRIPTION: TypeScript interface defining the configuration options for physics impostors, including mass, friction, restitution, and other physics-related parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface PhysicsImpostorParameters {\n    mass: number;\n    friction?: number;\n    restitution?: number;\n    nativeOptions?: any;\n    ignoreParent?: boolean;\n    disableBidirectionalTransformation?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Point Proximity Query Interface\nDESCRIPTION: Interface definition for querying the closest shape within a specified maximum distance from a point in 3D space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapeCast.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface IPhysicsPointProximityQuery {\n/**\n* The position of the query\n*/\nposition: Vector3;\n/**\n* Maximum distance to check for collisions. Can be set to 0 to check for overlaps.\n*/\nmaxDistance: number;\n/**\n* Collision filter for the query.\n*/\ncollisionFilter: IRaycastQuery;\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating Color Distributions for GreasedLine - Babylon.js - JavaScript\nDESCRIPTION: This enum snippet defines possible methods for distributing colors across GreasedLine segments when a color array is provided. Used in the `colorDistribution` property, these options allow for repeating, evenly spreading, or anchoring colors at different parts of the line. This setup is key for advanced visual effects and usage of custom color schemes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nenum GreasedLineMeshColorDistribution {\n    COLOR_DISTRIBUTION_NONE = 0,\n    COLOR_DISTRIBUTION_REPEAT = 1,\n    COLOR_DISTRIBUTION_EVEN = 2,\n    COLOR_DISTRIBUTION_START = 3,\n    COLOR_DISTRIBUTION_END = 4,\n    COLOR_DISTRIBUTION_START_END = 5,\n}\n```\n\n----------------------------------------\n\nTITLE: CSG2 toMesh Function Options Object - JavaScript\nDESCRIPTION: Provides a structure for the optional parameter that can be passed to the toMesh function of a CSG2 object. Used to control normal rebuilding and mesh centering during mesh generation. Expects a JavaScript object with two boolean options: rebuildNormals and centerMesh. Intended for advanced customization of mesh creation from CSG2 objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/mergeMeshes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    /**\n     * Rebuild normals (false by default)\n     */\n    rebuildNormals: boolean;\n    /**\n     * True to center the mesh on 0,0,0. True by default\n     */\n    centerMesh?: boolean;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading Assets from Dropbox\nDESCRIPTION: Demonstrates how to load assets from Dropbox using a modified public download link.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/externalPGAssets.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"https://dl.dropbox.com/s/rANdoMGeneR4tedLink/my-file.glb\", scene);\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Components\nDESCRIPTION: Implementation of a camera component specifically for camera game objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class NewCameraComponent extends BABYLON.CameraComponent {\n\n            protected start() :void {\n                console.log(\"Starting camera component for owner: \" + this.camera.name);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Automating Babylon.js Export using MEL Script in Maya\nDESCRIPTION: Demonstrates the sequence of MEL commands used to automate the export of a Maya scene to the Babylon.js format. First, use the `GenerateExportersParameter` command, specifying a path and export type, to create the necessary parameter configuration. Then, use the `ScriptToBabylon` command, potentially after specifying other parameters, to execute the export based on the generated settings. This allows for integration into automated workflows. An example script is available in the exporter's Maya\\MELScripts folder.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Maya.md#2025-04-23_snippet_5\n\nLANGUAGE: MEL\nCODE:\n```\n// 1. Generate the exporter parameters\nGenerateExportersParameter \"path/to/your/parameters.json\" \"Babylon\"\n```\n\nLANGUAGE: MEL\nCODE:\n```\n// 2. Specify other parameters (if needed) and export\n// Example (parameters might vary based on generated file and needs):\n// string $outputFormat = \"babylon\"; \n// ... other parameters ...\nScriptToBabylon \"path/to/your/parameters.json\"\n```\n\n----------------------------------------\n\nTITLE: Adding Emissive Texture Property to Material Class\nDESCRIPTION: Adds the emissiveTexture property to the DiffuseEmissiveMaterial class to store the reference to the emissive texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npublic emissiveTexture: BaseTexture;\n```\n\n----------------------------------------\n\nTITLE: Force Terrain Update Configuration in BabylonJS\nDESCRIPTION: Sets the terrain to update every frame instead of only when necessary.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.refreshEveryFrame = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to a Babylon Workspace Package - npm Shell Commands - Shell\nDESCRIPTION: This shell command illustrates how to add a dependency to a specific workspace package within a monorepo. The package to be installed should be replaced with the actual npm package name. The '-w @namespace/package-name' parameter specifies which workspace package will have the dependency added. Including the '-D' flag designates the installed package as a devDependency. Requires npm 7+ with workspace support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\nnpm install package-to-install -w @namespace/package-name\n```\n\n----------------------------------------\n\nTITLE: Customizing Axes Configuration in Babylon.js\nDESCRIPTION: Updates the axes viewer with custom positions and directions using Vector3 parameters. Allows for non-orthogonal axis configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/World_Axes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naxes.update(position, xAxis, yAxis, zAxis) //all parameters are Vector3s\n```\n\n----------------------------------------\n\nTITLE: Creating Terrain Data Map with Sine/Cosine Function in JavaScript\nDESCRIPTION: Generates a terrain height map using sine and cosine functions to create rolling hills. The map data is stored in a Float32Array with x, y, z coordinates for each point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/DTExamples.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapSubX = 100;\nconst mapSubZ = 100;\nconst mapData = new Float32Array(mapSubX * mapSubZ * 3);\nfor (let l = 0; l < mapSubZ; l++) {\n  for (let w = 0; w < mapSubX; w++) {\n    mapData[3 * (l * mapSubX + w)] = (w - mapSubX * 0.5) * 2.0;\n    mapData[3 * (l * mapSubX + w) + 1] = (w / (l + 1)) * Math.sin(l / 2) * Math.cos(w / 2) * 2.0;\n    mapData[3 * (l * mapSubX + w) + 2] = (l - mapSubZ * 0.5) * 2.0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Wall, Door, and Window Facets in Babylon.js (JavaScript)\nDESCRIPTION: This snippet builds the geometry for wall sections that contain doors and windows using Babylon.js-compatible data structures. It calculates vertex positions using complex indexing and corner arrays, assigns UVs for accurate texture mapping, and prepares an indices buffer for triangles. Branches handle cases where walls have no doors, and additional loops construct window and top wall facets. Required dependencies are Babylon.js and correctly structured data for walls, windows, and doors. Inputs include arrays of corner coordinates and sizes; outputs are populated positions, uvs, indices, and color arrays. Limitation: Assumes all necessary variables (e.g., positions, uvs, indices, etc.) are defined in the surrounding scope.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\t\t\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].doorSpaces[doorNb].door.width/maxL, exteriorUV.y); //base right\\n\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\\n\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].doorSpaces[doorNb].door.width/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\\n\\t\\t\\t\\n\\t\\t\\tindices.push(nbIndices + 2, nbIndices + 1, nbIndices + 3, nbIndices + 2, nbIndices, nbIndices + 1);\\n\\t\\t\\t\\n\\t\\t\\t//right side\\n\\t\\t\\tnbIndices = positions.length/3; // current number of indices\\n\\t\\t\\t\\n\\t\\t\\tpositions.push(innerDoorCorners[w][doorNb][2].x, innerDoorCorners[w][doorNb][2].y, innerDoorCorners[w][doorNb][2].z); //tl\\n\\t\\t\\tpositions.push(innerDoorCorners[w][doorNb][3].x, innerDoorCorners[w][doorNb][3].y, innerDoorCorners[w][doorNb][3].z); //bl\\n\\t\\t\\tpositions.push(outerDoorCorners[w][doorNb][2].x, outerDoorCorners[w][doorNb][2].y, outerDoorCorners[w][doorNb][2].z); //tr\\n\\t\\t\\tpositions.push(outerDoorCorners[w][doorNb][3].x, outerDoorCorners[w][doorNb][3].y, outerDoorCorners[w][doorNb][3].z); //br\\n\\t\\t\\t\\n\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].doorSpaces[doorNb].door.height/maxH); //top Left\\n\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\n\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].doorSpaces[doorNb].door.height/maxH); //top right\\n\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y); //base right\\n\\t\\t\\t\\n\\t\\t\\tindices.push(nbIndices, nbIndices + 3, nbIndices + 2, nbIndices, nbIndices + 1, nbIndices + 3);\\n\\t\\t\\t\\n\\t\\t\\tdoorsRemaining--\\n\\t\\t\\tdoorNb++\\n\\t\\t\\t\\n\\t\\t} \\n\\t\\t\\tdoorNb--;\\n\\t\\t\\tnbIndices = positions.length/3; // current number of indices\\n\\t\\t\\t\\n\\t\\t\\t//final base\\n\\t\\t\\tif(doors > 0) {\\n\\t\\t\\t\\tpositions.push(innerDoorCorners[w][doorNb][3].x, innerDoorCorners[w][doorNb][3].y, innerDoorCorners[w][doorNb][3].z); //bl\\n\\t\\t\\t\\tpositions.push(innerBaseCorners[w + 1].x, innerBaseCorners[w + 1].y, innerBaseCorners[w + 1].z); //br\\n\\t\\t\\t\\tpositions.push(outerDoorCorners[w][doorNb][3].x, outerDoorCorners[w][doorNb][3].y, outerDoorCorners[w][doorNb][3].z); //tl\\n\\t\\t\\t\\tpositions.push(outerBaseCorners[w + 1].x, outerBaseCorners[w + 1].y, outerBaseCorners[w + 1].z); //tr\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * (wallLength - (walls[w].doorSpaces[doorNb].left + walls[w].doorSpaces[doorNb].door.width))/maxL, exteriorUV.y); //base right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * (wallLength - (walls[w].doorSpaces[doorNb].left + walls[w].doorSpaces[doorNb].door.width))/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tpositions.push(innerBaseCorners[w].x, innerBaseCorners[w].y, innerBaseCorners[w].z); //bl\\n\\t\\t\\t\\tpositions.push(innerBaseCorners[w + 1].x, innerBaseCorners[w + 1].y, innerBaseCorners[w + 1].z); //br\\n\\t\\t\\t\\tpositions.push(outerBaseCorners[w].x, outerBaseCorners[w].y, outerBaseCorners[w].z); //tl\\n\\t\\t\\t\\tpositions.push(outerBaseCorners[w + 1].x, outerBaseCorners[w + 1].y, outerBaseCorners[w + 1].z); //tr\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * wallLength/maxL, exteriorUV.y); //base right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * wallLength/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\tindices.push(nbIndices, nbIndices + 1, nbIndices + 3, nbIndices + 3, nbIndices + 2, nbIndices);\\n\\t\\t\\n\\t\\t\\t//Construct facets for window base, top and sides, repeating positions for flatshaded mesh\\n\\t\\t\\tfor (ww = 0 ; ww < innerWindowCorners[w].length; ww++) {\\n\\t\\t\\t\\t//left side\\n\\t\\t\\t\\tnbIndices = positions.length/3; // current number of indices\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][3].x, innerWindowCorners[w][ww][3].y, innerWindowCorners[w][ww][3].z); //tr\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][0].x, innerWindowCorners[w][ww][0].y, innerWindowCorners[w][ww][0].z); //br\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][3].x, outerWindowCorners[w][ww][3].y, outerWindowCorners[w][ww][3].z); //tl\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][0].x, outerWindowCorners[w][ww][0].y, outerWindowCorners[w][ww][0].z); //bl\\n\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].windowSpaces[ww].window.height/maxH); //top right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y); //base right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].windowSpaces[ww].window.height/maxH); //top Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\n\\n\\t\\t\\t\\tindices.push(nbIndices + 1, nbIndices, nbIndices + 3,  nbIndices + 2, nbIndices + 3, nbIndices);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//base\\n\\t\\t\\t\\tnbIndices = positions.length/3; // current number of indices\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][0].x, innerWindowCorners[w][ww][0].y, innerWindowCorners[w][ww][0].z); //tl\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][1].x, innerWindowCorners[w][ww][1].y, innerWindowCorners[w][ww][1].z); //tr\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][0].x, outerWindowCorners[w][ww][0].y, outerWindowCorners[w][ww][0].z); //bl\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][1].x, outerWindowCorners[w][ww][1].y, outerWindowCorners[w][ww][1].z); //br\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].windowSpaces[ww].window.width/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].windowSpaces[ww].window.width/maxL, exteriorUV.y); //base right\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tindices.push(nbIndices + 1, nbIndices, nbIndices + 3, nbIndices + 3,nbIndices, nbIndices + 2);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//right side\\n\\t\\t\\t\\tnbIndices = positions.length/3; // current number of indices\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][1].x, innerWindowCorners[w][ww][1].y, innerWindowCorners[w][ww][1].z); //bl\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][2].x, innerWindowCorners[w][ww][2].y, innerWindowCorners[w][ww][2].z); //tl\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][1].x, outerWindowCorners[w][ww][1].y, outerWindowCorners[w][ww][1].z); //br\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][2].x, outerWindowCorners[w][ww][2].y, outerWindowCorners[w][ww][2].z); //tr\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].windowSpaces[ww].window.height/maxH); //top Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y); //base right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x), exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].windowSpaces[ww].window.height/maxH); //top right\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tindices.push(nbIndices + 1, nbIndices + 2, nbIndices + 3, nbIndices, nbIndices + 2, nbIndices + 1);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//top\\n\\t\\t\\t\\tnbIndices = positions.length/3; // current number of indices\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][2].x, innerWindowCorners[w][ww][2].y, innerWindowCorners[w][ww][2].z); //br\\n\\t\\t\\t\\tpositions.push(innerWindowCorners[w][ww][3].x, innerWindowCorners[w][ww][3].y, innerWindowCorners[w][ww][3].z); //bl\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][2].x, outerWindowCorners[w][ww][2].y, outerWindowCorners[w][ww][2].z); //tr\\n\\t\\t\\t\\tpositions.push(outerWindowCorners[w][ww][3].x, outerWindowCorners[w][ww][3].y, outerWindowCorners[w][ww][3].z); //tl\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].windowSpaces[ww].window.width/maxL, exteriorUV.y); //base right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\n\\t\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].windowSpaces[ww].window.width/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\\n\\t\\t\\t\\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tindices.push(nbIndices + 3, nbIndices, nbIndices + 2, nbIndices + 1, nbIndices, nbIndices + 3);\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//Construction of top of wall facets\\n\\t\\t\\tnbIndices = positions.length/3; // current number of indices\\n\\t\\t\\t\\n\\t\\t\\tpositions.push(innerTopCorners[w].x, innerTopCorners[w].y, innerTopCorners[w].z); //tl\\n\\t\\t\\tpositions.push(innerTopCorners[w + 1].x, innerTopCorners[w + 1].y, innerTopCorners[w + 1].z); //tr\\n\\t\\t\\tpositions.push(outerTopCorners[w].x, outerTopCorners[w].y, outerTopCorners[w].z); //bl\\n\\t\\t\\tpositions.push(outerTopCorners[w + 1].x, outerTopCorners[w + 1].y, outerTopCorners[w + 1].z); //br\\n\\t\\t\\t\\n\\t\\t\\tuvx = exteriorUV.x + 0.5 * wallDiff * (exteriorUV.z - exteriorUV.x)/maxL;\\n\\t\\t\\tuvs.push(uvx, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\\n\\n\\t\\t\\tuvx = exteriorUV.x + (0.5 * wallDiff + wallLength) * (exteriorUV.z - exteriorUV.x)/maxL;\\n\\t\\t\\tuvs.push(uvx, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\\n\\n\\t\\t\\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\\t\\t\\t\\t\\n\\t\\t\\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * exteriorWallLength/(maxL + wallDiff), exteriorUV.y); //base right\\n\\n\\t\\t\\tindices.push(nbIndices + 1, nbIndices, nbIndices + 3, nbIndices + 2, nbIndices + 3, nbIndices); \\n\\t\\t\\t\\n\\t\\t\\tfor(let p = interiorIndex; p < positions.length/3; p++) {\\n\\t\\t\\t\\tcolors.push(exteriorColor.r, exteriorColor.g, exteriorColor.b, exteriorColor.a);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (interior) {  //close ends of walls\\n                nbIndices = positions.length/3; // current number of indices\\n                \n```\n\n----------------------------------------\n\nTITLE: Configuring a New Visualization Test in JSON\nDESCRIPTION: Provides an example JSON object structure for adding a new visualization test to the `config.json` file. It includes mandatory fields like `title` and `playgroundId`, and optional fields like `referenceImage`, `excludedEngines` (e.g., [\"webgl1\"]), and `renderCount` (default is 1) for defining test behavior and metadata.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n//...,\n{\n  \"title\": \"My new visualization test\", // the title of the test\n  \"playgroundId\": \"#ABCDEF#12\", // the playground snippet id\n  \"referenceImage\": \"nameOfReferenceImage.png\", // a name for the image snapshot that will be generated. Optional!\n  \"excludedEngines\": [\"webgl1\"], // optional lists of engine you don't want the test to run on\n  \"renderCount\": 2, // optional, the number of frames the scene should render. Default is 1. Good for animated scenes.\n},\n//...\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Controller Events using Observables in JavaScript\nDESCRIPTION: Shows how to subscribe to abstract controller events in Babylon.js using JavaScript. It demonstrates adding callback functions to `onPadValuesChangedObservable` (for stick/pad position changes) and `onTriggerStateChangedObservable` (for trigger state changes) to react to controller inputs. The callbacks receive a state object containing relevant data (like `{x, y}` coordinates or button `value`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncontroller.onPadValuesChangedObservable.add(function (stateObject) {\n  console.log(stateObject); // {x: 0.1, y: -0.3}\n});\ncontroller.onTriggerStateChangedObservable.add(function (stateObject) {\n  let value = stateObject.value;\n  console.log(value);\n});\n```\n\n----------------------------------------\n\nTITLE: Workaround for Passing Samplers Using #define inline in GLSL (WebGPU)\nDESCRIPTION: Shows the workaround for the WebGPU limitation of passing samplers to functions in GLSL shaders. By adding the `#define inline` directive before the function definition, Babylon.js's pre-pass shader code inliner is instructed to replace calls to this function with the function's actual code body during shader processing. This avoids the WebGPU compilation error related to passing samplers as arguments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUBreakingChanges.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n#define inline\nvec4 getPixel(sampler2D sampler, vec2 uv) {\n    return texture2D(sampler, uv);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Section Data and Track for Open Path (Babylon.js, JavaScript)\nDESCRIPTION: Shows the definition of sectionData objects, including a dummy final section for open path termination, collecting them into an array and initializing a track. The dummy section provides end-rotation data crucial for correct boundary behavior. Applies after constructing the points array and, optionally, visualization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar section0 = new sectionData(0, options0);\nvar section1 = new sectionData(125, options1);\nvar section2 = new sectionData(250, options2);\nvar section3 = new sectionData(375, options3); //Dummy section\n\nvar sections = [section0, section1, section2, section3];\n\nvar track = createTrack(points, sections);\n```\n\n----------------------------------------\n\nTITLE: Defining Lens Flare System Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Specifies the JSON object structure for defining a lens flare system in Babylon.js. It requires the ID of the emitter (usually a light source), an optional border limit, and an array containing the definitions of the individual lens flares that make up the effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n     \"emitterId\": string,\n     \"borderLimit\": int,\n     \"flares\": array of LensFlares (see below)\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Babylon.js Splitting with Rollup manualChunks (Object) (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates an alternative Rollup configuration using the object syntax for `output.manualChunks`. It explicitly defines a chunk named \"babylonjs\" and assigns the entry point module `@babylonjs/core` to it. Rollup will then include `@babylonjs/core` and all its static dependencies within this single chunk, effectively preventing splitting of the core library.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nexport default {\n  // ...\n  output: {\n    dir: \"output\",\n    manualChunks: {\n      babylonjs: [\"@babylonjs/core\"],\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Extruding Car Body from Outline\nDESCRIPTION: Creates a 3D car body mesh by extruding the defined outline shape using MeshBuilder.ExtrudePolygon with a specified depth.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/polycar.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst car = BABYLON.MeshBuilder.ExtrudePolygon(\"car\", {shape: outline, depth: 0.2});\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Anchors System - JavaScript\nDESCRIPTION: Demonstrates how to enable the WebXR Anchor System feature using the Babylon.js featuresManager in JavaScript. This enables tracking and updating anchored points in an AR environment. The feature must be enabled during a valid XR session. No special parameters are required, but users can pass options for advanced behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// featuresManager from the base webxr experience helper\\nconst anchorSystem = featuresManager.enableFeature(BABYLON.WebXRAnchorSystem, \\\"latest\\\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Custom Shadow Map Shader in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to assign a global custom shader for all shadow cast objects using the shadowGenerator.customShaderOptions property in Babylon.js. It sets the shader name and specifies an extra uniform (customWorld) required in the custom shader code. The global custom shadow map shader will override the default shadow rendering for all casters managed by the shadow generator. Additional attributes, uniforms, samplers, and defines can be passed for further shader customization. Dependencies include Babylon.js v4.0 or later.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nshadowGenerator.customShaderOptions = {\n  shaderName: \"customShadowMap\",\n  uniforms: [\"customWorld\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceSourceManager in JavaScript\nDESCRIPTION: Creates an instance of the DeviceSourceManager class using a scene's engine object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/deviceSourceManager.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst deviceSourceManager = new BABYLON.DeviceSourceManager(scene.getEngine());\n```\n\n----------------------------------------\n\nTITLE: Constructing an Anaglyph Universal Camera in Babylon.js\nDESCRIPTION: Creates an Anaglyph Universal Camera for use with red and cyan 3D glasses. The eyeSpace parameter sets the amount of shift between left and right eye views.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters : name, position, eyeSpace, scene\nconst camera = new BABYLON.AnaglyphUniversalCamera(\"af_cam\", new BABYLON.Vector3(0, 1, -15), 0.033, scene);\n```\n\n----------------------------------------\n\nTITLE: Example Configuration JavaScript Object\nDESCRIPTION: JavaScript representation of the minimal configuration object structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    extends: \"minimal\",\n    scene: {\n        debug: true\n    },\n    engine: {\n        antialiasing: false\n    },\n    model: \"https://playground.babylonjs.com/scenes/Rabbit.babylon\",\n    configuration=\"http://example.com/viewerConfig.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Emissive Texture Coordinates in Vertex Shader\nDESCRIPTION: Calculates the correct UV coordinates for the emissive texture in the vertex shader main function, supporting both primary and secondary UV sets based on material configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n#ifdef EMISSIVE\n\tif (vEmissiveInfos.x == 0.)\n\t{\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\n\t}\n\telse\n\t{\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\n\t}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom HTML Tags for Babylon.js Viewer\nDESCRIPTION: Shows how to disable the default initialization of <babylon> tags and instead initialize viewer functionality on custom HTML tags.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// a simple way of disabling auto init\nBabylonViewer.disableInit = true;\n// Initializing the viewer on specific HTML tags.\nBabylonViewer.InitTags(\"the-other-tag-name\");\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Babylon.js Post Process with Node Material (JavaScript)\nDESCRIPTION: This snippet shows how to apply the effect defined in a `NodeMaterial` (configured in 'Post Process' mode) to an already existing `BABYLON.PostProcess` instance. The `createEffectForPostProcess` method is used to update the effect of the specified post process (`myPostProcess`) without creating a new instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/NMEPostProcesses.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPostProcess = new BABYLON.PostProcess(...);\n...\nnodeMaterial.createEffectForPostProcess(myPostProcess);\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Colors and UVs\nDESCRIPTION: Shows how to set up color and UV mapping for terrain objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/addingDTObjects.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 100; // terrain subdivisions\nconst terrainOptions = {\n  terrainSub: terrainSub,\n  mapData: mapData,\n  mapSubX: mapSubX,\n  mapSubZ: mapSubZ,\n  mapColors: mapColors,\n  SPmapData: SPmapData, // object map\n  sps: sps, // SPS to render the objects on the terrain\n  SPcolorData: SPcolorData, // object colors\n  SPuvData: SPuvData, // object UVs to apply to the SPS material\n};\nconst terrain = new BABYLON.DynamicTerrain(\"dt\", terrainOptions, scene);\nterrain.mesh.material = terrainMaterial; // terrain material\n\nsps.mesh.material = objectMaterial; // object material !\n```\n\n----------------------------------------\n\nTITLE: Simplified Line Creation in Babylon.js\nDESCRIPTION: Shows the condensed syntax for creating lines with minimal options, demonstrating both basic and updatable versions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/lines.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet lines = BABYLON.MeshBuilder.CreateLines(\"lines\", { points }, scene);\nlet lines = BABYLON.MeshBuilder.CreateLines(\"lines\", { points, updatable, instance }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating and Exploding an Array of Meshes Programmatically - Babylon.js JavaScript\nDESCRIPTION: This extended example builds a collection of sphere meshes arranged in a circle and shows how to use MeshExploder to explode them. The code requires a valid Babylon.js scene and uses MeshBuilder for sphere creation. Input parameters include mesh specifications and a scene object; after setup, calling explode(2) multiplies the distances, visually expanding the arrangement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/meshExploder.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst toExplodeArray = [];\nconst sphere1 = BABYLON.MeshBuilder.CreateSphere(\"sphere1\", { segments: 12, diameter: 2 }, scene);\nsphere1.position.y += 2;\ntoExplodeArray.push(sphere1);\n\nfor (let alpha = 0; alpha < Math.PI * 2; alpha += Math.PI / 10) {\n  const sphere0 = BABYLON.MeshBuilder.CreateSphere(\"sphere0\", { segments: 8, diameter: 0.5 }, scene);\n  sphere0.position.y = 2;\n  sphere0.position.z = Math.cos(alpha) * 1.25;\n  sphere0.position.x = Math.sin(alpha) * 1.25;\n  toExplodeArray.push(sphere0);\n}\n\nconst newExplosion = new BABYLON.MeshExploder(toExplodeArray);\n\nnewExplosion.explode(2);\n```\n\n----------------------------------------\n\nTITLE: Clockwise Vector Rotation Transformation\nDESCRIPTION: Formula for R⁻, a clockwise 60° rotation of position vector xi⃗ + yj⃗ about the origin on an isometric grid. This transforms the vector using the k⃗ unit vector which equals -i⃗ + j⃗.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nR⁻(xi⃗ + yj⃗) = yi⃗ - xk⃗ = yi⃗ - x(-i⃗ + j⃗) = (x + y)i⃗ - xj⃗\n```\n\n----------------------------------------\n\nTITLE: Physics Impostor Constructor Definition\nDESCRIPTION: TypeScript interface definition for creating physics impostors in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.PhysicsImpostor(object: IPhysicsEnabledObject, type: number, options: PhysicsImpostorParameters, scene:BABYLON.Scene);\n```\n\n----------------------------------------\n\nTITLE: Publishing Vaporwear 3D Experience as NPM Package using Shell Command\nDESCRIPTION: This shell command demonstrates the process of publishing the Vaporwear 3D experience as a private NPM package. This allows easy integration into the frontend React application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpm publish --access private\n```\n\n----------------------------------------\n\nTITLE: Configuring Sharpening in Babylon.js Pipeline\nDESCRIPTION: Enables and configures sharpening effect parameters including edge amount and color amount.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/defaultRenderingPipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.sharpenEnabled = true;\npipeline.sharpen.edgeAmount = 0.9;\npipeline.sharpen.colorAmount = 0.0;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tint Block in GLSL\nDESCRIPTION: An annotated GLSL fragment shader that defines a tint block for Smart Filters. It includes uniforms for input texture, tint color, and amount, with a main function that mixes the input color with the tint.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/sfe.md#2025-04-23_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\n// { \"smartFilterBlockType\": \"AnnotatedGlslTintBlock\" }\n\nuniform sampler2D input;\n// { \"default\": { \"r\": 1, \"g\": 0, \"b\": 0 } }\nuniform vec3 tint;\n// { \"default\": 0.25 }\nuniform float amount;\n\nvec4 mainImage(vec2 vUV) { // main\n    vec4 color = texture2D(input, vUV);\n    vec3 tinted = mix(color.rgb, tint, amount);\n    return vec4(tinted, color.a);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CubeTextures in Babylon.js\nDESCRIPTION: Code snippet for creating a CubeTexture in Babylon.js. It requires a common part of the filenames for all six sides of the cube and the scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/availableTextures.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.CubeTexture(\"textures/common part of filenames\", scene);\n//e.g.: new BABYLON.CubeTexture(\"textures/skykox2\", scene);\n```\n\n----------------------------------------\n\nTITLE: Adding Particles to an Expandable SPS in JavaScript\nDESCRIPTION: Demonstrates adding new particles to an existing expandable Solid Particle System. It uses `addShape()` multiple times to add particles based on `model1`, `model2`, and `model3`. After adding shapes, `buildMesh()` must be called to update the SPS geometry, followed by `setParticles()` to apply the changes. Assumes `sps` is an existing expandable `SolidParticleSystem`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/expandable_sps.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, { expandable: true });\nsps.addShape(model1, 100); // adds 100 particles from model1\nsps.buildMesh();\n\n// ... further in the code, when needed\nsps.addShape(model2, 100); // adds 100 new particles from model2\nsps.addShape(model3, 200); // and 200 particles from model3\nsps.buildMesh(); // updates the SPS mesh geometry from the last particle additions\nsps.setParticles();\n```\n\n----------------------------------------\n\nTITLE: Creating a GUISpinner in Babylon.js\nDESCRIPTION: Demonstrates how to create a new GUISpinner element. The constructor takes parameters for id, options, GUI manager, callback function, and whether to append to the body.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSpinner.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUISpinner(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Animated MeshWriter Text with Particle System\nDESCRIPTION: Advanced example showing how to create animated 3D text using MeshWriter with particle system integration and rotation animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/meshWriter.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst SCALE = 0.25;\nconst TEXT_SIZE = 35;\nconst TEXT_THICKNESS = 10;\n\nWriter = BABYLON.MeshWriter(scene, { scale: SCALE, defaultFont: \"Arial\" });\ntextMesh = new Writer(\"BABYLON JS\", {\n  \"font-family\": \"Arial\",\n  anchor: \"center\",\n  \"letter-height\": TEXT_SIZE,\n  \"letter-thickness\": TEXT_THICKNESS,\n  color: \"#1C3870\",\n  colors: {\n    diffuse: \"#F0F0F0\",\n    specular: \"#000000\",\n    ambient: \"#F0F0F0\",\n    emissive: \"#ff00f0\"\n  },\n  position: {\n    x: 0,\n    y: 5,\n    z: 70\n  }\n});\n\n//Text Writer create SPS with Particle for each letter\nSPS = textMesh.getSPS();\n\n//Update animation\nSPS.updateParticle = (particle) => {\n  particle.rotation.x -= 0.06;\n};\n\nscene.registerBeforeRender(() => {\n  SPS.setParticles();\n  //sps.mesh.rotation.y = k;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Distance\nDESCRIPTION: Defines the radial distance from the target including the height offset.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.radius = 1;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Material for RenderTargetTexture in Babylon.js\nDESCRIPTION: This snippet demonstrates how to use a different material for a mesh when it's rendered into a render target texture, using the setMaterialForRendering method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/renderTargetTextureMultiPass.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst causticMaterial = new BABYLON.ShaderMaterial(\n    'caustic shader material', // human name\n    scene,\n    'caustic', // shader path\n    {\n        attributes: ['position', 'normal', 'uv'],\n        uniforms: ['world', 'worldView', 'worldViewProjection', 'view', 'projection', 'time', 'direction']\n    }\n);\n\n// the render texture. We'll render the scene with caustic shader to this texture.\nconst renderTarget = new BABYLON.RenderTargetTexture('caustic texture', 512, scene);\nscene.customRenderTargets.push(renderTarget);\n\nrenderTarget.setMaterialForRendering(ground, causticMaterial);\n```\n\n----------------------------------------\n\nTITLE: Applying Camera Projection Matrix Offsets for TAA\nDESCRIPTION: Updates the projection matrix with pixel offset values for temporal sampling. The offsets are applied in NDC space and scaled by viewport dimensions to maintain single-pixel precision.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/taaRenderingPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst projMat = camera.getProjectionMatrix();\nprojMat.m[8] = dx * 2 / width;\nprojMat.m[9] = dy * 2 / height;\nprojMat.markAsUpdated();\n```\n\n----------------------------------------\n\nTITLE: Creating a Track with createTrack (Babylon.js, JavaScript)\nDESCRIPTION: Demonstrates initializing a track for a carriage to follow using the 'createTrack' function in Babylon.js. Dependencies include an array of Vector3 points and an array of sectionData objects specifying segment parameters. The function returns an object with arrays detailing directions and rotations along the track. Inputs are the points and section arrays; the output is a track data structure for use in animation or orientation logic. Ensure points and sections are properly formed before invocation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar track = createTrack(points, sections);\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Structure in GLSL\nDESCRIPTION: This GLSL snippet shows the basic syntax for defining a function in the shader language. It requires specifying the return type, the function name, and the types of any parameters. The function body contains the code to be executed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/introToShaders.md#2025-04-23_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nfloat NAME(typed parameters) {\n\t*code*\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Animated Sprite Manager for UFO\nDESCRIPTION: Sets up a sprite manager for an animated UFO using a sprite sheet. Configures individual frame dimensions for animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/trees.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst spriteManagerUFO = new BABYLON.SpriteManager(\"UFOManager\", \"https://assets.babylonjs.com/environments/ufo.png\" /* url to sprite */, 1, {width: 128, height: 76});\n```\n\n----------------------------------------\n\nTITLE: Declaring Storage Texture in WGSL\nDESCRIPTION: This WGSL code demonstrates how to declare a storage texture for write operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_5\n\nLANGUAGE: wgsl\nCODE:\n```\nvar storageTexture : texture_storage_2d<rgba8unorm,write>;\n```\n\n----------------------------------------\n\nTITLE: Reflecting Sprite Both Horizontally and Vertically in Babylon.js\nDESCRIPTION: Swaps both horizontal and vertical UV coordinates to rotate sprite 180 degrees.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV = new BABYLON.Vector4(Utop_right, Vtop_right, Ubottom_left, Vbottom_left);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Immersive AR Scene in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to create a basic immersive AR scene using Babylon.js. It sets up a scene with a camera, light, and a sphere, then initializes a WebXR experience for AR.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar createScene = async function () {\n  var scene = new BABYLON.Scene(engine);\n  var camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n  camera.setTarget(BABYLON.Vector3.Zero());\n  camera.attachControl(canvas, true);\n  var light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\n  light.intensity = 0.7;\n  var sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\n  sphere.position.y = 2;\n  sphere.position.z = 5;\n\n  const xr = await scene.createDefaultXRExperienceAsync({\n    // ask for an ar-session\n    uiOptions: {\n      sessionMode: \"immersive-ar\",\n    },\n  });\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Engine Bundle Counters in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to access the engine's last-frame rendering counters in Babylon.js, allowing developers to monitor the creation and reuse of command bundles when using WebGPU's Non Compatibility Mode (NCM). The output object contains properties such as 'numEnableEffects', 'numEnableDrawWrapper', 'numBundleCreationNonCompatMode', and 'numBundleReuseNonCompatMode'. This helps diagnose the efficiency of bundle reuse and guides optimization efforts. Babylon.js and a properly initialized WebGPUEngine instance are required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\\n> engine.countersLastFrame\\n> {numEnableEffects: 0, numEnableDrawWrapper: 2, numBundleCreationNonCompatMode: 0, numBundleReuseNonCompatMode: 2}\\n```\n```\n\n----------------------------------------\n\nTITLE: Using Pointer Event Decorators in Babylon.JS\nDESCRIPTION: This snippet shows both global and mesh-specific pointer event handling using the @onPointerEvent decorator. The first method is called when clicking anywhere on the canvas, while the second is called only when the specific mesh is clicked.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/listeningEvents.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@onPointerEvent(PointerEventTypes.POINTERTAP, false)\nprotected _tapped(info: PointerInfo): void {\n    // Called on the user clicks anywhere on the canvas.\n}\n\n@onPointerEvent(PointerEventTypes.POINTERTAP, true)\nprotected _tapped(info: PointerInfo): void {\n    // Called on the user clicks on the mesh.\n}\n```\n\n----------------------------------------\n\nTITLE: Clockwise Vector Rotation About Any Point\nDESCRIPTION: Formula for S⁻, a clockwise 60° rotation of position vector xi⃗ + yj⃗ about point ai⃗ + bj⃗ on an isometric grid. The rotation is performed by translating to origin, rotating, and translating back.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_4\n\nLANGUAGE: math\nCODE:\n```\nS⁻(xi⃗ + yj⃗, ai⃗ + bj⃗) = R⁻((xi⃗ + yj⃗) - (ai⃗ + bj⃗)) + ai⃗ + bj⃗ = R⁻((x - a)i⃗ + (y - b)j⃗) + ai⃗ + bj⃗ = (x - a + y - b)i⃗ - (x - a)j⃗ + ai⃗ + bj⃗ = (x + y - b)i⃗ + (a + b - x)j⃗\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Downward Raycast for Ground Detection in Babylon.js (JavaScript)\nDESCRIPTION: Initializes a raycast for floor detection. It calculates the ray's origin (`raycastFloorPos`) based on the character mesh's position, adding an offset (0.5 units up) and optional horizontal offsets (`offsetx`, `offsetz`). A `Ray` object is then created, originating from this position, pointing downwards (`Vector3.Up().scale(-1)`), with a specified maximum length (`raycastlen`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet raycastFloorPos = new Vector3(this.mesh.position.x + offsetx, this.mesh.position.y + 0.5, this.mesh.position.z + offsetz);\nlet ray = new Ray(raycastFloorPos, Vector3.Up().scale(-1), raycastlen);\n```\n\n----------------------------------------\n\nTITLE: Vue Component Message Handler\nDESCRIPTION: Implementation of a Vue component message handler that updates reactive data when a MarbleSelected message is received from the BabylonJS scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsceneDirector.onMessage(SceneEventBusMessages.MarbleSelected, (payload: any) => {\n  selectedMarble.value = payload;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Prism Roof with CreateCylinder in Babylon.js\nDESCRIPTION: Creates a prism-shaped roof using CreateCylinder with 3 tessellation points, then applies scaling, rotation, and positioning to properly align it on top of the house structure. The cylinder is rotated horizontally and scaled to achieve the desired roof proportions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/variation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst roof = BABYLON.MeshBuilder.CreateCylinder(\"roof\", {diameter: 1.3, height: 1.2, tessellation: 3});\nroof.scaling.x = 0.75;\nroof.rotation.z = Math.PI / 2;\nroof.position.y = 1.22;\n```\n\n----------------------------------------\n\nTITLE: XR Feature Environment Interface Definition\nDESCRIPTION: TypeScript interface definition for XR feature environments. Shows the structure of feature wrappers that provide access to native BabylonJS XR features while adding additional functionality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/webxrextension.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IXRFeatEnv<NATIVE_FEAT_TYPE extends IWebXRFeature = IWebXRFeature>{\n\t//...\n\treadonly nativeFeature: NATIVE_FEAT_TYPE | undefined;\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Babylon.js Shader Controller in CGINCLUDE Section\nDESCRIPTION: This snippet shows the CGINCLUDE section of a custom shader that specifies the Babylon.js controller class to be used. This connects the Unity shader to the appropriate Babylon.js material implementation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/03_ShaderMaterials.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n CGINCLUDE #ifdef BABYLON_INFO controller: \"BABYLON.WaterMaterialController\" #endif //BABYLON_INFO_END ENDCG\n```\n\n----------------------------------------\n\nTITLE: Calculating Depth Metric per Light in Vertex Shader (GLSL/C) with Reverse Depth Buffer Support\nDESCRIPTION: This shader code computes the per-light depth metric in a vertex shader, supporting both normal and reverse depth buffer configurations. It evaluates vDepthMetric{X} based on the Z component of vPositionFromLight{X} and depthValues (minZ, range), handling negation and addition for reverse mode. The code depends on defines (USE_REVERSE_DEPTHBUFFER) to select behavior, with correct setup of light{X}.depthValues.x/y critical for consistency. Inputs are the vertex position from the light and the light's precomputed depth mapping, and the output is the per-vertex normalized depth metric for shadow checking.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/mathShadows.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#if USE_REVERSE_DEPTHBUFFER\n    vDepthMetric{X} = (-vPositionFromLight{X}.z + light{X}.depthValues.x) / light{X}.depthValues.y;\n#else\n    vDepthMetric{X} = (vPositionFromLight{X}.z + light{X}.depthValues.x) / light{X}.depthValues.y;\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Render Graph Parsing Options\nDESCRIPTION: Shows how to pass an optional configuration object as the third parameter to `NodeRenderGraph.ParseFromSnippetAsync`. This allows customization of behaviors like enabling debug textures, automatic configuration, verbose logging, automatic rebuilding on resize, and automatic filling of external inputs (like cameras and lights) based on scene defaults. The snippet displays the default values for these options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst nrg = await BABYLON.NodeRenderGraph.ParseFromSnippetAsync(\"#CCDXLX\", scene, {\n    debugTextures: false,\n    autoConfigure: false,\n    verbose: false,\n    rebuildGraphOnEngineResize: true,\n    autoFillExternalInputs: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling View in Babylon.js\nDESCRIPTION: Shows how to disable a view to improve performance, particularly useful when canvases are offscreen (Babylon.js v5+ feature).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiCanvas.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nview.enabled = false;\n```\n\n----------------------------------------\n\nTITLE: Disabling Bounding Info Synchronization in Babylon.js\nDESCRIPTION: Demonstrates how to turn off bounding info synchronization for a mesh to speed up world matrix computation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.doNotSyncBoundingInfo = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dash Settings for Spark Effect in BabylonJS\nDESCRIPTION: Configuration for creating spark effects using GreasedLine's dash mode settings. Sets dash ratio and count to create small, visible segments along the line.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_advanced/examples.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseDash: true,\ndashRatio: 0.98,\ndashCount: 10\n```\n\n----------------------------------------\n\nTITLE: Building Path Vectors (Tangent, Normal, Binormal) in Babylon.js (JavaScript)\nDESCRIPTION: Defines a function `buildVectors` that calculates and stores the tangent, normal, and binormal vectors for each point on the track. It uses `BABYLON.Vector3.TransformNormal` and applies the appropriate rotation matrices from the `track` data (`railDirections`, `rotations`, `carriageRotations`) depending on whether `isFreight` is true.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar tangents = [];\nvar normals = [];\nvar binormals = [];\nvar buildVectors = function() {\n    normals = [];\n    binormals = [];\n    for(let i = 0; i < nbPoints; i++) {\n        tangents.push(BABYLON.Vector3.TransformNormal(BABYLON.Axis.X, track.railDirections[i]));\n        if (isFreight) {\n                normals.push(BABYLON.Vector3.TransformNormal(BABYLON.Axis.Y, track.rotations[i]));\n                binormals.push(BABYLON.Vector3.TransformNormalToRef(BABYLON.Axis.Z, track.rotations[i]);\n            }\n            else {\n                normals.push(BABYLON.Vector3.TransformNormal(BABYLON.Axis.Y, track.carriageRotations[i]);\n                binormals.push(BABYLON.Vector3.TransformNormal(BABYLON.Axis.Z, track.carriageRotations[i]);\n            }\n        }\n }\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication with Built-in SDK\nDESCRIPTION: Demonstrates how to check user authentication status using the built-in heyVR SDK methods.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_heyVR.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.heyVR.user.isLoggedIn()\n    .then( () => console.log( 'User is authenticated!' ) )\n    .catch( () => console.warn( 'User is not logged in.' ) );\n```\n\n----------------------------------------\n\nTITLE: Adding a Blank Tile to JSON for Babylon.js Sprite Map\nDESCRIPTION: Illustrates how to add a blank tile definition to the JSON file used for sprite maps. This example uses a single transparent pixel as a blank tile.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_tiles.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"filename\": \"blank.png\",\n\t\"frame\": {\"x\":221,\"y\":221,\"w\":1,\"h\":1},\n\t\"rotated\": false,\n\t\"trimmed\": false,\n\t\"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n\t\"sourceSize\": {\"w\":32,\"h\":32}\n},\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Node Block by Name in Babylon.js Node Material with JavaScript\nDESCRIPTION: Fetches a block from the Node Material graph using a case-sensitive name string. Returns the block instance if found, undefined otherwise. Allows runtime access to update parameters or examine block state programmatically. The Node Material instance must be populated with blocks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet block = nodeMaterial.getBlockByName(\"MyBlock\");\n```\n\n----------------------------------------\n\nTITLE: Initializing the Game Scene in Babylon.js (TypeScript/JavaScript)\nDESCRIPTION: This asynchronous function `_setUpGame` initializes the main game scene. It creates a new `Scene` instance associated with the Babylon engine (`this._engine`) and assigns it to `this._gamescene`. The comment indicates that this function is also intended to handle the loading of game assets, which would typically follow the scene creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nprivate async _setUpGame() {\n    let scene = new Scene(this._engine);\n    this._gamescene = scene;\n\n    //...load assets\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Control Trigger System - Corner Rotation\nDESCRIPTION: Implements camera rotation logic for corner movements using trigger volumes. Adjusts camera angle based on player movement direction through corner areas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/collisionsTriggers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.mesh.intersectsMesh(this.scene.getMeshByName(\"cornerTrigger\"))) {\n    if (this._input.horizontalAxis > 0) {\n        this._camRoot.rotation = Vector3.Lerp(this._camRoot.rotation, new Vector3(this._camRoot.rotation.x, Math.PI / 2, this._camRoot.rotation.z), 0.4);\n    } else if (this._input.horizontalAxis < 0) {\n        this._camRoot.rotation = Vector3.Lerp(this._camRoot.rotation, new Vector3(this._camRoot.rotation.x, Math.PI, this._camRoot.rotation.z), 0.4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting GUIProgress Value in Babylon.js\nDESCRIPTION: Method to retrieve the current value of the progress bar GUI element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiProgress.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetValue(int) → void\n```\n\n----------------------------------------\n\nTITLE: Visualizing Path3D Curves with Tangents, Normals, and Binormals in Babylon.js\nDESCRIPTION: This function displays a Path3D curve and visualizes its tangent, normal, and binormal vectors at each point using colored lines. Tangents are shown in red, normals in green, and binormals in blue. The size parameter controls the length of these vector visualizations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Path3D.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction showPath3D(path3d, size) {\n  size = size || 0.5;\n  const curve = path3d.getCurve();\n  const tgts = path3d.getTangents();\n  const norms = path3d.getNormals();\n  const binorms = path3d.getBinormals();\n  let vcTgt, vcNorm, vcBinorm;\n  const line = BABYLON.MeshBuilder.CreateLines(\"curve\", { points: curve }, scene);\n  for (let i = 0; i < curve.length; i++) {\n    vcTgt = BABYLON.MeshBuilder.CreateLines(\"tgt\" + i, { points: [curve[i], curve[i].add(tgts[i].scale(size))] }, scene);\n    vcNorm = BABYLON.MeshBuilder.CreateLines(\"norm\" + i, { points: [curve[i], curve[i].add(norms[i].scale(size))] }, scene);\n    vcBinorm = BABYLON.MeshBuilder.CreateLines(\"binorm\" + i, { points: [curve[i], curve[i].add(binorms[i].scale(size))] }, scene);\n    vcTgt.color = BABYLON.Color3.Red();\n    vcNorm.color = BABYLON.Color3.Green();\n    vcBinorm.color = BABYLON.Color3.Blue();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Bone Rotation as Vector3 in Babylon.js\nDESCRIPTION: Demonstrates how to get the rotation of a bone as a Vector3 using the getRotation method. It takes space (world or local) and mesh as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst rotation = bone.getRotation(BABYLON.Space.WORLD, mesh);\n```\n\n----------------------------------------\n\nTITLE: Setting Emissive Texture for Lantern Lighting Effect\nDESCRIPTION: Updates the lantern state and swaps its material to create a visual lighting effect. This function is called when a lantern is lit by the player.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nthis.isLit = true;\nthis.mesh.material = this._lightmtl;\n```\n\n----------------------------------------\n\nTITLE: Defining Vertical Tile Alignment for Tiled Box in JavaScript\nDESCRIPTION: Lists the available constants within `BABYLON.Mesh` for the `alignVertical` option in Tiled Box creation. These constants control the vertical placement of whole tiles when the face height isn't an exact multiple of the tile height, determining where partial tiles appear (top, bottom, or centered). `CENTER` is the default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_box.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.CENTER, default\nBABYLON.Mesh.TOP,\nBABYLON.Mesh.BOTTOM\n```\n\n----------------------------------------\n\nTITLE: Using addToBlockFactory for Custom Blocks in BabylonJS Flow Graph (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the addToBlockFactory function to add a custom block. It shows defining a module and adding a ColorChangerBlock to the factory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst module = \"MyModuleBlocks\";\n\n// add the block to the factory\naddToBlockFactory(module, \"ColorChangerBlock\", async () => (await import(\"./MyNewBlock\")).ColorChangerBlock);\n```\n\n----------------------------------------\n\nTITLE: Sound Sprite Creation in Babylon.js\nDESCRIPTION: Demonstrates how to create and play a sound sprite by specifying offset and length parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst soundSprite = new BABYLON.Sound(\"Violons\", \"/sounds/6sounds.mp3\", scene, null, { loop: true, autoplay: true, length: 9.2, offset: 14.0 });\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Babylon.js Modules - Bash\nDESCRIPTION: Shows the npm command to install additional Babylon.js modules such as materials alongside the core package. The '--save-dev' flag registers them as development dependencies. Dependencies: Node.js, npm, and a valid package.json. Replace '[other packages]' with spaces and names of any other modules needed (e.g., loaders, gui).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babylonjs/materials [other packages]\n```\n\n----------------------------------------\n\nTITLE: Disposing Fur Material Shells in Babylon.js\nDESCRIPTION: Cleans up the generated fur shells by disposing of their materials and meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < shells.length; i++) {\n  shells[i].material.dispose();\n  shells[i].dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling GUIFieldset Visibility\nDESCRIPTION: Method to set a GUIFieldset element to visible or invisible, with optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiFieldset.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Available Color3 Presets in Babylon.js\nDESCRIPTION: Lists the available preset colors in Babylon.js using the Color3 class. These are convenience methods for creating common colors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/material.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Color3.Red();\nBABYLON.Color3.Green();\nBABYLON.Color3.Blue();\nBABYLON.Color3.Black();\nBABYLON.Color3.White();\nBABYLON.Color3.Purple();\nBABYLON.Color3.Magenta();\nBABYLON.Color3.Yellow();\nBABYLON.Color3.Gray();\nBABYLON.Color3.Teal();\n```\n\n----------------------------------------\n\nTITLE: Initializing Lens Effect Parameters in Babylon.js\nDESCRIPTION: Creates a parameters object to configure various lens effects including edge blur, chromatic aberration, and distortion settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/dofLenseEffects.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar parameters = {\n  edge_blur: 1.0,\n  chromatic_aberration: 1.0,\n  distortion: 1.0,\n  // etc.\n};\n```\n\n----------------------------------------\n\nTITLE: Sound Properties Management in Babylon.js\nDESCRIPTION: Demonstrates how to manage sound properties like volume and playback rate, including event handling when sound playback ends.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/audio/v1/playingSoundsMusic.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst volume = 0.1;\nconst playbackRate = 0.5;\nconst gunshot = new BABYLON.Sound(\"Gunshot\", \"./gunshot-1.wav\", scene, null, {\n  playbackRate: playbackRate,\n  volume: volume\n});\n\ngunshot.onended = function () {\n  if (volume < 1) {\n    volume += 0.1;\n    gunshot.setVolume(volume);\n  }\n  playbackRate += 0.1;\n  gunshot.setPlaybackRate(playbackRate);\n};\n```\n\n----------------------------------------\n\nTITLE: Stopping Root Particle System and its Active SubSystems (JavaScript)\nDESCRIPTION: This example illustrates how to stop both the root particle system and all currently active sub systems by invoking the stop() method without parameters. It assumes an existing Babylon.js ParticleSystem instance with sub emitters, and triggers a full stop cascade.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/subEmitters.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.stop(); \n```\n\n----------------------------------------\n\nTITLE: Registering Custom Material for Babylon.js File Loader\nDESCRIPTION: Registers the custom material class with Babylon.js file loader system to enable loading materials from .babylon files. This is required for serialization and deserialization support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nTools.RegisteredExternalClasses[\"MyMaterial\"] = MyMaterial;\n```\n\n----------------------------------------\n\nTITLE: Quaternion Normalization Example in BabylonJS\nDESCRIPTION: Example showing proper quaternion normalization for vector creation on the outer shell.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.Quaternion(1, 1, 1, 0).normalize();\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation from Track Matrix (Freight) in Babylon.js (JavaScript)\nDESCRIPTION: Sets the rotation of the `carriage` object using a quaternion derived from a rotation matrix stored in `track.rotations[i]`. This assumes the contents move rigidly with the carriage (freight mode), so only the carriage's rotation needs to be set.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncarriage.rotationQuaternion = BABYLON.Quaternion.FromRotationMatrix(track.rotations[i]);\n```\n\n----------------------------------------\n\nTITLE: HTML Template with AmmoJS Physics Engine\nDESCRIPTION: This HTML code snippet shows how to load the AmmoJS physics engine from a CDN. This should replace the CannonJS import when AmmoJS is selected as the physics engine in the editor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/physics/usingPhysics.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.babylonjs.com/ammo.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Attaching Line Controls to GUI Controls in Babylon.js GUI (JavaScript)\nDESCRIPTION: Illustrates how to connect the second point of a Babylon.js GUI Line control to another control by setting the 'connectedControl' property. The 'x2' and 'y2' properties then define the offset from the connected control. This feature allows dynamic connection of line end-points to UI controls, facilitating interactive overlays and annotations. Babylon.js is required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nline.connectedControl = control;\n// Set offset for the second point\nline.x2 = 20;\nline.y2 = -10;\n```\n\n----------------------------------------\n\nTITLE: Enabling Picking for a Babylon.js SpriteManager (JavaScript)\nDESCRIPTION: This JavaScript/TypeScript code sets the `isPickable` property of a `SpriteManager` instance to `true`. This configuration is essential to enable pointer event detection (like clicks or hovers) for all sprites managed by this particular manager, which is often a prerequisite for using action managers that respond to user interaction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/actions.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nspriteManager.isPickable = true\n```\n\n----------------------------------------\n\nTITLE: Updating NPM to Latest v8 Version\nDESCRIPTION: Command to update NPM to the latest version 8.x globally\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g npm@8.x\n```\n\n----------------------------------------\n\nTITLE: Scene Director Implementation of Command Methods\nDESCRIPTION: Shows how the Scene Director implements methods that will be called from Vue components. The director converts method calls into messages that are sent through the AsyncBus.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  async createMarble(name: string): Promise<void> {\n    await this.asyncCommand(SceneDirectorEventBusMessages.CreateMarble, { name });\n  }\n\n  async removeMarbles(): Promise<void> {\n    await this.asyncCommand(SceneDirectorEventBusMessages.RemoveMarbles);\n  }\n\n  async getMeshNames(): Promise<string[]> {\n    return await this.asyncCommand<string[]>(SceneDirectorEventBusMessages.GetMeshNames);\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Camera Objects in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Describes the required and optional properties for representing a Camera object inside a .babylon file for Babylon.js. This JSON schema supports various camera types, animation options, parent/lock relationships, and optional input manager configurations. Important fields include position, target, type, and optional animation ranges. No external dependencies are needed to interpret structure, but correct field usage is essential for loading. Limitations: Must provide correct numeric types and arrays for fields like position or animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"name\\\": string,\\n\\t\\\"id\\\": string,\\n\\t\\\"type\\\": string,\\n\\t\\\"tags\\\": string,\\n\\t\\\"parentId\\\": string,\\n\\t\\\"lockedTargetId\\\": string,\\n\\t\\\"position\\\": vector3,\\n\\t\\\"target\\\": vector3,\\n\\t\\\"alpha\\\": float, // only for ArcRotateCamera and AnaglyphArcRotateCamera\\n\\t\\\"beta\\\": float, // only for ArcRotateCamera and AnaglyphArcRotateCamera\\n\\t\\\"radius\\\": float, // only for ArcRotateCamera, FollowCamera and AnaglyphArcRotateCamera\\n\\t\\\"eye_space\\\": float, // only for AnaglyphFreeCamera and AnaglyphArcRotateCamera\\n\\t\\\"heightOffset\\\": float, // only for FollowCamera\\n\\t\\\"rotationOffset\\\": float, // only for FollowCamera\\n\\t\\\"cameraRigMode\\\": int (can be omitted),\\n\\t\\\"fov\\\": float (in radians),\\n\\t\\\"minZ\\\": float,\\n\\t\\\"maxZ\\\": float,\\n\\t\\\"speed\\\": float,\\n\\t\\\"inertia\\\": float (between 0 and 1),\\n\\t\\\"checkCollisions\\\": boolean,\\n\\t\\\"applyGravity\\\": boolean,\\n\\t\\\"ellipsoid\\\": vector3,\\n\\t\\\"animations\\\": array of Animations (see below, can be omitted),\\n\\t\\\"autoAnimate\\\": boolean,\\n\\t\\\"autoAnimateFrom\\\": int,\\n\\t\\\"autoAnimateTo\\\": int,\\n\\t\\\"autoAnimateLoop\\\": boolean (can be omitted),\\n    \\\"autoAnimateSpeed\\\": number (can be omitted),\\n    \\\"inputmgr\\\" : map of camera inputs (can be omitted, see below)\\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Materials Between GreasedLine Instances in JavaScript\nDESCRIPTION: Demonstrates how to reuse the same material instance for multiple GreasedLine meshes. The second line is created with the `createAndAssignMaterial` option set to `false`, and then its material property is explicitly assigned the material from the first line.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst points1 = [-1, 0, 0, 1, 0, 0];\nconst line1 = BABYLON.CreateGreasedLine(\"line1\", { points: points1 });\n\nconst points2 = [-1, 1, 0, 1, 1, 0];\nconst line2 = BABYLON.CreateGreasedLine(\"line2\", { points: points2 }, { createAndAssignMaterial: false });\n\nline2.material = line1.material;\n```\n\n----------------------------------------\n\nTITLE: Creating a new GUIGroup in BabylonJS\nDESCRIPTION: Constructor for creating a new GUIGroup. Takes a name, options object, and a GUI manager instance as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiGroup.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUIGroup(id, options, guimanager)\n```\n\n----------------------------------------\n\nTITLE: Initializing Particle Position and UVs with Custom Function in Babylon.js - JavaScript\nDESCRIPTION: This snippet shows how to assign particle position and corresponding uv values using a custom function passed to addPoints. Each particle is given a random position in the X and Y axes and a fixed Z value; the UV values directly mirror the position in order to map textures coherently. After points are added, the PCS mesh is built asynchronously, and material properties are set to use an emissiveColor and emissiveTexture. Requires Babylon.js classes such as Vector3, Color3, and a texture object (myTexture).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_manage_particles.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myfunc = function(particle) { \n    var x = Math.random();\n    var y = Math.random();\n    var z = 0;\n    particle.position = new BABYLON.Vector3(x, y, z);\n    //Relate uv values to positional values\n    particle.uv.x = x;\n    particle.uv.y = y; \n    }\n    pcs.addPoints(5000, myfunc);\n\n    pcs.buildMeshAsync().then(() => {\n      pcs.mesh.material.emissiveColor = new BABYLON.Color3(0, 0, 0);\n      pcs.mesh.material.emissiveTexture = myTexture;\n    });\n```\n\n----------------------------------------\n\nTITLE: Customizing Lens Flare Parameters in Standard Rendering Pipeline\nDESCRIPTION: These snippets show how to customize various parameters of the lens flare effect, including strength, halo width, and distortion strength.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// The strength of the final result of the pseudo lens flare effect\npipeline.lensFlareStrength = 5; // By default 1.0\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Sets the width of the halo used to render the pseudo lens flare effect\npipeline.lensFlareHaloWidth = 1; // By default 0.4;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// The strength related to the lens color texture\npipeline.lensFlareDistortionStrength = 35; // Default 4.0\n```\n\n----------------------------------------\n\nTITLE: Attaching Camera Controls\nDESCRIPTION: Attaches camera controls to the canvas for user interaction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.attachControl(canvas, true);\n```\n\n----------------------------------------\n\nTITLE: Adding Content Control to a ScrollViewer in JavaScript\nDESCRIPTION: Illustrates how to add a child control (which can be a single control or a container holding multiple controls) to a `ScrollViewer`. This control becomes the scrollable content within the viewer's area. Requires an existing `ScrollViewer` instance (`myScrollViewer`) and a `BABYLON.GUI.Control` instance (`myControl`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/scrollViewer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyScrollViewer.addControl(myControl);\n```\n\n----------------------------------------\n\nTITLE: Demo: 2D Array Textures in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: #XEVUD9) showcasing '2D Array Textures', which are similar to 3D textures but designed for texture atlases. This feature cannot be created in WebGL1.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#XEVUD9\" title=\"2D Array Textures\" description=\"2D Array Textures\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Running Sound Effects with Observables in BabylonJS\nDESCRIPTION: This code uses BabylonJS observables to manage character running sound effects. It plays the walking sound when the character runs and ensures sound effects are properly stopped, with extra measures to prevent multiple stop calls that could cause issues in Safari.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/musicSFX.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.onRun.add((play) => {\n  if (play && !this._walkingSfx.isPlaying) {\n    this._walkingSfx.play();\n  } else if (!play && this._walkingSfx.isPlaying) {\n    this._walkingSfx.stop();\n    this._walkingSfx.isPlaying = false; // make sure that walkingsfx.stop is called only once\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Floor Description Type Definition for Space Markup\nDESCRIPTION: TypeScript interface defining how floor surfaces are configured in Space Markup. Includes properties for the mesh reference, boundary constraints, allowed transitions, and slope behavior parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/spaceMarkUp.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FloorDescription = {\n\t// The mesh representing the surface\n\tmesh: AbstractMesh;\n\t\n\t// If true, movement beyond this surface will be blocked\n\tlock?: boolean;\n\t\n\t// List of surfaces that can be transitioned to\n\tallowList?: AbstractMesh[];\n\n    // Enables sliding logic\t\n\tisSlope?: boolean;\n\t\n\t// Critical angle (in degrees) at which sliding starts\n\tcriticalAngleDeg?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Loading the Environment in TypeScript\nDESCRIPTION: Demonstrates how to create an instance of the `Environment` class and load its assets within the application's game setup function (`_setUpGame`). It creates the scene, instantiates the `Environment`, stores it in a class variable, and then asynchronously calls the `load` method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//--CREATE SCENE--\nlet scene = new Scene(this._engine);\nthis._gamescene = scene;\n\n//--CREATE ENVIRONMENT--\nconst environment = new Environment(scene);\nthis._environment = environment; //class variable for App\nawait this._environment.load(); //environment\n```\n\n----------------------------------------\n\nTITLE: Setting World Scale Factor\nDESCRIPTION: Demonstrates how to adjust the world scale and monitor scale changes\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nxeSessionManager.worldScalingFactor = 2;\n\nxeSessionManager.worldScalingFactor = 3.2808;\n\nxrSessionManager.onWorldScaleFactorChangedObservable.add((payload) => {\n  // old value:\n  payload.previousScaleFactor;\n  // new value\n  payload.newScalefactor;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from GUITextarea\nDESCRIPTION: Method to get the current value of the GUITextarea element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextarea.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetValue() → void\n```\n\n----------------------------------------\n\nTITLE: Instantiate Linear Node Properties and Functionality\nDESCRIPTION: Documentation for the Instantiate Linear node which creates instances in a linear pattern based on direction vector and count. Each instance is offset from the previous one by the direction value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n#### Properties\n- count: Int value for number of instances\n- direction: Vector3 value for instance offset\n- rotation: Vector3 value in radians for rotation\n- scaling: Vector3 value for scale\n\n#### Inputs\n- instance: input geometry to instantiate\n- count: Int for instance count\n- direction: Vector3 for offset\n- rotation: Vector3 for rotation\n- scaling: Vector3 for scaling\n```\n\n----------------------------------------\n\nTITLE: Applying Texture to Greased Lines in Babylon.js\nDESCRIPTION: Demonstrates how to create a Greased Line with a texture applied. It sets the color mode to multiply for proper texture rendering and adjusts the texture scaling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst points1 = [-6, 0, 0, 6, 0, 0];\nconst line1 = BABYLON.CreateGreasedLine(\"line1\", { points: points1 }, { width: 1, colorMode: BABYLON.GreasedLineMeshColorMode.COLOR_MODE_MULTIPLY });\n\nconst texture = new BABYLON.Texture(\"/textures/amiga.jpg\", scene);\ntexture.uScale = 10;\n\nline1.material.emissiveTexture = texture;\n```\n\n----------------------------------------\n\nTITLE: Stopping and Resetting a Particle System in Babylon.js\nDESCRIPTION: Shows how to completely stop a particle system and remove all currently active particles. `stop()` halts new emissions, and `reset()` immediately clears all existing particles from the system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.stop();\nmyParticleSystem.reset(); //Reset to empty system\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Polyhedron Data in JavaScript\nDESCRIPTION: This snippet shows how to define the data for a custom polyhedron (heptagonal prism) in JavaScript. It includes the vertex coordinates and face indices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/custom_poly.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst heptagonalPrism = { \"name\":\"Heptagonal Prism\", \"category\":[\"Prism\"], \"vertex\":[[0,0,1.090071],[0.796065,0,0.7446715],[-0.1498633,0.7818315,0.7446715],[-0.7396399,-0.2943675,0.7446715],[0.6462017,0.7818315,0.3992718],[1.049102,-0.2943675,-0.03143449],[-0.8895032,0.487464,0.3992718],[-0.8658909,-0.6614378,-0.03143449],[0.8992386,0.487464,-0.3768342],[0.5685687,-0.6614378,-0.6538232],[-1.015754,0.1203937,-0.3768342],[-0.2836832,-0.8247995,-0.6538232],[0.4187054,0.1203937,-0.9992228],[-0.4335465,-0.042968,-0.9992228]],\n\"face\":[[0,1,4,2],[0,2,6,3],[1,5,8,4],[3,6,10,7],[5,9,12,8],[7,10,13,11],[9,11,13,12],[0,3,7,11,9,5,1],[2,4,8,12,13,10,6]]}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Handling Fluid Depth and Thickness in Babylon.js Fragment Shader - GLSL\nDESCRIPTION: This GLSL code snippet demonstrates conditional logic for handling fluid rendering based on scene depth and thickness textures. It uses preprocessor directives to distinguish between cases where thickness varies or is fixed and tests against various parameters such as minimumFluidThickness and cameraFar. When the thickness or depth is outside expected ranges, it samples the background color and prematurely returns, optimizing rendering when the fluid is occluded or too thin. Parameters like minimumThickness are tunable by the user. Dependencies include proper definition of uniforms (textureSampler, minimumThickness, cameraFar, etc.) elsewhere in the shader or host application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/implementation_details.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n#ifndef FLUIDRENDERING_FIXED_THICKNESS\\n    if (depth >= cameraFar || depth <= 0. || thickness <= minimumThickness) {\\n#else\\n    if (depth >= cameraFar || depth <= 0. || bgDepth <= depthNonLinear) {\\n#endif\\n        vec3 backColor = texture2D(textureSampler, texCoord).rgb ;\\n        glFragColor = vec4(backColor, 1.) ;\\n        return;\\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Key Codes in Babylon.JS Event Listeners\nDESCRIPTION: This example shows the deprecated but still supported method of listening for keyboard events using key codes instead of key values. It listens for key code 32 (space bar) being released.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/listeningEvents.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@onKeyboardEvent(32 /* or [32, 53] for multiple keys */, KeyboardEventTypes.KEYUP)\nprotected _keyup(info: KeyboardInfo): void {\n    console.log(info.event.keyCode);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Manipulating IsoVector Operations in JavaScript\nDESCRIPTION: Provides an IsoVector class and associated prototype methods for 2D vector arithmetic and geometric transformations. It supports vector addition, subtraction, in-place operations, rotational transformations specific to geodesic mathematics, and mapping to Cartesian coordinates using Babylon.js. Dependencies: Requires the BABYLON JavaScript framework for 3D vector conversion; parameters 'x' and 'y' specify integer vector components; rotation and mapping methods depend on correct usage context. Outputs are either new vectors or transformed floats/vectors as per geometric operation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction IsoVector(x, y) { //x, y integers\n    this.x = x;\n    this.y = y;\n};\n\nIsoVector.prototype.length = function() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.x * this.y);\n};\n\nIsoVector.prototype.clone = function() {\n    return new IsoVector(this.x, this.y);\n};\n\nIsoVector.prototype.add = function(other) { //other isovec\n    return new IsoVector(this.x + other.x, this.y + other.y);\n};\n\nIsoVector.prototype.addInPlace = function(other) { //other isovec\n    this.x += other.x;\n    this.y += other.y;\n    return this;\n};\n\nIsoVector.prototype.addToRef = function(other, result) { //other and result isovecs\n    result.x = this.x + other.x;\n    result.y = this.y + other.y;\n    return result;\n};\n\nIsoVector.prototype.subtract = function(other) { //other isovec\n    return new IsoVector(this.x - other.x, this.y - other.y);\n};\n\nIsoVector.prototype.subtractInPlace = function(other) { //other isovec\n    this.x -= other.x;\n    this.y -= other.y;\n    return this;\n};\n\nIsoVector.prototype.subtractToRef = function(other, result) { //other and result isovecs\n    result.x = this.x - other.x;\n    result.y = this.y - other.y;\n    return result;\n};\n\nIsoVector.prototype.rotate60About = function(other) { //other isovec\n    let x = this.x;\n    this.x = other.x + other.y - this.y;\n    this.y = x + this.y - other.x;\n    return this;\n}\n\nIsoVector.prototype.rotateNeg60About = function(other) { //other isovec\n    let x = this.x;\n    this.x = x + this.y - other.y;\n    this.y = other.x + other.y - x;\n    return this;\n};\n\nIsoVector.prototype.rotate120Sides = function(m, n) { //m, n integers\n    let x = this.x;\n    this.x = m - x - this.y;\n    this.y = n + x;\n    return this;\n}\n\nIsoVector.prototype.rotateNeg120Sides = function(m, n) { //m, n integers\n    let x = this.x\n    this.x = this.y - n;\n    this.y = m + n - x - this.y;\n    return this;\n};\n\nIsoVector.prototype.toCartesianOrigin = function(origin, size) { // origin Vector3, size real\n    const point = BABYLON.Vector3.Zero();\n    point.x = origin.x + 2 * this.x * size + this.y * size;\n    point.y = origin.y + 3 * thrdR3 * this.y * size;\n    return point;\n};\n```\n\n----------------------------------------\n\nTITLE: Direct Retrieval of Existing Viewer Instances in Babylon.js\nDESCRIPTION: Demonstrates how to directly access already initialized viewer instances either by ID or by HTML element reference.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// using the id\nlet viewer = BabylonViewer.viewerManager.getViewerById(\"viewer-id\");\n// using the viewer HTML element\nlet element = document.querySelector(\"babylon\");\nlet viewer2 = BabylonViewer.viewerManager.getViewerByHTMLElement(element);\n```\n\n----------------------------------------\n\nTITLE: Accessing Exposed BabylonJS Objects in Vue Component (JavaScript/JSX)\nDESCRIPTION: This snippet shows modifications within a Vue component (`BabylonScene.vue`) to receive and use exposed BabylonJS `engine` and `scene` objects. It defines a `position` prop, stores the engine/scene in `data`, initializes them in `mounted` by calling `createScene`, and uses a `watch`er on `position` to directly update a specific mesh's position ('box-red') using the stored `scene` object and BabylonJS's `Vector3`. This enables reactive updates in the BabylonJS scene triggered by changes in the Vue component's state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nprops: {\n  position: {\n    type: Object,\n    default() {\n      return { x: 0, y: 0, z: 0 };\n    },\n  },\n},\ndata() {\n  return {\n    scene: null,\n    engine: null,\n  };\n},\nwatch: {\n  position(val) {\n    if (val) {\n      const box = this.scene.getMeshByName(\"box-red\");\n      const position = new Vector3(val.x, val.y, val.z);\n      if (box) {\n        box.position = position;\n      }\n    }\n  },\n},\nmounted() {\n  const bjsCanvas = this.$refs.bjsCanvas;\n  if (bjsCanvas) {\n    const { engine, scene } = createScene(bjsCanvas);\n    this.engine = engine;\n    this.scene = scene;\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Vue Parent Component Displaying FPS\nDESCRIPTION: This Vue component displays the FPS data received from the BabylonJS scene. It includes the BabylonScene component and listens for its 'fps' events, updating the displayed value whenever new data is received.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <label>{{ fps }}</label>\n    <BabylonScene @fps=\"fpsReceived\" />\n  </div>\n</template>\n\n<script>\nimport BabylonScene from \"./components/BabylonScene.vue\";\n\nexport default {\n  name: \"App\",\n  components: {\n    BabylonScene,\n  },\n  data() {\n    return {\n      fps: 0,\n    };\n  },\n  methods: {\n    fpsReceived(fps) {\n      this.fps = fps;\n    },\n  },\n};\n</script>\n\n<style>\nbody {\n  padding: 10px;\n}\n\nlabel {\n  display: block;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Field of View via HTML Data Setup\nDESCRIPTION: JSON configuration to customize the camera field of view (FOV) in the 360 video player through HTML initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": { \"threeSixty\": { \"fov\": 1 } }\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Pickable Bounding Box for Complex Models in Babylon.js\nDESCRIPTION: Shows how to create a non-pickable bounding box for complex models to improve performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst boundingBox = BABYLON.BoundingBoxGizmo.MakeNotPickableAndWrapInBoundingBox(gltfMesh);\n```\n\n----------------------------------------\n\nTITLE: Creating and Releasing Render Pass IDs with Babylon.js Engine (JavaScript)\nDESCRIPTION: Demonstrates how to programmatically create and release render pass IDs in Babylon.js, associating them optionally with a debugging label. Requires an instance of Babylon.js Engine. The method 'engine.createRenderPassId' generates a numeric ID for a new render pass, and 'engine.releaseRenderPassId' cleans up resources. Inputs include an optional string label and the render pass identifier. Outputs are the render pass ID and a release operation; care must be taken to avoid leaking render pass IDs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/renderPasses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderPassId = engine.createRenderPassId(\"My pass\"); // the label is optional as it is used for debugging purpose only\n[...]\nengine.releaseRenderPassId(renderPassId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bone Weight Shader Options in Babylon.js (JavaScript)\nDESCRIPTION: This snippet shows the structure of the `options` object for `CreateBoneWeightShader`. It requires the target `skeleton`. Optional parameters allow customizing the colors used for different weight ranges (base, zero, quarter, half, full influence) and specifying the initial `targetBoneIndex` to visualize.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet options = {\n   skeleton : BABYLON.Skeleton,\n   colorBase? : BABYLON.Color3, //The color when a bone has 0 influence. Default = Black\n   colorZero? : BABYLON.Color3, //The color when a bone has > 0 influence < 0.25. Default = Blue\n   colorQuarter? : BABYLON.Color3, //The color when a bone has >= 0.25 influence < 0.5. Default = Green\n   colorHalf? : BABYLON.Color3, //The color when a bone has >= 0.5 influence < 0.75. Default = Yellow\n   colorFull? : BABYLON.Color3, //The color when a bone has >= 0.75 influence <= 1. Default = Red\n   targetBoneIndex?: number //The bone._index value that you wish to display. Default = 0\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Shared Interpolation Graph with Multiple Contexts in JavaScript\nDESCRIPTION: This example showcases running the same Flow Graph logic on multiple objects using separate contexts. It creates two contexts (`ctx1`, `ctx2`) and sets different 'assetToWorkOn' (presumably `sphere` and `ground` meshes) and 'endPosition' variables in each. The graph defines a common structure including console logging (using a variable) and position interpolation. `FlowGraphGetVariableBlock` instances are used to fetch the context-specific asset and end position for the animation. When `coord.start()` is called, the graph executes independently for each context, animating both the sphere and the ground to their respective target positions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphExamples.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst coord = new FlowGraphCoordinator({ scene });\nconst graph = coord.createGraph();\nconst sceneReady = new FlowGraphSceneReadyEventBlock();\ngraph.addEventBlock(sceneReady);\n\nconst ctx1 = graph.createContext();\nctx1.setVariable(\"assetToWorkOn\", sphere);\nctx1.setVariable(\"endPosition\", new Vector3(1, 2, 3));\nconst ctx2 = graph.createContext();\nctx2.setVariable(\"assetToWorkOn\", ground);\nctx2.setVariable(\"endPosition\", new Vector3(-3, -2, 1));\n\nconst getVariableBlock = new FlowGraphGetVariableBlock({\n  variable: \"sceneReadyLogMessage\",\n  initialValue: \"Hello Scene\",\n});\n\nvar log = new FlowGraphConsoleLogBlock();\nsceneReady.done.connectTo(log.in);\nlog.message.connectTo(getVariableBlock.value);\n\n// start an interpolation animation\nconst interpolationBlock = new FlowGraphInterpolationBlock({\n  animationType: Constants.ANIMATIONTYPE_VECTOR3,\n  duration: 1,\n  propertyName: \"position\",\n});\n\nconst endPosition = new FlowGraphGetVariableBlock({\n  variable: \"endPosition\",\n});\n\ninterpolationBlock.keyFrames[0].value.connectTo(endPosition.value);\n\nconst asset = new FlowGraphGetVariableBlock({\n  variable: \"assetToWorkOn\",\n});\n\nconst playAnimation = new FlowGraphPlayAnimationBlock();\n\nplayAnimation.object.connectTo(asset.value);\nplayAnimation.animation.connectTo(interpolationBlock.animation);\n\nsceneReady.done.connectTo(playAnimation.in);\n\ncoord.start();\n```\n\n----------------------------------------\n\nTITLE: Handling Model Loading Results with Promises in Babylon.js Viewer\nDESCRIPTION: Shows how to use promises to handle successful model loading and error cases when loading models asynchronously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nviewer\n  .loadModel({\n    title: \"Helmet\",\n    subtitle: \"BabylonJS\",\n    thumbnail: \"https://www.babylonjs.com/img/favicon/apple-icon-144x144.png\",\n    url: \"https://www.babylonjs.com/assets/DamagedHelmet/glTF/DamagedHelmet.gltf\",\n  })\n  .then((model) => {\n    console.log(\"model loaded!\");\n  })\n  .catch((error) => {\n    console.log(\"error loading the model!\", error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Velodrome Track using Ribbon in Babylon.js (JavaScript)\nDESCRIPTION: Constructs a velodrome track mesh using `BABYLON.MeshBuilder.CreateRibbon`. It iterates through a subset of track points (`points`), calculating upper and lower path points offset by the track's normal and binormal vectors, scaled by `offset` and `height`, and extended outwards using a radial vector. The `pathArray` for the ribbon is formed from these points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < points.length; i += 5) {\n  radials[i] = points[i].clone().normalize();\n  upperPoints.push(points[i].add(binormals[i].scale(offset)).add(normals[i].scale(height)).add(radials[i].scale(extend)));\n  lowerPoints.push(points[i].subtract(binormals[i].scale(offset)).subtract(normals[i].scale(height)).add(radials[i].scale(extend)));\n}\n\nupperPoints.push(upperPoints[0]); //close path\nlowerPoints.push(lowerPoints[0]); //close path\n\nvar ribbon = BABYLON.MeshBuilder.CreateRibbon(\"ribbon\", { pathArray: [upperPoints, lowerPoints], sideOrientation: BABYLON.Mesh.DOUBLESIDE }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating a GreasedLineRibbon with CreateGreasedLine Function - Babylon.js (JavaScript)\nDESCRIPTION: This TypeScript function signature shows how to create a GreasedLineRibbon mesh in Babylon.js using the CreateGreasedLine function. It takes a mesh name, GreasedLineMeshBuilderOptions (with ribbonOptions), optional material options, and the scene. The core parameter is ribbonOptions, which enables ribbon mode. The function returns the created mesh object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_ribbon/greased_line_ribbon.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CreateGreasedLine(name: string, options: GreasedLineMeshBuilderOptions, materialOptions?: Nullable<GreasedLineMaterialBuilderOptions>, scene?: Nullable<Scene>)\n```\n\n----------------------------------------\n\nTITLE: Disabling Gamma Transform on PrePass Renderer (Babylon.js, JavaScript)\nDESCRIPTION: This snippet disables the gamma transform on the PrePass renderer in Babylon.js, preventing repeated or unnecessary application of gamma correction when using complex post-process pipelines like SSAO2RenderingPipeline. It resolves brightness discrepancies by ensuring only the main imageProcessingConfiguration controls gamma correction. This should be invoked whenever multiple image processing stages might conflict. Requires Babylon.js with a scene configured for pre-pass rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/image_processing.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nscene.enablePrePassRenderer().disableGammaTransform = true;\n```\n\n----------------------------------------\n\nTITLE: Visualizing an Open Track Path (Babylon.js, JavaScript)\nDESCRIPTION: Renders the polyline representation of the open track points using MeshBuilder's CreateLines function. The visualization aids in confirming accurate geometry before tracking computations. Takes a fully-formed array of points and outputs a Babylon.js mesh in the scene, requiring points and scene variables.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar lines = BABYLON.MeshBuilder.CreateLines(\"lines\", { points: points }, scene); //draw path of track\n```\n\n----------------------------------------\n\nTITLE: Appending Assets to Scene using AppendSceneAsync in JavaScript\nDESCRIPTION: Demonstrates how to use BABYLON.AppendSceneAsync to load and append assets from a file to an existing scene. The method returns a promise that resolves when the assets are loaded.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.AppendSceneAsync(\"duck.gltf\", scene).then(function () {\n  // do something with the scene\n});\n```\n\n----------------------------------------\n\nTITLE: Demo: Occlusion Queries in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: #QDAZ80#3) illustrating 'Occlusion Queries', used to detect whether a mesh is visible in the current scene. WebGL1 compatibility requires an extension (EXT_disjoint_timer_query or similar).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#QDAZ80#3\" title=\"Occlusion Queries\" description=\"Occlusion Queries\"/>\n```\n\n----------------------------------------\n\nTITLE: Reflecting Sprite Horizontally in Babylon.js\nDESCRIPTION: Swaps horizontal UV coordinates to reflect a sprite vertically on a face.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[1] = new BABYLON.Vector4(Utop_right, Vbottom_left, Ubottom_left, Vtop_right);\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor Object Shape - TypeScript\nDESCRIPTION: Defines the IWebXRAnchor TypeScript interface, representing anchors in Babylon.js. Includes properties for ID, transformation, native XRAnchor object, and an optional attachedNode for automatic mesh updates. Used to type objects provided by the anchor system observables.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IWebXRAnchor {\\n  /**\\n   * A babylon-assigned ID for this anchor\\n   */\\n  id: number;\\n  /**\\n   * Transformation matrix to apply to an object attached to this anchor\\n   */\\n  transformationMatrix: Matrix;\\n  /**\\n   * The native anchor object\\n   */\\n  xrAnchor: XRAnchor;\\n\\n  /**\\n   * if defined, this object will be constantly updated by the anchor's position and rotation\\n   */\\n  attachedNode?: TransformNode;\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Physics Engine Component for Scene Methods (JavaScript)\nDESCRIPTION: Imports the 'physicsEngineComponent' module to augment the Scene object with physics-related methods like `scene.enablePhysics`. This is required because these methods are added via module augmentation and might not be available or discoverable by IDEs without the import.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs\\core\\Physics\\physicsEngineComponent.js\"\n```\n\n----------------------------------------\n\nTITLE: Timer Control Functions\nDESCRIPTION: Implements start and stop functionality for the game timer\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npublic startTimer(): void {\n    this._startTime = new Date().getTime();\n    this._stopTimer = false;\n}\npublic stopTimer(): void {\n    this._stopTimer = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Camera LOD Correction in JavaScript\nDESCRIPTION: This code shows how to manually set the camera LOD correction value. This property adds to the initial LOD value, changing the detail level of the terrain. Each increment multiplies the map quad coverage by 4.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.cameraLODCorrection = 3; // adds +3 to the initial LOD\n```\n\n----------------------------------------\n\nTITLE: RSM Size Configuration Playground Example\nDESCRIPTION: Demonstration code showing RSM implementation with texture size 35x smaller in each dimension compared to output resolution. Illustrates performance optimization while maintaining visual quality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/rsmgi.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n#VW8IG3#109\n```\n\n----------------------------------------\n\nTITLE: Creating GUIMeter Constructor\nDESCRIPTION: Constructor signature for creating a new GUIMeter instance with parameters for ID, options, GUI manager, callback function, and append settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiMeter.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUIMeter(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Applying Emissive Texture in Fragment Shader\nDESCRIPTION: Adds emissive texture contribution to the final fragment color. The emissive texture is sampled using the calculated UV coordinates and scaled by the emissive intensity parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n#ifdef EMISSIVE\n\tcolor.rgb += texture2D(emissiveSampler, vEmissiveUV) * vEmissiveInfos.y;\n#endif\n```\n\n----------------------------------------\n\nTITLE: Including glTF 1.0 File Loader Script in HTML\nDESCRIPTION: HTML script tags for including the Babylon.js core and glTF 1.0 File Loader plugin. This setup only supports glTF 1.0 version.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.js\"></script>\n<script src=\"babylon.glTF1FileLoader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Ground Plane in Babylon.js\nDESCRIPTION: Creates a ground plane mesh with specified width and height dimensions using Babylon.js MeshBuilder. The width affects the x-axis and height affects the z-axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/ground.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width:10, height:10});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Fragment Shader for Texturing in GLSL\nDESCRIPTION: This GLSL code defines a basic fragment shader. It receives the interpolated UV coordinates (`vUV`) from the vertex shader and uses them to sample a texture (`textureSampler`). The resulting color is assigned to `gl_FragColor`, effectively applying the texture to the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nvarying vec2 vUV;\n\nuniform sampler2D textureSampler;\n\nvoid main(void) {\n  gl_FragColor = texture2D(textureSampler, vUV);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime with Texture Optimization\nDESCRIPTION: Demonstrates how to create a runtime instance with texture recycling optimization enabled.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howSmartFiltersWork.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst rtg = new RenderTargetGenerator(true); // true to minimize the number of textures created\nconst runtime = await filter.createRuntimeAsync(this.engine, rtg);\n```\n\n----------------------------------------\n\nTITLE: Defining Bone Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Details the JSON object structure for a single bone within a Babylon.js skeleton. It includes the index of its parent bone within the skeleton's bone array, the bone's name, its transformation matrix (relative to its parent or the skeleton root), and an array of associated animations (which must be of matrix type).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"parentBoneIndex\": int,\n    \"name\": string,\n    \"matrix\": matrix,\n    \"animations\": array of Animations (must be of matrix type)\n}\n```\n\n----------------------------------------\n\nTITLE: 120° Clockwise Triangle Center Rotation\nDESCRIPTION: Formula for R^C+, a 120° rotation of position vector xi⃗ + yj⃗ about the center of triangle OAB where O is the origin and A is at position (m,n). The transformation maps a point P to P₁.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_5\n\nLANGUAGE: math\nCODE:\n```\nR^C+(xi⃗ + yj⃗) = (m - x - y)i⃗ + (n + x)j⃗\n```\n\n----------------------------------------\n\nTITLE: Generating a Roof Mesh Section in JavaScript (Babylon.js)\nDESCRIPTION: This code calls the custom `roof` function with specific parameters (`wholeRoofprint`, `apexes`, `planes`, rise=2, `height`, uvbase=5.6) to create the mesh for a single, complete roof section based on the previously defined data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar roofSection = roof(wholeRoofprint, apexes, planes, 2, height, 5.6);\n```\n\n----------------------------------------\n\nTITLE: Mapping Primary Triangle Vertices onto Icosahedron Faces in JavaScript\nDESCRIPTION: Implements methods for the Primary prototype to calculate barycentric-like coefficients and map the triangle's internal Cartesian vertices onto a specified icosahedron face using Babylon.js vector math. The mapping depends on the IDATA icosahedron geometry and constants, and uses vector arithmetic to blend triangle coordinates. Dependencies are Babylon.js, IDATA, and mathematical constants (e.g., THRDR3). Inputs: chosen face number; outputs: mapped 3D vertices stored in the Primary object. Limitation: Mapping assumes face numbering and external geometry is consistent.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/******Primary Triangle*********/\nfunction Primary(m, n) {\n    this.m = m;\n    this.n = n;\n\n    this.cartesian = [];\n    this.vertices = [];\n    this.mapped = [];\n    this.max = [];\n    this.min = [];\n\n    this.coau = 0;\n    this.cobu = 0;\n    this.coav = 0;\n    this.cobv = 0;\n\n    this.u = BABYLON.Vector3.Zero();\n    this.v = BABYLON.Vector3.Zero();\n\n};\n\nPrimary.prototype.CalcCoeffs = function() {\n    const m = this.m;\n    const n = this.n;\n\n    const LSQD = m * m + n * n + m * n;\n\n    this.coau = (m + n) / LSQD;\n    this.cobu = -n / LSQD;\n    this.coav = -THRDR3 * (m - n) / LSQD;\n    this.cobv = THRDR3 * (2* m + n) / LSQD;\n}\n\nPrimary.prototype.MapToFace = function (faceNb) {\n    const F = IDATA.face[faceNb];\n    const Oidx = F[2];\n    const Aidx = F[1];\n    const Bidx = F[0];\n\n    const O = BABYLON.Vector3.FromArray(IDATA.vertex[Oidx]);\n    const A = BABYLON.Vector3.FromArray(IDATA.vertex[Aidx]);\n    const B = BABYLON.Vector3.FromArray(IDATA.vertex[Bidx]);\n\n    const OA = A.subtract(O);\n    const OB = B.subtract(O);\n\n    this.u = OA.scale(this.coau).add(OB.scale(this.cobu));\n    this.v = OA.scale(this.coav).add(OB.scale(this.cobv));\n    \n    const mapped = [];\n    let tempVec = BABYLON.Vector3.Zero();\n    for (let i = 0; i < this.cartesian.length; i++) {\n        tempVec = this.u.scale(this.cartesian[i].x).add(this.v.scale(this.cartesian[i].y)).add(O);\n        mapped[i] = [tempVec.x, tempVec.y, tempVec.z];\n    }\n\n    this.mapped.push(mapped);\n    this.face = faceNb;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Draco Decoder in Node.js Environment (JavaScript)\nDESCRIPTION: Illustrates how to use the Babylon.js Draco decoder within a Node.js application. It requires necessary modules (`babylonjs`, `fs`, `xhr2`, `babylonjs-loaders`), loads the Draco JS module and WASM file from the local filesystem using `fs.readFileSync`, configures the `DracoDecoder` with these resources, polyfills `XMLHttpRequest`, initializes a `NullEngine`, creates a scene (placeholder), and then attempts to load a GLB file with Draco compression using `ImportMeshAsync`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst BABYLON = require(\"babylonjs\");\nconst fs = require(\"fs\");\nconst xhr = require(\"xhr2\");\nrequire(\"babylonjs-loaders\");\n\n// get the resources from the local disk. Note - the resources need to be downloaded manually.\nconst Draco = require(\"./assets/draco_decoder_gltf.js\");\nconst wasm = fs.readFileSync(process.cwd() + \"/assets/draco_decoder_gltf.wasm\");\n\nBABYLON.DracoDecoder.DefaultConfiguration.wasmBinary = wasm;\nBABYLON.DracoDecoder.DefaultConfiguration.jsModule = Draco;\n\nglobalThis.XMLHttpRequest = xhr.XMLHttpRequest;\nlet engine = new BABYLON.NullEngine();\n// create your scene here\nconst scene = .....;\n\nBABYLON.ImportMeshAsync(\"https://awesomeserver.mine.com/my.glb\", scene).then(() => {  \n    console.log(\"draco worked\");\n  }, (e) => {\n    console.log(\"oh no! something is off\", e);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Parameters\nDESCRIPTION: Updates an agent's movement parameters such as speed and acceleration during runtime.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/crowdAgents.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncrowd.updateAgentParameters(agentIndex, { maxSpeed: 10, maxAcceleration: 200 });\n```\n\n----------------------------------------\n\nTITLE: Including Babylon.js Packages via CDN Script Tags in HTML\nDESCRIPTION: Demonstrates how to directly include various Babylon.js core and library packages (like materials, loaders, GUI, inspector, viewer) into an HTML file using `<script>` tags referencing the official CDN (cdn.babylonjs.com). Both minified (.min.js) and unminified/max (.js, .max.js) versions are shown for debugging and production purposes. Note the warning about not using the public CDN for large-scale production applications.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/frameworkVers.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n<script src=\"https://cdn.babylonjs.com/babylon.max.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js\"></script>\n<script src=\"https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n<script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js\"></script>\n<script src=\"https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js\"></script>\n<script src=\"https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/serializers/babylonjs.serializers.min.js\"></script>\n<script src=\"https://cdn.babylonjs.com/serializers/babylonjs.serializers.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/gui/babylon.gui.min.js\"></script>\n<script src=\"https://cdn.babylonjs.com/gui/babylon.gui.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/inspector/babylon.inspector.bundle.js\"></script>\n<script src=\"https://cdn.babylonjs.com/inspector/babylon.inspector.bundle.max.js\"></script>\n\n<script src=\"https://cdn.babylonjs.com/viewer/babylon.viewer.js\"></script>\n<script src=\"https://cdn.babylonjs.com/viewer/babylon.viewer.max.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Handling Gamepad Connection Events in Babylon.js\nDESCRIPTION: Sets up event listeners for gamepad connection and disconnection events using the GamepadManager in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/gamepads.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngamepadManager.onGamepadConnectedObservable.add((gamepad, state) => {});\ngamepadManager.onGamepadDisconnectedObservable.add((gamepad, state) => {});\n```\n\n----------------------------------------\n\nTITLE: Creating a Draco Decoder Web Worker (JavaScript)\nDESCRIPTION: Defines a web worker script (`worker.js`) for Draco mesh decoding. It imports the `DecoderWorkerFunction` from Babylon.js core and the Draco decoder JavaScript module (which populates `globalThis.DracoDecoderModule`). It then calls the `DecoderWorkerFunction` to set up the worker environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// worker.js\nimport { DecoderWorkerFunction } from \"@babylonjs/core/Meshes/Compression/dracoCompressionWorker.js\";\n// will populate globalThis.DracoDecoderModule\nimport \"@babylonjs/core/assets/Draco/draco_decoder_gltf.js\";\n\nDecoderWorkerFunction();\n```\n\n----------------------------------------\n\nTITLE: Drawing an Arc Sector Between Two Vectors in Babylon.js\nDESCRIPTION: This function creates an arc sector between two vectors with a specified radius. It supports three rendering styles: solid line (type 0), dashed line (type 1), or filled sector (type 2). The function calculates points along the arc using rotation matrices and returns the created mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Sector.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction showAngleSector(origin, vector1, vector2, radius, sectorType) {\n  radius = radius || 1;\n  sectorType = sectorType || 0;\n  const cross = BABYLON.Vector3.Cross(vector1, vector2);\n  const dot = BABYLON.Vector3.Dot(vector1, vector2);\n  const angle = Math.acos(dot / (vector1.length() * vector2.length()));\n  const points = [];\n  const minNb = 4;\n  const factor = 2;\n  let nbPoints = Math.floor(radius * angle * factor);\n  nbPoints = nbPoints < minNb ? minNb : nbPoints;\n\n  const firstPoint = BABYLON.Vector3.Normalize(vector1).scale(radius);\n  const lastPoint = BABYLON.Vector3.Normalize(vector2).scale(radius);\n  let matrix;\n  let ang = angle / nbPoints;\n  let rotated;\n  for (let i = 0; i < nbPoints; i++) {\n    matrix = BABYLON.Matrix.RotationAxis(cross, ang * i);\n    rotated = BABYLON.Vector3.TransformCoordinates(firstPoint, matrix);\n    points.push(rotated.add(origin));\n  }\n  points.push(lastPoint.add(origin));\n\n  let sector;\n  switch (sectorType) {\n    case 0:\n      sector = BABYLON.MeshBuilder.CreateLines(\"sector\", { points }, scene);\n      break;\n    case 1:\n      sector = BABYLON.Mesh.CreateDashedLines(\"sector\", points, 3, 1, nbPoints, scene);\n      break;\n    case 2:\n      const pointO = [];\n      for (let j = 0; j < points.length; j++) {\n        pointO.push(origin);\n      }\n      sector = BABYLON.Mesh.CreateRibbon(\"sector\", [points, pointO], null, null, 0, scene);\n      break;\n    default:\n      sector = BABYLON.MeshBuilder.CreateLines(\"sector\", { points }, scene);\n      break;\n  }\n  return sector;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Procedural Texture in Babylon.js\nDESCRIPTION: Creates a spherical cloud mesh with procedural cloud texture applied. The example demonstrates setting up the mesh, material, and texture properties to create a cloudy sky effect. The texture allows customization of sky and cloud colors through its parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/proceduralTexturesLibrary/cloud.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar cloud = BABYLON.MeshBuilder.CreateSphere(\"cloud\", { segments: 100, diameter: 1000 }, scene);\nvar cloudMaterial = new BABYLON.StandardMaterial(\"cloudMat\", scene);\nvar cloudProcTexture = new BABYLON.CloudProceduralTexture(\"cloudTex\", 1024, scene);\ncloudMaterial.emissiveTexture = cloudProcTexture;\ncloudMaterial.backFaceCulling = false;\ncloudMaterial.emissiveTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\ncloud.material = cloudMaterial;\ncloud.position = new BABYLON.Vector3(0, 0, 12);\n```\n\n----------------------------------------\n\nTITLE: Global Script Event Handlers\nDESCRIPTION: Implementation of global event handlers for window load and scene ready events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneManager.OnWindowLoad(() => {\n  // Global Page Loaded Handler\n});\n\nBABYLON.SceneManager.ExecuteWhenReady((scene: BABYLON.Scene, manager: BABYLON.SceneManager) => {\n  // Global Scene Ready Handler\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Classic setTimeout with Babylon.js setAndStartTimer\nDESCRIPTION: Demonstrates the difference between using a classic setTimeout and the new Babylon.js setAndStartTimer function. The Babylon.js method ensures the callback runs inside the render loop context.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// classic set timeout:\nsetTimeout(() => {\n  // code running here is not guaranteed to be called inside the render loop\n  // Actually, it is most likely that it will be called OUTSIDE the render loop\n}, 3000);\n\n// the new and simple way\nBABYLON.setAndStartTimer({\n  timeout: 3000,\n  contextObservable: scene.onBeforeRenderObservable,\n  onEnded: () => {\n    // code running here is guaranteed to run inside the beforeRender loop\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Babylon.js Programmatic Model Creation\nDESCRIPTION: Complete example showing how to create a 3D box model programmatically in a Babylon.js scene with camera and lighting setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_app.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Babylon Template</title>\n\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n\n      #renderCanvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n    </style>\n\n    <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n    <script src=\"https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js\"></script>\n    <script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script>\n  </head>\n\n  <body>\n    <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas>\n    <!-- touch-action=\"none\" for best results from PEP -->\n\n    <script>\n      const canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element\n      const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\n\n      // Add your code here matching the playground format\n      const createScene = function () {\n        const scene = new BABYLON.Scene(engine);\n\n        BABYLON.MeshBuilder.CreateBox(\"box\", {});\n\n        const camera = new BABYLON.ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));\n        camera.attachControl(canvas, true);\n        const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(1, 1, 0));\n\n        return scene;\n      };\n\n      const scene = createScene(); //Call the createScene function\n\n      // Register a render loop to repeatedly render the scene\n      engine.runRenderLoop(function () {\n        scene.render();\n      });\n\n      // Watch for browser/canvas resize events\n      window.addEventListener(\"resize\", function () {\n        engine.resize();\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Smart Filter Graph\nDESCRIPTION: Shows how to optimize a Smart Filter graph by merging compatible shader blocks and reducing draw calls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howSmartFiltersWork.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst vfo = new SmartFilterOptimizer(smartFilter, {\n  maxSamplersInFragmentShader: engine.getCaps().maxTexturesImageUnits,\n});\nconst optimizedSmartFilter = vfo.optimize();\n```\n\n----------------------------------------\n\nTITLE: GreasedLineRibbon Option Properties Definition - Babylon.js (JavaScript)\nDESCRIPTION: Lists the properties available for configuring a GreasedLineRibbon via the options object. These parameters control how the ribbon is built, including point mode, direction, width, face generation, closure behavior, and shading. The values must be set according to desired mesh behavior, with some options being optional and having sensible defaults.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line_ribbon/greased_line_ribbon.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npointsMode: GreasedLineRibbonPointsMode;\ndirection: Vector3;\ndirectionsAutoMode?: GreasedLineRibbonAutoDirectionMode;\nwidth: number;\nfacesMode?: GreasedLineRibbonFacesMode;\nclosePath?: boolean;\nsmoothShading?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Initializing SceneTickEventBlock in JavaScript\nDESCRIPTION: This snippet shows the creation of a FlowGraphSceneTickEventBlock. Its 'done' execution output, which triggers on every frame render (via scene.onBeforeRenderObservable), is connected to the input of 'nextBlock'. This allows 'nextBlock' to execute its logic repeatedly on each frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sceneTick = new FlowGraphSceneTickEventBlock();\n// notify an execution block that a frame is being rendered\nsceneTick.done.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to GUIDialog\nDESCRIPTION: Method to add new elements to the GUIDialog container.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiDialog.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nadd(element) → void\n```\n\n----------------------------------------\n\nTITLE: Accessing SPS Particle Properties with Shape References\nDESCRIPTION: Demonstrates how to reference particles by their index and understand their relationship to the original shape models added to the SPS. Shows how particles maintain references to their source shapes through idxInShape and shapeId properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/manage_sps_particles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.addShape(model1, 1000);\nSPS.addShape(model2, 500);\n\nparticle = SPS.particles[1200];\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Mesh in BabylonJS\nDESCRIPTION: Imports an environment mesh from a GLB file and extracts all child meshes. Returns both the root environment object and array of all meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/importMeshes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await ImportMeshAsync(\"./models/envSetting.glb\", this._scene);\n\nlet env = result.meshes[0];\nlet allMeshes = env.getChildMeshes();\n```\n\n----------------------------------------\n\nTITLE: Implementing CastorGUI in Babylon.js\nDESCRIPTION: Shows how to use the CastorGUI extension to create a 2D GUI overlay in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#S34THY#14\" title=\"CastorGUI Example\" description=\"Simple example of using the CastorGUI system in your scene.\" image=\"/img/playgroundsAndNMEs/divingDeeperGUI2.jpg\"/>\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Passing Samplers to Functions in GLSL (WebGPU Limitation)\nDESCRIPTION: Illustrates GLSL shader code defining a function `getPixel` that takes a `sampler2D` as an argument. This pattern is valid in WebGL but will cause a compilation error in WebGPU, which does not allow passing samplers directly to functions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUBreakingChanges.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\nvec4 getPixel(sampler2D sampler, vec2 uv) {\n    return texture2D(sampler, uv);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _cancelPendingTasks Method with Comments\nDESCRIPTION: Implementation of the _cancelPendingTasks method with comments, showing how to properly clean up timers and context variables when cancelling async operations. This is essential for preventing memory leaks and unwanted behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npublic _cancelPendingTasks(context: FlowGraphContext): void {\n    // get the timers from the context\n    const timers = context._getExecutionVariable(this, \"pendingDelays\", [] as AdvancedTimer[]);\n    // cancel each timer\n    for (const timer of timers) {\n        timer?.dispose();\n    }\n    // delete the timers from the context\n    context._deleteExecutionVariable(this, \"pendingDelays\");\n    // set the last delay index to -1\n    this.lastDelayIndex.setValue(-1, context);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Babylon.js Engine, Scene, and Camera in Viewer\nDESCRIPTION: Shows how to get access to the core Babylon.js components (Engine, Scene, and Camera) from a viewer instance for custom scene manipulations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet viewer = getMeMyViewer();\nviewer.sceneManager.scene instanceOf BABYLON.Scene; // true\nviewer.engine instanceOf BABYLON.Engine; // true\nviewer.sceneManager.camera instanceOf BABYLON.ArcRotateCamera; // true\n```\n\n----------------------------------------\n\nTITLE: Cloning Lantern Mesh for Multiple Instances\nDESCRIPTION: Creates clone instances of the original lantern mesh. Each clone is made visible and parented to the lantern holder transform node for organizational purposes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//Mesh Cloning\nlet lanternInstance = assets.lantern.clone(\"lantern\" + i); //bring in imported lantern mesh & make clones\nlanternInstance.isVisible = true;\nlanternInstance.setParent(lanternHolder);\n```\n\n----------------------------------------\n\nTITLE: Implementing Texture Support in Maya for Babylon.js Export\nDESCRIPTION: This code snippet outlines the texture features supported in the Babylon.js Maya exporter. It includes UV transformations, level adjustments, coordinate mapping modes, and wrapping options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Maya.md#2025-04-23_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\n- _Textures_\n\n  - UV offset / scaling / angle\n  - Level\n  - Coordinates mode (spherical, planar, explicit)\n  - Wrapping (clamp, mirror, wrap)\n```\n\n----------------------------------------\n\nTITLE: Creating a new GUILabel in Babylon.js\nDESCRIPTION: Constructor for creating a new GUILabel element. It requires an ID, options for configuration, a GUI manager instance, and an optional append parameter to determine if it should be added to the body element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiLabel.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUILabel(id, options, guimanager, append)\n```\n\n----------------------------------------\n\nTITLE: Basic Layer Mask Implementation\nDESCRIPTION: Demonstrates the basic bitwise operation used to determine if a mesh is visible to a camera using layer masks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/layerMasksAndMultiCam.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.layerMask & (camera.layerMask !== 0);\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Collisions in Babylon.js\nDESCRIPTION: Enables collision detection for specific meshes in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_collisions.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nground.checkCollisions = true;\nbox.checkCollisions = true;\n```\n\n----------------------------------------\n\nTITLE: Bounding Box Check in Babylon.js\nDESCRIPTION: Initial check to determine if point is within mesh's bounding box by comparing point coordinates against minimum and maximum bounds.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/IsInside.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar boundInfo = this.getBoundingInfo();\nvar max = boundInfo.maximum;\nvar min = boundInfo.minimum;\nif(point.x < min.x || point.x > max.x) {\n\treturn false;\n}\nif(point.y < min.y || point.y > max.y) {\n\treturn false;\n}\nif(point.z < min.z || point.z > max.z) {\n\treturn false;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Design-Time Editor Script Component in C#\nDESCRIPTION: This C# code demonstrates how to create a design-time editor script component that connects to a native Babylon.js backing class. It includes a property with the BabylonProperty attribute that will be accessible in the runtime class.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/01_ScriptComponents.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* Babylon Editor Script Component (C# UnityScript) */\n\nusing System;\nusing UnityEditor;\nusing UnityEngine;\nusing Unity3D2Babylon;\n\nnamespace MyProject\n{\n    public class TestScriptComponent : EditorScriptComponent\n    {\n        [Header(\"-Script Properties-\")]\n\n        [BabylonProperty]\n        public string hello = \"Hello World\";\n\n        protected TestScriptComponent()\n        {\n            this.babylonClass = \"PROJECT.TestMeshComponent\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Score GUI and Increment Action - Babylon.js JavaScript\nDESCRIPTION: Sets up a dynamic GUI element to display the player's score, which increments each time the target box is clicked. Makes use of Babylon.js GUI APIs and ActionManager for real-time UI updates and event handling. Dependencies include BABYLON.GUI and the ActionManager plugin, as well as pre-existing scene and mesh references (such as blubox). Inputs are user interaction events (picks/clicks), and the displayed score updates accordingly. Outputs are on-screen score text and event-driven value increments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/vr_game.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*Object keeping track of score. It's an object and not an int because of the available actions. */\nvar scoreVar = { score: 0 };\n\n/*GUI*/\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\nvar scoreText = new BABYLON.GUI.TextBlock();\nscoreText.text = \"Score: \" + scoreVar.score.toString();\nscoreText.color = \"black\";\nscoreText.fontSize = 30;\nscoreText.paddingTop = 10;\nscoreText.paddingLeft = 10;\n\nadvancedTexture.addControl(scoreText);\n\nscoreText.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\nscoreText.textVerticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;\n\n/*Actions that'll happen when clicking (or \"picking\")*/\nblubox.actionManager.registerAction(new BABYLON.IncrementValueAction(BABYLON.ActionManager.OnPickTrigger, scoreVar, \"score\", 1));\n```\n\n----------------------------------------\n\nTITLE: Internal Loading Mechanism for Particle Set JSON Files\nDESCRIPTION: Shows the internal logic (simplified) used by the Particle Helper to construct the URL and load the JSON file for a given particle set `type`. It combines the `BaseAssetsUrl`, the `/systems/` subdirectory, and the `type` name with a `.json` extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particleHelper.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTools.LoadFile(`${ParticleHelper.BaseAssetsUrl}/systems/${type}.json`, (data) => { \n```\n\n----------------------------------------\n\nTITLE: Vue Root Component Implementation\nDESCRIPTION: Main Vue component with cube movement controls and position management.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"moveCube\">Move Cube</button>\n    <BabylonScene :position=\"cubePosition\" />\n  </div>\n</template>\n\n<script>\nimport BabylonScene from \"./components/BabylonScene.vue\";\n\nexport default {\n  name: \"App\",\n  components: {\n    BabylonScene,\n  },\n  data() {\n    return {\n      cubePosition: {},\n\n      offset: 0,\n      x: 0,\n      y: 0,\n      z: 0,\n    };\n  },\n  methods: {\n    moveCube() {\n      this.getNextPosition();\n      this.moveCubeTheRightWay();\n    },\n    moveCubeTheRightWay() {\n      this.cubePosition = { x: 2, y: this.y, z: this.z };\n    },\n    getNextPosition() {\n      this.offset += 0.5;\n      this.x = 0;\n      this.y = 0 + this.offset;\n      this.z = 0;\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Water Material Shader Controller in Babylon.js\nDESCRIPTION: This TypeScript class extends BABYLON.WaterMaterial to implement a controller for the water shader. It handles material initialization, serialization, parsing, and property manipulation. The controller links Unity material properties to Babylon.js material properties and includes lifecycle methods.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/03_ShaderMaterials.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule BABYLON {\n    export class WaterMaterialController extends BABYLON.WaterMaterial {\n        constructor(name: string, scene: Scene, public renderTargetSize: Vector2 = new Vector2(512, 512)) {\n            super(name, scene, renderTargetSize);\n            this.initializeInstance();\n        }\n\n        protected start() :void {\n            const meshes:BABYLON.Mesh[] = this.getScene().getMeshesByTags(this.getWaterTagLabel());\n            if (meshes != null && meshes.length > 0) {\n                meshes.forEach(mesh => {\n                    this.addToRenderList(mesh);\n                });\n            }\n        }\n\n        /* Shader Material Water Tag Functions */\n\n        private _waterTagLabel:string = \"WATER_TAG_0\";\n        protected getWaterTagLabel():string {\n            return this._waterTagLabel;\n        }\n        protected setWaterTagIndex(index:number) : void {\n            const tagIndex = (index >= 0) ? index : 0;\n            this._waterTagLabel = \"WATER_TAG_\" + tagIndex.toString();\n        }\n\n        /* Shader Material Factory Class Functions */\n\n        public clone(name: string): BABYLON.WaterMaterialController {\n            return BABYLON.SerializationHelper.Clone(() => new BABYLON.WaterMaterialController(name, this.getScene()), this);\n        }\n\n        public serialize(): any {\n            const serializationObject = BABYLON.SerializationHelper.Serialize(this);\n            serializationObject.customType = \"BABYLON.WaterMaterialController\";\n            return serializationObject;\n        }\n\n        public static Parse(source: any, scene: BABYLON.Scene, rootUrl: string): BABYLON.WaterMaterialController {\n            const material =  BABYLON.SerializationHelper.Parse(() => new BABYLON.WaterMaterialController(source.name, scene), source, scene, rootUrl);\n            const property = \"_Properties\";\n            // Parse custom shader properties\n            if (source.vectors4) {\n                property = \"_WaterColor\";\n                if (source.vectors4[property]) {\n                    material.waterColor = BABYLON.Color3.FromArray(source.vectors4[property]);\n                }\n                property = \"_SecondColor\";\n                if (source.vectors4[property]) {\n                    material.waterColor2 = BABYLON.Color3.FromArray(source.vectors4[property]);\n                }\n            }\n            if (source.floats) {\n                const tagIndex:number = 0;\n                property = \"_TagIndex\";\n                if (source.floats[property]) {\n                    tagIndex = source.floats[property];\n                }\n                if (tagIndex <= 0) tagIndex = 0;\n                material.setWaterTagIndex(tagIndex);\n\n                property = \"_WindForce\";\n                if (source.floats[property]) {\n                    material.windForce = source.floats[property];\n                }\n                property = \"_WaveSpeed\";\n                if (source.floats[property]) {\n                    material.waveSpeed = source.floats[property];\n                }\n                property = \"_WaveLength\";\n                if (source.floats[property]) {\n                    material.waveLength = source.floats[property];\n                }\n                property = \"_WaveHeight\";\n                if (source.floats[property]) {\n                    material.waveHeight = source.floats[property];\n                }\n                property = \"_BumpHeight\";\n                if (source.floats[property]) {\n                    material.bumpHeight = source.floats[property];\n                }\n                property = \"_ColorBlendFactor\";\n                if (source.floats[property]) {\n                    material.colorBlendFactor = source.floats[property];\n                }\n                property = \"_SecondBlendFactor\";\n                if (source.floats[property]) {\n                    material.colorBlendFactor2 = source.floats[property];\n                }\n\n                const windDirX:number = 0.0;\n                const windDirY:number = 1.0;\n                property = \"_WindDirectionX\";\n                if (source.floats[property]) {\n                    windDirX = source.floats[property];\n                }\n                property = \"_WindDirectionY\";\n                if (source.floats[property]) {\n                    windDirY = source.floats[property];\n                }\n                material.windDirection = new BABYLON.Vector2(windDirX, windDirY);\n            }\n            return material;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BabylonJS scene for integration with CesiumJS\nDESCRIPTION: Creates a BabylonJS engine, scene, and camera. Sets the scene's background to transparent for CesiumJS visibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_CesiumJS.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = new BABYLON.Engine(canvas);\nconst scene = new BABYLON.Scene(engine);\nscene.clearColor = BABYLON.Color4(0, 0, 0, 0);\n\nconst camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 0, -10), scene);\n```\n\n----------------------------------------\n\nTITLE: Invoking the line2D Function in Babylon.js (Javascript)\nDESCRIPTION: This Javascript snippet demonstrates how to call the `line2D` function (defined previously) to create an instance of the 2D line mesh. It requires an `options` object (containing `path`, `width`, `closed`, `standardUV`) and the Babylon.js `scene` object as arguments. The function returns the created `BABYLON.Mesh`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = line2D(\"line\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting GUIDialog Visibility\nDESCRIPTION: Method to control the visibility of the GUIDialog with optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiDialog.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Initializing ReceiveCustomEventBlock in JavaScript\nDESCRIPTION: This snippet demonstrates creating a FlowGraphReceiveCustomEventBlock to listen for a specific custom event identified by 'eventId: \"myEvent\"'. It defines the expected structure and types ('RichTypeString', 'RichTypeNumber', 'RichTypeVector3') of the event data. It shows connecting a data output ('message') from this block to an input on 'nextBlock' and connecting the 'done' execution output to trigger 'nextBlock' when the event is received.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst receiveCustomEvent = new FlowGraphReceiveCustomEventBlock({\n  eventId: \"myEvent\",\n  eventData: {\n    message: {\n      type: RichTypeString,\n    },\n    time: {\n      type: RichTypeNumber,\n    },\n    position: {\n      type: RichTypeVector3,\n    },\n  },\n});\n\n// get the value of the message\nnextBlock.message.connectTo(receiveCustomEvent.message);\n// trigger when the event is received\nreceiveCustomEvent.done.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Setting Template Parameters in Babylon.js Viewer\nDESCRIPTION: This snippet shows how to set parameters for a template in the Babylon.js Viewer. It demonstrates passing variables to the template and configuring Handlebars options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<params no-escape=\"true\" babylon-font=\"https://viewer.babylonjs.com/babylon.woff\"></params>\n```\n\nLANGUAGE: html\nCODE:\n```\n<params no-escape=\"true\" babylon-font=\"https://viewer.babylonjs.com/babylon.woff\" fill-screen=\"true\"></params>\n```\n\n----------------------------------------\n\nTITLE: Rotating a Mesh in Babylon.js Using Degrees Conversion\nDESCRIPTION: Shows how to rotate a mesh using degrees converted to radians with Babylon.js's built-in conversion tool. This approach is more intuitive for those who prefer working with degrees rather than radians.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/placement.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbox.rotation.y = BABYLON.Tools.ToRadians(45);\n```\n\n----------------------------------------\n\nTITLE: Checking Mesh Intersection in Babylon.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of the Babylon.js intersectsMesh method to determine if a mesh (in this case, a sphere) collides with another mesh (a wall). It requires Babylon.js to be loaded and assumes sphere and wall mesh objects have already been created in the scene. The method returns a boolean indicating whether a collision is currently detected based on the mesh positions at the frame check.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Issues.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.intersectsMesh(wall)\n```\n\n----------------------------------------\n\nTITLE: Checking Component Types in WebXR Controllers\nDESCRIPTION: Shows how to check if a controller component is a button or axes type component\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRInputControllerSupport.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (component.isButton()) {\n  // we have a value\n}\nif (component.isAxes()) {\n  // we have axes data\n}\n```\n\n----------------------------------------\n\nTITLE: Post-Process Texture Linking\nDESCRIPTION: Demonstrates how to link the output of a previous post-process as input to another post-process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/usePostProcesses.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\neffect.setTextureFromPostProcess(\"sceneSampler\", postProcess0);\n```\n\n----------------------------------------\n\nTITLE: Sparkler Timer Implementation\nDESCRIPTION: Controls sparkler animation and timing with interval-based updates\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.stopSpark = false;\nthis._sparklerLife.cellId = 0;\nthis._spark.cellId = 0;\nif (this._handle) {\n    clearInterval(this._handle);\n}\nif (this._sparkhandle) {\n    clearInterval(this._sparkhandle);\n}\nthis._scene.getLightByName(\"sparklight\").intensity = 35;\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js with NPM - Shell Script\nDESCRIPTION: This shell snippet demonstrates how to install the Babylon.js core package at the latest preview release using npm. It requires Node.js and npm to be installed on your system. Running this command installs the '@babylonjs/core' package with the '@preview' tag, ensuring you get the most up-to-date stable features. This is applicable to users setting up local Babylon.js projects who want access to the latest API documented in the main docs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/journey/learningTheDocs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @babylonjs/core@preview\n```\n\n----------------------------------------\n\nTITLE: Handling Mesh Task Error in Babylon.js (JavaScript)\nDESCRIPTION: Configures an error callback for a mesh loading task. Logs the error message and exception details to the console. The function parameters provide task context, error message, and exception object. Should be set before calling 'load()'.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmeshTask.onError = function (task, message, exception) {\n  console.log(message, exception);\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Colyseus Development Server (Shell)\nDESCRIPTION: These commands first change the current directory to the Colyseus server project folder created previously. Then, `npm start` executes the start script defined in the project's `package.json`, typically running the server using `ts-node-dev` for development with auto-reloading. Requires the Colyseus project to be initialized and dependencies installed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd babylonjs-multiplayer-server\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Internal Documentation Link Format\nDESCRIPTION: Demonstrates the correct way to create internal links within the Babylon.js documentation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Post Processes](/features/featuresDeepDive/postProcesses/usePostProcesses)\n```\n\n----------------------------------------\n\nTITLE: Setting Tile Size for Tri-Planar Material in Babylon.js\nDESCRIPTION: This code shows how to customize the tile size of the tri-planar material, which affects the scale of the applied textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/triPlanarMat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntriPlanarMaterial.tileSize = 1.5;\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Physics Shape and Body - V2 Implementation\nDESCRIPTION: Advanced V2 physics implementation showing separate creation of shapes and bodies for better memory usage and customization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/migrateFromV1.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\nconst sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0, 0, 0), 1, scene);\nconst sphereBody = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\nsphereShape.material = { friction: 0.2, restitution: 0.3 };\nsphereBody.shape = sphereShape;\nsphereBody.setMassProperties({ mass: 1 });\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to GUIPanel in JavaScript\nDESCRIPTION: Method to add an element to the GUIPanel. This allows for populating the panel with other GUI elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiPanel.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadd(element) → void\n```\n\n----------------------------------------\n\nTITLE: Computing Animation Offset for VATs with Thin Instances\nDESCRIPTION: This function calculates the correct offset for VATs with thin instances to ensure each instance starts its animation at the intended time. This is necessary because multiple instances often share the same BakedVertexAnimationManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/baked_texture_animations.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction computeOffset(\n  fromFrame: number,\n  toFrame: number,\n  time: number,\n  fps: number = 60\n): number {\n  const totalFrames = toFrame - fromFrame + 1;\n  const t = time * fps / totalFrames;\n  const frame = Math.floor((t - Math.floor(t)) * totalFrames);\n  return totalFrames - frame;\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning a Mesh Using Individual Properties in Babylon.js\nDESCRIPTION: Demonstrates how to position a mesh by setting individual x, y, and z position properties. This allows precise placement of objects in 3D space by defining each coordinate separately.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/placement.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbox.position.x = -2;\nbox.position.y = 4.2;\nbox.position.z = 0.1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Position Interpolation in TypeScript\nDESCRIPTION: Implementation of smooth position interpolation for player movement using BabylonJS render loop and Scalar.Lerp().\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nvar playerNextPosition = {};\n\nroom.state.players.onAdd(function (player, sessionId) {\n  playerNextPosition[sessionId] = sphere.position.clone();\n\n  player.onChange(function () {\n    playerNextPosition[sessionId].set(player.x, player.y, player.z);\n  });\n});\n\nscene.registerBeforeRender(() => {\n  for (let sessionId in playerEntities) {\n    var entity = playerEntities[sessionId];\n    var targetPosition = playerNextPosition[sessionId];\n    entity.position = BABYLON.Vector3.Lerp(entity.position, targetPosition, 0.05);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Hardware Scaling Level via HTML Data Setup\nDESCRIPTION: JSON configuration to adjust hardware scaling for high-resolution displays (like Retina or HiDPI) through HTML initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": { \"threeSixty\": { \"hardwareScalingLevel\": 0.5 } }\n```\n\n----------------------------------------\n\nTITLE: Mapping Primary Triangle to Icosahedron Face in Markdown\nDESCRIPTION: This snippet explains the process of mapping a primary triangle to an icosahedron face. It includes calculations for transforming coordinates and vectors between the two reference frames.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n*v*&#8407; = ((2m + n)O<sub>1</sub>B<sub>1</sub> - (m - n)O<sub>1</sub>A<sub>1</sub>) / l<sup>2</sup>&radic;3\n```\n\n----------------------------------------\n\nTITLE: Creating a GUISelect in BabylonJS\nDESCRIPTION: Creates a new GUISelect element with specified parameters. The GUISelect allows for creating dropdown select elements in the BabylonJS GUI system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUISelect(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Custom Vertex Manipulation using vertexFunction during SPS Shape Addition - Babylon.js - JavaScript\nDESCRIPTION: Cannot be used with immutable particles (unless specified at build time). This function example alters the position of each shape's vertex during mesh construction using a provided callback. The vertexFunction receives a particle object, its current vertex position, and vertex index. Use cases include procedural geometry and adding unique shape variations across particles. Requires addShape and buildMesh calls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar myVertexFunction = function (particle, vertex, i) {\n  // particle : the current particle\n  // vertex : the current vertex position within the particle\n  // i : index of the vertex in the particle shape\n  vertex.x *= Math.random() + 1;\n};\nSPS.addShape(box, 150, { vertexFunction: myVertexFunction }); // the 150 boxes will have their vertices moved randomly\nSPS.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Camera Speed\nDESCRIPTION: Sets the maximum speed limit for camera movement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap8/follow.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.maxCameraSpeed = 10\n```\n\n----------------------------------------\n\nTITLE: CDN Integration with UMD Script\nDESCRIPTION: Example of integrating Havok physics using CDN with UMD script tag\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingHavok.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.babylonjs.com/havok/HavokPhysics_umd.js\"></script>\n<script>\n  let havokInstance;\n  HavokPhysics().then((havok) => {\n    havokInstance = havok;\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining SceneManager Class for Xbox Live Integration in TypeScript\nDESCRIPTION: This TypeScript code defines the SceneManager class with methods for Xbox Live integration, including user authentication, profile loading, and context management. It provides a comprehensive set of tools for working with Xbox Live services in a Babylon.js project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/10_WindowsPlatform.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module BABYLON {\n    class SceneManager {\n\n        /** Are unversial windows platform services available. */\n        static IsWindows(): boolean;\n\n        /** Are xbox one platform services available. */\n        static IsXboxOne(): boolean;\n\n        /** Are xbox live platform services available. */\n        static IsXboxLive(): boolean;\n\n        /** Are xbox live platform services available and user enabled. */\n        static IsXboxLivePluginEnabled(): boolean;\n\n        /** Is xbox live user signed in if platform services enabled. */\n        static IsXboxLiveUserSignedIn(systemUser?: Windows.System.User, player?: BABYLON.PlayerNumber): boolean;\n\n        /** Validated sign in xbox live user if platform services available. */\n        static XboxLiveUserSignIn(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.System.SignInResult) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): void;\n\n        /** Silent sign in xbox live user if platform services available. */\n        static XboxLiveUserSilentSignIn(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.System.SignInResult) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): Windows.Foundation.Projections.Promise<void>;\n\n        /** Dialog sign in xbox live user if platform services available. */\n        static XboxLiveUserDialogSignIn(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.System.SignInResult) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): Windows.Foundation.Projections.Promise<void>;\n\n        /** Loads a xbox live user profile if platform services available. */\n        static LoadXboxLiveUserProfile(player?: BABYLON.PlayerNumber, oncomplete?: (result: Microsoft.Xbox.Services.Social.XboxUserProfile) => void, onerror?: (error: any) => void, onprogress?: (progress: any) => void): Windows.Foundation.Projections.Promise<void>;\n\n        /** Get xbox live user if platform services available. */\n        static GetXboxLiveUser(player?: BABYLON.PlayerNumber): Microsoft.Xbox.Services.System.XboxLiveUser;\n\n        /** Get xbox live user if platform services available. */\n        static GetXboxLiveSystemUser(systemUser: Windows.System.User, player?: BABYLON.PlayerNumber): Microsoft.Xbox.Services.System.XboxLiveUser;\n\n        /** Get xbox live user context if platform services available. */\n        static GetXboxLiveUserContext(player?: BABYLON.PlayerNumber): Microsoft.Xbox.Services.XboxLiveContext;\n\n        /** Resets xbox live user context if platform services available. */\n        static ResetXboxLiveUserContext(player?: BABYLON.PlayerNumber): void;\n\n        /** Get xbox live context property if platform services available. */\n        static GetXboxLiveContextProperty(name: any): any;\n\n        /** Get xbox live context property if platform services available. */\n        static SetXboxLiveContextProperty(name: any, property: any): void;\n\n        /** Resets xbox live property context bag if platform services available. */\n        static ResetXboxLivePropertyContexts(): void;\n\n        /** Sets the Xbox User Sign Out Complete Handler */\n        static SetXboxLiveSignOutHandler(handler?: (result: Microsoft.Xbox.Services.System.SignOutCompletedEventArgs) => void): void;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Line2D Instance in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to create a Line2D instance using the line2D function. It requires options including path, width, closed, and standardUV parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = line2D(\"line\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring MeshUVSpaceRenderer with Edge Blending in Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new MeshUVSpaceRenderer instance in Babylon.js with the `uvEdgeBlending` option enabled to minimize visible seams when decals cross multiple UV islands. The dependencies are Babylon.js (with version 6.33.1 or higher), a mesh, and a scene instance. Key parameters include the mesh to render on, the scene, and an options object where `uvEdgeBlending` must be set to true. The output is a decal map object with improved blending but increased GPU processing requirements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/decals.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst decalMap = new BABYLON.MeshUVSpaceRenderer(mesh, scene, { uvEdgeBlending: true });\n```\n\n----------------------------------------\n\nTITLE: Animating Ascii Art Post-Process Mixing in Babylon.js\nDESCRIPTION: This code demonstrates how to animate the mixing of the Ascii Art effect with the normal scene rendering using the scene's registerBeforeRender function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/asciiArtPP.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Creates the post process\nvar postProcess = new BABYLON.AsciiArtPostProcess(\"AsciiArt\", camera);\n// Displays the scene.\nvar alpha = 0;\nscene.registerBeforeRender(function() {\n    alpha += 0.01;\n    postProcess.mixToNormal = Math.cos(alpha) * 0.5 + 0.5; // between 0 and 1.\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sound Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Outlines the JSON object structure for configuring sounds within a Babylon.js scene. Properties include the sound file name, volume, playback options (autoplay, loop), soundtrack ID, spatialization settings (enabled, position, refDistance, rolloffFactor, maxDistance, distanceModel, panningModel), directional cone properties (isDirectional, angles, gain), and an optional mesh ID to attach the sound to, along with its local direction relative to the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n     \"name\": string, (name of the file to load)\n     \"volume\": float, (if omitted will be 1)\n     \"autoplay\": bool, (can be omitted)\n     \"loop\": bool, (can be omitted)\n     \"soundTrackId\": int, (can be omitted)\n     \"spatialSound\": bool, (to enable 3D sound, can be omitted)\n     \"position\": vector3, (if omitted will be 0,0,0)\n     \"refDistance\": float, (can be omitted, default to 1)\n     \"rolloffFactor\": float, (can be omitted, default to 1)\n     \"maxDistance\": float, (can be omitted, default to 100)\n     \"distanceModel\": string, (can be omitted, default to linear, other values: inverse or exponential)\n     \"panningModel\": string, (can be omitted, default to HRTF, other value: equalpower)\n     \"isDirectional\": bool, (to enable directional cone)\n     \"coneInnerAngle\": float, (can be omitted but set it for directional sound)\n     \"coneOuterAngle\": float, (can be omitted but set it for directional sound)\n     \"coneOuterGain\": float, (can be omitted but set it for directional sound)\n     \"connectedMeshId\": string, (ID of the mesh to attach to)\n     \"localDirectionToMesh\": vector3 (can be omitted, default to 1,0,0)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bowling Pins with Physics Using InstancedMesh\nDESCRIPTION: Creates a function that loads and instances 10 bowling pins in a triangular formation. Each pin is configured with physics properties including appropriate mass and restitution for realistic collision behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Bowling.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createPins(scene) {\n  const result = await BABYLON.ImportMeshAsync(Assets.meshes.bowlingPinpin_glb.rootUrl + Assets.meshes.bowlingPinpin_glb.filename, scene);\n  const bowlingPin = result.meshes[1];\n  bowlingPin.scaling = new BABYLON.Vector3(0.3, 0.3, 0.3);\n}\n\ncreatePins(scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbowlingPin.setEnabled(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npinPositions = [\n  new BABYLON.Vector3(0, 0, 5),\n  new BABYLON.Vector3(0.5, 0, 6),\n  new BABYLON.Vector3(-0.5, 0, 6),\n  new BABYLON.Vector3(0, 0, 7),\n  new BABYLON.Vector3(1, 0, 7),\n  new BABYLON.Vector3(-1, 0, 7),\n  new BABYLON.Vector3(-1.5, 0, 8),\n  new BABYLON.Vector3(-0.5, 0, 8),\n  new BABYLON.Vector3(0.5, 0, 8),\n  new BABYLON.Vector3(1.5, 0, 8),\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn pinPositions.map(function (positionInSpace, idx) {\n  const pin = new BABYLON.InstancedMesh(\"pin-\" + idx, bowlingPin);\n  pin.position = positionInSpace;\n  return pin;\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pinAggregate = new BABYLON.PhysicsAggregate(pin, BABYLON.PhysicsShapeType.CONVEX_HULL, { mass: 1, restitution: 0.25 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Registering glTF Extension Factory in TypeScript\nDESCRIPTION: This code shows how to register a glTF loader extension factory. It demonstrates dynamic importing of the extension module and creating an instance of the extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/createExtensions.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerGLTFExtension } from \"@babylonjs/loaders/glTF/2.0\";\n\nregisterGLTFExtension(\"myCustomExtension\", true, async (loader) => {\n    const { MyCustomExtension } = await import(\"./MyCustomExtension\");\n    return new MyCustomExtension(loader);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Particle Speed Limit Gradient Point in Babylon.js\nDESCRIPTION: Shows how to use `removeLimitVelocityGradient` to remove a specific gradient point previously added for the particle speed limit. The argument specifies the time fraction (e.g., 0.4) of the gradient point to remove.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeLimitVelocityGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Applying Bloom and Black & White with Babylon.js Frame Graph - JavaScript\nDESCRIPTION: This snippet demonstrates using Babylon.js Frame Graph classes to set up a post-processing pipeline that renders a scene to a pass texture and then applies bloom and black & white effects, before copying the result back to the screen. It initializes a PassPostProcess, ensures its render texture exists, ties the texture into the frame graph, and dynamically tracks resizing. The pipeline is constructed with bloom, black and white, and backbuffer tasks; its execution is hooked into the scene's render loop. Requires Babylon.js core and FrameGraph API, an existing scene, camera, and engine. The main dependencies are correct context initialization and handling texture recreation upon window resize.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphInAdditionToRenderLoop.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst passPostProcess = new BABYLON.PassPostProcess(\"pass\", 1, camera);\n\npassPostProcess.samples = 4;\npassPostProcess.resize(engine.getRenderWidth(), engine.getRenderHeight(), camera);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst frameGraph = new BABYLON.FrameGraph(scene, true);\n\nengine.onResizeObservable.add(() => {\n    frameGraph.build();\n});\n\nconst passPostProcessHandle = frameGraph.textureManager.importTexture(\"pass post-process\", passPostProcess.inputTexture.texture);\n\npassPostProcess.onSizeChangedObservable.add(() => {\n    frameGraph.textureManager.importTexture(\"pass post-process\", passPostProcess.inputTexture.texture, passPostProcessHandle);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst bloomTask = new BABYLON.FrameGraphBloomTask(\"bloom\", frameGraph, 0.5, 128, 0.1, false, 0.5);\nbloomTask.sourceTexture = passPostProcessHandle;\nframeGraph.addTask(bloomTask);\n\nconst bnwTask = new BABYLON.FrameGraphBlackAndWhiteTask(\"bnw\", frameGraph);\nbnwTask.sourceTexture = bloomTask.outputTexture;\nframeGraph.addTask(bnwTask);\n\nconst copyToBackbufferTask = new BABYLON.FrameGraphCopyToBackbufferColorTask(\"copytobackbuffer\", frameGraph);\ncopyToBackbufferTask.sourceTexture = bnwTask.outputTexture;\nframeGraph.addTask(copyToBackbufferTask);\n\nframeGraph.build();\n\nawait frameGraph.whenReadyAsync();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onAfterRenderObservable.add(() => {\n    frameGraph.execute();\n});\n```\n\n----------------------------------------\n\nTITLE: Starting a Particle System with a Delay (Method 1) in Babylon.js\nDESCRIPTION: Starts the particle system emission after a specified delay. The delay is provided in milliseconds as an argument to the `start()` method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.start(3000); //time in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Vue Component for BabylonJS Scene with FPS Callback\nDESCRIPTION: This Vue component initializes a BabylonJS scene and sets up a callback to receive FPS data from the scene. When FPS data is received, it emits this data to its parent component using Vue's event system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <canvas ref=\"bjsCanvas\" width=\"500\" height=\"500\" />\n  </div>\n</template>\n\n<script>\nimport { createScene } from \"../scenes/MyFirstScene\";\n\nexport default {\n  name: \"BabylonScene\",\n\n  mounted() {\n    const bjsCanvas = this.$refs.bjsCanvas;\n    if (bjsCanvas) {\n      const fpsCallback = (fps) => {\n        this.$emit(\"fps\", fps);\n      };\n      createScene(bjsCanvas, fpsCallback);\n    }\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing OBJ File Loader in JavaScript\nDESCRIPTION: This code demonstrates how to import the OBJ file importer statically in a JavaScript environment. It's noted that this method is not recommended, and dynamic loading is preferred.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/oBJ.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/loaders/OBJ/objFileLoader\";\n```\n\n----------------------------------------\n\nTITLE: Adding Ramp Gradients to Babylon.js ParticleSystem - JavaScript\nDESCRIPTION: Demonstrates using the addRampGradient method to assign specific colors to indexed positions on a gradient bar within a Babylon.js ParticleSystem. Prerequisites include a Babylon.js environment and a configured particleSystem object. The code specifies color stops between 0.0 and 1.0 for smooth gradient transitions, with each function call setting the color at a distinct position. Expected input values are a fraction (number between 0 and 1) as the position on the gradient and a Color3 object for the color.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/ramps_and_blends.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.addRampGradient(0.0, new BABYLON.Color3(1, 1, 1));\nparticleSystem.addRampGradient(0.09, new BABYLON.Color3(209/255, 204/255, 15/255));\nparticleSystem.addRampGradient(0.18, new BABYLON.Color3(221/255, 120/255, 14/255));\nparticleSystem.addRampGradient(0.28, new BABYLON.Color3(200/255, 43/255, 18/255));\nparticleSystem.addRampGradient(0.47, new BABYLON.Color3(115/255, 22/255, 15/255));\nparticleSystem.addRampGradient(0.88, new BABYLON.Color3(14/255, 14/255, 14/255));\nparticleSystem.addRampGradient(1.0, new BABYLON.Color3(14/255, 14/255, 14/255));\n```\n\n----------------------------------------\n\nTITLE: Setting GUIText Visibility\nDESCRIPTION: Method to show or hide a GUIText element. Takes a boolean parameter to determine visibility and an optional fade parameter for transition effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiText.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fad) → void\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Lattice Data Update and Deformation (imported mesh) - Babylon.js - JavaScript\nDESCRIPTION: Shows how to asynchronously load a mesh, set up a high-resolution lattice, and perform real-time twist deformation by updating lattice control points every frame. Requires Babylon.js, ImportMeshAsync, an imported mesh, and a scene render hook. Alpha blending computation and manipulation are handled before render for visible dynamic deformation effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst loadedData = await BABYLON.ImportMeshAsync(\"scenes/skull.babylon\", scene);\nconst skull = loadedData.meshes[0];\nskull.position.set(0, 0, 0);\n\nconst positions = skull.getVerticesData(BABYLON.VertexBuffer.PositionKind);\nconst updatedPositions = new Float32Array(positions.length);\n\n// lattice\nvar lattice = new BABYLON.Lattice({\n  resolutionY: 10,\n  autoAdaptToMesh: skull,\n  position: BABYLON.Vector3.Zero(),\n});\n\nscene.onBeforeRenderObservable.add(() => {\n  // Twist!!\n  for (x = 0; x < lattice.resolutionX; x++) {\n    for (y = 0; y < lattice.resolutionY; y++) {\n      for (z = 0; z < lattice.resolutionZ; z++) {\n        const angle = (y / lattice.resolutionY) * 0.02;\n        const control = lattice.data[x][y][z];\n        const cx = control.x;\n        const cz = control.z;\n\n        const cosAngle = Math.cos(angle);\n        const sinAngle = Math.sin(angle);\n\n        // Rotation\n        control.x = cosAngle * cx - sinAngle * cz;\n        control.z = sinAngle * cx + cosAngle * cz;\n      }\n    }\n  }\n\n  lattice.deform(positions, updatedPositions);\n  skull.setVerticesData(BABYLON.VertexBuffer.PositionKind, updatedPositions);\n  skull.createNormals(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Player Light and Position in BabylonJS\nDESCRIPTION: Configures the player's light position and initial spawn position using transform nodes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/importMeshes.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.scene.getLightByName(\"sparklight\").parent = this.scene.getTransformNodeByName(\"Empty\");\n\nscene.getMeshByName(\"outer\").position = scene.getTransformNodeByName(\"startPosition\").getAbsolutePosition();\n```\n\n----------------------------------------\n\nTITLE: Copying Animation Map Between SpriteMaps in Babylon.js\nDESCRIPTION: This code shows how to copy the animation map from one SpriteMap to another, allowing reuse of animation data across multiple SpriteMaps.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_animations.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nspriteMap1.animationMap = spriteMap0.animationMap\n```\n\n----------------------------------------\n\nTITLE: Importing Character Mesh in BabylonJS\nDESCRIPTION: Imports and configures the player character mesh, setting up proper mesh hierarchy and raycast interactions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/importMeshes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn ImportMeshAsync(\"./models/player.glb\", scene).then((result) =>{\n    const root = result.meshes[0];\n    //body is our actual player mesh\n    const body = root;\n    body.parent = outer;\n    body.isPickable = false; //so our raycasts dont hit ourself\n    body.getChildMeshes().forEach(m => {\n        m.isPickable = false;\n    })\n\n    return {\n        mesh: outer as Mesh,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Animation from GLB File in Babylon.js\nDESCRIPTION: This snippet demonstrates how to load animations from a .glb file into a Babylon.js scene. It shows an example of animations existing separately from objects in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/animationCurveEditor.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#C21DGD#2\" title=\"Loaded Animation Example\" description=\"Simple example of animations loaded into a scene from a .glb file.\"/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Facet Positions in Babylon.js\nDESCRIPTION: This code shows how to retrieve the array of facet positions in local space and access a specific facet's position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst localPositions = mesh.getFacetLocalPositions(); // returns the array of facet positions in the local space\nconst localPos = localPositions[50]; // Vector3 : the 50th facet local position\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Input to Control Player Physics - JavaScript\nDESCRIPTION: This snippet listens for browser keyboard events and applies linear velocity to a player character's physics impostor in Babylon.js according to input direction. The code tracks pressed keys and updates the player's physics state in real-time. Dependencies include Babylon.js, a defined playerViews object, and keycode constants. Inputs are keyboard events; output is direct manipulation of the player's velocity in the game world.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Keyboard listeners\nconst keyboard = { x: 0, y: 0 };\nwindow.addEventListener(\"keydown\", function (e) {\n  if (e.which === Keycode.LEFT) {\n    keyboard.x = -10;\n  } else if (e.which === Keycode.RIGHT) {\n    keyboard.x = 10;\n  } else if (e.which === Keycode.UP) {\n    keyboard.y = 10;\n  } else if (e.which === Keycode.DOWN) {\n    keyboard.y = -10;\n  }\n  playerViews[sessionId].physicsImpostor.setLinearVelocity(new BABYLON.Vector3(keyboard.x, 0, keyboard.y));\n});\n\nwindow.addEventListener(\"keyup\", function (e) {\n  if (e.which === Keycode.LEFT) {\n    keyboard.x = 0;\n  } else if (e.which === Keycode.RIGHT) {\n    keyboard.x = 0;\n  } else if (e.which === Keycode.UP) {\n    keyboard.y = 0;\n  } else if (e.which === Keycode.DOWN) {\n    keyboard.y = 0;\n  }\n\n  playerViews[sessionId].physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n});\n```\n\n----------------------------------------\n\nTITLE: Loading VMD Motion Files in Babylon.js\nDESCRIPTION: TypeScript code for loading VMD motion files using the VmdLoader class from babylon-mmd. This creates a loader instance and uses it to load a motion file asynchronously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/mmdLoader.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst vmdLoader = new VmdLoader(scene);\nconst modelMotion = await vmdLoader.loadAsync(\"model_motion_1\", \"your_model_motion_path.vmd\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lens Flare Textures in Standard Rendering Pipeline\nDESCRIPTION: These snippets demonstrate how to set up various textures for the lens flare effect, including dirt texture, starburst texture, and color palette texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.lensTexture = pipeline.lensFlareDirtTexture = new Texture(\"lensdirt.jpg\", scene);\n\n// or\n\npipeline.lensFlareDirtTexture = new Texture(\"lens_flare_dirt.jpg\", scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.lensStarTexture = new Texture(\"lensstar.jpg\", scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.lensColorTexture = new Texture(\"lenscolor.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring FlowGraphGetVariableBlock to Retrieve a Context Variable - JavaScript\nDESCRIPTION: This code shows how to configure a FlowGraphGetVariableBlock, specifying the name and initial value for a variable to retrieve from the Babylon.js context. The configuration object locks the variable name so it cannot be changed after construction, which is ideal for referencing scoped or static values in flow graphs. The initial value may be provided optionally. Babylon.js graph context and block class should be included as dependencies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    /**\n     * The name of the variable to get.\n     */\n    variable: string;\n\n    /**\n     * The initial value of the variable.\n     */\n    initialValue?: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Intensity of GlowLayer in Babylon.js\nDESCRIPTION: Sets the intensity property of the GlowLayer to control the strength of the glow effect. This allows fine-tuning of the glow's visibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/glowLayer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst gl = new BABYLON.GlowLayer(\"glow\", scene);\ngl.intensity = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Exp Node Implementation\nDESCRIPTION: Natural exponential function node that returns e (approximately 2.718) raised to the power of the input value. Supports multiple input types.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Complete HTML Template with AmmoJS Physics Engine\nDESCRIPTION: This HTML code shows a complete example of a Babylon.JS Editor project template modified to use AmmoJS instead of the default CannonJS physics engine. The CannonJS import has been replaced with the AmmoJS CDN link.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/physics/usingPhysics.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n        <title>Babylon.js Generated Template</title>\n\n        <!-- Loads the game -->\n        <script src=\"./dist/bundle.js\" type=\"text/javascript\"></script>\n\n        <!-- Loads the physics engine \"AmmoJS\" -->\n        <script src=\"https://cdn.babylonjs.com/ammo.js\" type=\"text/javascript\"></script>\n\n        ...\n    </head>\n\n    <body>\n        ...\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Physics and Scene Objects with Babylon.js and Ammo.js - JavaScript\nDESCRIPTION: This snippet configures Babylon.js with Ammo.js as the physics engine and creates a ground plane and a box mesh with physical properties for the interactive scene. It sets up physics impostors for collision and dynamics, assigns material properties, and loads a texture. Requires Babylon.js and Ammo.js to be loaded in the environment. The code takes no parameters; it outputs a physics-enabled scene with interactable meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.enablePhysics(new BABYLON.Vector3(0, -10, 0), new AmmoJSPlugin(true, Ammo));\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground1\", { width: 160, height: 160, subdivisions: 2 }, scene);\nground.position.y = -5;\nground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, friction: 0.5, restitution: 0.7 }, scene);\n\nvar box = BABYLON.MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\nbox.position.y = 1;\nbox.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 1, restitution: 0.9 }, scene);\nbox.material = new BABYLON.StandardMaterial(\"s-mat\", scene);\nbox.material.diffuseColor = new BABYLON.Color3(0, 0, 1);\nbox.material.emissiveTexture = new BABYLON.Texture(\"./src/grass.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Comparing Babylon.js WebVR and WebXR Controller Event Handling\nDESCRIPTION: Provides a side-by-side comparison of JavaScript code for handling controller events in Babylon.js, contrasting the deprecated WebVR approach with the modern WebXR implementation. It covers listening for controller connections, detecting main button/trigger presses, and handling thumbstick/touchpad axis changes and button states.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/introToWebXR.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// On new controller attached:\n\n// WebVR:\nwebvrCamera.onControllersAttached = (vrController) => {\n  // fun with the new controller, which is a gamepad!\n};\n\n// WebXR:\nconst webXRInput = xr.input; // if using the experience helper, otherwise, an instance of WebXRInput\ninput.onControllerAddedObservable.add((xrController /* WebXRInputSource instance */) => {\n  // more fun with the new controller, since we are in XR!\n  inputSource.onMotionControllerInitObservable.add((motionController) => {\n    // get the motionController, which is similar to but NOT a gamepad:\n  });\n  // xr supports all types of inputs, so some won't have a motion controller\n  if (!xrController.gamepad) {\n    // using touch, hands, gaze, something else?\n  }\n});\n\n// From this point we assume we have two variables: vrController and xrController.\n// We also assume motionController is present!\n\n// main button\n\n// WebVR:\ncontroller.onMainButtonStateChangedObservable.add((newState /* ExtendedGamepadButton */) => {\n  // is the button pressed?\n  if (newState.pressed) {\n    // Do something\n  }\n});\n\n// WebXR:\n// get the main component (decided by the controller's vendor!)\nconst mainComponent = xrController.motionController.getMainComponent();\n// or get the trigger component, if present:\nconst mainTrigger = xrController.motionController.getComponent(WebXRControllerComponent.TRIGGER);\nmainComponent.onButtonStateChanged.add((component /* WebXRControllerComponent */) => {\n  // check for changes:\n  // pressed changed?\n  if (component.changes.pressed) {\n    // is it pressed?\n    if (component.changes.pressed.current === true) {\n      // pressed\n    }\n    // or a different way:\n    if (component.pressed) {\n      // component is pressed.\n    }\n  }\n});\n\n// thumbpad / touchpad\n\n// in WebVR - you had to check what controller is being used, but in general this would work:\nvrController.onPadValuesChangedObservable.add(function (stateObject) {\n  console.log(stateObject); // {x: 0.1, y: -0.3}\n});\n\n// in webXR you can check if it is present and work accordingly:\nconst thumbstick = xrController.motionController.getComponent(WebXRControllerComponent.THUMBSTICK);\nif (thumbstick) {\n  // Huzza! we have a thumbstick:\n  thumbstick.onButtonStateChanged; // will trigger when the thumbstick is PRESSED or touched!\n\n  thumbstick.onAxisValueChanged; // will trigger when axes of the thumbstick changed\n}\n\n// touchpad\n\n// in WebVR we had \"pad\" concept which was for both thumbstick and touchpad\ncontroller.onPadValuesChangedObservable.add(function (stateObject) {\n  console.log(stateObject); // {x: 0.1, y: -0.3}\n});\n\n// in WebXR, it is much much better:\nconst touchpad = xrController.motionController.getComponent(WebXRControllerComponent.TOUCHPAD);\nif (touchpad) {\n  // Finally, a controller with a touchpad\n  touchpad.onButtonStateChanged; // will trigger when the touchpad is touched or pressed\n\n  touchpad.onAxisValueChanged; // will trigger when axes of the touchpad changed\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Facebook Loading Screen with Babylon.js Asset Manager\nDESCRIPTION: This JavaScript code shows how to update the Facebook Instant Games loading screen based on the progress of asset loading in Babylon.js. It uses the Asset Manager's onProgress property to calculate and set the loading progress.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Instant_Games.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nloader.onProgress = (remaining: number, totalCount: number) => {\n  FBInstant.setLoadingProgress(100 - remaining / totalCount);\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Async Shader Loading in Babylon.js Standard Material (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how Babylon.js uses dynamic `import()` within the `extraInitializationsAsync` function to load either WebGL (`../Shaders/`) or WebGPU (`../ShadersWGSL/`) vertex and fragment shaders asynchronously when creating an effect. This mechanism triggers bundlers like Webpack or Rollup to potentially create separate chunks for these shader files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet effect = scene.getEngine().createEffect(\n  shaderName,\n  {\n    attributes: attribs,\n    uniformsNames: uniforms,\n    uniformBuffersNames: uniformBuffers,\n    samplers: samplers,\n    defines: join,\n    fallbacks: fallbacks,\n    onCompiled: this.onCompiled,\n    onError: this.onError,\n    indexParameters,\n    processFinalCode: csnrOptions.processFinalCode,\n    processCodeAfterIncludes: this._eventInfo.customCode,\n    multiTarget: defines.PREPASS,\n    shaderLanguage: this._shaderLanguage,\n    extraInitializationsAsync: this._shadersLoaded\n      ? undefined\n      : async () => {\n          if (this._shaderLanguage === ShaderLanguage.WGSL) {\n            await Promise.all([import(\"../ShadersWGSL/default.vertex\"), import(\"../ShadersWGSL/default.fragment\")]);\n          } else {\n            await Promise.all([import(\"../Shaders/default.vertex\"), import(\"../Shaders/default.fragment\")]);\n          }\n          this._shadersLoaded = true;\n        },\n  },\n  engine,\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Object Data Format\nDESCRIPTION: Shows how object data is structured within the SPMap array using successive floats for position, rotation, and scaling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains/addingDTObjects.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSPMap[0] = [\n    house1Posx, house1Posy, house1Posz, house1Rotx, house1Roty, house1Rotz, house1Sclx, house1Scly, house1Sclz,\n    house2Posx, house2Posy, house2Posz, house2Rotx, house2Roty, house2Rotz, house2Sclx, house2Scly, house2Sclz,\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Calculating Car and Wheel Movement Based on Speed and Steering Angle\nDESCRIPTION: Logic for moving the car and rotating its wheels based on current speed and steering angle. For non-zero steering angles, it applies different rotation rates to each wheel based on their position relative to the center of rotation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Driven.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif(D > 0) {\n\tphi = D/(R * F);\n\tif(Math.abs(theta)>0) {\n\t \tpivot.rotate(BABYLON.Axis.Y, phi, BABYLON.Space.WORLD);\n\t\tpsiRI = D/(r * F);\n\t\tpsiRO = D * (R + A)/(r * F);\n\t\tpsiFI = D * Math.sqrt(R* R + L * L)/(r * F);\n\t\tpsiFO = D * Math.sqrt((R + A) * (R + A) + L * L)/(r * F);\n\n\t\twheelFI.rotate(BABYLON.Axis.Y, psiFI, BABYLON.Space.LOCAL);\n\t\twheelFO.rotate(BABYLON.Axis.Y, psiFO, BABYLON.Space.LOCAL);\n\t\twheelRI.rotate(BABYLON.Axis.Y, psiRI, BABYLON.Space.LOCAL);\n\t\twheelRO.rotate(BABYLON.Axis.Y, psiRO, BABYLON.Space.LOCAL);\n \t}\n \telse {\n\t \tpivot.translate(BABYLON.Axis.X, -distance, BABYLON.Space.LOCAL);\n\t\twheelFI.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);\n\t\twheelFO.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);\n\t\twheelRI.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);\n\t\twheelRO.rotate(BABYLON.Axis.Y, psi, BABYLON.Space.LOCAL);\n \t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Options to GUISelect in BabylonJS\nDESCRIPTION: Adds a new option to the GUISelect element. This method allows for dynamically populating the select element with choices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddOptions(value, text)\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTML for Async Model Loading in Babylon.js Viewer\nDESCRIPTION: Shows the HTML configuration for a viewer that will load models asynchronously, without specifying a model in the initial configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<babylon id=\"babylon-viewer\" camera.behaviors.auto-rotate=\"0\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Code Execution Function Type - TypeScript\nDESCRIPTION: This TypeScript snippet defines the function signature for a CodeExecutionFunction, specifying the expected parameters and output type. It is used as a type contract for functions to be executed by the FlowGraphCodeExecutionBlock in Babylon.js; the function receives the current value and execution context and returns a computed output. Type safety ensures that implementations conform to this API, assisting in maintainability and automated type checking.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ntype CodeExecutionFunction = (value: any, context: FlowGraphContext) => any;\n```\n\n----------------------------------------\n\nTITLE: Parsing Viewer Configuration JSON\nDESCRIPTION: Example of parsing JSON configuration output from the Viewer Configurator into ViewerOptions object\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/viewerConfigurator.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst configuration: string = \"the copied and pasted output of the Viewer Configurator goes here\";\nconst options: ViewerOptions = JSON.parse(configuration);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Clipping Plane in Babylon.js\nDESCRIPTION: Shows how to create a basic clipping plane using BABYLON.Plane constructor. The constructor takes 4 parameters: the first 3 define the normal of the plane (x,y,z), and the last parameter defines the distance from origin (0,0,0).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/clipPlanes.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.clipPlane4 = new BABYLON.Plane(0, 1, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Imported Material Class - JavaScript\nDESCRIPTION: Shows how to instantiate a material (e.g., SkyMaterial) from the imported Materials namespace. Assumes correct import and that all necessary dependencies are resolved. The function and parameters depend on the specific material's API, and details should be checked in documentation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet skyMaterial = new Materials.SkyMaterial(.....)\n```\n\n----------------------------------------\n\nTITLE: Customizing Font in Digital Rain Post Process\nDESCRIPTION: This snippet shows how to customize the font used in the Digital Rain Post Process. It allows changing the appearance of the characters in the effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/digitalRainPP.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.DigitalRainPostProcess(\"DigitalRain\", camera, \"3px Monospace\");\n```\n\n----------------------------------------\n\nTITLE: Instantiating Resizer Control\nDESCRIPTION: Creating a new instance of the Resizer control with a canvas element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/resizer.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst resizer = new Resizer(resizerCanvas);\n```\n\n----------------------------------------\n\nTITLE: Creating GUI Stack Panel\nDESCRIPTION: Sets up a container panel positioned in the bottom right corner to hold GUI elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/light_gui.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst panel = new BABYLON.GUI.StackPanel();\npanel.width = \"220px\";\npanel.top = \"-50px\";\npanel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\npanel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\nadt.addControl(panel);\n```\n\n----------------------------------------\n\nTITLE: Particle System Toggle Function in BabylonJS\nDESCRIPTION: Handles the toggle functionality for the particle system. When the fountain mesh is clicked, it toggles the particle system between started and stopped states using a boolean flag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/onoff.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointerDown = (mesh) => {\n    if (mesh === fountain) { //check that the picked mesh is the fountain\n        switched = !switched;  //toggle switch\n        if(switched) {\n            particleSystem.start();\n        }\n        else {\n            particleSystem.stop();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Meshes to Lights Using Scene Hierarchy in Babylon.js\nDESCRIPTION: Optimizes light inclusion by manually assigning meshes to specific lights based on their scene hierarchy. This approach uses transform nodes from Blender to determine which meshes should be affected by each lantern light.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/performance.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.mesh.name.includes(\"14\") || this.mesh.name.includes(\"15\")) {\n    light.includedOnlyMeshes.push(this._scene.getMeshByName(\"festivalPlatform1\"));\n} else if (this.mesh.name.includes(\"16\") || this.mesh.name.includes(\"17\")) {\n    light.includedOnlyMeshes.push(this._scene.getMeshByName(\"festivalPlatform2\"));\n} else if (this.mesh.name.includes(\"18\") || this.mesh.name.includes(\"19\")) {\n    light.includedOnlyMeshes.push(this._scene.getMeshByName(\"festivalPlatform3\"));\n} else if (this.mesh.name.includes(\"20\") || this.mesh.name.includes(\"21\")) {\n    light.includedOnlyMeshes.push(this._scene.getMeshByName(\"festivalPlatform4\"));\n}\nthis._scene\n    .getTransformNodeByName(this.mesh.name + \"lights\")\n    .getChildMeshes()\n    .forEach((m) => {\n        light.includedOnlyMeshes.push(m);\n    });\n```\n\n----------------------------------------\n\nTITLE: Getting All Input Blocks in Babylon.js Node Material using JavaScript\nDESCRIPTION: Accesses the array of all InputBlock instances currently registered with the Node Material. Useful for bulk inspection, updates, or exporting all input-driven parameters in the node graph. No parameters required; returns an array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nnodeMaterial.getInputBlocks();\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies on Non-Windows OS in Shell\nDESCRIPTION: This shell command is intended for users on operating systems other than Windows. It uses `npm install --save` to download and install the project's dependencies defined in the `package.json` file, executed within the project's root directory (e.g., `C:\\babylon`). Node.js and NPM are prerequisites.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/Running_a_local_webserver_for_BabylonJs.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save\n```\n\n----------------------------------------\n\nTITLE: GUIMeter Update Value Method\nDESCRIPTION: Method to update the current value of the meter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiMeter.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nupdateValue(int) → void\n```\n\n----------------------------------------\n\nTITLE: Moving Agent to Destination\nDESCRIPTION: Commands an agent to move to a specific destination point on the navigation mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/crowdAgents.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncrowd.agentGoto(agentIndex, navigationPlugin.getClosestPoint(endPoint));\n```\n\n----------------------------------------\n\nTITLE: Including Image Processing Compatibility in Babylon.js Shader (GLSL)\nDESCRIPTION: This snippet demonstrates how to include the image processing compatibility shader code in a Babylon.js GLSL shader. By placing this include directive after each gl_FragColor output, the shader will conditionally apply compatibility adjustments based on the active defines. The include should be used only when creating custom shader materials that need awareness of the post-process configuration. Babylon.js must be set up to resolve and provide the <imageProcessingCompatibility> include block.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/image_processing.md#2025-04-23_snippet_1\n\nLANGUAGE: GLSL\nCODE:\n```\n#include<imageProcessingCompatibility>\n```\n\n----------------------------------------\n\nTITLE: Adding elements to a GUIWindow\nDESCRIPTION: Method to add child elements to a GUIWindow container.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiWindow.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadd(element) → void\n```\n\n----------------------------------------\n\nTITLE: Setting up HandConstraintBehavior in BabylonJS\nDESCRIPTION: Implements behavior for making meshes follow user's hand in WebXR with hand tracking support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/meshBehaviors.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst behavior = new BABYLON.HandConstraintBehavior();\nbehavior.attach(mesh);\nbehavior.linkToXRExperience(xr);\n```\n\n----------------------------------------\n\nTITLE: Adding Texture Materials to Objects\nDESCRIPTION: Shows how to create materials with textures loaded from URLs and apply them to roof and box meshes. Demonstrates loading textures from both relative and absolute paths.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/material.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst roofMat = new BABYLON.StandardMaterial(\"roofMat\");\nroofMat.diffuseTexture = new BABYLON.Texture(\"https://assets.babylonjs.com/environments/roof.jpg\", scene);\nconst boxMat = new BABYLON.StandardMaterial(\"boxMat\");\nboxMat.diffuseTexture = new BABYLON.Texture(\"https://www.babylonjs-playground.com/textures/floor.png\");\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Modules via NPM - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the main Babylon.js ES6 package (@babylonjs/core) using npm. It is required to execute this in your project directory after running 'npm init' to make all Babylon.js features available as ES6 modules. Dependencies: Node.js and npm. The command downloads all relevant files, including JavaScript sources and TypeScript declarations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Awaiting a Coroutine Within an Async Function Using Observable.runCoroutineAsync (JavaScript)\nDESCRIPTION: This code shows how to combine traditional async/await logic with coroutines by using Observable.runCoroutineAsync inside an asynchronous function. Requirements include Babylon.js (scene and BABYLON.Tools.DelayAsync), JavaScript async/await support, and the presence of scene.onBeforeRenderObservable. The asynchronousFunc will print messages with delays—first 'Start', then after a one-second delay it runs a two-frame coroutine, and after another delay prints 'End'. Key parameters: asynchronousFunc takes none, coroutineFunc is a generator; outputs are console logs at scheduled intervals. The function asynchronousFunction should be defined as asynchronousFunc for proper execution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/coroutines.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst coroutineFunc = function* () {\n  console.log(\"A\");\n  yield;\n  console.log(\"B\");\n};\n\nconst asynchronousFunc = async function () {\n  console.log(\"Start\");\n  await BABYLON.Tools.DelayAsync(1000);\n  await scene.onBeforeRenderObservable.runCoroutineAsync(coroutineFunc());\n  await BABYLON.Tools.DelayAsync(1000);\n  console.log(\"End\");\n};\n\nasynchronousFunction();\n```\n\n----------------------------------------\n\nTITLE: Removing Controls from Containers in Babylon.js GUI\nDESCRIPTION: Shows how to remove a control from a container in Babylon.js GUI. This is useful when you need to dynamically modify your user interface.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.removeControl(control);\n```\n\n----------------------------------------\n\nTITLE: Creating Split Layout HTML Structure for Babylon.js Canvas and Instructions\nDESCRIPTION: HTML structure that creates a split layout with a Babylon.js canvas on the left and instructions panel on the right. The canvas is placed in a holder div taking 80% width while instructions take 20%.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/app2.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id = \"holder\">\n        <canvas id=\"renderCanvas\" touch-action=\"none\"></canvas> <!-- touch-action=\"none\" for best results from PEP -->\n</div>\n<div id = \"instructions\">\n    <br/>\n    <h2>Instructions</h2>\n    <br/>\n    Instructions Instructions Instructions Instructions Instructions \n    Instructions Instructions Instructions Instructions Instructions \n</div>\n```\n\n----------------------------------------\n\nTITLE: Finding Selected Option in GUISelect\nDESCRIPTION: Retrieves the currently selected option in the GUISelect. The 'withIndex' parameter determines whether to return the index of the selected item.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfindOptionSelected(bool: withIndex)\n```\n\n----------------------------------------\n\nTITLE: Setting Video Mode in VideoDome\nDESCRIPTION: Configuration examples for different video modes including monoscopic, side-by-side, and top-bottom panoramic formats.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360VideoDome.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvideoDome.videoMode = BABYLON.VideoDome.MODE_MONOSCOPIC;\n// or\nvideoDome.videoMode = BABYLON.VideoDome.MODE_SIDEBYSIDE;\n// or\nvideoDome.videoMode = BABYLON.VideoDome.MODE_TOPBOTTOM;\n```\n\n----------------------------------------\n\nTITLE: Defining Skeleton Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Specifies the JSON format for defining a skeleton used for skinned mesh animation in Babylon.js. It includes the skeleton's name and ID, an array containing the definition of its bones, and a flag indicating if an initial skin matrix calculation is required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": string,\n    \"id\": string,\n    \"bones\": array of Bones (see below)\n    \"needInitialSkinMatrix\": boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Slider Event Handler\nDESCRIPTION: Adds an observable event to the slider that updates light intensity based on slider value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/light_gui.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nslider.onValueChangedObservable.add((value) => {\n    if (light) {\n        light.intensity = value;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Speed Gradient Over Lifetime (Value Ranges) in Babylon.js\nDESCRIPTION: Demonstrates using `addVelocityGradient` with three arguments to define a range for the speed factor at different points in the particle's lifetime. The actual speed factor will be randomly chosen within the specified range at each time fraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addVelocityGradient(0, 0.5, 0.8); //applied power range at start of particle lifetime\nparticleSystem.addVelocityGradient(0.4, 1, 2); //applied power range at 2/5 of duration of particle system\nparticleSystem.addVelocityGradient(1.0, 3, 4); //applied power range at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Colors and Blend Mode in BabylonJS\nDESCRIPTION: Configures particle colors and blending mode for visual effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.color1 = new BABYLON.Color4(0.7, 0.8, 1.0, 1.0);\nparticleSystem.color2 = new BABYLON.Color4(0.2, 0.5, 1.0, 1.0);\n\nparticleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ONEONE;\n```\n\n----------------------------------------\n\nTITLE: Modern Facet Increase Method (Babylon.js v4.0+)\nDESCRIPTION: Simple method to increase mesh vertices in modern Babylon.js versions. Adds n points per side to each facet, increasing total facets by (n + 1)².\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Increasing_Facets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.increaseVertices(n);\n```\n\n----------------------------------------\n\nTITLE: Setting Selected Item in GUISelect\nDESCRIPTION: Sets a specific item as selected in the GUISelect. This method programmatically changes the selected option in the dropdown.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nselectedItem(item)\n```\n\n----------------------------------------\n\nTITLE: EmitCommand Helper Method Implementation\nDESCRIPTION: Implementation of the emitCommand helper method used to emit messages from the BabylonJS scene. It handles the details of creating and sending a command message.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nemitCommand(type: string, payload?: any): void {\n  // Implementation not fully shown in the image\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing High Level Fur Material Properties in Babylon.js\nDESCRIPTION: Adjusts various properties of the high-level fur material such as spacing, density, speed, and gravity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nallFurMaterials.furSpacing = 2; // Computes the space between shells. In others words, works as the fur height\n```\n\nLANGUAGE: javascript\nCODE:\n```\nallFurMaterials.furDensity = 20; // Computes the fur density. More the density is high, more you'll have to zoom on the model\n```\n\nLANGUAGE: javascript\nCODE:\n```\nallFurMaterials.furSpeed = 100; // Divides the animation of fur in time according to the gravity\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Compute the gravity followed by the fur\nallFurMaterials.furGravity = new BABYLON.Vector3(0, -1, 0);\n```\n\n----------------------------------------\n\nTITLE: Using Different Coloring Methods for Mesh-Based Points in Babylon.js\nDESCRIPTION: Illustrates various `BABYLON.PointColor` options when adding points from a mesh. `PointColor.Stated` uses a base color with optional variation. `PointColor.Color` uses the mesh's material or texture color. `PointColor.UV` uses the mesh's UV coordinates, intended for use with an emissive texture applied to the PCS.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npcs.addSurfacePoints(box, 1000, BABYLON.PointColor.Stated, new BABYLON.Color3(1, 0, 0), 0.5);\npcs.addVolumePoints(box, 10000, BABYLON.PointColor.Color);\npcs.addSurfacePoints(box, 100000, BABYLON.PointColor.UV);\n```\n\n----------------------------------------\n\nTITLE: Accessing Animation Groups with @fromAnimationGroups Decorator in TypeScript\nDESCRIPTION: This code demonstrates using the @fromAnimationGroups decorator to reference animation groups, which are not nodes in Babylon.JS. The decorator finds and assigns the animation group to the decorated property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/gettingComponents.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { AnimationGroup } from \"@babylonjs/core/Animations/animationGroup\";\n\nimport { fromAnimationGroups } from \"../decorators\";\n\nexport default class MyMeshComponent extends Mesh {\n    @fromAnimationGroups(\"walk\")\n    private _walk: AnimationGroup;\n\n    public onStart(): void {\n        this._walk.play(true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Lantern Mesh in Class Method\nDESCRIPTION: Sets up the lantern mesh with proper scaling, positioning, and properties. The mesh is made non-pickable to prevent player interaction but still allows for detecting intersections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nthis.mesh = mesh;\nthis.mesh.scaling = new Vector3(0.8, 0.8, 0.8);\nthis.mesh.setAbsolutePosition(position);\nthis.mesh.isPickable = false;\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Color Gradient Over Lifetime (Single Values) in Babylon.js\nDESCRIPTION: Demonstrates how to use `addColorGradient` with `BABYLON.Color4` objects to define the color and alpha of particles at the beginning (time fraction 0) and end (time fraction 1) of their lifetimes. The color will interpolate between these values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.addColorGradient(0, new BABYLON.Color4(1, 1, 1, 0)); //color at start of particle lifetime\nparticleSystem.addColorGradient(1, new BABYLON.Color4(1, 1, 1, 1)); //color at end of particle lifetime\n```\n\n----------------------------------------\n\nTITLE: Assigning a Texture to Particles in Babylon.js\nDESCRIPTION: Sets the texture to be used for rendering all particles in the system. A new `BABYLON.Texture` object is created and assigned to the `particleTexture` property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_system_intro.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmyParticleSystem.particleTexture = new BABYLON.Texture(\"PATH TO IMAGE\", scene);\n```\n\n----------------------------------------\n\nTITLE: Teleporting an Agent\nDESCRIPTION: Instantly moves an agent to a new position on the navigation mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/crowdAgents.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncrowd.agentTeleport(agentIndex, navigationPlugin.getClosestPoint(destinationPoint));\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of GUICheckbox in Babylon.js\nDESCRIPTION: Method to determine if a GUICheckbox element is currently visible. Returns the visibility state of the checkbox.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiCheckbox.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern Constants for Tiled Plane in Babylon.js\nDESCRIPTION: This code snippet lists the available constants for the 'pattern' option when creating a tiled plane. These constants determine how tiles are reflected or rotated on the plane.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_plane.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.NO_FLIP, default\nBABYLON.Mesh.FLIP_TILE,\nBABYLON.Mesh.ROTATE_TILE,\nBABYLON.Mesh.FLIP_ROW,\nBABYLON.Mesh.ROTATE_ROW,\nBABYLON.Mesh.FLIP_N_ROTATE_TILE,\nBABYLON.Mesh.FLIP_N_ROTATE_ROW\n```\n\n----------------------------------------\n\nTITLE: Importing the Environment Class in TypeScript\nDESCRIPTION: Shows the necessary import statement to use the `Environment` class, defined in `environment.ts`, within another file like `app.ts`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Environment } from \"./environment\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with FlowGraphArrayIndexBlock - JavaScript\nDESCRIPTION: This snippet demonstrates how to access a specific element from an array using FlowGraphArrayIndexBlock in Babylon.js. It sets up an array of meshes and assigns the array and desired index (1) to the block via setValue. The context object (ctx) must be prepared before use, and FlowGraphArrayIndexBlock must be available from the Babylon.js libraries. The output provides the referenced array element. This is typically used for node-based scripting where elements from arrays need to be retrieved dynamically, and care should be taken to ensure index is within range.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst meshes = [mesh1, mesh2, mesh3];\nconst arrayIndex = new FlowGraphArrayIndexBlock();\narrayIndex.array.setValue(meshes, ctx);\narrayIndex.index.setValue(1, ctx);\n```\n\n----------------------------------------\n\nTITLE: Defining Alignment Constants for Tiled Plane in Babylon.js\nDESCRIPTION: This code snippet shows the constants used for vertical and horizontal alignment of tiles on the plane. These constants determine where whole tiles are placed when partial tiles are needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_plane.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.CENTER, default\nBABYLON.Mesh.TOP,\nBABYLON.Mesh.BOTTOM\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.CENTER, default\nBABYLON.Mesh.LEFT,\nBABYLON.Mesh.RIGHT\n```\n\n----------------------------------------\n\nTITLE: Calculating Vertex Y-Position in GLSL Vertex Shader\nDESCRIPTION: This GLSL snippet shows the core logic within the vertex shader's main function. It calculates a unique box number (`bn`) based on the vertex's x-position and a uniform `box_spacing`. This number, along with the `time` uniform, is used in a sine function to calculate the vertical displacement (`p.y`), creating the wave effect. The final vertex position is then transformed by the `worldViewProjection` matrix.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nvec3 p = position;\nfloat bn = floor(position.x / box_spacing);\np.y = p.y + sin(time + bn/4.0);\ngl_Position = worldViewProjection * vec4(p, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Creating a Hinge Joint Using Helper Class\nDESCRIPTION: Example of creating a hinge joint using the HingeJoint helper class. This provides a simpler alternative to using the PhysicsJoint class directly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/joints.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar joint1 = new BABYLON.HingeJoint(jointData);\n```\n\n----------------------------------------\n\nTITLE: Calculating OBOA Overlap Facets via Rotation in JavaScript\nDESCRIPTION: This `Primary` prototype method calculates the iso-vector data for facets overlapping edges OB and OA (`isoVecsOBOA`) by rotating the corresponding data from the ABOB overlap (`isoVecsABOB`). It iterates through the ABOB vectors, cloning them. If a vertex type is 0, it applies a negative 120-degree rotation using `point.rotateNeg120Sides(this.m, this.n)` before storing the result. Depends on the `IsoVector` class and instance properties `m` and `n`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPrimary.prototype.ABOBtoOBOA = function() {\n    let point = new IsoVector(0, 0);\n    for (let i = 0; i < this.isoVecsABOB.length; i++) {\n        const temp = [];\n        for (let j = 0; j < 3; j++) {\n            point.x = this.isoVecsABOB[i][j].x;\n            point.y = this.isoVecsABOB[i][j].y;\n            if (this.vertexTypes[i][j] === 0) {\n                point.rotateNeg120Sides(this.m, this.n);\n            }\n            temp.push(point.clone());\n        }\n        this.isoVecsOBOA.push(temp);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a RandomEffector with RadialCloner in Babylon.js\nDESCRIPTION: This example creates a RandomEffector with a default seed value and configures it to randomly rotate clones around the y-axis within a range of 0-180 degrees. The effector is then added to a RadialCloner with full sensitivity and strength.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/randomEffector.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet rc = new BABYLONX.RadialCloner([cube1, cube2], demo.scene, { count: 24, radius: 6 });\n\nlet reff = new BABYLONX.RandomEffector(); //default seed value\n\nreff.rotation = { x: 0, y: 180, z: 0 };\n\nrc.addEffector(reff, 1);\n\nreff.strength = 1;\n```\n\n----------------------------------------\n\nTITLE: HTML Template with OimoJS Physics Engine\nDESCRIPTION: This HTML code snippet shows how to load the OimoJS physics engine from a CDN instead of the default CannonJS. This change is required when selecting OimoJS as the physics engine in the editor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/physics/usingPhysics.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.babylonjs.com/Oimo.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Fullscreen GUI Texture\nDESCRIPTION: Initializes an AdvancedDynamicTexture for fullscreen GUI elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/light_gui.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst adt = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Standard Shadow Generator with CascadedShadowGenerator in Babylon.js JavaScript\nDESCRIPTION: This code snippet shows how to replace an instantiation of the standard ShadowGenerator with CascadedShadowGenerator for improved CSM-based shadow effects. Simply swap the constructors, keeping parameters unchanged; only PCF and PCSS filterings are supported for CSM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows_csm.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.ShadowGenerator(...)\n```\n\n----------------------------------------\n\nTITLE: Forcing Loader Type for Models in Babylon.js Viewer\nDESCRIPTION: Demonstrates how to force a specific file format loader on a model when file extensions aren't available by using the model.loader configuration variable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"minimal\" model.url=\"https://example.com/Rabbit\" model.loader=\".gltf\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Getting Mesh Data in Babylon.js\nDESCRIPTION: Retrieves vertex positions and indices from a mesh to prepare for point generation\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/SurfaceMeshPoints.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\nvar indices = mesh.getIndices();\n```\n\n----------------------------------------\n\nTITLE: Constructing Open Curve Track Points (Babylon.js, JavaScript)\nDESCRIPTION: Generates points along an open path (three-quarters of a circle) by varying the angle in the trigonometric functions. The final points array defines the open curve, suitable for drawing or animating a carriage. This approach is applicable where full closure is not required, and complements closed track construction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar points = [];\nvar n = 375; // number of points\nvar r = 20; //radius\nfor (let i = 0; i < n; i++) {\n  points.push(new BABYLON.Vector3(r * Math.cos((i * 3 * Math.PI) / (2 * n)), 0, r * Math.sin((i * 3 * Math.PI) / (2 * n))));\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Attached Blocks in Babylon.js Node Material using JavaScript\nDESCRIPTION: Provides access to the internal collection of all block nodes attached to the Node Material instance. Used for low-level introspection or for tools that need to iterate over the full block set.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nnodeMaterial.attachedBlocks;\n```\n\n----------------------------------------\n\nTITLE: Complete Line2D Implementation in Babylon.js\nDESCRIPTION: Full implementation of the line2D function that creates a custom mesh representing a line with width. Handles both open and closed paths, supports texture mapping, and includes UV coordinate calculation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar line2D = function(name, options, scene) {\n\n\t//Arrays for vertex positions and indices\n\tvar positions = [];\n\tvar indices = [];\n        var normals = [];\n\n        var width = options.width / 2 || 0.5;\n        var path = options.path;\n\tvar closed = options.closed || false;\n\tif(options.standardUV === undefined) {\n\t\tstandardUV = true;\n\t}\n\telse {\n\t\tstandardUV = options.standardUV;\n\t}\n\n\tvar interiorIndex;\n\t\n\t//Arrays to hold wall corner data \n\tvar innerBaseCorners = [];\n\tvar outerBaseCorners = [];\n\t\n\tvar outerData = [];\n        var innerData = [];\n\tvar angle = 0;\n\t\n\tvar nbPoints = path.length;\n\tvar line = BABYLON.Vector3.Zero();\n\tvar nextLine = BABYLON.Vector3.Zero();\n\tpath[1].subtractToRef(path[0], line);\n\n\tif(nbPoints > 2 && closed) {\t\n\t\tpath[2].subtractToRef(path[1], nextLine);    \n\t\tfor(let p = 0; p < nbPoints; p++) {    \n\t\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            \n\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().z;                \n\t\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\tline.normalize();\n\t\t\tinnerData[(p + 1) % nbPoints] = path[(p + 1) % nbPoints].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\touterData[(p + 1) % nbPoints] = path[(p + 1) % nbPoints].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));        \n\t\t\tline = nextLine.clone();        \n\t\t\tpath[(p + 3) % nbPoints].subtractToRef(path[(p + 2) % nbPoints], nextLine);    \n\t\t}\n\t}\n\telse {\n\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\tline.normalize();\t\t\n\t\tinnerData[0] = path[0].subtract(lineNormal.scale(width));\n\t\touterData[0] = path[0].add(lineNormal.scale(width));\n\t\n\t\tfor(let p = 0; p < nbPoints - 2; p++) {\t\n\t\t\tpath[p + 2].subtractToRef(path[p + 1], nextLine);\n\t\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));\t\t\t\n\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().z;\t\t\t\n\t\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\tline.normalize();\n\t\t\tinnerData[p + 1] = path[p + 1].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\touterData[p + 1] = path[p + 1].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));\t\t\n\t\t\tline = nextLine.clone();\t\t\t\n\t\t}\n\t\tif(nbPoints > 2) {\n\t\t\tpath[nbPoints - 1].subtractToRef(path[nbPoints - 2], line);\n\t\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\t\tline.normalize();\t\t\n\t\t\tinnerData[nbPoints - 1] = path[nbPoints - 1].subtract(lineNormal.scale(width));\n\t\t\touterData[nbPoints - 1] = path[nbPoints - 1].add(lineNormal.scale(width));\n\t\t}\n\t\telse{\n\t\t\tinnerData[1] = path[1].subtract(lineNormal.scale(width));\n\t\t\touterData[1] = path[1].add(lineNormal.scale(width));\n\t\t}\n\t}\n     \n\tvar maxX = Number.MIN_VALUE;\n\tvar minX = Number.MAX_VALUE;\n\tvar maxY = Number.MIN_VALUE;\n\tvar minY = Number.MAX_VALUE;\n\t\n\tfor(let p = 0; p < nbPoints; p++) {\n\t\tpositions.push(innerData[p].x, innerData[p].y, innerData[p].z);\n\t\tmaxX = Math.max(innerData[p].x, maxX);\n\t\tminX = Math.min(innerData[p].x, minX);\n\t\tmaxY = Math.max(innerData[p].y, maxY);\n\t\tminY = Math.min(innerData[p].y, minY);\n\t}\n\n\tfor(let p = 0; p < nbPoints; p++) {\n\t\tpositions.push(outerData[p].x, outerData[p].y, outerData[p].z);\n\t\tmaxX = Math.max(innerData[p].x, maxX);\n\t\tminX = Math.min(innerData[p].x, minX);\n\t\tmaxY = Math.max(innerData[p].y, maxY);\n\t\tminY = Math.min(innerData[p].y, minY);\n\t}\n\n        for(let i = 0; i < nbPoints - 1; i++) {\n            indices.push(i, i + 1, nbPoints + i + 1);\n            indices.push(i, nbPoints + i + 1, nbPoints + i)\n        }\n\t\n\tif(nbPoints > 2 && closed) {\n\t\tindices.push(nbPoints - 1, 0, nbPoints);\n            indices.push(nbPoints - 1, nbPoints, 2 * nbPoints - 1)\n\t}\n\n\tvar normals = [];\n        var uvs =[];\n\n\tif(standardUV) {\n\t\tfor(let p = 0; p < positions.length; p += 3) {\n\t\t\tuvs.push((positions[p] - minX)/(maxX - minX), (positions[p + 1] - minY)/(maxY - minY))\n\t\t}\n\t}\n\telse {\n\t\tvar flip = 0;\n\t\tvar p1 = 0;\n\t\tvar p2 = 0;\n\t\tvar p3 = 0;\n\t\tvar v0 = innerData[0];\n\t\tvar v1 = innerData[1].subtract(v0);\n\t\tvar v2 = outerData[0].subtract(v0);\n\t\tvar v3 = outerData[1].subtract(v0);\n\t\tvar axis = v1.clone();\n\t\taxis.normalize();\n\n\t\tp1 = BABYLON.Vector3.Dot(axis,v1);\n\t\tp2 = BABYLON.Vector3.Dot(axis,v2);\n\t\tp3 = BABYLON.Vector3.Dot(axis,v3);\n\t\tvar minX = Math.min(0, p1, p2, p3);\n\t\tvar maxX = Math.max(0, p1, p2, p3);\n\t\t\n\t\tuvs[2 * indices[0]] = -minX/(maxX - minX);\n\t\tuvs[2 * indices[0] + 1] = 1;\n\t\tuvs[2 * indices[5]] = (p2 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[5] + 1] = 0;\n\t\t\n\t\tuvs[2 * indices[1]] = (p1 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[1] + 1] = 1;\n\t\tuvs[2 * indices[4]] = (p3 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[4] + 1] = 0;\n\t\n\t\tfor(let i = 6; i < indices.length; i +=6) {\n\t\t\n\t\t\tflip = (flip + 1) % 2;\n\t\t\tv0 = innerData[0];\n\t\t\tv1 = innerData[1].subtract(v0);\n\t\t\tv2 = outerData[0].subtract(v0);\n\t\t\tv3 = outerData[1].subtract(v0);\n\t\t\taxis = v1.clone();\n\t\t\taxis.normalize();\n\n\t\t\tp1 = BABYLON.Vector3.Dot(axis,v1);\n\t\t\tp2 = BABYLON.Vector3.Dot(axis,v2);\n\t\t\tp3 = BABYLON.Vector3.Dot(axis,v3);\n\t\t\tvar minX = Math.min(0, p1, p2, p3);\n\t\t\tvar maxX = Math.max(0, p1, p2, p3);\n\t\t\n\t\t\tuvs[2 * indices[i + 1]] = flip + Math.cos(flip * Math.PI) * (p1 - minX)/(maxX - minX);\n\t\t\tuvs[2 * indices[i + 1] + 1] = 1;\n\t\t\tuvs[2 * indices[i + 4]] = flip + Math.cos(flip * Math.PI) * (p3 - minX)/(maxX - minX);\n\t\t\tuvs[2 * indices[i + 4] + 1] = 0;\n\t\t}\n\t}\n\t\n\tBABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\tBABYLON.VertexData._ComputeSides(BABYLON.Mesh.DOUBLESIDE, positions, indices, normals, uvs);  \t\n\tconsole.log(uvs)\t\t\n\t//Create a custom mesh  \n\tvar customMesh = new BABYLON.Mesh(name, scene);\n\n\t//Create a vertexData object\n\tvar vertexData = new BABYLON.VertexData();\n\n\t//Assign positions and indices to vertexData\n\tvertexData.positions = positions;\n\tvertexData.indices = indices;\n\tvertexData.normals = normals;\n\tvertexData.uvs = uvs;\n\n\t//Apply vertexData to custom mesh\n\tvertexData.applyToMesh(customMesh);\n\t\n\treturn customMesh;\n\t\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring External Texture in WGSL\nDESCRIPTION: This WGSL code demonstrates how to declare an external texture, which is useful for video playback in WebGPU.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_7\n\nLANGUAGE: wgsl\nCODE:\n```\nvar videoTexture : texture_external;\n```\n\n----------------------------------------\n\nTITLE: Configuring BranchBlock in BabylonJS Flow Graph\nDESCRIPTION: This code snippet shows how to set up a BranchBlock for conditional execution in a flow graph. It demonstrates connecting the condition input and the true/false outputs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst branch = new FlowGraphBranchBlock();\n\nbranch.condition.connectTo(conditionBlock.value);\n\nbranch.onTrue.connectTo(nextBlock1.in);\nbranch.onFalse.connectTo(nextBlock2.in);\n```\n\n----------------------------------------\n\nTITLE: Disposing GUISelect in BabylonJS\nDESCRIPTION: Disposes of the GUISelect element, removing it from the GUI and freeing associated resources. This should be called when the select element is no longer needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndispose()\n```\n\n----------------------------------------\n\nTITLE: Configuring GetAssetBlock Parameters - JavaScript\nDESCRIPTION: This snippet presents a typical configuration object for FlowGraphGetAssetBlock, documenting how to select which asset to retrieve in the Babylon.js scene or asset context. The object allows selection by type (FlowGraphAssetType), index, and optionally unique asset ID (useIndexAsUniqueId). This configuration supports extracting assets by either positional index or globally unique ID, and the block's outputs then provide references to scene elements like meshes, materials, or lights. Babylon.js context and block class must be available.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    /**\n     * The type of the asset that will be retrieved.\n     */\n    type: FlowGraphAssetType;\n    /**\n     * The index of the asset in the corresponding array in the assets context.\n     * If not provided you can still change it using the input connection.\n     */\n    index?: number | FlowGraphInteger;\n\n    /**\n     * If set to true, instead of the index in the array it will search for the unique id of the asset.\n     * The value of index will be used as the unique id.\n     */\n    useIndexAsUniqueId?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Car Body using Extrusion in Babylon.js\nDESCRIPTION: This code creates the car body by extruding a trapezium shape along a path. It defines a red material and applies it to the extruded mesh, which forms the main body of the car.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar bodyMaterial = new BABYLON.StandardMaterial(\"body_mat\", scene);\nbodyMaterial.diffuseColor = new BABYLON.Color3(1.0, 0.25, 0.25);\nbodyMaterial.backFaceCulling = false;\n\nvar side = [new BABYLON.Vector3(-4, 2, -2), new BABYLON.Vector3(4, 2, -2), new BABYLON.Vector3(5, -2, -2), new BABYLON.Vector3(-7, -2, -2)];\n\nside.push(side[0]); //close trapezium\n\nvar extrudePath = [new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, 0, 4)];\n\nvar carBody = BABYLON.MeshBuilder.ExtrudeShape(\"body\", { shape: side, path: extrudePath, cap: BABYLON.Mesh.CAP_ALL }, scene);\ncarBody.material = bodyMaterial;\n```\n\n----------------------------------------\n\nTITLE: Demo: Shadow Samplers (PCF/PCSS) in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: #ZT8BKT#57) demonstrating 'Shadow Samplers', which enable hardware-accelerated Percentage-Closer Filtering (PCF) depth comparison for PCF and PCSS shadow techniques. Not supported on WebGL1, where shadows fall back to poisson sampling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#ZT8BKT#57\" title=\"Shadow Samplers\" description=\"Shadow Samplers\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Debug Layer Without ES Modules\nDESCRIPTION: Shows how to initialize the Babylon.js Inspector debug layer without using ES Modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.debugLayer.show();\n```\n\n----------------------------------------\n\nTITLE: Debugging Fragment Shader for Multiple Passes in Babylon.js\nDESCRIPTION: This GLSL fragment shader snippet demonstrates a technique for debugging individual passes in a multi-pass render setup by isolating and displaying a single pass.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/renderTargetTextureMultiPass.md#2025-04-23_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\nvarying vec2 vUV;\nuniform sampler2D somePassTexture;\n\nvoid main() {\n    // comment other code\n    vec4 debugColor = texture2D(someTexture, vUV);\n    gl_FragColor = debugColor;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Contexts in Babylon.js Flow Graph\nDESCRIPTION: Shows how to create multiple contexts for a flow graph and set variables within each context. This example creates contexts for a potato and a carrot in a cooking scenario.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst potatoContext = graph.createContext();\npotatoContext.setVariable(\"vegetable\", \"potato\");\npotatoContext.setVariable(\"cutType\", \"slices\");\n\nconst carrotContext = graph.createContext();\ncarrotContext.setVariable(\"vegetable\", \"carrot\");\ncarrotContext.setVariable(\"cutType\", \"sticks\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Homogeneous Coordinates for glTF 1.0 in JavaScript\nDESCRIPTION: JavaScript code to enable homogeneous coordinates for glTF 1.0 loader. This is useful when working with certain converters and exporters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.GLTFFileLoader.HomogeneousCoordinates = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Debug Menu for BabylonJS Fluid Renderer\nDESCRIPTION: Creates a debug menu with controls for enabling debug mode and selecting which debug feature to display. The features are populated from the FluidRenderingDebug enum in BabylonJS.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst menuDebug = targetRenderers.addFolder(\"Debug\");\nmenuDebug.$title.style.fontStyle = \"italic\";\n\nthis._targetRenderersGUIElements.push(this._addCheckbox(menuDebug, params, \"targets_debug\", \"Enable\"));\nthis._targetRenderersGUIElements.push(\n    this._addList(\n        menuDebug,\n        params,\n        \"targets_debugFeature\",\n        \"Feature\",\n        Object.keys(BABYLON.FluidRenderingDebug).filter((k) => isNaN(Number(k)))\n    )\n);\n\ntargetRenderers.open();\n```\n\n----------------------------------------\n\nTITLE: Setting Up VATs for Mesh Instances in Babylon.js\nDESCRIPTION: This code shows how to configure Vertex Animation Textures for mesh instances by registering an instanced buffer. This allows for efficient animation of multiple identical meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/baked_texture_animations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// create the instanced buffer\nmesh.registerInstancedBuffer(\"bakedVertexAnimationSettingsInstanced\", 4);\n// set it for the base mesh\nmesh.instancedBuffers.bakedVertexAnimationSettingsInstanced = new BABYLON.Vector4(0, 0, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Page Metadata YAML Example\nDESCRIPTION: Example of YAML metadata structure for a documentation page with title, description, keywords, and related content.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Node Material\nimage: /img/pageImages/nodeMaterial.jpg\ndescription: The Node Material is a simple, highly customizable material that you can build yourself piece by piece. Combined with the powerful node-based editor, you can easily create stunning custom GPU shaders and FX for your Babylon.js scenes.\nkeywords: shaders, glsl, node editor, graphics, GPU program, material, NME, Node Material, Node Material Editor\nfurther-reading:\n  - title: Dedicated NME Forum Examples\n    url: https://forum.babylonjs.com/t/node-materials-examples/6048\nvideo-content:\n  - title: Node-Based Procedural Textures\n    url: https://youtu.be/qqMuuSM7GvI\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments via .env File (Shell/.env)\nDESCRIPTION: This snippet shows how to define command-line arguments within a '.env' file located in the repository root. The argument names are converted to uppercase, and hyphens are replaced with underscores (e.g., '--packages core,gui' becomes 'PACKAGES=\"core,gui\"'). These variables are available during the build process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nPACKAGES=\"core,gui\"\n```\n\n----------------------------------------\n\nTITLE: Creating Blank Sprite Manager via Snippet Server using Babylon.js\nDESCRIPTION: Shows how to create an empty sprite manager instance using the snippet server infrastructure by calling `BABYLON.SpriteManager.ParseFromSnippetAsync` with `\"_BLANK\"` as the ID. This method requires a scene instance and returns a promise that resolves with a new, empty sprite manager, useful for programmatic configuration. This relies on the Babylon.js core library.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/particle_snippets.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SpriteManager.ParseFromSnippetAsync(\"_BLANK\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Frame Profile Points in Babylon.js\nDESCRIPTION: Defines profile points for a square frame with a rebated corner. The points must be in the XoY plane and form a consecutive sequence of corners.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Frame.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar profilePoints = [\n\tnew BABYLON.Vector3(-15, 15, 0),\n\tnew BABYLON.Vector3(-15, -15, 0),\n\tnew BABYLON.Vector3(15, -15, 0),\n\tnew BABYLON.Vector3(15, 10, 0),\n\tnew BABYLON.Vector3(10, 10, 0),\n\tnew BABYLON.Vector3(10, 15, 0)\n];\n```\n\n----------------------------------------\n\nTITLE: Creating GUIRadio Constructor\nDESCRIPTION: Constructor signature for creating a new radio button element in the GUI system. Takes parameters for ID, options object, GUI manager instance, optional callback function, and append flag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiRadio.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUIRadio(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Point Position Calculation\nDESCRIPTION: Calculates final point position along the ray between facet point and hit point\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/InnerMeshPoints.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar ray = new BABYLON.Ray(facetPoint, direction, diameter);\nvar pickInfo = ray.intersectsMesh(this);\n\tif (pickInfo.hit) {\n\t\tvar distance = pickInfo.pickedPoint.subtract(facetPoint).length();\n\t\tvar gap = BABYLON.Scalar.RandomRange(0, 1) * distance;\n\t\tvar point = facetPoint.add(direction.scale(gap));\n\t}\n\telse {\n\t\t\tpoint.set(0, 0, 0);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining the createTrack Function Signature in Babylon.js (JavaScript)\nDESCRIPTION: This snippet presents the function signature for `createTrack`. It indicates that the function accepts an array of `points` (presumably Vector3 defining the path) and an array of `sections` (likely `sectionData` objects defining lean/turn behavior for segments). Its purpose is to generate the final track data based on these inputs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track_Code.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar createTrack = function(points, sections) {\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Scene Optimizer Options in JavaScript\nDESCRIPTION: Shows how to create a complex set of optimizer options with multiple optimizations and priorities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/sceneOptimizer.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = new BABYLON.SceneOptimizerOptions(60, 2000);\n\nvar priority = 0;\nresult.optimizations.push(new BABYLON.ShadowsOptimization(priority));\nresult.optimizations.push(new BABYLON.LensFlaresOptimization(priority));\n\n// Next priority\npriority++;\nresult.optimizations.push(new BABYLON.PostProcessesOptimization(priority));\nresult.optimizations.push(new BABYLON.ParticlesOptimization(priority));\n\n// Next priority\npriority++;\nresult.optimizations.push(new BABYLON.TextureOptimization(priority, 256));\n\n// Next priority\npriority++;\nresult.optimizations.push(new BABYLON.RenderTargetsOptimization(priority));\n\n// Next priority\npriority++;\nresult.optimizations.push(new BABYLON.HardwareScalingOptimization(priority, 4));\n\nreturn result;\n```\n\n----------------------------------------\n\nTITLE: Importing All Babylon.js as Namespace - JavaScript\nDESCRIPTION: This ES6 import statement brings the entire Babylon.js library under the BABYLON namespace. Useful for backward compatibility or when many features are utilized, mimicking the Playground style. Place this at the top of any TypeScript or JavaScript file that needs global BABYLON access.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Components\nDESCRIPTION: Implementation of a light component specifically for light game objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class NewLightComponent extends BABYLON.LightComponent {\n\n            protected start() :void {\n                console.log(\"Starting light component for owner: \" + this.light.name);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Changing Timeline Visible Duration Zoom Level (javascript)\nDESCRIPTION: Shows how to programmatically adjust the level of zoom for the timeline with setVisibleDurationZoom. The parameter 'value' represents the percentage of zoom: 0 for the whole video span, and 100 for displaying one thumbnail per unit time. Modifies the density of thumbnails visible on the timeline canvas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    // value is the percentage of zoom desired 0 for the entire video 100 for one thumbnail per unit\n    timeline.setVisibleDurationZoom(value);\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Texture in BabylonJS\nDESCRIPTION: Assigns a texture to the particles using a flare image.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.particleTexture = new BABYLON.Texture(\"textures/flare.png\", scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Ground from Height Map in BabylonJS\nDESCRIPTION: Creates a terrain mesh using a height map image where white areas represent peaks and black areas represent valleys. The subdivisions parameter controls terrain detail, while minHeight and maxHeight define the vertical scale.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/hills.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst largeGround = BABYLON.MeshBuilder.CreateGroundFromHeightMap(\"largeGround\", \"https://assets.babylonjs.com/environments/villageheightmap.png\", \n    {width:150, height:150, subdivisions: 20, minHeight:0, maxHeight: 10});\n```\n\n----------------------------------------\n\nTITLE: Finalizing Scene Loading and State Switch in BabylonJS - JavaScript\nDESCRIPTION: Waits for the scene to be fully ready asynchronously, hides the loading UI, disposes the previous scene, sets the current scene variable, and updates the state machine to the START state. Relies on BabylonJS Engine, Scene, and state enum; uses 'whenReadyAsync' and 'dispose' methods. Takes no parameters, is often called at the end of a scene setup function; ensures the transition occurs atomically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//...do gui related stuff\n\n//--SCENE FINISHED LOADING--\nawait scene.whenReadyAsync();\nthis._engine.hideLoadingUI();\n//lastly set the current state to the start state and set the scene to the start scene\nthis._scene.dispose();\nthis._scene = scene;\nthis._state = State.START;\n```\n\n----------------------------------------\n\nTITLE: Calculating Path Normals in Babylon.js\nDESCRIPTION: This snippet shows how to calculate the normals along a path using Path3D. These normals are crucial for orienting the car correctly as it follows the path.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar path3d = new BABYLON.Path3D(points);\nvar normals = path3d.getNormals();\n```\n\n----------------------------------------\n\nTITLE: Applying ShaderBuilder Material and Uniforms in JavaScript\nDESCRIPTION: This JavaScript snippet assigns the material created by `ShaderBuilder` to the `boxes` mesh. It then explicitly sets the value for the custom `box_spacing` uniform defined in the ShaderBuilder setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nboxes.material = shaderMaterial;\nboxes.material.setFloat(\"box_spacing\", box_spacing)\n```\n\n----------------------------------------\n\nTITLE: Setting GUILabel visibility in Babylon.js\nDESCRIPTION: Method to set a GUILabel element to visible or invisible, with an optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiLabel.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Using GlowLayer Block in Babylon.js Node Render Graph\nDESCRIPTION: This snippet demonstrates the use of the GlowLayer block in a Node Render Material. It showcases rendering two glow layers in two different textures with different parameters, which is not possible without a frame graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBlocks/frameGraphBlocksDescription.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// NRGE code snippet is not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Implementing Mesh Components\nDESCRIPTION: Basic implementation of a mesh component for non-light and non-camera game objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class NewMeshComponent extends BABYLON.MeshComponent {\n\n            protected start() :void {\n                console.log(\"Starting mesh component for owner: \" + this.mesh.name);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Async Scene with Node Material and Particle System - Babylon.js JavaScript\nDESCRIPTION: This snippet shows a full async scene setup combining scene initialization, particle system loading from a snippet, node material loading, and material assignment to the system. Designed to run in Babylon.js contexts with async/await support, it demonstrates modular and updatable workflow using Snippet Server for both particles and shaders. The function outputs a ready-for-rendering scene. All dependencies (BABYLON modules, engine, canvas, snippet IDs) must be pre-provided.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/particles_and_nme.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst createScene = async function () {\n  const scene = new BABYLON.Scene(engine);\n\n  const camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, 10, BABYLON.Vector3.Zero(), scene);\n  camera.attachControl(canvas, true);\n\n  // Create a random emitter\n  const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 0.01, segments: 4 }, scene);\n\n  // Load the previously setup particle system (it was setup with the inspector)\n  let system = await BABYLON.ParticleHelper.CreateFromSnippetAsync(\"T54JV7#13\", scene, false);\n  system.emitter = sphere;\n\n  // Load our node material\n  let nodeMaterial = await BABYLON.NodeMaterial.ParseFromSnippetAsync(\"#345ATT#4\", scene);\n\n  // Apply it to the particle system\n  nodeMaterial.createEffectForParticles(system);\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Mesh Component Implementation in TypeScript\nDESCRIPTION: Full example of a mesh component class using the @visibleInInspector decorator to create a configurable rotation speed property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/exposingProperties.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\n\nimport { visibleInInspector } from \"../decorators\";\n\nexport default class MyMeshComponent extends Mesh {\n    @visibleInInspector(\"number\", \"Speed\", 0.04, { min: 0, max: 1, step: 0.01 })\n    private _speed: number = 1;\n\n    /**\n     * Called each frame.\n     */\n    public onUpdate(): void {\n        this.rotation.y += 0.04 * this._speed;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GUISlider Disposal Method\nDESCRIPTION: Method to dispose of the GUI slider element and remove it from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSlider.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Canvas Dimensions in JavaScript\nDESCRIPTION: Gets the width and height of the canvas managed by the GUIManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngetCanvasWidth(string)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Value Method in GUIColor\nDESCRIPTION: Method to get the current color value either in RGB or hexadecimal format. Takes a boolean parameter to determine the return format.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiColor.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetColor(bool: rgb) → void\n```\n\n----------------------------------------\n\nTITLE: Animating Dialogue Background with Timed Loop in Babylon.js with JavaScript\nDESCRIPTION: This code snippet creates a looping animation for the dialogue background using setInterval in JavaScript. The dialogueBg sprite's cellId is incremented every 250ms while finished_anim is true and the frame is less than 3; otherwise, it resets to the first frame. Requires finished_anim and dialogueBg objects, illustrating a simple looping animation within Babylon.js's sprite system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet dialogueTimer = setInterval(() => {\n    if (finished_anim && dialogueBg.cellId < 3) {\n        dialogueBg.cellId++;\n    } else {\n        dialogueBg.cellId = 0;\n    }\n}, 250);\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Loop Iterations in WhileLoopBlock\nDESCRIPTION: Sets the maximum number of iterations allowed in a while loop for performance safety. The default is 1000, but can be increased with consideration for performance impact.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nFlowGraphWhileLoopBlock.MaxLoopCount = 10000;\n```\n\n----------------------------------------\n\nTITLE: Creating a GUITextfield in JavaScript\nDESCRIPTION: Constructor for creating a new GUITextfield. It takes an id, options object, GUI manager, and an optional append flag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextfield.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUITextfield(id, options, guimanager, append)\n```\n\n----------------------------------------\n\nTITLE: Loading a 3D Watch Model in Babylon.js\nDESCRIPTION: Downloads the 3D watch model from an asset host using Babylon.js SceneLoader. This is the first step in rendering the watch model for the e-commerce configurator.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate async _downloadAssets() {\n    const watchAssetUrl = \"https://syntheticmagus.github.io/vaporwear-assets/watch.glb\";\n    const watchLoadResult = await SceneLoader.ImportMeshAsync(\n        undefined,\n        watchAssetUrl,\n        undefined,\n        this._scene\n    );\n    this._watchContainer = watchLoadResult.meshes[0];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Available Feature Versions\nDESCRIPTION: Retrieves available versions for a specific WebXR feature using GetAvailableVersions method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst availableVersions = featuresManager.GetAvailableVersions(WebXRFeatureName.POINTER_SELECTION);\n```\n\n----------------------------------------\n\nTITLE: Generating Inner Facet Triangles\nDESCRIPTION: Creates triangular facets for the inner portion of the geodesic mesh, handling vertex connections and index mapping.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPrimary.prototype.InnerFacets = function() {\n    const m = this.m;\n    const n = this.n;\n    for (let y = 0; y < n + m + 1; y++) {\n        for (x = this.min[y]; x < this.max[y] + 1; x++) {\n            if (x < this.max[y] && x < this.max[y + 1] + 1) {\n                this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + x + \"|\" + (y + 1), \"|\" + (x + 1) + \"|\" + y]);\n            }\n            if ( y > 0 && x < this.max[y - 1] && x + 1 < this.max[y] + 1) {\n                this.innerFacets.push([\"|\" + x + \"|\" + y, \"|\" + (x + 1) + \"|\" + y, \"|\" + (x + 1) + \"|\" + (y - 1)]);\n            }\n        }    \n    }\n}\n\nPrimary.prototype.InnerToGDmnData = function(face) {\n    for (i = 0; i < this.innerFacets.length; i++) {\n        GDmnDATA.face.push(this.innerFacets[i].map((el) => this.vecToIdx[face + el]));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new GUITexture in BabylonJS\nDESCRIPTION: Constructor for creating a new GUITexture with an image. Takes parameters including id, image URL, options for positioning and sizing, GUI manager reference, optional callback function, and append option.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextures.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew GUITexture(id, imageUrl, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Game Initialization Snippets in BabylonJS\nDESCRIPTION: Code snippets showing how to initialize PlayerInput and Player objects in the game setup phase.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis._input = new PlayerInput(scene);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis._player = new Player(this.assets, scene, shadowGenerator, this._input);\n```\n\n----------------------------------------\n\nTITLE: Counter-Clockwise Vector Rotation Transformation\nDESCRIPTION: Formula for R⁺, a counter-clockwise 60° rotation of position vector xi⃗ + yj⃗ about the origin on an isometric grid. This transforms the vector using the k⃗ unit vector which equals -i⃗ + j⃗.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nR⁺(xi⃗ + yj⃗) = yk⃗ + xj⃗ = y(-i⃗ + j⃗) + xj⃗ = -yi⃗ + (x + y)j⃗\n```\n\n----------------------------------------\n\nTITLE: Creating Roller Coaster Rails and Sleepers in Babylon.js (JavaScript)\nDESCRIPTION: Generates geometry for a roller coaster track. It calculates paths for two rails (`plusPoints`, `negPoints`) offset from the main track points using the binormal vector. It then creates tube meshes (`plusTube`, `negTube`) along these paths using `BABYLON.MeshBuilder.CreateTube`. Simultaneously, it creates instances of a `sleeper` mesh, positioning and rotating each instance according to the track point and carriage rotation data, adjusted slightly by the normal vector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < points.length; i += 5) {\n  BABYLON.Vector3.TransformNormalToRef(BABYLON.Axis.Y, track.carriageRotations[i], normal);\n  BABYLON.Vector3.TransformNormalToRef(BABYLON.Axis.Z, track.carriageRotations[i], binormal);\n  plusPoints.push(points[i].add(binormal.scale(offset)).add(normal.scale(height)));\n  negPoints.push(points[i].subtract(binormal.scale(offset)).add(normal.scale(height)));\n\n  var nsleeper = sleeper.createInstance(\"\");\n\n  nsleeper.position.x = points[i].x;\n  nsleeper.position.y = points[i].y;\n  nsleeper.position.z = points[i].z;\n\n  nsleeper.rotationQuaternion = BABYLON.Quaternion.FromRotationMatrix(track.carriageRotations[i]);\n  nsleeper.position.subtractInPlace(normal.scale(0.5));\n}\n\nplusPoints.push(plusPoints[0]);\nnegPoints.push(negPoints[0]);\n\nvar plusTube = BABYLON.MeshBuilder.CreateTube(\"tube\", { path: plusPoints, radius: 0.1, tessellation: 4 }, scene);\nvar negTube = BABYLON.MeshBuilder.CreateTube(\"tube\", { path: negPoints, radius: 0.1, tessellation: 4 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling Shadow Reception for Meshes (JavaScript)\nDESCRIPTION: This line enables a mesh ('ground') to receive shadows by setting its 'receiveShadows' property to true. Any mesh with 'receiveShadows' enabled will display shadow effects cast by other configured meshes in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nground.receiveShadows = true;\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Model Loading from GitHub Pages with 3D Commerce Sandbox - URL Example - text\nDESCRIPTION: This code snippet is a URL demonstrating how to load a 3D model hosted on GitHub Pages into the Babylon.js 3D Commerce Sandbox by setting the assetUrl parameter to the hosted GLB model. It confirms the model's web accessibility post-deployment. Update the assetUrl parameter with your own domain and model file path as appropriate.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearViewer.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://3dcommerce.babylonjs.com/?assetUrl=https://syntheticmagus.github.io/vaporwear-original-asset-host/watch_original.glb\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic HTML Structure for Babylon.js Viewer\nDESCRIPTION: HTML setup for creating a custom Babylon.js viewer configuration with specified dimensions and no default configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Recreating the default configuration for Babylon.js viewer</title>\n    <style>\n      /* Force the viewer to have a specific size. This can be changed, of course. */\n      babylon {\n        width: 800px;\n        height: 500px;\n      }\n    </style>\n  </head>\n  <body>\n    <babylon extends=\"none\"> </babylon>\n\n    <script src=\"https://preview.babylonjs.com/viewer/babylon.viewer.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading Embedded GLTF Assets\nDESCRIPTION: Example of embedding GLTF model data directly in the code and loading it as a Blob.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/externalPGAssets.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar mymodel = {\n    [...]\n};\n\nvar json = JSON.stringify(mymodel);\nvar blob = new Blob([json]);\nvar url = URL.createObjectURL(blob);\n\nBABYLON.AppendSceneAsync(url, scene, {\n    pluginExtension: \".gltf\"\n}).then(function() {\n    scene.createDefaultCameraOrLight(true, true, true),\n    scene.createDefaultEnvironment();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multisample Render Target in Babylon.js\nDESCRIPTION: Example of enabling multisampling for render targets by setting renderTarget.samples > 1. This only works in WebGL2 context and provides better antialiasing at the cost of slower rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrenderTarget.samples = 8; // Enable 8x multisampling\n```\n\n----------------------------------------\n\nTITLE: Creating a Final Compose Shader PostProcess in Babylon.js\nDESCRIPTION: This code creates a PostProcess for the final pass that composes the base render with a caustic texture. It demonstrates how to set up the shader and pass the render target as a texture.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/renderTargetTextureMultiPass.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar finalPass = new BABYLON.PostProcess(\n    'Final compose shader', \n    'final', // shader name\n    null, // attributes\n    [ 'causticTexture' ], // textures\n    1.0,  // options\n    camera,\n    BABYLON.Texture.BILINEAR_SAMPLINGMODE, // sampling\n    engine // engine\n);\nfinalPass.onApply = (effect) => {\n    effect.setTexture('causticTexture', renderTarget); // pass the renderTarget as our second texture\n};\n```\n\n----------------------------------------\n\nTITLE: Getting a Variable from Execution Context (JavaScript)\nDESCRIPTION: Illustrates retrieving a previously set variable value from a FlowGraph execution context. The variable 'myVar' is accessed using 'getVariable'. Returns the value that was set with 'setVariable', if present.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBasicConcepts.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myVar = context.getVariable(\"myVar\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack SplitChunks for Babylon.js Module Grouping (JavaScript)\nDESCRIPTION: This JavaScript snippet details a Webpack `optimization.splitChunks` configuration using `cacheGroups`. It defines rules to group modules matching specific paths (like `/ShadersWGSL/`, `/Shaders/`, `/WebGPU/`, `/node_modules/@babylonjs/`) into distinct, named chunks (`webgpu-shaders`, `webgl-shaders`, `webgpu-extensions`, `babylonBundle`) for better control over the build output. The `priority` and `enforce` options help manage chunk creation logic.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n{\n// ... webpack configuration\n    optimization: {\n        splitChunks: {\n            cacheGroups: {\n                webgpuShaders: {\n                    name: \"webgpu-shaders\",\n                    chunks: \"all\",\n                    priority: 50,\n                    enforce: true,\n                    test: (module) => /\\/ShadersWGSL\\//.test(module.resource),\n                },\n                webglShaders: {\n                    name: \"webgl-shaders\",\n                    chunks: \"all\",\n                    priority: 50,\n                    enforce: true,\n                    test: (module) => /\\/Shaders\\//.test(module.resource),\n                },\n                webgpuExtensions: {\n                    name: \"webgpu-extensions\",\n                    chunks: \"all\",\n                    priority: 50,\n                    enforce: true,\n                    test: (module) => /\\/WebGPU\\//.test(module.resource),\n                },\n                babylonBundle: {\n                    name: \"babylonBundle\",\n                    chunks: \"all\",\n                    priority: 30,\n                    reuseExistingChunk: true,\n                    test: (module) => /\\/node_modules\\/@babylonjs\\//.test(module.resource),\n                },\n            },\n        },\n        usedExports: true,\n        minimize: true,\n    },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing _onEnded Callback Method with Comments\nDESCRIPTION: Implementation of the _onEnded callback method with comments, demonstrating how to properly handle timer completion. This method is responsible for cleaning up resources and signaling the next steps in the flow graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _onEnded(timer: AdvancedTimer, context: FlowGraphContext) {\n    // get the timers from the context\n    const timers = context._getExecutionVariable(this, \"pendingDelays\", [] as AdvancedTimer[]);\n    // get the index of the timer that ended\n    const index = timers.indexOf(timer);\n    // remove it from the list\n    if (index !== -1) {\n        timers.splice(index, 1);\n    } else {\n        Logger.Warn(\"FlowGraphTimerBlock: Timer ended but was not found in the running timers list\");\n    }\n    // remove the block from the pending blocks\n    context._removePendingBlock(this);\n    // trigger done signal\n    this.done._activateSignal(context);\n}\n```\n\n----------------------------------------\n\nTITLE: GUIMeter Visibility Control Method\nDESCRIPTION: Method to control the visibility of the GUI meter element with optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiMeter.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Using Promise-Based Observables in Babylon.js Viewer\nDESCRIPTION: Demonstrates using promise-based observables to delay execution using a custom DelayPromise function, showing how to control the viewer's execution flow.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/advancedViewerUsage.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// taken from here - https://blog.raananweber.com/2015/12/01/writing-a-promise-delayer/\nfunction DelayPromise(delay) {\n  //return a function that accepts a single variable\n  return function (data) {\n    //this function returns a promise.\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        //a promise that is resolved after \"delay\" milliseconds with the data provided\n        console.log(\"done!\");\n        resolve(data);\n      }, delay);\n    });\n  };\n}\n\n// force a 500 ms delay after the scene was created.\nviewer.onSceneInitObservable.add(DelayPromise(500));\n```\n\n----------------------------------------\n\nTITLE: Implementing While Loops in Babylon.js Flow Graph\nDESCRIPTION: Creates a while loop block that repeatedly executes a flow as long as a condition is true. The block evaluates the condition and executes either the loop flow or completion flow accordingly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst whileLoop = new FlowGraphWhileLoopBlock();\nwhileLoop.condition.connectTo(conditionBlock.value);\nwhileLoop.executionFlow.connectTo(nextBlock.in);\nwhileLoop.completed.connectTo(nextBlock2.in);\n```\n\n----------------------------------------\n\nTITLE: Interior Wall Construction Example\nDESCRIPTION: Example of building interior walls that don't form an enclosing shell, with support for doors and windows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar wall = buildFromPlan(walls, ply, height, {interior:true}, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 3D Controls in BabylonJS\nDESCRIPTION: Interface definition for creating custom 3D controls by extending the Control3D class. Requires implementing _createNode() for transform node/mesh creation and _affectMaterial() for material handling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomControl extends Control3D {\n    _createNode() {\n        // Create transform node or mesh to represent the control\n    }\n    \n    _affectMaterial() {\n        // Prepare and affect material if mesh is used\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Rotation Quaternion in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to reset the rotationQuaternion of an imported mesh to null before applying a new rotation. This is necessary because imported meshes may have a pre-set rotationQuaternion that can interfere with new rotation settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimportedMesh.rotationQuaternion = null;\n```\n\n----------------------------------------\n\nTITLE: Instantiating ImageFilter with a Canvas Element in JavaScript\nDESCRIPTION: Creates a new instance of the ImageFilter control, associating it with a specific HTML canvas element (`filterCanvas`) where the filtered output will be rendered.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst imageFilter = new ImageFilter(filterCanvas);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Multiply Block for Node Material Editor - JSON\nDESCRIPTION: This snippet defines a \"CustomMultiply\" block for the Node Material Editor using JSON syntax. It declares input parameters (left, right), ensures their types match via 'inLinkedConnectionTypes', and outputs their product. The code features a main GLSL function and a helper, with parameterized types (using {TYPE_...}) resolved at runtime, enabling support for vectors, floats, and other types. No external dependencies are required beyond the Babylon.js Node Material infrastructure. The described block multiplies matching-typed values and returns the result as output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nme/customBlocks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"CustomMultiply\",\n    \"comments\": \"Multiplies the left and right inputs of the same type together\",\n    \"target\": \"Neutral\",\n    \"inParameters\": [\n        {\n            \"name\": \"left\",\n            \"type\": \"AutoDetect\"\n        },\n        {\n            \"name\": \"right\",\n            \"type\": \"AutoDetect\"\n        }\n    ],\n    \"outParameters\": [\n        {\n            \"name\": \"output\",\n            \"type\": \"BasedOnInput\",\n            \"typeFromInput\": \"left\"\n        }\n    ],\n    \"inLinkedConnectionTypes\" : [\n        {\n            \"input1\": \"left\",\n            \"input2\": \"right\",\n            \"looseCoupling\": false\n        }\n    ],\n    \"functionName\": \"multiply_{TYPE_left}\",\n    \"code\": [\n        \"{TYPE_output} myHelper_{TYPE_left}({TYPE_left} l, {TYPE_right} r) { return l * r; }\",\n        \"void multiply_{TYPE_left}({TYPE_left} l, {TYPE_right} r, out {TYPE_output} result) {\",\n        \"   result = myHelper_{TYPE_left}(l, r);\",\n        \"}\"\n    ]    \n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Refraction in PBR Material\nDESCRIPTION: Shows how to enable and configure basic refraction in a PBR material by setting the refractionEnabled flag and intensity.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pbr = new BABYLON.PBRMaterial(\"pbr\", scene);\nsphere.material = pbr;\n\npbr.metallic = 0;\npbr.roughness = 0;\n\npbr.subSurface.isRefractionEnabled = true;\npbr.subSurface.refractionIntensity = 0.8;\n```\n\n----------------------------------------\n\nTITLE: Enabling SSR Debug Mode - JavaScript\nDESCRIPTION: Enables the debug visualization mode for Screen Space Reflections, which shows different colors representing ray intersection states.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nssr.debug = true;\n```\n\n----------------------------------------\n\nTITLE: Viewport Constructor Definition in Babylon.js\nDESCRIPTION: Shows the constructor signature for creating a viewport, where parameters represent normalized coordinates (0-1) for position and dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/multiViewsPart2.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Viewport = function (x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Launching the Visualization Test UI via NPM\nDESCRIPTION: Shows the npm command (`npm run test:visualization:ui`) used to start the Playwright UI, allowing developers to run and inspect visualization tests interactively for all configured engines (WebGL1, WebGL2, WebGPU).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:visualization:ui\n```\n\n----------------------------------------\n\nTITLE: Using the callingSignal Parameter in _execute (TypeScript)\nDESCRIPTION: Provides an example snippet showing how the optional `callingSignal` parameter in the `_execute` method can be used. This allows the block to identify which input signal triggered its execution, enabling different logic paths if the block has multiple input signals (e.g., a main input and a reset signal).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\npublic _execute(context: FlowGraphContext, callingSignal?: FlowGraphSignalConnection): void {\n    if (callingSignal === this.in) {\n        // do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Image Link Example\nDESCRIPTION: Shows how to properly format image links in markdown for the Babylon.js documentation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![quick description (for accessibility)](/img/divingDeeper/my_very_great_page/my-wonderful-image.jpg)\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Babylon.js Template Repository\nDESCRIPTION: This command installs all the Node Package Manager (NPM) dependencies defined in the `package.json` files within the cloned Babylon.js NPM Package Template repository. It needs to be run from the root directory of the repository in an NPM-enabled terminal after cloning.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Templates for Babylon.js Viewer\nDESCRIPTION: This snippet shows the complete configuration of templates for the Babylon.js Viewer, including the main template, fill-container, loading-screen, viewer, and nav-bar. It demonstrates how to set parameters and enable events for the navigation bar.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"none\">\n\n    <templates>\n        <main location=\"#main-template\">\n            <params no-escape=\"true\" babylon-font=\"https://viewer.babylonjs.com/babylon.woff\"></params>\n        </main>\n        <fill-container location=\"#fill-container-template\">\n            <params disable=\"false\"></params>\n        </fill-container>\n        <loading-screen location=\"#loading-screen-template\">\n            <params background-color=\"#000000\" loading-image=\"https://blogs.windows.com/uploads/mswbprod/sites/3/2018/05/b58474ab97a2708346422fe7ce30c15e.png\"></params>\n        </loading-screen>\n        <viewer location=\"#viewer-template\">\n            <params enable-drag-and-drop=\"false\"></params>\n        </viewer>\n        <nav-bar location=\"#nav-bar-template\">\n            <!-- Configuring the navbar's parameters - hide certain buttons, set the main button's text, link and image -->\n            <params logo-image=\"https://blogs.windows.com/uploads/mswbprod/sites/3/2018/05/b58474ab97a2708346422fe7ce30c15e.png\" logo-text=\"BabylonJS\"\n                logo-link=\"https://babylonjs.com\" hide-help=\"true\" hide-hd=\"true\" hide-vr=\"true\" disable-on-fullscreen=\"false\">\n                <!-- define the list of speeds to be shown when a model has animations -->\n                <speed-list \"0.5x\"=\"0.5\" \"1.0x\"=\"1.0\" \"2.0x\"=\"2.0\"></speed-list>\n                <!-- I18n -->\n                <text hd-button=\"Toggle HD\" fullscreen-button=\"Fullscreen\"></text>\n            </params>\n            <!-- enable events - pointerdown, pointerup and input events will have callbacks if triggered on the navbar element -->\n            <events pointerdown=\"true\" pointerup=\"true\" input=\"true\"></events>\n        </nav-bar>\n    </templates>\n\n    <!-- Ground that receives shadows -->\n    <ground receive-shadows=\"true\"></ground>\n    <!-- Default skybox -->\n    <skybox></skybox>\n\n    <!-- enable antialiasing -->\n    <engine antialiasing=\"true\"></engine>\n    <!-- camera configuration -->\n    <camera>\n        <!-- add camera behaviors -->\n        <behaviors>\n            <!-- enable default auto-rotate behavior -->\n            <auto-rotate type=\"0\"></auto-rotate>\n            <!-- enable and configure the framing behavior -->\n            <framing type=\"2\" zoom-on-bounding-info=\"true\" zoom-stops-animation=\"false\"></framing>\n            <!-- enable default bouncing behavior -->\n            <bouncing type=\"1\"></bouncing>\n        </behaviors>\n        <!-- The 3D model to be viewed -->\n        <model url=\"https://models.babylonjs.com/shark.glb\"></model>\n    </camera>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Terrain with Automatic UV Map in JavaScript\nDESCRIPTION: This snippet shows how to create a Dynamic Terrain with an automatically generated UV map using the createUVMap() method. It simplifies the process by eliminating the need for manual UV computation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n  mapData: mapData, // data map declaration: what data to use?\n  mapSubX: mapSubX, // how are these data stored by rows and columns\n  mapSubZ: mapSubZ,\n  terrainSub: terrainSub, // how many terrain subdivisions wanted\n  // no more for mapUVs, it will be done by createUVMap()\n};\nconst terrain = new BABYLON.DynamicTerrain(\"t\", params, scene);\nterrain.createUVMap();\n// computes and sets an UV map stretching the texture on the whole image\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon Namespace Tool in Maya MEL\nDESCRIPTION: MEL command to initialize the Babylon Namespace Tool, which removes unwanted namespace text from selected objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/11_BabylonArtTools.md#2025-04-23_snippet_1\n\nLANGUAGE: mel\nCODE:\n```\nbabylonNameTool();\n```\n\n----------------------------------------\n\nTITLE: Defining Background Remover Options - TypeScript\nDESCRIPTION: Defines the IWebXRBackgroundRemoverOptions interface to control background removal behavior in AR. Includes mesh lists to remove and environment helper flags for skybox and ground. Used as a configuration object when enabling the feature.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IWebXRBackgroundRemoverOptions {\\n  /**\\n   * Further background meshes to disable when entering AR\\n   */\\n  backgroundMeshes?: AbstractMesh[];\\n  /**\\n   * flags to configure the removal of the environment helper.\\n   * If not set, the entire background will be removed. If set, flags should be set as well.\\n   */\\n  environmentHelperRemovalFlags?: {\\n    /**\\n     * Should the skybox be removed (default false)\\n     */\\n    skyBox?: boolean;\\n    /**\\n     * Should the ground be removed (default false)\\n     */\\n    ground?: boolean;\\n  };\\n  /**\\n   * don't disable the environment helper\\n   */\\n  ignoreEnvironmentHelper?: boolean;\\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Random Particle Collisions in JavaScript\nDESCRIPTION: This playground simulates multiple random particle collisions. Particles are fired with random velocities toward each other to demonstrate the collision physics in a more dynamic environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Free_Collide.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#A4HZTV#2\" title=\"Random Collisions\" description=\"Particles are fired randomly towards each other to see the effect when they collide.\"/>\n```\n\n----------------------------------------\n\nTITLE: Oimo Car Demo Reference\nDESCRIPTION: A reference to an Oimo physics car demo in the BabylonJS Playground, demonstrating physics-based vehicle mechanics.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* Oimo car demo - <Playground id=\"#SFELK#3\" title=\"Oimo Car Demo\" description=\"Oimo Car Demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Main Function for CloudBis Procedural Texture in GLSL\nDESCRIPTION: The main shader function for the CloudBis procedural texture. It uses fractional Brownian motion (fbm) to create a cloud-like pattern by mixing sky and cloud colors based on the noise values generated from UV coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/proceduralTextureForTexLibrary.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid main() {\n\tvec2 p = vUV * 12.0;\n\tvec4 c = mix(skyColor, cloudColor, fbm(p));\n\tgl_FragColor = c;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Input\nDESCRIPTION: Example of handling local multiplayer user input using getUserInput method for vertical and horizontal axes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/02_SceneManager.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class TestMeshComponent extends BABYLON.MeshComponent {\n\n            protected update() :void {\n                const vertical:number = this.manager.getUserInput(BABYLON.UserInputAxis.Vertical, BABYLON.PlayerNumber.One);\n                const horizontal:number = this.manager.getUserInput(BABYLON.UserInputAxis.Horizontal, BABYLON.PlayerNumber.One);\n                console.log(\"Echo Input: \" + vertical.toString() + \" x \" + horizontal.toString());\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Rendering Groups for Skybox in Babylon.js\nDESCRIPTION: Configures rendering order to ensure skybox appears behind other scene objects using renderingGroupId.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/skybox.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nskybox.renderingGroupId = 0;\n\n// Some other mesh\nmyMesh.renderingGroupId = 1;\n```\n\n----------------------------------------\n\nTITLE: Applying UV Coordinates to Wheel Faces in JavaScript\nDESCRIPTION: Sets UV coordinates for all faces of the wheel cylinders, using the full wheel texture for top and bottom faces, and a single pixel for the edge.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/carmat.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwheelUV[0] = new BABYLON.Vector4(0, 0, 1, 1);\nwheelUV[1] = new BABYLON.Vector4(0, 0.5, 0, 0.5);\nwheelUV[2] = new BABYLON.Vector4(0, 0, 1, 1);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Disposing FluidRendererGUI in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the FluidRendererGUI class. It creates a new instance, passing the Babylon.js scene object as a dependency. The ellipsis indicates where other application logic would reside. Finally, it shows the necessary call to the dispose() method for proper cleanup when the GUI is no longer needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst gui = new FluidRendererGUI(scene);\n...\ngui.dispose();\n```\n\n----------------------------------------\n\nTITLE: Creating Extruded Lamp Mesh\nDESCRIPTION: Generates the final lamp mesh by extruding the defined shape along the path with scaling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/lights.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst lamp = BABYLON.MeshBuilder.ExtrudeShape(\"lamp\", {cap: BABYLON.Mesh.CAP_END, shape: lampShape, path: lampPath, scale: 0.5});\n```\n\n----------------------------------------\n\nTITLE: Frame Render Observable Setup in Babylon.js\nDESCRIPTION: Shows how to set up code execution before each frame render using the scene's onBeforeRenderObservable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onBeforeRenderObservable.add(() => {\n    //code to execute\n});\n```\n\n----------------------------------------\n\nTITLE: Server-side Position Update Handler in TypeScript\nDESCRIPTION: Server-side implementation for handling position update messages and updating player state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nonCreate(options: any) {\n  this.setState(new MyRoomState());\n\n  this.onMessage(\"updatePosition\", (client, data) => {\n    const player = this.state.players.get(client.sessionId);\n    player.x = data.x;\n    player.y = data.y;\n    player.z = data.z;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Server Log: Client Joined Room (Shell)\nDESCRIPTION: This is an example log message displayed on the Colyseus server console when a client successfully connects and joins a room. `19U8WkmoK` represents the unique `sessionId` assigned to the connecting client. This confirms the client-server handshake was successful for that specific client.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n19U8WkmoK joined!\n```\n\n----------------------------------------\n\nTITLE: Registering a Material Plugin in Babylon.js\nDESCRIPTION: Shows how to register a material plugin with a factory function that also associates the plugin instance with the material for easier access later.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/materialPlugins.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.RegisterMaterialPlugin(\"BlackAndWhite\", (material) => {\n  material.blackandwhite = new BlackAndWhitePluginMaterial(material);\n  return material.blackandwhite;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Track from Sections in JavaScript using Babylon.js\nDESCRIPTION: This function creates a track from given points and sections. It performs checks on section order, handles looped tracks, and prepares data arrays for directions, rotations, and passenger/carriage rotations. The function returns an object with these calculated data arrays.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track_Code.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar createTrack = function (points, sections) {\n  //Data arrays\n  var directions = [];\n  var rotations = [];\n  var carriageRotations = [];\n  var passengerRotations = [];\n\n  var nbSections = sections.length;\n\n  var looped = sections[nbSections - 1].start === 0;\n  for (let i = 1; i < nbSections - looped; i++) {\n    if (sections[i - 1].start > sections[i].start) {\n      console.log(\"sections not in order\");\n      return;\n    }\n  }\n  if (0 < sections[nbSections - 1].start && sections[nbSections - 2].start > sections[nbSections - 1].start) {\n    console.log(\"last section not in order\");\n    return;\n  }\n  var section = sections[0];\n  if (section.start > 0) {\n    startSection = new sectionData(0, {});\n    sections.unshift(startSection);\n    nbSections = sections.length;\n  }\n\n  if (0 < sections[nbSections - 1].start && sections[nbSections - 1].start < points.length - 1) {\n    //assume need to close loop\n    var endSection = new sectionData(0, sections[0].options);\n    sections.push(endSection);\n  }\n\n  //Store track data per section\n  for (let i = 0; i < sections.length - 1; i++) {\n    createSection(points, sections[i], sections[i + 1]);\n  }\n\n  return { directions: directions, rotations: rotations, carriageRotations: carriageRotations, passengerRotations: passengerRotations };\n\n  /****** createSection function goes here *******/\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Section Data Objects (Babylon.js, JavaScript)\nDESCRIPTION: Shows how to instantiate sectionData objects that control rotational parameters in each section of the track. Each section requires a starting index and an options object that sets lean, turn, twist, and wave properties. These sectionData instances are collected in order for use with 'createTrack'. All parameters are optional in options, and indices must be non-decreasing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar section0 = new sectionData(0, options0);\nvar section1 = new sectionData(100, {});\nvar section2 = new sectionData(120, options2);\nvar section3 = new sectionData(220, { lean: 0, leanTwists: 0, leanWaves: 0, leanWaveAngle: 0 });\nvar section4 = new sectionData(240, { turn: 0, turnTwists: 0, turnWaves: 0, turnWaveAngle: 0 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Panning Control for ArcRotateCamera in Babylon.js (JavaScript)\nDESCRIPTION: This code attaches controls to an `ArcRotateCamera`, specifically configuring the panning behavior. It uses the `attachControl` method with three arguments: the canvas, a boolean `noPreventDefault` (determining if default canvas actions are prevented), and `useCtrlForPanning`. Setting `useCtrlForPanning` to `false` switches the panning trigger from Ctrl + Left Mouse Button to the Right Mouse Button.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.attachControl(canvas, noPreventDefault, useCtrlForPanning);\n```\n\n----------------------------------------\n\nTITLE: Animated Dynamic Terrain with Time-Based Animation in JavaScript\nDESCRIPTION: Shows how to create an animated terrain that updates every frame using a custom vertex function. This example creates a moving wave pattern based on time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst t = 0.0;\nterrain.useCustomVertexFunction = true;\nterrain.refreshEveryFrame = true;\nterrain.computeNormals = true;\n\n// user custom function: now the elevation depends on t too.\nterrain.updateVertex = function (vertex, i, j) {\n  vertex.position.y = 2.0 * Math.sin((vertex.position.x + t) / 5.0) * Math.cos((vertex.position.z + t) / 5.0);\n};\n// scene animation\nscene.registerBeforeRender(function () {\n  t += 0.01;\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Babylon Scene with HTML and JavaScript\nDESCRIPTION: Complete HTML setup for loading a .babylon scene file using Babylon.js. Includes necessary script imports, canvas setup, scene loading, and camera configuration. Handles window resizing and continuous rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Blender.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Default .babylon loading scene</title>\n    <meta charset=\"UTF-8\" />\n    <!-- this link to the preview online version of BJS -->\n    <script src=\"https://preview.babylonjs.com/babylon.js\"></script>\n    <!-- this is needed for BJS to load scene files -->\n    <script src=\"https://preview.babylonjs.com/loaders/babylonjs.loaders.js\"></script>\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n        color: white;\n      }\n\n      #canvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n    </style>\n  </head>\n\n  <body>\n    <canvas id=\"canvas\"></canvas>\n    <script type=\"text/javascript\">\n      const canvas = document.getElementById(\"canvas\");\n      const engine = new BABYLON.Engine(canvas, true);\n\n      // here the doc for Load function: //doc.babylonjs.com/typedoc/classes/babylon.sceneloader#load\n      BABYLON.LoadSceneAsync(\"babylonJS_logo_v3.babylon\", engine).then(function (scene) {\n        //as this .babylon example hasn't camera in it, we have to create one\n        const camera = new BABYLON.ArcRotateCamera(\"Camera\", 1, 1, 4, BABYLON.Vector3.Zero(), scene);\n        camera.attachControl(canvas, false);\n\n        scene.clearColor = new BABYLON.Color3(1, 1, 1);\n        scene.ambientColor = new BABYLON.Color3.White();\n\n        engine.runRenderLoop(function () {\n          scene.render();\n        });\n\n        window.addEventListener(\"resize\", function () {\n          engine.resize();\n        });\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Disposing GUIDialog\nDESCRIPTION: Method to dispose of the GUIDialog and remove it from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiDialog.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: HTML Image Component\nDESCRIPTION: Example of how to embed an image with advanced formatting options in documentation\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"internal link to image\" title=\"Image title\" alt=\"Similar to title\" width=\"300\" height=\"200\" caption=\"Copyright (or any other) caption that will appear under the image\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a GUI Button for State Transition in Babylon.js (JavaScript)\nDESCRIPTION: This code creates a simple 'NEXT' button using the Babylon.js GUI library. The button is styled, positioned at the bottom-right of the screen, and added to the `cutScene`'s UI controls. An event listener is attached (`onPointerUpObservable`) to trigger the `this._goToGame()` method when the button is clicked, facilitating a transition to the game state for testing purposes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//--PROGRESS DIALOGUE--\nconst next = Button.CreateSimpleButton(\"next\", \"NEXT\");\nnext.color = \"white\";\nnext.thickness = 0;\nnext.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\nnext.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\nnext.width = \"64px\";\nnext.height = \"64px\";\nnext.top = \"-3%\";\nnext.left = \"-12%\";\ncutScene.addControl(next);\n\nnext.onPointerUpObservable.add(() => {\n    this._goToGame();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Build Script to package.json - JavaScript\nDESCRIPTION: Defines a 'build' script inside the 'scripts' section of package.json to wrap the webpack build process. Once defined, you can run npm run build to execute the bundling. Add or update this in your project's package.json file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n    \"scripts\": {\\n        \"build\": \"webpack\"\\n    },\n```\n\n----------------------------------------\n\nTITLE: Checking GUIText Visibility\nDESCRIPTION: Method that returns whether the GUIText element is currently visible. Takes an event parameter and returns information about the element's visibility state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiText.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible(e) → void\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary Resource Creation in WebGPU - Markdown\nDESCRIPTION: This snippet explains how to monitor unnecessary WebGPU resource creation by inspecting members of the Babylon.js engine like 'countersLastFrame', 'numEnableEffects', and 'numEnableDrawWrapper'. It emphasizes passing a 'DrawWrapper' instead of an 'Effect' to 'engine.enableEffect()', and provides guidance on diagnosing the creation of resources per frame. The advice is aimed at developers troubleshooting performance issues arising from redundant resource allocation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUMiscellaneous.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIf you call `engine.enableEffect()`, make sure to pass a `DrawWrapper` to it and not an `Effect`. Else some WebGPU resources will be created each frame.\n\nTo check you are not creating unnecessary resources, when your application is running and is \"stabilized\" (meaning you are not creating new objects in the last frame) check `engine.countersLastFrame` and make sure `numEnableEffects` is 0. `numEnableEffects` is > 0 when you call `engine.enableEffect()` with an `Effect` and not a `DrawWrapper`: only `numEnableDrawWrapper` should be non 0.\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon Reskin Tool in Maya MEL\nDESCRIPTION: MEL command to initialize the Babylon Reskin Tool, which allows combining meshes with new max influencers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/11_BabylonArtTools.md#2025-04-23_snippet_0\n\nLANGUAGE: mel\nCODE:\n```\nbabylonReskinTool();\n```\n\n----------------------------------------\n\nTITLE: Particles Swap Velocities in Grid-Based Collision System\nDESCRIPTION: A playground example demonstrating particles that swap velocities when they collide while moving on a grid. Particles are restricted to moving between grid coordinates and collide with walls and each other based on proximity conditions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Grid_Moves.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#CGSXR\" title=\"Particles Swap Velocities\" description=\"Colliding particles swap their velocities.\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking GUISpinner Visibility in Babylon.js\nDESCRIPTION: Shows how to check if the GUISpinner element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSpinner.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible()\n```\n\n----------------------------------------\n\nTITLE: Styling Split Layout for Babylon.js Web Application\nDESCRIPTION: CSS styles that define the layout proportions and appearance of the holder and instructions divs. Sets up an 80-20 split layout with the instructions having a grey background.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/app2.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    #holder {\n        width: 80%;\n        height: 100%;\n        float: left;\n    }\n\n    #instructions {\n        width: 20%;\n        height: 100%;\n        float: left;\n        background-color: grey;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining ShadowGenerator Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Outlines the JSON object structure for configuring a shadow generator in Babylon.js. It includes options for different shadow map techniques (Variance, Poisson Sampling), map size, bias, rendering options (forceBackFacesOnly), the ID of the light source casting shadows, and a list of mesh IDs that should render into the shadow map.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"useBlurVarianceShadowMap\": boolean,\n    \"useVarianceShadowMap\": boolean,\n    \"usePoissonSampling\": boolean,\n    \"mapSize\": int (between 64 and 2048, must be a power of 2),\n    \"bias\": float,\n    \"forceBackFacesOnly\": float,\n    \"lightId\": string,\n    \"renderList\": array of string (which are IDs of meshes)\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting PhotoDome FOV Multiplier in Babylon.js (JavaScript)\nDESCRIPTION: Modifies the perceived field of view (FOV) for the PhotoDome using the `fovMultiplier` property. This is useful for adjusting the perceived distance of the image. This property only functions if the PhotoDome was created with the option `useDirectMapping = false`. Values typically range from 0.0 to 2.0, with values deviating further from 1.0 potentially introducing visual distortion.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360PhotoDome.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nphotoDome.fovMultiplier = newValue;\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer Progress Bar Slot Example\nDESCRIPTION: Demonstrates how to replace the default progress bar UI using slots in the Babylon Viewer component.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/elementStyling.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<CodePen pen=\"GgKZoej\" tab=\"html,result\" title=\"Babylon Viewer Slots (Progress Bar)\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Immutable PCS with Options\nDESCRIPTION: Shows how to create an immutable Particle Cloud System by setting the updatable option to false during initialization. This prevents any subsequent modifications to particle properties through methods like initParticles(), updateParticle(particle), and setParticles().\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/point_cloud_system/pcs_creation.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar pcs = new BABYLON.PointsCloudSystem(\"pcs\", 5, scene, { updatable: false });\n```\n\n----------------------------------------\n\nTITLE: Log Node Implementation\nDESCRIPTION: Natural logarithm function node that returns the power to which e must be raised to equal the input value. Supports multiple input types.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Basic Usage of GLTF Export with ES6 Import\nDESCRIPTION: Basic example of importing the GLTF2Export module and using it to export a scene to GLTF format with ES6 module syntax.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/glTFExporter.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GLTF2Export } from \"@babylonjs/serializers\";\n\n// Scene setup code...\n\nGLTF2Export.GLTFAsync(scene, \"fileName\").then((data) => {\n  console.log(\"Exported GLTF:\", data.files[\"fileName.gltf\"]);\n  data.downloadFiles();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Physics Helper Functions\nDESCRIPTION: Complex physics helper functions for creating explosions, gravitational fields, updrafts, and vortexes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar physicsHelper = new BABYLON.PhysicsHelper(scene);\n\nvar origin = BABYLON.Vector3(0, 0, 0);\nvar radius = 10;\nvar strength = 20;\nvar falloff = BABYLON.PhysicsRadialImpulseFalloff.Linear;\n\nvar explosionEvent = physicsHelper.applyRadialExplosionImpulse(\n    origin,\n    radius,\n    strength,\n    falloff\n);\n\nvar gravitationalFieldEvent = physicsHelper.gravitationalField(\n    origin,\n    radius,\n    strength,\n    falloff\n);\ngravitationalFieldEvent.enable();\nsetTimeout(function (gravitationalFieldEvent) { gravitationalFieldEvent.disable(); }, 3000, gravitationalFieldEvent);\n\nvar updraftEvent = physicsHelper.updraft(\n    origin,\n    radius,\n    strength,\n    height,\n    BABYLON.PhysicsUpdraftMode.Center\n);\nupdraftEvent.enable();\nsetTimeout(function (updraftEvent) { updraftEvent.disable(); }, 5000, updraftEvent);\n\nvar vortexEvent = physicsHelper.vortex(\n    origin,\n    radius,\n    strength,\n    height\n);\nvortexEvent.enable();\nsetTimeout(function (vortexEvent) { vortexEvent.disable(); }, 5000, vortexEvent);\n```\n\n----------------------------------------\n\nTITLE: Initializing PointerOutEventBlock in JavaScript\nDESCRIPTION: This code creates a FlowGraphPointerOutEventBlock for a given 'mesh', also with 'stopPropagation: true'. Connecting its 'done' output to 'nextBlock.in' ensures that 'nextBlock' is triggered when the pointer moves off the target mesh or its descendants.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointerOut = new FlowGraphPointerOutEventBlock({ targetMesh: mesh, stopPropagation: true });\n// notify an execution block that the pointer is out of a mesh\npointerOut.done.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Importing Typed Ammo.js Dependencies (JavaScript)\nDESCRIPTION: Imports the necessary Babylon.js `AmmoJSPlugin` and the typed version of the Ammo library (`ammojs-typed`). This setup is used when type safety with Ammo.js is desired.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AmmoJSPlugin } from \"@babylonjs/core/Physics/Plugins/ammoJSPlugin.js\";\nimport Ammo from \"ammojs-typed\";\n```\n\n----------------------------------------\n\nTITLE: Low-Level Hand Animation Player Implementation\nDESCRIPTION: Example showing a lower-level implementation of hand animation playback using the IAnimatedHandsPlayer interface, with direct control over positions, rotations, and skeleton.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/handsAnimation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IAnimatedHandsPlayer {\n\tinit(scene:Scene):void;\n\treadonly isPlayed: boolean;\n\treadonly isPaused: boolean;\n\t\n\tplay(\n\t\thand:XRHandedness,\n\t\tpositions:number[][],\n\t\trotations:number[][],\n\t\tskeleton:Skeleton,\n\t\tloop?:boolean,\n\t\tonFrame?:(frameNumber:number)=>void\n\t):Promise<void>;\n\t\n\tgoto(frame:number):void;\n\tstop():void;\n\tpause(val:boolean):void;\n\tdispose(): void;\n}\n\n// 1. Upload a data file or get the data in another way\nconst animationData = animationDataProvider.get('conduct_an_orchestra');\n\n// Parsing animation data here\n\n// 2. Init player\nconst player = new AnimatedHandsPlayer();\nplayer.init(scene);\n\n// 3. Start playback\nawait player.play(\n\t'right',\n\t// Bones positions from animationData\n\tpositions,\n\t// Bones quaternions\n\trotations,\n\t// Skeleton,\n\tskeleton,\n\tfalse\n);\n```\n\n----------------------------------------\n\nTITLE: Adding elements to a GUIGroup in BabylonJS\nDESCRIPTION: Method to add a GUI element to the GUIGroup. Takes a GUIElement as parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiGroup.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nadd(GUIElement) → void\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Parallel Delays in SetDelayBlock\nDESCRIPTION: Sets the maximum number of parallel delays that can be created by SetDelayBlock. The default is 100, but can be increased with consideration for performance impact.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nFlowGraphSetDelayBlock.MaxParallelDelayCount = 200;\n```\n\n----------------------------------------\n\nTITLE: Loading Assets into Container using LoadAssetContainerAsync in JavaScript\nDESCRIPTION: Demonstrates how to use BABYLON.LoadAssetContainerAsync to load assets into a container without appending them to the scene. It shows how to access and add the loaded elements to the scene later.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.LoadAssetContainerAsync(\"./duck.gltf\", scene).then(function (container) {\n  const meshes = container.meshes;\n  const materials = container.materials;\n  //...\n\n  // Adds all elements to the scene\n  container.addAllToScene();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Babylon.js Provider in Ionic\nDESCRIPTION: Command to generate an Angular Provider that will wrap the Babylon.js Engine, allowing it to be accessed across different pages in the application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Ionic_Angular.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nionic g providerBabylon.js\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Shadow Generators with ObjectRenderer in Babylon.js\nDESCRIPTION: This snippet demonstrates how to use multiple shadow generators with an ObjectRenderer block in a Node Render Graph. It utilizes a ResourceContainer to gather multiple shadow generators and connect them to the ObjectRenderer's shadowGenerators input.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBlocks/frameGraphBlocksDescription.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// NRGE code snippet is not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Block for Tint Effect\nDESCRIPTION: A JSON block definition that creates a tint effect with configurable color and amount. It includes shader program details, input connection points, and optimization settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/sfe.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"format\": \"shaderBlockDefinition\",\n    \"formatVersion\": 1,\n    \"blockType\": \"JSONTintBlock\",\n    \"namespace\": \"Babylon.Demo.Effects\",\n    \"shaderProgram\": {\n        \"fragment\": {\n            \"uniform\": \"\\n               uniform sampler2D _input_;\\n               uniform vec3 _tint_;\\n               uniform float _amount_;\",\n            \"mainFunctionName\": \"_mainImage_\",\n            \"functions\": [\n                {\n                    \"name\": \"_mainImage_\",\n                    \"code\": \"\\n                        vec4 _mainImage_(vec2 vUV) {\\n                            vec4 color = texture2D(_input_, vUV);\\n                            vec3 tinted = mix(color.rgb, _tint_, _amount_);\\n                            return vec4(tinted, color.a);\\n                        }\"\n                }\n            ]\n        }\n    },\n    \"inputConnectionPoints\": [\n        {\n            \"name\": \"input\",\n            \"type\": 2\n        },\n        {\n            \"name\": \"tint\",\n            \"type\": 3,\n            \"defaultValue\": {\n                \"r\": 1,\n                \"g\": 0,\n                \"b\": 0\n            }\n        },\n        {\n            \"name\": \"amount\",\n            \"type\": 1,\n            \"defaultValue\": 0.25\n        }\n    ],\n    \"disableOptimization\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mesh Component in TypeScript for Babylon.js\nDESCRIPTION: This code demonstrates the structure of a typical mesh component backing class. It includes the constructor and four lifecycle methods: start (initialization), update (frame updates), after (post-update processing), and destroy (cleanup).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/01_ScriptComponents.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    module PROJECT {\n        export class NewMeshComponent extends BABYLON.MeshComponent {\n            public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {\n                super(owner, scene, tick, propertyBag);\n            }\n\n            protected start() :void {\n                // Start component function\n            }\n\n            protected update() :void {\n                // Update render loop function\n            }\n\n            protected after() :void {\n                // After render loop function\n            }\n\n            protected destroy() :void {\n                // Destroy component function\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Uniforms in WGSL Shaders\nDESCRIPTION: This WGSL code demonstrates how to access scene and mesh uniforms in a vertex shader after including the necessary declarations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_3\n\nLANGUAGE: wgsl\nCODE:\n```\n@vertex\nfn main(input : VertexInputs) -> FragmentInputs {\n    vertexOutputs.position = scene.viewProjection * mesh.world * vec4<f32>(vertexInputs.position, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Particle System in BabylonJS\nDESCRIPTION: Initiates the particle system animation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.start();\n```\n\n----------------------------------------\n\nTITLE: Loading Colyseus JS SDK in Babylon.js Playground (TypeScript)\nDESCRIPTION: This snippet demonstrates how to dynamically load the Colyseus JavaScript SDK from a CDN URL within the Babylon.js Playground. It creates a `<script>` element, sets its `src` attribute to the SDK URL, and appends it to the document's `<head>`, making the `Colyseus` global object available. This method is specific to the Playground environment for quick testing and not recommended for production.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Load Colyseus SDK (asynchronously)\nvar scriptUrl = \"https://unpkg.com/colyseus.js@^0.15.0-preview.2/dist/colyseus.js\";\nvar externalScript = document.createElement(\"script\");\nexternalScript.src = scriptUrl;\ndocument.head.appendChild(externalScript);\n```\n\n----------------------------------------\n\nTITLE: Private Rounded Rectangle Drawing\nDESCRIPTION: Private method to draw a rounded rectangle on a canvas context with configurable corner radius.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\n    const x = this._currentMeasure.left + offset;\n    const y = this._currentMeasure.top + offset;\n    const width = this._currentMeasure.width - offset * 2;\n    const height = this._currentMeasure.height - offset * 2;\n\n    const radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\n\n    context.beginPath();\n    context.moveTo(x + radius, y);\n    context.lineTo(x + width - radius, y);\n    context.quadraticCurveTo(x + width, y, x + width, y + radius);\n    context.lineTo(x + width, y + height - radius);\n    context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    context.lineTo(x + radius, y + height);\n    context.quadraticCurveTo(x, y + height, x, y + height - radius);\n    context.lineTo(x, y + radius);\n    context.quadraticCurveTo(x, y, x + radius, y);\n    context.closePath();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebGPU Bind Group Cache Node Structure in TypeScript\nDESCRIPTION: This snippet defines the core data structures for the WebGPU bind group cache. The `WebGPUBindGroupCacheNode` class represents a node in the cache tree, holding references to child nodes via resource IDs (from buffers, samplers, textures) in the `values` object and storing actual `GPUBindGroup` arrays in `bindGroups`. The `WebGPUCacheBindGroups` class initializes the static root node `_Cache` for the entire cache system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUCacheBindGroup.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nclass WebGPUBindGroupCacheNode {\n    public values: { [id: number]: WebGPUBindGroupCacheNode };\n    public bindGroups: GPUBindGroup[];\n\n    constructor() {\n        this.values = {};\n    }\n}\n\nexport class WebGPUCacheBindGroups {\n    private static _Cache: WebGPUBindGroupCacheNode = new WebGPUBindGroupCacheNode();\n    ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Cosine Node Implementation\nDESCRIPTION: Cosine function node that accepts input in radians and supports Float, Int, Vector2, Vector3, and Vector4 types. Returns the cosine of the input value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Using Custom Babylon Viewer Element in HTML\nDESCRIPTION: Demonstrates how to use a configured custom viewer element in HTML. This custom element would have any configuration options applied during its creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/advancedUsage.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<my-babylon-viewer source=\"...\">\n</my-babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing BabylonJS camera with CesiumJS camera\nDESCRIPTION: Updates BabylonJS camera position and rotation to match CesiumJS camera before rendering. Converts CesiumJS camera matrix to BabylonJS coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_CesiumJS.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction cart2vec(cart) {\n    return new BABYLON.Vector3(cart.x, cart.z, cart.y);\n}\n\nconst fov = Cesium.Math.toDegrees(viewer.camera.frustum.fovy);\ncamera.fov = fov / 180 * Math.PI;\n\nconst civm = viewer.camera.inverseViewMatrix;\nconst camera_matrix = BABYLON.Matrix.FromValues(\n    civm[0 ], civm[1 ], civm[2 ], civm[3 ],\n    civm[4 ], civm[5 ], civm[6 ], civm[7 ],\n    civm[8 ], civm[9 ], civm[10], civm[11],\n    civm[12], civm[13], civm[14], civm[15]\n);\n\n// I'm sure it is able to get the result with the matrix directly, but I'm not familiar with matrixs, so you can do it yourselves.:)\nconst scaling = BABYLON.Vector3.Zero(), rotation = BABYLON.Vector3.Zero(), transform = BABYLON.Vector3.Zero();\ncamera_matrix.decompose(scaling, rotation, transform);\nconst camera_pos = cart2vec(transform),\n    camera_direction = cart2vec(viewer.camera.direction),\n    camera_up = cart2vec(viewer.camera.up);\n\nconst rotation_y = Math.atan(camera_direction.z / camera_direction.x);\nif (camera_direction.x < 0) rotation_y += Math.PI;\nrotation_y = Math.PI / 2 - rotation_y;\nconst rotation_x = Math.asin(-camera_direction.y);\nconst camera_up_before_rotatez = new BABYLON.Vector3(-Math.cos(rotation_y), 0, Math.sin(rotation_y));\nconst rotation_z = Math.acos(camera_up.x * camera_up_before_rotatez.x + camera_up.y * camera_up_before_rotatez.y + camera_up.z * camera_up_before_rotatez.z);\nrotation_z = Math.PI / 2 - rotation_z;\nif (camera_up.y < 0) rotation_z = Math.PI - rotation_z;\n\ncamera.position.x = camera_pos.x - base_point.x;\ncamera.position.y = camera_pos.y - base_point.y;\ncamera.position.z = camera_pos.z - base_point.z;\ncamera.rotation.x = rotation_x;\ncamera.rotation.y = rotation_y;\ncamera.rotation.z = rotation_z;\n```\n\n----------------------------------------\n\nTITLE: Running the Linter via npm Script (Shell)\nDESCRIPTION: This command executes the linting process defined in the repository's configuration. It checks the codebase for potential errors and style inconsistencies based on the project's ESLint rules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Asynchronous WebGPU Engine Creation in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates how to asynchronously create a Babylon.js WebGPU engine if supported by the browser, falling back to a WebGL engine otherwise. It checks for WebGPU support using `BABYLON.WebGPUEngine.IsSupportedAsync`, creates a `WebGPUEngine` instance for the specified canvas, and initializes it asynchronously with `engine.initAsync()`. If WebGPU is not supported, it creates a standard WebGL `BABYLON.Engine`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUBreakingChanges.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createEngine() {\n  const webGPUSupported = await BABYLON.WebGPUEngine.IsSupportedAsync;\n  if (webGPUSupported) {\n    const engine = new BABYLON.WebGPUEngine(document.getElementById(\"renderCanvas\"));\n    await engine.initAsync();\n    return engine;\n  }\n  return new BABYLON.Engine(document.getElementById(\"renderCanvas\"), true);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Material Type in Serialization\nDESCRIPTION: Example of how to set the material's class name in the serialization object to ensure proper type information when loading from serialized data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nserializationObject.customType = \"BABYLON.SimplelMaterial\";\n```\n\n----------------------------------------\n\nTITLE: Disposing GUIButton in BabylonJS\nDESCRIPTION: Method to dispose of the GUIButton and delete the element from the GUI system.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiButton.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Slope Detection Predicate\nDESCRIPTION: Defines a predicate function for raycast picking to detect valid slope meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt2.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet predicate = function (mesh) {\n  return mesh.isPickable && mesh.isEnabled();\n};\n```\n\n----------------------------------------\n\nTITLE: Wall Mesh Construction with UV Mapping in BabylonJS\nDESCRIPTION: Code snippet for constructing wall meshes with proper vertex positions, UV coordinates, indices and colors. Handles both inner and outer wall surfaces with texture mapping.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npositions.push(innerBaseCorners[0].x, innerBaseCorners[0].y, innerBaseCorners[0].z);\npositions.push(outerBaseCorners[0].x, outerBaseCorners[0].y, outerBaseCorners[0].z);\npositions.push(outerTopCorners[0].x, outerTopCorners[0].y, outerTopCorners[0].z);\npositions.push(innerTopCorners[0].x, innerTopCorners[0].y, innerTopCorners[0].z);\n\nuvs.push(exteriorUV.x, exteriorUV.y);\nuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply / maxL, exteriorUV.y);\nuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply / maxL, exteriorUV.z);\nuvs.push(exteriorUV.x, exteriorUV.z);\n```\n\n----------------------------------------\n\nTITLE: AddMarble Method Implementation in BabylonJS Scene\nDESCRIPTION: Implementation of the addMarble method in the BabylonJS scene that creates a new marble mesh. Shows how to access payload data and complete the command after execution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naddMarble(sceneDirectorCommand: SceneDirectorCommand): void {\n  if (sceneDirectorCommand.payload) {\n    this.addMarbleByName(sceneDirectorCommand.payload.name);\n  }\n  this.commandFinished(sceneDirectorCommand);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Child Meshes of a Parent Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Retrieves an array containing all direct child meshes associated with the 'parent' mesh object using the `getChildMeshes()` method. This is useful for iterating over all meshes within a group. Requires 'parent' to be a valid Babylon.js mesh or transform node object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet childMeshes = parent.getChildMeshes();\n```\n\n----------------------------------------\n\nTITLE: Serving Ionic app locally\nDESCRIPTION: Commands to navigate to the project directory and serve the Ionic app locally for development.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd fruit-fallin\nionic serve\n```\n\n----------------------------------------\n\nTITLE: Installing the Babylon.js Inspector Package (Bash)\nDESCRIPTION: Installs the ES6 compatible version of the Babylon.js Inspector as a development dependency using npm. This version is required when working with ES6 modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babylonjs/inspector\n```\n\n----------------------------------------\n\nTITLE: Character Animation Group Assignment\nDESCRIPTION: Assigns imported animation groups to character states including idle, jump, land, run, and dash animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/animations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis._idle = assets.animationGroups[1];\nthis._jump = assets.animationGroups[2];\nthis._land = assets.animationGroups[3];\nthis._run = assets.animationGroups[4];\nthis._dash = assets.animationGroups[0];\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Gravity in BabylonJS\nDESCRIPTION: Applies gravitational force to particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap6/particlespray.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.gravity = new BABYLON.Vector3(0, -9.81, 0);\n```\n\n----------------------------------------\n\nTITLE: Calling Initialization and Positioning Player in TypeScript\nDESCRIPTION: Demonstrates how to call `_initializeGameAsync` within the `goToGame` state transition logic. After initialization, it waits for the scene to be fully ready using `scene.whenReadyAsync()` and then sets the initial position of the player's collision mesh (`outer`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n//primitive character and setting\nawait this._initializeGameAsync(scene);\n\n//--WHEN SCENE FINISHED LOADING--\nawait scene.whenReadyAsync();\nscene.getMeshByName(\"outer\").position = new Vector3(0, 3, 0);\n```\n\n----------------------------------------\n\nTITLE: Advanced Mesh Combination with Material Preservation\nDESCRIPTION: Combining meshes while preserving original materials using multiMultiMaterial parameter. Second parameter handles mesh disposal and last parameter preserves material assignments.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/combine.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst house = BABYLON.Mesh.MergeMeshes([box, roof], true, false, null, false, true);\n```\n\n----------------------------------------\n\nTITLE: Scaling Spherical Polynomials for Environment Irradiance Intensity in Babylon.js\nDESCRIPTION: This code demonstrates how to reduce the intensity of the environment irradiance (diffuse IBL) independently from the reflection (radiance) component in Babylon.js. It accesses the `sphericalPolynomial` property of the environment texture (HDR) after the scene is ready and scales it down (e.g., by 0.1). This can prevent strong environment lighting from washing out shadows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nscene.onReadyObservable.addOnce(() => {\n  hdrTexture.sphericalPolynomial.scale(0.1);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: GUIMeter Disposal Method\nDESCRIPTION: Method to dispose of the GUI meter element and clean up resources.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiMeter.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of GUITextfield in JavaScript\nDESCRIPTION: Method to set the visibility of the GUI element, with an optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextfield.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Calculating Fragment Color and Alpha Over Time in GLSL Fragment Shader\nDESCRIPTION: This GLSL fragment shader code determines the color and alpha (transparency) of each fragment based on the elapsed 'time' uniform. It uses logarithmic functions of time to dynamically calculate the red, green, and alpha components of the output color ('gl_FragColor'). This creates a color transition and fading effect as the firework expands and dissipates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing2.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main(void) {\n    gl_FragColor = vec4(1. - log2(1. + time)/100., 1. * log2(1. + time), 0., 1. - log2(1. + time/2.)/log2(1. + 3.95));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Cloning Car Wheels\nDESCRIPTION: Creates cylinder meshes for wheels and clones them to create all four wheels. Positions each wheel relative to the car body using parent-child relationships.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/polycar.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wheelRB = BABYLON.MeshBuilder.CreateCylinder(\"wheelRB\", {diameter: 0.125, height: 0.05})\nwheelRB.parent = car;\nwheelRB.position.z = -0.1;\nwheelRB.position.x = -0.2;\nwheelRB.position.y = 0.035;\n\nconst wheelRF = wheelRB.clone(\"wheelRF\");\nwheelRF.position.x = 0.1;\n\nconst wheelLB = wheelRB.clone(\"wheelLB\");\nwheelLB.position.y = -0.2 - 0.035;\n\nconst wheelLF = wheelRF.clone(\"wheelLF\");\nwheelLF.position.y = -0.2 - 0.035;\n```\n\n----------------------------------------\n\nTITLE: Defining IWebGPURenderPassWrapper Interface in TypeScript\nDESCRIPTION: This interface wraps the main objects used by a GPU render pass, including render pass descriptor, color/depth descriptors, output textures, and depth texture format. It's used for both main and render target passes to factorize common methods.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUOverview.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IWebGPURenderPassWrapper {\n    // Interface details not provided in the text\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of All GUI Elements in JavaScript\nDESCRIPTION: Sets the visibility of all GUI elements managed by the GUIManager. Optionally applies a fade effect during the visibility change.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade)\n```\n\n----------------------------------------\n\nTITLE: Disposing Original Lantern Mesh\nDESCRIPTION: Disposes of the original lantern mesh after all clones have been created to free up memory. This is done after the cloning process is complete to ensure all required instances are created.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nassets.lantern.dispose();\n```\n\n----------------------------------------\n\nTITLE: Using Array Texture Sampling in GLSL\nDESCRIPTION: Example of sampling from a 2D array texture in a shader using vec3 coordinates where the third component is the layer index.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_10\n\nLANGUAGE: glsl\nCODE:\n```\ntexture(yourSampler, vec3(u,v,layerIndex))\n```\n\n----------------------------------------\n\nTITLE: Installing Ammo.js from GitHub (Bash)\nDESCRIPTION: Installs the `ammo.js` physics engine library directly from its GitHub repository using npm. This ensures an up-to-date version is used.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm install kripken/ammo.js\n```\n\n----------------------------------------\n\nTITLE: Creating Resized Texture\nDESCRIPTION: Creating a resized Babylon.js texture with specific dimensions from an image, video, or canvas source.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/resizer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst texture = resizer.getResizedTexture(imageToResize, { width: 128, height: 100 });\n```\n\n----------------------------------------\n\nTITLE: Debug Node Example Reference\nDESCRIPTION: Reference to an interactive example demonstrating the Debug Node functionality in the Node Material Editor\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/availableNodeBlocks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<NME id=\"#JNK6Z4\" title=\"Debug Node Example\" description=\"Simple example of the Debug Node.\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Mesh Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Specifies the JSON object structure for defining a mesh in a Babylon.js scene. It details properties like name, ID, parentage, material, geometry, transformations (position, rotation, scaling, pivot), visibility, physics attributes, collision settings, vertex data (positions, normals, UVs, colors, skinning info), submeshes, animations, instances, and actions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": string,\n    \"id\": string,\n    \"tags\": string,\n    \"parentId\": string,\n    \"materialId\": string,\n    \"geometryId\": string (can be omitted),\n    \"position\": vector3,\n    \"rotation\": vector3 (can be omitted),\n    \"rotationQuaternion\": vector4 (can be omitted),\n    \"scaling\": vector3,\n    \"pivotMatrix\": matrix,\n    \"freezeWorldMatrix\": boolean (can be omitted),\n    \"infiniteDistance\": boolean,\n    \"showBoundingBox\": boolean,\n    \"showSubMeshesBoundingBox\": boolean,\n    \"isVisible\": boolean,\n    \"isEnabled\": boolean,\n    \"pickable\": boolean,\n    \"applyFog\": boolean,\n    \"alphaIndex\": int,\n    \"checkCollisions\": boolean,\n    \"billboardMode\": int (0 = None, 1 = X, 2 = Y, 4 = Z, 7 = All),\n    \"receiveShadows\": boolean,\n    \"physicsImpostor\": int (0 = None, 1 = Box, 2 = Sphere),\n    \"physicsMass\": float,\n    \"physicsFriction\": float,\n    \"physicsRestitution\": float,\n    \"positions\": array of floats (3 per vertex),\n    \"normals\": array of floats (3 per vertex),\n    \"uvs\": array of floats (2 per vertex),\n    \"uvs2\": array of floats (2 per vertex) which is the 2nd texture coordinates (can be omitted),\n    \"uvs3\": array of floats (2 per vertex) which is the 3nd texture coordinates (can be omitted),\n    \"uvs4\": array of floats (2 per vertex) which is the 4nd texture coordinates (can be omitted),\n    \"uvs5\": array of floats (2 per vertex) which is the 5nd texture coordinates (can be omitted),\n    \"uvs6\": array of floats (2 per vertex) which is the 6nd texture coordinates (can be omitted),\n    \"colors\": array of floats (4 per vertex) which is the per vertex color (can be omitted),\n    \"hasVertexAlpha\": boolean to indicate if colors field contains useful alpha value (can be omitted),\n    \"matricesIndices\": array of ints (4 per vertex) which is the matrices indices for bones (can be omitted),\n    \"matricesWeights\": array of floats (4 per vertex) which is the matrices weights for bones (can be omitted),\n    \"indices\": array of ints (3 per face),\n    \"subMeshes\": array of SubMeshes (see below),\n    \"animations\": array of Animations (see below, can be omitted),\n    \"autoAnimate\": boolean,\n    \"autoAnimateFrom\": int,\n    \"autoAnimateTo\": int,\n    \"autoAnimateLoop\": boolean,\n    \"autoAnimateSpeed\": number (can be omitted)\n    \"instances\": array of Instances (see below, can be omitted),\n    \"actions\": array of actions (see below)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OBJ Loader Plugin (JavaScript)\nDESCRIPTION: Imports the OBJ file loader module solely for its side effects. This registers the OBJ loader plugin with the main `SceneLoader`, enabling the loading of `.obj` files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/loaders/OBJ.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating the Main HTML Entry Point with Canvas - HTML\nDESCRIPTION: This snippet defines a basic HTML page with a full-screen canvas and includes the generated Babylon.js bundle. The canvas with id 'renderCanvas' serves as the rendering target for Babylon.js. CSS styles ensure the canvas covers the entire viewport. Load the bundled JavaScript via a script tag referencing 'dist/index.js'. Place this content in 'index.html' at the project root.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n\\n    <head>\\n        <style>\\n            html,\\n            body {\\n                overflow: hidden;\\n                width: 100%;\\n                height: 100%;\\n                margin: 0;\\n                padding: 0;\\n                text-align: center;\\n            }\\n\\n            #renderCanvas {\\n                width: 100%;\\n                height: 100%;\\n                touch-action: none;\\n            }\\n        </style>\\n    </head>\\n\\n    <body>\\n        <canvas id=\"renderCanvas\"></canvas>\\n        <script src=\"dist/index.js\"></script>\\n    </body>\\n\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating UI Controls for CloudBis Texture in Test Page\nDESCRIPTION: This JavaScript code updates the UI controls to include the new CloudBis texture option. It adds CloudBis to the texture dropdown and handles the selection by applying the texture to the material and setting up the appropriate UI controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/proceduralTextureForTexLibrary.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngui.add(options, \"texture\", [\"default\", \"fire\", \"wood\", \"cloud\", \"grass\", \"road\", \"brick\", \"marble\", \"starfield\", \"cloudBis\"]).onFinishChange(function () {\n  resetPTOptions();\n  switch (options.texture) {\n    case \"fire\":\n      currentTexture = firePT;\n      addPToptions(firePT, [\"time\", \"alphaThreshold\", \"speed\"]);\n      break;\n    case \"wood\":\n      currentTexture = woodPT;\n      addPToptions(woodPT, [\"ampScale\", \"woodColor\"]);\n      break;\n    case \"cloud\":\n      currentTexture = cloudPT;\n      addPToptions(cloudPT, [\"skyColor\", \"cloudColor\"]);\n      break;\n    case \"grass\":\n      currentTexture = grassPT;\n      addPToptions(grassPT, [\"groundColor\"]);\n      break;\n    case \"road\":\n      currentTexture = roadPT;\n      addPToptions(roadPT, [\"roadColor\"]);\n      break;\n    case \"brick\":\n      currentTexture = brickPT;\n      addPToptions(brickPT, [\"numberOfBricksHeight\", \"numberOfBricksWidth\", \"brickColor\", \"jointColor\"]);\n      break;\n    case \"marble\":\n      currentTexture = marblePT;\n      addPToptions(marblePT, [\"numberOfTilesHeight\", \"numberOfTilesWidth\", \"amplitude\", \"jointColor\"]);\n      break;\n    case \"starfield\":\n      currentTexture = starfieldPT;\n      addPToptions(starfieldPT, [\"saturation\", \"distfading\", \"darkmatter\", \"alpha\", \"time\", \"beta\", \"zoom\", \"formuparam\", \"stepsize\", \"tile\", \"brightness\"]);\n      break;\n    case \"cloudBis\":\n      currentTexture = cloudBis;\n      break;\n    case \"none\":\n    default:\n      currentTexture = diffuseTexture;\n      break;\n  }\n\n  std.diffuseTexture = currentTexture;\n  window.enableTexture(options.texture);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Field of View via JavaScript\nDESCRIPTION: JavaScript configuration to customize the camera field of view (FOV) in the 360 video player through programmatic initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    \"threeSixty\": {\n        fov: 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Disposing Video Texture Resources in Babylon.js\nDESCRIPTION: Comprehensive cleanup of a VideoTexture including both the texture resources and the underlying HTML video element to prevent memory leaks.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/videoTexture.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Store reference to the underlying HTML5 video element\nconst videoEl = videoDome.videoTexture.video \n\n// Dispose texture\nvideoTexture.dispose();\n\n// Remove any <source> elements, etc.\nwhile (videoEl.firstChild) {\n    videoEl.removeChild(videoEl.lastChild);\n}\n\n// Set a blank src\nvideoEl.src = ''\n\n// Prevent non-important errors in some browsers\nvideoEl.removeAttribute('src')\n\n// Get certain browsers to let go\nvideoEl.load()\n\nvideoEl.remove()\n```\n\n----------------------------------------\n\nTITLE: Specifying 3D Model for Babylon.js Viewer\nDESCRIPTION: This snippet demonstrates two ways to specify a 3D model for the Babylon.js Viewer: using the 'model' attribute on the 'babylon' tag, and using a separate 'model' tag with a 'url' attribute.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"none\" model=\"https://models.babylonjs.com/shark.glb\"></babylon>\n```\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"none\">\n <model url=\"https://models.babylonjs.com/shark.glb\"></model>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Lighting Initial Lantern in Babylon.js\nDESCRIPTION: Lights the first lantern in the game to provide a starting point for the player. This prevents the player from getting stuck if they haven't found the next lantern in time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (!this._lanternObjs[0].isLit) {\n  this._lanternObjs[0].setEmissiveTexture();\n}\n```\n\n----------------------------------------\n\nTITLE: Storing WGSL Shaders in Babylon.js ShaderStore\nDESCRIPTION: This code shows how to store WGSL vertex and fragment shaders in the Babylon.js ShaderStore for later use with ShaderMaterial.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ShaderStore.ShadersStoreWGSL[\"myShaderVertexShader\"]=`   \n    #include<sceneUboDeclaration>\n    #include<meshUboDeclaration>\n    ...\n`;\n\nBABYLON.ShaderStore.ShadersStoreWGSL[\"myShaderFragmentShader\"]=`\n    varying vPositionW : vec3<f32>;\n    varying vUV : vec2<f32>;\n    ...\n`;\n```\n\n----------------------------------------\n\nTITLE: Setting Terrain Update Tolerance Based on Camera Movement in JavaScript\nDESCRIPTION: This code configures the terrain to update only after significant camera movement (10 quads on X axis, 5 on Z axis). This optimization reduces update frequency for performance in scenarios with limited camera movement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.subToleranceX = 10; // the terrain will be updated only after 10 quads crossed over by the camera on X\nterrain.subToleranceZ = 5; // the terrain will be updated only after 5 quads crossed over by the camera on Z\n```\n\n----------------------------------------\n\nTITLE: Defining glTF Loader Extension Options in TypeScript\nDESCRIPTION: This snippet shows how to define options for a custom glTF loader extension by augmenting the GLTFLoaderExtensionOptions interface. It defines a type for the extension options and adds it to the existing interface.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/createExtensions.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyCustomExtensionOptions = { option1?: string, option2?: number };\n\ndeclare module \"@babylonjs/loaders\" {\n  export interface GLTFLoaderExtensionOptions {\n    myCustomExtension: MyCustomImporterOptions;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Back Face Rendering in Babylon.js Materials\nDESCRIPTION: This code disables back face culling on a material, allowing both sides of mesh facets to be visible. By default, Babylon.js only renders the front faces of meshes (the sides from which normals point away).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmat.backFaceCulling = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing Draco Decoder with Worker Pool in Main Application (JavaScript)\nDESCRIPTION: Shows how to set up Draco decoding using a web worker pool in the main application file. It imports the Draco WASM file as an ArrayBuffer, creates an `AutoReleaseWorkerPool`, configures it to use the `worker.js` script and the WASM data, and assigns the pool to the default Draco configuration (`DracoDecoder.DefaultConfiguration.workerPool`). An alternative method of passing the pool directly to a `DracoDecoder` instance constructor is also shown.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// mainFile.js\n// import the wasm as array buffer. see the KTX2 documentation for hints on how to do that\nimport wasm from \"@babylonjs/core/assets/Draco/draco_decoder_gltf.wasm\";\nimport { AutoReleaseWorkerPool } from \"@babylonjs/core/Misc/workerPool.js\";\nimport { DracoDecoder } from \"@babylonjs/core/Meshes/Compression/dracoDecoder.js\";\nimport { initializeWebWorker } from \"@babylonjs/core/Meshes/Compression/dracoCompressionWorker.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer.js\";\n\nconst workerPool = new AutoReleaseWorkerPool(4, () => {\n  const worker = new Worker(new URL(\"./worker.js\", import.meta.url), {\n    type: \"module\",\n  });\n  return initializeWebWorker(worker, wasm);\n});\n\n// set the worker pool\nDracoDecoder.DefaultConfiguration.workerPool = workerPool;\n\n// if you are creating your own version of the draco decoder class you can pass the worker pool in the constructor instead:\n\nconst dracoDecoder = new DracoDecoder({\n  workerPool,\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Random Point on Mesh Facet\nDESCRIPTION: Generates a random point within a triangular facet using lambda and mu parameters\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/SurfaceMeshPoints.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlamda = BABYLON.Scalar.RandomRange(0, 1);\nmu = BABYLON.Scalar.RandomRange(0, 1);\nfacetPoint = vertex0.add(vec0.scale(lambda)).add(vec1.scale(lambda * mu));\n```\n\n----------------------------------------\n\nTITLE: Disposing GUITextarea Element\nDESCRIPTION: Method to dispose of the GUITextarea component and remove it from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextarea.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Scaling a Box Mesh Using Individual Properties in Babylon.js\nDESCRIPTION: Creates a unit cube and then scales it by setting individual scaling properties. This demonstrates how to change a mesh's size after creation by adjusting its x, y, and z scaling factors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/placement.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", {}); //unit cube\nbox.scaling.x = 2;\nbox.scaling.y = 1.5;\nbox.scaling.z = 3;\n```\n\n----------------------------------------\n\nTITLE: Creating a Delay in Babylon.js Flow Graph\nDESCRIPTION: Creates a delay in the flow graph execution using SetDelayBlock. The delay is specified in seconds and uses Babylon's AdvancedTimer connected to the scene render loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst setDelay = new FlowGraphSetDelayBlock();\nsetDelay.duration.setValue(2.5 /* seconds */, ctx);\nsetDelay.done.connectTo(nextBlock.in); // will be triggered 2.5 seconds after the in signal\n```\n\n----------------------------------------\n\nTITLE: Using digest Method Parameters in Babylon.js SPS\nDESCRIPTION: This snippet demonstrates the usage of optional parameters in the digest() method: facetNb controls how many facets to use per particle, delta creates random variation in particle size, and number specifies the total number of particles to generate from the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_digest.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar model = BABYLON.MeshBuilder.CreateTorusKnot(\n  \"s\",\n  { radius: 20, tube: 6, tubularSegments: 64, radialSegments: 128 },\n  scene\n);\nSPS.digest(model, { facetNb: 10 }); // 10 facets per particle whatever their final number\nSPS.digest(model, { number: 200 }); // 200 particles whatever their final size\nSPS.digest(model, { facetNb: 10, delta: 30 }); // between 10 and 40 facets per particle, randomly, whatever their final number\nmodel.dispose();\nSPS.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: Defining GreasedLineMaterialBuilderOptions Interface - Babylon.js - JavaScript\nDESCRIPTION: This snippet outlines the available properties for the `GreasedLineMaterialBuilderOptions` JavaScript interface, defining all configurable options for rendering lines with the GreasedLine renderer in Babylon.js. No code dependencies are explicit, but knowledge of Babylon.js and related types (e.g., `Color3`, `Vector2`) is necessary. Each property is optional and shapes the appearance, material assignment, color handling, dash patterns, and more for line rendering; they are typically passed to Babylon.js methods for line creation or modification.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncreateAndAssignMaterial?: boolean;\nwidth?: number;\nsizeAttenuation?: boolean;\nmaterialType?: GreasedLineMeshMaterialType;\ncolor?: Color3;\ncolorMode?: GreasedLineMeshColorMode;\ncolors?: Color3[];\ncolorDistribution?: GreasedLineMeshColorDistribution;\ncolorDistributionType?: GreasedLineMeshColorDistributionType;\nuseColors?: boolean;\ncolorsSampling?: number;\nuseDash?: boolean;\ndashCount?: number;\ndashOffset?: number;\ndashRatio?: number;\nvisibility?: number;\nresolution?: Vector2;\ncameraFacing?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Movement Feature\nDESCRIPTION: Shows how to enable the movement feature with default configuration using the features manager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRMovement.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.MOVEMENT, \"latest\", {\n  xrInput: xrHelper.input,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Material Index for SubMeshes with Merged Meshes in Babylon.js\nDESCRIPTION: When working with merged meshes, this code sets the material index for a specific submesh. This is necessary when the subdivideWithSubMeshes parameter is true but multiMultiMaterial is false during mesh merging.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/multiMaterials.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmergedMesh.subMeshes[1].materialIndex = 1;\n```\n\n----------------------------------------\n\nTITLE: Adding Dirty Lens Effect in Standard Rendering Pipeline\nDESCRIPTION: This snippet demonstrates how to add a dirty lens effect by setting a mask texture for the lens. The texture's background should be black.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Just create a new BABYLON.Texture containing the dirty lens mask\npipeline.lensTexture = new BABYLON.Texture(\"lensdirt.jpg\", scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Generator Bias in Babylon.js (JavaScript)\nDESCRIPTION: Sets the `bias` property of a `shadowGenerator` object. This value helps reduce shadow acne artifacts by adjusting the depth comparison during shadow map lookup. A higher bias pushes the comparison point further away from the surface, potentially fixing acne but can cause \"peter-panning\" (shadows detaching from objects). The default bias is 0.00005. This requires an existing `shadowGenerator` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.bias = 0.01;\n```\n\n----------------------------------------\n\nTITLE: Activating High Level Fur Material in Babylon.js\nDESCRIPTION: Enables the high-level mode for fur material, which simplifies the creation of fur effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.highLevelFur = true;\n```\n\n----------------------------------------\n\nTITLE: Managing Sparkler Warning Sound Effects in BabylonJS\nDESCRIPTION: This code handles a warning sound effect for a sparkler that plays when the energy is low. It ensures the sound stops if the animation doesn't complete and pauses when the game is paused.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/musicSFX.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (!this.gamePaused) {\n  if (this._sparklerLife.cellId < 10) {\n    this._sparklerLife.cellId++;\n  }\n  if (this._sparklerLife.cellId == 9) {\n    this._sparkWarningSfx.play();\n  }\n  if (this._sparklerLife.cellId == 10) {\n    this.stopSpark = true;\n    clearInterval(this._handle);\n    //sfx\n    this._sparkWarningSfx.stop();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Rotation Around Custom Axis in World Space - Babylon.js JavaScript\nDESCRIPTION: Applies a rotation to a mesh in Babylon.js around a custom axis in world space. Requires mesh object, Babylon.js, and a suitable direction vector (axis of rotation), angle in radians, and Babylon.Space.WORLD constant. This method is suitable when a global coordinate system is required for the transformation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/add_rotations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(new BABYLON.Vector3(1, 0 -1), Math.PI / 3, BABYLON.Space.WORLD);\n```\n\n----------------------------------------\n\nTITLE: Building Development Sources and Assets via NPM\nDESCRIPTION: Runs the `build:dev` npm script defined in the project's `package.json`. This command typically compiles TypeScript sources, processes shaders, copies assets, and performs other tasks needed to prepare the project for local development and testing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Oimo.js Physics\nDESCRIPTION: Example of enabling physics with the Oimo.js physics plugin and custom gravity vector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.enablePhysics(new BABYLON.Vector3(0,-9.81, 0), new BABYLON.OimoJSPlugin());\n```\n\n----------------------------------------\n\nTITLE: Implementing CloudBis Procedural Texture Class in TypeScript\nDESCRIPTION: This TypeScript class defines the CloudBisProceduralTexture that interfaces with the GLSL shader. It includes properties for sky and cloud colors with getters and setters, and a method to update the shader uniforms when properties change.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/proceduralTextureForTexLibrary.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule BABYLON {\n    export class CloudBisProceduralTexture extends ProceduralTexture {\n        private _skyColor = new Color4(0.15, 0.68, 1.0, 1.0);\n        private _cloudColor = new Color4(1, 1, 1, 1.0);\n\n        constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n            super(name, size, \"cloudProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n            this.updateShaderUniforms();\n            this.refreshRate = 0;\n        }\n\n        public updateShaderUniforms() {\n            this.setColor4(\"skyColor\", this._skyColor);\n            this.setColor4(\"cloudColor\", this._cloudColor);\n        }\n\n        public get skyColor(): Color4 {\n            return this._skyColor;\n        }\n\n        public set skyColor(value: Color4) {\n            this._skyColor = value;\n            this.updateShaderUniforms();\n        }\n\n        public get cloudColor(): Color4 {\n            return this._cloudColor;\n        }\n\n        public set cloudColor(value: Color4) {\n            this._cloudColor = value;\n            this.updateShaderUniforms();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Local Axes for Mesh in Babylon.js\nDESCRIPTION: Assigns the x, y, and z axes as children of a mesh to display local coordinate system. This makes the axes move and rotate with the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/World_Axes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxes.xAxis.parent = mesh;\naxes.yAxis.parent = mesh;\naxes.zAxis.parent = mesh;\n```\n\n----------------------------------------\n\nTITLE: Setting up and Running the AMP 360 Video Plugin Locally\nDESCRIPTION: Commands to install dependencies and start the local development server for the AMP 360 Video plugin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing Scene from @dev/core - JavaScript\nDESCRIPTION: Demonstrates the correct modular import pattern required in the dev host environment for Babylon.js. Imports the Scene object from the '@dev/core' package, illustrating the necessity to avoid using global BABYLON namespaces. This enables tree-shaking and ES6 module advantages. Requires that the @dev/core package is available within node_modules and the code is executed within the dev host setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Scene } from \"@dev/core\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Babylon.js Scene with Pixi.js Stage\nDESCRIPTION: Sets up a render loop that first renders the Babylon.js scene, then resets and renders the Pixi.js stage. This sequence is crucial for proper integration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_PixiJS.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nengine.runRenderLoop(function () {\n  scene.render();\n  engine.wipeCaches(true);\n\n  pixiRenderer.reset();\n  pixiRenderer.render(stage);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Surface Points Generation Function\nDESCRIPTION: Full implementation of the createSurfacePoints prototype method that generates random points across all mesh facets based on point density\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/SurfaceMeshPoints.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.prototype.createSurfacePoints = function(pointDensity) {\n\tvar positions = this.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n\tvar indices = this.getIndices();\n\t\n\tvar point = BABYLON.Vector3.Zero();\n\tvar points = [];\n\t\n\tvar randX = 0;\n\tvar randY = 0;\n\tvar randZ = 0\n\t\n\tvar index = 0;\n\tvar id0 = 0;\n\tvar id1 = 0; \n\tvar id2 = 0;\n\tvar v0X = 0;\n\tvar v0Y = 0;\n\tvar v0Z = 0;\n\tvar v1X = 0;\n\tvar v1Y = 0\n\tvar v1Z = 0;\n\tvar v2X = 0;\n\tvar v2Y = 0;\n\tvar v2Z = 0;\n\tvar vertex0 = BABYLON.Vector3.Zero();\n\tvar vertex1 = BABYLON.Vector3.Zero();\n\tvar vertex2 = BABYLON.Vector3.Zero();\n\tvar vec0 = BABYLON.Vector3.Zero();\n\tvar vec1 = BABYLON.Vector3.Zero();\n    var vec2 = BABYLON.Vector3.Zero();\n\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var p = 0;\n    var area = 0;\n    var nbPoints = 0;\n\t\t\n\tvar lamda = 0;\t\n\tvar mu = 0;\n\n\tfor(let index = 0; index <indices.length / 3; index++) {  \t\t\t\t\n\t\tid0 = indices[3 * index];\n\t\tid1 = indices[3 * index + 1]; \n\t\tid2 = indices[3 * index + 2];        \n\t\tv0X = positions[3 * id0];\n\t\tv0Y = positions[3 * id0 + 1];\n\t\tv0Z = positions[3 * id0 + 2];\n\t\tv1X = positions[3 * id1];\n\t\tv1Y = positions[3 * id1 + 1];\n\t\tv1Z = positions[3 * id1 + 2];\n\t\tv2X = positions[3 * id2];\n\t\tv2Y = positions[3 * id2 + 1];\n\t\tv2Z = positions[3 * id2 + 2];\n\t\tvertex0.set(v0X, v0Y, v0Z);\n\t\tvertex1.set(v1X, v1Y, v1Z);\n\t\tvertex2.set(v2X, v2Y, v2Z);\n\t\tvertex1.subtractToRef(vertex0, vec0);\n\t\tvertex2.subtractToRef(vertex1, vec1);\n        vertex2.subtractToRef(vertex0, vec2);\n        a = vec0.length();\n        b = vec1.length();\n        c = vec2.length();\n        p = (a + b + c) / 2;        \n        area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        nbPoints = Math.round(pointDensity * area);\n        for (let i = 0; i < nbPoints; i++) {\n            lamda = BABYLON.Scalar.RandomRange(0, 1);\t\n\t\t    mu = BABYLON.Scalar.RandomRange(0, 1);\n\t\t    facetPoint = vertex0.add(vec0.scale(lamda)).add(vec1.scale(lamda * mu));\n            points.push(facetPoint);\n        }\t\n\t}\n\treturn points;\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling from Upstream Repository\nDESCRIPTION: Command to pull latest changes from the main Babylon.js repository\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Support in Maya for Babylon.js Export\nDESCRIPTION: This code snippet describes the camera features supported in the Babylon.js Maya exporter. It includes field of view, depth settings, position/target information, animation support, and custom attributes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Maya.md#2025-04-23_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n- _Cameras_\n      * Fov\n      * MinZ\n      * MaxZ\n      * Position\n      \\* Target / Rotation\n\n  - Animations: Position, Target / Rotation \\* Custom attributes\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies using npm.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Legacy Facet Increase Implementation (Pre-v4.0)\nDESCRIPTION: Detailed implementation for increasing mesh facets in older Babylon.js versions. Extends Mesh prototype to add new vertices, recalculate positions, UVs, and normals while maintaining mesh topology.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Increasing_Facets.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.prototype.increaseFacets = function(pps) { //pps points per side        \n    var _gaps = pps+1;\n    var _n = _gaps + 1;\n    var _fvs =[];\n    for(let _i=0; _i<_n; _i++) {\n        _fvs[_i] = [];\n    }    \n    var _A,_B;\n    var _d ={x:0,y:0,z:0};\n    var _u ={x:0,y:0};\n    var _indices = [];\n    var _vertexIndex = [];\n    var _side = [];\n\tvar _l; //holds lengths\n    var _uvs = this.getVerticesData(BABYLON.VertexBuffer.UVKind);\n    var _meshIndices = this.getIndices();\n    var _positions = this.getVerticesData(BABYLON.VertexBuffer.PositionKind);    \n    var _normals =[];    \n\n    for(let _i = 0; _i<_meshIndices.length; _i+=3) {\n        _vertexIndex[0] = _meshIndices[_i];\n        _vertexIndex[1] = _meshIndices[_i + 1];\n        _vertexIndex[2] = _meshIndices[_i + 2];        \n        for(let _j = 0; _j<3; _j++) {\n            _A = _vertexIndex[_j];\n            _B = _vertexIndex[(_j+1)%3];        \n            if(_side[_A] === undefined  && _side[_B] ===  undefined) {            \n                _side[_A] = [];\n                _side[_B] = [];            \n            }\n            else {\n                if(_side[_A] === undefined) {                    \n                    _side[_A] = [];\n                }\n                if(_side[_B] === undefined) {                    \n                    _side[_B] = [];                                \n                }\n            }\n            if(_side[_A][_B]  === undefined  && _side[_B][_A] === undefined) {            \n                _side[_A][_B] = [];\n                _d.x = (_positions[3 * _B] - _positions[3 * _A])/_gaps;\n                _d.y = (_positions[3 * _B + 1] - _positions[3 * _A + 1])/_gaps;\n                _d.z = (_positions[3 * _B + 2] - _positions[3 * _A + 2])/_gaps;\n                _u.x = (_uvs[2*_B] - _uvs[2*_A])/_gaps;\n                _u.y = (_uvs[2*_B + 1] - _uvs[2*_A + 1])/_gaps;\n                _side[_A][_B].push(_A);                \n                for(let _k=1; _k<_gaps; _k++) {                \n                    _side[_A][_B].push(_positions.length/3);                \n                    _positions.push(_positions[3 * _A] + _k*_d.x, _positions[3 * _A + 1] + _k*_d.y, _positions[3 * _A + 2] + _k*_d.z);\n                    _uvs.push(_uvs[2*_A] + _k*_u.x, _uvs[2*_A + 1] + _k*_u.y);\n                }                \n                _side[_A][_B].push(_B);\n                _side[_B][_A]=[];\n                _l = _side[_A][_B].length;\n                for(let _a=0; _a<_l; _a++) {\n                    _side[_B][_A][_a] = _side[_A][_B][_l-1-_a];\n                }\n            }\n            else {\n                if(_side[_A][_B] === undefined) {            \n                    _side[_A][_B]=[];\n                    _l = _side[_B][_A].length;\n                    for(let _a=0; _a<_l; _a++) {\n                        _side[_A][_B][_a] = _side[_B][_A][_l-1-_a];\n                    }\n                }\n                if(_side[_B][_A] === undefined) {            \n                    _side[_B][_A]=[];                \n                    _l = _side[_A][_B].length;\n                    for(let _a=0; _a<_l; _a++) {\n                        _side[_B][_A][_a] = _side[_A][_B][_l-1-_a];\n                    }\n                }\n            }                    \n        }    \n        _fvs[0][0] = _meshIndices[_i];\n        _fvs[1][0] = _side[_meshIndices[_i]][_meshIndices[_i + 1]][1];\n        _fvs[1][1] = _side[_meshIndices[_i]][_meshIndices[_i + 2]][1];        \n        for(let _k = 2; _k<_gaps; _k++) {\n            _fvs[_k][0] = _side[_meshIndices[_i]][_meshIndices[_i + 1]][_k];\n            _fvs[_k][_k] = _side[_meshIndices[_i]][_meshIndices[_i + 2]][_k];        \n            _d.x = (_positions[3 * _fvs[_k][_k]] - _positions[3 * _fvs[_k][0]])/_k;\n            _d.y = (_positions[3 * _fvs[_k][_k] + 1] - _positions[3 * _fvs[_k][0] + 1])/_k;\n            _d.z = (_positions[3 * _fvs[_k][_k] + 2] - _positions[3 * _fvs[_k][0] + 2])/_k;\n            _u.x = (_uvs[2*_fvs[_k][_k]] - _uvs[2*_fvs[_k][0]])/_k;\n            _u.y = (_uvs[2*_fvs[_k][_k] + 1] - _uvs[2*_fvs[_k][0] + 1])/_k;\n            for(let _j = 1; _j<_k; _j++) {                \n                _fvs[_k][_j] = _positions.length/3;                \n                _positions.push(_positions[3 * _fvs[_k][0]] + _j*_d.x, _positions[3 * _fvs[_k][0] + 1] + _j*_d.y, _positions[3 * _fvs[_k][0] + 2] + _j*_d.z);\n                _uvs.push(_uvs[2*_fvs[_k][0]] + _j*_u.x, _uvs[2*_fvs[_k][0] + 1] + _j*_u.y);\n            }        \n        }\n        _fvs[_gaps] = _side[_meshIndices[_i + 1]][_meshIndices[_i + 2]];\n\n        _indices.push(_fvs[0][0],_fvs[1][0],_fvs[1][1]);\n        for(let _k = 1; _k<_gaps; _k++) {\n            for(let _j = 0; _j<_k; _j++) {            \n                _indices.push(_fvs[_k][_j],_fvs[_k+1][_j],_fvs[_k+1][_j+1]);\n                _indices.push(_fvs[_k][_j],_fvs[_k+1][_j+1],_fvs[_k][_j+1]);\n            }        \n            _indices.push(_fvs[_k][_j],_fvs[_k+1][_j],_fvs[_k+1][_j+1]);\n        }\n\n    }                            \n\n    var vertexData = new BABYLON.VertexData();\n    vertexData.positions = _positions;\n    vertexData.indices = _indices;\n    vertexData.uvs = _uvs;\n\n    BABYLON.VertexData.ComputeNormals(_positions, _indices, _normals);\n    vertexData.normals = _normals;\n\t\n    vertexData.applyToMesh(this);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using PBRMaterial with Greased Lines in Babylon.js\nDESCRIPTION: Demonstrates how to use PBRMaterial with Greased Lines. It sets the material type to PBR and uses the color mode multiply for proper rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\n  \"line\",\n  { points },\n  {\n    materialType: BABYLON.GreasedLineMeshMaterialType.MATERIAL_TYPE_PBR,\n    colorMode: BABYLON.GreasedLineMeshColorMode.COLOR_MODE_MULTIPLY,\n  },\n);\n\nconst pbrMaterial = line.material;\n// set your PBR material properties here\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow Caster in Babylon.js\nDESCRIPTION: Adds a mesh as a shadow caster to the shadow generator. The second boolean parameter determines if child meshes should also cast shadows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/shadows.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nshadowGenerator.addShadowCaster(casting_mesh, true);\n```\n\n----------------------------------------\n\nTITLE: InstantiateOnFaces Node Properties and Functionality\nDESCRIPTION: Documentation for the InstantiateOnFaces node which distributes instances across faces of source geometry. Instances are randomly positioned within face boundaries with transformation support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n#### Functionality\nGenerates instances on source geometry faces\nRandom position distribution within face bounds\nSupports matrix or individual transformation inputs\nOutputs merged single geometry\nHandles cases of more/fewer instances than faces\n```\n\n----------------------------------------\n\nTITLE: Babylon.js Viewer Annotation CSS States\nDESCRIPTION: CSS example demonstrating how to override default annotation styles for back-facing hotspots to maintain full opacity regardless of hotspot normal direction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/hotspots.md#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nbabylon-viewer-annotation:--back-facing {\n  opacity: 1.0;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading STL File Loader Plugin via CDN in HTML\nDESCRIPTION: This snippet shows how to include the STL File Loader plugin using CDN links in an HTML file. It's important to load the plugin after the main Babylon.js script.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/stl.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"Babylon.js\"></script>\n<script src=\"babylon.stlFileLoader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Disposing GUIManager and Elements in JavaScript\nDESCRIPTION: Disposes of the GUIManager instance and all associated GUI elements, freeing up resources.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndispose()\n```\n\n----------------------------------------\n\nTITLE: Loading Assets from Gitlab Pages\nDESCRIPTION: Example of importing assets hosted on Gitlab Pages.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/externalPGAssets.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"https://yourpages.gitlab.io/yourScene/myFile.babylon\", scene);\n```\n\n----------------------------------------\n\nTITLE: Loading Assets from Github using raw.githubusercontent.com\nDESCRIPTION: Demonstrates how to import 3D models from Github using raw.githubusercontent.com URL format.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/externalPGAssets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"https://raw.githubusercontent.com/BabylonJS/MeshesLibrary/master/PBR_Spheres.glb\", scene);\n```\n\n----------------------------------------\n\nTITLE: Message Type Enums Definition\nDESCRIPTION: Definition of message types used for communication between Vue and BabylonJS. Includes message types for both directions: from Vue to BabylonJS (SceneDirectorEventBusMessages) and from BabylonJS to Vue (SceneEventBusMessages).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nenum SceneDirectorEventBusMessages {\n  // Message types not fully shown in the image\n}\n\nenum SceneEventBusMessages {\n  // Message types not fully shown in the image\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State in Babylon.js\nDESCRIPTION: Method to explicitly set the checked state of a GUICheckbox element. Accepts a value parameter to determine the new state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiCheckbox.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetChecked(value) → void\n```\n\n----------------------------------------\n\nTITLE: Lantern Animation Cloning\nDESCRIPTION: Creates individual animation instances for each lantern by cloning the animation group and linking it to specific mesh instances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/animations.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet animGroupClone = new AnimationGroup(\"lanternAnimGroup \" + i);\nanimGroupClone.addTargetedAnimation(assets.animationGroups.targetedAnimations[0].animation, lanternInstance);\nlet newLantern = new Lantern(this._lightmtl, lanternInstance, this._scene, assets.env.getChildTransformNodes(false).find(m => m.name === \"lantern \" + i).getAbsolutePosition(), animGroupClone);\n```\n\n----------------------------------------\n\nTITLE: Creating Mesh Instances in Babylon.js\nDESCRIPTION: Shows how to create an instance of a mesh that shares the material with the original mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/copies.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninstanceHouse = house.createInstance(\"instanceHouse\")\n```\n\n----------------------------------------\n\nTITLE: Custom Playground Component Usage\nDESCRIPTION: Example of using a custom Playground component in markdown to display interactive examples with preview functionality and search indexing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#Y642I8\" title=\"Tinted Shadows Example\" description=\"A Playground example of tinted shadows.\" />\n```\n\n----------------------------------------\n\nTITLE: Disposing a GUITexture in BabylonJS\nDESCRIPTION: Method to dispose of a GUITexture element and remove it from the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextures.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Filtering Meshes Affected by a Light using Intersection in BabylonJS (JavaScript)\nDESCRIPTION: This JavaScript snippet iterates through all child meshes of the scene's root node. For each mesh, it checks if it intersects with a predefined `_lightSphere`. If an intersection occurs, the mesh is added to the `includedOnlyMeshes` array of a specific `light` object, limiting the light's effect to only those intersecting meshes. Finally, the temporary `_lightSphere` used for intersection testing is disposed of to free up resources. This technique optimizes rendering performance when dealing with multiple lights.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nthis._scene\n  .getMeshByName(\"__root__\")\n  .getChildMeshes()\n  .forEach((m) => {\n    if (this._lightSphere.intersectsMesh(m)) {\n      light.includedOnlyMeshes.push(m);\n    }\n  });\n//get rid of the sphere\nthis._lightSphere.dispose();\n```\n\n----------------------------------------\n\nTITLE: Optimizing PostProcessing in WebGPU - Markdown\nDESCRIPTION: This snippet details optimization steps for post-processing in Babylon.js using WebGPU. It discusses the interaction between the 'textureSampler' property and the 'onApply' observer, explaining that setting 'externalTextureSamplerBinding = true' can improve performance. It further warns against enabling the 'reusable' parameter in the PostProcess constructor, as it leads to inefficient texture swapping and frequent render bundle cache invalidation, especially in non-compatibility mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUMiscellaneous.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIf setting manually the `textureSampler` property in a `onApply` observer, set `externalTextureSamplerBinding = true` for the post process to optimize performances.\n\nIf possible, don't set the `reusable` parameter of the constructor of `PostProcess` to `true`. Else there will be a continuous swapping between two textures used as the render target of the post process, which will be especially bad when in non compatibility mode as the cached render bundle will be recreated each frame.\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewer with Multiple Attributes\nDESCRIPTION: Example showing how to configure multiple viewer attributes through DOM element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"minimal\" scene.debug=\"true\" engine.antialiasing=\"false\" model=\"https://playground.babylonjs.com/scenes/Rabbit.babylon\" configuration=\"http://example.com/viewerConfig.json\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Importing the Timeline Control from Babylon.js (typescript)\nDESCRIPTION: Shows how to import the Timeline class from the '@babylonjs/controls/timeline' package for use in your JavaScript or TypeScript code. This import is necessary to instantiate and configure the video timeline component presented in later examples.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/timeline.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Timeline } from \"@babylonjs/controls/timeline\";\n```\n\n----------------------------------------\n\nTITLE: Defining the Extended Gamepad Button Interface in TypeScript\nDESCRIPTION: Defines the `ExtendedGamepadButton` interface in TypeScript, which extends the standard `GamepadButton` interface. It includes `pressed` (boolean), `touched` (boolean), and `value` (number) properties. This interface structure represents the state data sent to observers when a controller button's state changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExtendedGamepadButton extends GamepadButton {\n  readonly pressed: boolean;\n  readonly touched: boolean;\n  readonly value: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VertexData in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Defines the VertexData structure as used in the geometries section of .babylon files. Includes arrays for positions, normals, UVs, colors, indices, and matrix mapping for skeleton/bone influences. Most fields require arrays with specific lengths and data types. Optional fields can be omitted to reduce file size, but 'positions', 'normals', 'uvs', and 'indices' are generally required for proper rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"id\\\": string,\\n\\t\\\"updatable\\\": bool,\\n\\t\\\"positions\\\": array of floats (3 per vertex),\\n\\t\\\"normals\\\": array of floats (3 per vertex),\\n\\t\\\"uvs\\\": array of floats (2 per vertex),\\n\\t\\\"uvs2\\\": array of floats (2 per vertex) which is the 2nd texture coordinates (can be omitted),\\n\\t\\\"uvs3\\\": array of floats (2 per vertex) which is the 3nd texture coordinates (can be omitted),\\n\\t\\\"uvs4\\\": array of floats (2 per vertex) which is the 4nd texture coordinates (can be omitted),\\n\\t\\\"uvs5\\\": array of floats (2 per vertex) which is the 5nd texture coordinates (can be omitted),\\n\\t\\\"uvs6\\\": array of floats (2 per vertex) which is the 6nd texture coordinates (can be omitted),\\n\\t\\\"colors\\\": array of floats (3 per vertex) which is the per vertex color (can be omitted),\\n\\t\\\"matricesIndices\\\": array of ints (4 per vertex) which is the matrices indices for bones (can be omitted),\\n\\t\\\"matricesWeights\\\": array of floats (4 per vertex) which is the matrices weights for bones (can be omitted),\\n\\t\\\"indices\\\": array of ints (3 per face),\\n\\t\\\"tags\\\": string\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating NPM Dependencies in Babylon.js Project\nDESCRIPTION: This command updates the project's NPM dependencies to the latest versions specified by the ranges in `package.json`, or to specific versions if modified (e.g., updating Babylon.js to a preview version). It should be run after changing dependency versions in `package.json` to ensure the correct packages are installed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm update\n```\n\n----------------------------------------\n\nTITLE: Custom Google Fonts Integration in HTML\nDESCRIPTION: Demonstrates how to include custom Google Fonts in the game by adding font links to the HTML header.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/extraFeatures.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hanabi</title>\n\n    <link href=\"https://fonts.googleapis.com/css2?family=Ceviche+One&family=Viga&display=swap\" rel=\"stylesheet\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining Oimo as an AMD Module for Babylon.js - JavaScript\nDESCRIPTION: Shows how to expose OIMO as a named AMD module for compatibility with Babylon.js's UMD loader. Intended for use in AMD module loaders (e.g., RequireJS) and ensures OIMO can be injected where needed. 'path/to/oimo' should reference the actual Oimo location.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndefine('oimo', ['path/to/oimo'], function(OIMO) {\n    return OIMO;\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener Pattern in TypeScript for Vaporwear 3D Experience\nDESCRIPTION: This code snippet demonstrates the implementation of an event listener pattern for handling hotspots and configuration loading in the Vaporwear 3D experience. It emulates the addEventListener pattern from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic addEventListener(type: string, callback: (data: any) => void) {\n    switch (type) {\n        case \"hotspot-hover\":\n            this._hotspotHoverCallbacks.push(callback);\n            break;\n        case \"hotspot-click\":\n            this._hotspotClickCallbacks.push(callback);\n            break;\n        case \"config-loaded\":\n            this._configLoadedCallbacks.push(callback);\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying LessThan Node Image using H3Image Component (Markdown)\nDESCRIPTION: Utilizes the H3Image component to embed an image related to the 'Less Than' logical node for the Babylon.js NGE documentation. It defines the image title ('LessThan'), file path ('/img/tools/nge/lessThan.jpg'), and alternative text ('Less Than node').\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<H3Image title=\"LessThan\" image=\"/img/tools/nge/lessThan.jpg\" alt=\"Less Than node\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Viewer Element\nDESCRIPTION: Example showing how to configure a custom viewer element with shared configuration options\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/viewerConfigurator.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nConfigureCustomViewerElement(\"my-babylon-viewer\", options);\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Each of these Viewer instances will use the same configured environment. -->\n<my-babylon-viewer source=\"model1.glb\"></my-babylon-viewer>\n<my-babylon-viewer source=\"model2.glb\"></my-babylon-viewer>\n<my-babylon-viewer source=\"model3.glb\"></my-babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: Importing Entire Babylon.js Library - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import the entire Babylon.js library from the core ES6 module, providing access to all publicly exported objects under the 'BABYLON' namespace. Dependencies: @babylonjs/core must be installed. Use this approach for full compatibility and when you need the entire API. Key parameter: the import path must resolve to '@babylonjs/core/Legacy/legacy.js'. Output: A bundled Babylon.js namespace. Note: This defeats tree shaking benefits.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from \"@babylonjs/core/Legacy/legacy.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Basis Universal Decoder Web Worker (JavaScript)\nDESCRIPTION: Defines a web worker script (`worker.js`) for Basis Universal texture decoding. It imports the `workerFunction` specific to Basis from Babylon.js core and the Basis transcoder JavaScript module. It then calls the `workerFunction` to set up the worker.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// worker.js\nimport { workerFunction } from \"@babylonjs/core/Misc/basisWorker.js\";\nimport \"@babylonjs/core/assets/Basis/basis_transcoder.js\";\n\nworkerFunction();\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Vite Project\nDESCRIPTION: Command to create a new Vite project with interactive prompts for selecting project type. The guide recommends using Vanilla TypeScript template.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/usingVite.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init vite\n```\n\n----------------------------------------\n\nTITLE: Disabling SSAO Combine Effect\nDESCRIPTION: Disabling the combine post-process effect to view raw SSAO output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/SSAORenderPipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscene.postProcessRenderPipelineManager.disableEffectInPipeline(\"ssaopipeline\", ssao.SSAOCombineRenderEffect, cameras);\n```\n\n----------------------------------------\n\nTITLE: Installing Webpack, TypeScript, and ts-loader as Dev Dependencies - Bash\nDESCRIPTION: Shows npm install commands to add webpack, webpack-cli, typescript, and ts-loader as development dependencies for a Babylon.js TypeScript/Webpack project. Required to ensure build pipeline operates correctly. These commands will update package.json and node_modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev webpack\nnpm install --save-dev webpack-cli\nnpm install --save-dev typescript\nnpm install --save-dev ts-loader\n```\n\n----------------------------------------\n\nTITLE: Defining State Enum for 3D Showroom Experience\nDESCRIPTION: Creates an enumeration of states to formalize the different behaviors the 3D experience can have in different parts of the e-commerce site. This enables the Showroom component to change the behavior of the watch when the state changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum State {\n    Default = 0,\n    StyleSelection = 1,\n    ColorSelection = 2,\n    DetailsView = 3,\n    BuyingView = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sprite Manager for Trees in BabylonJS\nDESCRIPTION: Creates a sprite manager for handling multiple tree instances. Configures the manager with texture path, maximum sprite count, and sprite dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/trees.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spriteManagerTrees = new BABYLON.SpriteManager(\"treesManager\", \"textures/palm.png\" /* url to sprite */, 2000, {width: 512, height: 1024}, scene);\n```\n\n----------------------------------------\n\nTITLE: Configuring ForLoopBlock in BabylonJS Flow Graph\nDESCRIPTION: This code shows how to set up a ForLoopBlock for iterative execution in a flow graph. It demonstrates setting start and end indices and connecting the execution flow output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst forLoop = new FlowGraphForLoopBlock();\nforLoop.startIndex.setValue(new FlowGraphInteger(0), ctx);\nforLoop.endIndex.setValue(new FlowGraphInteger(10), ctx);\nforLoop.executionFlow.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: Cloning Emissive Texture in Material Clone Method\nDESCRIPTION: Updates the clone method to handle copying the emissive texture when cloning the material. This ensures proper duplication of all material properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.emissiveTexture && this.emissiveTexture.clone) {\n  newMaterial.emissiveTexture = this.emissiveTexture.clone();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using NPM\nDESCRIPTION: Executes `npm install` in the project's root directory to download and install all dependencies listed in the `package.json` and `package-lock.json` files. This is a necessary step after cloning the repository to set up the local development environment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Custom Vertex Function for Dynamic Terrain in JavaScript\nDESCRIPTION: Demonstrates how to use a custom vertex function to modify terrain vertices programmatically. This example creates a sine wave pattern on the terrain surface.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.useCustomVertexFunction = true;\n\nterrain.updateVertex = function (vertex, i, j) {\n  vertex.position.y = 2.0 * Math.sin(i / 5.0) * Math.cos(j / 5.0);\n};\n```\n\n----------------------------------------\n\nTITLE: Including OBJ File Loader in HTML\nDESCRIPTION: This snippet shows how to include the Babylon.js core library and the OBJ File Loader plugin in an HTML file. These script references allow the use of OBJ file loading functionality in a web application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/oBJ.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.js\"></script>\n<script src=\"babylon.objFileLoader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Mesh Property Getters\nDESCRIPTION: Methods to retrieve position and rotation Vector3 objects from BabylonJS meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n getPosition: function(name) {\n    const mesh = this.scene.getMeshByName(name);\n    if (mesh) {\n      return mesh.position;\n    }\n  },\n\n  getRotation: function(name) {\n    const mesh = this.scene.getMeshByName(name);\n    if (mesh) {\n      return mesh.rotation;\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Defining Material Objects in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Represents the JSON structure for defining a Material in a Babylon.js .babylon file. Supports various optional and required color, texture, and property fields, as well as sub-sections for fresnel parameters. Dependencies include correctly referencing texture and fresnel parameter definitions as separate objects. Limitations include the dependency on property types and that missing properties might result in fallback behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"name\\\": string,\\n\\t\\\"id\\\": string,\\n\\t\\\"tags\\\": string,\\n\\t\\\"disableDepthWrite\\\": boolean (can be omitted),\\n\\t\\\"ambient\\\": color3,\\n\\t\\\"diffuse\\\": color3,\\n\\t\\\"specular\\\": color3,\\n\\t\\\"specularPower\\\": float,\\n\\t\\\"emissive\\\": color3,\\n\\t\\\"alpha\\\": float,\\n\\t\\\"backFaceCulling\\\": boolean,\\n\\t\\\"wireframe\\\": boolean,\\n\\t\\\"diffuseTexture\\\": Texture (see below),\\n\\t\\\"ambientTexture\\\": Texture (see below),\\n\\t\\\"opacityTexture\\\": Texture (see below),\\n\\t\\\"reflectionTexture\\\": Texture (see below),\\n\\t\\\"refractionTexture\\\": Texture (see below),\\n\\t\\\"indexOfRefraction\\\": float,\\n\\t\\\"emissiveTexture\\\": Texture (see below),\\n\\t\\\"specularTexture\\\": Texture (see below),\\n\\t\\\"bumpTexture\\\": Texture (see below),\\n\\t\\\"lightmapTexture\\\": Texture (see below),\\n\\t\\\"useLightmapAsShadowmap\\\": boolean, \\n\\t\\\"checkReadyOnlyOnce\\\": boolean\\n\\t\\\"useReflectionFresnelFromSpecular\\\": boolean (can be omitted),\\n\\t\\\"useEmissiveAsIllumination\\\": boolean (can be omitted),\\n\\t\\\"diffuseFresnelParameters\\\": Fresnel parameters (see below),\\n\\t\\\"opacityFresnelParameters\\\": Fresnel parameters (see below),\\n\\t\\\"reflectionFresnelParameters\\\": Fresnel parameters (see below),\\n\\t\\\"refractionFresnelParameters\\\": Fresnel parameters (see below),\\n\\t\\\"emissiveFresnelParameters\\\": Fresnel parameters (see below)\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Production Mode via .env File (Shell/.env)\nDESCRIPTION: Setting 'NODE_ENV' to 'production' in the '.env' file configures all webpack builds within the project to run in production mode. This typically enables optimizations and disables development-specific features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nNODE_ENV=production\n```\n\n----------------------------------------\n\nTITLE: Setting UV Coordinates for Texturing\nDESCRIPTION: Demonstrates how to apply textures to specific faces using UV coordinate mapping with centers, radii, and angles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst uvArray = [\n  [18, 18, new BABYLON.Vector2(0.25, 0.75), 0.25, 0],\n  [26, 37, new BABYLON.Vector2(0.625, 0.37), 0.37, Math.PI / 2]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Animated Hand Interface for Playback\nDESCRIPTION: Interface definition for the AnimatedHand class that handles playback of recorded hand animations, including methods for initialization, model loading, and animation control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/handsAnimation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IAnimatedHand {\n\treadonly isReady:boolean;\n\treadonly isPaused:boolean;\n\treadonly isPlayed:boolean;\n\treadonly root:TransformNode;\n\treadonly mesh:AbstractMesh;\n\t\n\tinit(handDesc:Partial<TAnimatedHandDescription>):void;\n\tloadModelFromFile(url:string):Promise<boolean>;\n\tsetPosition(position:Vector3):void;\n\tsetRotation(rotation:Quaternion):void;\n\tsetScaling(scaling:number):void;\n\tsetEnabled(val:boolean):void;\n\t\n\tplay(\n\t\tdata:THandsAnimationData,\n\t\tloop?:boolean,\n\t\tonFrame?:(frameNumber:number)=>void,\n\t\tonStarted?:()=>void,\n\t\tonEnded?:()=>void\n\t):Promise<void>;\n\t\n\tmaterial:Nullable<Material>;\n\t\n\tstop():void;\n\tgoto(frame:number):void;\n\tpause(val:boolean):void;\n\t\n\treadonly isDisposed:boolean;\n\tdispose(disposeMaterialAndTextures?:boolean):void;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting High Precision for Floats in GLSL\nDESCRIPTION: This GLSL snippet demonstrates how to declare the precision for floating-point numbers within a shader. Using `precision highp float;` at the beginning of a shader ensures that float calculations use the highest available precision, which is crucial for accurate vertex position and other sensitive computations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/introToShaders.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nprecision highp float\n```\n\n----------------------------------------\n\nTITLE: Creating Meshes using deprecated Mesh method in Babylon.js\nDESCRIPTION: This snippet shows the older, deprecated method of creating meshes in Babylon.js using the Mesh class. It requires a string of parameters and a compulsory scene parameter when used with optional parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = BABYLON.Mesh.Create<MeshType>(name, required_param1, required_param2, ..., scene, optional_parameter1, ........);\n```\n\n----------------------------------------\n\nTITLE: Playing One-Off Sound Effects in Babylon.js\nDESCRIPTION: Creates and plays a short sound from a fully downloaded buffer. This approach is ideal for sound effects that should be played once in response to a specific action or event.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/sound.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sound = await BABYLON.CreateSoundAsync(\"sound\", \"<sound file URL>\");\nsound.play();\n```\n\n----------------------------------------\n\nTITLE: ArcTan Node Implementation\nDESCRIPTION: Inverse tangent function node that accepts Float, Int, Vector2, Vector3, and Vector4 inputs. Returns the inverse tangent of input value in radians.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Creating HTML3DElement with Configuration\nDESCRIPTION: Example of creating a viewer element programmatically using the HTML3DElement constructor\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/viewerConfigurator.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewerElement = new HTML3DElement(options);\ndocument.body.appendChild(viewerElement);\n```\n\n----------------------------------------\n\nTITLE: Opening Pause Menu Popup in Babylon.js with JavaScript\nDESCRIPTION: This snippet displays the pause menu when the pause button is pressed using Babylon.js's UI system. It sets the pause menu's visibility, adds it to the player UI controls, disables hit testing for the pause button, marks the game as paused, and records the current time for resuming later. Assumes pauseBtn, _pauseMenu, and playerUI are properly instantiated Babylon.js GUI controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npauseBtn.onPointerDownObservable.add(() => {\n    this._pauseMenu.isVisible = true;\n    playerUI.addControl(this._pauseMenu);\n    this.pauseBtn.isHitTestVisible = false;\n\n    //when game is paused, make sure that the next start time is the time it was when paused\n    this.gamePaused = true;\n    this._prevTime = this.time;\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Calculation using Linear Values after Gamma Decoding\nDESCRIPTION: Illustrates the correct workflow for handling gamma-encoded values within shaders. It demonstrates a value (0.25) being gamma-encoded (approximated by pow(x, 1/2.2) to 0.5326), loaded into the shader, decoded back to linear space (approximated by pow(x, 2.2) resulting back in 0.25), and then multiplied by 2.0. This yields the mathematically correct result (0.5), emphasizing the importance of performing calculations in linear space.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/preparingArtForBabylon/controllingColorSpace.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n// Gamma encoded value saved to file\npow(0.25, 1/2.2) = 0.5326\n\n// Gamma encoded value loaded into shader and decoded to linear value\npow(0.5326, 2.2) = 0.25\n\n// Linear value multiplied by 2.0\n0.25 * 2.0 = 0.5\n```\n\n----------------------------------------\n\nTITLE: Returning Loaded Character Mesh Asset\nDESCRIPTION: This snippet shows the return statement of the internal `loadCharacter` function (within `_loadCharacterAssets`). It returns an object containing the main character mesh (`outer`), which includes the collision setup and parented visual elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n    mesh: outer as Mesh\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Smart Filter to Custom Render Target\nDESCRIPTION: Shows how to configure a Smart Filter to render to a custom RenderTargetWrapper instead of the canvas, with setup and rendering implementation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howToUseSmartFilters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a SmartFilter\nconst smartFilter = new SmartFilter(\"Simplest\");\nconst titleInput = new InputBlock(smartFilter, \"logo\", ConnectionPointType.Texture, logoTexture);\ntitleInput.output.connectTo(smartFilter.output);\n\n// Tell the SmartFilter to render to RenderTargetWrapper we supply\nsmartFilter.outputBlock.renderTargetWrapper = myRenderTargetWrapper;\n\n// Create a SmartFilterRuntime\nconst engine = new ThinEngine(canvas, true);\nconst runtime = await smartFilter.createRuntimeAsync(engine);\n\n// Render one frame\nruntime.render();\n```\n\n----------------------------------------\n\nTITLE: Creating Variable Speed Rotation in BabylonJS\nDESCRIPTION: Creates a rotation animation with varying speeds by adjusting the keyframe timing positions while maintaining the same rotation values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/combineAnimations.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst yRot = new BABYLON.Animation(\"yRot\", \"rotation.y\", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n\nconst keyFramesR = [];\n\nkeyFramesR.push({\n  frame: 0,\n  value: 0,\n});\n\nkeyFramesR.push({\n  frame: 1.5 * frameRate,\n  value: 4 * Math.PI,\n});\n\nkeyFramesR.push({\n  frame: 2 * frameRate,\n  value: 8 * Math.PI,\n});\n\nyRot.setKeys(keyFramesR);\n```\n\n----------------------------------------\n\nTITLE: Including Ascii Art Post-Process Script in HTML\nDESCRIPTION: This snippet shows how to include the Ascii Art Post-Process script in an HTML file. It's a prerequisite for using the effect in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/asciiArtPP.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.asciiArtPostProcess.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Storing GLSL Shader in HTML Script Tag\nDESCRIPTION: Demonstrates embedding a GLSL fragment shader directly within an HTML document using a `<script>` tag. The `type` attribute is set to `\"application/pixelShader\"` and a unique `id` (e.g., \"LinesPixelShader\") is assigned for later reference from JavaScript.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/pixelShader\" id=\"LinesPixelShader\">\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n  varying vec2 vUV;\n  void main(void) {\n       gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Constructing VR Device Orientation Cameras in Babylon.js\nDESCRIPTION: Shows how to create different types of VR Device Orientation Cameras: Free Camera, Arc Rotate Camera, and Gamepad Camera. These cameras handle device orientation from VR devices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Parameters: name, position, scene, compensateDistortion, vrCameraMetrics\nconst camera = new BABYLON.VRDeviceOrientationFreeCamera(\"Camera\", new BABYLON.Vector3(-6.7, 1.2, -1.3), scene);\n\n// Parameters: name, alpha, beta, radius, target, scene, compensateDistortion, vrCameraMetrics\nconst camera = new BABYLON.VRDeviceOrientationArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 4, 25, new BABYLON.Vector3(0, 0, 0), scene);\n\n// Parameters: name, position, scene, compensateDistortion, vrCameraMetrics\nconst camera = new BABYLON.VRDeviceOrientationGamepadCamera(\"Camera\", new BABYLON.Vector3(-10, 5, 14));\n```\n\n----------------------------------------\n\nTITLE: Resetting Mesh Rotation Quaternion on Assignment of Rotation (JavaScript)\nDESCRIPTION: This code demonstrates that assigning a Vector3 directly to mesh.rotation in Babylon.js will automatically set mesh.rotationQuaternion to null starting from version 4.0. This is important for avoiding orientation conflicts, especially after importing models that may already use rotationQuaternion. The mesh must already exist, and the Vector3 sets a new Euler angle rotation, discarding any quaternion-based rotation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_quaternions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotation = new BABYLON.Vector3(0, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Handlebars Attribute and Element Syntax Examples in Babylon Viewer V1\nDESCRIPTION: Demonstrates three equivalent ways to specify camera behaviors in Babylon Viewer V1 using Handlebars syntax, showing how attributes and elements could be used interchangeably.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/migrationGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<babylon camera.behaviors.auto-rotate=\"0\" />\n\n<babylon>\n  <camera behaviors.auto-rotate=\"0\" />\n</babylon>\n\n<babylon>\n  <camera>\n    <behaviors auto-rotate=\"0\" />\n  </camera>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Disabling VR Mode via JavaScript\nDESCRIPTION: JavaScript configuration to disable the VR mode and button in the 360 video player through programmatic initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    \"threeSixty\": {\n        enableVR: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Special Mesh Features in Maya for Babylon.js Export\nDESCRIPTION: This code snippet outlines the mesh features supported in the Babylon.js Maya exporter. It includes support for visibility, position/rotation/scaling, geometry properties, skinning, instances, morph targets, animations, and custom attributes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Maya.md#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n- _Meshes_\n      * Visibility\n      * Position / rotation / scaling\n      \\* Geometry (position, normal, tangent, texture coordinates (2 channels))\n\n  - Skin\n    _ Instances\n    _ Morph targets (blend shapes)\n    _ Animations: Position, scaling, rotation, bones, morph weights\n    _ Custom attributes\n```\n\n----------------------------------------\n\nTITLE: Creating a GreasedLine with a Specific Width in JavaScript\nDESCRIPTION: Creates a GreasedLine and sets its uniform width using the `width` option during initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [-1, 0, 0, 1, 0, 0];\nconst line = BABYLON.CreateGreasedLine(\"line\", { points }, { width: 0.5 });\n```\n\n----------------------------------------\n\nTITLE: Creating Motion Blur Post Process in Babylon.js\nDESCRIPTION: Initialize a basic motion blur post-process effect. Requires a scene, camera, and ratio parameters to create the blur effect based on object velocities.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/motionBlurPostProcess.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar motionblur = new BABYLON.MotionBlurPostProcess(\n    \"mb\", // The name of the effect.\n    scene, // The scene containing the objects to blur according to their velocity.\n    1.0, // The required width/height ratio to downsize to before computing the render pass.\n    camera // The camera to apply the render pass to.\n);\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Visualization Test by Title via NPM\nDESCRIPTION: Demonstrates running the visualization tests non-interactively, targeting the `webgl2` engine (`--project`) and filtering by test title using the `-g` flag (grep pattern matching the test title).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:visualization -- --project=\"webgl2\" -g \"Title Of The Test\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Enums in Babylon.js\nDESCRIPTION: Example of documenting an enum for asset task states using TSDoc format with descriptions for each constant.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* Defines the list of states available for a task inside an AssetsManager\n*/\nexport enum AssetTaskState {\n    /**\n     * Initialization\n     */\n    INIT,\n    /**\n     * Running\n     */\n    RUNNING,\n    /**\n     * Done\n     */\n    DONE,\n    /**\n     * Error\n     */\n    ERROR\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing a GUIFieldset\nDESCRIPTION: Method to properly dispose of a GUIFieldset element and remove it from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiFieldset.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Getting Elements by Class Name\nDESCRIPTION: JavaScript code to retrieve elements with a specific CSS class using getElementsByClassName.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/tags.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst elements = document.getElementsByClassName(\".center\");\n```\n\n----------------------------------------\n\nTITLE: Creating Door Geometry for Exterior Walls in Babylon.js\nDESCRIPTION: This snippet generates the geometry for door openings in the exterior wall. It creates vertices, indices, and UVs for the base, left side, top, and right side of each door. The code handles multiple doors and calculates UV coordinates based on door dimensions and wall properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar doorsRemaining = doors;\nvar doorNb = 0;\n\nif (doorsRemaining > 0) {\n\t//base\n\tnbIndices = positions.length/3; // current number of indices\n\t\n\tpositions.push(innerBaseCorners[w].x, innerBaseCorners[w].y, innerBaseCorners[w].z); //tl\n\tpositions.push(outerBaseCorners[w].x, outerBaseCorners[w].y, outerBaseCorners[w].z); //bl\n\tpositions.push(innerDoorCorners[w][doorNb][0].x, innerDoorCorners[w][doorNb][0].y, innerDoorCorners[w][doorNb][0].z); //tr\n\tpositions.push(outerDoorCorners[w][doorNb][0].x, outerDoorCorners[w][doorNb][0].y, outerDoorCorners[w][doorNb][0].z); //br\n\t\n\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\n\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\t\t\t\t\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].doorSpaces[doorNb].left/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].doorSpaces[doorNb].left/maxL, exteriorUV.y); //base right\n\t\n\tindices.push(nbIndices, nbIndices + 2, nbIndices + 3, nbIndices + 3, nbIndices + 1, nbIndices);\n\t\n\t//left side\n\tnbIndices = positions.length/3; // current number of indices\n\t\n\tpositions.push(innerDoorCorners[w][doorNb][0].x, innerDoorCorners[w][doorNb][0].y, innerDoorCorners[w][doorNb][0].z); //br\n\tpositions.push(innerDoorCorners[w][doorNb][1].x, innerDoorCorners[w][doorNb][1].y, innerDoorCorners[w][doorNb][1].z); //tr\n\tpositions.push(outerDoorCorners[w][doorNb][0].x, outerDoorCorners[w][doorNb][0].y, outerDoorCorners[w][doorNb][0].z); //bl\n\tpositions.push(outerDoorCorners[w][doorNb][1].x, outerDoorCorners[w][doorNb][1].y, outerDoorCorners[w][doorNb][1].z); //tl\n\t\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y); //base right\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].doorSpaces[doorNb].door.height/maxH); //top right\n\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\n\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].doorSpaces[doorNb].door.height/maxH); //top Left\n\t\n\tindices.push(nbIndices, nbIndices + 1, nbIndices + 3, nbIndices, nbIndices + 3, nbIndices + 2);\n\t\n\t//top\n\tnbIndices = positions.length/3; // current number of indices\n\t\n\tpositions.push(innerDoorCorners[w][doorNb][1].x, innerDoorCorners[w][doorNb][1].y, innerDoorCorners[w][doorNb][1].z); //bl\n\tpositions.push(innerDoorCorners[w][doorNb][2].x, innerDoorCorners[w][doorNb][2].y, innerDoorCorners[w][doorNb][2].z); //br\n\tpositions.push(outerDoorCorners[w][doorNb][1].x, outerDoorCorners[w][doorNb][1].y, outerDoorCorners[w][doorNb][1].z); //tl\n\tpositions.push(outerDoorCorners[w][doorNb][2].x, outerDoorCorners[w][doorNb][2].y, outerDoorCorners[w][doorNb][2].z); //tr\n\t\n\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].doorSpaces[doorNb].door.width/maxL, exteriorUV.y); //base right\n\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top Left\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * walls[w].doorSpaces[doorNb].door.width/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * ply/maxH); //top right\n\t\n\tindices.push(nbIndices + 2, nbIndices + 1, nbIndices + 3, nbIndices + 2, nbIndices, nbIndices + 1);\n\t\n\t//right side\n\tnbIndices = positions.length/3; // current number of indices\n\t\n\tpositions.push(innerDoorCorners[w][doorNb][2].x, innerDoorCorners[w][doorNb][2].y, innerDoorCorners[w][doorNb][2].z); //tl\n\tpositions.push(innerDoorCorners[w][doorNb][3].x, innerDoorCorners[w][doorNb][3].y, innerDoorCorners[w][doorNb][3].z); //bl\n\tpositions.push(outerDoorCorners[w][doorNb][2].x, outerDoorCorners[w][doorNb][2].y, outerDoorCorners[w][doorNb][2].z); //tr\n\tpositions.push(outerDoorCorners[w][doorNb][3].x, outerDoorCorners[w][doorNb][3].y, outerDoorCorners[w][doorNb][3].z); //br\n\t\n\tuvs.push(exteriorUV.x , exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].doorSpaces[doorNb].door.height/maxH); //top Left\n\tuvs.push(exteriorUV.x, exteriorUV.y); //base Left\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y + (exteriorUV.w - exteriorUV.y) * walls[w].doorSpaces[doorNb].door.height/maxH); //top right\n\tuvs.push(exteriorUV.x + (exteriorUV.z - exteriorUV.x) * ply/maxL, exteriorUV.y); //base right\n\t\n\tindices.push(nbIndices, nbIndices + 3, nbIndices + 2, nbIndices, nbIndices + 1, nbIndices + 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-creating Lights with Zero Intensity for Performance in Babylon.js\nDESCRIPTION: Creates all point lights at initialization with zero intensity instead of dynamically generating them at runtime. This technique prevents shader recompilation lag by maintaining a constant lighting cost throughout the game.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst light = new PointLight(\"lantern light\", this.mesh.getAbsolutePosition(), this._scene);\nlight.intensity = 0;\nlight.radius = 2;\nlight.diffuse = new Color3(0.45, 0.56, 0.8);\nthis._light = light;\n```\n\n----------------------------------------\n\nTITLE: Defining SpriteRendererOptions Interface in Babylon.js\nDESCRIPTION: Defines the TypeScript interface for SpriteRendererOptions, which includes a pixelPerfect property for enabling pixel-perfect rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprites_introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SpriteRendererOptions {\n    pixelPerfect?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Line2D Creation in Babylon.js\nDESCRIPTION: Simple method call to create a Line2D object with specified options. Allows setting path, width, closure and UV mapping options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = line2D(\"line\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: Importing a Goldberg Mesh - Babylon.js - JavaScript\nDESCRIPTION: This snippet uses Babylon.js's ImportMeshAsync to import a .babylon file containing a Goldberg mesh, returning a promise with mesh results. The example assigns the first mesh from the result to goldbergPoly for further manipulation. This approach depends on Babylon.js's SceneLoader and assumes the .babylon file is properly exported and accessible at the given path.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"PATH TO FOLDER\" + \"file.babylon\").then((result) => {\n  const goldbergPoly = result.meshes[0];\n});\n```\n\n----------------------------------------\n\nTITLE: Confirming Node.js Server Startup in Shell Output\nDESCRIPTION: This shell output demonstrates the expected console message when the Node.js server starts successfully after running `node server.js` (e.g., via `Windows_START.BAT`). It indicates that the server is running and listening for connections on port 80.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/Running_a_local_webserver_for_BabylonJs.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nC:\\babylon>node server.js\nServer is listening on port 80\n```\n\n----------------------------------------\n\nTITLE: Tracking File Loading Progress in Babylon.js\nDESCRIPTION: This code snippet demonstrates how to track the loading progress of a file using the SceneLoaderProgressEvent in Babylon.js. It calculates the loading percentage and updates an HTML element with the progress.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/customLoadingScreen.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"https://models.babylonjs.com/CornellBox/cornellBox.glb\", scene, {\n  onProgress: function (evt) {\n    // onProgress\n    var loadedPercent = 0;\n    if (evt.lengthComputable) {\n      loadedPercent = ((evt.loaded * 100) / evt.total).toFixed();\n    } else {\n      var dlCount = evt.loaded / (1024 * 1024);\n      loadedPercent = Math.floor(dlCount * 100.0) / 100.0;\n    }\n    // assuming \"loadingScreenPercent\" is an existing html element\n    document.getElementById(\"loadingScreenPercent\").innerHTML = loadedPercent;\n  },\n}).then(function () {\n  // onSuccess\n  scene.createDefaultCamera(true, true, true);\n  scene.activeCamera.alpha = Math.PI / 2;\n  engine.hideLoadingUI();\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server for Babylon.js Project\nDESCRIPTION: Command to start the local web server in the project directory. This makes the Babylon.js project accessible via a local URL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/templates/repos/basicJSProject.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nws\n```\n\n----------------------------------------\n\nTITLE: Setting Value for GUITextarea\nDESCRIPTION: Method to set the value of the GUITextarea element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextarea.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetValue() → void\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of GUISelect in BabylonJS\nDESCRIPTION: Sets the visibility of the GUISelect element. The 'fade' parameter can be used to apply a fade effect when changing visibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade)\n```\n\n----------------------------------------\n\nTITLE: Getting and Downloading Delta Changes in Babylon.js\nDESCRIPTION: Retrieves delta changes as JSON and provides method to download them as a file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/deltaFiles.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar delta = recorder.getDelta();\n\nBABYLON.Tools.Download(JSON.stringify(delta), \"delta.json\");\n```\n\n----------------------------------------\n\nTITLE: Disposing a GUIWindow\nDESCRIPTION: Method to properly dispose of a GUIWindow element and remove it from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiWindow.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Checking GUIWindow visibility\nDESCRIPTION: Method to determine if a GUIWindow is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiWindow.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Compiler using npm\nDESCRIPTION: Commands to install TypeScript globally using npm on Mac OSX and Windows platforms. This is required for the Unity Toolkit to properly compile TypeScript code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/Projects.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMac OSX: sudo npm install -g typescript\n\nWindows: npm install -g typescript\n```\n\n----------------------------------------\n\nTITLE: Loading Lottie JSON File\nDESCRIPTION: Example of loading a Lottie animation file as a texture in BabylonJS using the LoadFromUrlAsync method\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/lottieTexture.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LottieTexture} from \"babylon-lottie\"\n\nlet lottieTexture = await LottieTexture.LoadFromUrlAsync(\"name\", \"/lottie.json\", scene, {} /*option*/)\n```\n\n----------------------------------------\n\nTITLE: Playing Sprite Animation in Babylon.js\nDESCRIPTION: Demonstrates how to animate a sprite by playing through a sequence of cells with specified parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_manager.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmySprite.playAnimation(start cell, end cell, loop, delay);\n```\n\n----------------------------------------\n\nTITLE: Initializing GDmnDATA Structure in JavaScript\nDESCRIPTION: Defines the basic data structure for storing Geodesic mesh information including vertex positions and face indices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst GDmnDATA = { \n    \"name\":\"Geodesic_m_n\", \n    \"category\":[\"Geodesic\"], \n    \"vertex\": //Array of each facet vertex positions in form [x, y, z],\n    \"face\":[ //Array of vertex indices in form [index0, index1, index2]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Test Environment for Babylon.js in NPM Package\nDESCRIPTION: Sets up a test environment in the NPM package that will later serve as a demo page. This code configures the page to allow the 3D experience to occupy the full web page, which matches the intended use in the final site.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.documentElement.style[\"overflow\"] = \"hidden\";\ndocument.documentElement.style[\"overflow-x\"] = \"hidden\";\ndocument.documentElement.style[\"overflow-y\"] = \"hidden\";\ndocument.documentElement.style.position = \"fixed\";\ndocument.documentElement.style.height = \"100vh\";\ndocument.documentElement.style.width = \"100vw\";\ndocument.documentElement.style.top = \"0px\";\ndocument.documentElement.style.left = \"0px\";\n```\n\n----------------------------------------\n\nTITLE: Logging into PrivJs Registry\nDESCRIPTION: Command for logging into the PrivJs registry before publishing a commercial package. This allows authentication with the private registry where packages can be sold to other developers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/showroomCamera.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm login --registry https://r.privjs.com\n```\n\n----------------------------------------\n\nTITLE: Property Decoration with Options in TypeScript\nDESCRIPTION: Examples of using @visibleInInspector decorator with different configuration options including min, max, and step values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/exposingProperties.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@visibleInInspector(\"number\", \"Speed\", 0.04, { min: 0, max: 1, step: 0.01 })\nprivate _speed: number = 0.04;\n\n@visibleInInspector(\"number\", \"Speed 2\", 0.04, { min: 0, step: 0.01 })\nprivate _speed2: number = 0.04;\n\n@visibleInInspector(\"Vector3\", \"Gravity\", Vector3.Zero(), { min: 0 })\nprivate _gravity2: Vector3 = Vector3.Zero();\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite Manager in Babylon.js\nDESCRIPTION: Creates a sprite manager for handling tree sprites with specified capacity and dimensions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_manager.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spriteManagerTrees = new BABYLON.SpriteManager(\"treesManager\", path to palm.png, 2000, {width: 512, height: 1024});\n```\n\n----------------------------------------\n\nTITLE: Selective Babylon.js Class Imports - JavaScript\nDESCRIPTION: Demonstrates importing only needed Babylon.js classes, such as Engine and Scene, from the ES6 modular structure. This technique enables tree shaking, reducing final bundle size as only explicitly imported classes are included. Dependencies: @babylonjs/core must be installed. Inputs: Specific Babylon.js class names. Outputs: Individually imported classes. Recommended for optimal bundle optimization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Engine, Scene } from \"@babylonjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Running Package Tests\nDESCRIPTION: Commands for running unit and visualization tests\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\nnpm run test:visualization\nnpm run test\nnpx jest\n```\n\n----------------------------------------\n\nTITLE: Combining addShape and digest Methods in Babylon.js SPS\nDESCRIPTION: This code shows how to combine the addShape() and digest() methods in the same SPS. It adds shapes from box and sphere models while also digesting a torus knot model multiple times with different parameters, demonstrating the flexibility of particle generation in SPS.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_digest.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar model = BABYLON.MeshBuilder.CreateTorusKnot(\n  \"s\",\n  { radius: 20, tube: 6, tubularSegments: 64, radialSegments: 128 },\n  scene\n);\nSPS.addShape(boxModel, 50);\nSPS.digest(model);\nSPS.addShape(sphereModel, 20);\nSPS.digest(model, { number: 10 });\nmodel.dispose();\nsphereModel.dispose();\nboxModel.dispose();\nSPS.buildMesh();\n```\n\n----------------------------------------\n\nTITLE: Scene Transition Effect Setup in BabylonJS\nDESCRIPTION: Implements a fade transition effect using custom shader and post-processing. Includes shader registration and fade level control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/extraFeatures.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nEffect.RegisterShader(\"fade\", \"precision highp float;\" + \"varying vec2 vUV;\" + \"uniform sampler2D textureSampler; \" + \"uniform float fadeLevel; \" + \"void main(void){\" + \"vec4 baseColor = texture2D(textureSampler, vUV) * fadeLevel;\" + \"baseColor.a = 1.0;\" + \"gl_FragColor = baseColor;\" + \"}\");\nlet fadeLevel = 1.0;\nconst postProcess = new PostProcess(\"Fade\", \"fade\", [\"fadeLevel\"], null, 1.0, camera);\npostProcess.onApply = (effect) => {\n  effect.setFloat(\"fadeLevel\", fadeLevel);\n};\n```\n\n----------------------------------------\n\nTITLE: Camera Control Trigger System - Vertical Rotation\nDESCRIPTION: Manages camera tilt adjustments when entering specific game areas. Controls vertical camera rotation based on player movement through festival and destination areas.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/collisionsTriggers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.mesh.intersectsMesh(this.scene.getMeshByName(\"festivalTrigger\"))) {\n    if (this._input.verticalAxis > 0) {\n        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.DOWN_TILT, 0.4);\n    } else if (this._input.verticalAxis < 0) {\n        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.ORIGINAL_TILT, 0.4);\n    }\n}\nif (this.mesh.intersectsMesh(this.scene.getMeshByName(\"destinationTrigger\"))) {\n    if (this._input.verticalAxis > 0) {\n        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.ORIGINAL_TILT, 0.4);\n    } else if (this._input.verticalAxis < 0) {\n        this._yTilt.rotation = Vector3.Lerp(this._yTilt.rotation, Player.DOWN_TILT, 0.4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Draco Compression Files Locally\nDESCRIPTION: TypeScript example showing how to configure the DracoEncoder to use local files rather than loading from the default CDN, which is useful for GDPR compliance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/glTFExporter.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DracoEncoder } from \"@babylonjs/core\";\n\nDracoEncoder.DefaultConfiguration = {\n  wasmUrl: \"/babylon-draco-files/draco_encoder_wasm_wrapper.js\",\n  wasmBinaryUrl: \"/babylon-draco-files/draco_encoder.wasm\",\n  fallbackUrl: \"/babylon-draco-files/draco_encoder.js\",\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Parallel Lines in BabylonJS\nDESCRIPTION: Creates parallel lines on either side of a given central path in the XoY plane. Takes options for inner and outer widths and returns the calculated point sets for both parallel lines. Handles angle calculations for smooth line joins.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar parallelLines = function(options, scene) {\n\n\t//Arrays for vertex positions and indices\n\tvar positions = [];\n\tvar indices = [];\n        var normals = [];\n\n        var innerWidth = options.innerWidth || 0.5;\n        var outerWidth = options.outerWidth || 0.5;\n        var path = options.path;\n\n\tvar interiorIndex;\n\t\n\t//Arrays to hold wall corner data \n\tvar innerBaseCorners = [];\n\tvar outerBaseCorners = [];\n\t\n\tvar outerData = [];\n        var innerData = [];\n\tvar angle = 0;\n\t\n\tvar nbPoints = path.length;\n\tvar line = BABYLON.Vector3.Zero();\n\tvar nextLine = BABYLON.Vector3.Zero();\n\tpath[1].subtractToRef(path[0], line);\n\n    \tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\tline.normalize();\t\t\n\tinnerData[0] = path[0].subtract(lineNormal.scale(innerWidth));\n\touterData[0] = path[0].add(lineNormal.scale(outerWidth));\n\n\tfor(let p = 0; p < nbPoints - 2; p++) {\t\n\t\tpath[p + 2].subtractToRef(path[p + 1], nextLine);\n\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));\t\t\t\n\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().z;\t\t\t\n\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\tline.normalize();\n\t\tinnerData[p + 1] = path[p + 1].subtract(lineNormal.scale(innerWidth)).subtract(line.scale(direction * innerWidth/Math.tan(angle/2)));\n\t\touterData[p + 1] = path[p + 1].add(lineNormal.scale(outerWidth)).add(line.scale(direction * outerWidth/Math.tan(angle/2)));\t\t\n\t\tline = nextLine.clone();\t\t\t\n\t}\n\tif(nbPoints > 2) {\n\t\tpath[nbPoints - 1].subtractToRef(path[nbPoints - 2], line);\n\t\tlineNormal = new BABYLON.Vector3(line.y, -1 * line.x, 0).normalize();\n\t\tline.normalize();\t\t\n\t\tinnerData[nbPoints - 1] = path[nbPoints - 1].subtract(lineNormal.scale(innerWidth));\n\t\touterData[nbPoints - 1] = path[nbPoints - 1].add(lineNormal.scale(outerWidth));\n\t}\n\telse{\n\t\tinnerData[1] = path[1].subtract(lineNormal.scale(innerWidth));\n\t\touterData[1] = path[1].add(lineNormal.scale(outerWidth));\n\t}\n\n    return {outerPoints: outerData, innerPoints: innerData};\n\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Bright Threshold in Standard Rendering Pipeline\nDESCRIPTION: This code sets the bright threshold for highlighted surfaces in the Standard Rendering Pipeline. Pixels with intensity above this threshold will create lens imperfections.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.brightThreshold = 0.8;\n```\n\n----------------------------------------\n\nTITLE: Complex Command Buffer Output Example\nDESCRIPTION: Shows the command buffer output for a more complex filter setup with multiple processing steps.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howSmartFiltersWork.md#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n----- Command buffer commands -----\n    Owner: DirectionalBlurBlock (blurIV) - Command: DirectionalBlurBlock.render\n    Owner: DirectionalBlurBlock (blurIH) - Command: DirectionalBlurBlock.render\n    Owner: DirectionalBlurBlock (blurV) - Command: DirectionalBlurBlock.render\n    Owner: DirectionalBlurBlock (blurH) - Command: DirectionalBlurBlock.render\n    Owner: BlackAndWhiteBlock (blackAndWhite) - Command: BlackAndWhiteBlock.render\n    Owner: FrameBlock (frame) - Command: FrameBlock.renderToCanvas\n-----------------------------------\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for a Specific Workspace Package via NPM\nDESCRIPTION: Shows the `npm run test` command using the `-w` flag to target a specific workspace (`@dev/core`) and `--selectProjects unit` to run only unit tests within that package. This allows for focused testing within a monorepo structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test -w @dev/core -- --selectProjects unit\n```\n\n----------------------------------------\n\nTITLE: Simple Command Buffer Output Example\nDESCRIPTION: Shows the command buffer output for a basic filter configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howSmartFiltersWork.md#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n----- Command buffer commands -----\n    Owner: OutputBlock (output) - Command: OutputBlock.render\n-----------------------------------\n```\n\n----------------------------------------\n\nTITLE: Creating Engine with Device Ratio Adaptation in Babylon.js\nDESCRIPTION: Shows how to create a Babylon.js engine with device ratio adaptation enabled for better visual quality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/optimize_your_scene.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar engine = new BABYLON.Engine(canvas, antialiasing, null, true);\n```\n\n----------------------------------------\n\nTITLE: Creating ShaderMaterial from .fx Files in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates creating a `BABYLON.ShaderMaterial` by loading shader code from external '.fx' files. The constructor takes the base name ('COMMON_NAME') of the shader files (expected to be COMMON_NAME.vertex.fx and COMMON_NAME.fragment.fx located relative to the HTML page or at a specified URL). The `./` prefix indicates a relative path. Attributes and uniforms are declared as usual.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst shaderMaterial = new BABYLON.ShaderMaterial(\"shader\", scene, \"./COMMON_NAME\", {\n  attributes: [\"position\", \"normal\", \"uv\"],\n  uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Viewer Instantiation with Configuration\nDESCRIPTION: Example of directly instantiating a Viewer with configuration options\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/viewerConfigurator.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewer = new Viewer(engine, options);\n```\n\n----------------------------------------\n\nTITLE: Defining Geometry Structures in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Shows the structure for the 'geometries' field in .babylon files, represented as an object containing an array of VertexData. This serves as the anchor for detailed geometry definitions for meshes and models. Expected input is an object with precisely named fields and a correctly structured VertexData array. Typically embedded within the main scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"vertexData\\\": array of VertexData (see below)\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Endpoint for Snippet Retrieval in Express\nDESCRIPTION: Express route handler for retrieving snippets by ID and optional version. Returns snippet content and metadata from stored files. Handles 404 errors for non-existent snippets.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/yourOwnSnippetServer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/:id/:version?\", (req, res) => {\n    const id = req.params.id;\n    const version = req.params.version || \"1\";\n    \n    const localToken = id + LOCAL_SEPARATOR + version;\n    const path = DATA_DIR + localToken + FILE_EXT;\n    \n    if (fs.existsSync(path)) {\n        const rawData = fs.readFileSync(path);\n        const parsedData = JSON.parse(rawData);\n        \n        res.status(200).json({\n            name: parsedData.name,\n            description: parsedData.description,\n            tags: parsedData.tags,\n            jsonPayload: parsedData.payload\n        });\n    } else {\n        res.status(404).send();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Shadow Generator Template Configuration in JSON\nDESCRIPTION: Example JSON configuration for a shadow generator template in the Babylon.js playground. Shows the required structure with label, documentation link, and insertText with tabbed placeholders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/pgTemplates.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"label\" : \"Setup a shadow generator\",\n    \"documentation\" : \"https://doc.babylonjs.com/divingDeeper/lights/shadows\",\n    \"insertText\" : \"var shadowGenerator = new BABYLON.ShadowGenerator(${1:size}, ${2:the_light_source});\\nshadowGenerator.getShadowMap().renderList.push(${3:the_mesh_that_casts_a_shadow});\\n${4:mesh_that_receives_the_shadow}.receiveShadows = true;\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Only the Root Particle System, Keeping SubSystems Active (JavaScript)\nDESCRIPTION: Passing false to the stop() method allows you to halt only the root particle system while letting all active sub systems continue uninterrupted. This approach is suitable when you want existing effects to persist but prevent new root emissions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/subEmitters.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nparticleSystem.stop(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Node Material\nDESCRIPTION: Shows the simplified way to create a default Node Material\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeMaterial = new BABYLON.NodeMaterial(\"node material\", scene, { emitComments: true });\nnodeMaterial.setToDefault();\n```\n\n----------------------------------------\n\nTITLE: Applying Gamma Correction in GLSL Shader (Babylon.js, GLSL)\nDESCRIPTION: This shader snippet conditionally applies gamma correction to the fragment color output if the IMAGEPROCESSINGPOSTPROCESS define is present. It raises the RGB color output to the power of 2.2, converting the color from gamma to linear space as expected by the ImageProcessingPostProcess in Babylon.js. This prevents unintended double application of gamma transform. Only insert this block if the IMAGEPROCESSINGPOSTPROCESS flag is set; otherwise, skip it to avoid redundant corrections. No external dependencies beyond standard GLSL and Babylon.js shader define conventions are required.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/image_processing.md#2025-04-23_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\n#ifdef IMAGEPROCESSINGPOSTPROCESS\n    gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(2.2));\n#endif\n```\n\n----------------------------------------\n\nTITLE: Compute Normals Node\nDESCRIPTION: Handles recomputation of normals for geometry when needed. Takes a single geometry input and outputs the geometry with recomputed normals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Individually Setting Mesh Coordinate Components in Babylon.js - JavaScript\nDESCRIPTION: This snippet shows how to set the x, y, and z components of a mesh's position individually in Babylon.js using JavaScript. Requires an existing mesh object; each line updates a single axis while preserving others. Input: numeric assignments to position.x/y/z. Output: the mesh's position is updated component-wise. Suitable for granular control over mesh placement.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/position.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.position.x = 2; //(2, 2, 1)\nmesh.position.y = 3; //(2, 3, 1)\nmesh.position.z = 4; //(2, 3, 4)\n```\n\n----------------------------------------\n\nTITLE: Game Timer Update Logic\nDESCRIPTION: Implements game timer update logic that calculates elapsed time and updates display\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (!this._stopTimer && this._startTime != null) {\n    let curTime = Math.floor((new Date().getTime() - this._startTime) / 1000) + this._prevTime;\n    this.time = curTime;\n    this._clockTime.text = this._formatTime(curTime);\n}\n```\n\n----------------------------------------\n\nTITLE: Using setAndStartTimer with Pointer Events in Babylon.js\nDESCRIPTION: Illustrates how to use setAndStartTimer with pointer events. This example processes pointer down input for 2 minutes, demonstrating the flexibility of the timer function with different observables.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet gameIsOn = true;\nBABYLON.setAndStartTimer({\n    timeout: 2 * 60 * 1000,\n    contextObservable: scene.onPointerObservable,\n    observableParameters: { mask: BABYLON.PointerEventTypes.POINTERDOWN },\n    breakCondition: () => {\n        // break if the game ended prior to this timeout\n        return !gameIsOn;\n    },\n    onEnded: () { console.log('time is over'); },\n    onTick: (data) => {\n        // data.payload is the pointerInfo object from the onPointerObservable\n        doSomethingWithTheData(data);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Particle Speed Gradient Point in Babylon.js\nDESCRIPTION: Shows how to use `removeVelocityGradient` to remove a specific gradient point previously added for particle speed (velocity factor). The argument specifies the time fraction (e.g., 0.4) of the gradient point to remove.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.removeVelocityGradient(0.4);\n```\n\n----------------------------------------\n\nTITLE: Creating Line2D Custom Mesh in Babylon.js\nDESCRIPTION: This function generates a custom mesh for a 2D line in Babylon.js. It takes a name, options (including path, width, closed, and standardUV), and a scene. The function calculates vertex positions, indices, normals, and UVs based on the provided options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar line2D = function(name, options, scene) {\n\n\t//Arrays for vertex positions and indices\n\tvar positions = [];\n\tvar indices = [];\n        var normals = [];\n\n        var width = options.width / 2 || 0.5;\n        var path = options.path;\n\tvar closed = options.closed || false;\n\tif(options.standardUV === undefined) {\n\t\tstandardUV = true;\n\t}\n\telse {\n\t\tstandardUV = options.standardUV;\n\t}\n\n\tvar interiorIndex;\n\t\n\t//Arrays to hold wall corner data \n\tvar innerBaseCorners = [];\n\tvar outerBaseCorners = [];\n\t\n\tvar outerData = [];\n        var innerData = [];\n\tvar angle = 0;\n\t\n\tvar nbPoints = path.length;\n\tvar line = BABYLON.Vector3.Zero();\n\tvar nextLine = BABYLON.Vector3.Zero();\n\tpath[1].subtractToRef(path[0], line);\n\n\tif(nbPoints > 2 && closed) {\t\n\t\tpath[2].subtractToRef(path[1], nextLine);    \n\t\tfor(let p = 0; p < nbPoints; p++) {    \n\t\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));            \n\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().y;                \n\t\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\t\tline.normalize();\n\t\t\tinnerData[(p + 1) % nbPoints] = path[(p + 1) % nbPoints].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\touterData[(p + 1) % nbPoints] = path[(p + 1) % nbPoints].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));        \t\t\t\t\n                line = nextLine.clone();        \n\t\t\tpath[(p + 3) % nbPoints].subtractToRef(path[(p + 2) % nbPoints], nextLine);    \n\t\t}\n\t}\n\telse {\n\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\tline.normalize();\t\t\n\t\tinnerData[0] = path[0].subtract(lineNormal.scale(width));\n\t\touterData[0] = path[0].add(lineNormal.scale(width));\n\t\n\t\tfor(let p = 0; p < nbPoints - 2; p++) {\t\n\t\t\tpath[p + 2].subtractToRef(path[p + 1], nextLine);\n\t\t\tangle = Math.PI - Math.acos(BABYLON.Vector3.Dot(line, nextLine)/(line.length() * nextLine.length()));\t\t\t\n\t\t\tdirection = BABYLON.Vector3.Cross(line, nextLine).normalize().y;\t\t\t\n\t\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\t\tline.normalize();\n\t\t\tinnerData[p + 1] = path[p + 1].subtract(lineNormal.scale(width)).subtract(line.scale(direction * width/Math.tan(angle/2)));\n\t\t\touterData[p + 1] = path[p + 1].add(lineNormal.scale(width)).add(line.scale(direction * width/Math.tan(angle/2)));\t\t\n\t\t\tline = nextLine.clone();\t\t\t\n\t\t}\n\t\tif(nbPoints > 2) {\n\t\t\tpath[nbPoints - 1].subtractToRef(path[nbPoints - 2], line);\n\t\t\tlineNormal = new BABYLON.Vector3(-line.z, 0, 1 * line.x).normalize();\n\t\t\tline.normalize();\t\t\n\t\t\tinnerData[nbPoints - 1] = path[nbPoints - 1].subtract(lineNormal.scale(width));\n\t\t\touterData[nbPoints - 1] = path[nbPoints - 1].add(lineNormal.scale(width));\n\t\t}\n\t\telse{\n\t\t\tinnerData[1] = path[1].subtract(lineNormal.scale(width));\n\t\t\touterData[1] = path[1].add(lineNormal.scale(width));\n\t\t}\n\t}\n     \n\tvar maxX = Number.MIN_VALUE;\n\tvar minX = Number.MAX_VALUE;\n\tvar maxZ = Number.MIN_VALUE;\n\tvar minZ = Number.MAX_VALUE;\n\t\n\tfor(let p = 0; p < nbPoints; p++) {\n\t\tpositions.push(innerData[p].x, innerData[p].y, innerData[p].z);\n\t\tmaxX = Math.max(innerData[p].x, maxX);\n\t\tminX = Math.min(innerData[p].x, minX);\n\t\tmaxZ = Math.max(innerData[p].z, maxZ);\n\t\tminZ = Math.min(innerData[p].z, minZ);\n\t}\n\n\tfor(let p = 0; p < nbPoints; p++) {\n\t\tpositions.push(outerData[p].x, outerData[p].y, outerData[p].z);\n\t\tmaxX = Math.max(innerData[p].x, maxX);\n\t\tminX = Math.min(innerData[p].x, minX);\n\t\tmaxZ = Math.max(innerData[p].z, maxZ);\n\t\tminZ = Math.min(innerData[p].z, minZ);\n\t}\n\n        for(let i = 0; i < nbPoints - 1; i++) {\n            indices.push(i, i + 1, nbPoints + i + 1);\n            indices.push(i, nbPoints + i + 1, nbPoints + i)\n        }\n\t\n\tif(nbPoints > 2 && closed) {\n\t\tindices.push(nbPoints - 1, 0, nbPoints);\n            indices.push(nbPoints - 1, nbPoints, 2 * nbPoints - 1)\n\t}\n\n\tvar normals = [];\n        var uvs =[];\n\n\tif(standardUV) {\n\t\tfor(let p = 0; p < positions.length; p += 3) {\n\t\t\tuvs.push((positions[p] - minX)/(maxX - minX), (positions[p + 2] - minZ)/(maxZ - minZ));               \n\t\t}\n\t}\n\telse {\n\t\tvar flip = 0;\n\t\tvar p1 = 0;\n\t\tvar p2 = 0;\n\t\tvar p3 = 0;\n\t\tvar v0 = innerData[0];\n\t\tvar v1 = innerData[1].subtract(v0);\n\t\tvar v2 = outerData[0].subtract(v0);\n\t\tvar v3 = outerData[1].subtract(v0);\n\t\tvar axis = v1.clone();\n\t\taxis.normalize();\n\n\t\tp1 = BABYLON.Vector3.Dot(axis,v1);\n\t\tp2 = BABYLON.Vector3.Dot(axis,v2);\n\t\tp3 = BABYLON.Vector3.Dot(axis,v3);\n\t\tvar minX = Math.min(0, p1, p2, p3);\n\t\tvar maxX = Math.max(0, p1, p2, p3);\n\t\t\n\t\tuvs[2 * indices[0]] = -minX/(maxX - minX);\n\t\tuvs[2 * indices[0] + 1] = 1;\n\t\tuvs[2 * indices[5]] = (p2 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[5] + 1] = 0;\n\t\t\n\t\tuvs[2 * indices[1]] = (p1 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[1] + 1] = 1;\n\t\tuvs[2 * indices[4]] = (p3 - minX)/(maxX - minX);\n\t\tuvs[2 * indices[4] + 1] = 0;\n\t\n\t\tfor(let i = 6; i < indices.length; i +=6) {\n\t\t\n\t\t\tflip = (flip + 1) % 2;\n\t\t\tv0 = innerData[0];\n\t\t\tv1 = innerData[1].subtract(v0);\n\t\t\tv2 = outerData[0].subtract(v0);\n\t\t\tv3 = outerData[1].subtract(v0);\n\t\t\taxis = v1.clone();\n\t\t\taxis.normalize();\n\n\t\t\tp1 = BABYLON.Vector3.Dot(axis,v1);\n\t\t\tp2 = BABYLON.Vector3.Dot(axis,v2);\n\t\t\tp3 = BABYLON.Vector3.Dot(axis,v3);\n\t\t\tvar minX = Math.min(0, p1, p2, p3);\n\t\t\tvar maxX = Math.max(0, p1, p2, p3);\n\t\t\n\t\t\tuvs[2 * indices[i + 1]] = flip + Math.cos(flip * Math.PI) * (p1 - minX)/(maxX - minX);\n\t\t\tuvs[2 * indices[i + 1] + 1] = 1;\n\t\t\tuvs[2 * indices[i + 4]] = flip + Math.cos(flip * Math.PI) * (p3 - minX)/(maxX - minX);\n\t\t\tuvs[2 * indices[i + 4] + 1] = 0;\n\t\t}\n\t}\n\t\n\tBABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\tBABYLON.VertexData._ComputeSides(BABYLON.Mesh.DOUBLESIDE, positions, indices, normals, uvs);  \t\n\tconsole.log(uvs)\t\t\n\t//Create a custom mesh  \n\tvar customMesh = new BABYLON.Mesh(name, scene);\n\n\t//Create a vertexData object\n\tvar vertexData = new BABYLON.VertexData();\n\n\t//Assign positions and indices to vertexData\n\tvertexData.positions = positions;\n\tvertexData.indices = indices;\n\tvertexData.normals = normals;\n\tvertexData.uvs = uvs;\n\n\t//Apply vertexData to custom mesh\n\tvertexData.applyToMesh(customMesh);\n\t\n\treturn customMesh;\n\t\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GUIProgress Value in Babylon.js\nDESCRIPTION: Method to set the current value of the progress bar GUI element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiProgress.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdateValue(int) → void\n```\n\n----------------------------------------\n\nTITLE: Adding Babylon.js Viewer Script Reference\nDESCRIPTION: HTML script tag to include the Babylon.js viewer library from CDN.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer.v1.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.babylonjs.com/viewer/babylon.viewer.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Basic Mesh Cloning in Babylon.js\nDESCRIPTION: Demonstrates how to create an independent copy of a mesh using the clone method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/copies.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclonedHouse = house.clone(\"clonedHouse\")\n```\n\n----------------------------------------\n\nTITLE: Installing a Private 3D Experience Package - Bash\nDESCRIPTION: Installs the private @syntheticmagus/vaporwear-experience NPM package into the project. Assumes prior authentication/access to the private registry. Input: none; Output: dependencies updated in package.json and node_modules. This command is essential for integrating custom 3D logic into the React site.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/frontend.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @syntheticmagus/vaporwear-experience\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Expandable Solid Particle System in JavaScript\nDESCRIPTION: Instantiates a `SolidParticleSystem` with the `expandable` option set to `true`. This allows particles to be added or removed after the initial creation. Requires the `BABYLON` namespace and a valid `scene` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/expandable_sps.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar sps = new BABYLON.SolidParticleSystem(\"sps\", scene, { expandable: true });\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Strategy to Performance Collector\nDESCRIPTION: Demonstrates how to add a custom strategy to the performance collector with category and visibility settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/performanceProfiler.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst someStrategy = {\n    strategyCallback: someStrategyCallback,\n    category: \"My custom category\",\n    hidden: false\n}\nperfCollector.addCollectionStrategies(someStrategy);\n```\n\n----------------------------------------\n\nTITLE: Controlling Specular Reflections in PBR Metallic-Roughness Materials\nDESCRIPTION: Demonstrates three different approaches to control specular reflections in PBR materials: using only metallicReflectanceTexture, using only reflectanceTexture, or using KHR_material_specular textures with both metallicReflectanceTexture and reflectanceTexture together.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/masterPBR.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// creating material from scratch using only metallicReflectanceTexture \n// metReflectTex.rgb * metallicReflectanceColor scaled \n// by metReflectTex.a * metallicF0Factor\nlet pbrMat = new BABYLON.PBRMaterial(\"pbrMat\", scene);\npbrMat.metallicF0Factor = 0.9;\npbrMat.metallicReflectanceColor = new BABYLON.Color3(0.63, 0.12, 0.12);\npbrMat.metallicReflectanceTexture = new BABYLON.Texture(\"metReflectTex.png\", scene);\n\n// creating material from scratch using only reflectanceTexture\n// reflectTex.rgb * metallicReflectanceColor scaled by metallicF0Factor\nlet pbrMat = new BABYLON.PBRMaterial(\"pbrMat\", scene);\npbrMat.metallicF0Factor = 0.9;\npbrMat.metallicReflectanceColor = new BABYLON.Color3(0.63, 0.12, 0.12);\npbrMat.reflectanceTexture = new BABYLON.Texture(\"reflectTex.png\", scene);\n\n// creating material from KHR_material_specular textures\n// specularColorTexture.rgb * metallicReflectanceColor scaled \n// by specularTexture.a * metallicF0Factor\nlet pbrMat = new BABYLON.PBRMaterial(\"pbrMat\", scene);\npbrMat.metallicF0Factor = 0.9;\npbrMat.metallicReflectanceColor = new BABYLON.Color3(0.63, 0.12, 0.12);\npbrMat.metallicReflectanceTexture = new BABYLON.Texture(\"specularTexture.png\", scene);\npbrMat.reflectanceTexture = new BABYLON.Texture(\"specularColorTexture.png\", scene);\npbrMat.useOnlyMetallicFromMetallicReflectanceTexture = true;\n```\n\n----------------------------------------\n\nTITLE: Page Metadata YAML Example\nDESCRIPTION: Example of YAML metadata section for documentation pages including title, description, and related content\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Node Material\nimage: /img/pageImages/nodeMaterial.jpg\ndescription: The Node Material is a simple, highly customizable material that you can build yourself piece by piece. Combined with the powerful node-based editor, you can easily create stunning custom GPU shaders and FX for your Babylon.js scenes.\nkeywords: shaders, glsl, node editor, graphics, GPU program, material, NME, Node Material, Node Material Editor\nfurther-reading:\n  - title: Dedicated NME Forum Examples\n    url: https://forum.babylonjs.com/t/node-materials-examples/6048\nvideo-content:\n  - title: Node-Based Procedural Textures\n    url: https://youtu.be/qqMuuSM7GvI\n---\n```\n\n----------------------------------------\n\nTITLE: Including Required External Resources for AMP 360 Video\nDESCRIPTION: HTML code to include necessary dependencies: pointer events polyfill (pep.js) and Azure Media Player resources (CSS and JavaScript).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Link to pep.js to ensure pointer events work consistently in all browsers -->\n<script src=\"https://code.jquery.com/pep/0.4.1/pep.js\"></script>\n\n<!-- Link to the AMP resources -->\n<link href=\"https://amp.azure.net/libs/amp/2.2.3/skins/amp-default/azuremediaplayer.min.css\" rel=\"stylesheet\">\n<script src=\"https://amp.azure.net/libs/amp/2.2.3/azuremediaplayer.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Examining the Effect of Particle Spacing on Speed Increase in Babylon.js\nDESCRIPTION: Babylon.js Playground, related to #1DJ7RH, illustrating how the initial spacing between particles affects the outcome of sequential collisions and the resulting increase in particle speed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Slow_Collide.md#2025-04-23_snippet_2\n\nLANGUAGE: babylonjs-playground\nCODE:\n```\n<Playground id=\"#1DJ7RH#2\" title=\"Increases Speed with More Spacing\" description=\"Shows the effect of spacing\"/>\n```\n\n----------------------------------------\n\nTITLE: Advancing Dialogue with Player Input in Babylon.js with JavaScript\nDESCRIPTION: This snippet manages dialogue progression using a next button in Babylon.js. It increments the transition and dialogue frame when the player clicks 'next', and triggers the transition to the game when the last dialogue frame is reached by updating control states, showing a loading UI, and setting canplay. Usage depends on Babylon.js GUI elements, with next representing a UI button and several control variables for dialogue state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnext.onPointerUpObservable.add(() => {\n    if (transition == 8) {\n        //once we reach the last dialogue frame, goToGame\n        this._cutScene.detachControl();\n        this._engine.displayLoadingUI(); //if the game hasn't loaded yet, we'll see a loading screen\n        transition = 0; //since we only want to go through this block once\n        canplay = true; //signals that we can progress to the game since we've completed the dialogue sequence\n    } else if (transition < 8) {\n        // 8 frames of dialogue\n        transition++;\n        dialogue.cellId++;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphical Interface for CloudBis Texture Properties\nDESCRIPTION: This JavaScript snippet shows how to add UI controls for customizing the CloudBis procedural texture properties. It uses the addPToptions helper function to create controls for skyColor and cloudColor properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/proceduralTextureForTexLibrary.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncase \"cloudBis\":\ncurrentTexture = cloudBis;\naddPToptions(cloudBis, ['skyColor', 'cloudColor']);\nbreak;\n```\n\n----------------------------------------\n\nTITLE: Modifying Switch Cases in Babylon.js Flow Graph\nDESCRIPTION: Demonstrates how to add or remove cases from a SwitchBlock in the flow graph. Adding a case creates a new output, while removing a case removes the corresponding output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nswitchBlock.addCase(5); // adds `out_5`\nswitchBlock.removeCase(0); // removes `out_0`\n```\n\n----------------------------------------\n\nTITLE: Listening for Multiple Keyboard Keys in Babylon.JS\nDESCRIPTION: This snippet demonstrates how to listen for multiple keyboard keys (z, q, s, d) in a single decorator. The method is called when any of the specified keys is triggered, making it useful for implementing movement controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/listeningEvents.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@onKeyboardEvent([\"z\", \"q\", \"s\", \"d\"], KeyboardEventTypes.KEYUP)\nprotected _keyup(info: KeyboardInfo): void {\n    console.log(info.event.key);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Emissive Texture Support to Vertex Shader Header\nDESCRIPTION: Defines variables and uniforms needed for emissive texture support in the vertex shader header, including UV coordinates, matrix transformation, and texture information.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n#ifdef EMISSIVE\nvarying vec2 vEmissiveUV;\nuniform mat4 emissiveMatrix;\nuniform vec2 vEmissiveInfos;\n#endif\n```\n\n----------------------------------------\n\nTITLE: Tracking Animation Image Loading in Babylon.js with JavaScript\nDESCRIPTION: This snippet demonstrates how to monitor the loading of animation images by incrementing a counter whenever an animation image finishes loading. It uses the onImageLoadedObservable event of a Babylon.js sprite or sprite animation and updates the anims_loaded variable to keep track. Requires Babylon.js and assumes beginning_anim is a valid image animation object; this mechanism helps ensure that cutscene animations do not begin until all assets are available.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbeginning_anim.onImageLoadedObservable.add(() => {\n    anims_loaded++;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Oimo Dependency for Physics Engine Support - Shell\nDESCRIPTION: Provides the npm install command to add the Oimo physics engine as a dependency for projects utilizing Babylon.js's physics features. Required if you wish to use Oimo directly. After installation, UMD definitions will allow Babylon.js to detect Oimo automatically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm install oimo\n```\n\n----------------------------------------\n\nTITLE: Demo: Transform Feedback Buffer (GPU Particles) in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: #PU4WYI) related to the 'Transform feedback buffer' feature, used by Babylon.js to implement GPU particles by updating vertex buffers from the GPU. This feature is not supported on WebGL1. Note: The Playground title is 'Power Of Two Textures', which appears inconsistent with the feature described.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#PU4WYI\" title=\"Power Of Two Textures\" description=\"Power Of Two Textures\"/>\n```\n\n----------------------------------------\n\nTITLE: Changing Option Value in GUISelect\nDESCRIPTION: Changes an existing option's value in the GUISelect. This method allows for updating the value of a specific option without removing and re-adding it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchangeItem(oldValue, newValue)\n```\n\n----------------------------------------\n\nTITLE: Mapping OBOA Overlap Facets to GDmnDATA in JavaScript\nDESCRIPTION: This `Primary` prototype method maps the calculated iso-vector data for facets overlapping edges OB and OA (`isoVecsOBOA`) to the global `GDmnDATA` structure for a given face number (`faceNb`). It constructs unique vertex identifiers based on type and coordinates, referencing the current face (`faceNb`) if the type is 1, or an adjacent face (`fr`) otherwise. It looks up indices using `vecToIdx` and pushes the triangle indices into `GDmnDATA.face`. Requires `IDATA`, `vecToIdx`, and `GDmnDATA`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPrimary.prototype.OBOAtoGDmnDATA = function (faceNb) {\n    const fr = IDATA.edgematch[faceNb][0];\n    for (let i = 0; i < this.isoVecsOBOA.length; i++) {\n        const temp = [];\n        for (let j = 0; j < 3; j++) {\n            if (this.vertexTypes[i][j] === 1) {\n                temp.push(faceNb + \"|\" + this.isoVecsOBOA[i][j].x + \"|\" + this.isoVecsOBOA[i][j].y);\n            }\n            else {\n                temp.push(fr + \"|\" + this.isoVecsOBOA[i][j].x + \"|\" + this.isoVecsOBOA[i][j].y);\n            }\n        }\n        GDmnDATA.face.push([this.vecToIdx[temp[0]], this.vecToIdx[temp[1]], this.vecToIdx[temp[2]]]);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Shader Program\nDESCRIPTION: Example of importing shader program and uniforms generated by the build process from a GLSL fragment shader file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/creatingNewBlocks.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { uniforms, shaderProgram } from \"./compositionBlock.fragment.js\";\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core Package with Yarn\nDESCRIPTION: Command to install the @babylonjs/core package using Yarn package manager. This is the ES6 module version of Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_ReactJS.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Transforming LinearCloner Root in BabylonJS\nDESCRIPTION: Examples of scaling and rotating all clones by transforming the root node of the LinearCloner.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/linearCloner.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlc.root.scaling.y = 2;\nlc.root.rotation.x = Math.PI / 4;\n```\n\n----------------------------------------\n\nTITLE: Filtering Unit Tests by Filename in a Workspace via NPM\nDESCRIPTION: Executes unit tests within the `@dev/core` workspace, filtering them using Jest's `-i` flag (equivalent to `--testPathIgnorePatterns` negation or part of `--testPathPattern`) to run only tests whose filenames contain the string \"material\". Useful for running specific test files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test -w @dev/core -- --selectProjects unit -i \"material\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Collision Response with intersectsMesh in Babylon.js (JavaScript)\nDESCRIPTION: This code block shows collision-response logic where the program checks for an intersection between sphere and wall meshes. When a collision is detected via intersectsMesh, one code path (e.g., bouncing the sphere) is executed; otherwise, another path moves the sphere. Dependencies include Babylon.js and the pre-existence of both meshes. The snippet is framed to run in a per-frame loop to capture fast-moving collisions, and the consequences of mesh speeds exceeding their size are discussed in the file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Issues.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif(sphere.intersectsMesh(wall)) {\n    //bounce sphere off wall\n}\nelse {\n    //move sphere left\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Geodesic Polyhedron Generation Sequence in JavaScript\nDESCRIPTION: This snippet demonstrates the sequence of function calls required to generate the complete Geodesic Polyhedron data. It initializes a `Primary` object (`PT`), calculates coefficients and inner facets, determines edge vectors (ABOB), calculates rotated vectors for other overlaps (OBOA, BAOA), and then iterates through each face (`f`) of the base structure (`IDATA`). Inside the loop, it maps the face, adds inner facets to `GDmnDATA`, and conditionally adds overlap facets (ABOB, OBOA, or BAOA) based on edge matching information stored in `IDATA.edgematch`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nPT = CreatePrimary(m, n);\n   PT.SetIndices();\n   PT.CalcCoeffs();\n   PT.InnerFacets();\n   PT.EdgeVecsABOB();\n   PT.ABOBtoOBOA();\n   PT.ABOBtoBAOA();\n   for (f = 0; f < IDATA.face.length; f++) {\n       PT.MapToFace(f);\n       PT.InnerToGDmnData(f);\n       if(IDATA.edgematch[f][1] === \"B\") {\n            PT.ABOBtoGDmnDATA(f);\n       };\n       if(IDATA.edgematch[f][1] === \"O\") {\n            PT.OBOAtoGDmnDATA(f);\n       };\n       if(IDATA.edgematch[f][3] === \"A\") {\n            PT.BAOAtoGDmnDATA(f);\n       };\n   };\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Color for GreasedLines in JavaScript\nDESCRIPTION: Shows how to change the default color used for subsequently created GreasedLines by modifying `GreasedLineMaterialDefaults.DEFAULT_COLOR`. Note that this change only affects lines created after this assignment, as the color is cloned for existing lines.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nGreasedLineMaterialDefaults.DEFAULT_COLOR = BABYLON.Color3.Red();\n```\n\n----------------------------------------\n\nTITLE: Creating Sprites with Sprite Packed Manager in Babylon.js\nDESCRIPTION: Example of creating a Sprite Packed Manager and a sprite instance using a packed spritesheet. The sprite's cell is referenced by its name from the JSON file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/packed_manager.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySpritePackedManager = new BABYLON.SpritePackedManager(\"spm\", \"textures/pack1.png\", 4);\n\nconst sprite = new BABYLON.Sprite(\"sprite\", mySpritePackedManager);\nsprite.cellRef = \"spot.png\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame-by-Frame Animation Loop in Babylon.js (JavaScript)\nDESCRIPTION: Sets up an animation loop using `scene.registerAfterRender`. In each frame, it updates the `carriage` position and rotation, and optionally the `contents` rotation (if not freight), using pre-calculated data from `carriagePositions`, `carriageRotations`, and `passengerRotations` arrays. The index `i` cycles through the animation steps.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ni = 0;\nvar nbSteps = carriagePositions.length;\nvar animate = true;\nscene.registerAfterRender(function () {\n  carrriage.position = carriagePositions[i];\n  carrriage.rotationQuaternion = carriageRotations[i];\n  if (!isFreight) {\n    contents.rotationQuaternion = passengerRotations[i];\n  }\n\n  i += 1;\n  i %= nbSteps;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Uniform Variables in Babylon.js Shaders\nDESCRIPTION: Shows how to add and update uniform variables in a custom particle effect. Demonstrates passing time as a uniform and updating it through the onBind callback.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/customizingParticles.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar customEffect = engine.createEffectForParticles(\"myParticle\", [time]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = 0;\nvar order = 0.1;\n\ncustomEffect.onBind = function () {\n  customEffect.setFloat(\"time\", time);\n\n  time += order;\n\n  if (time > 100 || time < 0) {\n    order *= -1;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating the Player Collision Mesh in TypeScript\nDESCRIPTION: Part of the `_loadCharacterAssets` function (specifically within its internal `loadCharacter` function). This snippet creates the outer collision box (`MeshBuilder.CreateBox`) for the player, makes it invisible and non-pickable but enables collision checks. It then bakes a translation into the vertices to move the mesh's origin to its bottom.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//collision mesh\nconst outer = MeshBuilder.CreateBox(\"outer\", { width: 2, depth: 1, height: 3 }, scene);\nouter.isVisible = false;\nouter.isPickable = false;\nouter.checkCollisions = true;\n\n//move origin of box collider to the bottom of the mesh (to match imported player mesh)\nouter.bakeTransformIntoVertices(Matrix.Translation(0, 1.5, 0));\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Externals to Eliminate Warnings - JavaScript\nDESCRIPTION: Configures Webpack to treat oimo, cannon, and earcut as externals, suppressing warnings when these optional Babylon.js physics or geometry dependencies are not bundled. Add or merge this externals section into your 'webpack.config.js' to clean up build output if you do not use these libraries.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n    externals: {\\n        \"oimo\": true,\\n        \"cannon\": true,\\n        \"earcut\": true\\n    },\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Babylon Modules via npm - Bash\nDESCRIPTION: Provides the bash/npm command to add Babylon.js materials and other official modules to your project, saving as dependencies. Requires npm and valid Node.js environment. Each package will be added to your node_modules and included in package.json.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs-materials [other packages]\n```\n\n----------------------------------------\n\nTITLE: Physics Joint Data Interface in BabylonJS\nDESCRIPTION: Defines the interface for physics joint data including pivot points, axes, collision settings, and native parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ninterface PhysicsJointData {\n    mainPivot?: Vector3;\n    connectedPivot?: Vector3;\n    mainAxis?: Vector3,\n    connectedAxis?: Vector3,\n    collision?: boolean\n    nativeParams?: any; //Native Oimo/Cannon data\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Path in Babylon.js\nDESCRIPTION: Creates a rectangular frame path by defining corner points in the XoY plane. The path determines the outer edge of the frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Frame.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npath  = [\n    new BABYLON.Vector3(-150, -100, 0),\n    new BABYLON.Vector3(150, -100, 0),\n    new BABYLON.Vector3(150, 100, 0),\n    new BABYLON.Vector3(-150, 100, 0)\n];\n```\n\n----------------------------------------\n\nTITLE: Building a Workspace Package - npm Shell Commands - Shell\nDESCRIPTION: This npm command builds a specified package in a monorepo workspace. The '-w @namespace/package-name' argument directs the build script to the intended package. All scripts and dependencies (as defined in package.json) must be properly set up. Building generates distribution files as per project configuration.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build -w @namespace/package-name\n```\n\n----------------------------------------\n\nTITLE: Reusing Physics Shapes with Multiple Aggregates in Babylon.js\nDESCRIPTION: Creates two sphere meshes and reuses the physics shape from the first aggregate for the second one. This technique improves performance by avoiding the recreation of identical shapes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/aggregates.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.Mesh.CreateSphere(\"sphere\", 16, 2, scene);\nconst sphere2 = sphere.clone(\"sphere2\");\n\nconst aggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1 }, scene);\nconst aggregate2 = new BABYLON.PhysicsAggregate(sphere2, aggregate.shape, { mass: 1 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Child Inclusion Predicate for BoundingBoxGizmo in Babylon.js\nDESCRIPTION: Shows how to set a predicate function to determine which children should be included when computing the bounding box.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngizmo.includeChildPredicate = (m) => {\n  return m == sphere2;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Grid Material in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a ground mesh from a height map and apply a Grid Material to it. The Grid Material is instantiated and assigned to the ground mesh's material property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/gridMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", \"textures/heightMap.png\", 100, 100, 100, 0, 10, scene, false);\nground.material = new BABYLON.GridMaterial(\"groundMaterial\", scene);\n```\n\n----------------------------------------\n\nTITLE: Loading babylon-mmd via CDN with HTML script tags\nDESCRIPTION: HTML code for including babylon-mmd as a UMD module using script tags. This approach loads Babylon.js, Havok Physics, and babylon-mmd from CDN sources.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/mmdLoader.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n<script src=\"https://cdn.babylonjs.com/havok/HavokPhysics_umd.js\"></script>\n<script src=\"https://www.unpkg.com/babylon-mmd/umd/babylon.mmd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of Digital Rain Post Process\nDESCRIPTION: This code demonstrates advanced configuration of the Digital Rain Post Process, including font customization and mix parameters for blending effects with the normal scene rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/digitalRainPP.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar postProcess = new BABYLON.DigitalRainPostProcess(\"DigitalRain\", camera, \n    {\n        font: \"30px Monospace\",\n        mixToNormal: 0.5,\n        mixToTile: 0.5        \n    });\n```\n\n----------------------------------------\n\nTITLE: Accessing the Tint Source Code Repository\nDESCRIPTION: URL pointing to the official GoogleSource repository for Tint, the shader compiler used by WebGPU. Used for staying synchronized with upstream changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUMiscellaneous.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://dawn.googlesource.com/tint\n```\n\n----------------------------------------\n\nTITLE: Checking Checkbox State in Babylon.js\nDESCRIPTION: Method to determine if a GUICheckbox element is currently checked. Returns the checked state of the checkbox.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiCheckbox.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisChecked() → void\n```\n\n----------------------------------------\n\nTITLE: Loading GUI from Snippet Server in Babylon.js\nDESCRIPTION: Creates a fullscreen UI texture and loads a GUI layout from the Babylon.js snippet server using a snippet ID.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/guiEditor.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"GUI\", true, scene);\nlet loadedGUI = await advancedTexture.parseFromSnippetAsync(\"#MMWSUI\");\n```\n\n----------------------------------------\n\nTITLE: User Authentication with NPM Package SDK\nDESCRIPTION: Example of checking user authentication status using the heyVR NPM package implementation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_heyVR.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {User} from \"@heyvr/sdk-gameplay/dist\";\n\nUser.isLoggedIn()\n    .then( () => console.log( 'User is authenticated!' ) )\n    .catch( () => console.warn( 'User is not logged in.' ) );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Navigation Mesh Web Worker\nDESCRIPTION: Configures navigation mesh computation to run in a web worker for better performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/crowdNavigation/createNavMesh.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet navigationPlugin = new BABYLON.RecastJSPlugin();\nnavigationPlugin.setWorkerURL(\"workers/navMeshWorker.js\");\n\nnavigationPlugin.createNavMesh([staticMesh], navmeshParameters,(navmeshData) =>\n{\n    console.log(\"got worker data\", navmeshData);\n    navigationPlugin.buildFromNavmeshData(navmeshData);\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack ProvidePlugin for Earcut (JavaScript)\nDESCRIPTION: Configures Webpack using the `ProvidePlugin` to make the 'earcut' library available as a global variable within the bundled application. This allows Babylon.js components like `PolygonMeshBuilder` to find and use earcut without explicit injection if they expect it globally.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    context: __dirname,\n    ...\n    plugins: [\n        new webpack.ProvidePlugin({\n            'earcut': 'earcut'\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reflecting Sprite Vertically in Babylon.js\nDESCRIPTION: Swaps vertical UV coordinates to reflect a sprite horizontally on a face.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/texturePerBoxFace.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[1] = new BABYLON.Vector4(Ubottom_left, Vtop_right, Utop_right, Vbottom_left);\n```\n\n----------------------------------------\n\nTITLE: Setting GUIWindow visibility\nDESCRIPTION: Method to show or hide a GUIWindow with optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiWindow.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer CSS Variables Example\nDESCRIPTION: Demonstrates how to use CSS variables to customize the basic styling of Babylon Viewer UI elements including colors, opacity, and hover states.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/elementStyling.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<CodePen pen=\"wBwGMQd\" tab=\"html,result\" title=\"Babylon Viewer CSS Variables\" />\n```\n\n----------------------------------------\n\nTITLE: Event Binding Configuration Example\nDESCRIPTION: Example of configuring event bindings for navbar template with pointer and drop events\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n        navBar: {\n            html: '<div class=\"button-container flex-container\">  <div id=\"fullscreen-button\" class=\"button\"> <span>Full screen</span>> </div> </div>',\n            events: {\n                pointerdown: { 'fullscreen-button': true, 'some-other-id': true },\n                drop: true\n            }\n        },\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Material Loading to Ignore Textures in JavaScript\nDESCRIPTION: Demonstrates how to set the static property `BABYLON.NodeMaterial.IgnoreTexturesAtLoadTime` to `true` in JavaScript. This global setting instructs the Babylon.js engine to skip loading any textures defined within Node Material JSON files or snippets during the parsing process (`ParseFromFileAsync` or `ParseFromSnippetAsync`). This can be useful for performance optimization when textures will be supplied dynamically later or are intentionally omitted.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.NodeMaterial.IgnoreTexturesAtLoadTime = true;\n```\n\n----------------------------------------\n\nTITLE: Template Configuration Examples\nDESCRIPTION: Multiple examples of template configuration including main viewer, loading screen and canvas setup\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    ...,\n    templates: {\n        main: {\n            html: \"<viewer></viewer><loading-screen></loading-screen>\"\n        },\n        loadingScreen: {\n            location: '#loading-screen',\n            params: {\n                loadingImage: \"data:image/png;base64,....\"\n            }\n        },\n        viewer: {\n            html: '<canvas class=\"babylonjs-canvas\"></canvas>',\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Rendering Playground Links in Markdown\nDESCRIPTION: Markdown code for embedding BabylonJS playground examples with titles and descriptions, demonstrating various GreasedLine features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n<Playground id=\"#ZRZIIZ#96\" title=\"Vertex colors\" description=\"Colorize your line using vertex colors.\" />\n<Playground id=\"#H1LRZ3#124\" title=\"Picking & intersection\" description=\"GreasedLine supports picking and ray intersections.\" />\n<Playground id=\"#7CHU6U#14\" title=\"Adding and setting points on an existing instance\" description=\"Shows how can you add or set the points on an existing instance and how to deal with existing width/colors.\" />\n<Playground id=\"#H1LRZ3#35\" title=\"Glowing lines\" description=\"Glowing lines.\" />\n<Playground id=\"#H1LRZ3#97\" title=\"Arrows\" description=\"You can easily create arrows with GreasedLine.\" />\n<Playground id=\"#H1LRZ3#60\" title=\"Curves\" description=\"Example of drawing a colorful curve.\" />\n<Playground id=\"#H1LRZ3#241\" title=\"Drawing text\" description=\"You can also draw text with GreasedLine.\" />\n<Playground id=\"#H1LRZ3#121\" title=\"GetPositionOnLineByVisibility tool function example\" description=\"Finding the last visible position on the line when using the visibility option.\" />\n<Playground id=\"#H1LRZ3#136\" title=\"Cloning\" description=\"Cloning the GreasedLine mesh and it's material.\" />\n<Playground id=\"#H1LRZ3#655\" title=\"Serialization and parsing\" description=\"Serializing and parsing the GreasedLine mesh and it's material.\" />\n<Playground id=\"#H1LRZ3#542\" title=\"Thin instances\" description=\"How to deal with thin instances and instance colors.\" />\n<Playground id=\"#H1LRZ3#194\" title=\"Using PBR material\" description=\"Example of using GreasedLine with PBR material.\" />\n<Playground id=\"#H1LRZ3#22\" title=\"Using PBR material with a texture\" description=\"Example of using GreasedLine with PBR material.\" />\n<Playground id=\"#H1LRZ3#193\" title=\"PBR sphere demo\" description=\"Example of using GreasedLineTools mesh to lines function with PBR material.\" />\n<Playground id=\"#H1LRZ3#130\" title=\"PBR sphere demo with a mesh to line predicate\" description=\"Example of using GreasedLineTools mesh to lines function with PBR material and a predicate which you can use to modify the lines or omit them.\" />\n<Playground id=\"#H1LRZ3#123\" title=\"Mesh to 'opaque' lines example with PBR\" description=\"Another example of using GreasedLineTools mesh to lines function with PBR material with a trick to make the wireframe mesh opaque.\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility Method in GUIColor\nDESCRIPTION: Method to control the visibility of the color picker element. Takes a boolean parameter to set visibility state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiColor.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool: fade) → void\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Particle Update Function in Babylon.js\nDESCRIPTION: Assigns a custom update function to the SPS that will be called for each particle during the setParticles() method. This is the primary way to implement custom animation behavior for particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_animate.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.updateParticle = myUpdateParticle\n```\n\n----------------------------------------\n\nTITLE: Path Animation Turn Logic in Babylon.js\nDESCRIPTION: Implements turn logic for path animation using distance tracking and array index management.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/walkpath.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (distance > track[p].dist) {        \n    sphere.rotate(BABYLON.Axis.Y, track[p].turn, BABYLON.Space.LOCAL);\n    p +=1;\n    p %= track.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Tags Usage Example\nDESCRIPTION: Comprehensive example demonstrating various tag operations including adding, removing, and querying tags.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/tags.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myJSObj1 = {};\nBABYLON.Tags.AddTagsTo(myJSObj1, \"tag1 tag2\");\n\nconst myJSObj2 = {};\nBABYLON.Tags.AddTagsTo(myJSObj2, \"tag3 tag4 tag5\");\n\nconst myJSObj3 = {};\nBABYLON.Tags.EnableFor(myJSObj3);\n\nconst myJSObj4 = {};\n\nmyJSObj4.hasTags(); // TypeError: undefined is not a function\nBABYLON.Tags.HasTags(myJSObj4); // false\n\nmyJSObj3.hasTags(); // false\nBABYLON.Tags.HasTags(myJSObj3); // false\n\nmyJSObj2.hasTags(); // true\nmyJSObj1.hasTags(); // true\n\nmyJSObj1.matchesTagsQuery(\"tag1\"); // true\nmyJSObj1.matchesTagsQuery(\"tag2\"); // true\nmyJSObj1.matchesTagsQuery(\"tag1 || tag2\"); // true\nmyJSObj1.matchesTagsQuery(\"tag1 && tag2\"); // true\nmyJSObj1.matchesTagsQuery(\"tag3\"); // false\nmyJSObj1.matchesTagsQuery(\"!tag3\"); // true\nmyJSObj1.matchesTagsQuery(\"tag1 && tag3\"); // false\nmyJSObj1.matchesTagsQuery(\"tag1 || tag3\"); // true\nmyJSObj1.matchesTagsQuery(\"tag1 && !tag3\"); // true\n\nmyJSObj1.removeTags(\"tag1\");\n\nmyJSObj1.matchesTagsQuery(\"tag1 && !tag3\"); // false\n\nmyJSObj2.removeTags(\"tag4 tag3 tag5\");\n\nmyJSObj2.hasTags(); // false\n\nBABYLON.Tags.DisableFor(myJSObj2);\n\nmyJSObj2.hasTags(); // TypeError: undefined is not a function\n\nmyJSObj3.matchesTagsQuery(\"\"); // false\nmyJSObj3.matchesTagsQuery(); // true\n\nmyJSObj4.matchesTagsQuery(\"\"); // TypeError: undefined is not a function\nmyJSObj4.matchesTagsQuery(); // TypeError: undefined is not a function\n\nBABYLON.Tags.MatchesQuery(myJSObj4, \"\"); // false\nBABYLON.Tags.MatchesQuery(myJSObj4, undefined); // true\nBABYLON.Tags.MatchesQuery(myJSObj4); // true\n```\n\n----------------------------------------\n\nTITLE: Multiple Lines Definition\nDESCRIPTION: Example of defining multiple lines using a 2D array structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [\n  [-10, 0, 0, 0, 10, 0],\n  [0, 10, 0, 10, 0, 0]\n];\n```\n\n----------------------------------------\n\nTITLE: Calculating Random Point on Facet\nDESCRIPTION: Generates a random point within a triangular facet using lambda and mu parameters\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/InnerMeshPoints.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlamda = BABYLON.Scalar.RandomRange(0, 1);\nmu = BABYLON.Scalar.RandomRange(0, 1);\nfacetPoint = vertex0.add(vec0.scale(lambda)).add(vec1.scale(lambda * mu));\n```\n\n----------------------------------------\n\nTITLE: Running Development Watch Command\nDESCRIPTION: Command to watch and serve development assets in one operation\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx build-tools --command dev-watch --watch-assets --watch-declarations --serve\n```\n\n----------------------------------------\n\nTITLE: Listening for Player Additions on Colyseus Client (TypeScript)\nDESCRIPTION: This client-side code snippet shows how to listen for players being added to the Colyseus room's state. After successfully joining the room (`room` object obtained via `joinOrCreate`), it attaches an `onAdd` listener to the `room.state.players` map. This callback function executes whenever a new player is added to the map on the server, logging the event and the new player's `sessionId`. Requires a connected Colyseus `room` object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// (...)\n\n// connect with the room\ncolyseusSDK.joinOrCreate(\"my_room\").then(function (room) {\n  // listen for new players\n  room.state.players.onAdd((player, sessionId) => {\n    //\n    // A player has joined!\n    //\n    console.log(\"A player has joined! Their unique session id is\", sessionId);\n  });\n});\n\n// (...)\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Controller in BabylonJS\nDESCRIPTION: Constructor for PlayerInput class that sets up keyboard event handling using BabylonJS ActionManager. Registers keydown and keyup events and stores them in an inputMap.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(scene: Scene) {\n    scene.actionManager = new ActionManager(scene);\n\n    this.inputMap = {};\n    scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyDownTrigger, (evt) => {\n        this.inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == \"keydown\";\n    }));\n    scene.actionManager.registerAction(new ExecuteCodeAction(ActionManager.OnKeyUpTrigger, (evt) => {\n        this.inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == \"keydown\";\n    }));\n\n    scene.onBeforeRenderObservable.add(() => {\n        this._updateFromKeyboard();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Playground Tool - npm Shell Commands - Shell\nDESCRIPTION: This command demonstrates how to start the Babylon Playground server in development. It launches the playground tool on a local development server, allowing code experimentation and testing. The workspace flag specifies the playground directory. Prerequisites include the cloned repository and Node.js/npm. Output is hosted at the local tool port.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve -w @tools/playground\n```\n\n----------------------------------------\n\nTITLE: Terrain Update Lifecycle Functions in BabylonJS\nDESCRIPTION: Implementation of beforeUpdate and afterUpdate functions for terrain processing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst maxD2 = 0.0;\nterrain.beforeUpdate = function() {\n  maxD2 = terrain.terrainHalfSizeX * terrain.terrainHalfSizeZ;\n};\n\nterrain.afterUpdate = function() {\n  maxD2 = 0.0;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Controls Package via npm\nDESCRIPTION: This command installs the necessary Babylon.js controls package using npm. This package contains the ImageFilter control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babylonjs/controls\n```\n\n----------------------------------------\n\nTITLE: Disposing a GUILabel in Babylon.js\nDESCRIPTION: Method to dispose of a GUILabel element and delete it from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiLabel.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Demo: Multiple Render Target (MRT) in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: #NZ6P07) showing 'Multiple Render Target' (MRT), allowing several render targets to be written to in the same draw call. WebGL1 compatibility requires the WEBGL_draw_buffers extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#NZ6P07\" title=\"Multiple Render Target\" description=\"Multiple Render Target\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Default Property Name with @fromChildren Decorator in TypeScript\nDESCRIPTION: This snippet shows how to use the @fromChildren decorator without parameters, where the property name is used as the child node's name to search for.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/gettingComponents.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@fromChildren()\nprivate _light: PointLight; // the name of the child must be named \"_light\" in the Editor.\n```\n\n----------------------------------------\n\nTITLE: HTML Template Script Definition\nDESCRIPTION: Example of defining an HTML template using a script tag with custom type attribute\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"loading-screen\" type=\"text/x-babylon-viewer-template\">\n  <img class=\"loading-image\" src=\"{{loadingImage}}\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Radio Button State\nDESCRIPTION: Method to programmatically set the checked state of the radio button\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiRadio.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetChecked(value) → void\n```\n\n----------------------------------------\n\nTITLE: Constructing the Primary Triangle for Polyhedra Subdivision in JavaScript\nDESCRIPTION: Implements Primary and CreatePrimary functions to generate the internal and edge vertices of the polyhedron's primary triangle using isometric vectors, sorting them by x/y coordinates, and converting positions to Cartesian coordinates for further mapping. It handles integer subdivision parameters 'm' and 'n', calculates shared edge vertices, and tracks min/max x-coordinates for each y-level. Dependencies include IsoVector, Babylon.js, and a greatest common factor function HCF. Inputs are subdivision parameters; outputs are a Primary object holding triangulated vertex data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Primary(m, n) {\n    this.m = m;\n    this.n = n;\n\n    this.cartesian = [];\n    this.vertices = [];\n    this.max = [];\n    this.min = [];\n\n};   \n\nfunction CreatePrimary(m, n) {\n    const vertices = [];\n\n    O = new IsoVector(0, 0);\n    A = new IsoVector(m, n);\n    B = new IsoVector(-n, m + n);\n    vertices.push(O, A, B);\n\n    //max internal isoceles triangle vertices\n    for (let y = n; y < m + 1 ; y++) {\n        for (let x = 0; x < m + 1 - y; x++ ) {\n            vertices.push(new IsoVector(x, y));\n        }\n    }\n\n    //shared vertices along edges when needed\n    if (n > 0) {\n        let g = m; // hcf of m, n when n != 0\n        let m1 = 1;\n        let n1 = 0;\n        if (n !== 0) {\n            g = HCF(m, n);\n        };\n        m1 = m / g;\n        n1 = n / g; \n\n        for (let i = 1; i < g; i++) {\n            vertices.push(new IsoVector(i * m1, i * n1)); //OA\n            vertices.push(new IsoVector(-i * n1, i * (m1 + n1)));  //OB\n            vertices.push(new IsoVector(m - i * (m1 + n1), n + i * m1)); // AB\n        }; \n\n        //lower rows vertices and their rotations\n        const ratio = m / n;\n        for (let y = 1; y < n; y++) {\n            for (let x = 0; x < y * ratio; x++) {\n                vertices.push(new IsoVector(x, y));\n                vertices.push(new IsoVector(x, y).rotate120Sides(m , n));\n                vertices.push(new IsoVector(x, y).rotateNeg120Sides(m , n));\n            }\n        }\n    }\n    //order vertices by y and x\n    vertices.sort((a, b) => {\n        return a.x - b.x\n    });\n\n    vertices.sort((a, b) => {\n        return a.y - b.y\n    });\n\n    const min = new Array(m + n + 1);\n    const max = new Array(m + n + 1);\n    min.fill(Infinity);\n    max.fill(-Infinity);\n\n    let y = 0;\n    let x = 0;\n\n    let len = vertices.length;   \n    for (i = 0; i < len; i++) {\n        x = vertices[i].x;\n        y = vertices[i].y\n        min[y] = Math.min(x, min[y]);\n        max[y] = Math.max(x, max[y]);\n    };\n    const cartesian = [];\n    for (let i = 0; i < vertices.length; i++) {\n        cartesian[i] = vertices[i].toCartesianOrigin(new IsoVector(0, 0))\n    };\n\n    const P = new Primary(m, n);\n    P.vertices = vertices;\n    P.cartesian = cartesian;\n    P.min = min;\n    P.max = max;\n\n    return P;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Simple Constructors\nDESCRIPTION: Example of documenting a constructor without parameters for the MapperManager class.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MapperManager {\n  //class properties\n\n  /**\n   * Creates a new MapperManager object to manage the different implemented mappers\n   */\n  constructor() {\n    this._mappers = {\n      html: new HTMLMapper(),\n      json: new JSONMapper(),\n      dom: new DOMMapper(),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Babylon Package with nx - nx and npm Shell Commands - Shell\nDESCRIPTION: This command executes an nx build for the core 'babylonjs' package and its dependencies (dev, lts, and public variants). This ensures an efficient, dependency-aware build chain. nx benefits include avoiding redundant builds and orchestrating builds according to dependency graph. Prerequisites include nx setup and defined build scripts.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run babylonjs:build\n```\n\n----------------------------------------\n\nTITLE: Finalizing Character Asset Loading in TypeScript\nDESCRIPTION: Shows the return statement of the `_loadCharacterAssets` function in `app.ts`. It calls the internal `loadCharacter` function and uses `.then` to handle the promise, storing the resolved assets (containing the character mesh) into the `this.assets` property of the App class.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nreturn loadCharacter().then((assets) => {\n  this.assets = assets;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependencies\nDESCRIPTION: Command for installing package dependencies in workspace projects\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install packageName -w @namespace/package\n```\n\n----------------------------------------\n\nTITLE: Debug Node Implementation in Node Geometry Editor\nDESCRIPTION: The Debug node displays values passed through wires in the graph for Float, Int, Vector2, Vector3, Vector4, and Matrix types. It can be inserted between nodes or used as a terminal node for debugging values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Debug Node\ninput: Float | Int | Vector2 | Vector3 | Vector4 | Matrix\noutput: input type (passthrough)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Player State to Server with Colyseus - JavaScript\nDESCRIPTION: This snippet runs within the main Babylon.js render loop, sending the local player's position and quaternion data to the Colyseus server each frame. It ensures player state synchronization across all clients. Dependencies include Babylon.js, Colyseus client, and established player/session variables. Inputs are frame render triggers; output is player state data sent to the server in real time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nengine.runRenderLoop(function () {\n  if (room && playerViews[sessionId]) {\n    room.send(\"playData\", {\n      position: {\n        x: playerViews[sessionId].position.x,\n        y: playerViews[sessionId].position.y,\n        z: playerViews[sessionId].position.z,\n      },\n      quaternion: {\n        x: playerViews[sessionId].rotationQuaternion.x,\n        y: playerViews[sessionId].rotationQuaternion.y,\n        z: playerViews[sessionId].rotationQuaternion.z,\n        w: playerViews[sessionId].rotationQuaternion.w,\n      },\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Build/Compile Scripts in package.json (JavaScript/JSON)\nDESCRIPTION: This snippet shows typical build-related npm scripts within a package's package.json (using '@dev/core' as an example). It demonstrates the dependency chain: 'build' runs 'clean' then 'compile'; 'compile' runs 'compile:source' after the 'precompile' hook (which runs 'compile:assets'); 'compile:assets' uses 'build-tools' to process assets; 'compile:source' uses 'tsc' to compile TypeScript.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n\"build\": \"npm run clean && npm run compile\",\n\"precompile\": \"npm run compile:assets\",\n\"compile\": \"npm run compile:source\",\n\"compile:source\": \"tsc -b tsconfig.build.json\",\n\"compile:assets\": \"build-tools -c process-assets --isCore\",\n```\n\n----------------------------------------\n\nTITLE: Requiring Babylon.js Modules Using CommonJS - JavaScript\nDESCRIPTION: Demonstrates importing Babylon.js core and GUI modules via Node.js/CommonJS require statements. This approach is for projects that do not use ES6 import syntax and instead rely on Node's require function. The result assigns the imported modules to variables for use in the script.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet BABYLON = require('babylonjs');\nlet GUI = require('babylonjs-gui');\nlet materials = require('babylonjs-materials');\n```\n\n----------------------------------------\n\nTITLE: Configure Alpha-based Picking\nDESCRIPTION: Setting up alpha-based picking to ignore transparent regions of sprites.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/picking_sprites.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmySprite.useAlphaForPicking = true;\n```\n\n----------------------------------------\n\nTITLE: Mapping BAOA Overlap Facets to GDmnDATA in JavaScript\nDESCRIPTION: This `Primary` prototype method maps the calculated iso-vector data for facets overlapping edges BA and OA (`isoVecsBAOA`) to the global `GDmnDATA` structure for a given face number (`faceNb`). It constructs unique vertex identifiers based on type and coordinates, referencing the current face (`faceNb`) if the type is 1, or an adjacent face (`fr` obtained from `IDATA.edgematch[faceNb][2]`) otherwise. It looks up indices using `vecToIdx` and pushes the triangle indices into `GDmnDATA.face`. Requires `IDATA`, `vecToIdx`, and `GDmnDATA`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nPrimary.prototype.BAOAtoGDmnDATA = function (faceNb) {\n    const fr = IDATA.edgematch[faceNb][2];\n    for (let i = 0; i < this.isoVecsBAOA.length; i++) {\n        const temp = [];\n        for (let j = 0; j < 3; j++) {\n            if (this.vertexTypes[i][j] === 1) {\n                temp.push(faceNb + \"|\" + this.isoVecsBAOA[i][j].x + \"|\" + this.isoVecsBAOA[i][j].y);\n            }\n            else {\n                temp.push(fr + \"|\" + this.isoVecsBAOA[i][j].x + \"|\" + this.isoVecsBAOA[i][j].y);\n            }\n        }\n        GDmnDATA.face.push([this.vecToIdx[temp[0]], this.vecToIdx[temp[1]], this.vecToIdx[temp[2]]]);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Sprite Manager in Babylon.js\nDESCRIPTION: This code snippet shows how to create an empty sprite manager using the Babylon.js snippet server. By specifying '_BLANK' as the snippet ID, the system creates a new, empty sprite manager for further customization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_snippets.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SpriteManager.CreateFromSnippetAsync(\"_BLANK\", scene);\n```\n\n----------------------------------------\n\nTITLE: Disabling Lighting on WebXR Teleportation Ring in JavaScript\nDESCRIPTION: Configures the WebXR teleportation feature with lighting disabled on the target ring to ensure visibility regardless of scene lighting conditions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  defaultTargetMeshOptions: {\n    disableLighting: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Ray Intersection Count Loop\nDESCRIPTION: Iterative process to count ray intersections with mesh, incrementing hit counter and adjusting ray origin slightly after each hit.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/IsInside.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar hitCount = 0;\nvar pickInfo = ray.intersectsMesh(this);\nwhile (pickInfo.hit) {\t\n\thitCount++;\n\tpickInfo.pickedPoint.addToRef(direction.scale(0.00000001), point); //move point a small amout in ray direction\n\tray.origin  = point;\n\tpickInfo = ray.intersectsMesh(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Packages with nx - nx and npm Shell Commands - Shell\nDESCRIPTION: This command demonstrates usage of nx to build complex packages with dependencies efficiently. The command triggers a build for 'babylonjs-gui', but nx will detect all build dependencies (including core libraries and tools) and execute their builds in the correct sequence, skipping unchanged packages. Requires nx installation and configuration in the repository. Greatly accelerates the build process in large monorepos.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run babylonjs-gui:build\n```\n\n----------------------------------------\n\nTITLE: Defining Render Target Texture in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Details the JSON structure for a RenderTargetTexture in Babylon.js, used for offscreen or real-time render targets including cube and 3D textures. Extends the basic Texture format with refresh, size, and render list properties. Used to specify post-processing or reflective textures in scenes. Field values must be assigned correctly; misconfiguration may cause render issues or missing effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"refreshRate\\\": int,\\n\\t\\\"isCube\\\": boolean,\\n\\t\\\"is3D\\\": boolean,\\n\\t\\\"renderTargetSize\\\": int (render size of the render target texture),\\n\\t\\\"renderList\\\": string[] (list of meshes to render identified by their id)\\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Axes for Camera-Facing Alignment in Babylon.js\nDESCRIPTION: This snippet calculates three orthogonal vectors (`axis1`, `axis2`, `axis3`) used to align an object (like a plane situated between `sphere1` and `sphere2`) such that it consistently faces the camera. `axis1` is set along the line connecting the two spheres. `axis3` is calculated as perpendicular to both `axis1` and the camera's position vector (relative to the origin) using the cross product. `axis2` is then derived via another cross product to complete the orthogonal set. Requires the Babylon.js library (`BABYLON.Vector3`) and the position vectors of two objects and the camera.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/target_align.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naxis1 = (sphere1.position).subtract(sphere2.position);\naxis3 = BABYLON.Vector3.Cross(camera.position, axis1);\naxis2 = BABYLON.Vector3.Cross(axis3, axis1);  \n```\n\n----------------------------------------\n\nTITLE: Creating Capsule Shape in BabylonJS\nDESCRIPTION: Creates a physics capsule shape with two points and a radius. Useful for character limbs and ragdoll physics.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/shapes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst shape = new BABYLON.PhysicsShapeCapsule(\n    new BABYLON.Vector3(0, -0.5, 0),    // starting point of the capsule segment\n    new BABYLON.Vector3(0,  0.5, 0),    // ending point of the capsule segment\n    1,                                  // radius of the capsule\n    scene                               // scene of the shape\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Self Collision Skip - JavaScript\nDESCRIPTION: Sets the number of steps to skip when checking for self-collisions in the SSR algorithm. Used to prevent artifacts when using 16-bit depth textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/ssrRenderingPipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nssr.selfCollisionNumSkip = 2;\n```\n\n----------------------------------------\n\nTITLE: Creating a PlanePanel (Babylon.js, JavaScript)\nDESCRIPTION: This code snippet creates a PlanePanel, a container that layouts controls on a flat (plane) surface in the Babylon.js 3D GUI. No extra configuration is needed for basic usage. Useful for arranging controls in a classic 2D-like arrangement within a 3D scene. Requires the Babylon.js GUI extension.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst panel = new BABYLON.GUI.PlanePanel();\n```\n\n----------------------------------------\n\nTITLE: Setting GUIPanel Visibility in JavaScript\nDESCRIPTION: Method to set the visibility of the GUIPanel. It takes a boolean parameter to show or hide the panel, and an optional fade parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiPanel.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Appending Assets from String using AppendSceneAsync in JavaScript\nDESCRIPTION: Shows how to use BABYLON.AppendSceneAsync to load and append assets from a string containing gltf data to an existing scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.AppendSceneAsync(\"data:\" + gltfString, scene).then(function () {\n  // do something with the scene\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ports, CDN, and HTTPS via .env File (Shell/.env)\nDESCRIPTION: This snippet illustrates setting various configuration options in the '.env' file: 'TOOLS_PORT' for development tools, 'CDN_PORT' for the local Babylon server, 'CDN_BASE_URL' to specify an alternative CDN source, and 'ENABLE_HTTPS' to enable HTTPS for the local server (useful for WebXR development).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nTOOLS_PORT=1338 # port for tools like the playground or the node editor\nCDN_PORT=1337 # port for the Babylon server\nCDN_BASE_URL=\"https://cdn.babylonjs.com\" # base URL for the CDN. Defaults to localhost:1337. Useful if you want to test against a snapshot or the stable nightly\nENABLE_HTTPS=true # enable HTTPS for the Babylon server. USeful for WebXR\n```\n\n----------------------------------------\n\nTITLE: Enabling Bone Matrix Weight Cleaning on Load in Babylon.js (JavaScript)\nDESCRIPTION: Sets the static property `CleanBoneMatrixWeights` on the `BABYLON.SceneLoader` to `true`. This instructs the scene loader to automatically clean up potentially problematic bone weights (e.g., ensuring they sum to 1) for animated meshes during the loading process. This can help resolve shadow artifacts caused by imprecise skinning data. This setting should be applied *before* loading scenes or meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/shadows.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.SceneLoader.CleanBoneMatrixWeights = true;\n```\n\n----------------------------------------\n\nTITLE: Defining WebGPUBundleList Class in TypeScript\nDESCRIPTION: This class manages a list of bundles and API calls that are not supported by GPURenderBundleEncoder. It handles viewport settings, scissor rect settings, stencil reference settings, blend color settings, and occlusion queries.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUOverview.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebGPUBundleList {\n    // Implementation details not provided in the text\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of GUICheckbox in Babylon.js\nDESCRIPTION: Method to control the visibility of a GUICheckbox element. Takes a boolean parameter for visibility and an optional fade parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiCheckbox.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Checking visibility of a GUIGroup in BabylonJS\nDESCRIPTION: Method to check if the GUIGroup is visible. Returns information about the element's visibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiGroup.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Watching Development Packages for Changes via NPM\nDESCRIPTION: Runs the `watch:dev` npm script, typically in a separate terminal window. This command initiates a process that monitors source files (including code, shaders, assets like SCSS files, images) within the development packages for changes and automatically triggers rebuilds when modifications are detected, facilitating a faster development cycle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch:dev\n```\n\n----------------------------------------\n\nTITLE: Customizing WebXR Teleportation Landing Zone Appearance\nDESCRIPTION: Demonstrates how to customize the appearance of the teleportation landing zone, including colors and materials for the landing circle and rotation ring.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  defaultTargetMeshOptions: {\n    teleportationFillColor: \"#55FF99\",\n    teleportationBorderColor: \"blue\",\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet myCustomMaterial = new BABYLON.StandardMaterial(\"ground\", scene);\nmyCustomMaterial.backFaceCulling = false;\nmyCustomMaterial.diffuseColor = BABYLON.Color3.Green();\nmyCustomMaterial.diffuseTexture = new BABYLON.Texture(\"textures/grass.png\", scene);\n\nconst teleportation = featuresManager.enableFeature(WebXRFeatureName.TELEPORTATION, \"stable\", {\n  xrInput: xr.input,\n  floorMeshes: [ground],\n  defaultTargetMeshOptions: {\n    torusArrowMaterial: myCustomMaterial,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Box Builder for Mesh Creation (JavaScript)\nDESCRIPTION: Imports only the necessary 'boxBuilder' module to enable the `Mesh.CreateBox` method efficiently, reducing bundle size compared to importing the entire MeshBuilder. This utilizes tree shaking by loading only required dependencies.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/core/Meshes/Builders/boxBuilder.js\";\n```\n\n----------------------------------------\n\nTITLE: Computing Hotspot in Babylon.js\nDESCRIPTION: This snippet demonstrates how to compute a hotspot on a mesh using point indices and barycentric coordinates. It uses the GetHotSpotToRef function to calculate the world position of the hotspot.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/hotspot.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hotspotQuery = {pointIndex:[6527,6526,6525],barycentric:[0.723, 0.079, 0.196]};\nBABYLON.GetHotSpotToRef(mesh, hotspotQuery, worldPosition);\n```\n\n----------------------------------------\n\nTITLE: DOM Element Configuration Example\nDESCRIPTION: Example of configuring the viewer using DOM attributes that get converted to a JSON structure.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<babylon scene.debug=\"true\" camera.behaviors.auto-rotate=\"0\" model.url=\"https://playground.babylonjs.com/scenes/Rabbit.babylon\" configuration=\"http://example.com/viewerConfig.json\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer Element with Material Variants\nDESCRIPTION: Example of the HTML3DElement showing material variant selection controls for glTF models with multiple material options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/defaultUI.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: Building the WordPress Plugin with NPM (Shell)\nDESCRIPTION: Runs the npm build process to bundle the JavaScript assets for inclusion in the WordPress plugin. This command must be executed after source code or configuration changes in the plugin repository, especially after modifying JavaScript code or updating package.json. The expected outcome is a production-ready bundle that can be included in the PHP-based WordPress plugin, enabling new or updated 3D configurator functionality on the site. Dependency: Requires Node.js, npm, and all declared npm dependencies. Input: none. Output: Compiled assets in the plugin directory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/wordpress.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Fruit Fallin' NPM package\nDESCRIPTION: Command to install the Fruit Fallin' game as an NPM package in the Ionic project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install fruit-fallin\n```\n\n----------------------------------------\n\nTITLE: Template Visibility Control Methods\nDESCRIPTION: Promise-based helper functions for showing and hiding templates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npublic show(visibilityFunction?: (template: Template) => Promise<Template>): Promise<Template>;\npublic hide(visibilityFunction?: (template: Template) => Promise<Template>): Promise<Template>;\n```\n\n----------------------------------------\n\nTITLE: Initial Webpack Configuration\nDESCRIPTION: Basic Webpack configuration for TypeScript compilation and bundling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gettingSetUp.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst appDirectory = fs.realpathSync(process.cwd());\n\nmodule.exports = {\n    entry: path.resolve(appDirectory, \"src/app.ts\"),\n    output: {\n        filename: \"js/bundleName.js\",\n    },\n    resolve: {\n        extensions: [\".tsx\", \".ts\", \".js\"],\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.tsx?$/,\n                use: \"ts-loader\",\n                exclude: /node_modules/,\n            },\n        ],\n    },\n    mode: \"development\",\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing HtmlMesh in Babylon.js\nDESCRIPTION: Shows how to use the HtmlMesh extension to incorporate HTML content as a mesh within a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Playground id=\"#HVHYJC#5\" title=\"HtmlMesh Example\" description=\"Example of using HtmlMesh elements in your scene.\" image=\"/img/playgroundsAndNMEs/htmlMeshPG.png\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh Collision Properties in BabylonJS\nDESCRIPTION: Setup for various mesh types including ground, stairs, collision boxes, and trigger volumes. Configures visibility, collision detection, and picking properties for different mesh categories.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/collisionsTriggers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (m.name == \"ground\") {\n    m.checkCollisions = false;\n    m.isPickable = false;\n}\nif (m.name.includes(\"stairs\") || m.name == \"cityentranceground\" || m.name == \"fishingground.001\" || m.name.includes(\"lilyflwr\")) {\n    m.checkCollisions = false;\n    m.isPickable = false;\n}\nif (m.name.includes(\"collision\")) {\n    m.isVisible = false;\n    m.isPickable = true;\n}\nif (m.name.includes(\"Trigger\")) {\n    m.isVisible = false;\n    m.isPickable = false;\n    m.checkCollisions = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Helper Camera in Babylon.js\nDESCRIPTION: Shows different methods to access the camera created by helper methods\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/fastBuildWorld.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultCamera(true, true, true);\n\nvar helperCamera = scene.activeCamera;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Smart Filter Runtime\nDESCRIPTION: Shows how to create a runtime instance from a Smart Filter and render it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howSmartFiltersWork.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst runtime = await smartFilter.createRuntimeAsync(engine);\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Position in Babylon.js (JavaScript)\nDESCRIPTION: Modifies the local position of the 'sphere' mesh by setting its y-coordinate property to 1. This demonstrates how individual mesh transformations interact with parenting when calculating overall scene layout and bounding boxes. Requires 'sphere' to be a valid Babylon.js mesh or transform node object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.position.y = 1;\n```\n\n----------------------------------------\n\nTITLE: Clean Geometry Node\nDESCRIPTION: Recalculates normal direction of surfaces to resolve inverted faces. Takes a single geometry input and outputs the cleaned geometry with corrected normals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Complete Babylon.js Physics Example\nDESCRIPTION: Full HTML example demonstrating Havok physics integration with Babylon.js including scene setup and physics objects\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/usingHavok.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n    <title>Babylon.js using Havok</title>\n\n    <!-- Babylon.js -->\n    <script src=\"https://cdn.babylonjs.com/havok/HavokPhysics_umd.js\"></script>\n    <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n    <script src=\"https://cdn.babylonjs.com/gui/babylon.gui.min.js\"></script>\n\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n\n      #renderCanvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n\n      #canvasZone {\n        width: 100%;\n        height: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"canvasZone\"><canvas id=\"renderCanvas\"></canvas></div>\n    <script>\n      const canvas = document.getElementById(\"renderCanvas\");\n      const engine = new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true, disableWebGL2Support: false });\n      const createScene = async function () {\n        const scene = new BABYLON.Scene(engine);\n        const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n        camera.setTarget(BABYLON.Vector3.Zero());\n        camera.attachControl(canvas, true);\n        const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n        light.intensity = 0.7;\n        const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\n        sphere.position.y = 4;\n        const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 10, height: 10 }, scene);\n        const havokInstance = await HavokPhysics();\n        const hk = new BABYLON.HavokPlugin(true, havokInstance);\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.8, 0), hk);\n        const sphereAggregate = new BABYLON.PhysicsAggregate(sphere, BABYLON.PhysicsShapeType.SPHERE, { mass: 1, restitution: 0.75 }, scene);\n        const groundAggregate = new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\n        return scene;\n      };\n\n      createScene().then((scene) => {\n        engine.runRenderLoop(function () {\n          if (scene) {\n            scene.render();\n          }\n        });\n      });\n      window.addEventListener(\"resize\", function () {\n        engine.resize();\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Instantiating FlowGraphGetVariableBlock for Variable Access - JavaScript\nDESCRIPTION: This snippet provides a concrete example of creating a FlowGraphGetVariableBlock to access a specific variable ('myVariable') with an initial value (0) in Babylon.js. The instance is constructed via a configuration object. Once created, the block can be used to inject the variable's value into the graph, but the variable name remains immutable, enforcing consistent access. Babylon.js and the block class must be imported; the context does not need to be set for variable retrieval.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst getVariable = new FlowGraphGetVariableBlock({\n  variable: \"myVariable\",\n  initialValue: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Vite and Babylon.js Packages with npm\nDESCRIPTION: Commands to install Vite, Babylon.js core package, and the Babylon.js inspector as development dependencies for a new project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/usingVite.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vite\nnpm i -D @babylonjs/core\nnpm i -D @babylonjs/inspector\n```\n\n----------------------------------------\n\nTITLE: Implementing Steering Logic for Left Turns in Babylon.js\nDESCRIPTION: Code for handling left turns of the car by rotating front wheels and recalculating the center of rotation. When the A key is pressed, it adjusts the wheel angle, recalculates the turning radius, and repositions the pivot point accordingly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Driven.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif((map[\"a\"] || map[\"A\"]) && -Math.PI/6 < theta) {\n\tdeltaTheta = -Math.PI/252;\n\ttheta += deltaTheta;\n\tpivotFI.rotate(BABYLON.Axis.Y, deltaTheta, BABYLON.Space.LOCAL);  //turn front wheels\n\tpivotFO.rotate(BABYLON.Axis.Y, deltaTheta, BABYLON.Space.LOCAL);\n\tif(Math.abs(theta) > 0.00000001) { //when not near to 0 calculate new radius of rotation\n\t\tNR = A/2 +L/Math.tan(theta);\n\t}\n\telse { //when theta near 0 make it 0 and give NR some value\n\t\ttheta = 0;\n\t\tNR = 0;\n\t}\n\tpivot.translate(BABYLON.Axis.Z, NR - R, BABYLON.Space.LOCAL); // translate pivot to centre of rotation from current position\n\tcarBody.translate(BABYLON.Axis.Z, R - NR, BABYLON.Space.LOCAL); //as this translation will move the car translate it back to where it was\n\tR = NR;\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Locally Installed TypeScript Compiler using npx (Shell)\nDESCRIPTION: This command runs the TypeScript compiler ('tsc') installed within the specific project's dependencies, rather than a globally installed version. It's useful when an npm script for a specific task is missing, ensuring the correct tool version is used.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsc ....\n```\n\n----------------------------------------\n\nTITLE: BabylonJS Scene Component with Position Watcher\nDESCRIPTION: Vue component that manages the BabylonJS scene and watches for position updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<script>\nimport myScene from \"../scenes/MyFirstScene\";\n\nexport default {\n  name: \"BabylonScene\",\n  props: {\n    position: {\n      type: Object,\n      default() {\n        return { x: 0, y: 0, z: 0 };\n      },\n    },\n  },\n\n  watch: {\n    position(val) {\n      if (val) {\n        myScene.setPosition(\"box-green\", val.x, val.y, val.z);\n      }\n    },\n  },\n  mounted() {\n    const bjsCanvas = this.$refs.bjsCanvas;\n    if (bjsCanvas) {\n      myScene.createScene(bjsCanvas);\n    }\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disposing Radio Button\nDESCRIPTION: Method to cleanup and remove the radio button from the GUI system\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiRadio.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Setting visibility of a GUIGroup in BabylonJS\nDESCRIPTION: Method to set the visibility of the GUIGroup. Takes a boolean parameter to determine visibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiGroup.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool) → void\n```\n\n----------------------------------------\n\nTITLE: HTML Custom Element Declaration Example\nDESCRIPTION: Example of the HTML3DElement custom element usage showing the basic element syntax\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/elementInterface.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<babylon-viewer>\n```\n\n----------------------------------------\n\nTITLE: WebVR Camera Pointer Control Setup\nDESCRIPTION: Sets up pointer control for WebVR camera activation on first click.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.onPointerDown = function () {\n  scene.onPointerDown = undefined;\n  camera.attachControl(canvas, true);\n};\n```\n\n----------------------------------------\n\nTITLE: Running Visualization Tests for a Specific Engine (WebGL2) via NPM\nDESCRIPTION: Demonstrates how to execute the `test:visualization` npm script, filtering the tests to run only for the `webgl2` project using the `--project` flag provided by the underlying test runner (likely Playwright configured via Jest).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:visualization -- --project=\"webgl2\"\n```\n\n----------------------------------------\n\nTITLE: Importing Gaussian Splatting File Loader Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Gaussian Splatting File Loader Plugin statically in JavaScript. However, this method is not recommended by the documentation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/gaussianSplatting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/loaders/SPLAT/splatFileLoader\";\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Shader Files\nDESCRIPTION: GitIgnore entries to exclude auto-generated shader files from version control.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/creatingNewBlocks.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n**/*.fragment.ts\n**/*.block.ts\n```\n\n----------------------------------------\n\nTITLE: Protected Uniform Layout Builder\nDESCRIPTION: Protected method to build uniform buffer layout for light data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nprotected _buildUniformLayout(): void {\n    this._uniformBuffer.addUniform(\"vLightData\", 4);\n    this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n    this._uniformBuffer.addUniform(\"vLightSpecular\", 3);\n    this._uniformBuffer.addUniform(\"vLightGround\", 3);\n    this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n    this._uniformBuffer.addUniform(\"depthValues\", 2);\n    this._uniformBuffer.create();\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing GUISpinner in Babylon.js\nDESCRIPTION: Demonstrates how to dispose of the GUISpinner element and remove it from the GUI.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSpinner.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndispose()\n```\n\n----------------------------------------\n\nTITLE: Describing StorageRead and StorageWrite Nodes - Babylon.js - Markdown/English\nDESCRIPTION: Outlines the purpose and usage of StorageRead and StorageWrite nodes within Babylon.js node materials. StorageRead reads loop-stored data using the loopID connection, outputting the current value, while StorageWrite updates this data using both the loopID and a 'value' input. These nodes provide mechanisms to manage persistent data across iterations within a graph-based computation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/availableNodeBlocks.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### StorageRead\\n\\nUsed to read the current value of the loop stored data.\\n\\n- Inputs:\\n  - loopID: Establish the connection with the parent loop\\n- Outputs\\n  - value: The current value of the loop stored data\\n\\n### StorageWrite\\n\\nUsed to write the new value of the loop stored data.\\n\\n- Inputs:\\n  - loopID: Establish the connection with the parent loop\\n  - value: The new value of the loop stored data\\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Normal Material in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a ground mesh, instantiate a Normal Material, and apply it to the mesh. It shows the basic setup for using the Normal Material in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/normalMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 512, height: 512, subdivisions: 32 }, scene);\nvar normalMaterial = new BABYLON.NormalMaterial(\"normal\", scene);\nground.material = normalMaterial;\n```\n\n----------------------------------------\n\nTITLE: Preventing Code Splitting with Webpack LimitChunkCountPlugin (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use Webpack's `LimitChunkCountPlugin` within the `plugins` array. By setting `maxChunks` to 1, it forces Webpack to consolidate all code into a single output chunk, preventing any automatic or configured code splitting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n{\n    plugins: [\n        // ... other plugins\n        new webpack.optimize.LimitChunkCountPlugin({\n            maxChunks: 1,\n        }),\n    ],\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring 360 Video Type via JavaScript\nDESCRIPTION: JavaScript configuration example showing how to set the video format type in the plugin options when initializing programmatically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    \"threeSixty\": {\n        videoType: \"stereoscopicTopBottom\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Car Orientation in Babylon.js\nDESCRIPTION: This code sets the initial orientation of the car to align with the first normal of the path. It calculates the necessary rotation angle using the dot product.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar theta = Math.acos(BABYLON.Vector3.Dot(BABYLON.Axis.Z, normals[0]));\ncarBody.rotate(BABYLON.Axis.Y, theta, BABYLON.Space.WORLD);\n```\n\n----------------------------------------\n\nTITLE: Calculating Interpolation Step Multiplier in JavaScript\nDESCRIPTION: Calculates the `deltaI` value, which acts as a multiplier for interpolation steps when the animation speed is less than 1. It increments cyclically modulo `drag` (where `drag` is typically `Math.round(1 / speed)`), ensuring smooth movement between defined path points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar deltaI = 0;\n\ndeltaI = (deltaI + 1) % drag;\n```\n\n----------------------------------------\n\nTITLE: WebVR Device Pose Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of VR device pose data including position and orientation properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DevicePose {\n    readonly position?: Float32Array;\n    readonly linearVelocity?: Float32Array;\n    readonly linearAcceleration?: Float32Array;\n\n    readonly orientation?: Float32Array;\n    readonly angularVelocity?: Float32Array;\n    readonly angularAcceleration?: Float32Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modules from Dev Packages (JavaScript/TypeScript)\nDESCRIPTION: This code shows examples of TypeScript import statements within a project (inspector component). It demonstrates importing types and classes directly from other development packages like 'core' and 'gui' using their base names (e.g., 'core/types', 'gui/2D/controls/control'). The build system resolves these imports to the appropriate source files (dev or lts).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// load from core\nimport { Nullable } from \"core/types\";\nimport { Observer, Observable } from \"core/Misc/observable\";\nimport { IExplorerExtensibilityGroup } from \"core/Debug/debugLayer\";\n\n// load from gui\nimport { Control } from \"gui/2D/controls/control\";\nimport { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\n```\n\n----------------------------------------\n\nTITLE: Camera and Movement Updates in BabylonJS\nDESCRIPTION: Implementation of camera activation and movement updates in the game loop.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/characterMovePt1.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npublic activatePlayerCamera(): UniversalCamera {\n    this.scene.registerBeforeRender(() => {\n        this._beforeRenderUpdate();\n        this._updateCamera();\n    })\n    return this.camera;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nprivate _beforeRenderUpdate(): void {\n    this._updateFromControls();\n    //move our mesh\n    this.mesh.moveWithCollisions(this._moveDirection);\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Exposed BabylonJS Engine\nDESCRIPTION: This Vue component demonstrates how to access BabylonJS objects directly by storing the engine and scene references. It uses a timer to periodically check the FPS from the engine object and emit updates to the parent component, with proper cleanup on unmount.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <canvas ref=\"bjsCanvas\" width=\"500\" height=\"500\" />\n  </div>\n</template>\n\n<script>\nimport { createScene } from \"../scenes/MyFirstScene\";\n\nexport default {\n  name: \"BabylonScene\",\n\n  data() {\n    return {\n      scene: null,\n      engine: null,\n      interval: null,\n    };\n  },\n\n  methods: {\n    setupFpsEmitter() {\n      const interval = setInterval(() => {\n        const fps = this.engine.getFps().toFixed();\n        this.$emit(\"fps\", fps);\n      }, 1000);\n      this.interval = interval;\n    },\n  },\n  mounted() {\n    const bjsCanvas = this.$refs.bjsCanvas;\n    if (bjsCanvas) {\n      const { engine, scene } = createScene(bjsCanvas);\n      this.engine = engine;\n      this.scene = scene;\n\n      this.setupFpsEmitter();\n    }\n  },\n  unmounted() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Rotation During WebXR Teleportation in JavaScript\nDESCRIPTION: Disables the rotation capability after the initial teleportation ray is cast, preventing users from changing orientation during the teleportation process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nteleportation.rotationEnabled = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Global Settings\nDESCRIPTION: Initial Git configuration commands to set up username and email globally for commits\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n```\n\n----------------------------------------\n\nTITLE: Generating Animation Data with Speed Control in Babylon.js (JavaScript)\nDESCRIPTION: Generates arrays of positions (`carriagePositions`) and rotations (`carriageRotations`, `contentsRotations`) for animating a carriage along a path defined by `points`. It handles variable `speed`: speeds >= 1 jump between points, while speeds < 1 trigger linear interpolation between points based on the `drag` factor. It differentiates rotation logic based on the `isFreight` boolean.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar nbPoints = points.length;\nvar i = 0;\nvar deltaI = 0;\nvar pace = Math.round(speed);\nvar drag = Math.round(1 / speed);\n\nvar carriagePositions = [];\nvar carriageRotations = [];\nvar contentsRotations = [];\n\nvar carPosition = BABYLON.Vector3.Zero();\n\nwhile (i < nbPoints) {\n  if (speed >= 1) {\n    carriagePositions.push(points[i]);\n    if (isFreight) {\n      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.rotations[i]));\n    } else {\n      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.carriageRotations[i]));\n      contentsRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.passengerRotations[i]));\n    }\n    i += pace;\n  } else {\n    tempPosition.x = points[i].x + (deltaI * (points[(i + 1) % nbPoints].x - points[i].x)) / drag;\n    tempPosition.y = points[i].y + (deltaI * (points[(i + 1) % nbPoints].y - points[i].y)) / drag;\n    tempPosition.z = points[i].z + (deltaI * (points[(i + 1) % nbPoints].z - points[i].z)) / drag;\n\n    carriagePositions.push(tempPosition.clone());\n\n    if (isFreight) {\n      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.rotations[i]));\n    } else {\n      carriageRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.carriageRotations[i]));\n      contentsRotations.push(BABYLON.Quaternion.FromRotationMatrix(track.passengerRotations[i]));\n    }\n    i = Math.floor(i + (deltaI + 1) / drag);\n    deltaI = (deltaI + 1) % drag;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking GUITexture visibility in BabylonJS\nDESCRIPTION: Method to check if a GUITexture element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextures.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Defining the Vertex Shader for Wave Effect in GLSL\nDESCRIPTION: This GLSL code defines the complete vertex shader. It declares attributes for vertex position, normal, and UV coordinates, and uniforms for the transformation matrix (`worldViewProjection`), box spacing (`box_spacing`), and time (`time`). The `main` function calculates the vertical displacement using the sine function based on the vertex's x-position and time, then computes the final screen position (`gl_Position`). UV coordinates are passed to the fragment shader via `vUV`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n// Attributes\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\n// Uniforms\nuniform mat4 worldViewProjection;\nuniform float box_spacing;\nuniform float time;\n\n// Normal\nvarying vec2 vUV;\n\nvoid main(void) {\n    vec3 p = position;\n    float bn = floor(position.x / box_spacing);\n    p.y = p.y + sin(time + bn/4.0);\n    gl_Position = worldViewProjection * vec4(p, 1.0);\n\n    vUV = uv;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Dev Package using npm Workspaces (Shell)\nDESCRIPTION: This command builds the '@dev/core' package by executing its 'build' script. It uses the npm workspace feature ('-w') to target the specific package from the main repository directory. This is the recommended way to build individual packages.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build -w @dev/core\n```\n\n----------------------------------------\n\nTITLE: Configuring Space Markup Options TypeScript Interface\nDESCRIPTION: TypeScript interface defining configuration options for the Space Markup feature. Includes parameters for step height recognition, animation duration, boundary handling, body correction, and ray detection length.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/spaceMarkUp.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TSpaceMarkUpOptions = {\n\t// Minimum height difference recognized as a step or elevation change\n\tminStepValue: 0.15,\n\t\n\t// Maximum height difference the user can overcome in a \"stepping\" style\n\tmaxStepValue: 0.45,\n\t\n\t// Duration of the step-up/step-down animation (default: 60 frames)\n\tstairStepAnimationDurationInFrames: 60,\n\t\n\t// If set, allows the user to move within this radius before being pulled back\n\t// to the last registered floor position. Works on x, z axes.\n\t// Essentially, how far the user can deviate from the boundary.\n\tborderOffset: 0.1,\n\t\n\t// When returning the user to a safe zone, this value determines the offset\n\t// away from the boundary to prevent triggering repeated floor boundary exits\n\t// due to minor jitter.\n\treturnOffset: 0.3,\n\t\n\t// Backward correction\n\t// The headset extends slightly forward relative to the user's center of mass.\n\t// This correction reduces desynchronization between the head and body position.\n\t//\n\t// [VR-P1-DEVICE]HEAD\n\t//                body\n\t//                body\n\t//         foot-P2-foot\n\t//\n\t// In the schematic, P1 represents the headset center,\n\t// while P2 is the correction point for XZ alignment (typically 0.1 - 0.22).\n\trealBodyXZCorrection: 0.17,\n\t\n\t// Default ray length for surface detection (shorter is better).\n\t// Can and should be adjusted dynamically using setRayLength().\n\tdefaultRayLength: 3,\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Configuration for BabylonJS Docs\nDESCRIPTION: Basic robots.txt configuration that allows all user agents to access the site and provides the sitemap URL. The sitemap helps search engines discover and crawl all documentation pages efficiently.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nSitemap: https://doc.babylonjs.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Creating a GUICheckbox in Babylon.js\nDESCRIPTION: Constructor for creating a new GUICheckbox element with specified parameters. Requires an ID, options object, GUI manager, and optional callback and append parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiCheckbox.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUICheckbox(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Node Block by Predicate in Babylon.js Node Material using JavaScript\nDESCRIPTION: Obtains a block from the node graph by evaluating a predicate function against each block. Can filter for specific types or names. Useful for advanced block searches (e.g., finding an AddBlock named 'foo'). Returns the first matching block or undefined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/nodeMaterial.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet block = nodeMaterial.getBlockByPredicate((b) => b.getClassName() === \"AddBlock\" && b.name === \"foo\");\n```\n\n----------------------------------------\n\nTITLE: Applying UV Coordinates to Car Body Bottom in JavaScript\nDESCRIPTION: Sets UV coordinates for the bottom face of the car body, flipping the same texture portion used for the top face.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap3/carmat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfaceUV[2] = new BABYLON.Vector4(0.38, 1, 0, 0.5);\n```\n\n----------------------------------------\n\nTITLE: Configuring GetPropertyBlock for Nested Properties - JavaScript\nDESCRIPTION: This snippet showcases the configuration object for FlowGraphGetPropertyBlock, used to retrieve property values from objects within the flow graph, including support for nested properties (e.g., position.x). The configuration sets propertyName (as string), target object, and optional reset behavior for unset targets. This enables robust and flexible property access in visual scripting. Babylon.js context and block are necessary, and care should be taken with property paths and types.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    /**\n     * The name of the property that will be set\n     */\n    propertyName?: string;\n\n    /**\n     * The target asset from which the property will be retrieved\n     */\n    object?: AssetType<O>;\n\n    /**\n     * If true, the block will reset the output to the default value when the target asset is undefined.\n     */\n    resetToDefaultWhenUndefined?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Camera Orientation via HTML Data Setup\nDESCRIPTION: JSON configuration to set the default camera orientation in the X-axis for the 360 video player through HTML initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": { \"threeSixty\": { \"defaultCameraOrientationX\": 1 } }\n```\n\n----------------------------------------\n\nTITLE: Setting up Reflection Texture for Skybox\nDESCRIPTION: Demonstrates how to configure a cube texture for reflection in background material\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbackgroundMaterial.reflectionTexture = new BABYLON.CubeTexture(\"textures/TropicalSunnyDay\", scene);\nbackgroundMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n```\n\n----------------------------------------\n\nTITLE: Configuring 360 Video Type via HTML Data Setup\nDESCRIPTION: JSON configuration example showing how to define the video format type (monoscopic, stereoscopic side-by-side, or stereoscopic top-bottom) in the HTML initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": { \"threeSixty\": { \"videoType\": \"stereoscopicTopBottom\" } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Viewer Element with TypeScript\nDESCRIPTION: Creates a custom viewer element with specific configuration options. This example sets the limitDeviceRatio to 2, limiting the maximum render resolution on high-DPI devices.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/advancedUsage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nConfigureCustomViewerElement(\"my-babylon-viewer\", { limitDeviceRatio: 2 });\n```\n\n----------------------------------------\n\nTITLE: Defining Plane Detector Options - TypeScript\nDESCRIPTION: Defines the IWebXRPlaneDetectorOptions interface for configuring the WebXR Plane Detector. Options include a transform parent node for world coordinates and whether to persist planes between sessions. Useful as an argument when enabling the feature.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IWebXRPlaneDetectorOptions {\\n  /**\\n   * The node to use to transform the local results to world coordinates\\n   */\\n  worldParentNode?: TransformNode;\\n\\n  /**\\n   * If set to true a reference of the created planes will be kept until the next session starts\\n   * If not defined, planes will be removed from the array when the feature is detached or the session ended.\\n   */\\n  doNotRemovePlanesOnSessionEnded?: boolean;\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Fog Functions in Vertex Shader - GLSL\nDESCRIPTION: This line instructs Babylon.js's preprocessing to include the fog vertex declaration code into the shader. It must be placed after uniform declarations and before main logic, ensuring that fog-related varyings and definitions are added to the shader for use in fog calculations. There are no inputs or outputs at this line, but it is a dependency for fog support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n#include<fogVertexDeclaration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Renderers GUI Elements\nDESCRIPTION: Sets up GUI controls for blur depth, thickness settings and debug options for fluid rendering target renderers. Includes sliders and checkboxes for various parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthMaxFilterSize\", \"Max filter size\", 1, 100, 1));\nthis._targetRenderersGUIElements.push(this._addSlider(menuBlurDepth, params, \"targets_blurDepthDepthScale\", \"Depth scale\", 0, 100, 0.01));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Interpolation Block in BabylonJS\nDESCRIPTION: Shows how to configure and use the Interpolation block for creating smooth transitions between values. Includes examples of single and multiple keyframe animations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    /**\n     * The number of keyframes to interpolate between.\n     * Will default to 1 if not provided (i.e. from currentValue to a provided value in the time provided)\n     */\n    keyFramesCount?: number;\n\n    /**\n     * The duration of the interpolation.\n     */\n    duration?: number;\n\n    /**\n     * The name of the property that will be interpolated.\n     * Can be an array, but must be of the same type (i.e. position and scaling, or `position.x` and `position.y`)\n     */\n    propertyName?: string | string[];\n\n    /**\n     * The type of the animation to create.\n     * Default is ANIMATIONTYPE_FLOAT\n     * This cannot be changed after construction, so make sure to pass the right value.\n     */\n    animationType?: number | FlowGraphTypes;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// example of 1 keyframe:\nconst interpolation = new FlowGraphInterpolationBlock({\n  animationType: Constants.ANIMATIONTYPE_VECTOR3,\n  duration: 1,\n  propertyName: \"position\",\n});\ninterpolation.endValue.setValue(new Vector3(1, 2, 3), ctx);\nconst playAimation = new FlowGraphPlayAnimationBlock();\nplayAnimation.animation.setValue(interpolation.animation, ctx);\n\n// example of 2 keyframes:\nconst interpolation = new FlowGraphInterpolationBlock({\n  animationType: Constants.ANIMATIONTYPE_VECTOR3,\n  propertyName: \"position\",\n  keyFramesCount: 2,\n});\n// generate a 2 seconds animation, with 1 second to each keyframe\ninterpolation.duration_0.setValue(1, ctx);\ninterpolation.value_0.setValue(new Vector3(1, 2, 3), ctx);\ninterpolation.duration_1.setValue(2, ctx);\ninterpolation.value_1.setValue(new Vector3(4, 5, 6), ctx);\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Uniforms for Fog in Vertex Shader - GLSL\nDESCRIPTION: This GLSL snippet lists the mandatory matrix uniforms needed for fog support in a Babylon.js shader. These are required for all subsequent world/view/clip-space calculations, especially for proper fog rendering, and must be declared at the top of the vertex shader. Inputs are the standard transformation matrices; there is no direct output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/Fog+ShaderMat.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nuniform mat4 world;    \nuniform mat4 view;    \nuniform mat4 viewProjection;\n```\n\n----------------------------------------\n\nTITLE: Creating Default Light Source Mesh for Volumetric Light Scattering - Babylon.js - JavaScript\nDESCRIPTION: Uses a static Babylon.js method to create a default billboard mesh for use as the light source in the VolumetricLightScatteringPostProcess. Requires a mesh name and scene object. Expects a valid string as the mesh name and a Babylon.js scene reference. Returns a billboard mesh configured for light scattering effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultMesh = BABYLON.VolumetricLightScatteringPostProcess.CreateDefaultMesh(\"meshName\", scene);\n```\n\n----------------------------------------\n\nTITLE: Modifying Directed Cylinder Emitter Properties in Babylon.js (JavaScript)\nDESCRIPTION: Updates the radius and direction properties (`radius`, `direction1`, `direction2`) of a previously created directed cylinder emitter object (`cylinderEmitter`). Requires a `cylinderEmitter` object (presumably from `createDirectedCylinderEmitter`), a new radius value (Number), and `BABYLON.Vector3` instances for the new directions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/shape_emitters.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncylinderEmitter.radius = 3.4;\ncylinderEmitter.direction1 = new BABYLON.Vector3(-5, 2, 1); \ncylinderEmitter.direction2 = new BABYLON.Vector3(5, 2, -1);    \n```\n\n----------------------------------------\n\nTITLE: Managing XR Render Loop\nDESCRIPTION: Controls starting and stopping the XR rendering process\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRSessionManagers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsessionManager.runXRRenderLoop();\n\n// To stop rendering:\nawait sessionManager.exitXRAsync();\n```\n\n----------------------------------------\n\nTITLE: Watching and Processing Assets with Build Tools (Shell)\nDESCRIPTION: This command uses the custom 'build-tools' script to process assets (like binary files, CSS, SCSS, and shaders) for a core package ('--isCore') and continuously watch for changes ('--watch'). This is executed in the specific project's directory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpx build-tools -c process-assets --isCore --watch\n```\n\n----------------------------------------\n\nTITLE: Building Full Babylon.js Framework via npm Scripts - Markdown\nDESCRIPTION: These code snippets provide alternative npm build commands to generate the entire Babylon.js framework in different module formats (UMD or ES6). They require npm and the Babylon.js project, and will output to corresponding 'FLAVOR' directories. No arguments are taken; users should run these in the main project directory for full package builds.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/minifiedVer.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:umd\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:es6\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Controller Meshes in VRExperience (JavaScript)\nDESCRIPTION: Shows an option for configuring the default controller meshes when initializing the Babylon.js `VRExperienceHelper` using `scene.createDefaultVRExperience` in JavaScript. The `controllerMeshes: true` option within the configuration object ensures the default controller models are loaded and displayed. Setting this option to `false` would hide them, which is useful when attaching custom meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nscene.createDefaultVRExperience({ controllerMeshes: true });\n```\n\n----------------------------------------\n\nTITLE: Defining Plane Structures for Sectional Roof in JavaScript\nDESCRIPTION: This snippet defines two separate plane structures, `planes` for the main roof section and `smallPlanes` for the smaller section. Each structure follows the same format as the single-roof example, listing vertex labels (corners 'C#' and apexes 'A#') in counter-clockwise order for each plane within that section.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar planes = [\n\t\t[\"C0\", \"C1\", \"A0\"],\n\t\t[\"C1\", \"C2\", \"A0\"],\n\t\t[\"C2\", \"C3\", \"A0\"],\n\t\t[\"C3\", \"C4\", \"A1\", \"A0\"],\n\t\t[\"C4\", \"C5\", \"A1\"],\n\t\t[\"C5\", \"C0\", \"A0\", \"A1\"]\n\t]\n\t\n\tvar smallPlanes = [\n\t\t[\"C0\", \"C1\", \"A1\", \"A0\"],\n\t\t[\"C1\", \"C2\", \"A1\"],\n\t\t[\"C2\", \"C3\", \"A0\", \"A1\"]\n\t]\n```\n\n----------------------------------------\n\nTITLE: Getting Text Width in GUIText\nDESCRIPTION: Static method that calculates and returns the width of text with the specified font. Useful for layout calculations when positioning text elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiText.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetTextWidth(string:text, string:font) → void : static\n```\n\n----------------------------------------\n\nTITLE: Documenting Class Properties\nDESCRIPTION: Examples of documenting public and private class properties using TSDoc format.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The groundColor is the light in the opposite direction to the one specified during creation\n * You can think of the diffuse and specular light as coming from the centre of the object in the given direction and the groundColor light in the opposite direction\n */\npublic groundColor = new Color3(0.0, 0.0, 0.0);\n\n/**\n * The light reflection direction, not the incoming direction\n */\npublic direction: Vector3\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Smart Filters Demo in TypeScript\nDESCRIPTION: Commands to install dependencies and start the Smart Filters demo application after cloning the repository.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/introductionToSmartFilters.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Including Gaussian Splatting File Loader Plugin in HTML\nDESCRIPTION: This snippet shows how to include the Gaussian Splatting File Loader Plugin in an HTML file after the main Babylon.js script. This is the recommended method for using the plugin.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/gaussianSplatting.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"Babylon.js\"></script>\n<script src=\"babylon.splatFileLoader.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Querying Device Input State in JavaScript\nDESCRIPTION: Demonstrates how to check if a specific input (Xbox A button) is pressed using the DeviceSourceManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/deviceSourceManager.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (deviceSourceManager.getDeviceSource(BABYLON.DeviceType.Xbox)) {\n  if (deviceSourceManager.getDeviceSource(BABYLON.DeviceType.Xbox).getInput(BABYLON.XboxInput.A) === 1) {\n    // Do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: Command to push local changes to your remote GitHub repository\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Overlay with FitStrategy.NONE\nDESCRIPTION: Implements an HTML overlay mesh with custom styling and positioning using the NONE fit strategy.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/addons/htmlMesh.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst overlayMesh = new HtmlMesh(scene, \"html-overlay-mesh\", { isCanvasOverlay: true });\nconst overlayMeshDiv = document.createElement(\"div\");\noverlayMeshDiv.innerHTML = `<p>This is an overlay. It is positioned in front of the canvas This allows it to have transparency and to be non-rectangular, but it will always show over any other content in the scene</p>`;\noverlayMeshDiv.style.backgroundColor = \"rgba(0,255,0,0.49)\";\noverlayMeshDiv.style.width = \"120px\";\noverlayMeshDiv.style.height = \"90px\";\noverlayMeshDiv.style.display = \"flex\";\noverlayMeshDiv.style.alignItems = \"center\";\noverlayMeshDiv.style.justifyContent = \"center\";\noverlayMeshDiv.style.borderRadius = \"20px\";\noverlayMeshDiv.style.fontSize = \"xx-small\";\noverlayMeshDiv.style.padding = \"10px\";\noverlayMesh.setContent(overlayMeshDiv, 4, 3);\noverlayMesh.position.x = 0;\noverlayMesh.position.y = 0;\n```\n\n----------------------------------------\n\nTITLE: Defining Light Objects in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Defines a Light object within a .babylon file using JSON. Supports various light types (point, directional, spot, hemispheric), color properties, animation, and mesh inclusion/exclusion lists. Some fields are specific to certain light types (e.g., angle for spot lights, groundColor for hemispheric). Correct value types and field presence are required, and arrays must be properly formed. Used by Babylon.js to create scene lights with associated behaviors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"name\\\": string,\\n\\t\\\"id\\\": string,\\n\\t\\\"tags\\\": string,\\n\\t\\\"type\\\": int (0 for point light, 1 for directional, 2 for spot and 3 for hemispheric),\\n\\t\\\"position\\\": vector3,\\n\\t\\\"direction\\\": vector3,\\n\\t\\\"angle\\\": float (for spot lights),\\n\\t\\\"exponent\\\": float (for spot lights),\\n\\t\\\"groundColor\\\": color3 (for hemispheric lights),\\n\\t\\\"intensity\\\": float,\\n\\t\\\"range\\\": float,\\n\\t\\\"diffuse\\\": color3,\\n\\t\\\"specular\\\": color3,\\n\\t\\\"excludedMeshesIds\\\": array of string,\\n\\t\\\"includedOnlyMeshesIds\\\": array of string,\\n    \\\"animations\\\": array of Animations (see below, can be omitted),\\n\\t\\\"autoAnimate\\\": boolean,\\n\\t\\\"autoAnimateFrom\\\": int,\\n\\t\\\"autoAnimateTo\\\": int,\\n\\t\\\"autoAnimateLoop\\\": boolean (can be omitted),\\n    \\\"autoAnimateSpeed\\\": number (can be omitted)\\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving and Updating Player State on Server with Colyseus - JavaScript\nDESCRIPTION: This server-side snippet processes incoming player state by handling \"playData\" messages and updating the authoritative state for all players. The onCreate method initializes the message handler, while onUpdate distributes the latest position and quaternion data to all clients. Dependencies include Colyseus server and a proper player state schema. Input is player data message; output is updated state broadcast to all connected clients.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  onCreate (options) {\n   //...\n    this.onMessage(\"playData\", (client, message) => {\n        this.state.players.get(client.sessionId).playerData = message;\n    });\n   //...\n  }\n  onUpdate () {\n    //...\n    this.state.players.forEach((player, sessionId) => {\n        player.position.x = player.playerData.position.x\n        player.position.y = player.playerData.position.y\n        player.position.z = player.playerData.position.z\n\n        player.quaternion.x = player.playerData.quaternion.x\n        player.quaternion.y = player.playerData.quaternion.y\n        player.quaternion.z = player.playerData.quaternion.z\n        player.quaternion.w = player.playerData.quaternion.w\n    });\n      //...\n  }\n```\n\n----------------------------------------\n\nTITLE: Build-time Block Implementation in TypeScript\nDESCRIPTION: Example of importing and instantiating a custom block class that was generated during build time from annotated GLSL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/creatingNewBlocks.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlackAndWhiteBlock } from \"./blackAndWhiteBlock.block.js\";\n\nconst block = new BlackAndWhiteBlock(smartFilter, \"B&W Block\");\n```\n\n----------------------------------------\n\nTITLE: Including Facebook SDK in HTML for Instant Games\nDESCRIPTION: This HTML snippet shows how to include the Facebook Instant Games SDK script in your game's HTML page. This is a required step to access the Facebook Instant Games API.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Instant_Games.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://connect.facebook.net/en_US/fbinstant.6.2.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Reflection Probe in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Shows the JSON representation for a ReflectionProbe, an object used for advanced rendering in Babylon.js. Inherits all RenderTargetTexture fields and adds mesh attachment and position properties. 'isReflectionProbe' is used to signal special behavior. Fields must be correctly referenced for attachment and positioning, and typically are not used directly outside of render/lighting systems.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n    \\\"_attachedMesh\\\": string (id of the attached mesh),\\n\\t\\t\\\"position\\\": array of floats (position of the reflection probe: x, y, and z),\\n    \\\"isReflectionProbe\\\": boolean (indicates that this RenderTargetTexture JSON is a reflection probe)\\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Animation Map in Babylon.js Sprite Map\nDESCRIPTION: This snippet shows how to copy the animation map from a background sprite map to a levelBase sprite map. This allows the frames in levelBase to be animated using the same animations as the background.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_example.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlevelBase.animationMap = background.animationMap\n```\n\n----------------------------------------\n\nTITLE: Textured Line2D Creation in Babylon.js\nDESCRIPTION: Creating a Line2D with texture following the line direction. Supports path definition, width setting, and closure options.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/Line2D.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = line2D(\"line\", options, scene);\n```\n\n----------------------------------------\n\nTITLE: HTML NME Component\nDESCRIPTION: Example of how to embed a Node Material Editor example in documentation\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<nme id=\"nmeId\" title=\"NME title\" description=\"A short description\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Bounding Info for Picking Meshes with Skeletons in Babylon.js\nDESCRIPTION: Shows how to update the bounding info of a mesh with a skeleton to enable accurate picking. By default, picking only works on the bind pose, but this method forces the CPU to update for correct picking.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.refreshBoundingInfo(true);\nconst pickResult = scene.pick(scene.pointerX, scene.pointerY);\n```\n\n----------------------------------------\n\nTITLE: Controlling Radio Button Visibility\nDESCRIPTION: Method to show or hide the radio button with optional fade effect\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiRadio.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Cloning Babylon.js Repository\nDESCRIPTION: Command to clone your forked Babylon.js repository to local machine\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone _**your repository address**_\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of GUIButton in BabylonJS\nDESCRIPTION: Method to check if the GUIButton is visible. It returns a boolean value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiButton.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Complete Point Inside Mesh Function\nDESCRIPTION: Complete implementation of the pointIsInside method for Babylon.js Mesh prototype, combining all checking steps into a single function.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/IsInside.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.prototype.pointIsInside = function (point) {    \n\tvar boundInfo = this.getBoundingInfo();\n\tvar max = boundInfo.maximum;\n\tvar min = boundInfo.minimum;\n\tvar diameter = 2 * boundInfo.boundingSphere.radius;\n\tif(point.x < min.x || point.x > max.x) {\n\t\treturn false;\n\t}\n\tif(point.y < min.y || point.y > max.y) {\n\t\treturn false;\n\t}\n\tif(point.z < min.z || point.z > max.z) {\n\t\treturn false;\n\t}\n\n\tvar pointFound = false;\n\tvar d = 0;\n\tvar hitCount = 0;\n\tvar gap = 0;\n\tvar distance = 0;\n\tvar ray = new BABYLON.Ray(BABYLON.Vector3.Zero(), BABYLON.Axis.X, diameter);;\n\tvar pickInfo;\n\tvar direction = point.clone();\n    var refPoint = point.clone();\n\n\t\n\thitCount = 0;\n\tray.origin = refPoint;\n    ray.direction = direction;\n    ray.distance = diameter;\t\t\n\tpickInfo = ray.intersectsMesh(this);\n\twhile (pickInfo.hit) {\t\n\t\thitCount++;\n\t\tpickInfo.pickedPoint.addToRef(direction.scale(0.00000001), refPoint);\n\t\tray.origin  = refPoint;\n\t\tpickInfo = ray.intersectsMesh(this);\n\t}\t\n\tif((hitCount % 2) === 1) {\n\t\tpointFound = true;\n\t}\n\t\n\treturn pointFound;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Constraints for Skybox View\nDESCRIPTION: Restricts the camera's vertical rotation to prevent it from moving below ground level by setting an upper beta limit.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/sky.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.upperBetaLimit = Math.PI / 2.2;\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Promises for Sequential Scene Operations in Babylon.js (JavaScript)\nDESCRIPTION: This code snippet shows how to chain multiple asynchronous operations using Promises in Babylon.js. First, a scene is created, then the default XR (Extended Reality) experience is initialized. After the XR promise resolves, another promise appends a scene file. Dependencies are Babylon.js and a properly initialized engine object. Inputs include a scene and engine; outputs are a prepared scene with XR and loaded assets.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/promises.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst scene = new BABYLON.Scene(engine);\nconst xrPromise = scene.createDefaultXRExperienceAsync();\nxrPromise\n  .then((xrExperience) => {\n    return BABYLON.AppendSceneAsync(\"https://playground.babylonjs.com/scenes/skull.babylon\", scene);\n  })\n  .then(function () {\n    // xr resolved, skull added to the scene\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sine Curve in BabylonJS\nDESCRIPTION: Creates a Curve3 object from an array of Vector3 points following a sine wave pattern.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/drawCurves.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySinus = [];\nfor (let i = 0; i < 30; i++) {\n  mySinus.push(new BABYLON.Vector3(i, Math.sin(i / 10), 0));\n}\nconst mySinusCurve = new BABYLON.Curve3(mySinus);\n```\n\n----------------------------------------\n\nTITLE: Disabling VR Mode via HTML Data Setup\nDESCRIPTION: JSON configuration to disable the VR mode and button in the 360 video player through HTML initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": { \"threeSixty\": { \"enableVR\": false } }\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a GUIFieldset\nDESCRIPTION: Method to add an element to a GUIFieldset container.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiFieldset.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nadd(element) → void\n```\n\n----------------------------------------\n\nTITLE: Inefficient Particle Acceleration Implementation in JavaScript\nDESCRIPTION: This code snippet demonstrates an inefficient way to update particle acceleration that creates new Vector3 objects on each update, which can strain garbage collection when dealing with thousands of particles.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/optimize_sps.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.updateParticle = function(particle) {\n  const accel = new BABYLON.Vector3(0, 0.5, 0);\n  particle.velocity = particle.velocity.add(accel);\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting GUIProgress Visibility in Babylon.js\nDESCRIPTION: Method to make the progress bar visible or invisible, with optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiProgress.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Details the JSON object structure for defining an animation in Babylon.js. It includes the type of data being animated (float, vector3, etc.), frame rate, loop behavior, animation name, the target property (e.g., 'position'), an array of keyframes, and settings for automatic animation playback.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"dataType\": int (0 = float, 1 = vector3, 2 = quaternion, 3 = matrix),\n    \"framePerSecond\": int,\n    \"loopBehavior\": int (0 = relative, 1 = cycle, 2 = constant),\n    \"name\": string,\n    \"property\": string,\n    \"keys\": array of AnimationKeys (see below),\n    \"autoAnimate\": boolean,\n    \"autoAnimateFrom\": int,\n    \"autoAnimateTo\": int,\n    \"autoAnimateLoop\": boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Horizontal Tile Alignment for Tiled Box in JavaScript\nDESCRIPTION: Lists the available constants within `BABYLON.Mesh` for the `alignHorizontal` option in Tiled Box creation. These constants control the horizontal placement of whole tiles when the face width isn't an exact multiple of the tile width, determining where partial tiles appear (left, right, or centered). `CENTER` is the default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/set/tiled_box.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.CENTER, default\nBABYLON.Mesh.LEFT,\nBABYLON.Mesh.RIGHT\n```\n\n----------------------------------------\n\nTITLE: WebXR Light Estimation Options Interface\nDESCRIPTION: TypeScript interface defining all possible configuration options for the WebXR Light Estimation feature. This includes options for controlling reflection maps, update frequencies, and light source creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IWebXRLightEstimationOptions {\n  /**\n   * Disable the cube map reflection feature. In this case only light direction and color will be updated\n   */\n  disableCubeMapReflection?: boolean;\n  /**\n   * Should the scene's env texture be set to the cube map reflection texture\n   * Note that this doesn't work is disableCubeMapReflection if set to false\n   */\n  setSceneEnvironmentTexture?: boolean;\n  /**\n   * How often should the cubemap update in ms.\n   * If not set the cubemap will be updated every time the underlying system updates the environment texture.\n   */\n  cubeMapPollInterval?: number;\n  /**\n   * How often should the light estimation properties update in ms.\n   * If not set the light estimation properties will be updated on every frame (depending on the underlying system)\n   */\n  lightEstimationPollInterval?: number;\n  /**\n   * Should a directional light source be created.\n   * If created, this light source will be updated whenever the light estimation values change\n   */\n  createDirectionalLightSource?: boolean;\n  /**\n   * Define the format to be used for the light estimation texture.\n   */\n  reflectionFormat?: XRReflectionFormat;\n  /**\n   * Should the light estimation's needed vectors be constructed on each frame.\n   * Use this when you use those vectors and don't want their values to change outside of the light estimation feature\n   */\n  disableVectorReuse?: boolean;\n\n  /**\n   * disable applying the spherical polynomial to the cube map texture\n   */\n  disableSphericalPolynomial?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating _config.yml for GitHub Pages in YAML\nDESCRIPTION: This YAML snippet defines the configuration for a GitHub Pages website, including the theme, title, and description. It's essential for setting up the basic metadata of the hosted Babylon.js project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/journey/theFirstStep.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntheme: jekyll-theme-minimal\ntitle: Title For Your Website\ndescription: Website description.\n```\n\n----------------------------------------\n\nTITLE: Loading an XML Layout File onto a Babylon.js GUI Texture (JavaScript)\nDESCRIPTION: This code illustrates how to load an XML GUI layout using XmlLoader and attach it to an AdvancedDynamicTexture. The method 'loadLayout' accepts the XML file path and the texture to attach to. Required dependencies include Babylon.js and proper XML layout files.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/xmlLoader.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nxmlLoader.loadLayout(\"layouts/testgui.xml\", advancedTexture);\n```\n\n----------------------------------------\n\nTITLE: Template for Custom positionFunction Callback in SPS - Babylon.js - JavaScript\nDESCRIPTION: Provides a skeleton for a positionFunction used in SPS shape addition, enabling per-particle initialization. The function receives the\\_particle\\_object, a global particle index, and a per-shape index, allowing customization of location, rotation, scaling, color, etc. No other dependencies required except the context in which this function is passed to addShape.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBuilder = function (particle, i, s) {\n  // set properties of particle\n};\n```\n\n----------------------------------------\n\nTITLE: Navigation Bar Timeout Configuration\nDESCRIPTION: HTML configuration for modifying the navigation bar visibility timeout.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<babylon templates.nav-bar.params.visibility-timeout=\"1000\" model=\"....\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Declaring Typed Variables in GLSL\nDESCRIPTION: This GLSL snippet illustrates the strict typing required in shader programming. It shows the correct declaration of an integer (`int`) and a floating-point (`float`) variable, emphasizing that numeric literals must match the variable type (e.g., `2.0` for a float).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/introToShaders.md#2025-04-23_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nint n = 2;\nfloat r = 2.0;\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Labels to Meshes in Scene Function - JavaScript\nDESCRIPTION: Shows how to invoke the addLabelToMesh utility within the scene creation function. After the mesh is created, it calls addLabelToMesh, passing in the sphere to attach a GUI label displaying its name. Used in tandem with the gui.ts module as part of the scene's setup routine.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createScene(): Scene {\\n    var scene: Scene = new Scene(engine);\\n\\n    var camera: ArcRotateCamera = new ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, Vector3.Zero(), scene);\\n    camera.attachControl(canvas, true);\\n\\n    var light1: HemisphericLight = new HemisphericLight(\"light1\", new Vector3(1, 1, 0), scene);\\n\\n    var sphere: Mesh = MeshBuilder.CreateSphere(\"sphere\", { diameter: 1 }, scene);\\n\\n    addLabelToMesh(sphere);\\n\\n    return scene;\\n}\n```\n\n----------------------------------------\n\nTITLE: Re-including Skinned Mesh in Motion Blur in Babylon.js\nDESCRIPTION: Re-enable bone velocity calculations for previously excluded skinned meshes in the motion blur effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/motionBlurPostProcess.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmotionblur.removeExcludedSkinnedMesh(mySkinnedMesh);\n```\n\n----------------------------------------\n\nTITLE: Synchronizing GUI with BabylonJS Fluid Renderer\nDESCRIPTION: Public method to synchronize the GUI with the current state of the fluid renderer. Updates all target renderer and render object GUI elements with the current property values from the fluid renderer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Updates the values displayed by the GUI according to the property values of the underlying objects\n */\npublic syncGUI(): void {\n    const fluidRenderer = this._scene.fluidRenderer;\n\n    if (fluidRenderer) {\n        this._fillValues(this._targetRenderersGUIElements, fluidRenderer.targetRenderers[this._targetRendererIndex]);\n        this._fillValues(this._renderObjectsGUIElements, fluidRenderer.renderObjects[this._renderObjectIndex].object);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Start Size Range Over Duration in Babylon.js Particle System\nDESCRIPTION: This code demonstrates how to set a range of start sizes for particles over the duration of a particle system. It defines different start size ranges at the start, middle, and end of the system's lifecycle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.targetStopDuration = 8;\n\nparticleSystem.addStartSizeGradient(0, 0.5, 0.75); //start size range at start of particle system\nparticleSystem.addStartSizeGradient(0.4, 0.25, 0.5); //start size range at 2/5 of duration of particle system\nparticleSystem.addStartSizeGradient(1, 0, 0.1); //start size range at end of particle system\n```\n\n----------------------------------------\n\nTITLE: Loading GUI as Mesh Texture in Babylon.js\nDESCRIPTION: Creates a GUI texture for a specific mesh with defined dimensions and loads a layout from the snippet server.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/guiEditor.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet screenUI = BABYLON.GUI.AdvancedDynamicTexture.CreateForMeshTexture(device.screen, 2048, 2048, true, false);\nscreenUI.parseFromSnippetAsync(\"#WFL50L\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Behaviors in Babylon.js Viewer\nDESCRIPTION: HTML configuration for setting up camera behaviors including auto-rotate, framing, and bouncing in the Babylon.js viewer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"none\">\n  <!-- enable antialiasing -->\n  <engine antialiasing=\"true\"></engine>\n  <!-- camera configuration -->\n  <camera>\n    <!-- add camera behaviors -->\n    <behaviors>\n      <!-- enable default auto-rotate behavior -->\n      <auto-rotate type=\"0\"></auto-rotate>\n      <!-- enable and configure the framing behavior -->\n      <framing type=\"2\" zoom-on-bounding-info=\"true\" zoom-stops-animation=\"false\"></framing>\n      <!-- enable default bouncing behavior -->\n      <bouncing type=\"1\"></bouncing>\n    </behaviors>\n  </camera>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Adding Image with Markdown in BabylonJS Documentation\nDESCRIPTION: Demonstrates how to add an image using standard markdown syntax.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n![Particle choice](/img/how_to/Materials/particleMenu.png)\n```\n\n----------------------------------------\n\nTITLE: Updating Text Content in GUIText\nDESCRIPTION: Method to update the text content of an existing GUIText element. Takes a string parameter containing the new text value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiText.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdateText(string:text) → void\n```\n\n----------------------------------------\n\nTITLE: Creating a GUIFieldset in Babylon.js Castor GUI\nDESCRIPTION: Constructor for creating a new GUIFieldset. Takes an ID, options object, GUI manager instance, and an optional append parameter that determines if the fieldset is added to the body element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiFieldset.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUIFieldset(id, options, guimanager, append)\n```\n\n----------------------------------------\n\nTITLE: Including the AMP 360 Video Plugin Script\nDESCRIPTION: HTML snippet showing how to include the AMP 360 Video plugin script in your webpage.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Link to the plugin file -->\n<script src=\"amp-360video.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Package Linking Commands\nDESCRIPTION: Commands for building and linking packages between projects\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run babylonjs:build\nnpm link -w @babylonjs/core\nnpm link @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Performing an Initial Build of Dev Packages (Shell)\nDESCRIPTION: This command triggers a one-time build of all development ('dev') packages in the repository. It compiles the latest source code, making the compiled output available for use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sprite Picking\nDESCRIPTION: Example of picking a sprite and rotating it when selected.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/picking_sprites.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pickResult = scene.pickSprite(this.pointerX, this.pointerY);\nif (pickResult.hit) {\n\tpickResult.pickedSprite.angle += 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Task Execution with Callbacks\nDESCRIPTION: Executes a task with success and error callbacks in a given scene. Updates task state and handles callback execution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Execute the current task\n * @param scene defines the scene where you want your assets to be loaded\n * @param onSuccess is a callback called when the task is successfully executed\n * @param onError is a callback called if an error occurs\n */\npublic run(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\n    this._taskState = AssetTaskState.RUNNING;\n    this.runTask(scene, () => {\nthis.onDoneCallback(onSuccess, onError);\n    }, (msg, exception) => {\nthis.onErrorCallback(onError, msg, exception);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GUITexture visibility in BabylonJS\nDESCRIPTION: Method to set a GUITexture element's visibility with an optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextures.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Teleportation with Default Experience Helper\nDESCRIPTION: Shows how to enable teleportation using the WebXR Default Experience Helper, including passing configuration options and specifying floor meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHelper = await scene.createDefaultXRExperienceAsync({\n  floorMeshes: [ground] /* Array of meshes to be used as landing points */,\n  teleportationOptions: {\n    // Options to pass to the teleportation module\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Including Poki Javascript SDK in HTML\nDESCRIPTION: Add this HTML snippet within the <head> tags of your game HTML to include the Poki Javascript SDK.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Poki.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//game-cdn.poki.com/scripts/v2/poki-sdk.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Getting Canvas Origin Coordinates in JavaScript\nDESCRIPTION: Retrieves the origin (x, y) coordinates of the canvas managed by the GUIManager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngetCanvasOrigine()\n```\n\n----------------------------------------\n\nTITLE: Defining Lamp Extrusion Path\nDESCRIPTION: Creates a 3D path using Vector3 points to define the extrusion path for the lamp post.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap7/lights.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lampPath = [];\nlampPath.push(new BABYLON.Vector3(0, 0, 0));\nlampPath.push(new BABYLON.Vector3(0, 10, 0));\nfor(let i = 0; i < 20; i++) {\n    lampPath.push(new BABYLON.Vector3(1 + Math.cos(Math.PI - i * Math.PI / 40), 10 + Math.sin(Math.PI - i * Math.PI / 40), 0));\n}\nlampPath.push(new BABYLON.Vector3(3, 11, 0));\n```\n\n----------------------------------------\n\nTITLE: Referencing Particle Systems with @fromParticleSystems Decorator in TypeScript\nDESCRIPTION: This snippet shows how to reference particle systems using the specialized @fromParticleSystems decorator, as particle systems are not nodes in Babylon.JS and can't be referenced with other decorators.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/gettingComponents.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { ParticleSystem } from \"@babylonjs/core/Particles/particleSystem\";\n\nimport { fromParticleSystems } from \"../decorators\";\n\nexport default class MyMeshComponent extends Mesh {\n    @fromParticleSystems(\"rain\")\n    private _rain: ParticleSystem;\n\n    public onStart(): void {\n        this._rain.start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MultiMaterial for Babylon.js SPS\nDESCRIPTION: This snippet illustrates how to manually create a MultiMaterial object, assign it to the SPS mesh, and compute submeshes for proper material application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_material.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar multimat = new BABYLON.MultiMaterial(\"multi\", scene);\nmultimat.subMaterials.push(material0);\nmultimat.subMaterials.push(material1);\nmultimat.subMaterials.push(material2);\n\nsps.mesh.material = multimat;\nsps.computeSubMeshes();\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Endpoint for Snippet Creation in Express\nDESCRIPTION: Express route handler for saving new snippets or creating new versions of existing snippets. Generates random IDs for new snippets and manages versioning through metadata files. Accepts JSON payload with snippet content and metadata.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/yourOwnSnippetServer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/:id?\", (req, res) => {\n    let id = req.params.id;\n    let version;\n\n    if (!id) {\n        // Generate \"random\" 5 character string\n        const genRndChar = () => {\n            const idx = Math.floor(Math.random() * chars.length);\n            return chars[idx];\n        };\n\n        id = \"\";\n        for (let i = 0; i < ID_LEN; i++) {\n            id += genRndChar();\n        }\n    }\n\n    const metadataPath = METADATA_DIR + id + METADATA_EXT;\n    // Look for the latest version in the metadata directory. If there is no metadata file, then it is the first version.\n    if (fs.existsSync(metadataPath)) {\n        version = fs.readFileSync(metadataPath, {encoding: 'utf-8'});\n        // Increment the version and convert back to string\n        version = Number.parseInt(version) + 1;\n        version = version + \"\";\n    } else {\n        version = \"1\";\n    }\n\n    const newLocalToken = id + LOCAL_SEPARATOR + version;\n    \n    fs.writeFileSync(metadataPath, version);\n\n    const filePath = DATA_DIR + newLocalToken + FILE_EXT;\n    const stringBody = JSON.stringify(req.body);\n    fs.writeFileSync(filePath, stringBody);\n    \n    res.status(200).json({\n        id,\n        version\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Disposing GUIProgress Element in Babylon.js\nDESCRIPTION: Method to dispose and remove the progress bar GUI element from the DOM.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiProgress.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndispose() → void\n```\n\n----------------------------------------\n\nTITLE: Enabling Snapshot Rendering on Babylon.js WebGPU Engine (JavaScript)\nDESCRIPTION: This snippet demonstrates activating the snapshot rendering mode on a Babylon.js engine instance, which causes the upcoming frame to be recorded and then replayed for subsequent frames, leading to improved rendering performance for mostly static scenes. Dependencies include an initialized Babylon.js engine object (typically created as `engine = new BABYLON.Engine(...)`), and the target runtime must be using WebGPU. The snippet toggles the `snapshotRendering` boolean property; no parameters are required. Input is the engine instance, and output is a performance gain via internal optimization. Changes to scene contents unsupported by this mode require resetting or disabling snapshot rendering as described elsewhere.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUSnapshotRendering.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nengine.snapshotRendering = true;\n```\n\n----------------------------------------\n\nTITLE: glTF Animation & Metadata Support Matrix in Markdown\nDESCRIPTION: A comprehensive list detailing the support status for various animation and metadata features in BabylonJS glTF export. Includes support for node animations, skeletal animations, morph targets, and various metadata implementations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/glTFExporter.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n##### Animations\n\n- ✔️ Node Translate, Rotate, Scaling animation\n- ✔️ Skeletal Animation\n  - As skeletons in glTF are represented as collections of nodes in the scene, skeletal animation is exported as TRS animation\n- ✔️ Morph Target Weight Animation\n- ✔️ Multiple animations\n  - In scene, AnimationGroups will be exported as a single glTF Animation.\n  - In scene, Animations not associated with an AnimationGroup will be exported as a single glTF animation.\n- ❌ Animation Pointer Extension [KHR_animation_pointer]\n\n##### Metadata\n\n- ✔️ Extras Data\n- ❌ XMP Metadata [KHR_xmp_json_ld]\n- ⚠️ Asset Info\n  - Copyright field specification not supported.\n```\n\n----------------------------------------\n\nTITLE: Initializing CastorGUI Manager\nDESCRIPTION: Creates a new GUIManager instance with canvas reference, custom CSS styling, and theme options. The manager handles basic GUI setup and theme management.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet canvas = document.getElementById(\"game\");\nlet css = \"button {cursor:pointer;}\";\nlet options = { themeRoot: \"../style/\", themeGUI: \"default\", pixel: false };\nlet guisystem = new GUIManager(canvas, css, options);\n```\n\n----------------------------------------\n\nTITLE: Getting Value from GUITextfield in JavaScript\nDESCRIPTION: Method to retrieve the current value of the text field.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextfield.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetValue() → void\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Logging and Accessing Logs in Babylon.js Flow Graph (JavaScript)\nDESCRIPTION: Illustrates how to disable the default behavior of the Flow Graph logger writing to the console by setting `logToConsole` to `false`. It also shows how to access the collected log entries, which are stored in the `logger.log` array.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nctx.logger.logToConsole = false;\n\n// the array of actions\nconsole.log(ctx.logger.log);\n```\n\n----------------------------------------\n\nTITLE: Documenting Classes in Babylon.js\nDESCRIPTION: Example of documenting a class definition for HemisphericLight using TSDoc format.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Defines a HemisphericLight object that simulates the ambient environment light\n * so the passed direction is the light reflection direction, not the incoming direction\n */\nexport class HemisphericLight extends Light {\n  //All the parts defining the class in here\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring WGSL Shader Entry Points\nDESCRIPTION: These snippets show how to declare the main entry points for vertex and fragment shaders in WGSL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUWGSL.md#2025-04-23_snippet_2\n\nLANGUAGE: wgsl\nCODE:\n```\n@vertex\nfn main(input : VertexInputs) -> FragmentInputs {\n    ...\n}\n```\n\nLANGUAGE: wgsl\nCODE:\n```\n@fragment\nfn main(input : FragmentInputs) -> FragmentOutputs {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic CLI globally\nDESCRIPTION: Command to install the Ionic Command Line Interface globally using npm.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ionic/cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Physics Joint in Babylon.js\nDESCRIPTION: Basic template for creating a physics joint between two bodies (main and connected) using the PhysicsJoint class. The jointData object contains properties specific to the type of joint being created.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/joints.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar joint = new BABYLON.PhysicsJoint(\n  BABYLON.PhysicsJoint.TYPE_OF_JOINT,\n  jointData\n);\n\nmainImpostor.addJoint(connectedImpostor, joint);\n```\n\n----------------------------------------\n\nTITLE: Migration for Pivot Matrix API Change - Babylon.js (JavaScript)\nDESCRIPTION: Advises changing setPivotMatrix without a flag to include a 'false' flag for compatibility with pre-v3.2 Babylon.js scripts. This snippet provides before-and-after code for updating project files, ensuring old mesh positioning logic remains valid after library upgrades.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotMatrix(BABYLON.Matrix.Translation(-x, -y, -z));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.setPivotMatrix(BABYLON.Matrix.Translation(-x, -y, -z), false);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Configuration Mapper with BabylonJS Viewer - JavaScript\nDESCRIPTION: This snippet registers a custom YAML configuration mapper with the BabylonJS Viewer mapper manager, making the 'yaml' format available as a configuration parser. It should be used after implementing and initializing a mapper like 'yamlMapper'. The BabylonJS Viewer library must be loaded and the BabylonViewer global object available. The key parameter is the identifier string 'yaml' and the previously defined mapper object. Registering the mapper allows the Viewer to parse configurations in third-party formats when initialized.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBabylonViewer.mapperManager.registerMapper(\"yaml\", yamlMapper);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack < 5 Node Option for Ammo.js (JavaScript)\nDESCRIPTION: Configures Webpack versions prior to 5 to handle `ammo.js` by setting the 'fs' node module to 'empty'. This prevents Webpack from trying to include the filesystem module when bundling for the web.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    context: __dirname,\n    ...\n    node: {\n        fs: 'empty'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Explicit Bindings Mapping in Babylon.js (JavaScript)\nDESCRIPTION: Highlights the necessity of providing the `bindingsMapping` object when creating a `BABYLON.ComputeShader`. Because WebGPU's WGSL shaders currently lack reflection, this mapping explicitly links the variable names used in JavaScript calls (like `setTexture`) to their corresponding `@group` and `@binding` attributes defined within the WGSL shader code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cs1 = new BABYLON.ComputeShader(\"myCompute\", engine, { computeSource: copyTextureComputeShader }, { bindingsMapping:\n    {\n        \"dest\": { group: 0, binding: 0 },\n        \"src\": { group: 0, binding: 2 }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Vertex Properties in Solid Particle System\nDESCRIPTION: This code snippet shows the available vertex properties that can be accessed and modified within a solid particle system. These properties include position (Vector3), color (Color4), and UV coordinates (Vector2).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_vertices.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvertex.position: Vector3 (x, y, z)\nvertex.color: Color4 (r, g, b, a)\nvertex.uv: Vector2 (x, y)\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Vector3 Communication\nDESCRIPTION: Component implementation showing two-way communication with BabylonJS Vector3 objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_2.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n methods: {\n    emitPositionVector() {\n      const bjsPositionVector = myScene.getPosition(\"box-yellow\", this.scene);\n      this.$emit(\"bjsPositionVector\", bjsPositionVector);\n    },\n    emitRotationVector() {\n      const bjsRotationVector = myScene.getRotation(\"box-green\", this.scene);\n      this.$emit(\"bjsRotationVector\", bjsRotationVector);\n    },\n  },\n  mounted() {\n    const bjsCanvas = this.$refs.bjsCanvas;\n    if (bjsCanvas) {\n      myScene.createScene(bjsCanvas);\n\n      this.emitPositionVector();\n      this.emitRotationVector();\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Manual Camera Attachment to SSAO Pipeline\nDESCRIPTION: Manually attaching cameras to the SSAO pipeline using the scene's rendering pipeline manager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/SSAORenderPipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssao = new BABYLON.SSAORenderingPipeline(\"ssaopipeline\", scene, 0.75);\nscene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"ssaopipeline\", cameras);\n```\n\n----------------------------------------\n\nTITLE: Setting Lifetime Range Over Duration in Babylon.js Particle System\nDESCRIPTION: This snippet shows how to set a range of lifetimes for particles over the duration of a particle system. It defines different lifetime ranges at the start, middle, and end of the system's lifecycle.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/particle_system/tuning_gradients.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nparticleSystem.targetStopDuration = 8;\n\nparticleSystem.addLifeTimeGradient(0, 0.5, 0.75); //lifetime range at start of particle system\nparticleSystem.addLifeTimeGradient(0.4, 0.25, 0.5); //lifetime range at 2/5 of duration of particle system\nparticleSystem.addLifeTimeGradient(1, 0, 0.1); //lifetime range at end of particle system\n```\n\n----------------------------------------\n\nTITLE: Initializing Gamepads Directly without WebVR Camera in JavaScript\nDESCRIPTION: Demonstrates how to initialize the Babylon.js Gamepads system directly using `new BABYLON.Gamepads()` in JavaScript, without requiring a `WebVRFreeCamera`. This allows using VR controllers (specifically those with pose tracking, identified by checking `gp.type === BABYLON.Gamepad.POSE_ENABLED`) in non-WebVR contexts, such as standard WebGL applications. The callback function is executed for each connected gamepad.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew BABYLON.Gamepads((gp) => {\n  if (gp.type === BABYLON.Gamepad.POSE_ENABLED) {\n    // Do something with the controller!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a KTX Batch Creation Script using Batch (DOS)\nDESCRIPTION: This refers to the `make-ktx-batch.bat` script found in the Babylon.js repository tools. When executed, it scans the current directory for JPG and PNG files and generates another batch script named `ktx-batch.bat`. This generated script contains commands to convert each found image into multiple KTX formats (ASTC, DXT, PVRTC, ETC2, ETC1) using PVRTexToolCLI. It requires PVRTexToolCLI.exe to be accessible via the system's PATH variable and accepts a quality argument ('D' or 'Q').\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/mutliPlatTextures.md#2025-04-23_snippet_1\n\nLANGUAGE: batchfile\nCODE:\n```\nmake-ktx-batch.bat\n```\n\n----------------------------------------\n\nTITLE: Injecting Earcut Dependency into PolygonMeshBuilder (JavaScript)\nDESCRIPTION: Demonstrates how to explicitly pass the imported 'earcut' library to the `PolygonMeshBuilder` constructor. This avoids relying on global variables and offers a more direct way to manage the dependency.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as MyEarcut from \"earcut\";\n...\nnew PolygonMeshBuilder(\"polytri\", corners, scene, MyEarcut);\n```\n\n----------------------------------------\n\nTITLE: Setting Bone Scale in Babylon.js\nDESCRIPTION: Shows how to set a bone to a specific scale using the setScale method. It takes a scale vector as a parameter.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/bonesSkeletons.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nbone.setScale(scaleVector);\n```\n\n----------------------------------------\n\nTITLE: Importing and Enabling the ES6 Debug Layer/Inspector (JavaScript)\nDESCRIPTION: Imports the necessary modules to enable the Babylon.js debug layer and injects the ES6-compatible Inspector. The first import augments the scene with debug methods, and the second ensures the correct inspector version is used. Finally, it shows how to display the debug layer.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/core/Debug/debugLayer.js\"; // Augments the scene with the debug methods\nimport \"@babylonjs/inspector\"; // Injects a local ES6 version of the inspector to prevent automatically relying on the none compatible version\n...\nscene.debugLayer.show();\n```\n\n----------------------------------------\n\nTITLE: Starting Babylon Server - npm Shell Commands - Shell\nDESCRIPTION: This shell command snippet demonstrates how to start the Babylon server locally using npm. It requires Node.js and npm to be installed and the repository to be checked out. The key parameter '-w @tools/babylon-server' specifies the workspace package to serve, with the process running on the default port (1337). The output includes serving JavaScript files and hosting static assets needed for development tools such as the playground. The result is accessible at http://localhost:1338. The server is for development only and not production deployment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve -w @tools/babylon-server\n```\n\n----------------------------------------\n\nTITLE: Adding Vertex Colors to a Custom Mesh in Babylon.js\nDESCRIPTION: This extended example adds vertex colors to the custom mesh. The colors array contains RGBA values (red, green, blue, alpha) for each vertex, allowing different parts of the mesh to have distinct colors without requiring separate materials.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar customMesh = new BABYLON.Mesh(\"custom\", scene);\n\nvar positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3, 5, 2, 3, 7, -2, 3, 3, -2, 3];\nvar indices = [0, 1, 2, 3, 4, 5];\nvar colors = [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1]; //color array added\n\nvar normals = [];\n\nvar vertexData = new BABYLON.VertexData();\nBABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\nvertexData.positions = positions;\nvertexData.indices = indices;\nvertexData.colors = colors; //Assignment of colors to vertexData\nvertexData.normals = normals; //Assignment of normal to vertexData added\n\nvertexData.applyToMesh(customMesh);\n```\n\n----------------------------------------\n\nTITLE: Importing Decorators in TypeScript\nDESCRIPTION: Shows how to import the visibleInInspector decorator from the decorators.ts file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/exposingProperties.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { visibleInInspector } from \"../decorators\";\n```\n\n----------------------------------------\n\nTITLE: GeometryInfo Node Implementation in Node Geometry Editor\nDESCRIPTION: The GeometryInfo node provides access to geometry information like vertex count, faces count, and IDs while acting as a passthrough for the Geometry type.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// GeometryInfo Node\ninput: Geometry\noutputs: {\n  output: Geometry,\n  id: Int,\n  collectionID: Int,\n  verticesCount: Int,\n  facesCount: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Velocity Controls\nDESCRIPTION: Methods to get and set angular velocity of physics objects using quaternions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimpostor.getAngularVelocity();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimpostor.setAngularVelocity(new BABYLON.Quaternion(0,1,0,0));\n```\n\n----------------------------------------\n\nTITLE: Creating New Scene from File using LoadSceneAsync in JavaScript\nDESCRIPTION: Shows how to use BABYLON.LoadSceneAsync to load assets from a file and create a new scene. The method returns a promise that resolves with the new scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.LoadSceneAsync(\"/assets/\", \"batman.obj\", engine).then(function (scene) {\n  // do something with the scene\n});\n```\n\n----------------------------------------\n\nTITLE: Running WebGPU Validation Tests Locally\nDESCRIPTION: URL endpoint for executing the specific WebGPU validation test suite locally within the Babylon.js development environment. This ensures WebGPU-specific features are functioning correctly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUMiscellaneous.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:1338/tests/validation/?list=webgpu&engine=webgpu\n```\n\n----------------------------------------\n\nTITLE: WebVR Button Event Handler Setup\nDESCRIPTION: Implements WebVR activation through a button click event with proper event listener cleanup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/webVRCamera.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet button = document.getElementById(\"vrButton\");\n\nfunction attachWebVR() {\n  camera.attachControl(canvas, true);\n  window.removeEventListener(\"click\", attachWebVR, false);\n}\n\nbutton.addEventListener(\"click\", attachWebVR, false);\n```\n\n----------------------------------------\n\nTITLE: Documenting Class Methods\nDESCRIPTION: Examples of documenting public methods using TSDoc format.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Clears the texture\n */\npublic clear(): void {\n    const size = this.getSize();\n    this._context.fillRect(0, 0, size.width, size.height);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Loading Screen Template\nDESCRIPTION: HTML template for a simplified loading screen without images.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script id=\"loading-screen\" type=\"text/x-babylon-viewer-template\">\n    <style>\n      loading-screen {\n          position: absolute;\n          z-index: 100;\n          opacity: 1;\n          pointer-events: none;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          -webkit-transition: opacity 2s ease;\n          -moz-transition: opacity 2s ease;\n          transition: opacity 2s ease;\n      }\n  </style>\n\n  <span> LOADING... </span>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Hand Tracking Feature Manually\nDESCRIPTION: Demonstrates how to manually enable the WebXR hand tracking feature in Babylon.js. This method is useful for older versions or when more specific configuration is needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRHandTracking.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\n\nfeatureManager.enableFeature(BABYLON.WebXRFeatureName.HAND_TRACKING, \"latest\", {\n  xrInput: xrHelper.input,\n  // other options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer for GPU Rendering on Remote Server\nDESCRIPTION: This code configures Puppeteer to run in non-headless mode and utilize GPU rendering, which is necessary for better performance on remote servers with GPU access.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderRemoteScreenshot.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't disable the gpu\nvar args = puppeteer.defaultArgs().filter(arg => arg !== '--disable-gpu');\n// Run in non-headless mode\nargs = args.filter(arg => arg !== '--headless');\n// Use desktop graphics\nargs.push(\"--use-gl=desktop\")\n// Lanch pupeteer with custom arguments\nconst browser = await puppeteer.launch({\n    headless: false,\n    ignoreDefaultArgs: true,\n    args\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling WebXR Features Without Auto-Attach\nDESCRIPTION: Shows how to enable a WebXR feature without automatic attachment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fm = xr.baseExperience.featuresManager;\nconst xrHitTestLatest = fm.enableFeature(WebXRFeatureName.HIT_TEST, \"latest\", {\n    testOnPointerDownOnly: true\n}, false /* prevent attaching automatically */ );\n```\n\n----------------------------------------\n\nTITLE: Initializing Poki SDK in JavaScript\nDESCRIPTION: Use this JavaScript code at the start of your game to initialize the Poki SDK. It includes error handling for cases where the user might have an ad blocker.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Poki.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPokiSDK.init()\n  .then(() => {\n    console.log(\"Poki SDK successfully initialized\");\n    // your code to continue to game\n    continueToGame();\n  })\n  .catch(() => {\n    console.log(\"Initialized, but the user likely has adblock\");\n    // your code to continue to game\n    continueToGame();\n  });\n```\n\n----------------------------------------\n\nTITLE: Using SPS.vars for Variable Reuse in JavaScript\nDESCRIPTION: This code demonstrates how to use the SPS.vars property to store reusable variables that share the SPS lifecycle, preventing unnecessary object creation and helping with garbage collection.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/optimize_sps.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.vars.tempVector = new BABYLON.Vector3(0, 0, 0);\n// ...\nSPS.dispose(); // cleans explicitly all your SPS.vars !\n```\n\n----------------------------------------\n\nTITLE: Specifying Available Compressed Texture Formats in Babylon.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to inform the Babylon.js engine about the available compressed texture formats (KTX variants with specific suffixes) located on the server. An array containing the suffixes of the available formats is passed to the `engine.setTextureFormatToUse` method. This allows the engine to choose the most suitable format supported by the client's hardware and browser when loading textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/mutliPlatTextures.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// order & case do not matter\nconst available = [\"-astc.ktx\", \"-dxt.ktx\", \"-pvrtc.ktx\", \"-etc2.ktx\", \"-etc1.ktx\"];\nconst formatUsed = engine.setTextureFormatToUse(available);\n```\n\n----------------------------------------\n\nTITLE: Adding Main Template to Babylon.js Viewer\nDESCRIPTION: This snippet shows how to add the main template to the Babylon.js Viewer, including ground, skybox, engine, and camera configurations. It demonstrates the use of the 'templates' tag and its child elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"none\">\n  <templates>\n    <main location=\"#main-template\">\n      <params no-escape=\"true\" babylon-font=\"https://viewer.babylonjs.com/babylon.woff\"></params>\n    </main>\n  </templates>\n\n  <!-- Ground that receives shadows -->\n  <ground receive-shadows=\"true\"></ground>\n  <!-- Default skybox -->\n  <skybox></skybox>\n\n  <!-- enable antialiasing -->\n  <engine antialiasing=\"true\"></engine>\n  <!-- camera configuration -->\n  <camera>\n    <!-- add camera behaviors -->\n    <behaviors>\n      <!-- enable default auto-rotate behavior -->\n      <auto-rotate type=\"0\"></auto-rotate>\n      <!-- enable and configure the framing behavior -->\n      <framing type=\"2\" zoom-on-bounding-info=\"true\" zoom-stops-animation=\"false\"></framing>\n      <!-- enable default bouncing behavior -->\n      <bouncing type=\"1\"></bouncing>\n    </behaviors>\n  </camera>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Installing BabylonJS HTML Mesh UMD Package\nDESCRIPTION: Command to install the HTML Mesh functionality via NPM as a UMD package\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/addons/htmlMesh.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babylonjs-addons --save\n```\n\n----------------------------------------\n\nTITLE: Defining Lens Flare Structure in Babylon.js JSON (JavaScript)\nDESCRIPTION: Details the JSON format for an individual lens flare element within a LensFlareSystem in Babylon.js. Each flare is defined by its position along the axis from the light source to the camera center (typically between -1 and 1), its size, its color tint, and the name of the texture to use.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n     \"position\": float,\n     \"size\": float,\n     \"color\": color3,\n     \"textureName\": string\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a React Project for Vaporwear Site - Bash\nDESCRIPTION: Shows the command for creating a new React.js project scaffold named 'vaporwear-react-site' using Create React App. Requires Node.js and npm installed. Input: none; Output: a new project directory initialized with boilerplate React structure. This command is foundational for bootstrapping any React-based frontend application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/frontend.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app vaporwear-react-site\n\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Controls and Core\nDESCRIPTION: NPM installation commands for the Babylon.js controls package and its peer dependency core package.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/resizer.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @babylonjs/controls\nnpm install @babylonjs/core\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Master Branch to Origin Repository using Git\nDESCRIPTION: The standard Git command `git push origin master` used to upload committed changes from the local `master` branch to the remote repository named `origin` (typically the user's fork). This step is performed after committing changes and before creating a pull request.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Default Node.js Runtime Paths\nDESCRIPTION: Default file system paths for Node.js runtime on Mac OSX and Windows platforms. These need to be configured in the Unity Toolkit to enable JavaScript compilation features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/Projects.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMac OSX: /usr/local/bin/node\n\nWindows: C:\\Program Files\\nodejs\\node.exe\n```\n\n----------------------------------------\n\nTITLE: Controlling GUITextarea Visibility\nDESCRIPTION: Method to set the GUITextarea element to visible or invisible, with optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiTextarea.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Filename Structure in Webpack (JavaScript)\nDESCRIPTION: This JavaScript snippet shows a partial Webpack configuration for the `output` property. It sets the `filename` pattern to place generated bundles within a `js/` subdirectory (e.g., `js/main.js`, `js/webgl-shaders.js`), organizing the output directory.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\noutput: {\n        filename: \"js/[name].js\",\n        // ... further configuration\n    },\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon Viewer via NPM\nDESCRIPTION: Command to install the Babylon Viewer package using NPM package manager for production use instead of CDN.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer.v2.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/viewer\n```\n\n----------------------------------------\n\nTITLE: Internal World Matrix Getter\nDESCRIPTION: Internal method to get or create the world matrix. Marked with @ignore for internal use only.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @ignore internal use only\n */\npublic _getWorldMatrix(): Matrix {\n    if (!this._worldMatrix) {\nthis._worldMatrix = Matrix.Identity();\n    }\n    return this._worldMatrix;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing SPS Mesh with freezeWorldMatrix and freezeNormals - Babylon.js - JavaScript\nDESCRIPTION: Recommends two methods to further optimize a static SPS mesh in Babylon.js by freezing world matrix and normals, which eliminates per-frame recomputation of transforms and lighting data. Effective when the mesh will not move, rotate, or scale after construction. Prerequisites: a fully built SPS mesh instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.mesh.freezeWorldMatrix(); // prevents from re-computing the World Matrix each frame\nSPS.mesh.freezeNormals(); // prevents from re-computing the normals each frame\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack 5 Fallback for Ammo.js (JavaScript)\nDESCRIPTION: Configures Webpack 5 to correctly bundle `ammo.js` for web targets by providing fallbacks for Node.js specific modules ('fs', 'path') that are not available or needed in the browser environment. This prevents build errors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/es6Support.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  ...\n  resolve: {\n    fallback: {\n      'fs': false,\n      'path': false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing glTF File Loader in JavaScript (NPM)\nDESCRIPTION: JavaScript import statement for including the glTF File Loader when using Babylon.js NPM packages. This method is not recommended for dynamic loading.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/loaders/glTF/2.0\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Particles Escaping Boundaries Due to High Speed in Babylon.js\nDESCRIPTION: Babylon.js Playground showing a scenario with randomly positioned particles where collision-induced speed increases can cause particles, initially below the speed threshold, to eventually move fast enough to escape the bounding box undetected. Includes adjustable speed parameters (lines 21-23 in the playground code) and a single red particle for tracking.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Slow_Collide.md#2025-04-23_snippet_3\n\nLANGUAGE: babylonjs-playground\nCODE:\n```\n<Playground id=\"#MYGV6#3\" title=\"Escaping Particles\" description=\"Shows how increase speed allows particles to leave the box\"/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specular Over Alpha in Babylon.js glTF Loader\nDESCRIPTION: Configures the Babylon.js glTF loader to disable specular over alpha by setting `transparencyAsCoverage` to `true`. This is achieved using `SceneLoader.OnPluginActivatedObservable` to modify the loader settings upon activation. This adjustment is necessary for 3D Commerce certification.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/3D_commerce_certif.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSceneLoader.OnPluginActivatedObservable.add((plugin) => {\n    if (plugin.name === \"gltf\") {\n        const loader = plugin as GLTFFileLoader;\n        loader.transparencyAsCoverage = true;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Skeleton from Clone in Babylon.js\nDESCRIPTION: Shows how to remove a skeleton from a cloned mesh if it's not needed.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/clones.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclone.skeleton = null;\n```\n\n----------------------------------------\n\nTITLE: Calculating Roofprint Dimensions in JavaScript\nDESCRIPTION: This snippet calculates the `wholeRoofprint` by defining the roof's overhang and overlap based on the house wall's `ply`. It calls a custom `roofprint` function, passing the house footprint `corners`, calculated `overlap`, and house `height`. The function is expected to return an array of Vector3 representing the roof's outer edge corners.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar overhang = 0.2;\nvar overlap = ply + overhang;\nvar wholeRoofprint = roofprint(corners, overlap, height);\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Tag to Mesh in Babylon.js\nDESCRIPTION: Demonstrates how to add an IAccessibilityTag to a Babylon.js mesh to provide a description for screen readers. This allows blind or low vision users to understand the content of the 3D scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/accessibility/screenReaders.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet egg = BABYLON.MeshBuilder.CreateSphere(\"Egg\", { diameterX: 0.62, diameterY: 0.8, diameterZ: 0.6 }, scene);\negg.accessibilityTag = {\n  description: \"An easter egg\",\n};\n```\n\n----------------------------------------\n\nTITLE: Navigation Bar Default Configuration\nDESCRIPTION: Default configuration object for the navigation bar template including button setup and visibility timeout.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnavBar: {\n    html: require(\"../../../assets/templates/default/navbar.html\"),\n    params: {\n        buttons: [\n            {\n                id: 'fullscreen-button',\n                altText: \"Fullscreen\",\n                image: require('../../../assets/img/fullscreen.png')\n            }\n        ],\n        visibilityTimeout: 2000\n    },\n    events: {\n        pointerdown: { 'fullscreen-button': true }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Dynamic Texture in Babylon.js\nDESCRIPTION: Updates the dynamic texture to reflect changes made to the canvas. The optional parameter controls whether to invert the Y axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyDynamicTexture.update();\n```\n\n----------------------------------------\n\nTITLE: Launching the Visualization Test UI for a Specific Engine (WebGL2) via NPM\nDESCRIPTION: Executes the command to start the Playwright UI for visualization tests, using the `--project=\"webgl2\"` flag to filter the displayed tests, showing only those configured for the WebGL2 engine.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:visualization:ui -- --project=\"webgl2\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in BabylonJS Documentation\nDESCRIPTION: Shows how to embed a YouTube video using a custom component tag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<Youtube id=\"qqMuuSM7GvI\" />\n```\n\n----------------------------------------\n\nTITLE: Ray Creation for Point Testing\nDESCRIPTION: Creates a ray using mesh's bounding sphere diameter as the ray length for intersection testing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/IsInside.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar diameter = 2 * boundInfo.boundingSphere.radius;\nray = new BABYLON.Ray(point, direction, diameter);\n```\n\n----------------------------------------\n\nTITLE: Loading Single Component Control in BabylonJS\nDESCRIPTION: Code to load a single GUI component exported from Figma into BabylonJS. Creates a fullscreen UI and parses a single rectangle control from the JSON data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/figmaToBabylonJS.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst guiData = require(\"../figmaToBabylonJS.json\")\nlet advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\")\nconst guiRect = Rectangle.Parse(guiData, null)\nadvancedTexture.addControl(guiRect)\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Link Example\nDESCRIPTION: Shows how to properly link images in markdown documentation files\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![quick description (for accessibility)](/img/features/divingDeeper/my_very_great_page/my-wonderful-image.jpg)\n```\n\n----------------------------------------\n\nTITLE: Implementing ShadowOnly Material in Babylon.js\nDESCRIPTION: Creates a plane mesh and applies the ShadowOnly material to display shadows. The mesh is rotated to act as a ground surface and is configured to receive shadows.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/shadowOnlyMat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.Mesh.CreatePlane('ground', 1000, scene)\nground.rotation.x = Math.PI / 2\nground.material = new BABYLON.ShadowOnlyMaterial('shadowOnly', scene)\nground.receiveShadows = true\n```\n\n----------------------------------------\n\nTITLE: Setting Mesh Rotation Equivalent to ZXY World Convention in JavaScript\nDESCRIPTION: Assigns a mesh rotation using `mesh.rotation` where the Euler angles `alpha`, `beta`, `gamma` are set to produce the same orientation as applying rotations sequentially around Z, X, and Y axes in world space. Note that `alpha`, `beta`, `gamma` correspond to `pitch`, `yaw`, `roll` respectively in the context of the YXZ convention.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotation = new BABYLON.Vector3(alpha, beta, gamma);\n```\n\n----------------------------------------\n\nTITLE: Defining Node Structure for WebGPU Render Pipeline Cache in TypeScript\nDESCRIPTION: This snippet defines the `NodeState` class, which represents a node in the cache tree. Each node contains a dictionary (`values`) mapping state IDs to child nodes and potentially holds a cached `GPURenderPipeline`. It also introduces the `WebGPUCacheRenderPipelineTree` class that utilizes this structure, storing the root node in the static `_Cache` property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUCacheRenderPipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass NodeState {\n    public values: { [id: number]: NodeState };\n    public pipeline: GPURenderPipeline;\n\n    constructor() {\n        this.values = {};\n    }\n}\n\nexport class WebGPUCacheRenderPipelineTree {\n    private static _Cache: NodeState = new NodeState();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Production Mode for Server via Command Line (Shell)\nDESCRIPTION: These examples show how to enable production mode when running the Babylon server tool. Option 1 uses the npm workspace command ('serve -w @tools/babylon-server') and passes the environment variable via '-- --env'. Option 2 directly invokes 'webpack serve' within the package directory with the environment variable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n# option 1, use the npm run command\nnpm run serve -w @tools/babylon-server -- --env=mode=production\n# option 2 - use webpack directly in the Babylon server package directory\nnpx webpack serve --env=mode=production\n```\n\n----------------------------------------\n\nTITLE: Adding Emissive Flag to Material Defines\nDESCRIPTION: Adds an EMISSIVE flag to the material defines class to enable conditional compilation of emissive texture code in the shaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npublic EMISSIVE = false;\n```\n\n----------------------------------------\n\nTITLE: Including Digital Rain Post Process Script in HTML\nDESCRIPTION: This snippet shows how to include the Digital Rain Post Process script in an HTML file. It's a prerequisite for using the post-process in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/digitalRainPP.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.digitalRainPostProcess.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Pulling Changes from Upstream Master using Git\nDESCRIPTION: The Git command `git pull upstream master` is used to fetch changes from the `master` branch of the remote repository named `upstream` (typically the main Babylon.js repository) and merge them into the current local branch. This ensures the local branch is up-to-date before pushing local changes, resolving potential conflicts.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Building and syncing Ionic project for Android\nDESCRIPTION: Commands to build the Ionic project and sync changes with the Android platform.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nionic build\nionic capacitor sync android\n```\n\n----------------------------------------\n\nTITLE: Positioning Box Above Ground in Babylon.js\nDESCRIPTION: Adjusts the vertical position of a box mesh to sit on top of the ground plane by moving it up half its height along the y-axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/ground.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbox.position.y = 0.5;  //box created with default size so height is 1\n```\n\n----------------------------------------\n\nTITLE: Initializing Scene Using Whole Module Import - Babylon.js Core - JavaScript\nDESCRIPTION: Shows how to use a single namespace import from @dev/core to simulate the usual BABYLON namespace in the dev host. Dramatically simplifies references to Babylon.js classes and functions, but note that only @dev/core features are available this way (without loaders, GUI, etc.). Requires 'canvas' and 'engine' variables, and properly configured @dev/core package. Inputs: engine, canvas; Output: fully initialized Scene object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { canvas, engine } from \"./index\";\nimport * as BABYLON from \"@dev/core\";\n\nexport const createScene = function () {\n  // This creates a basic Babylon Scene object (non-mesh)\n  const scene = new BABYLON.Scene(engine);\n\n  // This creates and positions a free camera (non-mesh)\n  const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(BABYLON.Vector3.Zero());\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  // Our built-in 'sphere' shape.\n  const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\n\n  // Move the sphere upward 1/2 its height\n  sphere.position.y = 1;\n\n  // Our built-in 'ground' shape.\n  BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Incremental Loading for glTF 1.0 in JavaScript\nDESCRIPTION: JavaScript code to disable incremental loading for glTF 1.0 loader. This allows the success callback to be called after loading meshes and shaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.GLTFFileLoader.IncrementalLoading = false;\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Parameters in TypeScript for Vaporwear 3D Experience\nDESCRIPTION: This snippet shows the implementation of camera parameter settings for the Vaporwear 3D experience. It allows control over the camera's alpha, beta, and radius values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/vaporwearConfigurator/3d.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic setCameraParameters(alpha?: number, beta?: number, radius?: number) {\n    if (alpha !== undefined) { this._camera.alpha = alpha; }\n    if (beta !== undefined) { this._camera.beta = beta; }\n    if (radius !== undefined) { this._camera.radius = radius; }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GamepadManager in Babylon.js\nDESCRIPTION: Creates a new GamepadManager instance to handle gamepad input in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/gamepads.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst gamepadManager = new BABYLON.GamepadManager();\n```\n\n----------------------------------------\n\nTITLE: Enabling Embedded Mode With ES Modules\nDESCRIPTION: Demonstrates how to initialize the Inspector in embedded mode using ES Modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInspector.Show(scene, {\n  embedMode: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Shader Uniforms via onApplyObservable in JavaScript\nDESCRIPTION: Demonstrates how to set the values of custom uniforms declared in an EffectWrapper. This code adds an observer to `onApplyObservable` which gets triggered before the effect is applied, allowing uniform values like textures and floats to be set.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/imageFilter.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncustomEffectWrapper.onApplyObservable.add(() => {\n  // Sets the custom values.\n  customEffectWrapper.effect.setTexture(\"otherTexture\", otherTexture);\n  customEffectWrapper.effect.setFloat3(\"colorOffset\", 0.2, 0, 0.2);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebXR Hand Gesture Recognition\nDESCRIPTION: Complete example showing how to initialize XR service, load gesture templates, set up combination repositories, and implement gesture recognition with event handling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/WebXRExtension/gestureRecognition.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst options:TXRServiceOptions = {\n\tmode:'immersive-vr',\n\tfeatures:{\n\t\tHAND_TRACKING:<HandsTrackingConfig>{/* config here */},\n    }\n} \n\nconst xrService =   new XRService();\nxrService.init(options);\n\nconst isActive  =   await this._xrService.activateXR();\nif (!isActive) throw ('somthing went wrong');\n\nconst ftHandEnv =   xrService.extractFeatureEnv('HAND_TRACKING');\n\n// Loading templates\nconst jLoader       =   new JsonLoader();\nconst fistTemplate  =   await jLoader.load('/figures/fist-outside.json');\nconst palmTemplate  =   await jLoader.load('/figures/palm-out.json');\n\n// Add templates to repository\nif(\n    fistTemplate\n    && palmTemplate\n){\n    // Add to feature\n    ftHandEnv.gesturesRepo.set('fist-outside', fistTemplate);\n    ftHandEnv.gesturesRepo.set('palm-out', palmTemplate);\n}\n\n// Combination\nconst activateComb  =   await jLoader.load('/combinations/activate.json');\n\nconst activateCombRepo  =   new CombinationsRepo();\nactivateCombRepo.set('activate', activateComb as TGestureCombination);\n\n// Add to feature\nftHandEnv.combinationsReposMap.set('activate-deactivate', activateCombRepo);\n\n// Start listening\nftHandEnv.combinations$.subscribe((comb)=>{\n    if(\n        (comb.type           ==  'COMBINATION')\n        && (comb.repoName    ==  'activate-deactivate')\n    ){\n        if(comb.descriptor.combinationName == 'activate'){\n            // ACTIVATE SOME\n        }\n    }\n});\n\n// Start recognition\nftHandEnv.startRecognize('activate-deactivate');\n```\n\n----------------------------------------\n\nTITLE: Creating an Extruded Polygon with Mesh.CreatePolygon (Legacy) in Babylon.js\nDESCRIPTION: Shows the legacy `BABYLON.Mesh.CreatePolygon` function used for creating extruded polygon meshes. While the page primarily discusses `ExtrudePolygon`, this snippet illustrates the older method's signature which also accepts a `depth` parameter for extrusion. It takes the polygon `shape`, `depth`, `scene`, and optional parameters like `holes`, `updatable`, and `sideOrientation`. Like `ExtrudePolygon`, it relies on the Earcut library when dealing with concave shapes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/extrude_polygon.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet polygon = BABYLON.Mesh.CreatePolygon(\"polygon\", shape, depth, scene);\nlet polygon = BABYLON.Mesh.CreatePolygon(\"polygon\", shape, depth, scene, holes, updatable, sideOrientation); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Listening in Babylon.JS\nDESCRIPTION: This example shows how to listen for a single keyboard key ('z') being released using the @onKeyboardEvent decorator. The decorated method receives keyboard information that includes the triggered key.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/listeningEvents.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@onKeyboardEvent(\"z\", KeyboardEventTypes.KEYUP)\nprotected _keyup(info: KeyboardInfo): void {\n    console.log(info.event.key);\n}\n```\n\n----------------------------------------\n\nTITLE: Conceptual Box Position Update in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates a conceptual approach to updating a box's vertical position based on its horizontal position and time using the sine function. This method directly manipulates object properties, which is contrasted with the vertex shader approach discussed in the document.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Writing1.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbox.position.y = Math.sin(box.position.x + time)\n```\n\n----------------------------------------\n\nTITLE: Creating Ribbons with Mesh Class in Babylon.js\nDESCRIPTION: Shows the traditional Mesh.CreateRibbon method usage with both required and optional parameters for creating ribbon meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/ribbon.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ribbon = BABYLON.Mesh.CreateRibbon(\"ribbon\", pathArray, closeArray, closePath, offset, scene);\nconst ribbon = BABYLON.Mesh.CreateRibbon(\"ribbon\", pathArray, closeArray, closePath, offset, scene, updatable, sideOrientation, instance); //optional parameters after scene\n```\n\n----------------------------------------\n\nTITLE: Adding Players to the Scene on Room Join with Colyseus - JavaScript\nDESCRIPTION: This snippet demonstrates how to add player character meshes to a Babylon.js scene when users join a Colyseus multiplayer room. The client listens to the room's player collection and instantiates a mesh for each player. Dependencies include Colyseus client library and Babylon.js. The input is the player join event; output is a mesh object for each player in the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.joinOrCreate <\n  StateHandler >\n  \"game\".then((room) => {\n    const playerViews: { [id: string]: BABYLON.Mesh } = {};\n\n    room.state.players.onAdd = function (player, key) {\n      // Our built-in 'sphere' shape. Params: name, subdivs, size, scene\n      playerViews[key] = BABYLON.MeshBuilder.CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\n    };\n  });\n```\n\n----------------------------------------\n\nTITLE: Demo: Depth Frag in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: #1180R5#15) illustrating the 'Depth Frag' feature, used for logarithmic depth buffer computation. The demo is titled 'Depth Frag'. This feature requires the EXT_frag_depth extension for WebGL1 compatibility.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"#1180R5#15\" title=\"Depth Frag\" description=\"Depth Frag\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Physics Impostor - V1 Implementation\nDESCRIPTION: Original V1 physics code showing how to create a sphere with physics properties using PhysicsImpostor.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v2/migrateFromV1.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\nconst impostor = new BABYLON.PhysicsImpostor(sphere, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.2, restitution: 0.3 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Filter Instance in TypeScript\nDESCRIPTION: Shows how to create a basic Smart Filter instance and add blocks to it. This is the foundation for building filter graphs.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/howSmartFiltersWork.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst smartFilter = new SmartFilter(\"Simplest\");\n```\n\n----------------------------------------\n\nTITLE: Describing .babylon Scene Structure in JSON - Babylon.js (JavaScript)\nDESCRIPTION: Defines the global structure of a .babylon scene file for Babylon.js using JSON notation. This JSON template lists mandatory and optional fields that describe scene-level settings and entities such as cameras, meshes, lights, materials, physics, and more. Expected inputs are JSON objects with specific property types and arrays of sub-objects. No external dependencies are required to interpret the structure, but Babylon.js's loader is needed at runtime to parse such files. Limitations include strict property naming and expected formats as outlined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/.babylonFileFormat.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n\\t\\\"autoClear\\\": boolean,\\n\\t\\\"clearColor\\\": color3,\\n\\t\\\"ambientColor\\\": color3,\\n\\t\\\"gravity\\\": vector3 (usually [0,-9,0]),\\n\\t\\\"cameras\\\": array of Cameras (see below),\\n\\t\\\"activeCamera_\\\": string,\\n\\t\\\"lights\\\": array of Lights (see below),\\n    \\\"reflectionProbes\\\": array of ReflectionProbe (see below),\\n\\t\\\"materials\\\": array of Materials (see below),\\n\\t\\\"geometries\\\": {...} (see below),\\n\\t\\\"meshes\\\": array of Meshes (see below),\\n\\t\\\"multiMaterials\\\": array of MultiMaterials (see below),\\n\\t\\\"shadowGenerators\\\": array of ShadowGenerators (see below),\\n\\t\\\"skeletons\\\": array of Skeletons (see below),\\n\\t\\\"particleSystems\\\": array of ParticleSystems (see below),\\n\\t\\\"lensFlareSystems\\\": array of LensFlareSystems (see below),\\n\\t\\\"actions\\\": array of actions (see below),\\n\\t\\\"sounds\\\": array of Sounds (see below),\\n\\t\\\"collisionsEnabled\\\": boolean,\\n\\t\\\"physicsEnabled\\\": boolean,\\n\\t\\\"physicsGravity\\\": vector3 (defaults to [0,-9.81,0]),\\n\\t\\\"physicsEngine\\\": string (\\\"oimo\\\" or \\\"cannon\\\", defaults to the default engine (oimo),\\n    \\\"animations\\\": array of Animations (see below, can be omitted),\\n    \\\"autoAnimate\\\": boolean,\\n\\t\\\"autoAnimateFrom\\\": int,\\n\\t\\\"autoAnimateTo\\\": int,\\n\\t\\\"autoAnimateLoop\\\": boolean (can be omitted),\\n    \\\"autoAnimateSpeed\\\": number (can be omitted)\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Gizmo Appearance in Babylon.js\nDESCRIPTION: Demonstrates how to customize the visual appearance of a gizmo by creating a custom mesh and setting it on the gizmo.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst customMesh = BABYLON.MeshBuilder.CreateBox(\"\", { size: 0.1 }, gizmo.gizmoLayer.utilityLayerScene);\ncustomMesh.material = material;\ngizmo.setCustomMesh(customMesh);\n```\n\n----------------------------------------\n\nTITLE: Checking NPM and Node Versions\nDESCRIPTION: Commands to verify installed versions of NPM and Node.js\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm --version\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Defining the Section Data Constructor in Babylon.js (JavaScript)\nDESCRIPTION: This snippet defines the constructor function `sectionData`. It accepts a starting index `startAt` and an `options` object. It initializes an instance with `start` and `options` properties, effectively creating a data structure to hold the configuration for one section of the track within the `createTrack` process.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Track_Code.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar sectionData = function (startAt, options) {\n  this.start = startAt;\n  this.options = options;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of GUI Elements in JavaScript\nDESCRIPTION: Checks if all GUI elements managed by the GUIManager are currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiManager.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible()\n```\n\n----------------------------------------\n\nTITLE: Filtering Unit Tests by Test Name in a Workspace via NPM\nDESCRIPTION: Runs unit tests in the `@dev/core` workspace, filtering them using Jest's `-t` flag (`--testNamePattern`) to execute only tests whose names (defined in `it` or `describe` blocks) contain the string \"material\". This helps target specific test cases or suites.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test -w @dev/core -- --selectProjects unit -t \"material\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Blur Width in Standard Rendering Pipeline\nDESCRIPTION: This code customizes the blur width (kernel size) in the Standard Rendering Pipeline, affecting the spread and performance of the blur effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npipeline.exposure = 128; // Blur is less expansive and is less spreaded\n```\n\n----------------------------------------\n\nTITLE: Building Babylon.js App for GitHub Pages\nDESCRIPTION: Command to build the Babylon.js app (test_package and app_package) and place the output in the docs folder for GitHub Pages deployment.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Importing Animated Meshes in BabylonJS\nDESCRIPTION: Shows how to import animated meshes into an existing scene using ImportMeshAsync method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Blender.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"02.classic-animation.babylon\", scene).then(function (result) {});\n```\n\n----------------------------------------\n\nTITLE: Adding Material to UI Controls\nDESCRIPTION: Updates the UI controls to include the new material option and handles switching between different materials based on user selection.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngui.add(options, \"material\", [\"standard\", \"simple\", \"diffuseEmissive\"]).onFinishChange(function () {\n  switch (options.material) {\n    case \"diffuseEmissive\":\n      currentMaterial = diffuseEmissive;\n      break;\n    case \"simple\":\n      currentMaterial = simple;\n      break;\n    default:\n      currentMaterial = std;\n      break;\n  }\n\n  currentMesh.material = currentMaterial;\n});\n```\n\n----------------------------------------\n\nTITLE: Building Data and Parameters Configuration\nDESCRIPTION: Example of setting up wall construction parameters including base coordinates, door and window specifications, and wall properties like thickness and height.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/House_Use.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar baseData = [-3, -2, -1, -4, 1,-4, 3, -2, 5, -2, 5, 1, 2, 1, 2, 3, -3, 3];\n\nvar corners = [];\nfor(b = 0; b < baseData.length/2; b++) {\n\tcorners.push(new corner(baseData[2*b], baseData[2*b + 1]));\n}\n\nvar door = new door(1, 1.8);\nvar doorSpace = new doorSpace(door, 1);\n\nvar window0 = new window(1.2, 2.4);\nvar window1 = new window(2, 2.4);\n\nvar windowSpace02 = new windowSpace(window0, 0.814, 0.4);\nvar windowSpace1 =  new windowSpace(window0, 0.4, 0.4);\nvar windowSpace78 = new windowSpace(window1, 1.5, 0.4);\n\nvar walls = [];\nfor(c=0; c<corners.length; c++) {\n\twalls.push(new wall(corners[c]));\n}\n\nwalls[0].windowSpaces = [windowSpace02];\nwalls[1].windowSpaces = [windowSpace1];\nwalls[2].windowSpaces = [windowSpace02];\nwalls[7].windowSpaces = [windowSpace78];\nwalls[8].windowSpaces = [windowSpace78];\n\nwalls[5].doorSpaces = [doorSpace];\n\nvar ply = 0.3;\nvar height = 3.2;\n```\n\n----------------------------------------\n\nTITLE: Using AppendSceneAsync with Promises in JavaScript\nDESCRIPTION: Demonstrates the use of the asynchronous version of AppendSceneAsync which returns a promise.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/legacy.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.AppendSceneAsync(\"./duck.gltf\", scene).then(function (scene) {\n  // do something with the scene\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Scene as Babylon File in JavaScript\nDESCRIPTION: This function serializes a Babylon.js scene, converts it to JSON, and allows downloading it to the user's computer as a .babylon file. It handles URL cleanup, proper file extension checking, and blob creation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Save_Babylon.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet objectUrl;\nfunction doDownload(filename, scene) {\n  if (objectUrl) {\n    window.URL.revokeObjectURL(objectUrl);\n  }\n\n  const serializedScene = BABYLON.SceneSerializer.Serialize(scene);\n\n  const strScene = JSON.stringify(serializedScene);\n\n  if (filename.toLowerCase().lastIndexOf(\".babylon\") !== filename.length - 8 || filename.length < 9) {\n    filename += \".babylon\";\n  }\n\n  const blob = new Blob([strScene], { type: \"octet/stream\" });\n\n  BABYLON.Tools.Download(blob, filename);\n}\n```\n\n----------------------------------------\n\nTITLE: Render Loop Implementation\nDESCRIPTION: Sets up the main render loop for the BabylonJS scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/addons/htmlMesh.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst startRenderLoop = () => {\n  engine.runRenderLoop(() => {\n    scene.render();\n  });\n};\n\ncreateScene();\nstartRenderLoop();\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons to Grid\nDESCRIPTION: Positions buttons within the grid layout system for mobile controls using grid coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/crossPlatform.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nactionGrid.addControl(dashBtn, 0, 1);\nactionGrid.addControl(jumpBtn, 1, 0);\n```\n\n----------------------------------------\n\nTITLE: Error Object Getter\nDESCRIPTION: Getter method that returns the current error object for a task if it is in an error state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @returns the current error object (if task is in error)\n */\npublic get errorObject(): { message?: string; exception?: any; } {\n    return this._errorObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Block Example\nDESCRIPTION: Example showing how to format code blocks in markdown with language specification for proper syntax highlighting\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript\n// your code here\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Player Disconnection in Colyseus Room (TypeScript)\nDESCRIPTION: This server-side code snippet implements the `onLeave` method in a Colyseus Room (`MyRoom.ts`). When a client disconnects (either intentionally or unexpectedly), this method is called. It logs the departure and removes the corresponding `Player` instance from the `players` map in the room's state using the client's `sessionId`. This state change is automatically synchronized to the remaining clients. Requires `Client` type from Colyseus.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// MyRoom.ts\n// ...\n    onLeave(client: Client, consented: boolean) {\n        console.log(client.sessionId, \"left!\");\n\n        this.state.players.delete(client.sessionId);\n    }\n// ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Asset Watching via .env File (Shell/.env)\nDESCRIPTION: This example demonstrates setting the 'WATCH_ASSETS' variable to 'true' in the '.env' file. This corresponds to the '--watch-assets' command-line flag, causing assets to be automatically watched when running the development watcher.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nWATCH_ASSETS=true\n```\n\n----------------------------------------\n\nTITLE: Installing heyVR SDK NPM Package\nDESCRIPTION: Command to install the heyVR SDK package via NPM package manager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_heyVR.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @heyvr/sdk-gameplay\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Material in Test Page\nDESCRIPTION: Creates an instance of the DiffuseEmissiveMaterial and configures its diffuse and emissive textures with appropriate scaling for testing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst diffuseEmissive = new BABYLON.DiffuseEmissiveMaterial(\"diffuseEmissive\", scene);\ndiffuseEmissive.diffuseTexture = new BABYLON.Texture(\"textures/amiga.jpg\", scene);\ndiffuseEmissive.diffuseTexture.uScale = 5;\ndiffuseEmissive.diffuseTexture.vScale = 5;\n\ndiffuseEmissive.emissiveTexture = new BABYLON.Texture(\"textures/amiga.jpg\", scene);\ndiffuseEmissive.emissiveTexture.uScale = 10;\ndiffuseEmissive.emissiveTexture.vScale = 10;\n```\n\n----------------------------------------\n\nTITLE: Modifying GUI Control Properties in Babylon.js\nDESCRIPTION: Demonstrates how to access and modify properties of GUI controls after loading them into a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/guiEditor.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet backgroundBox = advancedTexture.getControlByName(\"BackgroundBox\");\nbackgroundBox.background = \"blue\";\n```\n\n----------------------------------------\n\nTITLE: Adding Auto Animation Properties to Babylon.js Export\nDESCRIPTION: This code snippet needs to be added to the .babylon file after export to enable automatic animation playback when loaded in the Babylon.js Sandbox. It sets the animation to start at frame 1, end at frame 152, and loop continuously.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Mixamo_to_Babylon.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoAnimate\": true,\"autoAnimateFrom\": 1,\"autoAnimateTo\": 152,\"autoAnimateLoop\": true,\n```\n\n----------------------------------------\n\nTITLE: Scene Transition Animation Control in BabylonJS\nDESCRIPTION: Handles the animation loop for scene transition, gradually reducing fade level and triggering scene change.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/extraFeatures.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscene.registerBeforeRender(() => {\n  if (this._transition) {\n    fadeLevel -= 0.05;\n    if (fadeLevel <= 0) {\n      this._goToCutScene();\n      this._transition = false;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Pausing Warning Sound Effects During Game Pause in BabylonJS\nDESCRIPTION: This code snippet pauses the warning sound effect when the game is paused, ensuring sound effects don't continue playing during paused game states.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/musicSFX.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelse { // if the game is paused, also pause the warning SFX\n    this._sparkWarningSfx.pause();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Vectors Between AB and OB\nDESCRIPTION: Processes edge cases for vertices between AB and OB edges with rotation calculations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Code.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPrimary.prototype.EdgeVecsABOB = function() {\n    let m = this.m;\n    let n = this.n;\n\n    const B = new IsoVector(-n, m + n)\n\n    for (let y = 1; y < m + n; y++) {\n        const point = new IsoVector(this.min[y], y);\n        const prev = new IsoVector(this.min[y - 1], y - 1);\n        const next = new IsoVector(this.min[y + 1], y + 1);\n        const pointR = point.clone();\n        const prevR = prev.clone();\n        const nextR = next.clone();\n        \n        pointR.rotate60About(B);\n        prevR.rotate60About(B);\n        nextR.rotate60About(B);\n\n        const maxPoint = new IsoVector(this.max[pointR.y], pointR.y);\n        const maxPrev = new IsoVector(this.max[pointR.y - 1], pointR.y - 1);\n        const maxLeftPrev = new IsoVector( this.max[pointR.y - 1] - 1, pointR.y - 1);\n\n        if ((pointR.x !== maxPoint.x) || (pointR.y !== maxPoint.y)) {\n            if (pointR.x !== maxPrev.x) { // type2\n                //up\n                this.vertexTypes.push([1, 0, 0]);\n                this.isoVecsABOB.push([point, maxPrev, maxLeftPrev]);\n                //down\n                this.vertexTypes.push([1, 0, 0]);\n                this.isoVecsABOB.push([point, maxLeftPrev, maxPoint]);\n            }\n            else if (pointR.y === nextR.y) { // type1\n                //up\n                this.vertexTypes.push([1, 1, 0]);\n                this.isoVecsABOB.push([point, prev, maxPrev]);\n                //down\n                this.vertexTypes.push([1, 0, 1]);\n                this.isoVecsABOB.push([point, maxPrev, next]);\n            }\n            else { // type 0\n                //up\n                this.vertexTypes.push([1, 1, 0]);\n                this.isoVecsABOB.push([point, prev, maxPrev])\n                //down\n                this.vertexTypes.push([1, 0, 0]);\n                this.isoVecsABOB.push([point, maxPrev, maxPoint]);\n            }\n        };\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Shapes Collision in Babylon.js\nDESCRIPTION: An example demonstrating complex shapes in collision using Babylon.js. The shapes are constructed from spheres using the Solid Particle System for better performance when handling many repeated shapes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Collide_Intro.md#2025-04-23_snippet_0\n\nLANGUAGE: playground\nCODE:\n```\nid=\"#WLYB9#5\" title=\"Complex Shapes Colliding\" description=\"An example of complex shapes in collision.\"\n```\n\n----------------------------------------\n\nTITLE: Installing BabylonJS HTML Mesh ES6 Package\nDESCRIPTION: Command to install the HTML Mesh functionality via NPM as an ES6 package\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/addons/htmlMesh.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babylonjs/addons --save\n```\n\n----------------------------------------\n\nTITLE: Debugging Node Geometry Graph\nDESCRIPTION: Opens the Node Geometry Editor programmatically for debugging purposes when a mesh fails to generate. Note that launching the editor this way does not attach to a scene mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnodeGeometry.edit();\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Twin with ARIA Attributes in Babylon.js\nDESCRIPTION: Demonstrates how to customize the HTML twin of a Babylon.js object with specific ARIA attributes. This allows for more advanced accessibility configurations for screen readers.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/accessibility/screenReaders.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nyourObject.accessibilityTag = {\n    description: \"An demo customized progressbar\",\n    role: \"progressbar\",\n    aria: {\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\"\n      \"aria-valuenow\": \"0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivots and Axes for Setup B in Babylon.js Physics\nDESCRIPTION: Parameter setup where the main pivot is offset on the Y-axis, which sets the main body position. Both axes align with the Y-axis, creating a rotation centered at the elevated pivot point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/pivotsAxes.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmainPivot: new BABYLON.Vector3(0, 5, 0), //set main body position\nconnectedPivot: new BABYLON.Vector3(0, 0, 0),\nmainAxis: new BABYLON.Vector3(0, 1, 0),\nconnectedAxis: new BABYLON.Vector3(0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Handling Parameter Changes in BabylonJS Fluid Renderer\nDESCRIPTION: Method to handle parameter value changes from the GUI. Processes specific parameter types and applies changes to the appropriate objects in the fluid renderer, including enabling/disabling the fluid renderer, updating colors, debug features, and other renderer properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/fluid_renderer/gui.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _parameterChanged(name: string, value: any): void {\n    const fluidRenderer = this._scene.fluidRenderer;\n    switch (name) {\n        case \"enable\":\n            if (value) {\n                this._scene.enableFluidRenderer();\n                this._targetRendererIndex = 0;\n                this._initialize();\n            } else {\n                this._scene.disableFluidRenderer();\n                this._targetRendererIndex = 0;\n                this._initialize();\n            }\n            return;\n        case \"targets_fluidColor\":\n            if (fluidRenderer && fluidRenderer.targetRenderers.length > this._targetRendererIndex) {\n                fluidRenderer.targetRenderers[this._targetRendererIndex].fluidColor.copyFrom(BABYLON.Color3.FromHexString(value));\n            }\n            return;\n        case \"targets_debugFeature\": {\n            const typedDebugFeature: keyof typeof BABYLON.FluidRenderingDebug = value;\n            const val = BABYLON.FluidRenderingDebug[typedDebugFeature];\n            if (fluidRenderer && fluidRenderer.targetRenderers.length > this._targetRendererIndex) {\n                fluidRenderer.targetRenderers[this._targetRendererIndex].debugFeature = val;\n            }\n            return;\n        }\n    }\n\n    if (name.startsWith(\"targets_\")) {\n        name = name.substring(8);\n        if (name === \"index\") {\n            this._targetRendererIndex = value || 0;\n            if (fluidRenderer) {\n                this._fillValues(this._targetRenderersGUIElements, fluidRenderer.targetRenderers[this._targetRendererIndex]);\n            }\n        } else {\n            if (fluidRenderer) {\n                this._setValue(\n                    fluidRenderer.targetRenderers[this._targetRendererIndex],\n                    name,\n                    value === false ? false : value === true ? true : isNaN(value) ? value : parseFloat(value)\n                );\n            }\n        }\n    }\n\n    if (name.startsWith(\"objects_\")) {\n        name = name.substring(8);\n        if (name === \"index\") {\n            this._renderObjectIndex = value || 0;\n            if (fluidRenderer) {\n                this._fillValues(this._renderObjectsGUIElements, fluidRenderer.renderObjects[this._renderObjectIndex].object);\n            }\n        } else {\n            if (fluidRenderer) {\n                this._setValue(\n                    fluidRenderer.renderObjects[this._renderObjectIndex].object,\n                    name,\n                    value === false ? false : value === true ? true : isNaN(value) ? value : parseFloat(value)\n                );\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shadow Generator Implementation in JavaScript\nDESCRIPTION: The resulting JavaScript code template that gets inserted when using the shadow generator template. Includes placeholders for size, light source, and shadow-casting/receiving meshes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/pgTemplates.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar shadowGenerator = new BABYLON.ShadowGenerator(${1:size}, ${2:the_light_source});\nshadowGenerator.getShadowMap().renderList.push(${3:the_mesh_that_casts_a_shadow});\n${4:mesh_that_receives_the_shadow}.receiveShadows = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas-based Viewer with Configuration\nDESCRIPTION: Example of creating a viewer instance for a canvas using the factory function\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/viewerConfigurator.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewer = await CreateViewerForCanvas(canvas, options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Scene Elements using Global Babylon.js Namespace (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the historical method of initializing core Babylon.js elements (Scene, FreeCamera, HemisphericLight) using the global `BABYLON` namespace. This approach was common when the framework was consumed via a single script tag, before the introduction of module systems like UMD or ES6. It requires the Babylon.js library to be loaded in a way that populates the global scope, and an 'engine' variable must be previously defined.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar scene = new BABYLON.Scene(engine);\nvar camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10));\nvar light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0));\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing an Observer from a Scene Observable - JavaScript\nDESCRIPTION: Demonstrates adding an observer to onBeforeRenderObservable and immediately removing it before any frames trigger the observer's callback. Requires Babylon.js. Storing the observer reference allows its removal; as a result, the observer's callback will never be invoked. Highlights best practices for observer lifecycle management.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/events/observables.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst alpha = 0;\nconst observer = scene.onBeforeRenderObservable.add(function () {\n  sphere.scaling.y = Math.cos(alpha);\n\n  alpha += 0.01;\n});\n\nscene.onBeforeRenderObservable.remove(observer);\n```\n\n----------------------------------------\n\nTITLE: Simulating Ocean Dynamics with FFT using Babylon.js WebGPU - JavaScript\nDESCRIPTION: This code initiates a Babylon.js playground for a WebGPU-based FFT ocean simulation. It ports an external ocean FFT algorithm and executes hundreds of compute shader passes per frame. UI controls toggle visual elements and first-person navigation. Requires Babylon.js, WebGPU support, and sufficient compute resources. The output is a real-time ocean surface with interactive controls; throughput may be limited by hardware performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Playground id=\\\"#YX6IB8#758\\\" engine=\\\"webgpu\\\" title=\\\"Ocean demo\\\" description=\\\"Ocean simulation\\\" image=\\\"/img/extensions/webgpu/ocean.png\\\" isMain={true} category=\\\"WebGPU\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Transforming All Clones Using the Root Object in Babylon.js\nDESCRIPTION: Demonstrates how to transform all clones at once by manipulating the root object properties. The first line scales all clones along the Y-axis, and the second line rotates them around the X-axis.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/matrixCloner.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmc.root.scaling.y = 2;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmc.root.rotation.x = Math.PI / 4;\n```\n\n----------------------------------------\n\nTITLE: Example Babylon.js glTF Loader Console Log Output\nDESCRIPTION: This text block shows an example of the console output produced by the Babylon.js glTF loader when `loggingEnabled` is set to true and progressive loading with MSFT_lod is used. It illustrates the sequence of operations: initial GLB header and JSON parsing, asset metadata, scene graph loading, deferred loading of primitives and images, identification of LOD materials, buffer range requests for specific LODs, and state transitions (`LOADING`, `READY`, `COMPLETE`). The `deferred` messages indicate resources whose download is postponed until needed for a specific LOD.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/progressiveglTFLoad.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n```\nBJS - [16:31:29]: Binary version: 2\nBJS - [16:31:29]: JSON length: 59200\nBJS - [16:31:29]: Loading 0\nBJS - [16:31:29]: Asset version: 2.0\nBJS - [16:31:29]: Asset generator: Adobe Dimension - 9ce31d2be91132df879a9b9136f9df4ef7b7fa2c\nBJS - [16:31:29]: LOADING\nBJS - [16:31:29]: /scenes/0 scene\nBJS - [16:31:29]:   /nodes/0 render_camera_n3d\nBJS - [16:31:29]:     /cameras/0 render_camera\nBJS - [16:31:29]:   /nodes/1 ground_plane_n3d\nBJS - [16:31:29]:   /nodes/2 sportsCar_4K\nBJS - [16:31:29]:     /nodes/3 car_lores.obj\nBJS - [16:31:29]:       /nodes/4 g car_lores_gt_lores_lowdetails group1\nBJS - [16:31:29]:         /nodes/5 car_lores_gt_lores_lowdetails group1\nBJS - [16:31:29]:           /meshes/0 car_lores_gt_lores_lowdetails group1\nBJS - [16:31:29]:             /meshes/0/primitives/0\nBJS - [16:31:29]:               deferred\nBJS - [16:31:30]:               /materials/12/extensions/MSFT_lod\nBJS - [16:31:30]:                 /materials/0 details_lod2\nBJS - [16:31:30]:                   /materials/0/normalTexture\nBJS - [16:31:30]:                     /textures/2 tmp_image_pie_10f1_2c55_943e\nBJS - [16:31:30]:                       /images/2 normal\nBJS - [16:31:30]:                         deferred\nBJS - [16:31:30]:                   /materials/0/occlusionTexture\nBJS - [16:31:30]:                     /textures/1 ambient_roughness_metallic\nBJS - [16:31:30]:                       /images/1 ambient_roughness_metallic\nBJS - [16:31:30]:                         deferred\n...\nBJS - [16:31:32]: Loading buffer range [0-4864522]\nBJS - [16:31:37]: READY\nBJS - [16:31:37]: Loading buffer range [4864523-8856965]\nBJS - [16:31:39]: Loaded material LOD 1\nBJS - [16:31:39]: Loading buffer range [8856966-67953580]\nBJS - [16:32:00]: Loaded material LOD 2\nBJS - [16:32:00]: COMPLETE\n```\n```\n\n----------------------------------------\n\nTITLE: GUISlider Visibility Method\nDESCRIPTION: Method to control the visibility of the GUI slider element with optional fade effect.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSlider.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetVisible(bool, fade) → void\n```\n\n----------------------------------------\n\nTITLE: Starting a new Ionic project\nDESCRIPTION: Command to initialize a new Ionic project using the Ionic CLI.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nionic start\n```\n\n----------------------------------------\n\nTITLE: Adjusting Output Signals for MultiGateBlock in BabylonJS\nDESCRIPTION: This snippet shows how to change the number of output signals for a MultiGateBlock after it has been created. This method can be used to dynamically adjust the block's behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmultiGate.setNumberOfOutputSignals(10);\n```\n\n----------------------------------------\n\nTITLE: Private Camera Follow Method\nDESCRIPTION: Private method to update camera position to follow a target using spherical coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nprivate follow(): void {\n    if (!this.target) {\n        return;\n    }\n    this._cartesianCoordinates.x = this.radius * Math.cos(this.alpha) * Math.cos(this.beta);\n    this._cartesianCoordinates.y = this.radius * Math.sin(this.beta);\n    this._cartesianCoordinates.z = this.radius * Math.sin(this.alpha) * Math.cos(this.beta);\n\n    const targetPosition = this.target.getAbsolutePosition();\n    this.position = targetPosition.add(this._cartesianCoordinates);\n    this.setTarget(targetPosition);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Cannon.js with Window Attribution\nDESCRIPTION: Configuration for Cannon.js physics engine including required window attribution setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/usingPhysicsEngine.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cannon from \"cannon\";\n\nwindow.CANNON = cannon;\nscene.enablePhysics(null, new CannonJSPlugin());\n```\n\n----------------------------------------\n\nTITLE: Animating Car Movement along a Path in Babylon.js\nDESCRIPTION: This code creates the complete animation for the car following a path. It updates the car's position, rotates the wheels around the current path normal, and adjusts the car's orientation to remain tangential to the path at each point.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Car_Path.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar i = 0;\nscene.registerAfterRender(function () {\n  carBody.position.x = points[i].x;\n  carBody.position.z = points[i].z;\n  wheelFI.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);\n  wheelFO.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);\n  wheelRI.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);\n  wheelRO.rotate(normals[i], Math.PI / 32, BABYLON.Space.WORLD);\n\n  theta = Math.acos(BABYLON.Vector3.Dot(normals[i], normals[i + 1]));\n  var dir = BABYLON.Vector3.Cross(normals[i], normals[i + 1]).y;\n  var dir = dir / Math.abs(dir);\n  carBody.rotate(BABYLON.Axis.Y, dir * theta, BABYLON.Space.WORLD);\n\n  i = (i + 1) % (n - 1); //continuous looping\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Terrain Without Data Map in JavaScript\nDESCRIPTION: Shows how to create a dynamic terrain without any initial data map. This creates a flat terrain that can be manipulated programmatically.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 140; // terrain subdivisions\nconst terrainOptions = { terrainSub: terrainSub };\nconst terrain = new BABYLON.DynamicTerrain(\"dt\", terrainOptions, scene);\n```\n\n----------------------------------------\n\nTITLE: Logging into NPM via Terminal\nDESCRIPTION: Command to log into NPM via terminal, necessary before publishing an NPM package.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm login\n```\n\n----------------------------------------\n\nTITLE: Disabling WebXR Teleportation\nDESCRIPTION: Demonstrates how to disable teleportation when creating the WebXR experience, with the ability to re-enable it later.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xrHelper = await scene.createDefaultXRExperienceAsync({\n  disableTeleportation: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using ShaderBuilder Fluent API in Babylon.js (JavaScript)\nDESCRIPTION: Provides an example of using the ShaderBuilder extension's fluent API. It creates a new `ShaderBuilder` instance, maps a texture using the `Map` method, and then builds and assigns the resulting material to a mesh using `BuildMaterial`. This abstracts away much of the boilerplate code needed with `ShaderMaterial`.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/shaderCodeInBjs.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.material = new BABYLONX.ShaderBuilder().Map({ path: \"textures/amiga.jpg\" }).BuildMaterial(scene);\n```\n\n----------------------------------------\n\nTITLE: Setting Pivot Point at Corner - Babylon.js (JavaScript)\nDESCRIPTION: Places the mesh pivot at the front, left, bottom corner by specifying coordinates (-1, -1, -1) relative to the box's local origin. Useful for custom rotation/scaling points in geometry setup. Requires an existing box mesh and Babylon.js library.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/pivots.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbox.setPivotPoint(new BABYLON.Vector3(-1, -1, -1));\n```\n\n----------------------------------------\n\nTITLE: Custom Filename Video Recording\nDESCRIPTION: Shows how to specify a custom filename when recording a video of the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToVideo.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (BABYLON.VideoRecorder.IsSupported(engine)) {\n    var recorder = new BABYLON.VideoRecorder(engine);\n    recorder.startRecording(\"test.webm\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Build Script with npm - Bash\nDESCRIPTION: Runs the 'build' script from package.json using npm, invoking webpack to bundle the project. This is the recommended way to trigger the build as it leverages the pre-configured scripts section. Use from project root after modifying your source code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Components with @fromChildren Decorator in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @fromChildren decorator to reference child components of the current node. The decorator can take an optional parameter specifying the child's name or use the property name by default.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/scripting/gettingComponents.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@fromChildren(\"light\")\nprivate _light: PointLight;\n```\n\n----------------------------------------\n\nTITLE: Starting Babylon Server in Production Mode - npm Shell Commands - Shell\nDESCRIPTION: This shell command shows how to run the Babylon server in production mode for faster asset serving, by executing the 'serve:prod' script in the babylon-server workspace. Production mode minifies files for better performance but increases build time. Requires npm workspace support and the same prerequisites as development mode. Running in production mode is suitable for working on Babylon tools with optimized assets but is not recommended for deployment purposes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve:prod -w @tools/babylon-server\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure JSON\nDESCRIPTION: Example of how to structure documentation pages in the configuration file including parent-child relationships\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"friendlyName\": \"Home Page\",\n    \"content\": \"landing_pages/home\",\n    \"children\": {\n    /* [...] */\n    \"divingDeeper\": {\n            \"friendlyName\": \"Diving Deeper\",\n            \"children\": {\n              /* [...] */\n              \"audio\": {\n                    \"friendlyName\": \"Audio\",\n                    \"children\": {\n                        \"playingSoundsMusic\": { \"friendlyName\": \"Playing Sounds and Music\", \"children\": {}, \"content\": \"How_To/audio/Playing_sounds_and_music\" },\n                        // This is the place you will add your document\n                    },\n                    \"content\": \"landing_pages/features/divingDeeperAudioLandingPage\"\n                },\n            }\n    }\n    /* [...] */\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Correct Base Path in Vite Build\nDESCRIPTION: A modification to the package.json file to ensure correct base path setting during the Vite build process. This eliminates the need to manually edit file paths in dist/index.html after each build.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/usingVite.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"build\": \"tsc && vite build --base=./\"\n```\n\n----------------------------------------\n\nTITLE: Time Formatting Function\nDESCRIPTION: Converts real time to game time format where 4 minutes real time equals 1 hour game time\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet minsPassed = Math.floor(time / 60);\nlet secPassed = time % 240;\nif (secPassed % 4 == 0) {\n    this._mString = Math.floor(minsPassed / 4) + 11;\n    this._sString = (secPassed / 4 < 10 ? \"0\" : \"\") + secPassed / 4;\n}\nlet day = this._mString == 11 ? \" PM\" : \" AM\";\nreturn this._mString + \":\" + this._sString + day;\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using MeshExploder in Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate the MeshExploder class from Babylon.js and call its explode method to move meshes away from a central reference mesh. Dependencies include the BABYLON namespace, and the function expects an array of mesh instances and, optionally, a central mesh. The default behavior explodes the meshes with a strength of 1.0. Returns void and manipulates the scene objects directly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/meshExploder.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst newExplosion = new BABYLON.MeshExploder(meshes, centerMesh);\n\nnewExplosion.explode(); //Explodes meshes away from center. Default 1.0.\n```\n\n----------------------------------------\n\nTITLE: Rebuilding SPS Mesh Using Stored Initialization Functions - Babylon.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to rebuild an SPS mesh, reapplying the stored\\_positionFunction\\_and/or\\_vertexFunction\\_. This operation is useful when particle state/geometry is altered at creation (and possibly later changed via\\_setParticles()\\_); rebuilding the mesh applies the original logic again. Limitation: functions are re-invoked, so any randomness will result in a different mesh unless deterministic.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/immutable_sps.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nSPS.rebuildMesh();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Property Inspector for Editor Script Component in C#\nDESCRIPTION: This C# code shows how to create a custom property inspector for a Babylon.js editor script component. It includes a serializable Person class, property export handling, and a custom editor implementation using Unity's CustomEditor attribute.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/01_ScriptComponents.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n/* Babylon Editor Script Component (C# UnityScript) */\n\nusing System;\nusing UnityEditor;\nusing UnityEngine;\nusing Unity3D2Babylon;\n\nnamespace MyProject\n{\n    [Serializable]\n    public class Person\n    {\n        public string first;\n        public string last;\n    }\n\n    public class NewScriptComponent : EditorScriptComponent\n    {\n        [Header(\"-Script Properties-\")]\n\n        [BabylonProperty]\n        public string hello = \"Hello World\";\n\n        protected NewScriptComponent()\n        {\n            this.babylonClass = \"BABYLON.SceneComponent\";\n            this.OnExportProperties = this.OnExportPropertiesHandler;\n        }\n\n        public void OnExportPropertiesHandler(SceneBuilder sceneBuilder, GameObject unityGameObject, Dictionary<string, object> propertyBag)\n        {\n            // Add Custom Property Bag Item\n            propertyBag.Add(\"person\", new Person { first = \"Mackey\", last = \"Kinard\" });\n        }\n    }\n\n    [CustomEditor(typeof(NewScriptComponent)), CanEditMultipleObjects]\n    public class NewScriptComponentEditor : Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            // Draw Custom Inspector Properties\n            DrawDefaultInspector();\n            NewScriptComponent script = (NewScriptComponent)target;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rocket Emitter for Fireworks in Babylon.js\nDESCRIPTION: This code creates an emitter for a rocket particle system by generating an invisible sphere mesh positioned at a random x-coordinate. It sets up the rocket's height and starting delay to create staggered firework launches.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/particleSystems.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sphere = MeshBuilder.CreateSphere(\"rocket\", { segments: 4, diameter: 1 }, scene);\nsphere.isVisible = false;\n//the origin spawn point for all fireworks is determined by a TransformNode called \"fireworks\", this was placed in Blender\nlet randPos = Math.random() * 10;\nsphere.position = new Vector3(scene.getTransformNodeByName(\"fireworks\").getAbsolutePosition().x + randPos * -1, scene.getTransformNodeByName(\"fireworks\").getAbsolutePosition().y, scene.getTransformNodeByName(\"fireworks\").getAbsolutePosition().z);\nthis._emitter = sphere;\n//set how high the rocket will travel before exploding and how long it'll take before shooting the rocket\nthis._height = sphere.position.y + Math.random() * (15 + 4) + 4;\nthis._delay = (Math.random() * i + 1) * 60; //frame based\n```\n\n----------------------------------------\n\nTITLE: Sequencing Multiple Rotations in Mixed World and Local Spaces - Babylon.js JavaScript\nDESCRIPTION: Demonstrates sequencing rotations on a mesh with a mix of custom vectors and predefined axis, alternating between world and local spaces in Babylon.js. Requires a mesh, Babylon.js library, and uses rotate method with both custom and predefined axes and angles in radians. Highlights how different spaces affect rotation outcomes and how additive rotations accumulate.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/add_rotations.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(new BABYLON.Vector3(2, -3, 7), Math.PI / 3, BABYLON.Space.LOCAL);  \nmesh.rotate(BABYLON.Axis.Y, -Math.PI / 2, BABYLON.Space.WORLD);\nmesh.rotate(new BABYLON.Vector3(5.6, 7.8, - 3.4), 1.5 * Math.PI, BABYLON.Space.WORLD);\nmesh.rotate(BABYLON.Axis.Z, -Math.PI, BABYLON.Space.LOCAL);\n```\n\n----------------------------------------\n\nTITLE: Adding Normals to a Custom Mesh in Babylon.js\nDESCRIPTION: This code expands on the basic mesh creation by computing and adding normal vectors. Normals affect how lighting is applied to the mesh and determine which faces are visible based on the view direction and back-face culling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/custom.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar customMesh = new BABYLON.Mesh(\"custom\", scene);\n\nvar positions = [-5, 2, -3, -7, -2, -3, -3, -2, -3, 5, 2, 3, 7, -2, 3, 3, -2, 3];\nvar indices = [0, 1, 2, 3, 4, 5];\n\n//Empty array to contain calculated values or normals added\nvar normals = [];\n\n//Calculations of normals added\nBABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\nvar vertexData = new BABYLON.VertexData();\n\nvertexData.positions = positions;\nvertexData.indices = indices;\nvertexData.normals = normals; //Assignment of normal to vertexData added\n\nvertexData.applyToMesh(customMesh);\n```\n\n----------------------------------------\n\nTITLE: Light Exclusion Setup\nDESCRIPTION: Configuration for excluding lights from specific layer masks to prevent unwanted illumination.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/layerMasksAndMultiCam.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = scene.lights.length - 1; i >= 0; i--) {\n  scene.lights[i].excludeWithLayerMask = 0x10000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating Color Modes for GreasedLine - Babylon.js - JavaScript\nDESCRIPTION: This enum snippet lists the methods of coloring for GreasedLine instances, specifying how line colors interact with material shader output. It is intended for use in the `colorMode` property. Modes provide different blending options such as overwrite (SET), additive (ADD), or multiplicative (MULTIPLY) color application.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nenum GreasedLineMeshColorMode {\n    COLOR_MODE_SET = 0,\n    COLOR_MODE_ADD = 1,\n    COLOR_MODE_MULTIPLY = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Particle to Mesh Intersection in JavaScript\nDESCRIPTION: Shows how to check if a particle intersects with a standard BabylonJS mesh. This allows particles to interact with scene objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/particles/solid_particle_system/sps_physics.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// for instance, in your SPS.updateParticle(p) function : particle / mesh\nif (p.intersectsMesh(anyMesh)) { // change p velocity vector }\n```\n\n----------------------------------------\n\nTITLE: Creating Placeholder Player Visuals in TypeScript\nDESCRIPTION: Within the character asset loading function, this code creates simple placeholder geometry (a cylinder for the body and a small box to indicate direction) for the player's visual representation. It applies a material to the body, sets positions, bakes transforms to align origins, and parents the visuals to the main collision mesh (`outer`).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/simpleGameState.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar box = MeshBuilder.CreateBox(\"Small1\", { width: 0.5, depth: 0.5, height: 0.25, faceColors: [new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1), new Color4(0, 0, 0, 1)] }, scene);\nbox.position.y = 1.5;\nbox.position.z = 1;\n\nvar body = Mesh.CreateCylinder(\"body\", 3, 2, 2, 0, 0, scene);\nvar bodymtl = new StandardMaterial(\"red\", scene);\nbodymtl.diffuseColor = new Color3(0.8, 0.5, 0.5);\nbody.material = bodymtl;\nbody.isPickable = false;\nbody.bakeTransformIntoVertices(Matrix.Translation(0, 1.5, 0)); // simulates the imported mesh's origin\n\n//parent the meshes\nbox.parent = body;\nbody.parent = outer;\n```\n\n----------------------------------------\n\nTITLE: Model Import Options in Babylon.js\nDESCRIPTION: Different ways to import models with specific mesh selection options, demonstrating how to load all meshes or select specific ones by name.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap1/first_import.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.ImportMeshAsync(\"/relative path/myFile\"); //Empty string loads all meshes\nBABYLON.ImportMeshAsync(\"/relative path/myFile\", scene, { meshNames: \"model1\" }); //Name of the model loads one model\nBABYLON.ImportMeshAsync(\"/relative path/myFile\", scene, { meshNames: [\"model1\", \"model2\"] }); //Array of model names\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Backing Class in JavaScript for Babylon.js\nDESCRIPTION: This JavaScript code defines a runtime backing class that extends BABYLON.MeshComponent. It demonstrates how to access properties defined in the editor script component using the getProperty method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/01_ScriptComponents.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule PROJECT {\n    export class TestMeshComponent extends BABYLON.MeshComponent {\n\n        protected start() :void {\n            // Start hello world example\n            console.log(this.getProperty<string>(\"hello\"));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GPU Sampler Cache in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the implementation of a GPU sampler cache within the WebGPU engine. The class maintains a mapping between a computed hash (derived from sampler parameters such as mode, comparison function, and wrapping modes) and the GPUSampler instances. This approach minimizes redundant sampler allocations, optimizing performance by reusing existing samplers with identical properties.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUInternals/webGPUOverview.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class WebGPUCacheSampler {\\n\\n    private _samplers: { [hash: number]: GPUSampler } = {};\\n    ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Babylon.js Splitting with Rollup manualChunks (Function) (JavaScript)\nDESCRIPTION: This JavaScript snippet provides a Rollup configuration where the `output.manualChunks` function assigns any module whose `id` includes \"babylonjs\" to a single chunk named \"babylonjs\". This prevents Rollup from splitting the Babylon.js library itself into smaller chunks while allowing other code splitting to potentially occur.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/asyncChunks.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nexport default {\n  // ...\n  output: {\n    dir: \"output\",\n    manualChunks: (id) => {\n      if (id.includes(\"babylonjs\")) {\n        return \"babylonjs\";\n      }\n    },\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Terrain with Automatic Normal Computation in JavaScript\nDESCRIPTION: This code demonstrates how to create a Dynamic Terrain with automatic normal computation. By default, the terrain pre-computes all normals of the map once at construction time.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst terrainSub = 100; // 100 terrain subdivisions\nconst params = {\n  mapData: mapData, // data map declaration: what data to use?\n  mapSubX: mapSubX, // how are these data stored by rows and columns\n  mapSubZ: mapSubZ,\n  terrainSub: terrainSub, // how many terrain subdivisions wanted\n  // nothing more to do: the map normals are computed at creation time!\n};\nconst terrain = new BABYLON.DynamicTerrain(\"t\", params, scene);\n```\n\n----------------------------------------\n\nTITLE: Creating 180-Degree VideoDome\nDESCRIPTION: Example of creating a VideoDome configured for 180-degree videos using the halfDomeMode option.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360VideoDome.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet videoDome = new BABYLON.VideoDome(\n  \"videoDome\",\n  [\"https://videourl.com/videos/180.mp4\"],\n  {\n    resolution: 32,\n    clickToPlay: true,\n    halfDomeMode: true,\n  },\n  scene\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Particle Scene with Babylon.js - JavaScript\nDESCRIPTION: This snippet initializes a Babylon.js scene with a camera and a small sphere mesh that acts as the emitter for particles. Required dependencies include Babylon.js core and MeshBuilder modules. 'engine' and 'canvas' should be pre-existing context variables. The function sets up core scene elements needed before adding particles or custom shaders.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/node_material/particles_and_nme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst scene = new BABYLON.Scene(engine);\n\nconst camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, 10, BABYLON.Vector3.Zero(), scene);\ncamera.attachControl(canvas, true);\n\n// Create a random emitter\nconst sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 0.01, segments: 4 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Enabling Optional WebXR Features in Babylon.js\nDESCRIPTION: This code snippet shows how to enable optional WebXR features in Babylon.js, specifically for AR sessions. It demonstrates enabling all optional features and selectively enabling specific features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRARFeatures.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xr = await scene.createDefaultXRExperienceAsync({\n  uiOptions: {\n    sessionMode: \"immersive-ar\",\n  },\n  optionalFeatures: true,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst xr = await scene.createDefaultXRExperienceAsync({\n  uiOptions: {\n    sessionMode: \"immersive-ar\",\n  },\n  optionalFeatures: [\"hit-test\", \"anchors\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Babylon Viewer Tool Bar Slot Example\nDESCRIPTION: Shows how to replace the default toolbar UI using slots in the Babylon Viewer component.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v2/elementStyling.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<CodePen pen=\"jENqWjz\" tab=\"html,result\" title=\"Babylon Viewer Slots (Tool Bar)\" />\n```\n\n----------------------------------------\n\nTITLE: Binding Emissive Texture in Material\nDESCRIPTION: Updates the bind method to set the emissive texture and its parameters in the shader. This makes the texture and its transformation available during rendering.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/matForMatLibrary.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n  this._effect.setTexture(\"emissiveSampler\", this.emissiveTexture);\n\n  this._effect.setFloat2(\"vEmissiveInfos\", this.emissiveTexture.coordinatesIndex, this.emissiveTexture.level);\n  this._effect.setMatrix(\"emissiveMatrix\", this.emissiveTexture.getTextureMatrix());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Parent Mesh in Babylon.js\nDESCRIPTION: Provides three distinct JavaScript methods to assign meshP as the parent of meshC. Method 1 directly assigns the parent property. Method 2 uses the `setParent` function on the child. Method 3 uses the `addChild` function on the parent. The resulting behavior regarding transformations applied before or after parenting can differ, especially between method 1 and methods 2/3.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/parent_pivot/parent.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nmeshC.parent = meshP; // 1\nmeshC.setParent(meshP); // 2\nmeshP.addChild(meshC); // 3\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Thin Instance Buffers Efficiently in Babylon.js\nDESCRIPTION: To avoid recreating vertex buffers and flagging materials as 'attribute dirty', use thinInstanceBufferUpdated instead of thinInstanceSetBuffer when updating thin instance data each frame.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.thinInstanceBufferUpdated(\"matrix\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up a NearMenu with Multiple TouchHolographicButtons in Babylon.js (JavaScript)\nDESCRIPTION: Provides a comprehensive example of initializing a GUI3DManager, adding a NearMenu control, and populating it with multiple TouchHolographicButtons, each with distinct images and text. This snippet demonstrates creation and composition of UI elements close to the user. Dependencies: Babylon.js GUI3DManager, NearMenu, TouchHolographicButton, asset images. Input: menu and button configuration; output: interactive, follow-behavior-enabled NearMenu.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the 3D UI manager\nconst manager = new BABYLON.GUI.GUI3DManager(scene);\n\n// Let's add a slate\nconst near = new BABYLON.GUI.NearMenu(\"near\");\nmanager.addControl(near);\n\nconst button0 = new BABYLON.GUI.TouchHolographicButton(\"button0\");\nbutton0.imageUrl = \"./textures/IconFollowMe.png\";\nbutton0.text = \"Button 0\";\nnear.addButton(button0);\n\nconst button1 = new BABYLON.GUI.TouchHolographicButton(\"button1\");\nbutton1.imageUrl = \"./textures/IconClose.png\";\nbutton1.text = \"Button 1\";\nnear.addButton(button1);\n\nconst button2 = new BABYLON.GUI.TouchHolographicButton(\"button2\");\nbutton2.imageUrl = \"./textures/IconFollowMe.png\";\nbutton2.text = \"Button 2\";\nnear.addButton(button2);\n```\n\n----------------------------------------\n\nTITLE: Enabling Hot/Live Reload via .env File (Shell/.env)\nDESCRIPTION: This snippet shows how to enable hot module replacement (HMR) and live reload features for webpack-enabled packages by setting 'ENABLE_HOT_RELOAD' and 'ENABLE_LIVE_RELOAD' to 'true' in the '.env' file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nENABLE_HOT_RELOAD=true\nENABLE_LIVE_RELOAD=true\n```\n\n----------------------------------------\n\nTITLE: Setting Bucket Sizes for ScrollViewer Optimization - Babylon.js JavaScript\nDESCRIPTION: This snippet demonstrates the use of the setBucketSizes method on a ScrollViewer instance in the Babylon.js GUI library to optimize rendering of numerous UI controls. It divides the window area into smaller buckets, allowing only visible controls to be updated and rendered, thereby improving performance when freezeControls is true. The method expects two numeric parameters: the width and height of the buckets; setting either to 0 disables the optimization. Dependencies: Babylon.js GUI, an initialized ScrollViewer object. Inputs: the bucket size dimensions. Output: enhanced rendering performance at the expense of higher memory usage, with trade-offs depending on bucket size selection.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/scrollViewer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyScrollViewer.setBucketSizes(100, 40);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Mesh Position in Volumetric Light Scattering Post Process - Babylon.js - JavaScript\nDESCRIPTION: Retrieves the currently set custom mesh position from a VolumetricLightScatteringPostProcess instance. Requires useCustomMeshPosition to be enabled and the position previously set. Returns a BABYLON.Vector3 representing the custom mesh position.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/lights/volumetricLightScattering.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst position = vls.getCustomMeshPosition();\n```\n\n----------------------------------------\n\nTITLE: Updating Parent Bounding Box Dynamically on Child Updates in Babylon.js (JavaScript)\nDESCRIPTION: Registers an observer using `onAfterWorldMatrixUpdateObservable` to automatically recalculate and update the parent's bounding box whenever its world matrix or that of its children changes (e.g., when a new child is added or moved). It calls `getHierarchyBoundingVectors()` to get the updated bounds. A re-entrancy check (`detectReentrancy` flag) combined with `setTimeout` is used to prevent an infinite loop, as `setBoundingInfo` can itself trigger the observable.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nparent.onAfterWorldMatrixUpdateObservable.add((v) => {\n        setTimeout(() => {\n            if (parent.detectReentrancy) {\n                return;\n            }\n            parent.detectReentrancy = true;\n            let { min, max } = parent.getHierarchyBoundingVectors(); //triggers observable causing infinite loop\n            parent.setBoundingInfo(new BABYLON.BoundingInfo(min, max));\n            setTimeout(() => {\n                parent.detectReentrancy = false;\n            });\n        });\n    })\n```\n\n----------------------------------------\n\nTITLE: Forcing sRGB Buffer Support in Babylon.js Engine\nDESCRIPTION: Initializes the Babylon.js `Engine` with the `forceSRGBBufferSupportState` option set to `true`. This ensures sRGB buffer support is enabled, overriding potential default deactivation for performance reasons or browser bugs, as required for 3D Commerce certification. Requires the Babylon.js `Engine` class and takes the canvas element and antialias setting as parameters.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/3D_commerce_certif.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = new Engine(canvas, antialias, { \n    forceSRGBBufferSupportState: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Vertex Data (Colors) to a Mesh in Babylon.js\nDESCRIPTION: This code shows how to add new vertex attributes (in this case, colors) to a mesh that was created without them. It creates a color array with random values for each vertex and adds it to the mesh using setVerticesData.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/custom/updatingVertices.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar colors = mesh.getVerticesData(BABYLON.VertexBuffer.ColorKind);\nif(!colors) {\n    colors = [];\n\n    var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n\n    for(let p = 0; p < positions.length / 3; p++) {\n        colors.push(Math.random(), Math.random(), Math.random(), 1);\n    }\n}\n\nmesh.setVerticesData(BABYLON.VertexBuffer.ColorKind, colors);\n```\n\n----------------------------------------\n\nTITLE: Initializing SpriteMap with Animation Options in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a SpriteMap object with animation options. It sets the maximum number of animation frames and initializes the first tile with a specific frameID.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/sprites/sprite_map_animations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet backgroundSize = new BABYLON.Vector2(1, 1);\nlet background = new BABYLON.SpriteMap('background', atlasJSON, spriteSheet, {\n    stageSize: backgroundSize,\n    maxAnimationFrames:8,\n    flipU: true\n    },\n    scene); \n\nbackground.changeTiles(0, new BABYLON.Vector2(0, 0), 24); // set the single tile to frameID 24\n```\n\n----------------------------------------\n\nTITLE: Importing STL File Loader Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the STL File Loader plugin statically in a JavaScript file when using Babylon.js npm packages. This method is not recommended for most use cases.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/stl.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/loaders/STL/stlFileLoader\";\n```\n\n----------------------------------------\n\nTITLE: Navigating and Checking Remote Repositories\nDESCRIPTION: Commands to navigate to Babylon.js directory and check remote repository configurations\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd Babylon.js\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Displaying GreaterOrEqual Node Image using H3Image Component (Markdown)\nDESCRIPTION: Uses a custom H3Image component, likely within a Markdown-based documentation system, to render an image representing the 'Greater Or Equal' logical node from the Babylon.js NGE. Attributes define the image title ('GreaterOrEqual'), source path ('/img/tools/nge/greaterOrEqualNode.jpg'), and alt text ('Greater Or Equal node').\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<H3Image title=\"GreaterOrEqual\" image=\"/img/tools/nge/greaterOrEqualNode.jpg\" alt=\"Greater Or Equal node\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Prefab Instantiation in a Mesh Component\nDESCRIPTION: Example of a TestMeshComponent class that extends BABYLON.MeshComponent to demonstrate how to instantiate a prefab at runtime. The start() method shows how to create a player game object from a prefab.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/07_RuntimePrefabs.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule PROJECT {\n    export class TestMeshComponent extends BABYLON.MeshComponent {\n        public constructor(owner: BABYLON.AbstractMesh, scene: BABYLON.Scene, tick: boolean = true, propertyBag: any = {}) {\n            super(owner, scene, tick, propertyBag);\n        }\n        protected start() :void {\n\n            // Spawn player game object\n            const player:BABYLON.Mesh = this.manager.instantiatePrefab(\"Player\", \"NewPlayer\", BABYLON.Vector3.Zero());\n            console.log(\"Echo Player: \" + player.name);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Closest Facet and Projection Point at World Coordinates in Babylon.js\nDESCRIPTION: Illustrates finding the closest facet to world coordinates (x, y, z) and simultaneously calculating the projection of these coordinates onto the facet's plane using `mesh.getClosestFacetAtCoordinates`. A pre-allocated `BABYLON.Vector3` (`projected`) is passed by reference as the fourth argument to store the resulting world projection coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst projected = BABYLON.Vector3.Zero();\nconst index = mesh.getClosestFacetAtCoordinates(x, y, z, projected); // sets the point \"projected\" world coordinates\nif (index != null) {\n  const worldPos = mesh.getFacetPosition(index); // the world position of this facet\n  // use the vector3 projected here ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Scene Recording in Babylon.js\nDESCRIPTION: Creates a new SceneRecorder instance and starts tracking changes to a scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/deltaFiles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar recorder = new BABYLON.SceneRecorder();\n\nrecorder.track(scene);\n```\n\n----------------------------------------\n\nTITLE: Executing npm install via Batch Script in Shell\nDESCRIPTION: This description refers to the action performed by double-clicking `Windows_NPM_INSTALL.BAT`. The batch script executes `npm install --save` within the project directory (`C:\\babylon`). This command downloads and installs the project dependencies defined in `package.json`, creating the `node_modules` folder. Node.js and NPM are prerequisites.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/Running_a_local_webserver_for_BabylonJs.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save\n```\n\n----------------------------------------\n\nTITLE: Initializing CSG2 in Babylon.js\nDESCRIPTION: Example of how to initialize and use the new CSG2 class in Babylon.js. This replaces the deprecated CSG class and requires asynchronous initialization using InitializeCSG2Async().\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/breaking-changes.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait BABYLON.InitializeCSG2Async();\n\nconst sphereCSG = BABYLON.CSG2.FromMesh(sphere);\nconst boxCSG = BABYLON.CSG2.FromMesh(box);\n\nconst mesh = boxCSG.subtract(sphereCSG).toMesh(\"test\");\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Channel for Diffuse Texture\nDESCRIPTION: Enables transparency handling for the diffuse texture in background material\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/backgroundMaterial.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbackgroundMaterial.diffuseTexture.hasAlpha = true;\n```\n\n----------------------------------------\n\nTITLE: Defining FlowGraphBranchBlock Class in TypeScript\nDESCRIPTION: Complete class definition for `FlowGraphBranchBlock`, which extends `FlowGraphExecutionBlock`. It defines a boolean data input (`condition`) and two signal outputs (`onTrue`, `onFalse`). The `_execute` method evaluates the condition and activates the corresponding signal.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphAdvancedUsage.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A block that evaluates a condition and activates one of two branches.\n */\nexport class FlowGraphBranchBlock extends FlowGraphExecutionBlock {\n    /**\n     * Input connection: The condition to evaluate.\n     */\n    public readonly condition: FlowGraphDataConnection<boolean>;\n    /**\n     * Output connection: The branch to execute if the condition is true.\n     */\n    public readonly onTrue: FlowGraphSignalConnection;\n    /**\n     * Output connection: The branch to execute if the condition is false.\n     */\n    public readonly onFalse: FlowGraphSignalConnection;\n\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.condition = this.registerDataInput(\"condition\", RichTypeBoolean);\n\n        this.onTrue = this._registerSignalOutput(\"onTrue\");\n        this.onFalse = this._registerSignalOutput(\"onFalse\");\n    }\n\n    public _execute(context: FlowGraphContext): void {\n        if (this.condition.getValue(context)) {\n            this.onTrue._activateSignal(context);\n        } else {\n            this.onFalse._activateSignal(context);\n        }\n    }\n\n    /**\n     * @returns class name of the block.\n     */\n    public override getClassName(): string {\n        return FlowGraphBlockNames.Branch;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Braces for Conditional Blocks in Babylon.js\nDESCRIPTION: This example demonstrates the required brace style for conditional blocks in Babylon.js. Braces must be used for every block (even single-line blocks), with opening braces on the same line as the condition and closing braces on the next line.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/approvedNamingConventions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (condition) {\n    this.doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OBJ File Loader Options in JavaScript\nDESCRIPTION: These snippets show various configuration options for the OBJ File Loader. They include settings for UV optimization, vertex colors, normal computation, axis inversion, and material loading behavior.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/oBJ.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.OBJFileLoader.OPTIMIZE_WITH_UV = true;\n\nBABYLON.OBJFileLoader.UV_SCALE = new BABYLON.Vector2(xValue, yValue);\n\nBABYLON.OBJFileLoader.IMPORT_VERTEX_COLORS = true;\n\nBABYLON.OBJFileLoader.COMPUTE_NORMALS = true;\n\nBABYLON.OBJFileLoader.OPTIMIZE_NORMALS = true;\n\nBABYLON.OBJFileLoader.INVERT_Y = true;\n\nBABYLON.OBJFileLoader.INVERT_TEXTURE_Y = true;\n\nBABYLON.OBJFileLoader.MATERIAL_LOADING_FAILS_SILENTLY = false;\n\nBABYLON.OBJFileLoader.SKIP_MATERIALS = true;\n\nOBJFileLoader.USE_LEGACY_BEHAVIOR = true;\n```\n\n----------------------------------------\n\nTITLE: Documenting Complex Constructors with Parameters\nDESCRIPTION: Example of documenting a constructor with multiple parameters using TSDoc @param tags.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Creates a Solid Particle object\n * Don't create particles manually, use instead the Solid Particle System internal tools like _addParticle()\n * @param particleIndex is the particle index in the Solid Particle System pool. It's also the particle identifier\n * @param positionIndex is the starting index of the particle vertices in the SPS \"positions\" array\n * @param indiceIndex is the starting index of the particle indices in the SPS \"indices\" array\n * @param model is a reference to the model shape on what the particle is designed.\n * @param shapeId is the model shape identifier in the SPS\n * @param idxInShape is the index of the particle in the current model (ex: the 10th box of addShape(box, 30))\n * @param modelBoundingInfo is the reference to the model BoundingInfo used for intersection computations\n */\nconstructor(particleIndex: number, positionIndex: number, indiceIndex: number, model: Nullable<ModelShape>, shapeId: number, idxInShape: number, sps: SolidParticleSystem, modelBoundingInfo: Nullable<BoundingInfo> = null)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Buffers with Instancing in Babylon.js\nDESCRIPTION: Shows how to create and use custom color buffers for instances. The code creates a Float32Array with random colors for each instance and then applies it as an instanceable vertex buffer to the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/instances.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet instanceCount = 1000;\nlet colorData = new Float32Array(4 * instanceCount);\n\nfor (let index = 0; index < instanceCount; index++) {\n  colorData[index * 4] = Math.random();\n  colorData[index * 4 + 1] = Math.random();\n  colorData[index * 4 + 2] = Math.random();\n  colorData[index * 4 + 3] = 1.0;\n}\n\nvar buffer = new BABYLON.VertexBuffer(engine, colorData, BABYLON.VertexBuffer.ColorKind, false, false, 4, true);\nbox.setVerticesBuffer(buffer);\n```\n\n----------------------------------------\n\nTITLE: Creating Ground From Heightmap in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a ground from a heightmap image and apply a HeightmapImpostor for physics. The ground mesh is generated from a height map image, and then a physics impostor is assigned to it with zero mass to make it static.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/physics/v1/advancedPhysicsFeatures.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", \"textures/worldHeightMap.jpg\", 200, 200, 50, 0, 30, scene, false, function () {\n    ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.HeightmapImpostor, { mass: 0 });\n});\n```\n\n----------------------------------------\n\nTITLE: Storing GLSL Shader String in Babylon.js ShaderStore\nDESCRIPTION: Shows how to store a GLSL fragment shader directly as a string within the `BABYLON.Effect.ShadersStore` object in JavaScript. The key used (e.g., \"LinesPixelShader\") must end with \"PixelShader\" for Babylon.js to recognize it correctly.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/advanced/custom_procedural_textures.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Effect.ShadersStore[\"LinesPixelShader\"] = \"#ifdef GL_ES\\n\" + \"precision highp float;\\n\" + \"#endif\\n\\n\" + \"varying vec2 vUV; \\n\" + \"void main(void) {\\n\" + \" gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);\\n\" + \"}\\n\" + \"\";\n```\n\n----------------------------------------\n\nTITLE: Building Geometry and Creating a Mesh with NodeGeometry in JavaScript\nDESCRIPTION: Demonstrates how to build the procedural geometry defined in a NodeGeometry graph and instantiate a BABYLON.Mesh from it in JavaScript. It uses the `onBuildObservable` to ensure the mesh is created only after the asynchronous build process completes, which is initiated by calling the `build()` method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/nodeGeometry.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Build and instantiate mesh\nnodegeo.onBuildObservable.addOnce(() => {\n    var mesh = nodegeo.createMesh(\"nodegeomesh\");\n})\nnodegeo.build();\n```\n\n----------------------------------------\n\nTITLE: Running Dev Host with Webpack - Shell\nDESCRIPTION: Executes the dev host environment using npm with the serve command, targeting the @tools/dev-host workspace. This command triggers webpack-based hot reloading for ongoing development in the dev-host's src directory. Prerequisites include npm and all required Babylon.js dev packages installed in your workspace. The main effect is to launch the dev server and watch for source file changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve -w @tools/dev-host\n```\n\n----------------------------------------\n\nTITLE: Getting Canvas Context with Return Value\nDESCRIPTION: Gets the canvas context used by a texture. Simple getter method with return value documentation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/contributeToAPI.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Gets the context of the canvas used by the texture\n * @returns the canvas context of the dynamic texture\n */\npublic getContext(): CanvasRenderingContext2D {\n    return this._context;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NearMenu Layout with Rows in Babylon.js (JavaScript)\nDESCRIPTION: Demonstrates vertical arrangement of the NearMenu by configuring the rows property, producing a menu with 'n' vertical buttons. This approach is applicable whenever vertical orientation is required for NearMenu controls. Dependency: NearMenu instance, parameter n for desired row count. Input: rows (number of vertical slots); output: vertically arranged buttons.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/gui/gui3D.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nnear.rows = n;\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Server on Non-Windows OS in Shell\nDESCRIPTION: This shell command is intended for users on operating systems other than Windows. It uses `node server.js` to run the Node.js web server script located in the project's root directory (e.g., `C:\\babylon`). This makes the Babylon.js application accessible locally. Node.js must be installed, and project dependencies should be installed beforehand.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/Running_a_local_webserver_for_BabylonJs.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Default HTML Template with CannonJS Physics Engine\nDESCRIPTION: This HTML code shows the default template structure used in Babylon.JS Editor projects with CannonJS physics engine imported. It includes the main bundle.js file for the game and the CannonJS physics engine from node_modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/editor/physics/usingPhysics.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n        <title>Babylon.js Generated Template</title>\n\n        <!-- Loads the game -->\n        <script src=\"./dist/bundle.js\" type=\"text/javascript\"></script>\n\n        <!-- Loads the physics engine \"CannonJS\" -->\n        <script src=\"./node_modules/cannon/build/cannon.js\" type=\"text/javascript\"></script>\n\n        ...\n    </head>\n\n    <body>\n        ...\n    </body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Apex Vector Arrays for Sectional Roof in JavaScript (Babylon.js)\nDESCRIPTION: This code creates two separate arrays of `BABYLON.Vector2` objects: `apexes` for the main roof section and `smallApexes` for the smaller roof section. It processes respective apex coordinate data (`roofApexData`, `smallRoofApexData`) similar to the single-roof approach.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/roof.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar apexes = [];\n\t\nfor(let i = 0; i < roofApexData.length / 2; i++) {\n\tapexes.push(new BABYLON.Vector2(roofApexData[2 * i], roofApexData[2 * i + 1]))\n}\n\nvar smallApexes = [];\n\nfor(let i = 0; i < smallRoofApexData.length / 2; i++) {\n\tsmallApexes.push(new BABYLON.Vector2(smallRoofApexData[2 * i], smallRoofApexData[2 * i + 1]))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aggregator Node in Babylon.js\nDESCRIPTION: Example showing how to use the Aggregator node to position a plane at the second-to-last edge of a box in the Y direction, regardless of box subdivisions. Demonstrates geometry manipulation and position calculation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n1 - Create the box\n2 - Create the plane\n3 - Rotate the plane so it's facing down\n4 - Find the minimum Y value of the bounding box of the Box geometry\n5 - Find all Y positions of the Box geometry that are greater than the result of step 4\n6 - Any Y position NOT greater than the result of step 4, set to a value of 1.\n7 - Pass all Y positions into the Aggregator node and output the minimum value\n8 - Set the plane's y positions equal to the output of step 5\n```\n\n----------------------------------------\n\nTITLE: Enumerating Available Material Types for GreasedLine - Babylon.js - JavaScript\nDESCRIPTION: This TypeScript-style enum defines the valid material types used for GreasedLine rendering in Babylon.js, correlating each material type with a numeric constant. It is required when specifying the `materialType` property in the options interface. The available types include standard, physically-based rendering (PBR), and a basic, shader-based simple type for performance-focused usage without advanced lighting support.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nenum GreasedLineMeshMaterialType {\n    MATERIAL_TYPE_STANDARD = 0,\n    MATERIAL_TYPE_PBR = 1,\n    MATERIAL_TYPE_SIMPLE = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Frame Graph Copy-to-Backbuffer Task\nDESCRIPTION: Creates a `FrameGraphCopyToBackbufferColorTask` to copy the final rendered image to the screen's backbuffer. Sets the source texture for the copy operation to the output color texture generated by the `renderTask`. Adds the task to the frame graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/frameGraph/frameGraphBasicConcepts/frameGraphReplaceRenderLoop.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst copyToBackbufferTask = new BABYLON.FrameGraphCopyToBackbufferColorTask(\"copytobackbuffer\", frameGraph);\n\ncopyToBackbufferTask.sourceTexture = renderTask.outputTexture;\n\nframeGraph.addTask(copyToBackbufferTask);\n```\n\n----------------------------------------\n\nTITLE: Disabling WebGL2 Support via JavaScript\nDESCRIPTION: JavaScript configuration to disable WebGL2 support for compatibility with all platforms through programmatic initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    \"threeSixty\": {\n        disableWebGL2Support: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demo: More Precise Shadows in Babylon.js Playground\nDESCRIPTION: Links to a Babylon.js Playground demo (ID: empty, Title: #ZT8BKT#57More Precise Shadows) related to 'More Precise Shadows', which utilize 32-bit depth buffers for shadow maps to improve precision. Not supported on WebGL1 (falls back to 16-bit). Note the potentially malformed ID and title in the source tag.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGL2.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<Playground id=\"\" title=\"#ZT8BKT#57More Precise Shadows\" description=\"More Precise Shadows\"/>\n```\n\n----------------------------------------\n\nTITLE: Loading External JavaScript Files\nDESCRIPTION: Shows how to load external JavaScript files and handle their loading completion before usage.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/thePlayground/externalPGAssets.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar url = \"LINK ADDRESS\";\nvar s = document.createElement(\"script\");\ns.src = url;\ndocument.head.appendChild(s);\n\nvar createScene = function () {\n  //Scene set up code\n\n  s.onload = function () {\n    //any code calling on loaded file code\n  };\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Facet Data After Mesh Modification in Babylon.js\nDESCRIPTION: This snippet demonstrates how to enable and update facet data for a mesh after its geometry has been modified. The updateFacetData() method must be called once to enable the feature and again whenever the mesh geometry changes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst mesh = myBlenderImportedMesh; // import some mesh from an external source\nmesh.updateFacetData(); // enable facetData\n// ... process here using the mesh with its current geometry and FacetData\nif (condition) {\n  customMorphFunction(mesh); // update the mesh geometry\n  mesh.updateFacetData(); // update the facet data\n}\n```\n\n----------------------------------------\n\nTITLE: Building Minified Babylon.js via npm Script - Markdown\nDESCRIPTION: This snippet demonstrates the npm terminal command to build the minified version of Babylon.js. The command depends on npm and the Babylon.js repository setup, and will output built files to the designated packages directory. No code input or parameters are needed besides running the script in the root of the project.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/minifiedVer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:babylonjs\n```\n\n----------------------------------------\n\nTITLE: Creating and Showing a Ray Helper (Static Method) in Babylon.js\nDESCRIPTION: Uses the static `BABYLON.RayHelper.CreateAndShow` method to quickly create and display a visual representation of a `BABYLON.Ray` in the scene for debugging purposes. Allows specifying the ray, the scene, and the color of the helper line.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/interactions/picking_collisions.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.RayHelper.CreateAndShow(ray, scene, new BABYLON.Color3(1, 1, 0.1));\n```\n\n----------------------------------------\n\nTITLE: Parenting Meshes to a Container Mesh in Babylon.js (JavaScript)\nDESCRIPTION: Assigns the previously created 'parent' mesh as the parent for both the 'sphere' and 'ground' meshes using the `setParent` method. Child meshes inherit transformations from their parent. Requires 'sphere', 'ground', and 'parent' to be valid Babylon.js mesh or transform node objects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/displayBoundingBoxes.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.setParent(parent);\nground.setParent(parent);\n```\n\n----------------------------------------\n\nTITLE: HTML Initialization of AMP 360 Video Player\nDESCRIPTION: HTML markup to initialize the Azure Media Player with the 360 video plugin through declarative data-setup attribute.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<video playsinline crossorigin=\"anonymous\" class=\"azuremediaplayer amp-default-skin amp-big-play-centered\" autoplay controls width=\"100%\" height=\"100%\" data-setup='{ \"techOrder\": [\"azureHtml5JS\", \"html5\"], \"plugins\": { \"threeSixty\": { } } }'>\n    <source src=\"//willzhanmswest.streaming.mediaservices.windows.net/1f2dd2dd-ee99-40be-aae9-d0c2209982eb/DroneFlightOverLasVegasStripH3Pro7.ism/Manifest\" type=\"application/vnd.ms-sstr+xml\" />\n    <p class=\"amp-no-js\">\n        To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video\n    </p>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Template Configuration Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for template configuration including location, HTML content, parameters and event handlers\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface ITemplateConfiguration {\n  location?: string; // #template-id OR http://example.com/loading.html\n  html?: string; // raw html string\n  id?: string;\n  params?: { [key: string]: string | number | boolean | object };\n  events?: {\n    // pointer events\n    pointerdown?: boolean | { [id: string]: boolean },\n    pointerup?: boolean | { [id: string]: boolean },\n    pointermove?: boolean | { [id: string]: boolean },\n    pointerover?: boolean | { [id: string]: boolean },\n    pointerout?: boolean | { [id: string]: boolean },\n    pointerenter?: boolean | { [id: string]: boolean },\n    pointerleave?: boolean | { [id: string]: boolean },\n    pointercancel?: boolean | { [id: string]: boolean },\n    //click, just in case\n    click?: boolean | { [id: string]: boolean },\n    // drag and drop\n    dragstart?: boolean | { [id: string]: boolean },\n    drop?: boolean | { [id: string]: boolean },\n\n    [key: string]: boolean | { [id: string]: boolean } | undefined, // allow injecting further events\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Exp2 Node Implementation\nDESCRIPTION: Base-2 exponential function node that accepts Float, Int, Vector2, Vector3, and Vector4 inputs. Returns 2 raised to the power of the input value.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Running Slime Simulation using Babylon.js WebGPU - JavaScript\nDESCRIPTION: This snippet runs a Babylon.js WebGPU playground implementing a slime agent simulation inspired by an external project. It uses WGSL compute shaders and a storage buffer for trail mapping as WebGPU lacks read/write texture support, necessitating multiple memory copies. Core parameters include agent count and buffer setup, and the output is an animated simulation visualizing emergent slime patterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/shaders/computeShader.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Playground id=\\\"#GXJ3FZ#51\\\" engine=\\\"webgpu\\\" title=\\\"Slime simulation\\\" description=\\\"Simulate organic-like agents\\\" image=\\\"/img/extensions/webgpu/slime.png\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Default TypeScript and Node.js Installation Paths\nDESCRIPTION: Default file system paths for TypeScript compiler and Node.js runtime on Mac OSX and Windows platforms. These paths need to be configured in the Unity Toolkit for proper operation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Unity/Projects.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMac OSX: /usr/local/bin/tsc\n\nWindows: C:\\Users\\<YourName>\\AppData\\Roaming\\npm\\node_modules\\typescript\\bin\\tsc\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading UI using BabylonJS Engine - JavaScript\nDESCRIPTION: Shows the BabylonJS loading overlay while a scene is being prepared. Should be called before potentially expensive asynchronous scene operations. Requires BabylonJS Engine instance for the 'displayLoadingUI' method. No input parameters; provides a visual loading indicator as output.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/stateMachine.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis._engine.displayLoadingUI();\n```\n\n----------------------------------------\n\nTITLE: Switching Between Controls and Pause Menus in Babylon.js with JavaScript\nDESCRIPTION: This snippet toggles visibility between the Pause and Controls menus in a Babylon.js game UI. Setting _controls to visible and _pauseMenu to hidden enables quick switching between different modal menus. It assumes _controls and _pauseMenu are Rectangle controls managing grouped UI elements.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/gameGUI.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n//open controls screen\nthis._controls.isVisible = true;\nthis._pauseMenu.isVisible = false;\n```\n\n----------------------------------------\n\nTITLE: Applying Rotation Around Custom Axis in Local Space - Babylon.js JavaScript\nDESCRIPTION: Rotates a mesh in Babylon.js around a custom local-space axis. Needs a mesh instance, Babylon.js Vector3, angle in radians, and BABYLON.Space.LOCAL enum. Ensures the transformation is performed relative to the mesh's current orientation and local axes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/center_origin/add_rotations.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate(new BABYLON.Vector3(1, 0 -1), Math.PI / 3, BABYLON.Space.LOCAL);\n```\n\n----------------------------------------\n\nTITLE: GreasedLineMeshBuilderOptions Interface\nDESCRIPTION: Configuration options interface for creating GreasedLine meshes including points, widths, and instance settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/param/greased_line.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npoints: GreasedLinePoints;\npointsOptions?: GreasedLinePointsOptions;\nwidths?: number[];\nwidthDistribution?: GreasedLineMeshWidthDistribution;\ninstance?: GreasedLineMesh;\nupdatable?: boolean;\nuvs?: number[];\nlazy?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Setting up CesiumJS for integration with BabylonJS\nDESCRIPTION: Initializes a CesiumJS viewer with custom terrain and camera settings. Captures base points for BabylonJS root node setup.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_CesiumJS.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst LNG = -122.4175, LAT = 37.655;\n\nconst viewer = new Cesium.Viewer('cesiumContainer', {\n    terrainProvider: Cesium.createWorldTerrain(),\n    useDefaultRenderLoop: false\n});\n\nviewer.camera.flyTo({\n    destination : Cesium.Cartesian3.fromDegrees(LNG, LAT, 300),\n    orientation : {\n        heading : Cesium.Math.toRadians(0.0),\n        pitch : Cesium.Math.toRadians(-90.0),\n    }\n});\n\n// get these two points for later setup of BabylonJS root node.\nconst base_point = cart2vec(Cesium.Cartesian3.fromDegrees(LNG, LAT, 50));\nconst base_point_up = cart2vec(Cesium.Cartesian3.fromDegrees(LNG, LAT, 300));\n```\n\n----------------------------------------\n\nTITLE: Installing babylonjs-hook NPM Package\nDESCRIPTION: Commands to install the babylonjs-hook NPM package using either NPM or Yarn. This package provides the React component demonstrated in the example.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_ReactJS.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm add babylonjs-hook\nyarn add babylonjs-hook\n```\n\n----------------------------------------\n\nTITLE: Displaying GreaterThan Node Image using H3Image Component (Markdown)\nDESCRIPTION: Uses a custom H3Image component to render an image for the 'Greater Than' logical node in Babylon.js NGE documentation. It sets the image title ('GreaterThan'), source path ('/img/tools/nge/greaterThanNode.jpg'), and alt text ('Greater Than node').\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<H3Image title=\"GreaterThan\" image=\"/img/tools/nge/greaterThanNode.jpg\" alt=\"Greater Than node\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Deterministic Lockstep in Babylon.js\nDESCRIPTION: Sets up deterministic lockstep for synchronized animations and physics with discrete time steps.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthis.engine = new BABYLON.Engine(theCanvas, true, {\n  deterministicLockstep: true,\n  lockstepMaxSteps: 4,\n});\n\nconst physEngine = new BABYLON.CannonJSPlugin(false);\nnewScene.enablePhysics(this.gravity, physEngine);\nphysEngine.setTimeStep(1 / 60);\n\nnewScene.onBeforeStepObservable.add(function (theScene) {\n  console.log(\"Performing game logic, BEFORE animations and physics for stepId: \" + theScene.getStepId());\n});\n\nnewScene.onAfterStepObservable.add(function (theScene) {\n  console.log(\"Performing game logic, AFTER animations and physics for stepId: \" + theScene.getStepId());\n});\n```\n\n----------------------------------------\n\nTITLE: Checking heyVR SDK Load Status in JavaScript\nDESCRIPTION: Example showing how to check if the heyVR SDK is loaded and execute code accordingly using event listeners.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_heyVR.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst doStuff= () => 'Executed on SDK load'\n\nwindow.heyVR ?\n  doStuff() :\n  window.addEventListener( 'heyVR.SDKLoaded', doStuff );\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Tiling in Babylon.js\nDESCRIPTION: Controls how many times a texture repeats across a mesh by adjusting the uScale and vScale properties. This allows for creating repeating patterns without needing larger textures.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/moreMaterials.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyMaterial.diffuseTexture.uScale = 5.0;\nmyMaterial.diffuseTexture.vScale = 5.0;\n```\n\n----------------------------------------\n\nTITLE: Event Handler Registration\nDESCRIPTION: Example of registering an event handler for template events using the template manager\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// viewer is a viewer instance. See Advanced usage (//doc.babylonjs.com/extensions/Advanced_usage) for further details on how to get it.\nlet navbar = viewer.templateManager.getTemplate(\"navBar\");\n// let's be safe!\nif (!navbar) return;\n\n// register a new observer\nnavbar.onEventTriggered.add((data) => {\n  switch (data.event.type) {\n    case \"pointerdown\":\n      switch (data.selector) {\n        case \"#fullscreen-button\":\n          // let's go full screen!!\n          break;\n        case \"#some-other-id\":\n          // just do something else please\n          break;\n      }\n      break;\n    case \"drop\":\n      // What shall we do with the dropped data?\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Edge Rendering Epsilon in Babylon.js\nDESCRIPTION: This code shows how to enable edge rendering with a custom epsilon value. The epsilon determines the threshold for rendering edges based on the angle between face normals.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/edgeRenderer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbox.enableEdgesRendering(0.9999);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Collection Strategy in JavaScript\nDESCRIPTION: Demonstrates how to create a basic custom collection strategy function that returns an object with id, getData, and dispose methods. The strategy allows tracking custom variables and performing cleanup operations.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector/performanceProfiler.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This variable would be updated somewhere else.\nvar someVariableToTrack;\n\nconst someStrategyCallback = (scene) => {\n    return {\n        /**\n        * The id of the strategy.\n        */\n        id: \"some strategy id\",\n        /**\n        * Function which gets the data for the strategy.\n        */\n        getData: () => someVariableToTrack,\n        /**\n        * Function which does any necessary clean-up. Called when performanceViewerCollector.dispose() is called.\n        */\n        dispose: () => {\n            // do any clean up here.\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Tree Sprites with Random Positioning\nDESCRIPTION: Generates two forests of 500 trees each using sprites. Places trees randomly within specified coordinate ranges while maintaining consistent height.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap5/trees.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 500; i++) {\n    const tree = new BABYLON.Sprite(\"tree\", spriteManagerTrees);\n    tree.position.x = Math.random() * (-30);\n    tree.position.z = Math.random() * 20 + 8;\n    tree.position.y = 0.5;\n}\n\nfor (let i = 0; i < 500; i++) {\n    const tree = new BABYLON.Sprite(\"tree\", spriteManagerTrees);\n    tree.position.x = Math.random() * (25) + 7;\n    tree.position.z = Math.random() * -35  + 8;\n    tree.position.y = 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Updateable Thin Instance Buffers\nDESCRIPTION: Demonstrates how to create thin instance buffers that can be updated later by setting the static flag to false. This allows for dynamic updates to instance properties during runtime.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/copies/thinInstances.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsphere.thinInstanceSetBuffer(\"matrix\", bufferMatrices, 16, false); // matrix buffer is updateable\nsphere.thinInstanceSetBuffer(\"color\", bufferColors, 4, true); // color buffer is not updateable\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Scenes with Proper Clearing in Babylon.js\nDESCRIPTION: This code demonstrates the correct way to render multiple scenes with proper scene clearing. It ensures that the top scene (scene1) does not clear the rendering of the bottom scene (scene0).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/multiScenes.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nengine.runRenderLoop(function () {\n  scene0.render();\n  scene1.render(); // Since scene1's autoClear is false, it will not \"erase\" what scene0 has rendered.\n});\n```\n\n----------------------------------------\n\nTITLE: Mobile Device Detection\nDESCRIPTION: Checks if the current device is mobile using user agent detection to conditionally render mobile-specific controls.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/crossPlatform.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    //make mobile controls\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure JSON Configuration\nDESCRIPTION: Example of how to structure page hierarchy in the documentation's structure.json file.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"friendlyName\": \"Home Page\",\n    \"content\": \"landing_pages/home\",\n    \"children\": {\n    /* [...] */\n    \"divingDeeper\": {\n            \"friendlyName\": \"Diving Deeper\",\n            \"children\": {\n              /* [...] */\n              \"audio\": {\n                    \"friendlyName\": \"Audio\",\n                    \"children\": {\n                        \"playingSoundsMusic\": { \"friendlyName\": \"Playing Sounds and Music\", \"children\": {}, \"content\": \"How_To/audio/Playing_sounds_and_music\" }\n                    },\n                    \"content\": \"landing_pages/divingDeeperAudioLandingPage\"\n                }\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Joysticks in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create virtual joysticks for the left and right side of the screen using the BABYLON.VirtualJoystick class. It also shows how to access the joystick's delta position values.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/input/virtualJoysticks.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst leftJoystick = new BABYLON.VirtualJoystick(true);\nconst rightJoystick = new BABYLON.VirtualJoystick(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nleftJoystick.deltaPosition.x;\nleftJoystick.deltaPosition.y;\n```\n\n----------------------------------------\n\nTITLE: Initializing GUIDialog Constructor\nDESCRIPTION: Creates a new GUIDialog instance with specified parameters including ID, options, GUI manager, optional callback function, and append settings.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiDialog.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew GUIDialog(id, options, guimanager, callback, append)\n```\n\n----------------------------------------\n\nTITLE: Parenting Reticle to VR Camera - Babylon.js JavaScript\nDESCRIPTION: Handles switching the parent of the reticle mesh between the VR camera and the standard camera when entering or exiting VR mode. Useful for keeping the reticle aligned with the user's perspective in both VR and non-VR scenarios. Relies on the Babylon.js VRHelper interface and previously created camera instances. Inputs are VR mode change events and references to the cameras; outputs are new reticle parent assignments, with a console log of the current VR camera on entering VR mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/vr_game.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nVRHelper.onEnteringVR = function () {\n    console.log(VRHelper.currentVRCamera);\n    reticle.parent = VRHelper.currentVRCamera;\n};\nVRHelper.onExitingVR = function () {\n    reticle.parent = camera;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking GUIProgress Visibility in Babylon.js\nDESCRIPTION: Method to check if the progress bar GUI element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiProgress.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Width with Dynamic Texture in BabylonJS\nDESCRIPTION: Creates a temporary dynamic texture to measure the width of text that will be rendered. This calculation is necessary to determine the appropriate plane dimensions for text fitting.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/dynamicTexture.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst temp = new BABYLON.DynamicTexture(\"DynamicTexture\", 64, scene);\nconst tmpctx = temp.getContext();\ntmpctx.font = font;\nconst DTWidth = tmpctx.measureText(text).width;\n```\n\n----------------------------------------\n\nTITLE: Translating Playground Scene to Modular Imports - JavaScript (Vanilla BABYLON)\nDESCRIPTION: Shows a direct translation of a playground Babylon.js scene using global BABYLON access. Demonstrates scene initialization, camera and light setup, basic mesh creation, and mesh positioning. Requires an 'engine' and 'canvas' accessible in the outer scope. This code is mainly for educational comparison and not intended for use in the dev host, as it uses the global BABYLON namespace. Inputs: engine, canvas; Output: a configured Scene instance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst createScene = function () {\n  // This creates a basic Babylon Scene object (non-mesh)\n  const scene = new BABYLON.Scene(engine);\n\n  // This creates and positions a free camera (non-mesh)\n  const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n\n  // This targets the camera to scene origin\n  camera.setTarget(BABYLON.Vector3.Zero());\n\n  // This attaches the camera to the canvas\n  camera.attachControl(canvas, true);\n\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n  const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n\n  // Default intensity is 1. Let's dim the light a small amount\n  light.intensity = 0.7;\n\n  // Our built-in 'sphere' shape.\n  const sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { diameter: 2, segments: 32 }, scene);\n\n  // Move the sphere upward 1/2 its height\n  sphere.position.y = 1;\n\n  // Our built-in 'ground' shape.\n  const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n\n  return scene;\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Lattice with Babylon.js - JavaScript\nDESCRIPTION: Demonstrates the basic creation of a Lattice object in Babylon.js with default properties. No dependencies beyond Babylon.js are needed. No arguments are required, and the default lattice covers a 1x1x1 space with a 3x3x3 resolution.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/transforms/lattice.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar lattice = new BABYLON.Lattice();\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Material in Babylon.js\nDESCRIPTION: Creates a multi-material and adds the previously defined standard materials to its subMaterials collection. This allows multiple materials to be combined and applied to different parts of a mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/materials/using/multiMaterials.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst multimat = new BABYLON.MultiMaterial(\"multi\", scene);\nmultimat.subMaterials.push(material0);\nmultimat.subMaterials.push(material1);\nmultimat.subMaterials.push(material2);\n```\n\n----------------------------------------\n\nTITLE: Accessing glTF Loader Extension Options in TypeScript\nDESCRIPTION: This code demonstrates how to access the custom extension options within the extension class constructor. It retrieves the options from the loader's parent object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/glTF/createExtensions.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyCustomExtension implements IGLTFLoaderExtension {\n    constructor (loader: GLTFLoader) {\n        const options = loader.parent.extensionOptions[\"myCustomExtension\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Font in Ascii Art Post-Process\nDESCRIPTION: This code shows how to customize the font used in the Ascii Art Post-Process. It specifies a 10px Monospace font.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/postProcessLibrary/asciiArtPP.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Creates the post process\nvar postProcess = new BABYLON.AsciiArtPostProcess(\"AsciiArt\", camera, \"10px Monospace\");\n```\n\n----------------------------------------\n\nTITLE: Calculating Position Vector Length on Isometric Grid\nDESCRIPTION: Formula for calculating the length of a position vector xi + yj on an isometric grid where the angle between x and y axes is 60°. The length is calculated using the cosine rule and simplifies to the square root of (x² + y² + xy).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/workshop/Geodesic_Math.md#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n|xi⃗ + yj⃗| = √(x² + y² + xy)\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Pixi.js Stages with Babylon.js\nDESCRIPTION: Shows how to render Pixi.js stages both behind and in front of a Babylon.js scene, allowing for complex layered 2D and 3D compositions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_PixiJS.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nengine.runRenderLoop(function () {\n  pixiRenderer.reset();\n  pixiRenderer.render(stage);\n\n  scene.autoClear = false;\n  scene.render();\n  engine.wipeCaches(true);\n\n  pixiRenderer.reset();\n  pixiRenderer.render(stage1);\n});\n```\n\n----------------------------------------\n\nTITLE: Placing Meshes on Goldberg Polyhedron Faces\nDESCRIPTION: Shows how to place and position meshes on specific faces of a Goldberg polyhedron using relative coordinates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/creation/polyhedra/goldberg_poly.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst height = 2;\nconst width = 0.1;\nconst depth = 0.08;\nconst box = BABYLON.MeshBuilder.CreateBox(\"box\", { width: width, depth: depth, height: height });\nconst position = new BABYLON.Vector3(0.53, height / 2, 0.34);\ngoldbergPoly.placeOnGoldbergFaceAt(box, 32, position);\n```\n\n----------------------------------------\n\nTITLE: Initializing PointerDragBehavior in BabylonJS\nDESCRIPTION: Creates a pointer drag behavior that allows dragging meshes along a specified axis or plane. Includes configuration for drag axis and event handling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/meshBehaviors.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointerDragBehavior = new BABYLON.PointerDragBehavior({ dragAxis: new BABYLON.Vector3(0, 1, 0) });\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointerDragBehavior.useObjectOrientationForDragging = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointerDragBehavior.updateDragPlane = false;\n```\n\nLANGUAGE: javascript\nCODE:\n```\npointerDragBehavior.onDragStartObservable.add((event) => {\n  console.log(\"dragStart\");\n  console.log(event);\n});\npointerDragBehavior.onDragObservable.add((event) => {\n  console.log(\"drag\");\n  console.log(event);\n});\npointerDragBehavior.onDragEndObservable.add((event) => {\n  console.log(\"dragEnd\");\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Angle for WebXR Teleportation\nDESCRIPTION: Configures the rotation angle when users move the thumbstick or touchpad left and right, customizing the degree of rotation from the default 22.5 degrees.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// rotate 45 degrees\nteleportation.rotationAngle = Math.PI / 4;\n```\n\n----------------------------------------\n\nTITLE: Setting Clipping Planes and Infinite Perspective in Babylon.js\nDESCRIPTION: Demonstrates how to set near and far clipping planes for cameras, including how to set the far clipping plane to infinity for unlimited render distance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/cameras/camera_introduction.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncamera.maxZ = 100;\n\ncamera.minZ = 10;\n\ncamera.maxZ = 0;\n```\n\n----------------------------------------\n\nTITLE: Forcing World Matrix Computation in Babylon.js\nDESCRIPTION: This snippet demonstrates how to force the world matrix computation before getting a facet normal after rotating the mesh.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmesh.rotate.y += 0.2; // the mesh will be rotated on the next render call, but I need a rotated normal\nmesh.computeWorldMatrix(true); // force the world matrix computation\nconst norm = mesh.getFacetNormal(50); // returns the world normal of the mesh 50th facet\n```\n\n----------------------------------------\n\nTITLE: Fract Node Implementation\nDESCRIPTION: Function node that extracts the fractional part of input values. Supports Float, Int, Vector2, Vector3, and Vector4 types, returning fractional components.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Publishing to PrivJs Registry\nDESCRIPTION: Command for publishing the ShowroomCamera package to the PrivJs registry after login. This makes the package available for commercial distribution through PrivJs's marketplace.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/showroomCamera.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Setting Default Camera Orientation via JavaScript\nDESCRIPTION: JavaScript configuration to set the default camera orientation in the Y-axis for the 360 video player through programmatic initialization.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/amp360Video.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    \"threeSixty\": {\n        defaultCameraOrientationY: 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Objects\nDESCRIPTION: Demonstrates different ways to add tags to JavaScript objects in Babylon.js.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/tags.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myJSObj1 = {};\n// enable tags for myJSObj1\nBABYLON.Tags.EnableFor(myJSObj); // => addTags is available on myJSObj1\n// add tags to myJSObj1\nmyJSObj1.addTags(\"tag1 tag2\"); // same as BABYLON.Tags.AddTagsTo(myJSObj1, \"tag1 tag2\"),\n\nconst myJSObj2 = {};\n// add tags to myJSObj2 without having to enable tags for it first\nBABYLON.Tags.AddTagsTo(myJSObj2, \"tag1 tag2\");\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Header Definition\nDESCRIPTION: YAML frontmatter defining metadata for the WebXR features documentation page, including title, description, and keywords.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRSelectedFeatures.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: WebXR Selected Features\nimage:\ndescription: Learn about key WebXR features in Babylon.js.\nkeywords: babylon.js, diving deeper, WebXR, VR, AR\nfurther-reading:\nvideo-overview:\nvideo-content:\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lantern Parent Node in Babylon.js\nDESCRIPTION: Hides the original lantern mesh and creates a transform node to organize all lantern instances. This improves scene organization and makes debugging easier in the inspector.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nassets.lantern.isVisible = false; //original mesh is not visible\n//transform node to hold all lanterns\nconst lanternHolder = new TransformNode(\"lanternHolder\", this._scene);\n```\n\n----------------------------------------\n\nTITLE: Client-Side Physics Authority Management\nDESCRIPTION: Client-side implementation that handles physics authority transitions and updates box position/rotation based on server messages. Includes smooth interpolation for non-authoritative clients.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/networking/Colyseus_ammojs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet isUpdateBox=false;\n\n room.onMessage(\"boxUpdate\", (message) => {\n    if(message.targetId==null||message.targetId==sessionId){\n        isUpdateBox=true\n        box.material.diffuseColor. = new BABYLON.Color3(1, 0, 0);\n    }else{\n        isUpdateBox=false\n        box.material.diffuseColor = new BABYLON.Color3(0, 1, 0);\n        box.position= BABYLON.Vector3.Lerp(\n          box.position,\n          new BABYLON.Vector3(\n            message.position.x,\n            message.position.y,\n            message.position.z\n          ),\n          0.5)\n        box.rotationQuaternion=BABYLON.Quaternion.Slerp(\n          box.rotationQuaternion,\n          new BABYLON.Quaternion(\n            message.quaternion.x,\n            message.quaternion.y,\n            message.quaternion.z,\n            message.quaternion.w\n          ),\n          0.4)\n    }\n});\n\n engine.runRenderLoop(function() {\n    if(room&&playerViews[sessionId]){\n        // ...\n        if(isUpdateBox){\n            room.send('boxUpdate', {\n                targetId:sessionId,\n                position:{\n                  x: box.position.x,\n                  y: box.position.y,\n                  z:box.position.z\n                },\n                quaternion:{\n                  x:box.rotationQuaternion.x,\n                  y:box.rotationQuaternion.y,\n                  z:box.rotationQuaternion.z,\n                  w:box.rotationQuaternion.w\n                }\n            });\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing RenderTargetTexture Material Assignment in Babylon.js\nDESCRIPTION: Instead of changing the material used by a RenderTargetTexture in onBeforeRender and resetting it in onAfterRender, use RenderTargetTexture.setMaterialForRendering for better performance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRenderTargetTexture.setMaterialForRendering()\n```\n\n----------------------------------------\n\nTITLE: Disabling Backwards Movement in WebXR Teleportation\nDESCRIPTION: Toggles the backwards movement capability in WebXR teleportation, which is enabled by default but can be disabled to restrict user movement to forward directions only.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nteleportation.backwardsMovementEnabled = false; // Default is true\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Facet Normals in Babylon.js\nDESCRIPTION: This code shows how to retrieve the array of facet normals in local space and access a specific facet's normal.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/facetData.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst localNormals = mesh.getFacetLocalNormals(); // returns the array of facet normals in the local space\nconst localPos = localNormals[50]; // Vector3 : the 50th facet local position\n```\n\n----------------------------------------\n\nTITLE: Configuring Backwards Movement Distance in WebXR Teleportation\nDESCRIPTION: Sets the distance for backwards teleportation movement when the user pulls the thumbstick or touchpad backward, allowing customization of the retreat distance.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRTeleportation.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nteleportation.backwardsTeleportationDistance = 1.0; // Default is 0.7\n```\n\n----------------------------------------\n\nTITLE: Adding Image with HTML in BabylonJS Documentation\nDESCRIPTION: Shows how to add an image using HTML tag with additional attributes for formatting and captions.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"internal link to image\" title=\"Image title\" alt=\"Similar to title\" width=\"300\" height=\"200\" caption=\"Copyright (or any other) caption that will appear under the image\" />\n```\n\n----------------------------------------\n\nTITLE: Appending Scene from String Data (TypeScript)\nDESCRIPTION: Demonstrates how to load Babylon.js assets from a string containing model data and append them to the scene.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/loadingFileTypes.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait BABYLON.AppendSceneAsync(\"data:\" + gltfString, scene);\n```\n\n----------------------------------------\n\nTITLE: Publishing Babylon.js App as Public NPM Package\nDESCRIPTION: Commands to navigate to the app_package directory and publish it as a public NPM package.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/devStories/fruitFalling.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd app_package\nnpm publish --access public\n```\n\n----------------------------------------\n\nTITLE: Template Manager Usage Example\nDESCRIPTION: Example of accessing and using the template manager to retrieve parsed templates\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/viewerTemplatingSystem.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// not a part of this section, let's assume the viewer is being retrieved\nlet viewer = getViewer();\n\n// We have previously defined a \"canvas\" element in the configuration. We can now retrieve it!\nlet canvasContainer = viewer.templateManager.getTemplate(\"canvasContainer\");\n```\n\n----------------------------------------\n\nTITLE: Exporting to GLB Format\nDESCRIPTION: Code snippet showing how to export a Babylon.js scene to GLB format (single binary file) and download it.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/glTFExporter.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGLTF2Export.GLBAsync(scene, \"fileName\").then((glb) => {\n  glb.downloadFiles();\n});\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in Babylon.js Flow Graph\nDESCRIPTION: Creates a console log block that outputs a message to the browser console. The block can be configured with a specific message and log type (log, warn, error).\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst consoleLog = new FlowGraphConsoleLogBlock();\nconsoleLog.message.setValue(\"Hello, world!\", ctx);\nconsoleLog.out.connectTo(nextBlock.in);\n```\n\n----------------------------------------\n\nTITLE: ES6 WebXR Feature Import Example\nDESCRIPTION: Demonstrates proper ES6 module importing for WebXR features.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/webXRFeaturesManager.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    WebXRHitTestLegacy\n} from \"@babylonjs/core/Cameras/xr/features/WebXRHitTestLegacy\";\n\nconst featuresManager = giveMeMyFeaturesManagerSomehow();\nconst xrHitTest1 = featuresManager.enableFeature(WebXRFeatureName.HIT_TEST /* Same as \"xr-hit-test\" */ , 1);\n```\n\n----------------------------------------\n\nTITLE: Loading Lantern Mesh in Babylon.js\nDESCRIPTION: Imports a lantern mesh from a glTF file, extracts it from the root, and prepares it for cloning. The mesh is loaded asynchronously using ImportMeshAsync and the root node is disposed after extraction.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/lanterns.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//loads lantern mesh\nconst res = await ImportMeshAsync(\"./models/lantern.glb\", this._scene);\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for Shader Files\nDESCRIPTION: VSCode settings to hide auto-generated shader files from the editor view for better development experience.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/smartFilters/creatingNewBlocks.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"files.exclude\": {\n    \"**/*.fragment.ts\": true,\n    \"**/*.block.ts\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Node\nDESCRIPTION: Creates a collection of up to 10 geometry inputs for randomized instantiation. Provides unique collection IDs for each geometry to drive logic within the graph.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/nge/ngeBlocks.md#2025-04-23_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Enabling Pseudo Lens Flare in Standard Rendering Pipeline\nDESCRIPTION: This code shows how to activate the pseudo lens flare effect in the Standard Rendering Pipeline.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/standardRenderingPipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Activating pseudo lens flare effect\npipeline.LensFlareEnabled = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sky Material Properties\nDESCRIPTION: Examples of setting various properties to control the sky appearance, including turbidity, luminance, and atmospheric effects.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/skyMat.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nskyMaterial.turbidity = 1;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nskyMaterial.luminance = 1;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nskyMaterial.inclination = 0.5;\nskyMaterial.azimuth = 0.25;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nskyMaterial.useSunPosition = true;\nskyMaterial.sunPosition = new BABYLON.Vector3(0, 100, 0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nskyMaterial.rayleigh = 2;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nskyMaterial.mieDirectionalG = 0.8;\nskyMaterial.mieCoefficient = 0.005;\n```\n\n----------------------------------------\n\nTITLE: Exporting BABYLON Namespace in TypeScript Definition File\nDESCRIPTION: Modification needed in babylon.d.ts file to enable proper TypeScript importing of the BABYLON namespace in the application code.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Ionic_Angular.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport = BABYLON;\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Keys in Babylon.js\nDESCRIPTION: Assigns the key frames array to the animation object, defining the timeline and property changes for the animation to follow.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmyAnim.setKeys(myKeys);\n```\n\n----------------------------------------\n\nTITLE: Installing the glTF Exporter via NPM\nDESCRIPTION: Commands for installing the Babylon.js core and serializers packages via NPM, which includes the glTF exporter functionality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/glTFExporter.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/core @babylonjs/serializers\n```\n\n----------------------------------------\n\nTITLE: Creating FollowBehavior in BabylonJS\nDESCRIPTION: Implements behavior for making a mesh follow the camera with customizable bounds and distances.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/behaviors/meshBehaviors.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst followBehavior = new BABYLON.FollowBehavior();\nfollowBehavior.attach(mesh);\n```\n\n----------------------------------------\n\nTITLE: Setting Gizmo Orientation in Babylon.js\nDESCRIPTION: Shows how to change the gizmo orientation from local space to world space by setting the updateGizmoRotationToMatchAttachedMesh property.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/mesh/gizmo.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngizmoManager.gizmos.positionGizmo.updateGizmoRotationToMatchAttachedMesh = false;\n```\n\n----------------------------------------\n\nTITLE: Importing Resizer Control\nDESCRIPTION: Import statement for the Resizer control from the Babylon.js controls package.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/resizer.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Resizer } from \"@babylonjs/controls/resizer\";\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Iterations for ForLoopBlock in BabylonJS\nDESCRIPTION: This snippet shows how to set the maximum number of iterations for all ForLoopBlocks in the system. This is a static property that affects all instances of ForLoopBlock.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/flowGraph/flowGraphBlocks.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nFlowGraphForLoopBlock.MaxLoopIterations = 10000;\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Location in Babylon.js Viewer\nDESCRIPTION: This snippet demonstrates how to specify the location of a template in the Babylon.js Viewer. It shows two examples: one using an HTML element ID and another using a URL.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<main location=\"#main-template\"></main>\n```\n\nLANGUAGE: html\nCODE:\n```\n<main location=\"https://example.com/templates/main.html\"></main>\n```\n\n----------------------------------------\n\nTITLE: Installing Preview Versions\nDESCRIPTION: NPM installation commands for the preview versions of Babylon.js controls and core packages.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/controls/resizer.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @babylonjs/controls@preview\nnpm install @babylonjs/core@preview\n```\n\n----------------------------------------\n\nTITLE: Creating Bezier Curve Ease in Babylon.js\nDESCRIPTION: Implements a bezier curve easing function with custom control points.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/advanced_animations.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bezierEase = new BABYLON.BezierCurveEase(0.32, -0.73, 0.69, 1.59);\n```\n\n----------------------------------------\n\nTITLE: Styling Elements with CSS Class\nDESCRIPTION: Example of CSS styling for elements with a 'center' class, demonstrating basic class-based styling.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/tags.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.center\n{\n    text-align: center;\n    color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Disabling Teleportation Feature\nDESCRIPTION: Demonstrates how to manually disable teleportation using the features manager.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/webXR/WebXRMovement.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureManager = xrHelper.baseExperience.featuresManager;\nfeatureManager.disableFeature(BABYLON.WebXRFeatureName.TELEPORTATION);\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine with Antialiasing in Babylon.js Viewer\nDESCRIPTION: HTML configuration for enabling antialiasing in the Babylon.js viewer engine for better image quality.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"none\">\n  <!-- enable antialiasing -->\n  <engine antialiasing=\"true\"></engine>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen-Based Motion Blur in Babylon.js\nDESCRIPTION: Switch from object-based to screen-based motion blur for better performance in large scenes.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/postProcesses/motionBlurPostProcess.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmotionblur.isObjectBased = false;\n```\n\n----------------------------------------\n\nTITLE: Opening URL in New Window\nDESCRIPTION: Opens a URL in a new browser window or tab when triggered by an event in Babylon.js using the window.open() method.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/OpenUrl.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.open(URL)\n```\n\n----------------------------------------\n\nTITLE: Detailed Environment Configuration in Babylon.js Viewer\nDESCRIPTION: Complete HTML configuration for Babylon.js viewer including ground with shadows, skybox, engine with antialiasing, and camera behaviors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/defaultViewerConfig.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"none\">\n  <!-- Ground that receives shadows -->\n  <ground receive-shadows=\"true\"></ground>\n  <!-- Default skybox -->\n  <skybox></skybox>\n\n  <!-- enable antialiasing -->\n  <engine antialiasing=\"true\"></engine>\n  <!-- camera configuration -->\n  <camera>\n    <!-- add camera behaviors -->\n    <behaviors>\n      <!-- enable default auto-rotate behavior -->\n      <auto-rotate type=\"0\"></auto-rotate>\n      <!-- enable and configure the framing behavior -->\n      <framing type=\"2\" zoom-on-bounding-info=\"true\" zoom-stops-animation=\"false\"></framing>\n      <!-- enable default bouncing behavior -->\n      <bouncing type=\"1\"></bouncing>\n    </behaviors>\n  </camera>\n</babylon>\n```\n\n----------------------------------------\n\nTITLE: Applying Green Color Material to Ground\nDESCRIPTION: Demonstrates creating a green material using Color3 and applying it to a ground mesh. Shows how to set diffuse color properties of a StandardMaterial.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/introductionToFeatures/chap2/material.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst groundMat = new BABYLON.StandardMaterial(\"groundMat\");\ngroundMat.diffuseColor = new BABYLON.Color3(0, 1, 0);\nground.material = groundMat; //Place the material property of the ground\n```\n\n----------------------------------------\n\nTITLE: Downloading Mesh as Babylon File in JavaScript\nDESCRIPTION: This function serializes a Babylon.js mesh, converts it to JSON, and allows downloading it to the user's computer as a .babylon file. Similar to the scene download function, it handles URL cleanup and file extension validation.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/Exporters/Save_Babylon.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet objectUrl;\nfunction doDownload(filename, mesh) {\n  if (objectUrl) {\n    window.URL.revokeObjectURL(objectUrl);\n  }\n\n  const serializedMesh = BABYLON.SceneSerializer.SerializeMesh(mesh);\n\n  const strMesh = JSON.stringify(serializedMesh);\n\n  if (filename.toLowerCase().lastIndexOf(\".babylon\") !== filename.length - 8 || filename.length < 9) {\n    filename += \".babylon\";\n  }\n\n  const blob = new Blob([strMesh], { type: \"octet/stream\" });\n\n  BABYLON.Tools.Download(blob, filename);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Looping Animation in Babylon.js\nDESCRIPTION: Begins animation on a target object with the loop parameter set to true, causing the animation to repeat continuously according to its loop mode.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/animation/animation_method.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nscene.beginAnimation(target, from, to, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for Babylon.js Modules - JavaScript (JSON syntax)\nDESCRIPTION: Provides a snippet of tsconfig.json configuration to enable TypeScript support and type autocomplete for Babylon.js and its modules. The 'types' field ensures that the installed type definitions are correctly included in the TypeScript project. Structure may require adjustments to fit your project's existing tsconfig.json.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/setup/frameworkPackages/npmSupport.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"compilerOptions\": {\n        .....,\n        \"types\": [\n            \"babylonjs\",\n            \"babylonjs-gui\",\n            \"babylonjs-materials\"\n        ],\n        ...\n    },\n    ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: HTML Youtube Component\nDESCRIPTION: Example of how to embed a YouTube video in documentation\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/contributeToDocs/addToDocs.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Youtube id=\"qqMuuSM7GvI\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility Method in GUIColor\nDESCRIPTION: Method to check the current visibility state of the color picker element.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiColor.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: ImageAssetTask Constructor and Properties (Babylon.js, JavaScript)\nDESCRIPTION: Outlines constructor and primary output for an asset task that loads an image and provides it as an HTMLImageElement. After loading, enables access to native DOM image properties and methods. Suited for texture manipulation, previews, or further resource processing.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/importers/assetManager.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(name: string, url: string)\n\npublic url: string;\npublic image: HTMLImageElement;\n```\n\n----------------------------------------\n\nTITLE: NPM MeshWriter Configuration with Advanced Styling\nDESCRIPTION: Shows how to create text meshes using NPM-installed MeshWriter with detailed styling including font family, dimensions, and material colors.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/meshWriter.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet Writer = MeshWriter(this.scene, { scale: 0.25, defaultFont: \"Arial\" });\nlet textMesh = new Writer(\"Hello World\", {\n  \"font-family\": \"Arial\",\n  \"letter-height\": 30,\n  \"letter-thickness\": 12,\n  color: \"#1C3870\",\n  anchor: \"center\",\n  colors: {\n    diffuse: \"#F0F0F0\",\n    specular: \"#000000\",\n    ambient: \"#F0F0F0\",\n    emissive: \"#ff00f0\"\n  },\n  position: {\n    x: 0,\n    y: 10,\n    z: 0\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Disposing VideoDome Instance\nDESCRIPTION: Proper disposal of VideoDome instance ensuring texture resources are also cleaned up.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/environment/360VideoDome.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvideoDome.dispose(false, true);\n```\n\n----------------------------------------\n\nTITLE: Applying Diffuse Texture to Fur Material in Babylon.js\nDESCRIPTION: Applies a color texture to the fur material, allowing for more realistic fur patterns.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/assetLibraries/materialsLibrary/furMat.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.diffuseTexture = new BABYLON.Texture(\"leopard_fur.jpg\", scene); // Set the fur length with a texture.\n```\n\n----------------------------------------\n\nTITLE: Complete createInnerPoints Implementation\nDESCRIPTION: Full implementation of the mesh prototype method that generates multiple random points inside a mesh\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/InnerMeshPoints.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.Mesh.prototype.createInnerPoints = function(pointsNb) {\n\tvar boundInfo = this.getBoundingInfo();\n\tvar diameter = 2 * boundInfo.boundingSphere.radius;\n\tthis.updateFacetData();\n\n\tvar positions = this.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n\tvar indices = this.getIndices();\n\t\n\tvar point = BABYLON.Vector3.Zero();\n\tvar points = [];\n\tvar directions = [];\n\t\n\tvar randX = 0;\n\tvar randY = 0;\n\tvar randZ = 0\n\t\n\tvar index = 0;\n\tvar id0 = 0;\n\tvar id1 = 0; \n\tvar id2 = 0;\n\tvar v0X = 0;\n\tvar v0Y = 0;\n\tvar v0Z = 0;\n\tvar v1X = 0;\n\tvar v1Y = 0\n\tvar v1Z = 0;\n\tvar v2X = 0;\n\tvar v2Y = 0;\n\tvar v2Z = 0;\n\tvar vertex0 = BABYLON.Vector3.Zero();\n\tvar vertex1 = BABYLON.Vector3.Zero();\n\tvar vertex2 = BABYLON.Vector3.Zero();\n\tvar vec0 = BABYLON.Vector3.Zero();\n\tvar vec1 = BABYLON.Vector3.Zero();\n\t\t\n\tvar lamda = 0;\t\n\tvar mu = 0;\n\tvar norm = BABYLON.Vector3.Zero();\n\tvar tang = BABYLON.Vector3.Zero();\n\tvar biNorm = BABYLON.Vector3.Zero();\n\tvar angle = 0;\n\tvar facetPlaneVec = BABYLON.Vector3.Zero();\n\n\tvar gap = 0;\n\tvar distance = 0;\n\tvar ray = new BABYLON.Ray(BABYLON.Vector3.Zero(), BABYLON.AxisX);\n\tvar pickInfo;\n\tvar facetPoint = BABYLON.Vector3.Zero();\n\tvar direction = BABYLON.Vector3.Zero();\n\tvar particleDirection = BABYLON.Vector3.Zero();\n\tvar particleDistance = 0;\n\tvar testPoint = BABYLON.Vector3.Zero();\n\n\tfor(let p = 0; p <pointsNb; p++) {\t\t\t\n\t\tindex = Math.floor(BABYLON.Scalar.RandomRange(0, indices.length / 3));\t\t\n\t\tid0 = indices[3 * index];\n\t\tid1 = indices[3 * index + 1]; \n\t\tid2 = indices[3 * index + 2];\n\t\tv0X = positions[3 * id0];\n\t\tv0Y = positions[3 * id0 + 1];\n\t\tv0Z = positions[3 * id0 + 2];\n\t\tv1X = positions[3 * id1];\n\t\tv1Y = positions[3 * id1 + 1];\n\t\tv1Z = positions[3 * id1 + 2];\n\t\tv2X = positions[3 * id2];\n\t\tv2Y = positions[3 * id2 + 1];\n\t\tv2Z = positions[3 * id2 + 2];\n\t\tvertex0.set(v0X, v0Y, v0Z);\n\t\tvertex1.set(v1X, v1Y, v1Z);\n\t\tvertex2.set(v2X, v2Y, v2Z);\n\t\tvertex1.subtractToRef(vertex0, vec0);\n\t\tvertex2.subtractToRef(vertex1, vec1);\n\t\t\n\t\tnorm = this.getFacetNormal(index).normalize().scale(-1);\t\n\t\ttang = vec0.clone().normalize();\n\t\tbiNorm = BABYLON.Vector3.Cross(norm, tang);\n\t\tangle = BABYLON.Scalar.RandomRange(0, 2 * Math.PI);\n\t\tfacetPlaneVec = tang.scale(Math.cos(angle)).add(biNorm.scale(Math.sin(angle)));\n\t\tangle = BABYLON.Scalar.RandomRange(0.1, Math.PI);\n\t\tdirection = facetPlaneVec.scale(Math.cos(angle)).add(norm.scale(Math.sin(angle)));\n\t\t\n\t\tlamda = BABYLON.Scalar.RandomRange(0, 1);\t\n\t\tmu = BABYLON.Scalar.RandomRange(0, 1);\n\t\tfacetPoint = vertex0.add(vec0.scale(lamda)).add(vec1.scale(lamda * mu));\n\n\t\tgap = 0;\n\t\tdistance = 0;\n\t\tpickInfo;\t\n\t\tray.origin = facetPoint;\n\t\tray.direction = direction;\n\t\tray.length = diameter;\t\n\t\tpickInfo = ray.intersectsMesh(this);\t\n\t\tif (pickInfo.hit) {\t\t\t\n\t\t\tdistance = pickInfo.pickedPoint.subtract(facetPoint).length();\n\t\t\tgap = BABYLON.Scalar.RandomRange(0, 1) * distance;\n\t\t\tpoint = facetPoint.add(direction.scale(gap));\n\t\t}\n\t\telse {\n\t\t\tpoint.set(0, 0, 0);\n\t\t}\n\t\tpoints.push(point);\t\n\t}\n\t\n\treturn points;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Video Blob Handling\nDESCRIPTION: Shows how to prevent automatic file download and manually handle the video blob data.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/scene/renderToVideo.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (BABYLON.VideoRecorder.IsSupported(engine)) {\n    var recorder = new BABYLON.VideoRecorder(engine);\n    recorder.startRecording(null, 1).then((videoBlob) => {\n        // Do Something with the videoBlob.\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Vertex Function in BabylonJS Terrain\nDESCRIPTION: Enables the custom vertex function feature for dynamic terrain updates.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/dynamicTerrains.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nterrain.useCustomVertexFunction = true;\n```\n\n----------------------------------------\n\nTITLE: Transforming ObjectCloner Root in Babylon.js\nDESCRIPTION: Shows how to transform all clones simultaneously by modifying the root object's properties. This affects all clones as they are children of the root object.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/clonerSystem/objectCloner.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmc.root.scaling.y = 2;\nmc.root.rotation.x = Math.PI / 4;\n```\n\n----------------------------------------\n\nTITLE: Calculating Mesh Surface Area in Babylon.js\nDESCRIPTION: Two interconnected functions that calculate the total surface area of a mesh and individual facet areas. The surfaceArea function iterates through all facets to sum their areas, while facetArea calculates the area of a single triangular facet using vertex positions and cross products.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/utilities/area.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar surfaceArea = function(mesh) {\n    if (!mesh) {\n        return 0.0;\n    }\n    var ar = 0.0;\n    \n    var indices = mesh.getIndices();\n    var nbFaces = indices.length / 3;\n    \n    for (let i = 0; i < nbFaces; i++) {\n        ar = ar + facetArea(mesh, i);\n    }\n    return ar;\n};\n\nvar facetArea = function(mesh, faceId) {\n    if(!mesh) {\n        return 0.0;\n    }\n    var indices = mesh.getIndices();\n    if(faceId < 0 || faceId > nbFaces) {\n        return 0.0;\n    }\n    var nbFaces = indices.length / 3;\n    var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n    var v1x = 0.0;\n    var v1y = 0.0;\n    var v1z = 0.0;\n    var v2x = 0.0;\n    var v2y = 0.0;\n    var v2z = 0.0;\n    var crossx = 0.0;\n    var crossy = 0.0;\n    var crossz = 0.0;\n    var ar = 0.0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n\n    i1 = indices[faceId * 3];\n    i2 = indices[faceId * 3 + 1];\n    i3 = indices[faceId * 3 + 2];\n    v1x = positions[i1 * 3] - positions[i2 * 3];\n    v1y = positions[i1 * 3 + 1] - positions[i2 * 3 + 1];\n    v1z = positions[i1 * 3 + 2] - positions[i2 * 3 + 2];\n    v2x = positions[i3 * 3] - positions[i2 * 3];\n    v2y = positions[i3 * 3 + 1] - positions[i2 * 3 + 1];\n    v2z = positions[i3 * 3 + 2] - positions[i2 * 3 + 2];\n    crossx = v1y * v2z - v1z * v2y;\n    crossy = v1z * v2x - v1x * v2z;\n    crossz = v1x * v2y - v1y * v2x; \n\n    return Math.sqrt(crossx * crossx + crossy * crossy + crossz * crossz) * 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncCommand Helper Method Implementation\nDESCRIPTION: Implementation of the asyncCommand helper method that handles sending messages through the bus and awaiting responses. It creates a unique command ID and listens for the command completion message.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/Babylon.js+ExternalLibraries/BabylonJS_and_Vue/BabylonJS_and_Vue_4.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasyncCommand<T = any>(type: string, payload?: any): Promise<T> {\n  // Implementation not fully shown in the image\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Minimal Configuration in HTML\nDESCRIPTION: Example of forcing minimal configuration type using the extends attribute in HTML.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/features/featuresDeepDive/babylonViewer/v1/configuringViewer.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<babylon extends=\"minimal\" model=\"https://playground.babylonjs.com/scenes/Rabbit.babylon\"></babylon>\n```\n\n----------------------------------------\n\nTITLE: Including Touch Input Support - HTML Script\nDESCRIPTION: Adds the PEP (Pointer Events Polyfill) library to enable touch input detection alongside regular pointer events.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/guidedLearning/createAGame/crossPlatform.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://code.jquery.com/pep/0.4.3/pep.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Packages to Watch via Command Line (Shell)\nDESCRIPTION: These two examples demonstrate how to pass command-line arguments to specify which packages ('core', 'gui') should be watched by the development watcher ('watch:dev'). Option 1 extends the existing npm script, while Option 2 directly invokes the underlying 'build-tools' script.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/contribute/toBabylon/HowToContribute.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n# option 1, extend the npm run watch:dev command\nnpm run watch:dev -- --packages core,gui\n# option 2, run the dev watcher directly (watching sources and assets)\nnpx build-tools --command dev-watch --watch-assets --packages core,gui\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of GUISelect in BabylonJS\nDESCRIPTION: Returns whether the GUISelect element is currently visible or not. This method is useful for conditional logic based on the element's visibility state.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSelect.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nisVisible()\n```\n\n----------------------------------------\n\nTITLE: GUISlider Visibility Check Method\nDESCRIPTION: Method to check if the GUI slider element is currently visible.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/communityExtensions/castorGUI/guiSlider.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisVisible() → void\n```\n\n----------------------------------------\n\nTITLE: Enabling Embedded Mode Without ES Modules\nDESCRIPTION: Shows how to initialize the Inspector in embedded mode without ES Modules.\nSOURCE: https://github.com/babylonjs/documentation/blob/master/content/toolsAndResources/inspector.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.debugLayer.show({\n  embedMode: true,\n});\n```"
  }
]