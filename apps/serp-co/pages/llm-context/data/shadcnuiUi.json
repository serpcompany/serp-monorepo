[
  {
    "owner": "shadcn-ui",
    "repo": "ui",
    "content": "TITLE: Form Setup with React Hook Form\nDESCRIPTION: Implementation of form setup using useForm hook with Zod validation.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({ \n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n\n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // âœ… This will be type-safe and validated.\n    console.log(values)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTable Component with Row Selection in React\nDESCRIPTION: A React component that implements a data table with sorting, filtering, pagination, column visibility, and row selection functionality using React Table.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table />\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Global Styles (globals.css)\nDESCRIPTION: Configures global styles in the `globals.css` file, importing Tailwind CSS and tw-animate-css, defining custom variants for dark mode, and setting CSS variables for theming. The code block includes theme definitions for both light and dark modes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Form Implementation\nDESCRIPTION: Full example of a form implementation with all components and validation.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // ...\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"shadcn\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useToast Hook\nDESCRIPTION: How to import the useToast hook to display toast notifications in your components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToast } from \"@/hooks/use-toast\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection in React Table\nDESCRIPTION: This snippet shows how to add row selection functionality to the DataTable. It includes updating the column definitions to include a selection checkbox for each row and the header.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Form Structure with React Hook Form\nDESCRIPTION: Demonstrates the basic anatomy of a form using the Form and FormField components with React Hook Form.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <FormField\n    control={...}\n    name=\"...\"\n    render={() => (\n      <FormItem>\n        <FormLabel />\n        <FormControl>\n          { /* Your form field */}\n        </FormControl>\n        <FormDescription />\n        <FormMessage />\n      </FormItem>\n    )}\n  />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in React Table Component\nDESCRIPTION: This snippet shows how to add pagination to a DataTable component using @tanstack/react-table. It includes setting up the table instance with pagination model and adding pagination controls.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider in Next.js root layout\nDESCRIPTION: Demonstrates how to wrap the root layout with the ThemeProvider component. It also adds the suppressHydrationWarning prop to the html tag to prevent hydration warnings related to theme changes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider } from \"@/components/theme-provider\"\n\nexport default function RootLayout({ children }: RootLayoutProps) {\n  return (\n    <>\n      <html lang=\"en\" suppressHydrationWarning>\n        <head />\n        <body>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"system\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            {children}\n          </ThemeProvider>\n        </body>\n      </html>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtering in React Table Component\nDESCRIPTION: This snippet shows how to add filtering capabilities to the DataTable. It includes updating the table instance with column filters state and model, and adding a search input for email filtering.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn Project with CLI\nDESCRIPTION: Use the 'init' command to initialize configuration and dependencies for a new project. This command installs dependencies, adds the 'cn' util, and configures CSS variables.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining Slate Theme Color Variables in CSS\nDESCRIPTION: This CSS defines a complete color theme system with light and dark mode variables using the OKLCH color space. It includes variables for background, foreground, interactive elements (cards, popovers), state indicators (primary, secondary, accent), as well as specialized variables for charts and sidebar components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.129 0.042 264.695);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.129 0.042 264.695);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.129 0.042 264.695);\n  --primary: oklch(0.208 0.042 265.755);\n  --primary-foreground: oklch(0.984 0.003 247.858);\n  --secondary: oklch(0.968 0.007 247.896);\n  --secondary-foreground: oklch(0.208 0.042 265.755);\n  --muted: oklch(0.968 0.007 247.896);\n  --muted-foreground: oklch(0.554 0.046 257.417);\n  --accent: oklch(0.968 0.007 247.896);\n  --accent-foreground: oklch(0.208 0.042 265.755);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.929 0.013 255.508);\n  --input: oklch(0.929 0.013 255.508);\n  --ring: oklch(0.704 0.04 256.788);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.984 0.003 247.858);\n  --sidebar-foreground: oklch(0.129 0.042 264.695);\n  --sidebar-primary: oklch(0.208 0.042 265.755);\n  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);\n  --sidebar-accent: oklch(0.968 0.007 247.896);\n  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);\n  --sidebar-border: oklch(0.929 0.013 255.508);\n  --sidebar-ring: oklch(0.704 0.04 256.788);\n}\n\n.dark {\n  --background: oklch(0.129 0.042 264.695);\n  --foreground: oklch(0.984 0.003 247.858);\n  --card: oklch(0.208 0.042 265.755);\n  --card-foreground: oklch(0.984 0.003 247.858);\n  --popover: oklch(0.208 0.042 265.755);\n  --popover-foreground: oklch(0.984 0.003 247.858);\n  --primary: oklch(0.929 0.013 255.508);\n  --primary-foreground: oklch(0.208 0.042 265.755);\n  --secondary: oklch(0.279 0.041 260.031);\n  --secondary-foreground: oklch(0.984 0.003 247.858);\n  --muted: oklch(0.279 0.041 260.031);\n  --muted-foreground: oklch(0.704 0.04 256.788);\n  --accent: oklch(0.279 0.041 260.031);\n  --accent-foreground: oklch(0.984 0.003 247.858);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.551 0.027 264.364);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.208 0.042 265.755);\n  --sidebar-foreground: oklch(0.984 0.003 247.858);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);\n  --sidebar-accent: oklch(0.279 0.041 260.031);\n  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.551 0.027 264.364);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Column Visibility Control to React Table\nDESCRIPTION: This snippet demonstrates how to implement column visibility control in the DataTable. It includes updating the table instance with visibility state and adding a dropdown menu for toggling column visibility.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={table.getColumn(\"email\")?.getFilterValue() as string}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter(\n                (column) => column.getCanHide()\n              )\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Component to Layout\nDESCRIPTION: Code example showing how to integrate the Toaster component into the root layout of a React application, which is necessary to display toast notifications.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toaster } from \"@/components/ui/sonner\"\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head />\n      <body>\n        <main>{children}</main>\n        <Toaster />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ThemeProvider component in Next.js\nDESCRIPTION: Defines a ThemeProvider component that wraps the NextThemesProvider from next-themes. This component will be used to provide theme context to the application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting Functionality to React Table\nDESCRIPTION: This snippet demonstrates how to implement sorting in the DataTable component. It includes updating the table instance with sorting state and model, and making a header cell sortable.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ArrowUpDown } from \"lucide-react\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Data Type and Sample Data in TypeScript\nDESCRIPTION: Defines the Payment type and provides sample payment data for the table.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const payments: Payment[] = [\n  {\n    id: \"728ed52f\",\n    amount: 100,\n    status: \"pending\",\n    email: \"m@example.com\",\n  },\n  {\n    id: \"489e1d42\",\n    amount: 125,\n    status: \"processing\",\n    email: \"example@gmail.com\",\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable DataTable Component with TanStack Table\nDESCRIPTION: Implements a reusable DataTable component using TanStack Table and shadcn/ui Table components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui in Next.js Project\nDESCRIPTION: Command to create a new Next.js project or configure an existing one with shadcn/ui. This command launches an interactive setup process where you can choose between a standalone Next.js project or a Monorepo setup.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle Component\nDESCRIPTION: Creates a dropdown menu component for toggling between light, dark, and system themes. Includes animated icons and accessibility features.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moon, Sun } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"@/components/theme-provider\"\n\nexport function ModeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Content Paths\nDESCRIPTION: Tailwind configuration to include registry components in the build process.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// tailwind.config.ts\nexport default {\n  content: [\"./registry/**/*.{js,ts,jsx,tsx}\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Implementation\nDESCRIPTION: Example implementation of a theme selector using the Select component with Light, Dark, and System options.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Select>\n  <SelectTrigger className=\"w-[180px]\">\n    <SelectValue placeholder=\"Theme\" />\n  </SelectTrigger>\n  <SelectContent>\n    <SelectItem value=\"light\">Light</SelectItem>\n    <SelectItem value=\"dark\">Dark</SelectItem>\n    <SelectItem value=\"system\">System</SelectItem>\n  </SelectContent>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Using Drawer Component in React\nDESCRIPTION: Example of using the Drawer component with its sub-components in a React application. It demonstrates how to structure a drawer with a trigger, content, header, footer, and close button.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Drawer>\n  <DrawerTrigger>Open</DrawerTrigger>\n  <DrawerContent>\n    <DrawerHeader>\n      <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n      <DrawerDescription>This action cannot be undone.</DrawerDescription>\n    </DrawerHeader>\n    <DrawerFooter>\n      <Button>Submit</Button>\n      <DrawerClose>\n        <Button variant=\"outline\">Cancel</Button>\n      </DrawerClose>\n    </DrawerFooter>\n  </DrawerContent>\n</Drawer>\n```\n\n----------------------------------------\n\nTITLE: Style Configuration - JSON\nDESCRIPTION: Configuration for setting the component style theme. This setting cannot be changed after initialization.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"new-york\"\n}\n```\n\n----------------------------------------\n\nTITLE: Form Field Implementation Example\nDESCRIPTION: Shows a practical example of implementing a username form field with React Hook Form.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst form = useForm()\n\n<FormField\n  control={form.control}\n  name=\"username\"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Username</FormLabel>\n      <FormControl>\n        <Input placeholder=\"shadcn\" {...field} />\n      </FormControl>\n      <FormDescription>This is your public display name.</FormDescription>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Provider Context in React\nDESCRIPTION: Implements a ThemeProvider component using React Context to manage theme state (dark/light/system) with local storage persistence. Includes a custom hook useTheme for accessing theme context throughout the application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Column Definitions for Payment Data Table\nDESCRIPTION: Creates column definitions for the Payment data table using TanStack Table's ColumnDef.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"amount\",\n    header: \"Amount\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Chart Configuration with Icons in TypeScript\nDESCRIPTION: This snippet shows an advanced chart configuration object that includes labels, icons, and theme-specific colors. It demonstrates how to use the ChartConfig type for type safety.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Monitor } from \"lucide-react\"\n\nimport { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    icon: Monitor,\n    // A color like 'hsl(220, 98%, 61%)' or 'var(--color-name)'\n    color: \"#2563eb\",\n    // OR a theme object with 'light' and 'dark' keys\n    theme: {\n      light: \"#2563eb\",\n      dark: \"#dc2626\",\n    },\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Component in React\nDESCRIPTION: This example demonstrates how to use the Tabs component in a React application, creating a tabbed interface with 'Account' and 'Password' sections.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs defaultValue=\"account\" className=\"w-[400px]\">\n  <TabsList>\n    <TabsTrigger value=\"account\">Account</TabsTrigger>\n    <TabsTrigger value=\"password\">Password</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"account\">Make changes to your account here.</TabsContent>\n  <TabsContent value=\"password\">Change your password here.</TabsContent>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Navigation Menu in React\nDESCRIPTION: Example of how to use the Navigation Menu components to create a basic menu structure.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenu>\n  <NavigationMenuList>\n    <NavigationMenuItem>\n      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n      <NavigationMenuContent>\n        <NavigationMenuLink>Link</NavigationMenuLink>\n      </NavigationMenuContent>\n    </NavigationMenuItem>\n  </NavigationMenuList>\n</NavigationMenu>\n```\n\n----------------------------------------\n\nTITLE: Framework Integration Cards Component in JSX\nDESCRIPTION: A React component that displays a grid of linked cards showing different framework integration options. Each card contains an SVG icon and framework name using Tailwind CSS for styling.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid sm:grid-cols-2 gap-4 mt-8 sm:gap-6\">\n  <LinkedCard href=\"/docs/installation/next\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Next.js</title>\n      <path d=\"M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Next.js</p>\n  </LinkedCard>\n  <!-- Additional framework cards omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Persisted Sidebar State in Next.js\nDESCRIPTION: Shows how to set up the SidebarProvider in a Next.js application to persist the sidebar state across page reloads using cookies. This example is typically placed in the app/layout.tsx file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookies } from \"next/headers\"\n\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { AppSidebar } from \"@/components/app-sidebar\"\n\nexport async function Layout({ children }: { children: React.ReactNode }) {\n  const cookieStore = await cookies()\n  const defaultOpen = cookieStore.get(\"sidebar_state\")?.value === \"true\"\n\n  return (\n    <SidebarProvider defaultOpen={defaultOpen}>\n      <AppSidebar />\n      <main>\n        <SidebarTrigger />\n        {children}\n      </main>\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ThemeProvider in Root Layout\nDESCRIPTION: Shows how to wrap the application's root component with the ThemeProvider, setting default theme and storage key configurations.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider } from \"@/components/theme-provider\"\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" storageKey=\"vite-ui-theme\">\n      {children}\n    </ThemeProvider>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Configuring Components JSON Schema\nDESCRIPTION: Configuration file showing the updated components.json structure with import aliases for components, utils, UI, lib and hooks\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"tailwind\": {\n    // ...\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Controls to DataTable\nDESCRIPTION: Implementation of pagination controls in a DataTable using the DataTablePagination component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<DataTablePagination table={table} />\n```\n\n----------------------------------------\n\nTITLE: Command Dialog Menu Implementation - TypeScript React\nDESCRIPTION: Implementation of a command menu in a dialog with keyboard shortcut (Cmd/Ctrl + K) to toggle visibility\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Bar Chart with Grid, Axis, Tooltip, and Legend in TypeScript\nDESCRIPTION: This comprehensive example demonstrates how to create a fully-featured bar chart using Recharts and custom components. It includes a grid, x-axis, tooltip, and legend.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\n\n<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <ChartTooltip content={<ChartTooltipContent />} />\n    <ChartLegend content={<ChartLegendContent />} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Root CSS Variables Definition\nDESCRIPTION: Complete list of CSS custom properties defining the theme variables for both light and dark modes\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Column Visibility Toggle to DataTable\nDESCRIPTION: Implementation of a column visibility toggle in a DataTable using the DataTableViewOptions component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<DataTableViewOptions table={table} />\n```\n\n----------------------------------------\n\nTITLE: Updated CSS Variables with Inline Theme\nDESCRIPTION: Demonstrates the updated CSS variable configuration using @theme inline directive and HSL color values.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 3.9%);\n}\n\n.dark {\n  --background: hsl(0 0% 3.9%);\n  --foreground: hsl(0 0% 98%);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Path Aliases (tsconfig.json)\nDESCRIPTION: Configures the path aliases in the `tsconfig.json` file, setting the base URL and defining an alias `@/*` to point to the root directory.  This allows for cleaner imports.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mode Toggle Component in React\nDESCRIPTION: This snippet shows the implementation of a ModeToggle component using React. It uses a dropdown menu to allow users to switch between light, dark, and system themes, and updates the document's class list accordingly.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function ModeToggle() {\n  const [theme, setThemeState] = React.useState<\n    \"theme-light\" | \"dark\" | \"system\"\n  >(\"theme-light\")\n\n  React.useEffect(() => {\n    const isDarkMode = document.documentElement.classList.contains(\"dark\")\n    setThemeState(isDarkMode ? \"dark\" : \"theme-light\")\n  }, [])\n\n  React.useEffect(() => {\n    const isDark =\n      theme === \"dark\" ||\n      (theme === \"system\" &&\n        window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n    document.documentElement.classList[isDark ? \"add\" : \"remove\"](\"dark\")\n  }, [theme])\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setThemeState(\"theme-light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setThemeState(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setThemeState(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Card Component Usage\nDESCRIPTION: Example showing the basic structure of a card component with header, content, and footer sections\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Initial CSS Variables Configuration\nDESCRIPTION: Shows the initial CSS variable setup with @layer base and @theme directives for managing color themes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n  }\n}\n\n@theme {\n  --color-background: hsl(var(--background));\n  --color-foreground: hsl(var(--foreground));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Menu Implementation - TypeScript React\nDESCRIPTION: Example of implementing a basic command menu with groups, items, and separators\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Theme Script in Astro\nDESCRIPTION: This snippet demonstrates how to create an inline script in Astro to handle theme preferences. It checks localStorage and system preferences to set the initial theme, and observes changes to update localStorage accordingly.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#2025-04-21_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport '../styles/globals.css'\n---\n\n<script is:inline>\n\tconst getThemePreference = () => {\n\t\tif (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {\n\t\t\treturn localStorage.getItem('theme');\n\t\t}\n\t\treturn window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n\t};\n\tconst isDark = getThemePreference() === 'dark';\n\tdocument.documentElement.classList[isDark ? 'add' : 'remove']('dark');\n\n\tif (typeof localStorage !== 'undefined') {\n\t\tconst observer = new MutationObserver(() => {\n\t\t\tconst isDark = document.documentElement.classList.contains('dark');\n\t\t\tlocalStorage.setItem('theme', isDark ? 'dark' : 'light');\n\t\t});\n\t\tobserver.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });\n\t}\n</script>\n\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Neutral Theme Colors in OKLCH\nDESCRIPTION: CSS variables defining the Neutral color theme using OKLCH color space. Provides color definitions for both light and dark modes with a more neutral color palette.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.205 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.205 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.922 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.556 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.556 0 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Carousel API for Slide Counter\nDESCRIPTION: Example showing how to access and use the Carousel API to implement a slide counter that updates as the carousel navigates.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type CarouselApi } from \"@/components/ui/carousel\"\n\nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>()\n  const [current, setCurrent] = React.useState(0)\n  const [count, setCount] = React.useState(0)\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    setCount(api.scrollSnapList().length)\n    setCurrent(api.selectedScrollSnap() + 1)\n\n    api.on(\"select\", () => {\n      setCurrent(api.selectedScrollSnap() + 1)\n    })\n  }, [api])\n\n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Create cn Helper (utils.ts)\nDESCRIPTION: Creates a utility function `cn` using `clsx` and `tailwind-merge` to simplify class name handling in React components. It accepts multiple class name inputs and merges them.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Sidebar with Navigation Menu\nDESCRIPTION: A comprehensive implementation of a sidebar with a navigation menu using SidebarMenu and related components. The example includes icon integration and a responsive design that supports collapsing.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Calendar, Home, Inbox, Search, Settings } from \"lucide-react\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n\n// Menu items.\nconst items = [\n  {\n    title: \"Home\",\n    url: \"#\",\n    icon: Home,\n  },\n  {\n    title: \"Inbox\",\n    url: \"#\",\n    icon: Inbox,\n  },\n  {\n    title: \"Calendar\",\n    url: \"#\",\n    icon: Calendar,\n  },\n  {\n    title: \"Search\",\n    url: \"#\",\n    icon: Search,\n  },\n  {\n    title: \"Settings\",\n    url: \"#\",\n    icon: Settings,\n  },\n]\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Application</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild>\n                    <a href={item.url}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with Outline Variant\nDESCRIPTION: Example of using the Button component with the outline variant in a TypeScript React file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button variant=\"outline\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Menu Implementation\nDESCRIPTION: Example of implementing a basic dropdown menu with label, separator, and menu items\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>Profile</DropdownMenuItem>\n    <DropdownMenuItem>Billing</DropdownMenuItem>\n    <DropdownMenuItem>Team</DropdownMenuItem>\n    <DropdownMenuItem>Subscription</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\n```\n\n----------------------------------------\n\nTITLE: Importing Command Components - TypeScript React\nDESCRIPTION: Import statement for all command-related components from the UI library\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@/components/ui/command\"\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible SidebarMenu\nDESCRIPTION: Shows how to implement a collapsible sidebar menu with sub-items and content.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarMenu>\n  <Collapsible defaultOpen className=\"group/collapsible\">\n    <SidebarMenuItem>\n      <CollapsibleTrigger asChild>\n        <SidebarMenuButton />\n      </CollapsibleTrigger>\n      <CollapsibleContent>\n        <SidebarMenuSub>\n          <SidebarMenuSubItem />\n        </SidebarMenuSub>\n      </CollapsibleContent>\n    </SidebarMenuItem>\n  </Collapsible>\n</SidebarMenu>\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Implementation\nDESCRIPTION: Basic example of implementing a Dialog component with title and description.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <DialogTrigger>Open</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </DialogDescription>\n    </DialogHeader>\n  </DialogContent>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable in a Next.js Page Component\nDESCRIPTION: Demonstrates how to fetch data and render the DataTable component in a Next.js page.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Payment, columns } from \"./columns\"\nimport { DataTable } from \"./data-table\"\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n\nexport default async function DemoPage() {\n  const data = await getData()\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTable columns={columns} data={data} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slider Component in React\nDESCRIPTION: Example of how to use the Slider component in a React component, setting default value, maximum value, and step.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider defaultValue={[33]} max={100} step={1} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Date Picker Component in React\nDESCRIPTION: A React component that implements a date picker using Popover and Calendar components. The component uses date-fns for date formatting and includes a button trigger with calendar icon. It maintains selected date state and renders a calendar in a popover interface.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/date-picker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing a Combobox Dropdown with React and shadcn/ui Components\nDESCRIPTION: This snippet demonstrates how to create a framework selection combobox by combining Popover and Command components. It maintains an open state and selected value in React state, displays the selected framework label in the trigger button, and renders a filterable list of framework options in the dropdown.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/combobox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog with Context Menu Integration\nDESCRIPTION: Example showing how to integrate Dialog with Context Menu components, including proper nesting and deletion confirmation.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <ContextMenu>\n    <ContextMenuTrigger>Right click</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Open</ContextMenuItem>\n      <ContextMenuItem>Download</ContextMenuItem>\n      <DialogTrigger asChild>\n        <ContextMenuItem>\n          <span>Delete</span>\n        </ContextMenuItem>\n      </DialogTrigger>\n    </ContextMenuContent>\n  </ContextMenu>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. Are you sure you want to permanently\n        delete this file from our servers?\n      </DialogDescription>\n    </DialogHeader>\n    <DialogFooter>\n      <Button type=\"submit\">Confirm</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Components with JSX for Navigation\nDESCRIPTION: This snippet demonstrates the use of Button components from shadcn/ui for navigation, including styling with Tailwind classes and external links.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex gap-2 items-center mt-6\">\n  <Button asChild size=\"sm\" className=\"rounded-lg\">\n    <a href=\"#try-it-out\">Get Started</a>\n  </Button>\n  <Button asChild size=\"sm\" variant=\"outline\" className=\"rounded-lg\">\n    <a href=\"https://v4.shadcn.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n      See Demo\n    </a>\n  </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using ScrollArea Component\nDESCRIPTION: Example implementation of the ScrollArea component with custom styling and content.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and leaving\n  jokes all over the place: under the king's pillow, in his soup, even in the\n  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n  then, one day, the people of the kingdom discovered that the jokes left by\n  Jokester were so funny that they couldn't help but laugh. And once they\n  started laughing, they couldn't stop.\n</ScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Adding Row Actions to DataTable with Dropdown Menu\nDESCRIPTION: Enhances the table by adding a new column for row actions using a dropdown menu component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { MoreHorizontal } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Chart Colors\nDESCRIPTION: This snippet demonstrates how to define CSS variables for chart colors in both light and dark modes. It sets up custom colors for different chart elements.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    // ...\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n  }\n\n  .dark: {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 100%;\n    // ...\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Layout with Sidebar Provider Setup\nDESCRIPTION: Setting up the main application layout with SidebarProvider and SidebarTrigger. This creates the foundation for the sidebar implementation in the application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\nimport { AppSidebar } from \"@/components/app-sidebar\"\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <main>\n        <SidebarTrigger />\n        {children}\n      </main>\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Colors with CSS Variables\nDESCRIPTION: This code shows how to use CSS variables in the chartConfig object to set colors for different chart elements. It demonstrates the usage of hsl() function with CSS variables.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Base Config\nDESCRIPTION: TypeScript configuration for base tsconfig.json file with path aliases\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.app.json\"\n    },\n    {\n      \"path\": \"./tsconfig.node.json\"\n    }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Installation Command\nDESCRIPTION: Command to install the form component using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add form\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle Component\nDESCRIPTION: Creates a dropdown menu component for toggling between light and dark themes with animated icons.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moon, Sun } from \"lucide-react\"\nimport { Theme, useTheme } from \"remix-themes\"\n\nimport { Button } from \"./ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"./ui/dropdown-menu\"\n\nexport function ModeToggle() {\n  const [, setTheme] = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(Theme.LIGHT)}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(Theme.DARK)}>\n          Dark\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarMenuAction with DropdownMenu\nDESCRIPTION: Demonstrates how to create a sidebar menu action with a dropdown menu for additional options.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarMenuItem>\n  <SidebarMenuButton asChild>\n    <a href=\"#\">\n      <Home />\n      <span>Home</span>\n    </a>\n  </SidebarMenuButton>\n  <DropdownMenu>\n    <DropdownMenuTrigger asChild>\n      <SidebarMenuAction>\n        <MoreHorizontal />\n      </SidebarMenuAction>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent side=\"right\" align=\"start\">\n      <DropdownMenuItem>\n        <span>Edit Project</span>\n      </DropdownMenuItem>\n      <DropdownMenuItem>\n        <span>Delete Project</span>\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</SidebarMenuItem>\n```\n\n----------------------------------------\n\nTITLE: Importing and using a shadcn/ui component in React\nDESCRIPTION: This code snippet demonstrates how to import and use the Switch component from shadcn/ui in a React component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from \"@/components/ui/switch\"\n\nconst MyPage = () => {\n  return (\n    <div>\n      <Switch />\n    </div>\n  )\n}\n\nexport default MyPage\n```\n\n----------------------------------------\n\nTITLE: Creating Sidebar Footer with User Dropdown in TypeScript React\nDESCRIPTION: Shows how to implement a Sidebar footer with a user dropdown menu using SidebarFooter, SidebarMenu, and DropdownMenu components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  return (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader />\n        <SidebarContent />\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton>\n                    <User2 /> Username\n                    <ChevronUp className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  side=\"top\"\n                  className=\"w-[--radix-popper-anchor-width]\"\n                >\n                  <DropdownMenuItem>\n                    <span>Account</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Billing</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Sign out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n      </Sidebar>\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Width with CSS Variables in TypeScript React\nDESCRIPTION: Demonstrates how to set custom sidebar widths using CSS variables within the SidebarProvider component. This allows for flexible width settings for both desktop and mobile views.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarProvider\n  style={{\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-mobile\": \"20rem\",\n  }}\n>\n  <Sidebar />\n</SidebarProvider>\n```\n\n----------------------------------------\n\nTITLE: Customizing Sheet Size with CSS Classes\nDESCRIPTION: Example showing how to customize the width of the Sheet component using CSS classes, with responsive behavior for different screen sizes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent className=\"w-[400px] sm:w-[540px]\">\n    <SheetHeader>\n      <SheetTitle>Are you absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation\nDESCRIPTION: Example showing basic pagination implementation with previous button, page number, ellipsis, and next button.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious href=\"#\" />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\">1</PaginationLink>\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationNext href=\"#\" />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Dependencies with shadcn CLI\nDESCRIPTION: This command initializes dependencies for a new project using shadcn. It installs required packages, adds the 'cn' util, configures tailwind.config.js, and sets up CSS variables.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn init\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Size Utility Migration\nDESCRIPTION: Shows how to migrate from separate width/height utilities to the new consolidated size utility in Tailwind v3.4\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- w-4 h-4\n+ size-4\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Component in React JSX\nDESCRIPTION: Example of how to use the tooltip component in a React application, showing the structure and nested components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger>Hover</TooltipTrigger>\n    <TooltipContent>\n      <p>Add to library</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Item Files in JSON\nDESCRIPTION: Shows how to specify the files property for a registry item, including path, type, and optional target for each file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\n    {\n      \"path\": \"registry/new-york/hello-world/page.tsx\",\n      \"type\": \"registry:page\",\n      \"target\": \"app/hello/page.tsx\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/hello-world.tsx\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/use-hello-world.ts\",\n      \"type\": \"registry:hook\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/.env\",\n      \"type\": \"registry:file\",\n      \"target\": \"~/.env\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Header with Sorting in DataTable\nDESCRIPTION: Example of implementing a sortable and hideable column header in a DataTable by using a DataTableColumnHeader component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nexport const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Controlled Sidebar Implementation\nDESCRIPTION: Example of implementing a controlled sidebar using React state management.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <SidebarProvider open={open} onOpenChange={setOpen}>\n      <Sidebar />\n    </SidebarProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Table Component in React\nDESCRIPTION: Example of how to use the Table component to create a simple table with header, body, and caption.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Table>\n  <TableCaption>A list of your recent invoices.</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className=\"w-[100px]\">Invoice</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Method</TableHead>\n      <TableHead className=\"text-right\">Amount</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell className=\"font-medium\">INV001</TableCell>\n      <TableCell>Paid</TableCell>\n      <TableCell>Credit Card</TableCell>\n      <TableCell className=\"text-right\">$250.00</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: CLI Initialization Command\nDESCRIPTION: Command to initialize shadcn-ui components in a project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Basic Horizontal Panel Implementation\nDESCRIPTION: Demonstrates the basic setup of a horizontal resizable panel group with two panels and a handle.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ResizablePanelGroup direction=\"horizontal\">\n  <ResizablePanel>One</ResizablePanel>\n  <ResizableHandle />\n  <ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>\n```\n\n----------------------------------------\n\nTITLE: Utility Classes Example in TSX\nDESCRIPTION: Demonstration of using utility classes for dark mode theming\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-zinc-950 dark:bg-white\" />\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Component in React JSX\nDESCRIPTION: This example demonstrates how to use the Avatar component in a React application, including the image source and fallback text.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar>\n  <AvatarImage src=\"https://github.com/shadcn.png\" />\n  <AvatarFallback>CN</AvatarFallback>\n</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Integrating Carousel Plugins\nDESCRIPTION: Example showing how to add plugins to the carousel component, specifically using the Autoplay plugin to auto-advance slides.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport Autoplay from \"embla-carousel-autoplay\"\n\nexport function Example() {\n  return (\n    <Carousel\n      plugins={[\n        Autoplay({\n          delay: 2000,\n        }),\n      ]}\n    >\n      // ...\n    </Carousel>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hover Card Components in React\nDESCRIPTION: Example usage of the Hover Card component in a React application, demonstrating the trigger and content structure.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<HoverCard>\n  <HoverCardTrigger>Hover</HoverCardTrigger>\n  <HoverCardContent>\n    The React Framework â€“ created and maintained by @vercel.\n  </HoverCardContent>\n</HoverCard>\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component in Breadcrumb\nDESCRIPTION: Using a custom Link component from a routing library (Next.js) with the breadcrumb by leveraging the asChild prop on BreadcrumbLink. The highlighted lines show the import and implementation.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"next/link\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink asChild>\n        <Link href=\"/\">Home</Link>\n      </BreadcrumbLink>\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Adding Chart Colors to CSS for Light and Dark Themes\nDESCRIPTION: This CSS snippet defines color variables for charts in both light and dark themes. It uses HSL color values for flexibility and theming.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies Command\nDESCRIPTION: Command to update Radix UI, cmdk, lucide-react, recharts, tailwind-merge, and clsx packages to their latest versions\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm up \"@radix-ui/*\" cmdk lucide-react recharts tailwind-merge clsx --latest\n```\n\n----------------------------------------\n\nTITLE: Importing Card Components\nDESCRIPTION: Import statement for all card-related components including Card, CardContent, CardDescription, CardFooter, CardHeader, and CardTitle\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Context Menu\nDESCRIPTION: Example implementation of a basic context menu with multiple menu items including Profile, Billing, Team, and Subscription options.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>\n```\n\n----------------------------------------\n\nTITLE: Using shadcn/ui Button Component in Next.js\nDESCRIPTION: Example of importing and using the Button component in a Next.js page component. Shows the basic implementation of the Button component within a div element.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessible Card Title and Description Implementation\nDESCRIPTION: Updated implementation of CardTitle and CardDescription components using div elements for better accessibility\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Collapsible Sidebar in TypeScript React\nDESCRIPTION: Demonstrates how to use the 'collapsible' prop to make the Sidebar collapsible. Options include 'offcanvas', 'icon', and 'none'.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  return <Sidebar collapsible=\"offcanvas | icon | none\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Animations\nDESCRIPTION: Configuration for adding accordion animation keyframes and utility classes to Tailwind CSS config file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Usage\nDESCRIPTION: Example of using the Badge component with outline variant.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Badge variant=\"outline\">Badge</Badge>\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Framework Selection Component\nDESCRIPTION: A React component that displays a grid of linked cards for different framework options, each with an SVG icon and framework name. The component uses flexbox grid layout with responsive columns.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid sm:grid-cols-2 gap-4 sm:gap-6\">\n  <LinkedCard href=\"/docs/dark-mode/next\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Next.js</title>\n      <path d=\"M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Next.js</p>\n  </LinkedCard>\n  <!-- Similar cards for Vite, Astro, and Remix -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Command Item Styling Update - TypeScript React\nDESCRIPTION: Updated styling configuration for CommandItem component to handle icons\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"... gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n```\n\n----------------------------------------\n\nTITLE: Custom Separator Implementation in Breadcrumb\nDESCRIPTION: Example of using a custom separator (Slash icon) in a breadcrumb component. The highlighted lines show the import and implementation of the custom separator.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slash } from \"lucide-react\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator>\n      <Slash />\n    </BreadcrumbSeparator>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sheet Component with Radix UI in TypeScript React\nDESCRIPTION: A comprehensive Sheet component implementation using Radix UI Dialog primitives. Includes customizable positioning, animations, and styling with class-variance-authority. Provides subcomponents for header, footer, content, and description with proper TypeScript typing.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = ({\n  className,\n  ...props\n}: SheetPrimitive.DialogPortalProps) => (\n  <SheetPrimitive.Portal className={cn(className)} {...props} />\n)\nSheetPortal.displayName = SheetPrimitive.Portal.displayName\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n```\n\n----------------------------------------\n\nTITLE: Import Aliases Configuration - JSON\nDESCRIPTION: Configuration for various import aliases including utils, components, UI, lib, and hooks.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"utils\": \"@/lib/utils\",\n    \"components\": \"@/components\",\n    \"ui\": \"@/app/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Chart Component with TypeScript and React\nDESCRIPTION: This snippet demonstrates how to create a basic chart component using Recharts and custom components. It shows the structure and key elements needed for a functional chart.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bar, BarChart } from \"recharts\"\n\nimport { ChartContainer, ChartTooltipContent } from \"@/components/ui/charts\"\n\nexport function MyChart() {\n  return (\n    <ChartContainer>\n      <BarChart data={data}>\n        <Bar dataKey=\"value\" />\n        <ChartTooltip content={<ChartTooltipContent />} />\n      </BarChart>\n    </ChartContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Component Addition Command\nDESCRIPTION: Command to add new shadcn-ui components to the project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Implementation\nDESCRIPTION: Basic structure of the carousel component with content, items, and navigation buttons.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n  <CarouselPrevious />\n  <CarouselNext />\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Configuration in components.json\nDESCRIPTION: Configuration for enabling CSS variables-based theming with neutral as base color\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tailwind\": {\n    \"config\": \"\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/registry/new-york-v4/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Width Constants in TypeScript React\nDESCRIPTION: Defines constants for sidebar width in desktop and mobile views. These variables can be used to set the width of the sidebar component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\n```\n\n----------------------------------------\n\nTITLE: Custom Handle Implementation\nDESCRIPTION: Shows how to implement a resizable panel group with a visible handle using the withHandle prop.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\"\n\nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"horizontal\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Amount Cell in DataTable Columns\nDESCRIPTION: Updates the column definition to format the amount cell as a currency value and align it to the right.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"amount\"))\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount)\n\n      return <div className=\"text-right font-medium\">{formatted}</div>\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Components with shadcn CLI\nDESCRIPTION: Use the 'add' command to add components and dependencies to your project. This command allows you to specify which components to add.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add [component]\n```\n\n----------------------------------------\n\nTITLE: Using Button Variants with Link Component\nDESCRIPTION: Example of using the buttonVariants helper with a Link component to create a button-like link.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Link className={buttonVariants({ variant: \"outline\" })}>Click here</Link>\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Component in TypeScript\nDESCRIPTION: Example of a simple React component using the Button component from shadcn-ui.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport function HelloWorld() {\n  return <Button>Hello World</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component Dependencies via CLI\nDESCRIPTION: Command to install the Button component using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Data and Configuration in TypeScript\nDESCRIPTION: This snippet shows how to define chart data and configuration objects in TypeScript. It includes sample data for a bar chart and a configuration object with labels and colors.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartData = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nimport { type ChartConfig } from \"@/components/ui/chart\"\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"#2563eb\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"#60a5fa\",\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Implementation\nDESCRIPTION: Demonstrates the basic usage of the Textarea component with minimal configuration\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Textarea />\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Keyboard Shortcut in TypeScript React\nDESCRIPTION: Defines a constant for the keyboard shortcut used to toggle the sidebar. This can be customized to change the default shortcut (cmd+b on Mac, ctrl+b on Windows).\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Legend with Data Keys\nDESCRIPTION: This snippet demonstrates how to customize the chart legend by specifying a custom key for names in the legend content.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartLegend content={<ChartLegendContent nameKey=\"browser\" />} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Rows Count in DataTable\nDESCRIPTION: A React component that displays the count of selected rows in a DataTable using the table.getFilteredSelectedRowModel() API.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex-1 text-sm text-muted-foreground\">\n  {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n  {table.getFilteredRowModel().rows.length} row(s) selected.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Badge-Styled Link\nDESCRIPTION: Example of creating a link that uses badge styling using the badgeVariants helper.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>\n```\n\n----------------------------------------\n\nTITLE: Input OTP with Separator\nDESCRIPTION: Example showing how to implement Input OTP with a custom separator between input groups.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n\n...\n\n<InputOTP maxLength={4}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={2} />\n    <InputOTPSlot index={3} />\n  </InputOTPGroup>\n</InputOTP>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Root\nDESCRIPTION: Adding Tailwind CSS imports to the Remix root file\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport styles from \"./tailwind.css?url\"\n\nexport const links: LinksFunction = () => [\n  { rel: \"stylesheet\", href: styles },\n  ...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React\nDESCRIPTION: Example of how to import the Slider component in a React file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from \"@/components/ui/slider\"\n```\n\n----------------------------------------\n\nTITLE: Using Aspect Ratio Component with Next.js Image\nDESCRIPTION: Example of how to use the Aspect Ratio component to wrap a Next.js Image component with a 16:9 aspect ratio.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"w-[450px]\">\n  <AspectRatio ratio={16 / 9}>\n    <Image src=\"...\" alt=\"Image\" className=\"rounded-md object-cover\" />\n  </AspectRatio>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with ThemeProvider\nDESCRIPTION: Implements the root layout component with ThemeProvider integration, including theme loading and flash prevention.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport clsx from \"clsx\"\nimport { PreventFlashOnWrongTheme, ThemeProvider, useTheme } from \"remix-themes\"\n\nimport { themeSessionResolver } from \"./sessions.server\"\n\n// Return the theme from the session storage using the loader\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const { getTheme } = await themeSessionResolver(request)\n  return {\n    theme: getTheme(),\n  }\n}\n// Wrap your app with ThemeProvider.\n// `specifiedTheme` is the stored theme in the session storage.\n// `themeAction` is the action name that's used to change the theme in the session storage.\nexport default function AppWithProviders() {\n  const data = useLoaderData<typeof loader>()\n  return (\n    <ThemeProvider specifiedTheme={data.theme} themeAction=\"/action/set-theme\">\n      <App />\n    </ThemeProvider>\n  )\n}\n\nexport function App() {\n  const data = useLoaderData<typeof loader>()\n  const [theme] = useTheme()\n  return (\n    <html lang=\"en\" className={clsx(theme)}>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <PreventFlashOnWrongTheme ssrTheme={Boolean(data.theme)} />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Side in TypeScript React\nDESCRIPTION: Shows how to use the 'side' prop to set the position of the Sidebar component. The side can be either 'left' or 'right'.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  return <Sidebar side=\"left | right\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chart Legend\nDESCRIPTION: This code shows how to import and use custom ChartLegend and ChartLegendContent components for creating legends in charts.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartLegend content={<ChartLegendContent />} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Components for v0 Interface in JSX\nDESCRIPTION: This code snippet demonstrates how to render image components for the v0 interface, including separate images for light and dark modes, wrapped in a link to the Vercel signup page.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/v0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"https://vercel.com/signup?utm_source=shad&utm_medium=web&utm_campaign=docs_cta_signup\">\n  <Image\n    src=\"/images/open-in-v0.png\"\n    width=\"716\"\n    height=\"420\"\n    alt=\"Open in v0\"\n    className=\"border dark:hidden shadow-sm rounded-lg overflow-hidden mt-6 w-full\"\n  />\n  <Image\n    src=\"/images/open-in-v0-dark.png\"\n    width=\"716\"\n    height=\"420\"\n    alt=\"Open in v0\"\n    className=\"border hidden dark:block shadow-sm rounded-lg overflow-hidden mt-6 w-full\"\n  />\n  <span class=\"sr-only\">Open in v0</span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Structuring Sidebar Content in TypeScript React\nDESCRIPTION: Demonstrates how to use the SidebarContent component to wrap the main content of the Sidebar, including multiple SidebarGroup components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar, SidebarContent } from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup />\n        <SidebarGroup />\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collapsible Component\nDESCRIPTION: Example showing how to implement the Collapsible component with a trigger and content. The trigger acts as a button that toggles the visibility of the content.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Collapsible>\n  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n  <CollapsibleContent>\n    Yes. Free to use for personal and commercial projects. No attribution\n    required.\n  </CollapsibleContent>\n</Collapsible>\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Session Storage\nDESCRIPTION: Sets up session storage and theme session resolver for managing theme state using cookies with configurable production settings.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThemeSessionResolver } from \"remix-themes\"\n\n// You can default to 'development' if process.env.NODE_ENV is not set\nconst isProduction = process.env.NODE_ENV === \"production\"\n\nconst sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"theme\",\n    path: \"/\",\n    httpOnly: true,\n    sameSite: \"lax\",\n    secrets: [\"s3cr3t\"],\n    // Set domain and secure only if in production\n    ...(isProduction\n      ? { domain: \"your-production-domain.com\", secure: true }\n      : {}),\n  },\n})\n\nexport const themeSessionResolver = createThemeSessionResolver(sessionStorage)\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component Styles\nDESCRIPTION: Example of adding new classes to the Button component's cva call for automatic icon styling.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst buttonVariants = cva(\n  \"inline-flex ... gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Group Implementation\nDESCRIPTION: Example of implementing a basic radio group with two options using the RadioGroup and RadioGroupItem components\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup defaultValue=\"option-one\">\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-one\" id=\"option-one\" />\n    <Label htmlFor=\"option-one\">Option One</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-two\" id=\"option-two\" />\n    <Label htmlFor=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework Options with SVG Icons in HTML\nDESCRIPTION: This code snippet displays a grid of framework options for shadcn-ui installation. Each option is represented by an SVG icon and a label, wrapped in a linked card component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid sm:grid-cols-2 gap-4 mt-8 sm:gap-6\">\n  <LinkedCard href=\"/docs/installation/next\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Next.js</title>\n      <path d=\"M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Next.js</p>\n  </LinkedCard>\n  <!-- Similar LinkedCard components for other frameworks -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Recharts React 19 Compatibility Override\nDESCRIPTION: JSON configuration to add to package.json for making Recharts work with React 19 by overriding the react-is dependency.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"react-is\": \"^19.0.0-rc-69d4b800-20241021\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Style From Scratch\nDESCRIPTION: Registry configuration for creating a new style without extending shadcn/ui. Defines custom components, CSS variables, and dependencies from scratch.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"extends\": \"none\",\n  \"name\": \"new-style\",\n  \"type\": \"registry:style\",\n  \"dependencies\": [\"tailwind-merge\", \"clsx\"],\n  \"registryDependencies\": [\n    \"utils\",\n    \"https://example.com/r/button.json\",\n    \"https://example.com/r/input.json\",\n    \"https://example.com/r/label.json\",\n    \"https://example.com/r/select.json\"\n  ],\n  \"cssVars\": {\n    \"theme\": {\n      \"font-sans\": \"Inter, sans-serif\"\n    },\n    \"light\": {\n      \"main\": \"#88aaee\",\n      \"bg\": \"#dfe5f2\",\n      \"border\": \"#000\",\n      \"text\": \"#000\",\n      \"ring\": \"#000\"\n    },\n    \"dark\": {\n      \"main\": \"#88aaee\",\n      \"bg\": \"#272933\",\n      \"border\": \"#000\",\n      \"text\": \"#e6e6e6\",\n      \"ring\": \"#fff\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Component Example with shadcn CLI\nDESCRIPTION: An example of adding a specific component (alert-dialog) to the project using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible SidebarGroup\nDESCRIPTION: Demonstrates how to create a collapsible sidebar group using the Collapsible component with transition effects.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  return (\n    <Collapsible defaultOpen className=\"group/collapsible\">\n      <SidebarGroup>\n        <SidebarGroupLabel asChild>\n          <CollapsibleTrigger>\n            Help\n            <ChevronDown className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\" />\n          </CollapsibleTrigger>\n        </SidebarGroupLabel>\n        <CollapsibleContent>\n          <SidebarGroupContent />\n        </CollapsibleContent>\n      </SidebarGroup>\n    </Collapsible>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Style Extension for Shadcn UI\nDESCRIPTION: Registry configuration that extends shadcn/ui with custom dependencies, components, and CSS variables. Includes installation of external packages and component definitions.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"example-style\",\n  \"type\": \"registry:style\",\n  \"dependencies\": [\"@tabler/icons-react\"],\n  \"registryDependencies\": [\n    \"login-01\",\n    \"calendar\",\n    \"https://example.com/r/editor.json\"\n  ],\n  \"cssVars\": {\n    \"theme\": {\n      \"font-sans\": \"Inter, sans-serif\"\n    },\n    \"light\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    },\n    \"dark\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React 19 to Peer Dependencies Example in Diff Format\nDESCRIPTION: A diff showing how package maintainers need to update their peer dependencies to include React 19 support in their packages.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\"peerDependencies\": {\n-  \"react\": \"^16.8 || ^17.0 || ^18.0\",\n+  \"react\": \"^16.8 || ^17.0 || ^18.0 || ^19.0\",\n-  \"react-dom\": \"^16.8 || ^17.0 || ^18.0\"\n+  \"react-dom\": \"^16.8 || ^17.0 || ^18.0 || ^19.0\"\n},\n```\n\n----------------------------------------\n\nTITLE: Using Calendar Component in React\nDESCRIPTION: Example of how to use the Calendar component in a React application, including state management for the selected date.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst [date, setDate] = React.useState<Date | undefined>(new Date())\n\nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    className=\"rounded-md border\"\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Creating gatsby-node.ts for path resolution in Gatsby\nDESCRIPTION: This code creates a gatsby-node.ts file to configure Webpack for resolving paths in a Gatsby project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as path from \"path\"\n\nexport const onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        \"@/components\": path.resolve(__dirname, \"src/components\"),\n        \"@/lib/utils\": path.resolve(__dirname, \"src/lib/utils\"),\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Group Implementation\nDESCRIPTION: Example of implementing a basic Toggle Group with three items in single selection mode.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleGroup type=\"single\">\n  <ToggleGroupItem value=\"a\">A</ToggleGroupItem>\n  <ToggleGroupItem value=\"b\">B</ToggleGroupItem>\n  <ToggleGroupItem value=\"c\">C</ToggleGroupItem>\n</ToggleGroup>\n```\n\n----------------------------------------\n\nTITLE: Downgrading to React 18 for Compatibility\nDESCRIPTION: Command to downgrade React and React DOM to version 18 to avoid peer dependency issues until packages are updated for React 19.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react@18 react-dom@18\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Cookie Name in TypeScript React\nDESCRIPTION: Defines a constant for the cookie name used to store the sidebar state. This can be modified to use a custom cookie name for persisting the sidebar state.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\n```\n\n----------------------------------------\n\nTITLE: Adding Shadcn/UI Components to Web App\nDESCRIPTION: Command to add Shadcn/UI components to the web application within the monorepo structure, specifying the destination directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx shadcn@latest add button -c apps/web\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Dark Mode Root Class\nDESCRIPTION: Adds dark mode support to Tailwind CSS by configuring the root class selector for dark theme styles.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.dark,\n:root[class~=\"dark\"] {\n  ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Usage Example\nDESCRIPTION: Example showing how to implement a basic single-item accordion with collapsible content.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>Is it accessible?</AccordionTrigger>\n    <AccordionContent>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn/ui Components\nDESCRIPTION: Command to add specific components from shadcn/ui to the project\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Using Input Component in React JSX\nDESCRIPTION: Basic usage of the Input component in React JSX.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Input />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chart Tooltip\nDESCRIPTION: This code shows how to import and use custom ChartTooltip and ChartTooltipContent components for creating tooltips in charts.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartTooltip content={<ChartTooltipContent />} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Carousel Item Sizes\nDESCRIPTION: Example showing how to set responsive item sizes that change based on screen width using utility classes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// 50% on small screens and 33% on larger screens.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Components with shadcn CLI\nDESCRIPTION: This command, when run without arguments, displays a list of all available components that can be added using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Component Usage\nDESCRIPTION: Example of using the Skeleton component with custom styling. This creates a rounded placeholder with specific width and height dimensions.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Skeleton className=\"w-[100px] h-[20px] rounded-full\" />\n```\n\n----------------------------------------\n\nTITLE: Using Popover Component\nDESCRIPTION: Example implementation of the Popover component showing basic usage with trigger and content elements.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Popover>\n  <PopoverTrigger>Open</PopoverTrigger>\n  <PopoverContent>Place content for the popover here.</PopoverContent>\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Component Structure\nDESCRIPTION: The minimal structure for a sidebar component using the Sidebar and SidebarContent components. This serves as a starting point for building more complex sidebars.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarHeader />\n      <SidebarContent>\n        <SidebarGroup />\n        <SidebarGroup />\n      </SidebarContent>\n      <SidebarFooter />\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage\nDESCRIPTION: Simple example showing how to use the Checkbox component in a React component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Animations\nDESCRIPTION: Configuration for adding caret blink animation to tailwind.config.js file. Defines keyframes and animation settings for the OTP input cursor.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"caret-blink\": {\n          \"0%,70%,100%\": { opacity: \"1\" },\n          \"20%,50%\": { opacity: \"0\" },\n        },\n      },\n      animation: {\n        \"caret-blink\": \"caret-blink 1.25s ease-out infinite\",\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Input OTP Components\nDESCRIPTION: Import statement for the main Input OTP components including InputOTP, InputOTPGroup, InputOTPSeparator, and InputOTPSlot.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Carousel Spacing\nDESCRIPTION: Example showing how to set responsive spacing between carousel items that changes based on screen width.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel>\n  <CarouselContent className=\"-ml-2 md:-ml-4\">\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Item Schema in JSON\nDESCRIPTION: Demonstrates the structure of a registry-item.json file, including properties like name, type, title, description, files, and CSS variables.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"type\": \"registry:block\",\n  \"title\": \"Hello World\",\n  \"description\": \"A simple hello world component.\",\n  \"files\": [\n    {\n      \"path\": \"registry/new-york/hello-world/hello-world.tsx\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/use-hello-world.ts\",\n      \"type\": \"registry:hook\"\n    }\n  ],\n  \"cssVars\": {\n    \"theme\": {\n      \"font-heading\": \"Poppins, sans-serif\"\n    },\n    \"light\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    },\n    \"dark\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shadcn/UI Monorepo with PNPM\nDESCRIPTION: Command to initialize a new Shadcn/UI monorepo project using PNPM package manager.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage\nDESCRIPTION: Simple example showing how to use the Switch component in JSX.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch />\n```\n\n----------------------------------------\n\nTITLE: Basic Input OTP Usage\nDESCRIPTION: Basic implementation of the Input OTP component with 6 slots split into two groups with a separator.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Variables Toggle - JSON\nDESCRIPTION: Configuration to choose between CSS variables or utility classes for theming.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"cssVariables\": \"true\" | \"false\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Toast Function\nDESCRIPTION: Code example showing how to import the toast function from Sonner, which is used to trigger toast notifications.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { toast } from \"sonner\"\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for UI Package in Monorepo (Tailwind CSS v4)\nDESCRIPTION: JSON configuration for the components.json file in the UI package directory of a monorepo using Tailwind CSS v4. It defines aliases and Tailwind CSS settings for the shared UI components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"\",\n    \"css\": \"src/styles/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"iconLibrary\": \"lucide\",\n  \"aliases\": {\n    \"components\": \"@workspace/ui/components\",\n    \"utils\": \"@workspace/ui/lib/utils\",\n    \"hooks\": \"@workspace/ui/hooks\",\n    \"lib\": \"@workspace/ui/lib\",\n    \"ui\": \"@workspace/ui/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in shadcn/ui Monorepo\nDESCRIPTION: Examples of how to import components, hooks, and utilities from the @workspace/ui package in a monorepo setup.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@workspace/ui/components/button\"\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from \"@workspace/ui/hooks/use-theme\"\nimport { cn } from \"@workspace/ui/lib/utils\"\n```\n\n----------------------------------------\n\nTITLE: Installing Aspect Ratio Component via CLI\nDESCRIPTION: Command to install the Aspect Ratio component using the project's CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Implementation\nDESCRIPTION: Creates an alert with an icon, title and description. The alert informs users about CLI capabilities to add components and dependencies.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Alert>\n  <Terminal className=\"h-4 w-4\" />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarMenu with Projects List\nDESCRIPTION: Shows how to create a sidebar menu with a list of projects, including icons and links.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarContent>\n    <SidebarGroup>\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {projects.map((project) => (\n            <SidebarMenuItem key={project.name}>\n              <SidebarMenuButton asChild>\n                <a href={project.url}>\n                  <project.icon />\n                  <span>{project.name}</span>\n                </a>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  </SidebarContent>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component\nDESCRIPTION: How to import the Collapsible component and its related subcomponents from your components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in TypeScript\nDESCRIPTION: Example of importing the Button component in a TypeScript React file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with Nested Link\nDESCRIPTION: Example of using the Button component with the asChild prop to nest a Link component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button asChild>\n  <Link href=\"/login\">Login</Link>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Installing Tabs Component via CLI\nDESCRIPTION: This command installs the Tabs component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add tabs\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite\nDESCRIPTION: Vite configuration with path aliases and plugins setup\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from \"path\"\nimport tailwindcss from \"@tailwindcss/vite\"\nimport react from \"@vitejs/plugin-react\"\nimport { defineConfig } from \"vite\"\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using shadcn/ui Button component in TanStack Start\nDESCRIPTION: This TypeScript React snippet shows how to import and use the Button component from shadcn/ui in a TanStack Start application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nfunction Home() {\n  const router = useRouter()\n  const state = Route.useLoaderData()\n\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hover Card Component via CLI\nDESCRIPTION: Command to install the Hover Card component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add hover-card\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Variants Helper\nDESCRIPTION: How to import the badgeVariants helper function for creating badge-styled links.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { badgeVariants } from \"@/components/ui/badge\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Carousel Options\nDESCRIPTION: Example showing how to pass additional configuration options to the Embla Carousel through the opts prop.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel\n  opts={{\n    align: \"start\",\n    loop: true,\n  }}\n>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Components\nDESCRIPTION: Import statement for Dialog-related components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\n```\n\n----------------------------------------\n\nTITLE: Using shadcn/ui Components\nDESCRIPTION: Example of importing and using a shadcn/ui Button component in a React component\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nfunction App() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-svh\">\n      <Button>Click me</Button>\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in React Router\nDESCRIPTION: Example of implementing a shadcn/ui Button component in a React Router route file, including meta information and component rendering\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"~/components/ui/button\"\n\nimport type { Route } from \"./+types/home\"\n\nexport function meta({}: Route.MetaArgs) {\n  return [\n    { title: \"New React Router App\" },\n    { name: \"description\", content: \"Welcome to React Router!\" },\n  ]\n}\n\nexport default function Home() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-svh\">\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui Monorepo Project with CLI\nDESCRIPTION: Command to create a new monorepo project using the shadcn/ui CLI. It prompts the user to select the project type, specifically for a Next.js monorepo setup.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@canary init\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI accordion dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-accordion\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Component Usage in TypeScript React\nDESCRIPTION: Demonstrates the basic usage of the Sidebar component within a custom AppSidebar component. This is a simple implementation without any additional props.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  return <Sidebar />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gray Theme Colors in OKLCH\nDESCRIPTION: CSS variables defining the Gray color theme using OKLCH color space. Implements a gray-based color scheme with light and dark mode variations for UI components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.13 0.028 261.692);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.13 0.028 261.692);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.13 0.028 261.692);\n  --primary: oklch(0.21 0.034 264.665);\n  --primary-foreground: oklch(0.985 0.002 247.839);\n  --secondary: oklch(0.967 0.003 264.542);\n  --secondary-foreground: oklch(0.21 0.034 264.665);\n  --muted: oklch(0.967 0.003 264.542);\n  --muted-foreground: oklch(0.551 0.027 264.364);\n  --accent: oklch(0.967 0.003 264.542);\n  --accent-foreground: oklch(0.21 0.034 264.665);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.928 0.006 264.531);\n  --input: oklch(0.928 0.006 264.531);\n  --ring: oklch(0.707 0.022 261.325);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0.002 247.839);\n  --sidebar-foreground: oklch(0.13 0.028 261.692);\n  --sidebar-primary: oklch(0.21 0.034 264.665);\n  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);\n  --sidebar-accent: oklch(0.967 0.003 264.542);\n  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);\n  --sidebar-border: oklch(0.928 0.006 264.531);\n  --sidebar-ring: oklch(0.707 0.022 261.325);\n}\n\n.dark {\n  --background: oklch(0.13 0.028 261.692);\n  --foreground: oklch(0.985 0.002 247.839);\n  --card: oklch(0.21 0.034 264.665);\n  --card-foreground: oklch(0.985 0.002 247.839);\n  --popover: oklch(0.21 0.034 264.665);\n  --popover-foreground: oklch(0.985 0.002 247.839);\n  --primary: oklch(0.928 0.006 264.531);\n  --primary-foreground: oklch(0.21 0.034 264.665);\n  --secondary: oklch(0.278 0.033 256.848);\n  --secondary-foreground: oklch(0.985 0.002 247.839);\n  --muted: oklch(0.278 0.033 256.848);\n  --muted-foreground: oklch(0.707 0.022 261.325);\n  --accent: oklch(0.278 0.033 256.848);\n  --accent-foreground: oklch(0.985 0.002 247.839);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.551 0.027 264.364);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.21 0.034 264.665);\n  --sidebar-foreground: oklch(0.985 0.002 247.839);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);\n  --sidebar-accent: oklch(0.278 0.033 256.848);\n  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.551 0.027 264.364);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple Toast Notification\nDESCRIPTION: Basic example of using the toast function to display a simple notification message.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntoast(\"Event has been created.\")\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Menu Components in React\nDESCRIPTION: Import statement for various Navigation Menu components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from \"@/components/ui/navigation-menu\"\n```\n\n----------------------------------------\n\nTITLE: Using shadcn/ui Button Component in Astro Page\nDESCRIPTION: Example of how to import and use the shadcn/ui Button component in an Astro page file. This includes the full structure of an Astro page with the Button component integrated.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { Button } from \"@/components/ui/button\"\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\t\t<meta name=\"generator\" content={Astro.generator} />\n\t\t<title>Astro + TailwindCSS</title>\n\t</head>\n\n\t<body>\n\t\t<div class=\"grid place-items-center h-screen content-center\">\n\t\t\t<Button>Button</Button>\n\t\t</div>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Base Color - JSON\nDESCRIPTION: Configuration for setting the default color palette for components. This cannot be changed after initialization.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Group Components\nDESCRIPTION: Example of importing the Toggle Group and ToggleGroupItem components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\"\n```\n\n----------------------------------------\n\nTITLE: Importing Shadcn/UI Components in TSX\nDESCRIPTION: Example of how to import and use Shadcn/UI components from the UI package in a TSX file within the monorepo structure.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@workspace/ui/components/button\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Component via CLI\nDESCRIPTION: Command to add the Dialog component using shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add dialog\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components\nDESCRIPTION: Example of importing the necessary Accordion components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\"\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (npm)\nDESCRIPTION: Installs the necessary dependencies for Shadcn UI using npm. These include class-variance-authority, clsx, tailwind-merge, lucide-react, and tw-animate-css.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install class-variance-authority clsx tailwind-merge lucide-react tw-animate-css\n```\n\n----------------------------------------\n\nTITLE: Importing Hover Card Components in React\nDESCRIPTION: Code snippet showing how to import the Hover Card components from the UI components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@/components/ui/hover-card\"\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Components\nDESCRIPTION: Code showing how to import the Popover, PopoverContent, and PopoverTrigger components from the UI components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group via CLI\nDESCRIPTION: Command to add radio group component using shadcn CLI\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add radio-group\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Action Route\nDESCRIPTION: Implements the theme action route for handling theme changes in the session storage.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThemeAction } from \"remix-themes\"\n\nimport { themeSessionResolver } from \"./sessions.server\"\n\nexport const action = createThemeAction(themeSessionResolver)\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Dependencies Manually\nDESCRIPTION: Command to manually install the required Radix UI switch primitive package.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-switch\n```\n\n----------------------------------------\n\nTITLE: Importing Table Components in React\nDESCRIPTION: Importing the necessary Table components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility Layer for Charts\nDESCRIPTION: This code snippet shows how to enable the accessibility layer for charts, which adds keyboard access and screen reader support.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<LineChart accessibilityLayer />\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component\nDESCRIPTION: Example of importing the Checkbox component from the components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from \"@/components/ui/checkbox\"\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Group Components\nDESCRIPTION: Import statements for the Radio Group and Label components\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label } from \"@/components/ui/label\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Menu with Next.js Link Component\nDESCRIPTION: Example of how to integrate the Navigation Menu with Next.js Link component, applying the correct trigger styles.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<NavigationMenuItem>\n  <Link href=\"/docs\" legacyBehavior passHref>\n    <NavigationMenuLink className={navigationMenuTriggerStyle()}>\n      Documentation\n    </NavigationMenuLink>\n  </Link>\n</NavigationMenuItem>\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component\nDESCRIPTION: Shows how to import the Textarea component from the components directory\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Textarea } from \"@/components/ui/textarea\"\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Component in React\nDESCRIPTION: Example of how to import the Calendar component in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Calendar } from \"@/components/ui/calendar\"\n```\n\n----------------------------------------\n\nTITLE: Importing Context Menu Components\nDESCRIPTION: TypeScript code showing how to import the necessary context menu components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Collapsible Dependency\nDESCRIPTION: Command to install the required Radix UI collapsible dependency package using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-collapsible\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React\nDESCRIPTION: This code snippet shows how to import the Avatar component and its subcomponents in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\n```\n\n----------------------------------------\n\nTITLE: Importing Drawer Components in React\nDESCRIPTION: Example of importing various Drawer-related components in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\"\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component\nDESCRIPTION: Code snippet showing how to import the Skeleton component from the UI components directory. The import path may need to be adjusted based on your project structure.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skeleton } from \"@/components/ui/skeleton\"\n```\n\n----------------------------------------\n\nTITLE: Component Configuration Options\nDESCRIPTION: Configuration prompts for setting up components.json including style, base color, and CSS variables preferences\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use? â€º New York\nWhich color would you like to use as base color? â€º Zinc\nDo you want to use CSS variables for colors? â€º no / yes\n```\n\n----------------------------------------\n\nTITLE: Installing Command Component Dependencies - Bash\nDESCRIPTION: Command to install the required cmdk package via npm\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cmdk\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Items in JSON\nDESCRIPTION: This snippet demonstrates how to define items in the registry, following the registry-item schema specification. It includes an example of a 'Hello World' component definition.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"name\": \"hello-world\",\n      \"type\": \"registry:block\",\n      \"title\": \"Hello World\",\n      \"description\": \"A simple hello world component.\",\n      \"files\": [\n        {\n          \"path\": \"registry/new-york/hello-world/hello-world.tsx\",\n          \"type\": \"registry:component\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Remix Indie Stack using npx\nDESCRIPTION: Command to create a new Remix project using the Indie Stack template.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-remix@latest --template remix-run/indie-stack\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Colors in Chart Components\nDESCRIPTION: These code snippets demonstrate how to apply theme colors in various chart components and data structures using CSS variable references.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartData = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n]\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<LabelList className=\"fill-[--color-desktop]\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Registry JSON Structure\nDESCRIPTION: Initial configuration for registry.json file that defines the component registry metadata and items list.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry.json\",\n  \"name\": \"acme\",\n  \"homepage\": \"https://acme.com\",\n  \"items\": [\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Project with Tailwind CSS and React\nDESCRIPTION: Command to create a new Astro project with Tailwind CSS and React integration using the create-astro CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-astro@latest astro-app  --template with-tailwindcss --install --add react --git\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in TanStack Router\nDESCRIPTION: Example of how to import and use the Button component in a TanStack Router route file. Shows the basic setup of a route with the Button component integration.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from \"@tanstack/react-router\"\n\nimport { Button } from \"@/components/ui/button\"\n\nexport const Route = createFileRoute(\"/\")({ \n  component: App,\n})\n\nfunction App() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Components JSON for JavaScript\nDESCRIPTION: Base configuration file for JavaScript projects using shadcn-ui components, including style settings, paths, and TypeScript options.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"rsc\": false,\n  \"tsx\": false,\n  \"aliases\": {\n    \"utils\": \"~/lib/utils\",\n    \"components\": \"~/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tabs Component Dependencies Manually\nDESCRIPTION: This command installs the necessary dependency for the Tabs component when setting up manually.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-tabs\n```\n\n----------------------------------------\n\nTITLE: Zod Schema Definition\nDESCRIPTION: Example of creating a form validation schema using Zod.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n})\n```\n\n----------------------------------------\n\nTITLE: React Server Components Configuration - JSON\nDESCRIPTION: Configuration to enable/disable React Server Components support.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rsc\": \"true\" | \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Rules for Registry Item in JSON\nDESCRIPTION: Shows how to add custom CSS rules to the project's CSS file using the css property, including @layer, @utility, and @keyframes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"css\": {\n    \"@layer base\": {\n      \"body\": {\n        \"font-size\": \"var(--text-base)\",\n        \"line-height\": \"1.5\"\n      }\n    },\n    \"@layer components\": {\n      \"button\": {\n        \"background-color\": \"var(--color-primary)\",\n        \"color\": \"var(--color-white)\"\n      }\n    },\n    \"@utility text-magic\": {\n      \"font-size\": \"var(--text-base)\",\n      \"line-height\": \"1.5\"\n    },\n    \"@keyframes wiggle\": {\n      \"0%, 100%\": {\n        \"transform\": \"rotate(-3deg)\"\n      },\n      \"50%\": {\n        \"transform\": \"rotate(3deg)\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SidebarGroup Component\nDESCRIPTION: Shows how to create a basic sidebar group with label, action, and content components. Demonstrates the fundamental structure of a sidebar group.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar, SidebarContent, SidebarGroup } from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Application</SidebarGroupLabel>\n          <SidebarGroupAction>\n            <Plus /> <span className=\"sr-only\">Add Project</span>\n          </SidebarGroupAction>\n          <SidebarGroupContent></SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for path resolution in TanStack Start\nDESCRIPTION: This TypeScript configuration snippet sets up path aliases for easier imports in a TanStack Start project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"moduleResolution\": \"Bundler\",\n    \"module\": \"ESNext\",\n    \"target\": \"ES2022\",\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./app/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Dialog Components in React\nDESCRIPTION: TypeScript code snippet showing how to import the various Alert Dialog components for use in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\n```\n\n----------------------------------------\n\nTITLE: Importing Menubar Components in React\nDESCRIPTION: Example of importing various Menubar-related components from the project's UI components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from \"@/components/ui/menubar\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies Manually\nDESCRIPTION: Command to install the Radix UI Dialog dependency required for the Sheet component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dialog\n```\n\n----------------------------------------\n\nTITLE: Setting up Git remote for the project\nDESCRIPTION: Command to add a GitHub repository as the remote for the project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add origin <ORIGIN_URL>\n```\n\n----------------------------------------\n\nTITLE: Configuring Carousel Item Sizes\nDESCRIPTION: Example showing how to set fixed item sizes using the basis utility class for a carousel with 3 equally sized items.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// 33% of the carousel width.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Sidebar Theming Variables\nDESCRIPTION: CSS variables used for theming the sidebar component with both light and dark mode support.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 0 0% 98%;\n    --sidebar-primary-foreground: 240 5.9% 10%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Component Import\nDESCRIPTION: Shows how to import the necessary resizable panel components from the UI components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\"\n```\n\n----------------------------------------\n\nTITLE: Using useSidebar Hook in TypeScript React\nDESCRIPTION: Shows how to use the useSidebar hook to control the Sidebar state and behavior. This hook provides various properties and methods for sidebar management.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSidebar } from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  const {\n    state,\n    open,\n    setOpen,\n    openMobile,\n    setOpenMobile,\n    isMobile,\n    toggleSidebar,\n  } = useSidebar()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Component Usage\nDESCRIPTION: Basic example of using the Sheet component with trigger, content, header, title, and description elements.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent>\n    <SheetHeader>\n      <SheetTitle>Are you absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Handling Carousel Events\nDESCRIPTION: Example showing how to listen to carousel events using the API instance obtained from setApi prop.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type CarouselApi } from \"@/components/ui/carousel\"\n\nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>()\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    api.on(\"select\", () => {\n      // Do something on select.\n    })\n  }, [api])\n\n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme Variables\nDESCRIPTION: Registry configuration for creating a custom theme with specific color values in light and dark modes using OKLCH color space.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"custom-theme\",\n  \"type\": \"registry:theme\",\n  \"cssVars\": {\n    \"light\": {\n      \"background\": \"oklch(1 0 0)\",\n      \"foreground\": \"oklch(0.141 0.005 285.823)\",\n      \"primary\": \"oklch(0.546 0.245 262.881)\",\n      \"primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"ring\": \"oklch(0.746 0.16 232.661)\",\n      \"sidebar-primary\": \"oklch(0.546 0.245 262.881)\",\n      \"sidebar-primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"sidebar-ring\": \"oklch(0.746 0.16 232.661)\"\n    },\n    \"dark\": {\n      \"background\": \"oklch(1 0 0)\",\n      \"foreground\": \"oklch(0.141 0.005 285.823)\",\n      \"primary\": \"oklch(0.707 0.165 254.624)\",\n      \"primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"ring\": \"oklch(0.707 0.165 254.624)\",\n      \"sidebar-primary\": \"oklch(0.707 0.165 254.624)\",\n      \"sidebar-primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"sidebar-ring\": \"oklch(0.707 0.165 254.624)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TanStack Logo SVG Component\nDESCRIPTION: SVG path definition for TanStack logo with viewBox and className props. The path contains detailed bezier curves and lines to render the TanStack logo.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  className=\"w-10 h-10\"\n  fill=\"currentColor\"\n>\n  <path d=\"M6.93 13.688a.343.343 0 0 1 .468.132l.063.106c.48.851.98 1.66 1.5 2.426a35.65 35.65 0 0 0 2.074 2.742a.345.345 0 0 1-.039.484l-.074.066c-2.543 2.223-4.191 2.665-4.953 1.333-.746-1.305-.477-3.672.808-7.11a.344.344 0 0 1 .153-.18Z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Homepage in JSON\nDESCRIPTION: This snippet illustrates how to set the homepage property for the registry, used for data attributes and other metadata.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"https://acme.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Project\nDESCRIPTION: Command to create a new Vite project with React and TypeScript template\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Aliases in jsconfig.json\nDESCRIPTION: JavaScript configuration file that sets up import path aliases for the project using the @/* pattern.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./*/\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Path - JSON\nDESCRIPTION: Configuration specifying the path to the CSS file that imports Tailwind CSS.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"css\": \"styles/global.css\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Component\nDESCRIPTION: Example of how to import the Toggle component in a React component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toggle } from \"@/components/ui/toggle\"\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Component via CLI\nDESCRIPTION: Command to install the Toggle Group component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add toggle-group\n```\n\n----------------------------------------\n\nTITLE: Configuring root route and importing CSS in TanStack Start\nDESCRIPTION: This TypeScript React snippet sets up the root route for a TanStack Start application and imports the main CSS file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from \"react\"\nimport { Outlet, createRootRoute } from \"@tanstack/react-router\"\nimport { Meta, Scripts } from \"@tanstack/start\"\n\nimport appCss from \"@/styles/app.css?url\"\n\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        charSet: \"utf-8\",\n      },\n      {\n        name: \"viewport\",\n        content: \"width=device-width, initial-scale=1\",\n      },\n      {\n        title: \"TanStack Start Starter\",\n      },\n    ],\n    links: [\n      {\n        rel: \"stylesheet\",\n        href: appCss,\n      },\n    ],\n  }),\n  component: RootComponent,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating persistent volumes for SQLite database\nDESCRIPTION: Commands to create persistent volumes for the SQLite database in staging and production environments on Fly.io.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nfly volumes create data --size 1 --app indie-stack-template\nfly volumes create data --size 1 --app indie-stack-template-staging\n```\n\n----------------------------------------\n\nTITLE: Importing Aspect Ratio Component in React\nDESCRIPTION: Example of how to import the Aspect Ratio component and Next.js Image component in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from \"next/image\"\n\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"\n```\n\n----------------------------------------\n\nTITLE: Vertical Panel Implementation\nDESCRIPTION: Example showing how to create a vertical panel layout using the direction prop.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\"\n\nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"vertical\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Variables for Registry Item in JSON\nDESCRIPTION: Demonstrates how to define CSS variables for a registry item using the cssVars property, including theme, light, and dark mode variables.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cssVars\": {\n    \"theme\": {\n      \"font-heading\": \"Poppins, sans-serif\"\n    },\n    \"light\": {\n      \"brand\": \"20 14.3% 4.1%\",\n      \"radius\": \"0.5rem\"\n    },\n    \"dark\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a shadcn/ui component to TanStack Start project\nDESCRIPTION: This command demonstrates how to add a specific component (Button) from shadcn/ui to the project using the CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@canary add button\n```\n\n----------------------------------------\n\nTITLE: Adding or Overriding Tailwind Theme Variables (v4)\nDESCRIPTION: This snippet shows how to add or override Tailwind theme variables by defining them in the cssVars.theme section of the JSON configuration for Tailwind CSS v4.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    // ...\n  ],\n  \"cssVars\": {\n    \"theme\": {\n      \"text-base\": \"3rem\",\n      \"ease-in-out\": \"cubic-bezier(0.4, 0, 0.2, 1)\",\n      \"font-heading\": \"Poppins, sans-serif\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using shadcn Components\nDESCRIPTION: Example of importing and using a shadcn component in a Remix component\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"~/components/ui/button\"\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Variants Helper\nDESCRIPTION: Example of importing the buttonVariants helper function for creating link-like buttons.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { buttonVariants } from \"@/components/ui/button\"\n```\n\n----------------------------------------\n\nTITLE: React Component Forward Ref Migration - Before\nDESCRIPTION: Example of a React component using forwardRef before migration, showing the old pattern with ref forwarding and displayName\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b last:border-b-0\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n```\n\n----------------------------------------\n\nTITLE: React Component Forward Ref Migration - After\nDESCRIPTION: Example of the same React component after removing forwardRef, using ComponentProps and data-slot attribute\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsed Breadcrumb with Ellipsis\nDESCRIPTION: Implementing a collapsed state for breadcrumbs using the BreadcrumbEllipsis component when the breadcrumb is too long. The highlighted lines show the import and implementation of the ellipsis.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BreadcrumbEllipsis } from \"@/components/ui/breadcrumb\"\n\n...\n\n<Breadcrumb>\n  <BreadcrumbList>\n    {/* ... */}\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis />\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Setting Carousel Orientation\nDESCRIPTION: Example showing how to set the orientation of the carousel to vertical or horizontal using the orientation prop.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel orientation=\"vertical | horizontal\">\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Pattern-based Input OTP\nDESCRIPTION: Implementation of Input OTP with alphanumeric pattern validation using REGEXP_ONLY_DIGITS_AND_CHARS.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\n\n...\n\n<InputOTP\n  maxLength={6}\n  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    {/* ... */}\n  </InputOTPGroup>\n</InputOTP>\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component Dependencies\nDESCRIPTION: Command to install the required Radix UI Select component dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-select\n```\n\n----------------------------------------\n\nTITLE: Defining Zinc Theme Colors in OKLCH\nDESCRIPTION: CSS variables defining the Zinc color theme using OKLCH color space. Includes both light and dark mode color definitions for various UI components and states.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.141 0.005 285.823);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.141 0.005 285.823);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.141 0.005 285.823);\n  --primary: oklch(0.21 0.006 285.885);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.967 0.001 286.375);\n  --secondary-foreground: oklch(0.21 0.006 285.885);\n  --muted: oklch(0.967 0.001 286.375);\n  --muted-foreground: oklch(0.552 0.016 285.938);\n  --accent: oklch(0.967 0.001 286.375);\n  --accent-foreground: oklch(0.21 0.006 285.885);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.92 0.004 286.32);\n  --input: oklch(0.92 0.004 286.32);\n  --ring: oklch(0.705 0.015 286.067);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.141 0.005 285.823);\n  --sidebar-primary: oklch(0.21 0.006 285.885);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.967 0.001 286.375);\n  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);\n  --sidebar-border: oklch(0.92 0.004 286.32);\n  --sidebar-ring: oklch(0.705 0.015 286.067);\n}\n\n.dark {\n  --background: oklch(0.141 0.005 285.823);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.21 0.006 285.885);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.21 0.006 285.885);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.92 0.004 286.32);\n  --primary-foreground: oklch(0.21 0.006 285.885);\n  --secondary: oklch(0.274 0.006 286.033);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.274 0.006 286.033);\n  --muted-foreground: oklch(0.705 0.015 286.067);\n  --accent: oklch(0.274 0.006 286.033);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.552 0.016 285.938);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.21 0.006 285.885);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.274 0.006 286.033);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.552 0.016 285.938);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New React Router Project\nDESCRIPTION: Command to create a new React Router project using the create-react-router CLI\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-router@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Updating Calendar Component Styling\nDESCRIPTION: Recent changelog entry showing an update to the styling of the 'day_outside' class in the Calendar component for improved contrast.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"day_outside:\n        \\\"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\\\",\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Reference\nDESCRIPTION: Reference to a GitHub pull request with commit hash for tracking changes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[#4397](https://github.com/shadcn-ui/ui/pull/4397) [`a1bed46`](https://github.com/shadcn-ui/ui/commit/a1bed464f329e9025a7fa1ae7dee094d4c9c6f44)\n```\n\n----------------------------------------\n\nTITLE: Adding SidebarGroupAction Component\nDESCRIPTION: Shows how to add an action button to a SidebarGroup with accessibility features.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AppSidebar() {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel asChild>Projects</SidebarGroupLabel>\n      <SidebarGroupAction title=\"Add Project\">\n        <Plus /> <span className=\"sr-only\">Add Project</span>\n      </SidebarGroupAction>\n      <SidebarGroupContent />\n    </SidebarGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Usage\nDESCRIPTION: Simple example showing how to use the Toggle component with basic text content.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Toggle>Toggle</Toggle>\n```\n\n----------------------------------------\n\nTITLE: Adding a shadcn/ui component using npm\nDESCRIPTION: This command adds the Switch component from shadcn/ui to the project using npx.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui in TanStack Start project\nDESCRIPTION: This command runs the shadcn CLI to initialize and set up the project for using shadcn/ui components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@canary init\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for path resolution in Gatsby\nDESCRIPTION: This snippet shows how to add path resolution configuration to the tsconfig.json file in a Gatsby project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu in Breadcrumb Item\nDESCRIPTION: Implementing a dropdown menu within a breadcrumb item by composing the BreadcrumbItem with DropdownMenu components. The highlighted lines show the imports and dropdown implementation.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\n...\n\n<BreadcrumbItem>\n  <DropdownMenu>\n    <DropdownMenuTrigger className=\"flex items-center gap-1\">\n      Components\n      <ChevronDownIcon />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem>Documentation</DropdownMenuItem>\n      <DropdownMenuItem>Themes</DropdownMenuItem>\n      <DropdownMenuItem>GitHub</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</BreadcrumbItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for Web App in Monorepo (Tailwind CSS v4)\nDESCRIPTION: JSON configuration for the components.json file in the web app directory of a monorepo using Tailwind CSS v4. It defines aliases and Tailwind CSS settings.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"\",\n    \"css\": \"../../packages/ui/src/styles/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"iconLibrary\": \"lucide\",\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"hooks\": \"@/hooks\",\n    \"lib\": \"@/lib\",\n    \"utils\": \"@workspace/ui/lib/utils\",\n    \"ui\": \"@workspace/ui/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options for shadcn init Command\nDESCRIPTION: Detailed options for the 'init' command, including arguments for components and various flags for customization.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn init [options] [components...]\n\ninitialize your project and install dependencies\n\nArguments:\n  components         the components to add or a url to the component.\n\nOptions:\n  -y, --yes           skip confirmation prompt. (default: true)\n  -d, --defaults,     use default configuration. (default: false)\n  -f, --force         force overwrite of existing configuration. (default: false)\n  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: \"/Users/shadcn/Desktop\")\n  -s, --silent        mute output. (default: false)\n  --src-dir           use the src directory when creating a new project. (default: false)\n  --no-src-dir        do not use the src directory when creating a new project.\n  --css-variables     use css variables for theming. (default: true)\n  --no-css-variables  do not use css variables for theming.\n  -h, --help          display help for command\n```\n\n----------------------------------------\n\nTITLE: Defining Shared ESLint Configuration Package in Markdown\nDESCRIPTION: This snippet defines the name of the shared ESLint configuration package for the workspace. It uses a code block to highlight the package name.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/packages/eslint-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@workspace/eslint-config`\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Component using CLI\nDESCRIPTION: Command to install the Skeleton component using the shadcn CLI tool. This provides a quick and automated way to add the component to your project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add skeleton\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in TanStack Start app styles\nDESCRIPTION: This CSS snippet imports Tailwind CSS into the main application stylesheet for a TanStack Start project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\" source(\"../\");\n```\n\n----------------------------------------\n\nTITLE: Installing Table Component via CLI\nDESCRIPTION: Command to install the Table component using the Shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add table\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui\nDESCRIPTION: Command to initialize shadcn setup in the project\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Setting Registry Name in JSON\nDESCRIPTION: This snippet shows how to set the name property for the registry, which is used for data attributes and other metadata.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"acme\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Prefix Configuration - JSON\nDESCRIPTION: Configuration for setting a prefix for Tailwind CSS utility classes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"prefix\": \"tw-\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar Trigger Implementation\nDESCRIPTION: Shows how to implement a sidebar toggle button using SidebarTrigger component within SidebarProvider context.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarProvider>\n  <Sidebar />\n  <main>\n    <SidebarTrigger />\n  </main>\n</SidebarProvider>\n```\n\n----------------------------------------\n\nTITLE: Building Registry JSON Files with shadcn CLI\nDESCRIPTION: Use the 'build' command to generate the registry JSON files. This command reads the 'registry.json' file and generates the registry JSON files in the 'public/r' directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest build\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component via CLI\nDESCRIPTION: Command to install the tooltip component using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add tooltip\n```\n\n----------------------------------------\n\nTITLE: Create components.json\nDESCRIPTION: Creates a `components.json` file, which is used by Shadcn UI to configure the component library.  It defines the style, RSC setting, TSX usage, Tailwind CSS configuration, path aliases, and icon library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": false,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"\",\n    \"css\": \"src/styles/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Carousel Item Spacing\nDESCRIPTION: Example showing how to set spacing between carousel items using padding and negative margin utilities.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Carousel>\n  <CarouselContent className=\"-ml-4\">\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Overriding Tailwind Theme Variables (v3)\nDESCRIPTION: This snippet demonstrates how to override Tailwind theme variables by adding them to the tailwind.config.theme.extend section of the JSON configuration for Tailwind CSS v3.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    // ...\n  ],\n  \"tailwind\": {\n    \"config\": {\n      \"theme\": {\n        \"extend\": {\n          \"text\": {\n            \"base\": \"3rem\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Plugin Migration\nDESCRIPTION: Shows the migration from tailwindcss-animate plugin to tw-animate-css in globals.css\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- @plugin 'tailwindcss-animate';\n+ @import \"tw-animate-css\";\n```\n\n----------------------------------------\n\nTITLE: Installing Collapsible Component via CLI\nDESCRIPTION: Command to install the collapsible component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add collapsible\n```\n\n----------------------------------------\n\nTITLE: Using Progress Component\nDESCRIPTION: Example showing basic usage of the Progress component with a value prop set to 33 percent.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Progress value={33} />\n```\n\n----------------------------------------\n\nTITLE: Installing Carousel Component via CLI\nDESCRIPTION: Command to install the Carousel component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add carousel\n```\n\n----------------------------------------\n\nTITLE: Using Menubar Component in React\nDESCRIPTION: Example of how to use the Menubar component in a React application, demonstrating the structure and nested components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>âŒ˜T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>New Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Share</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Print</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Resolution in tsconfig.json for Astro\nDESCRIPTION: Modification to the tsconfig.json file to add path resolution for the @/ alias, which is used for importing components from the src directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Tailwind Color in JSON Configuration (v3)\nDESCRIPTION: This snippet demonstrates how to add a new Tailwind color by defining it in both cssVars and tailwind.config sections of the JSON configuration for Tailwind CSS v3.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    // ...\n  ],\n  \"cssVars\": {\n    \"light\": {\n      \"brand-background\": \"20 14.3% 4.1%\",\n      \"brand-accent\": \"20 14.3% 4.1%\"\n    },\n    \"dark\": {\n      \"brand-background\": \"20 14.3% 4.1%\",\n      \"brand-accent\": \"20 14.3% 4.1%\"\n    }\n  },\n  \"tailwind\": {\n    \"config\": {\n      \"theme\": {\n        \"extend\": {\n          \"colors\": {\n            \"brand\": {\n              \"DEFAULT\": \"hsl(var(--brand-background))\",\n              \"accent\": \"hsl(var(--brand-accent))\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component via CLI\nDESCRIPTION: Command to install the Progress component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add progress\n```\n\n----------------------------------------\n\nTITLE: Installing next-themes package\nDESCRIPTION: Command to install the next-themes package using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-themes\n```\n\n----------------------------------------\n\nTITLE: Sidebar with Rail Component\nDESCRIPTION: Demonstrates the structure of a sidebar with a rail component that can be used for toggling.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarHeader />\n  <SidebarContent>\n    <SidebarGroup />\n  </SidebarContent>\n  <SidebarFooter />\n  <SidebarRail />\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog Component in React\nDESCRIPTION: TypeScript code snippet demonstrating how to use the Alert Dialog component in a React application, including the structure and content of the dialog.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<AlertDialog>\n  <AlertDialogTrigger>Open</AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Component to Root Layout with Manual Method\nDESCRIPTION: How to integrate the Toaster component into the root layout when using the manual installation method.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toaster } from \"@/components/ui/toaster\"\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head />\n      <body>\n        <main>{children}</main>\n        <Toaster />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn/ui Components to Next.js Project\nDESCRIPTION: Command to add specific components from shadcn/ui to your project. This example demonstrates adding the Button component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Tailwind Config Path - JSON\nDESCRIPTION: Configuration specifying the path to Tailwind configuration file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chart Configuration Update\nDESCRIPTION: Shows the diff for updating chart color configuration to work with the new CSS variable format.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n-    color: \"hsl(var(--chart-1))\",\n+    color: \"var(--chart-1)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n-   color: \"hsl(var(--chart-2))\",\n+   color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Installing Breadcrumb Component with CLI\nDESCRIPTION: Command to install the breadcrumb component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add breadcrumb\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component via NPM\nDESCRIPTION: Command to install the required Radix UI Popover dependency using npm package manager.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-popover\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema for Registry Item JSON\nDESCRIPTION: Shows how to specify the schema for the registry-item.json file using the $schema property.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn/ui Button Component to Astro Project\nDESCRIPTION: Command to add the Button component from shadcn/ui to the Astro project using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Adding a shadcn-ui component to Gatsby project\nDESCRIPTION: This command adds the Button component from shadcn-ui to a Gatsby project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn Components\nDESCRIPTION: Command to add individual shadcn components to the project\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Dependencies\nDESCRIPTION: Command to install the required Radix UI radio group dependency using npm\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-radio-group\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component Dependencies via CLI\nDESCRIPTION: This command installs the Avatar component and its dependencies using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add avatar\n```\n\n----------------------------------------\n\nTITLE: Using shadcn-ui Button component in Gatsby\nDESCRIPTION: This code snippet demonstrates how to import and use the Button component from shadcn-ui in a Gatsby project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport default function Home() {\n  return (\n    <div>\n      <Button>Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Separator Component Dependencies\nDESCRIPTION: Command to install the required dependency for the Separator component manually.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-separator\n```\n\n----------------------------------------\n\nTITLE: Using Label Component\nDESCRIPTION: Example of using the Label component with the htmlFor prop to associate it with a form control.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Label htmlFor=\"email\">Your email address</Label>\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component via CLI\nDESCRIPTION: Command to add the Popover component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add popover\n```\n\n----------------------------------------\n\nTITLE: Installing remix-themes Package\nDESCRIPTION: Command to install the remix-themes package for theme management.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install remix-themes\n```\n\n----------------------------------------\n\nTITLE: Options for shadcn add Command\nDESCRIPTION: Detailed options for the 'add' command, including arguments for components and various flags for customization.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn add [options] [components...]\n\nadd a component to your project\n\nArguments:\n  components         the components to add or a url to the component.\n\nOptions:\n  -y, --yes           skip confirmation prompt. (default: false)\n  -o, --overwrite     overwrite existing files. (default: false)\n  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: \"/Users/shadcn/Desktop\")\n  -a, --all           add all available components (default: false)\n  -p, --path <path>   the path to add the component to.\n  -s, --silent        mute output. (default: false)\n  --src-dir           use the src directory when creating a new project. (default: false)\n  --no-src-dir        do not use the src directory when creating a new project.\n  --css-variables     use css variables for theming. (default: true)\n  --no-css-variables  do not use css variables for theming.\n  -h, --help          display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Item Definition\nDESCRIPTION: Extended registry.json configuration that includes component definition with metadata and file paths.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry.json\",\n  \"name\": \"acme\",\n  \"homepage\": \"https://acme.com\",\n  \"items\": [\n    {\n      \"name\": \"hello-world\",\n      \"type\": \"registry:block\",\n      \"title\": \"Hello World\",\n      \"description\": \"A simple hello world component.\",\n      \"files\": [\n        {\n          \"path\": \"registry/new-york/hello-world/hello-world.tsx\",\n          \"type\": \"registry:component\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Dialog Component via CLI\nDESCRIPTION: Command to install the Alert Dialog component using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Setting up and running the development server\nDESCRIPTION: Commands for initial setup and starting the development server for the Remix project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run setup\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component via CLI\nDESCRIPTION: Command to install the Slider component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add slider\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Component via CLI\nDESCRIPTION: Command to add the Toast component to your project using the Shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add toast\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Component via CLI\nDESCRIPTION: Installs the Alert component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add alert\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix for Tailwind\nDESCRIPTION: Adding Tailwind and PostCSS configuration to remix.config.js\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@remix-run/dev').AppConfig} */\nexport default {\n  ...\n  tailwind: true,\n  postcss: true,\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Component via CLI\nDESCRIPTION: Command to install the Drawer component using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add drawer\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Implementation\nDESCRIPTION: Example of a basic breadcrumb component implementation with multiple levels (Home > Components > Breadcrumb).\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component via CLI\nDESCRIPTION: Command to install the checkbox component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add checkbox\n```\n\n----------------------------------------\n\nTITLE: Utility Class Theming Example\nDESCRIPTION: Example of using Tailwind utility classes for component theming.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-zinc-950 dark:bg-white\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with npm Force Flags for React 19 Compatibility\nDESCRIPTION: Commands demonstrating how to force-install packages with npm when facing peer dependency conflicts with React 19.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i <package> --force\n\nnpm i <package> --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Block Files Structure\nDESCRIPTION: Example file structure for a dashboard block including components, hooks, and utilities\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\ndashboard-01\nâ””â”€â”€ page.tsx\nâ””â”€â”€ components\n    â””â”€â”€ hello-world.tsx\n    â””â”€â”€ example-card.tsx\nâ””â”€â”€ hooks\n    â””â”€â”€ use-hello-world.ts\nâ””â”€â”€ lib\n    â””â”€â”€ format-date.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS\nDESCRIPTION: PostCSS configuration setup for Tailwind CSS and autoprefixer\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cypress login utility in tests\nDESCRIPTION: Example of using the custom Cypress login utility to authenticate a new user in tests.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ncy.login();\n// you are now logged in as a new user\n```\n\n----------------------------------------\n\nTITLE: Installing Navigation Menu via CLI\nDESCRIPTION: Command to install the Navigation Menu component using the Shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add navigation-menu\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration - JSON\nDESCRIPTION: Configuration to choose between TypeScript or JavaScript components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tsx\": \"true\" | \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ScrollArea Component via CLI\nDESCRIPTION: Command to add the scroll-area component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add scroll-area\n```\n\n----------------------------------------\n\nTITLE: Block Registry Definition\nDESCRIPTION: Example of registering a new block in the registry-blocks.tsx file with metadata and file definitions\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const blocks = [\n  // ...\n  {\n    name: \"dashboard-01\",\n    author: \"shadcn (https://ui.shadcn.com)\",\n    title: \"Dashboard\",\n    description: \"A simple dashboard with a hello world component.\",\n    type: \"registry:block\",\n    registryDependencies: [\"input\", \"button\", \"card\"],\n    dependencies: [\"zod\"],\n    files: [\n      {\n        path: \"blocks/dashboard-01/page.tsx\",\n        type: \"registry:page\",\n        target: \"app/dashboard/page.tsx\",\n      },\n      {\n        path: \"blocks/dashboard-01/components/hello-world.tsx\",\n        type: \"registry:component\",\n      },\n      {\n        path: \"blocks/dashboard-01/components/example-card.tsx\",\n        type: \"registry:component\",\n      },\n      {\n        path: \"blocks/dashboard-01/hooks/use-hello-world.ts\",\n        type: \"registry:hook\",\n      },\n      {\n        path: \"blocks/dashboard-01/lib/format-date.ts\",\n        type: \"registry:lib\",\n      },\n    ],\n    categories: [\"dashboard\"],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind CSS in TanStack Start\nDESCRIPTION: This snippet creates a PostCSS configuration file to enable Tailwind CSS processing in a TanStack Start project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Background and Foreground Classes in TSX\nDESCRIPTION: Example of using background and foreground CSS classes for basic theming in a component\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-background text-foreground\" />\n```\n\n----------------------------------------\n\nTITLE: Cleaning up test user after Cypress tests\nDESCRIPTION: Example of using the Cypress cleanup utility to delete the test user after each test.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nafterEach(() => {\n  cy.cleanupUser();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar in Tailwind CSS\nDESCRIPTION: Configuration for the sidebar component in tailwind.config.js. This adds sidebar-related utility classes that can be used throughout the application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nsidebar: {\n  DEFAULT: 'hsl(var(--sidebar-background))',\n  foreground: 'hsl(var(--sidebar-foreground))',\n  primary: 'hsl(var(--sidebar-primary))',\n  'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n  accent: 'hsl(var(--sidebar-accent))',\n  'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n  border: 'hsl(var(--sidebar-border))',\n  ring: 'hsl(var(--sidebar-ring))',\n},\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner Dependencies Manually\nDESCRIPTION: Command to manually install the required dependencies for Sonner including the next-themes package.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sonner next-themes\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install all dependencies in the monorepo using PNPM package manager.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui\nDESCRIPTION: Command to initialize shadcn/ui in the project\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Adding Icon Styling Classes\nDESCRIPTION: Code diff showing the addition of icon-related CSS classes to the DropdownMenuItem component\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative ... gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI tooltip dependency for manual setup.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-tooltip\n```\n\n----------------------------------------\n\nTITLE: Rendering Images in JSX for Registry Documentation\nDESCRIPTION: This snippet demonstrates how to render images in JSX for documenting a custom registry. It includes both light and dark mode versions of the image, with a caption.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<figure className=\"flex flex-col gap-4\">\n  <Image\n    src=\"/images/registry-light.png\"\n    width=\"1432\"\n    height=\"960\"\n    alt=\"Registry\"\n    className=\"border dark:hidden shadow-sm rounded-lg overflow-hidden mt-6 w-full\"\n  />\n  <Image\n    src=\"/images/registry-dark.png\"\n    width=\"1432\"\n    height=\"960\"\n    alt=\"Registry\"\n    className=\"border hidden dark:block shadow-sm rounded-lg overflow-hidden mt-6 w-full\"\n  />\n  <figcaption className=\"text-center text-sm text-gray-500\">\n    Distribute code to any React project.\n  </figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component Dependencies Manually\nDESCRIPTION: This command installs the required Radix UI Avatar component dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-avatar\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: Command to create and checkout a new Git branch for development work.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-branch\n```\n\n----------------------------------------\n\nTITLE: Installing Pagination Component via CLI\nDESCRIPTION: Command to install the pagination component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add pagination\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Item Name in JSON\nDESCRIPTION: Demonstrates how to set the name property for a registry item, which should be unique within the registry.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello-world\"\n}\n```\n\n----------------------------------------\n\nTITLE: SubTrigger Icon Styling\nDESCRIPTION: Implementation of icon styling classes for the DropdownMenuSubTrigger component\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DropdownMenuPrimitive.SubTrigger\n  ref={ref}\n  className={cn(\n    \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n    inset && \"pl-8\",\n    className\n  )}\n  {...props}\n>\n  {/* ... */}\n</DropdownMenuPrimitive.SubTrigger>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and dependencies for TanStack Start\nDESCRIPTION: This command installs Tailwind CSS and its required dependencies for a TanStack Start project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss @tailwindcss/postcss postcss\n```\n\n----------------------------------------\n\nTITLE: Options for shadcn build Command\nDESCRIPTION: Detailed options for the 'build' command, including arguments for registry path and output directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn build [options] [registry]\n\nbuild components for a shadcn registry\n\nArguments:\n  registry             path to registry.json file (default: \"./registry.json\")\n\nOptions:\n  -o, --output <path>  destination directory for json files (default: \"./public/r\")\n  -c, --cwd <cwd>      the working directory. defaults to the current directory. (default:\n                       \"/Users/shadcn/Code/shadcn/ui/packages/shadcn\")\n  -h, --help           display help for command\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Component Dependencies Manually\nDESCRIPTION: Command to install the required dependency (vaul) for the Drawer component manually.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vaul\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI toast dependency for manual setup.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toast\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Header with Dropdown in TypeScript React\nDESCRIPTION: Demonstrates how to create a Sidebar header with a dropdown menu using SidebarHeader, SidebarMenu, and DropdownMenu components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarHeader>\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton>\n              Select Workspace\n              <ChevronDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-[--radix-popper-anchor-width]\">\n            <DropdownMenuItem>\n              <span>Acme Inc</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              <span>Acme Corp.</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  </SidebarHeader>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Path Configuration\nDESCRIPTION: JSConfig configuration for setting up import aliases in JavaScript projects.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\".//*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Tailwind Color in JSON Configuration (v4)\nDESCRIPTION: This snippet shows how to add a new Tailwind color by defining it in the cssVars section of the JSON configuration for Tailwind CSS v4.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    // ...\n  ],\n  \"cssVars\": {\n    \"light\": {\n      \"brand-background\": \"20 14.3% 4.1%\",\n      \"brand-accent\": \"20 14.3% 4.1%\"\n    },\n    \"dark\": {\n      \"brand-background\": \"20 14.3% 4.1%\",\n      \"brand-accent\": \"20 14.3% 4.1%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining the page title and description metadata for the About page documentation.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/about.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: About\ndescription: Powered by amazing open source projects.\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar CSS Variables\nDESCRIPTION: CSS variables for theming the sidebar component in both light and dark modes. These variables control the appearance of the sidebar including background, foreground, borders and accent colors.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git\nDESCRIPTION: Command to clone the forked repository to your local machine using Git.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/ui.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dropdown Menu Dependencies\nDESCRIPTION: Command to install the required Radix UI dropdown menu package using npm\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Capturing Block Screenshots\nDESCRIPTION: Command to capture screenshots of the block for documentation\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm registry:capture\n```\n\n----------------------------------------\n\nTITLE: Adding Components to shadcn/ui Monorepo Project\nDESCRIPTION: Commands to navigate to the web app directory and add components using the shadcn/ui CLI. The CLI automatically handles component installation and import path management.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd apps/web\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@canary add [COMPONENT]\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn/ui Components\nDESCRIPTION: Command to add specific components from shadcn/ui\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Using New CLI Command for shadcn-ui\nDESCRIPTION: Example of using the new CLI to initialize components using the npx command\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn init sidebar-01 login-01\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind Dependencies\nDESCRIPTION: Command to install Tailwind CSS and autoprefixer as development dependencies\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss@latest autoprefixer@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Development Branch\nDESCRIPTION: Command to create a new branch for block development\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b username/my-new-block\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component Registry Structure in JSON\nDESCRIPTION: This snippet shows the overall structure of a registry.json file, including the schema reference, registry name, homepage, and an example item definition.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry.json\",\n  \"name\": \"shadcn\",\n  \"homepage\": \"https://ui.shadcn.com\",\n  \"items\": [\n    {\n      \"name\": \"hello-world\",\n      \"type\": \"registry:block\",\n      \"title\": \"Hello World\",\n      \"description\": \"A simple hello world component.\",\n      \"files\": [\n        {\n          \"path\": \"registry/new-york/hello-world/hello-world.tsx\",\n          \"type\": \"registry:component\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: React Logo SVG Component\nDESCRIPTION: Basic SVG structure for React logo with role, viewBox and className props. Shows just the opening tag as the path definition was truncated.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<svg\n  role=\"img\"\n  viewBox=\"0 0 24 24\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  className=\"w-10 h-10\"\n  fill=\"currentColor\"\n>\n  <title>React</title>\n```\n\n----------------------------------------\n\nTITLE: Specifying Registry Item Type in JSON\nDESCRIPTION: Demonstrates how to set the type property for a registry item, which determines its type and target path when resolved for a project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"registry:block\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Types\nDESCRIPTION: Command to install Node.js type definitions as a dev dependency\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @types/node\n```\n\n----------------------------------------\n\nTITLE: Warning Notice for Auto-generated Files\nDESCRIPTION: Markdown text warning developers not to manually edit files in this directory as they are auto-generated by the build-registry.ts script.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/__registry__/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFiles inside this directory is autogenerated by `./scripts/build-registry.ts`. **Do not edit them manually.**\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Dependencies via CLI\nDESCRIPTION: Command to install the switch component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Building the Component Registry\nDESCRIPTION: Command to update the component registry after making changes to components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:registry\n```\n\n----------------------------------------\n\nTITLE: Registry Categories Definition\nDESCRIPTION: Example of adding a new category to the registry categories configuration\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const registryCategories = [\n  // ...\n  {\n    name: \"Input\",\n    slug: \"input\",\n    hidden: false,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components in React\nDESCRIPTION: This code snippet shows how to import the Tabs components in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n```\n\n----------------------------------------\n\nTITLE: Installing Input Component via CLI\nDESCRIPTION: Command to install the Input component using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add input\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for shadcn-ui in Gatsby\nDESCRIPTION: This shows the configuration prompts and responses for setting up components.json for shadcn-ui in a Gatsby project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nWould you like to use TypeScript (recommended)? no / yes\nWhich style would you like to use? â€º Default\nWhich color would you like to use as base color? â€º Slate\nWhere is your global CSS file? â€º â€º ./src/styles/globals.css\nDo you want to use CSS variables for colors? â€º no / yes\nWhere is your tailwind.config.js located? â€º tailwind.config.js\nConfigure the import alias for components: â€º @/components\nConfigure the import alias for utils: â€º @/lib/utils\nAre you using React Server Components? â€º no\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests with PNPM\nDESCRIPTION: Command to execute all tests in the repository using Vitest through PNPM.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Adding Registry Build Script\nDESCRIPTION: Package.json configuration for adding the registry build command.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"registry:build\": \"shadcn build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion via shadcn CLI\nDESCRIPTION: Command to add the accordion component using shadcn's CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add accordion\n```\n\n----------------------------------------\n\nTITLE: Installing Input OTP via NPM\nDESCRIPTION: Command to install the input-otp dependency using npm package manager.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install input-otp\n```\n\n----------------------------------------\n\nTITLE: Using Separator Component in React JSX\nDESCRIPTION: Example of how to use the Separator component in React JSX.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Separator />\n```\n\n----------------------------------------\n\nTITLE: Installing Badge Component via CLI\nDESCRIPTION: Command to install the badge component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add badge\n```\n\n----------------------------------------\n\nTITLE: Example of Prefixed Tailwind Classes\nDESCRIPTION: Example showing how Tailwind classes can be prefixed with 'tw-' when using custom prefix configuration\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AlertDialog className=\"tw-grid tw-gap-4 tw-border tw-bg-background tw-shadow-lg\" />\n```\n\n----------------------------------------\n\nTITLE: Component Diff Command\nDESCRIPTION: Experimental command to check for component updates.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn diff\n```\n\n----------------------------------------\n\nTITLE: Building Registry Components\nDESCRIPTION: Command to build the registry components\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm registry:build\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui in Astro Project\nDESCRIPTION: Command to run the shadcn CLI for initializing the project setup for using shadcn/ui components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React\nDESCRIPTION: How to import the Input component in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from \"@/components/ui/input\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Remix Project\nDESCRIPTION: Command to create a new Remix project using create-remix CLI\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Textarea Component via CLI\nDESCRIPTION: Command to install the textarea component using the shadcn CLI tool\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add textarea\n```\n\n----------------------------------------\n\nTITLE: Rendering Accordion Component in React\nDESCRIPTION: Example of using shadcn/ui's Accordion component with collapsible functionality and custom styling. Shows the composable nature of the components using AccordionItem, AccordionTrigger, and AccordionContent.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion collapsible>\n  <AccordionItem value=\"faq-1\" className=\"border-none\">\n    <AccordionTrigger>\n      How do I pull upstream updates in an Open Code approach?\n    </AccordionTrigger>\n    <AccordionContent>\n      <p>\n        shadcn/ui follows a headless component architecture. This means the core\n        of your app can receive fixes by updating your dependencies, for\n        instance, radix-ui or input-otp.\n      </p>\n      <p className=\"mt-4\">\n        The topmost layer, i.e., the one closest to your design system, is not\n        coupled with the implementation of the library. It stays open for\n        modification.\n      </p>\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Installing Separator Component via CLI\nDESCRIPTION: Command to install the Separator component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add separator\n```\n\n----------------------------------------\n\nTITLE: Displaying Repository Structure in Bash\nDESCRIPTION: A structured representation of the repository's directory organization, showing the apps and packages directories with their nested components.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napps\nâ””â”€â”€ www\n    â”œâ”€â”€ app\n    â”œâ”€â”€ components\n    â”œâ”€â”€ content\n    â””â”€â”€ registry\n        â”œâ”€â”€ default\n        â”‚   â”œâ”€â”€ example\n        â”‚   â””â”€â”€ ui\n        â””â”€â”€ new-york\n            â”œâ”€â”€ example\n            â””â”€â”€ ui\npackages\nâ””â”€â”€ cli\n```\n\n----------------------------------------\n\nTITLE: Installing Menubar Component Dependencies Manually\nDESCRIPTION: Command to install the required dependencies for the Menubar component using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-menubar\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript App Config\nDESCRIPTION: TypeScript configuration for tsconfig.app.json file to resolve paths in IDE\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Context Menu via shadcn CLI\nDESCRIPTION: Command to add the context menu component using shadcn's CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add context-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component Dependencies Manually\nDESCRIPTION: Command to install the required dependencies for the Button component manually using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-slot\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm www:dev\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Component Dependencies\nDESCRIPTION: Command to install the required Radix UI Toggle Group dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toggle-group\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Hover Card\nDESCRIPTION: Command to install the Radix UI Hover Card dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-hover-card\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component via CLI\nDESCRIPTION: Command to add the Select component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add select\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component Dependencies\nDESCRIPTION: Command to install the required dependency for the Slider component using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-slider\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install the required react-resizable-panels package using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-resizable-panels\n```\n\n----------------------------------------\n\nTITLE: Installing ScrollArea Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI scroll area dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-scroll-area\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby project with TypeScript and Tailwind CSS\nDESCRIPTION: This shows the configuration prompts and responses for setting up a Gatsby project with TypeScript and Tailwind CSS.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nâœ” What would you like to call your site?\nÂ· your-app-name\nâœ” What would you like to name the folder where your site will be created?\nÂ· your-app-name\nâœ” Will you be using JavaScript or TypeScript?\nÂ· TypeScript\nâœ” Will you be using a CMS?\nÂ· Choose whatever you want\nâœ” Would you like to install a styling system?\nÂ· Tailwind CSS\nâœ” Would you like to install additional features with other plugins?\nÂ· Choose whatever you want\nâœ” Shall we do this? (Y/n) Â· Yes\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Component via CLI\nDESCRIPTION: Command to add the toggle component using shadcn's CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add toggle\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Options in components.json\nDESCRIPTION: Configuration file for shadcn-ui components showing how to opt-out of TypeScript using the tsx flag. Includes settings for style, tailwind configuration, and import aliases.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"rsc\": false,\n  \"tsx\": false,\n  \"aliases\": {\n    \"utils\": \"~/lib/utils\",\n    \"components\": \"~/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Dependencies Installation\nDESCRIPTION: Command to manually install required dependencies for the form component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod\n```\n\n----------------------------------------\n\nTITLE: Adding Components with shadcn CLI\nDESCRIPTION: This command adds a specified component to the project and installs all required dependencies. It can be used with a component name as an argument.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn add [component]\n```\n\n----------------------------------------\n\nTITLE: Disabled State Configuration\nDESCRIPTION: Implementation of disabled state styling for the Input OTP component using Tailwind CSS classes.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component via CLI\nDESCRIPTION: Command to install the Sheet component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add sheet\n```\n\n----------------------------------------\n\nTITLE: Typography Component Examples\nDESCRIPTION: Series of component preview declarations for different typography elements including headings, paragraphs, blockquotes, tables, lists, and text styles.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/typography.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentPreview name=\"typography-h1\" />\n<ComponentPreview name=\"typography-h2\" />\n<ComponentPreview name=\"typography-h3\" />\n<ComponentPreview name=\"typography-h4\" />\n<ComponentPreview name=\"typography-p\" />\n<ComponentPreview name=\"typography-blockquote\" />\n<ComponentPreview name=\"typography-table\" />\n<ComponentPreview name=\"typography-list\" />\n<ComponentPreview name=\"typography-inline-code\" />\n<ComponentPreview name=\"typography-lead\" />\n<ComponentPreview name=\"typography-large\" />\n<ComponentPreview name=\"typography-small\" />\n<ComponentPreview name=\"typography-muted\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Dependencies\nDESCRIPTION: Command to install the required Radix UI checkbox dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI Dialog dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-dialog\n```\n\n----------------------------------------\n\nTITLE: Button Variant Configuration\nDESCRIPTION: Configuration for button component variants including size options.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst buttonVariants = cva({\n  variants: {\n    size: {\n      default: \"h-10 px-4 py-2\",\n      sm: \"h-9 rounded-md px-3\",\n      lg: \"h-11 rounded-md px-8\",\n      icon: \"h-10 w-10\",\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Menubar Component via CLI\nDESCRIPTION: Command to install the Menubar component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add menubar\n```\n\n----------------------------------------\n\nTITLE: Setting Registry Item Title in JSON\nDESCRIPTION: Shows how to set a human-readable title for a registry item using the title property.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Hello World\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Toast Component in a React Component\nDESCRIPTION: Example of implementing a toast notification in a React component using the useToast hook. The toast displays a title and description when a button is clicked.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ToastDemo = () => {\n  const { toast } = useToast()\n\n  return (\n    <Button\n      onClick={() => {\n        toast({\n          title: \"Scheduled: Catch up\",\n          description: \"Friday, February 10, 2023 at 5:57 PM\",\n        })\n      }}\n    >\n      Show Toast\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component\nDESCRIPTION: TypeScript/React code showing how to import the Select component and its subcomponents.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Components in React\nDESCRIPTION: TypeScript code snippet showing how to import the tooltip components for use in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Calendar Component\nDESCRIPTION: Command to install required dependencies for the Calendar component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-day-picker@8.10.1 date-fns\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Variant in TypeScript React\nDESCRIPTION: Demonstrates how to use the 'variant' prop to change the visual style of the Sidebar. Available options are 'sidebar', 'floating', and 'inset'.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sidebar } from \"@/components/ui/sidebar\"\n\nexport function AppSidebar() {\n  return <Sidebar variant=\"sidebar | floating | inset\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Registry Item Description in JSON\nDESCRIPTION: Illustrates how to provide a detailed description for a registry item using the description property.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple hello world component.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Component to Root Layout with CLI Method\nDESCRIPTION: How to integrate the Toaster component into the root layout when using the CLI installation method.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toaster } from \"@/components/ui/toaster\"\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head />\n      <body>\n        <main>{children}</main>\n        <Toaster />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Link Integration\nDESCRIPTION: Code diff showing how to modify the pagination component to use Next.js Link component instead of standard anchor tags.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ import Link from \"next/link\"\n\n- type PaginationLinkProps = ... & React.ComponentProps<\"a\">\n+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>\n\nconst PaginationLink = ({...props }: ) => (\n  <PaginationItem>\n-   <a>\n+   <Link>\n      // ...\n-   </a>\n+   </Link>\n  </PaginationItem>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Menu Components\nDESCRIPTION: TypeScript code showing how to import the necessary dropdown menu components from the UI library\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n```\n\n----------------------------------------\n\nTITLE: Typography Component Preview Declarations\nDESCRIPTION: Front matter and component preview declarations for typography documentation. Includes various typography elements like headings, paragraphs, lists, and text styles.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/typography.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Typography\ndescription: Styles for headings, paragraphs, lists...etc\ncomponent: true\n---\n\n<ComponentPreview\n  name=\"typography-demo\"\n  className=\"[&>div.min-h-[350px]]:p-6\"\n  description=\"A collection of typographic elements.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Components\nDESCRIPTION: Import statement for all breadcrumb-related components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\n```\n\n----------------------------------------\n\nTITLE: Importing Carousel Components\nDESCRIPTION: How to import the basic carousel components from the UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\"\n```\n\n----------------------------------------\n\nTITLE: npm Peer Dependency Error Message with React 19\nDESCRIPTION: The error message displayed when installing a package that doesn't list React 19 as a peer dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm error code ERESOLVE\nnpm error ERESOLVE unable to resolve dependency tree\nnpm error\nnpm error While resolving: my-app@0.1.0\nnpm error Found: react@19.0.0-rc-69d4b800-20241021\nnpm error node_modules/react\nnpm error   react@\"19.0.0-rc-69d4b800-20241021\" from the root project\n```\n\n----------------------------------------\n\nTITLE: Block Directory Structure\nDESCRIPTION: Example directory structure for a new block in the registry\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\napps\nâ””â”€â”€ www\n    â””â”€â”€ registry\n        â””â”€â”€ new-york\n            â””â”€â”€ blocks\n                â””â”€â”€ dashboard-01\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Tooltip with Data Keys\nDESCRIPTION: This snippet demonstrates how to customize the chart tooltip by specifying custom keys for label and name in the tooltip content.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ChartTooltip\n  content={<ChartTooltipContent labelKey=\"visitors\" nameKey=\"browser\" />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component\nDESCRIPTION: How to import the Badge component into your React/TypeScript project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from \"@/components/ui/badge\"\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component\nDESCRIPTION: Example showing how to import the Progress component from the components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Progress } from \"@/components/ui/progress\"\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component\nDESCRIPTION: Imports the Alert component and its related subcomponents from the components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner via CLI\nDESCRIPTION: Command to install the Sonner component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add sonner\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollArea Component\nDESCRIPTION: Example of importing the ScrollArea component from the components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Dialog Component Dependencies Manually\nDESCRIPTION: Command to install the required dependencies for the Alert Dialog component manually using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS\nDESCRIPTION: Basic Tailwind CSS import configuration for the main CSS file\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Updating Sheet Component Position Prop\nDESCRIPTION: A diff showing the replacement of the 'position' prop with 'side' prop in the Sheet component usage.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- <Sheet position=\"right\" />\n+ <Sheet side=\"right\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema for registry.json in JSON\nDESCRIPTION: This snippet demonstrates how to specify the schema for the registry.json file using the $schema property.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for React TypeScript Project\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions in ESLint for a React TypeScript project. It sets the ECMAScript version, source type, and specifies the TypeScript configuration files.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/vite-with-tailwind/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Table Component and TanStack Table Dependency\nDESCRIPTION: Commands to add the Table component from shadcn/ui and install the TanStack Table dependency.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add table\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/react-table\n```\n\n----------------------------------------\n\nTITLE: Importing Label Component\nDESCRIPTION: Example of importing the Label component from the components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label } from \"@/components/ui/label\"\n```\n\n----------------------------------------\n\nTITLE: Importing Separator Component in React\nDESCRIPTION: Example of how to import the Separator component in a React application.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Separator } from \"@/components/ui/separator\"\n```\n\n----------------------------------------\n\nTITLE: Installing Label Component Dependencies\nDESCRIPTION: Command to install the required Radix UI label dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-label\n```\n\n----------------------------------------\n\nTITLE: Initializing ShadcnUI Configuration - Bash Command\nDESCRIPTION: Command to create a new components.json configuration file in your project using the ShadcnUI CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing Navigation Menu Dependencies Manually\nDESCRIPTION: Command to install the required Radix UI dependency for the Navigation Menu component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-navigation-menu\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Router Project with shadcn/ui\nDESCRIPTION: Command to create a new TanStack Router project with tailwind and shadcn add-ons using create-tsrouter-app.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-tsrouter-app@latest my-app --template file-router --tailwind --add-ons shadcn\n```\n\n----------------------------------------\n\nTITLE: Custom Sidebar Trigger\nDESCRIPTION: Example of creating a custom sidebar trigger using the useSidebar hook.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSidebar } from \"@/components/ui/sidebar\"\n\nexport function CustomTrigger() {\n  const { toggleSidebar } = useSidebar()\n\n  return <button onClick={toggleSidebar}>Toggle Sidebar</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Components\nDESCRIPTION: Import statement for pagination-related components including content, ellipsis, items, links, and navigation buttons.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby project using create-gatsby\nDESCRIPTION: This command initializes a new Gatsby project using the create-gatsby tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Menu Trigger Style in React\nDESCRIPTION: Import statement for the navigation menu trigger style function.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { navigationMenuTriggerStyle } from \"@/components/ui/navigation-menu\"\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI toggle dependency using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-toggle\n```\n\n----------------------------------------\n\nTITLE: Running shadcn-ui initialization in Gatsby project\nDESCRIPTION: This command runs the shadcn-ui initialization process in a Gatsby project.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Directory for shadcn build Command\nDESCRIPTION: Example of using the '--output' option to customize the output directory for the 'build' command.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest build --output ./public/registry\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui\nDESCRIPTION: Command to initialize shadcn/ui in the project using the CLI\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Structure with Separator\nDESCRIPTION: Example showing basic sidebar structure using SidebarSeparator component to create visual breaks between sections.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n<Sidebar>\n  <SidebarHeader />\n  <SidebarSeparator />\n  <SidebarContent>\n    <SidebarGroup />\n    <SidebarSeparator />\n    <SidebarGroup />\n  </SidebarContent>\n</Sidebar>\n```\n\n----------------------------------------\n\nTITLE: Installing Card Component via CLI\nDESCRIPTION: Command to install the card component using the shadcn CLI tool\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add card\n```\n\n----------------------------------------\n\nTITLE: Installing Context Menu Dependencies via NPM\nDESCRIPTION: Command to install the required Radix UI context menu dependency using npm package manager.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-context-menu\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component\nDESCRIPTION: Example of importing the Switch component from the components directory.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from \"@/components/ui/switch\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Mode Toggle in Astro Page\nDESCRIPTION: This snippet demonstrates how to import and display the ModeToggle component in an Astro page. It includes the necessary import statement and places the component within the body of the HTML structure.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#2025-04-21_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport '../styles/globals.css'\nimport { ModeToggle } from '@/components/ModeToggle';\n---\n\n<!-- Inline script -->\n\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n      <ModeToggle client:load />\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository for Block Development\nDESCRIPTION: Initial setup command to clone the shadcn-ui repository\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/shadcn-ui/ui.git\n```\n\n----------------------------------------\n\nTITLE: Creating a new Laravel project with React\nDESCRIPTION: This command uses the Laravel installer to create a new project with React and Inertia.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlaravel new my-app --react\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Theming Example\nDESCRIPTION: Example of using CSS variables for component theming.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-background text-foreground\" />\n```\n\n----------------------------------------\n\nTITLE: Running CLI Package in Development Mode\nDESCRIPTION: Command to start the development server for the shadcn-ui CLI package using PNPM's filter feature.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=shadcn-ui dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Open in v0 Button Component in React\nDESCRIPTION: This code snippet defines a React component for an 'Open in v0' button. It creates a styled button that links to the v0 API endpoint for opening a specified URL. The component includes the v0 logo and is designed to work with the shadcn UI library.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/open-in-v0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n\nexport function OpenInV0Button({ url }: { url: string }) {\n  return (\n    <Button\n      aria-label=\"Open in v0\"\n      className=\"h-8 gap-1 rounded-[6px] bg-black px-3 text-xs text-white hover:bg-black hover:text-white dark:bg-white dark:text-black\"\n      asChild\n    >\n      <a\n        href={`https://v0.dev/chat/api/open?url=${url}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Open in{\" \"}\n        <svg\n          viewBox=\"0 0 40 20\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-5 w-5 text-current\"\n        >\n          <path\n            d=\"M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z\"\n            fill=\"currentColor\"\n          ></path>\n          <path\n            d=\"M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6584 15.1654 20.6584 13.7688 19.0956Z\"\n            fill=\"currentColor\"\n          ></path>\n        </svg>\n      </a>\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Project Installation Command\nDESCRIPTION: Example of a shadcn-ui CLI installation path, showing where modifications are made.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nshadcn-ui\n```\n\n----------------------------------------\n\nTITLE: Importing Sheet Component\nDESCRIPTION: Example of importing the Sheet component and its related subcomponents for use in React applications.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\"\n```\n\n----------------------------------------\n\nTITLE: Running Website Workspace in Development Mode\nDESCRIPTION: Command to start the development server for the www workspace using PNPM's filter feature.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=www dev\n```\n\n----------------------------------------\n\nTITLE: Using Direct Color Values in Chart Configuration\nDESCRIPTION: This snippet illustrates how to use direct color values (like hex codes) in the chart configuration instead of CSS variables.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"#2563eb\",\n  },\n} satisfies ChartConfig\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn/ui Components\nDESCRIPTION: Command to add specific shadcn/ui components (in this case, the Button component) to the project using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@canary add button\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Component Structure in JSON\nDESCRIPTION: This snippet demonstrates the structure of a complex component in a registry, including multiple files of different types and their target locations.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    {\n      \"path\": \"registry/new-york/hello-world/page.tsx\",\n      \"type\": \"registry:page\",\n      \"target\": \"app/hello/page.tsx\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/components/hello-world.tsx\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/components/formatted-message.tsx\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/hooks/use-hello.ts\",\n      \"type\": \"registry:hook\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/lib/format-date.ts\",\n      \"type\": \"registry:utils\"\n    },\n    {\n      \"path\": \"registry/new-york/hello-world/hello.config.ts\",\n      \"type\": \"registry:file\",\n      \"target\": \"~/hello.config.ts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sidebar Component via CLI in shadcn/ui\nDESCRIPTION: Command to install the sidebar component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add sidebar\n```\n\n----------------------------------------\n\nTITLE: Schema Configuration - JSON\nDESCRIPTION: Basic configuration showing the schema reference for components.json file.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspect Ratio Component Dependencies Manually\nDESCRIPTION: Command to install the required dependency for the Aspect Ratio component using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Implementing Inset Sidebar Variant in TypeScript React\nDESCRIPTION: Shows how to use the 'inset' variant of the Sidebar, which requires wrapping the main content in a SidebarInset component for proper layout.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<SidebarProvider>\n  <Sidebar variant=\"inset\" />\n  <SidebarInset>\n    <main>{children}</main>\n  </SidebarInset>\n</SidebarProvider>\n```\n\n----------------------------------------\n\nTITLE: Gatsby Logo SVG Component\nDESCRIPTION: SVG icon component for Gatsby logo with title element and viewBox props. Includes a path definition for the Gatsby 'G' logo mark.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<svg\n  role=\"img\"\n  viewBox=\"0 0 24 24\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  className=\"w-10 h-10\"\n  fill=\"currentColor\"\n>\n  <title>Gatsby</title>\n  <path d=\"M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 2.571c3.171 0 5.915 1.543 7.629 3.858l-1.286 1.115C16.886 5.572 14.571 4.286 12 4.286c-3.343 0-6.171 2.143-7.286 5.143l9.857 9.857c2.486-.857 4.373-3 4.973-5.572h-4.115V12h6c0 4.457-3.172 8.228-7.372 9.17L2.83 9.944C3.772 5.743 7.543 2.57 12 2.57zm-9.429 9.6l9.344 9.258c-2.4-.086-4.801-.943-6.601-2.743-1.8-1.8-2.743-4.201-2.743-6.515z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Calendar Component via CLI\nDESCRIPTION: Command to install the Calendar component using the shadcn CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add calendar\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the cloned project root folder.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ui\n```\n\n----------------------------------------\n\nTITLE: Initializing Remix project and committing changes\nDESCRIPTION: Series of commands to initialize the Remix project, create a git repository, and make the initial commit.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx remix init\ngit init # if you haven't already\ngit add .\ngit commit -m \"Initialize project\"\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component Dependencies\nDESCRIPTION: Command to install the required Radix UI Progress primitive package using npm.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/react-progress\n```\n\n----------------------------------------\n\nTITLE: Running the CLI Development Workflow\nDESCRIPTION: A set of commands for testing the CLI during local development, including starting the registry site and running the CLI.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm www:dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm shadcn:dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm shadcn\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm shadcn <init | add | ...> -c ~/Desktop/my-app\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=shadcn test\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Embla Carousel Dependency\nDESCRIPTION: Command to install the required Embla Carousel React dependency for the carousel component.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install embla-carousel-react\n```\n\n----------------------------------------\n\nTITLE: Running Documentation in Development Mode\nDESCRIPTION: Command to start the development server for the documentation website.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=www dev\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Package name declaration for a shared TypeScript configuration workspace using code block formatting.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/packages/typescript-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@workspace/typescript-config`\n```\n\n----------------------------------------\n\nTITLE: Setting session secrets for Fly apps\nDESCRIPTION: Commands to generate and set session secrets for staging and production Fly apps.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) --app indie-stack-template\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32) --app indie-stack-template-staging\n```\n\n----------------------------------------\n\nTITLE: Using Open in v0 Button Component in React\nDESCRIPTION: This code snippet demonstrates how to use the OpenInV0Button component in a React application. It shows how to pass a URL to the component, which will be used to open the specified registry item in v0.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/open-in-v0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OpenInV0Button url=\"https://example.com/r/hello-world.json\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fly CLI and creating Fly apps\nDESCRIPTION: Commands to install Fly CLI, authenticate, and create staging and production apps on Fly.io.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfly auth signup\nfly apps create indie-stack-template\nfly apps create indie-stack-template-staging\n```\n\n----------------------------------------\n\nTITLE: Installing Label Component via CLI\nDESCRIPTION: Command to add the label component using the shadcn CLI tool.\nSOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add label\n```"
  }
]