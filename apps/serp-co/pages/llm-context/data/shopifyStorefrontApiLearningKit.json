[
  {
    "owner": "shopify",
    "repo": "storefront-api-learning-kit",
    "content": "TITLE: Creating a Cart with Shopify Storefront API - GraphQL\nDESCRIPTION: This GraphQL mutation creates a new cart along with a single line item using the specified CartInput object. It returns detailed information about the newly created cart, such as its id, creation and update timestamps, checkout URL, line item, product variant id, attributes, and cost details. Requires access to Shopify Storefront API and permission to create carts; expects CartInput with lines and attributes as variables, and returns a structured cart object including the checkout URL.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_37\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation createCart($cartInput: CartInput) {\n  cartCreate(input: $cartInput) {\n    cart {\n      id\n      createdAt\n      updatedAt\n      checkoutUrl\n      lines(first: 10) {\n        edges {\n          node {\n            id\n            merchandise {\n              ... on ProductVariant {\n                id\n              }\n            }\n          }\n        }\n      }\n      attributes {\n        key\n        value\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"cartInput\": {\n    \"lines\": [\n      {\n        \"quantity\": 1,\n        \"merchandiseId\": \"gid://shopify/ProductVariant/123\"\n      }\n    ],\n    \"attributes\": {\n      \"key\": \"cart_attribute_key\",\n      \"value\": \"This is a cart attribute value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Price Ranges - Shopify Storefront API - GraphQL\nDESCRIPTION: Fetches price ranges for products within a market (using country context), including both current and compare-at price ranges. Key outputs include minimum and maximum prices for each range, allowing for localized display of discounts or pricing bands. Expects a country code as the parameter, determining which prices are returned. Handles both priceRange and compareAtPriceRange objects for each product.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getProductPriceRanges($country: CountryCode) @inContext(country: $country) {\n  products(first: 1) {\n    edges {\n      node {\n        title\n        priceRange {\n          minVariantPrice {\n            amount\n            currencyCode  #active local currency\n          }\n          maxVariantPrice {\n            amount\n            currencyCode\n          }\n        }\n        compareAtPriceRange {\n          minVariantPrice {\n            amount\n            currencyCode  #active local currency\n          }\n          maxVariantPrice {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"country\": \"CA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Cart by ID with Shopify Storefront API - GraphQL\nDESCRIPTION: This GraphQL query retrieves comprehensive details for a cart identified by its ID, including lines, merchandise, attributes, cost breakdowns, and buyer identity fields. Designed to validate cart contents, retrieve buyer contact data, and audit pricing info. Requires Storefront API access and a valid cartId parameter, and outputs a full cart object with nested lines and buyer detail objects.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_38\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery cartQuery($cartId: ID!) {\n  cart(id: $cartId) {\n    id\n    createdAt\n    updatedAt\n    checkoutUrl\n    lines(first: 10) {\n      edges {\n        node {\n          id\n          quantity\n          merchandise {\n            ... on ProductVariant {\n              id\n            }\n          }\n          attributes {\n            key\n            value\n          }\n        }\n      }\n    }\n    attributes {\n      key\n      value\n    }\n    cost {\n      totalAmount {\n        amount\n        currencyCode\n      }\n      subtotalAmount {\n        amount\n        currencyCode\n      }\n      totalTaxAmount {\n        amount\n        currencyCode\n      }\n      totalDutyAmount {\n        amount\n        currencyCode\n      }\n    }\n    buyerIdentity {\n      email\n      phone\n      customer {\n        id\n      }\n      countryCode\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/50b74bf9dc2bc7a410053b5ffb31ba51\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Cart Lines with Shopify Storefront API - GraphQL\nDESCRIPTION: This mutation removes one or more line items from a cart by their IDs, returning updated lines and cost details. Inputs include cartId and an array of lineIds, and the operation reports both the updated cart and any userErrors if invalid lines are given. Useful for cart modification UIs and bulk operations; input lineIds must be valid for the specified cart.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_45\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation removeCartLines($cartId: ID!, $lineIds: [ID!]!) {\n  cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n    cart {\n      id\n      lines(first: 10){\n        edges\n        {\n          node{\n            quantity\n            merchandise{\n              ... on ProductVariant {\n                id\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n    \n    userErrors {\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/50b74bf9dc2bc7a410053b5ffb31ba51\",\n  \"lineIds\": [\n    \"gid://shopify/CartLine/7b9ed49f-830e-4142-9c81-e7f8249863ad?cart=50b74bf9dc2bc7a410053b5ffb31ba51\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Line Items in a Cart with Shopify Storefront API - GraphQL\nDESCRIPTION: This mutation adjusts existing line items within a cart, particularly altering quantity for a specified line. Inputs include cartId and an array of CartLineUpdateInput objects, and the mutation returns updated line items with their ids, quantities, merchandise ids, and cart cost details for validation. Requires an existing cart and line IDs; outputs updated info and can provide confirmation for application logic.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_39\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation updateCartLines($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n  cartLinesUpdate(cartId: $cartId, lines: $lines) {\n    cart {\n      id\n      lines(first: 10) {\n        edges {\n          node {\n            id\n            quantity\n            merchandise {\n              ... on ProductVariant {\n                id\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/50b74bf9dc2bc7a410053b5ffb31ba51\",\n  \"lines\": {\n    \"id\": \"gid://shopify/CartLine/7b9ed49f-830e-4142-9c81-e7f8249863ad?cart=50b74bf9dc2bc7a410053b5ffb31ba51\",\n    \"quantity\": 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Attributes with Shopify Storefront API - GraphQL\nDESCRIPTION: This mutation updates or replaces the custom attributes on a cart, which are key/value pairs storing additional information not present in default fields. Accepts the cartId and a list or object of AttributeInput entries. The mutation overwrites any previous attribute values and provides confirmation via the returned attributes field, plus userErrors for validation.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_43\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation updateCartAttributes($attributes: [AttributeInput!]!, $cartId: ID!) {\n  cartAttributesUpdate(attributes: $attributes, cartId: $cartId) {\n    cart {\n      id\n      attributes{\n        key\n        value\n      }\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"attributes\": {\n    \"key\": \"gift_wrap\",\n    \"value\": \"true\"\n  },\n  \"cartId\": \"gid://shopify/Cart/50b74bf9dc2bc7a410053b5ffb31ba51\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Delivery Addresses to Cart via Shopify Storefront API in GraphQL\nDESCRIPTION: This GraphQL mutation (cartDeliveryAddressesAdd) demonstrates how to add up to 20 delivery addresses to a Shopify cart identified by cartId. It expects details in the CartDeliveryInput object for each address, including standard fields such as firstName, lastName, address1, city, provinceCode, countryCode, and zip. On success, it returns the cart object with updated addresses, warnings, and any encountered userErrors. Prerequisites include a valid Shopify cart ID, and consideration should be given to address formatting and the maximum address limit.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_46\n\nLANGUAGE: gql\nCODE:\n```\nmutation cartDeliveryAddressesAdd($cartId: ID!, $delivery: CartDeliveryInput!)  {\n  cartDeliveryAddressesAdd(cartId: $cartId, delivery: $delivery) {\n    cart {\n      id\n      delivery {\n        addresses {\n          address {\n            id\n            ... on CartDeliveryAddress {\n              firstName\n              lastName\n              address1\n              address2\n              company\n              city\n              provinceCode\n              countryCode\n              zip\n            }\n          }\n          selected\n          oneTimeUse\n        }\n      }\n    }\n    warnings {\n      target\n      code\n      message\n    }\n    userErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/insert-cart-id-here\",\n  \"addresses\": [\n    {\n      \"address\": {\n        \"deliveryAddress\": {\n          \"firstName\": \"Jane\",\n          \"lastName\": \"Doe\",\n          \"address1\": \"1 South Street\",\n          \"city\": \"Shrewsbury\",\n          \"provinceCode\": \"MA\",\n          \"countryCode\": \"US\",\n          \"zip\": \"01545\"\n        }\n      },\n      \"selected\": false,\n      \"oneTimeUse\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Note with Shopify Storefront API - GraphQL\nDESCRIPTION: This mutation updates the note field of a cart, which allows for attaching freeform string information to an order (unlike attributes, which are key/value pairs). Requires only the cartId, and returns the id and new note. UserErrors may indicate validation failures; input note string must conform to shop-specific requirements.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_44\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation updateCartNote($cartId: ID!) {\n  cartNoteUpdate(cartId: $cartId) {\n    cart {\n      id\n      note\n      \n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/50b74bf9dc2bc7a410053b5ffb31ba51\",\n  \"note\": \"This is a test note\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Delivery Address via Shopify Storefront API in GraphQL\nDESCRIPTION: This GraphQL mutation (cartDeliveryAddressUpdate) enables updating details of an existing delivery address on a Shopify cart. Parameters include cartId and an array of addresses each containing their unique id and data to update. The response includes updated cart addresses, warnings, and userErrors. Inputs must match existing CartSelectableAddress IDs and typical address fields like address1, city, and zip, with unchanged fields omitted if not required.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_48\n\nLANGUAGE: gql\nCODE:\n```\nmutation cartDeliveryAddressUpdate($cartId: ID!, $delivery: CartDeliveryUpdateInput!)  {\n  cartDeliveryAddressUpdate(cartId: $cartId, delivery: $delivery) {\n    cart {\n      id\n      delivery {\n        addresses {\n          address {\n            id\n            ... on CartDeliveryAddress {\n              address1\n              city\n              provinceCode\n              countryCode\n              zip\n              firstName\n              lastName\n            }\n          }\n          selected\n          oneTimeUse\n        }\n      }\n    }\n    warnings {\n      target\n      code\n      message\n    }\n    userErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/insert-cart-id-here\",\n  \"addresses\": [\n    {\n      \"id\": \"gid://shopify/CartSelectableAddress/insert-address-id-here\",\n      \"address\": {\n        \"deliveryAddress\": {\n          \"address1\": \"1 Commerce Street\",\n          \"city\": \"Westborough\",\n          \"zip\": \"01581\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Delivery Addresses from Cart via Shopify Storefront API in GraphQL\nDESCRIPTION: This GraphQL mutation (cartDeliveryAddressesRemove) allows removing one or more delivery addresses from a Shopify cart using their address IDs. The operation requires the cartId and a list of addressIds and returns the cart with updated delivery addresses, warnings, and userErrors. The addressIds must be valid Shopify CartSelectableAddress global IDs. Limitations may apply to concurrent address modifications.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_47\n\nLANGUAGE: gql\nCODE:\n```\nmutation cartDeliveryAddressesRemove($cartId: ID!, $addressIds: [ID!]!)  {\n  cartDeliveryAddressesRemove(cartId: $cartId, addressIds: $addressIds) {\n    cart {\n      id\n      delivery {\n        addresses {\n          address {\n            id\n            ... on CartDeliveryAddress {\n              address1\n              city\n              provinceCode\n              countryCode\n              zip\n              firstName\n              lastName\n            }\n          }\n          selected\n          oneTimeUse\n        }\n      }\n    }\n    warnings {\n      target\n      code\n      message\n    }\n    userErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/insert-cart-id-here\",\n  \"addressIds\": [\n    \"gid://shopify/CartSelectableAddress/insert-address-id-here\",\n    \"gid://shopify/CartSelectableAddress/insert-address-id-here\",\n    \"gid://shopify/CartSelectableAddress/insert-address-id-here\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Products and Their Variants - Shopify Storefront API - GraphQL\nDESCRIPTION: Fetches the first three products with their respective details, including id, title, description, and handle. For each product, also retrieves the first three variants, including id, title, quantity available, and price (amount and currency code). This query requires access to the products connection and optionally uses pagination. Inputs: none. Outputs: detailed product and variant info, limited to three of each per parent entity.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_21\n\nLANGUAGE: gql\nCODE:\n```\nquery getProductsAndVariants {\n  products(first: 3) {\n    edges {\n      cursor\n      node {\n        id\n        title\n        description\n        handle\n        variants(first: 3) {\n          edges {\n            cursor\n            node {\n              id\n              title\n              quantityAvailable\n              price {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Discount Codes with Shopify Storefront API - GraphQL\nDESCRIPTION: This mutation sets or updates the discount codes applied to a given cart and returns the cart id, discountCodes objects (showing their code and applicability status), and detailed cost info. Inputs include cartId and an array of discountCodes, and the response also includes userErrors for invalid or inapplicable codes. Ensures added codes are syntactically valid and referenced in the shop's backend configuration.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_42\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation updateCartDiscountCodes($cartId: ID!, $discountCodes: [String!] ) {\n  cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {\n    cart {\n      id\n      discountCodes{\n        code\n        applicable\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n    \n    userErrors {\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/50b74bf9dc2bc7a410053b5ffb31ba51\",\n  \"discountCodes\": [\n    \"10_OFF\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Collections with Pagination in GraphQL\nDESCRIPTION: Fetches the first 10 collections from a Shopify store with pagination support. Returns collection IDs and handles along with page information.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCollections {\n  collections(first: 10) {\n    edges {\n      cursor\n      node {\n        id\n        handle\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products within Collection in GraphQL\nDESCRIPTION: Retrieves products from a specific collection with sorting and pagination. Includes product details, pricing, and image information.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery getProductsInCollection($handle: String!) {\n  collection(handle: $handle) {\n    id\n    title\n    products(first: 50, sortKey: BEST_SELLING) {\n      edges {\n        node {\n          id\n          title\n          vendor\n          availableForSale\n          images(first: 1) {\n            edges {\n              node {\n                id\n                url\n                width\n                height\n                altText\n              }\n            }\n          }\n          priceRange {\n            minVariantPrice {\n              amount\n              currencyCode\n            }\n            maxVariantPrice {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"handle\": \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Products in Collection by Type in GraphQL\nDESCRIPTION: Demonstrates product filtering within a collection based on product type. Supports filtering by type, vendor, variant options, price, stock and metafield value.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nquery getProductsOfProductTypeInCollection($handle: String!, $value: String!) {\n  collection(handle: $handle) {\n    handle\n    products(first: 10, filters: { productType: $value }) {\n    edges {\n      node {\n        handle\n        productType\n      }\n    }\n  }\n}\n}\n\nvariables\n{\n\"handle\": \"filterable-collection\",\n\"value\": \"shoes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products and Selling Plans with Fragments - Shopify Storefront API - GraphQL\nDESCRIPTION: Fetches up to 30 products and, for each product, retrieves up to 5 selling plan groups and up to 5 selling plans per group, using GraphQL fragments to standardize retrieval of price adjustments (percentage, fixed amount, or fixed price). Also returns pagination info for each connection. Inputs: none. Outputs: detailed hierarchical data tree of products, selling plan groups, and selling plans, including price adjustment structures.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_24\n\nLANGUAGE: gql\nCODE:\n```\nquery getProductSellingPlans {\n  products(first: 30) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        id\n        title\n        sellingPlanGroups(first: 5) {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n          }\n          edges {\n            cursor\n            node {\n              appName\n              name\n              options {\n                name\n                values\n              }\n              sellingPlans(first: 5) {\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                }\n                edges {\n                  cursor\n                  node {\n                    id\n                    description\n                    recurringDeliveries\n                    priceAdjustments {\n                      adjustmentValue {\n                        ... on SellingPlanPercentagePriceAdjustment {\n                          adjustmentPercentage\n                        }\n                        ... on SellingPlanFixedAmountPriceAdjustment {\n                          adjustmentAmount {\n                            amount\n                            currencyCode\n                          }\n                        }\n                        ... on SellingPlanFixedPriceAdjustment {\n                          price {\n                            amount\n                            currencyCode\n                          }\n                        }\n                      }\n                      orderCount\n                    }\n                    options {\n                      name\n                      value\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Media with Fragments - Shopify Storefront API - GraphQL\nDESCRIPTION: Retrieves three products and for each product returns up to ten media assets (images, external videos, 3D models, and videos) using a GraphQL fragment ('mediaFieldsByType') to specify fields for each media type. Restriction: media retrieval is for products only, not variants; media management (add/delete/upload) must use the Admin API. Inputs: none. Outputs: rich media metadata for each product, with details varying by media type.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_25\n\nLANGUAGE: gql\nCODE:\n```\nquery getProductMedia {\n  products(first: 3) {\n    edges {\n      cursor\n      node {\n        id\n        title\n        description\n        media(first: 10) {\n          edges {\n            node {\n              mediaContentType\n              alt\n              ...mediaFieldsByType\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment mediaFieldsByType on Media {\n  ...on ExternalVideo {\n    id\n    host\n    originUrl\n  }\n  ...on MediaImage {\n    image {\n      url\n    }\n  }\n  ...on Model3d {\n    sources {\n      url\n      mimeType\n      format\n      filesize\n    }\n  }\n  ...on Video {\n    sources {\n      url\n      mimeType\n      format\n      height\n      width\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Product by Handle - Shopify Storefront API - GraphQL\nDESCRIPTION: Retrieves a single product by its unique handle (or optionally by id if the parameter is replaced), including id, title, description, and the first three variants with their id, title, quantity available, and price. Dependencies include a valid product handle ('my-test-product'); can be adjusted for use with a product id. Inputs: handle string. Outputs: product and limited variant data for the matched product.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_22\n\nLANGUAGE: gql\nCODE:\n```\nquery getProductByHandle {\n  product(handle: \"my-test-product\") {\n    id\n    title\n    description\n    variants(first: 3) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          quantityAvailable\n          price {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Recommendations - Shopify Storefront API - GraphQL\nDESCRIPTION: Obtains product recommendations for a specific product given its base64-encoded Shopify gid. The returned products include id, title, description, and the first three variants with their attributes. Inputs: productId as a Shopify gid string (e.g., 'gid://shopify/Product/123456789'). Outputs: a list of recommended product objects similar to the referenced product, with up to three variants each.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_23\n\nLANGUAGE: gql\nCODE:\n```\nquery getProductRecommendations {\n  productRecommendations(productId: \"gid://shopify/Product/123456789\") {\n    id\n    title\n    description\n    variants(first: 3) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          quantityAvailable\n          price {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Prices - Shopify Storefront API - GraphQL\nDESCRIPTION: Retrieves the prices of products in a specific market using the passed country context. Accepts a country code to localize the currency and fetches the title and price (amount and currency code) for the first product variant. Useful for reflecting accurate local pricing per market. Variables specify the country code that determines the currency context.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery allProducts($country: CountryCode) @inContext(country: $country) {\n  products(first: 1) {\n    edges {\n      node {\n        title\n        variants(first:1) {\n          edges {\n            node {\n              title\n              price {\n                amount\n                currencyCode #active local currency\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"country\": \"CA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Orders with Local Currencies - Shopify Storefront API - GraphQL\nDESCRIPTION: Retrieves a list of customer orders and detailed line items, supporting localization via country code context and customer access token for authentication. Returns order totals in store currency and variant prices in the local currency. Accepts parameters for customer access token and country code, and retrieves the first 10 orders along with line-level pricing, reflecting both default and localized contexts. Suitable for applications needing to display both local and base store pricing to users.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getcustomerOrders($customerAccessToken: String!, $country: CountryCode)@inContext(country: $country) {\n  customer(customerAccessToken: $customerAccessToken) {\n    orders(first:10) {\n      edges {\n        node {\n          totalPrice {\n            amount\n            currencyCode # store's currency\n          }\n          lineItems(first:10) {\n            edges {\n              node {\n                originalTotalPrice {\n                  amount\n                  currencyCode # store's currency\n                }\n                variant {\n                  price {\n                    amount\n                    currencyCode # active local currency\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"customerAccessToken\": \"customerAccessToken\",\n  \"country\": \"FR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Countries and Currencies - Shopify Storefront API - GraphQL\nDESCRIPTION: Fetches available countries and their currencies, including details on the localization configuration for the active and available markets. Requires an input country code and leverages Shopify Markets context. Returns localization info, available and active country with their currencies, and associated unit systems. Outputs customized by the country context specified; if a country is not enabled, falls back to store defaults. The variables section shows how to pass the country code parameter.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getCountriesAndCurrencies($country: CountryCode) @inContext(country: $country) {\n  localization {\n    language{ #The language of the active localized experience.\n      isoCode\n      name\n    }\n    availableCountries {\n      currency {\n        isoCode\n        name\n        symbol\n      }\n      isoCode\n      name\n      unitSystem\n    }\n    country { #The currency of the active localized experience.\n      currency {\n        isoCode\n        name\n        symbol\n      }\n      isoCode\n      name\n      unitSystem\n    }\n  }\n}\n\nvariables\n{\n  \"country\": \"FR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection by Handle in GraphQL\nDESCRIPTION: Retrieves a specific collection's details using its handle as an identifier. Returns the collection's ID, title, and description.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCollectionByHandle($handle: String!) {\n  collection(handle: $handle) {\n    id\n    title\n    description\n  }\n}\n\nvariables\n{\n  \"handle\": \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection by ID in GraphQL\nDESCRIPTION: Fetches collection details using a specific collection ID. Returns the collection's title, description, and handle.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCollectionById($id: ID!) {\n  collection(id: $id) {\n    title\n    description\n    handle\n  }\n}\n\nvariables\n{\n  \"id\": \"gid://shopify/Collection/1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Metaobjects via Shopify Storefront API - GraphQL\nDESCRIPTION: This GraphQL query fetches a list of metaobjects of a specified type from the Storefront API, supporting ordering (by ID or updated date), result count, and order direction. Requires the metaobject definition to have public Storefront API access. Inputs cover metaobject type, sorting key, number of results, and order; output includes metaobject IDs, field values, handles, update times, and types.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getMetaObjects(\\n  $type: String!,\\n  $sortKey: String,\\n  $first: Int,\\n  $reverse: Boolean\\n){\\n  metaobjects(\\n    type: $type,\\n    sortKey: $sortKey,\\n    first: $first,\\n    reverse: $reverse\\n  ) {\\n    edges {\\n      node {\\n        id\\n        fields {\\n          key\\n          value\\n        }\\n        handle\\n        updatedAt\\n        type\\n      }\\n    }\\n  }\\n}\\n\\nvariables\\n{\\n  \"type\": \"Product_Highlights\",\\n  \"sortKey\": \"id\",\\n  \"first\": 10,\\n  \"reverse\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Metaobject via Shopify Storefront API - GraphQL\nDESCRIPTION: This GraphQL query fetches a single metaobject by its storewide unique ID using the Storefront API, returning its type, update timestamp, handle, and all defined fields. To succeed, the metaobject must be defined and accessible to the Storefront API. Input is the metaobject ID, output is all key field data for the object.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getMetaObject($id: ID!) { # A metaobject can be retrieved by handle or id\\n  metaobject(id: $id) {\\n    id\\n    type\\n    updatedAt\\n    handle\\n    \\n    fields {\\n      key\\n      value\\n      type\\n    }\\n    \\n    fields {\\n      key\\n      value\\n      type\\n    }\\n  }\\n}\\n\\nvariables\\n{\\n  \"id\": \"gid://shopify/Metaobject/819214\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Shop Details with GraphQL - Shopify Storefront API - GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to retrieve the shop's name, its primary domain information, and payment settings (including currency code, accepted card brands, and enabled presentment currencies) using Shopify's Storefront API. The query depends on properly configured environment variables for the base URL, API version, and Storefront API access token in the requesting HTTP client (such as Insomnia). When executed with the appropriate permissions and headers, it returns structured details about the target shop; users must ensure that access scopes and tokens are set up as outlined in the documentation.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_0\n\nLANGUAGE: gql\nCODE:\n```\nquery getShopDetails{\n  shop {\n    name\n    primaryDomain{\n      host\n      url\n    }\n    paymentSettings{\n      currencyCode\n      acceptedCardBrands\n      enabledPresentmentCurrencies\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkout URL for Cart with Shopify Storefront API - GraphQL\nDESCRIPTION: This query retrieves the checkoutUrl for a specific cart based on its id, providing a direct URL for completing the checkout flow. Requires the cartId as input and outputs a cart object with only the checkoutUrl field. Useful for redirecting users to Shopify's web checkout; no additional dependencies beyond cart existence.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_41\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery checkoutURL($cartId: ID!) {\n  cart(id: $cartId) {\n    checkoutUrl\n  }\n}\n\nvariables\n{\n  \"cartId\": \"gid://shopify/Cart/50b74bf9dc2bc7a410053b5ffb31ba51\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Shop Policies via Shopify Storefront API in GraphQL\nDESCRIPTION: This GraphQL query (getShopPolicies) retrieves configurable shop policies including privacy, refund, shipping, terms of service, and subscription. Each policy includes its id, body (which may be up to 64kb), and title. The response is intended to display merchant policy documents to end users; the shop must have at least one of these policies set for them to be returned.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_49\n\nLANGUAGE: gql\nCODE:\n```\nquery getShopPolicies {\n  shop {\n    privacyPolicy {\n      id\n      body # Policy text, maximum size of 64kb.\n      title\n    }\n    refundPolicy {\n      id\n      body\n      title\n    }\n    shippingPolicy {\n      id\n      body\n      title\n    }\n    termsOfService {\n      id\n      body\n      title\n    }\n    subscriptionPolicy {\n      id\n      body\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Metafields via Shopify Storefront API - GraphQL\nDESCRIPTION: This GraphQL query retrieves a single metafield or multiple metafields for a specified Shopify collection by providing collection ID along with namespace and key parameters. Users must ensure the desired metafields have valid values assigned. Inputs are collection ID and identifiers for the metafields of interest; outputs include key, namespace, value, and ID for each metafield matched.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getCollectionMetaField(\\n  $id: ID!\\n  $namespace: String!\\n  $key: String!\\n  $another_namespace: String!\\n  $another_key: String!\\n) {\\n  collection(id: $id) {\\n    metafield(namespace: $namespace, key: $key) {\\n      key\\n      namespace\\n      value\\n      id # metafield id\\n    }\\n  }\\n  \\n  collection(id: $id) {\\n    metafields(\\n      identifiers: [\\n        { namespace: $namespace, key: $key },\\n        { namespace: $another_namespace, key: $another_key }\\n      ]\\n    ) {\\n      key\\n      namespace\\n      value\\n      id # metafield id\\n    }\\n  }\\n}\\n\\nvariables\\n{\\n  \"id\": \"gid://shopify/Collection/288378781858\",\\n  \"namespace\": \"garment_care\",\\n  \"key\": \"wash_temperature\",\\n  \"another_namespace\": \"bakery\",\\n  \"another_key\": \"ingredients-new\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Tags - Shopify Storefront API - GraphQL\nDESCRIPTION: Retrieves the first ten product tags using the 'productTags' connection. Usage of this query requires the 'unauthenticated_read_product_tags' access scope. Inputs: none. Outputs: paginated tags as 'node' string values, which can be used for product filtering or display purposes.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_26\n\nLANGUAGE: gql\nCODE:\n```\nquery getProductTags {\n  productTags(first:10) {\n    edges{\n      node\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Types - Shopify Storefront API - GraphQL\nDESCRIPTION: Retrieves up to ten distinct product types through the 'productTypes' connection. This query requires the 'unauthenticated_read_product_listings' access scope. Inputs: none. Outputs: a paginated list of strings representing all available product types in the store.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_27\n\nLANGUAGE: gql\nCODE:\n```\nquery getProductTypes {\n  productTypes(first: 10) {\n    edges{\n      node\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Page by Handle via Shopify Storefront API in GraphQL\nDESCRIPTION: This GraphQL query (getPageByHandle) retrieves a static custom page from the Shopify store by its handle. The required parameter is the page handle, and the response includes the page id, title, and an HTML-formatted body. Suitable for rendering static content such as 'About Us', this query requires the page to be created and published in the store admin.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_51\n\nLANGUAGE: gql\nCODE:\n```\nquery getPageByHandle($handle: String!) {\n  page(handle: $handle) {\n    id\n    title\n    body # The description of the page, complete with HTML formatting.\n  }\n}\n\nvariables\n{\n  \"handle\": \"my-page\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Blog and Articles by Handle via Shopify Storefront API in GraphQL\nDESCRIPTION: This GraphQL query (getBlogByHandle) fetches a blog from the Shopify store by its handle and includes up to five associated articles. Required parameter is the blog handle as a String. The returned data contains blog id, title, and a list of article nodes each with its id and title. The query is useful for constructing in-store magazine or newsletter features and requires the blog and articles be published to the online store channel.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_50\n\nLANGUAGE: gql\nCODE:\n```\nquery getBlogByHandle($handle: String!) {\n  blog(handle: $handle) {\n    id\n    title\n    articles(first: 5) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"handle\": \"my-blog\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Preferred Pickup Location Availability - Shopify Storefront API - GraphQL\nDESCRIPTION: Retrieves store variants available for pickup, prioritizing results by the buyer's preferred pickup location using the preferredLocationId context. Returns the product variant's availability, pickup time, and store location. Requires unauthenticated_read_product_pickup_locations API scope. Variables include the preferred location ID, product handle, and selected options for the variant. Results show only in-stock locations sorted by buyer's priorities.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_14\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getPreferredStoreAvailability ($preferredLocationId: ID, $handle: String!,$selectedOptions: [SelectedOptionInput!]!)@inContext(preferredLocationId: $preferredLocationId) {\n  product(handle: $handle) {\n    variantBySelectedOptions(selectedOptions: $selectedOptions) {\n      storeAvailability(first: 1) {\n        edges {\n          node {\n            available\n            pickUpTime\n            location {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"preferredLocationId\": \"gid://shopify/Location/65607794710\",\n  \"handle\": \"Orange\",\n  \"selectedOptions\": {\n    \"name\": \"Weight\",\n    \"value\": \"1 lb\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Pickup Availability for Product Variants - Shopify Storefront API - GraphQL\nDESCRIPTION: Checks pickup availability for a given product variant, given the product handle and variant options (name/value pairs). App must have unauthenticated_read_product_pickup_locations scope, and in-store pickup must be enabled per Shopify documentation. The query returns availability, pickup time, and store location name for a variant found by its options for the specified product. Variables accept the product handle, option name, and value.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getStoreAvailability($handle: String! $name: String! $value:String!) {\n  product(handle:$handle) {\n    variantBySelectedOptions(selectedOptions: {name: $name, value: $value}) {\n    storeAvailability(first: 1) {\n      edges {\n        node {\n          available\n          pickUpTime\n          location {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n}\n\nvariables\n{\n\"handle\": \"Orange\",\n\"name\": \"Weight\",\n\"value\": \"2 lb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Pickup Locations - Shopify Storefront API - GraphQL\nDESCRIPTION: Returns the first five shop locations supporting in-store pickup, sorted by proximity to a given geolocation using the near parameter. Outputs location id, name, and formatted address. Useful for allowing buyers to select the closest pickup option; sorting behavior can be changed via the sortKey argument (supports city, id, or name). Variables should specify latitude and longitude coordinates.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getNearestPickupLocations($location: GeoCoordinateInput!) {\n  locations(near:$location, first: 5, sortKey: DISTANCE) {\n    edges {\n      node {\n        id\n        name\n        address {\n          formatted\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"location\": {\n    \"latitude\": 45.4553,\n    \"longitude\": -75.6973\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Address - Shopify Storefront API (GraphQL)\nDESCRIPTION: This mutation creates a new address entry for the authenticated customer using the given address fields and a valid customer access token. Inputs are the token and a MailingAddressInput object with address details (name, address1, province, etc). The response includes the ID of the new customer address and any user errors. Note: this action appends to the customer's address array, and requires prior authentication.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_36\n\nLANGUAGE: gql\nCODE:\n```\nmutation customerAddressCreate($customerAccessToken: String!, $address: MailingAddressInput!) {\n  customerAddressCreate(customerAccessToken: $customerAccessToken, address: $address) {\n    customerUserErrors {\n      code\n      field\n      message\n    }\n    customerAddress {\n      id\n    }\n  }\n}\n\nvariables\n{\n  \"customerAccessToken\": \"7cd6d36137f41d57bb8e85ae0d178d60\",\n  \"address\": {\n    \"lastName\": \"Smith\",\n    \"firstName\": \"Mary\",\n    \"address1\": \"123 Test Street\",\n    \"province\": \"ON\",\n    \"country\": \"Canada\",\n    \"zip\": \"M5T1G4\",\n    \"city\": \"Toronto\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Buyer Identity on Cart with Shopify Storefront API - GraphQL\nDESCRIPTION: This mutation associates buyer identity information with an existing cart, updating fields such as email, phone, and delivery address preferences. It requires a CartBuyerIdentityInput object and the cart ID, returning the cart's id and the updated buyer identity, as well as userErrors for handling issues. Useful for implementing multi-country or logged-in customer scenarios; requires valid country codes and address structures.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_40\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation updateCartBuyerIdentity($buyerIdentity: CartBuyerIdentityInput!, $cartId: ID!) {\n  cartBuyerIdentityUpdate(buyerIdentity: $buyerIdentity, cartId: $cartId) {\n    cart {\n      id\n      buyerIdentity {\n        email\n        phone\n        deliveryAddressPreferences {\n          ... on MailingAddress {\n            address1\n            city\n            country\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"buyerIdentity\": {\n    \"countryCode\": \"CA\",\n    \"deliveryAddressPreferences\": [\n      {\n        \"deliveryAddress\": {\n          \"address1\": \"123 Fake St.\",\n          \"city\": \"Toronto\",\n          \"company\": \"Shopify\",\n          \"country\": \"Canada\",\n          \"firstName\": \"Alice\",\n          \"lastName\": \"Bob\",\n          \"province\": \"ON\"\n        }\n      }\n    ],\n    \"email\": \"example-email@shopify.com\"\n  },\n  \"cartId\": \"gid://shopify/Cart/684d5f8c6e463f6057e77c15e34082f0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Customer Password - Shopify Storefront API (GraphQL)\nDESCRIPTION: This mutation resets a customer's password using an ID and a CustomerResetInput block (password and resetToken) acquired by email recovery workflow. Requires: customer GID and matching resetToken. On success, returns the customer's details, new access token, and error objects. This operation is critical for account recovery; URL-based reset is also supported as an alternative.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_35\n\nLANGUAGE: gql\nCODE:\n```\nmutation resetCustomerAccount($id: ID!, $input: CustomerResetInput!) {\n  customerReset(id: $id, input: $input) {\n    customer {\n      id\n      email\n      firstName\n      lastName\n      phone\n    }\n    customerAccessToken {\n      accessToken\n      expiresAt\n    }\n    customerUserErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"id\": \"gid://shopify/Customer/5820694691862\",\n  \"input\": {\n    \"password\": \"12345qwerty\",\n    \"resetToken\": \"2279f05aebbb8319553e46f2b71c88c7-1671131136\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Orders - Shopify Storefront API (GraphQL)\nDESCRIPTION: This GraphQL query retrieves a customer's ID and the order numbers for their most recent three orders, using a valid customerAccessToken. Requires: the Storefront API and acquisition of a valid access token via prior authentication. The token is provided as a variable. Output includes a list of orderNumbers and handles user error cases. Only the first three orders are fetched due to the 'first:3' limitation.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_29\n\nLANGUAGE: gql\nCODE:\n```\nquery getCustomerOrders($customerAccessToken: String!){\n  customer(customerAccessToken: $customerAccessToken) {\n    id\n    orders(first:3) {\n      edges {\n        node {\n          orderNumber\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"customerAccessToken\": \"d794063da4e26c9b1a8d7b77bdfd6862\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cart in Localized Context - Shopify Storefront API - GraphQL\nDESCRIPTION: Creates a cart using the local market's language and currency by accepting parameters for cart input, country, and language. Ensures country and language must be enabled in respective market configurations. Returns user errors (if any), cart id, checkout URL, cart line details, and localized financial breakdowns (subtotal and total). Useful for supporting multi-market storefronts and aligned checkout experiences per region. Expects CartInput object, country, and language variables.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation cartCreate($cartInput: CartInput!, $country: CountryCode, $language: LanguageCode)@inContext(country: $country, language: $language){\n  cartCreate(input: $cartInput) {\n    userErrors {\n      code\n      message\n    }\n    cart {\n      id\n      checkoutUrl #URL for cart in local currency and language passed in\n      lines(first: 50) {\n        edges {\n          node {\n            id\n            merchandise {\n              ... on ProductVariant {\n                title\n                product {\n                  title\n                }\n                id\n                quantityAvailable\n              }\n            }\n          }\n        }\n      }\n      cost {\n        subtotalAmount {\n          amount #active local currency\n          currencyCode\n        }\n        totalAmount {\n          amount #active local currency\n          currencyCode\n        }\n      }\n    }\n  }\n}\n\nvariables\n{\n  \"cartInput\": {\n    \"lines\": [\n      {\n        \"quantity\": 3,\n        \"merchandiseId\": \"gid://shopify/ProductVariant/42485059584162\"\n      },\n      {\n        \"quantity\": 1,\n        \"merchandiseId\": \"gid://shopify/ProductVariant/42790980223138\"\n      }\n    ]\n    \n  },\n  \"country\": \"US\",\n  \"language\": \"ES\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Access Token - Shopify Storefront API (GraphQL)\nDESCRIPTION: This mutation exchanges a customer's email and password for an authentication access token needed to call customer-specific Storefront API queries. Required dependencies are a valid email and password, and the app must have 'unauthenticated_read_customers' scope. Inputs are provided as GraphQL variables, and outputs include the accessToken, expiry, and any user errors. Note: Each request should include appropriate scopes, and use of sensitive data (password) requires secure handling.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_28\n\nLANGUAGE: gql\nCODE:\n```\nmutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n  customerAccessTokenCreate(input: $input) {\n    customerAccessToken {\n      accessToken\n      expiresAt\n    }\n    customerUserErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"input\": {\n    \"email\": \"user@example.com\",\n    \"password\": \"HiZqFuDvDdQ7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Account - Shopify Storefront API (GraphQL)\nDESCRIPTION: This mutation creates a new Shopify customer account, including required information like email, password, and optionals like phone or marketing acceptance. Dependencies: no customer ID needed, just input credentials/fields structured as CustomerCreateInput. Output includes created customer details and error objects. Must securely manage user data and adhere to best practices for password handling. Successful creation triggers a customer activation process.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_32\n\nLANGUAGE: gql\nCODE:\n```\nmutation createCustomerAccount($input: CustomerCreateInput!) {\n  customerCreate(input: $input) {\n    customer {\n      id\n      email\n      firstName\n      lastName\n      phone\n    }\n    customerUserErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"input\": {\n    \"acceptsMarketing\": true,\n    \"email\": \"example@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"password\": \"qwerty12345\",\n    \"phone\": \"+64213444048\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Details - Shopify Storefront API (GraphQL)\nDESCRIPTION: This mutation updates customer account details (e.g., phone number) using a valid customerAccessToken. Inputs are the access token and a 'customer' object with update fields, both supplied as GraphQL variables. The response includes the updated customer ID, new (and potentially refreshed) access token, and any user errors. Useful for modifying user attributes after authentication. Ensure appropriate permission handling and input validation in production.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_31\n\nLANGUAGE: gql\nCODE:\n```\nmutation customerUpdate($customerAccessToken: String!, $customer: CustomerUpdateInput!) {\n  customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n    customer {\n      id\n    }\n    customerAccessToken {\n      accessToken\n      expiresAt\n    }\n    customerUserErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"customerAccessToken\": \"d794063da4e26c9b1a8d7b77bdfd6862\",\n  \"customer\": {\n    \"phone\": \"+61401425227\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Metafields - Shopify Storefront API (GraphQL)\nDESCRIPTION: This query fetches selected metafields for a customer, given a customerAccessToken and a set of namespace/key identifiers. The app must expose desired metafields via MetafieldStorefrontVisibility. Inputs required: customerAccessToken and a list of identifier objects (namespaces and keys) passed as variables. Output provides matched metafields with their id, key, value, namespace, and type. Be aware of metafield visibility constraints, and see Shopify documentation for further metafield management.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_30\n\nLANGUAGE: gql\nCODE:\n```\nquery CustomerMetafields($customerAccessToken: String!, $identifiers: [HasMetafieldsIdentifier!]!){\n  customer(customerAccessToken: $customerAccessToken) {\n    id\n    email\n    metafields (identifiers:$identifiers) {\n      id\n      key\n      value\n      namespace\n      type\n    }\n  }\n}\n\nvariables\n{\n  \"customerAccessToken\": \"7cd6d36137f41d57bb8e85ae0d178d60\",\n  \"identifiers\": [\n    {\n      \"namespace\": \"Membership\",\n      \"key\": \"VIP level\"\n    },\n    {\n      \"namespace\": \"Membership\",\n      \"key\": \"startDate\"\n    },\n    {\n      \"namespace\": \"note\",\n      \"key\": \"preference\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Customer Account - Shopify Storefront API (GraphQL)\nDESCRIPTION: This mutation activates a Shopify customer account using an activationToken (from the email activation URL) and desired password, paired with the customer ID. Required parameters: customer GID and a CustomerActivateInput containing activationToken and password. Outputs the activated customer record, an access token, and user errors. Activation is needed before login, and may also be handled via a URL-specific mutation for self-service.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_33\n\nLANGUAGE: gql\nCODE:\n```\nmutation activateCustomerAccount($id: ID!, $input: CustomerActivateInput!) {\n  customerActivate(id: $id, input: $input) {\n    customer {\n      id\n      email\n      firstName\n      lastName\n      phone\n    }\n    customerAccessToken {\n      accessToken\n      expiresAt\n    }\n    customerUserErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"id\": \"gid://shopify/Customer/5820694691862\",\n  \"input\": {\n    \"activationToken\": \"da48cbd301e7c31a9d5dca03fcf5cdb6-1671054502\",\n    \"password\": \"qwerty12345\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recovering Customer Account (Password Reset Request) - Shopify Storefront API (GraphQL)\nDESCRIPTION: This mutation initiates a password recovery workflow by emailing a reset URL to the customer. The only required input is the customer email. Response contains user error information, but no direct indicators of account existence (to prevent disclosure). Throttling by IP is enforced to prevent abuse; for premium apps, set the Shopify-Storefront-Buyer-IP header for proper rate-limiting. Limitation: multiple requests may be blocked by throttling.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_34\n\nLANGUAGE: gql\nCODE:\n```\nmutation recoverCustomerAccount($email: String!) {\n  customerRecover(email: $email) {\n    customerUserErrors {\n      code\n      field\n      message\n    }\n  }\n}\n\nvariables\n{\n  \"email\":\"example@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection Metafields by Namespace in GraphQL\nDESCRIPTION: Retrieves metafields for a specific collection and namespace. Requires MetafieldStorefrontVisibility configuration.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCollectionMetafieldsByNamespace($handle: String! $namespace: String!) {\n  collection(handle: $handle) {\n    id\n    metafields(identifiers: [{ namespace: $namespace, key: $key }]) {\n    key\n    namespace\n    value\n    id\n  }\n}\n}\n\nvariables\n{\n\"handle\": \"all\",\n\"namespace\": \"global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Metafield Visibility with Shopify Admin API - GraphQL\nDESCRIPTION: This GraphQL mutation exposes a metafield on a specified resource (e.g., a Collection) so it becomes available for queries via the Storefront API. To execute, proper Admin API authentication is required. Inputs include metafield key, namespace, and owner type. On success, it returns visibility record data and validation errors if any.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation createMetafieldStorefrontVisibility(\\n  $input: MetafieldStorefrontVisibilityInput!\\n) {\\n  metafieldStorefrontVisibilityCreate(input: $input) {\\n    metafieldStorefrontVisibility {\\n      id # MetafieldStorefrontVisibility record id\\n      key # Key must be unique within this namespace on this resource\\n      ownerType\\n      namespace\\n      updatedAt\\n    }\\n    userErrors {\\n      field\\n      message\\n    }\\n  }\\n}\\n\\nvariables\\n{\\n  \"input\": {\\n    \"key\": \"drying_instructions\",\\n    \"namespace\": \"garment_care\",\\n    \"ownerType\": \"COLLECTION\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MetafieldStorefrontVisibilities via Shopify Admin API - GraphQL\nDESCRIPTION: This GraphQL query lists current metafields exposed to the Storefront API by retrieving MetafieldStorefrontVisibility records filtered by namespace. Requires Admin API credentials. The query returns the ID, namespace, key, and creation timestamp for each visibility record.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getMetafieldStorefrontVisibilities($first: Int!, $namespace: String!) {\\n  metafieldStorefrontVisibilities(first: $first, namespace: $namespace) {\\n    edges {\\n      node {\\n        id # Metafield visibility record id\\n        namespace\\n        key\\n        createdAt\\n      }\\n    }\\n  }\\n}\\n\\nvariables\\n{\\n  \"first\": 5,\\n  \"namespace\": \"garment_care\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting MetafieldStorefrontVisibility via Shopify Admin API - GraphQL\nDESCRIPTION: This GraphQL mutation removes a metafield's visibility from the Storefront API by deleting its MetafieldStorefrontVisibility record, referenced by ID. Requires valid Admin API authentication and the specific visibility record ID. Returns the deleted ID and user error messages if the operation fails.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/README.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation deleteMetafieldStorefrontVisibilities($id: ID!) {\\n  metafieldStorefrontVisibilityDelete(id: $id) {\\n    deletedMetafieldStorefrontVisibilityId # The visibility record of the metafield hidden from Storefront API\\n    \\n    userErrors {\\n      field\\n      message\\n    }\\n  }\\n}\\n\\nvariables\\n{\\n  \"id\": \"gid://shopify/MetafieldStorefrontVisibility/1684242594\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Insomnia Package from Examples Directory (Markdown)\nDESCRIPTION: This snippet instructs users to validate their changes by importing the auto-generated Insomnia package stored at examples/storefront-api-learning-kit-insomnia.json into the Insomnia app. This step ensures that new or updated queries function correctly before submitting a pull request.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/contributing.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n4. Check your changes by importing the `examples/storefront-api-learning-kit-insomnia.json` file from your branch into the Insomnia app.\n```\n\n----------------------------------------\n\nTITLE: Defining Query and Variables File Naming (Markdown)\nDESCRIPTION: This snippet explains how each GraphQL query should be organized within its own folder, using consistent naming conventions such as query.graphql for the query file and variables.json for associated variables. It sets clear expectations for file format and hierarchy to ensure maintainability by all contributors.\nSOURCE: https://github.com/shopify/storefront-api-learning-kit/blob/main/contributing.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nEach query is contained in a folder. Queries are named `query.graphql`. If a query requires variables, those are added with a file named `variables.json` which is placed in the query folder.\n```"
  }
]